
DMA_first.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef8  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005190  08005190  00006190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080051d0  080051d0  000061d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080051d8  080051d8  000061d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080051dc  080051dc  000061dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  080051e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a28  24000014  080051f4  00007014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000a3c  080051f4  00007a3c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000226ad  00000000  00000000  00007042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000358c  00000000  00000000  000296ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010d0  00000000  00000000  0002cc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001ec5  00000000  00000000  0002dd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038e90  00000000  00000000  0002fc15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024715  00000000  00000000  00068aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00176620  00000000  00000000  0008d1ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002037da  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003098  00000000  00000000  00203820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000104f2  00000000  00000000  002068b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000007c  00000000  00000000  00216daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005178 	.word	0x08005178

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	08005178 	.word	0x08005178

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADC_custom_init>:

void ADC_custom_init(){


//	ADC3->CR &= ~ADC_CR_ADSTART;
	ADC3->SQR1=0; // per azzerare la configurazione dell'ide
 80005c8:	4b20      	ldr	r3, [pc, #128]	@ (800064c <ADC_custom_init+0x84>)
 80005ca:	2200      	movs	r2, #0
void ADC_custom_init(){
 80005cc:	b410      	push	{r4}
	ADC3->SQR1=0; // per azzerare la configurazione dell'ide
 80005ce:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere
 80005d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005d2:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_SQ1_Pos);
 80005d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005d6:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->PCSEL |= ADC_PCSEL_PCSEL_0; // Dichiaro quali canali leggere : 18 e 19
 80005d8:	69da      	ldr	r2, [r3, #28]
 80005da:	f042 0201 	orr.w	r2, r2, #1
 80005de:	61da      	str	r2, [r3, #28]


	/* Calibrazione */
	ADC3->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 80005e0:	689a      	ldr	r2, [r3, #8]
 80005e2:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80005e6:	609a      	str	r2, [r3, #8]
	ADC3->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 80005e8:	689a      	ldr	r2, [r3, #8]
 80005ea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80005ee:	609a      	str	r2, [r3, #8]
	ADC3->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 80005f0:	689a      	ldr	r2, [r3, #8]
 80005f2:	f022 0201 	bic.w	r2, r2, #1
 80005f6:	609a      	str	r2, [r3, #8]
	ADC3->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 80005f8:	689a      	ldr	r2, [r3, #8]
 80005fa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80005fe:	609a      	str	r2, [r3, #8]


	while((ADC3->CR & ADC_CR_ADCAL) != 0){};
 8000600:	689a      	ldr	r2, [r3, #8]
 8000602:	2a00      	cmp	r2, #0
 8000604:	dbfc      	blt.n	8000600 <ADC_custom_init+0x38>
	// FIne calibrazione

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000606:	6819      	ldr	r1, [r3, #0]
	ADC3->CR |= ADC_CR_ADEN;		// Accendo l' ADC

	while((ADC3->ISR & ADC_ISR_ADRDY) != 0){}
 8000608:	4a10      	ldr	r2, [pc, #64]	@ (800064c <ADC_custom_init+0x84>)
	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 800060a:	f041 0101 	orr.w	r1, r1, #1
 800060e:	6019      	str	r1, [r3, #0]
	ADC3->CR |= ADC_CR_ADEN;		// Accendo l' ADC
 8000610:	6899      	ldr	r1, [r3, #8]
 8000612:	f041 0101 	orr.w	r1, r1, #1
 8000616:	6099      	str	r1, [r3, #8]
	while((ADC3->ISR & ADC_ISR_ADRDY) != 0){}
 8000618:	6813      	ldr	r3, [r2, #0]
 800061a:	f013 0301 	ands.w	r3, r3, #1
 800061e:	d1fb      	bne.n	8000618 <ADC_custom_init+0x50>

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 8000620:	6810      	ldr	r0, [r2, #0]

	/* ADR ACCESO */

	// TIM6 set to 240Mhz

	TIM6->PSC = 10; // TIM6 CLOCK/PSC
 8000622:	240a      	movs	r4, #10
 8000624:	490a      	ldr	r1, [pc, #40]	@ (8000650 <ADC_custom_init+0x88>)
	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 8000626:	f040 0001 	orr.w	r0, r0, #1
 800062a:	6010      	str	r0, [r2, #0]
	TIM6->ARR = 15;	// TIM6 CLOCK/PSC/ARR
 800062c:	200f      	movs	r0, #15
	TIM6->PSC = 10; // TIM6 CLOCK/PSC
 800062e:	628c      	str	r4, [r1, #40]	@ 0x28
	TIM6->ARR = 15;	// TIM6 CLOCK/PSC/ARR
 8000630:	62c8      	str	r0, [r1, #44]	@ 0x2c
	TIM6->CNT = 0;
 8000632:	624b      	str	r3, [r1, #36]	@ 0x24
	TIM6->DIER &= ~TIM_DIER_UIE;
 8000634:	68cb      	ldr	r3, [r1, #12]

	ADC3->IER |= ADC_IER_EOCIE;
}
 8000636:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM6->DIER &= ~TIM_DIER_UIE;
 800063a:	f023 0301 	bic.w	r3, r3, #1
 800063e:	60cb      	str	r3, [r1, #12]
	ADC3->IER |= ADC_IER_EOCIE;
 8000640:	6853      	ldr	r3, [r2, #4]
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	6053      	str	r3, [r2, #4]
}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	58026000 	.word	0x58026000
 8000650:	40001000 	.word	0x40001000

08000654 <DMA_custom_init>:

uint16_t DMA_data_buffer[DMA_DATA_BUFF_SIZE];

void DMA_custom_init(){

	DMA2_Stream0->M0AR = (uint32_t) (&DMA_data_buffer);	// inidico l'indirizzo dello storarge di dati
 8000654:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <DMA_custom_init+0x58>)
	DMA2_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
	DMA2_Stream1->PAR = (uint32_t) (&USART3->TDR);

	uint32_t n_misure = DMA_DATA_BUFF_SIZE;

	DMA2_Stream0->NDTR = n_misure;			// numero elementi da prendere da ADC3
 8000656:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
	DMA2_Stream0->M0AR = (uint32_t) (&DMA_data_buffer);	// inidico l'indirizzo dello storarge di dati
 800065a:	4a15      	ldr	r2, [pc, #84]	@ (80006b0 <DMA_custom_init+0x5c>)
	DMA2_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
 800065c:	4915      	ldr	r1, [pc, #84]	@ (80006b4 <DMA_custom_init+0x60>)
void DMA_custom_init(){
 800065e:	b410      	push	{r4}
	DMA2_Stream0->M0AR = (uint32_t) (&DMA_data_buffer);	// inidico l'indirizzo dello storarge di dati
 8000660:	61da      	str	r2, [r3, #28]
	DMA2_Stream1->PAR = (uint32_t) (&USART3->TDR);
 8000662:	4c15      	ldr	r4, [pc, #84]	@ (80006b8 <DMA_custom_init+0x64>)
	DMA2_Stream1->M0AR = (uint32_t) (&DMA_data_buffer);
 8000664:	635a      	str	r2, [r3, #52]	@ 0x34
	DMA2_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
 8000666:	6199      	str	r1, [r3, #24]
	DMA2_Stream1->NDTR = n_misure*2;			// numero elementi da mandare a USART3
 8000668:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
	DMA2_Stream1->PAR = (uint32_t) (&USART3->TDR);
 800066c:	631c      	str	r4, [r3, #48]	@ 0x30
	DMA2_Stream0->NDTR = n_misure;			// numero elementi da prendere da ADC3
 800066e:	6158      	str	r0, [r3, #20]
	DMA2_Stream1->NDTR = n_misure*2;			// numero elementi da mandare a USART3
 8000670:	62d9      	str	r1, [r3, #44]	@ 0x2c

	DMA2_Stream0->CR &= ~DMA_SxCR_TCIE;		// disablilito interrupt di fine ricezione
 8000672:	6919      	ldr	r1, [r3, #16]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine trasmissione

	ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);	// DMA in single shot mode
 8000674:	4a11      	ldr	r2, [pc, #68]	@ (80006bc <DMA_custom_init+0x68>)
	DMA2_Stream0->CR &= ~DMA_SxCR_TCIE;		// disablilito interrupt di fine ricezione
 8000676:	f021 0110 	bic.w	r1, r1, #16
	DMA2_Stream1->CR |= DMA_SxCR_EN;

	ADC3->CR  |= ADC_CR_ADSTART;

	//TIM6->CR1 |= TIM_CR1_CEN;	LO ACCENDO NELL'USART3 INTERR
}
 800067a:	f85d 4b04 	ldr.w	r4, [sp], #4
	DMA2_Stream0->CR &= ~DMA_SxCR_TCIE;		// disablilito interrupt di fine ricezione
 800067e:	6119      	str	r1, [r3, #16]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine trasmissione
 8000680:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000682:	f041 0110 	orr.w	r1, r1, #16
 8000686:	6299      	str	r1, [r3, #40]	@ 0x28
	ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);	// DMA in single shot mode
 8000688:	68d1      	ldr	r1, [r2, #12]
 800068a:	f041 0103 	orr.w	r1, r1, #3
 800068e:	60d1      	str	r1, [r2, #12]
	DMA2_Stream0->CR |= DMA_SxCR_EN;
 8000690:	6919      	ldr	r1, [r3, #16]
 8000692:	f041 0101 	orr.w	r1, r1, #1
 8000696:	6119      	str	r1, [r3, #16]
	DMA2_Stream1->CR |= DMA_SxCR_EN;
 8000698:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800069a:	f041 0101 	orr.w	r1, r1, #1
 800069e:	6299      	str	r1, [r3, #40]	@ 0x28
	ADC3->CR  |= ADC_CR_ADSTART;
 80006a0:	6893      	ldr	r3, [r2, #8]
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	6093      	str	r3, [r2, #8]
}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40020400 	.word	0x40020400
 80006b0:	24000034 	.word	0x24000034
 80006b4:	58026040 	.word	0x58026040
 80006b8:	40004828 	.word	0x40004828
 80006bc:	58026000 	.word	0x58026000

080006c0 <DMA_custom_interrupt_tx>:

void DMA_custom_interrupt_tx(){

	extern uint16_t trig_indx;

	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 80006c0:	4a11      	ldr	r2, [pc, #68]	@ (8000708 <DMA_custom_interrupt_tx+0x48>)

	DMA2->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 80006c2:	f04f 30ff 	mov.w	r0, #4294967295
 80006c6:	4b11      	ldr	r3, [pc, #68]	@ (800070c <DMA_custom_interrupt_tx+0x4c>)
	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 80006c8:	6891      	ldr	r1, [r2, #8]
 80006ca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80006ce:	6091      	str	r1, [r2, #8]
	DMA2->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 80006d0:	6098      	str	r0, [r3, #8]
	DMA2->HIFCR = 0xffffffff;
 80006d2:	60d8      	str	r0, [r3, #12]

	//ADC3->CFGR |= (1 << ADC_CFGR_DMNGT_Pos); // ACCENDO la ricezione di dati dall'adc

	DMA2_Stream0->CR |= DMA_SxCR_EN;
 80006d4:	6919      	ldr	r1, [r3, #16]
 80006d6:	f041 0101 	orr.w	r1, r1, #1
 80006da:	6119      	str	r1, [r3, #16]
	DMA2_Stream1->CR |= DMA_SxCR_EN;
 80006dc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80006de:	f041 0101 	orr.w	r1, r1, #1
 80006e2:	6299      	str	r1, [r3, #40]	@ 0x28

	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 80006e4:	69d3      	ldr	r3, [r2, #28]
 80006e6:	0619      	lsls	r1, r3, #24
 80006e8:	d5fc      	bpl.n	80006e4 <DMA_custom_interrupt_tx+0x24>
	USART3->TDR = (unsigned char)(trig_indx & 0xFF );
 80006ea:	4809      	ldr	r0, [pc, #36]	@ (8000710 <DMA_custom_interrupt_tx+0x50>)
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 80006ec:	4906      	ldr	r1, [pc, #24]	@ (8000708 <DMA_custom_interrupt_tx+0x48>)
	USART3->TDR = (unsigned char)(trig_indx & 0xFF );
 80006ee:	7803      	ldrb	r3, [r0, #0]
 80006f0:	6293      	str	r3, [r2, #40]	@ 0x28
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 80006f2:	69cb      	ldr	r3, [r1, #28]
 80006f4:	061a      	lsls	r2, r3, #24
 80006f6:	d5fc      	bpl.n	80006f2 <DMA_custom_interrupt_tx+0x32>
	USART3->TDR = *((unsigned char*)&trig_indx + 1);
 80006f8:	7843      	ldrb	r3, [r0, #1]
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 80006fa:	4a03      	ldr	r2, [pc, #12]	@ (8000708 <DMA_custom_interrupt_tx+0x48>)
	USART3->TDR = *((unsigned char*)&trig_indx + 1);
 80006fc:	628b      	str	r3, [r1, #40]	@ 0x28
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 80006fe:	69d3      	ldr	r3, [r2, #28]
 8000700:	061b      	lsls	r3, r3, #24
 8000702:	d5fc      	bpl.n	80006fe <DMA_custom_interrupt_tx+0x3e>

//	ADC3->CR |= ADC_CR_ADSTART;
	//TIM6->CR1 |= TIM_CR1_CEN;

//	USART3->CR3 |= USART_CR3_DMAT;
}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40004800 	.word	0x40004800
 800070c:	40020400 	.word	0x40020400
 8000710:	24000000 	.word	0x24000000

08000714 <DMA_custom_interrupt_rx>:
//
//	USART3->CR3 |= USART_CR3_DMAT;			  // ATTVIO trasmissione usart
//
//	DMA2_Stream0->CR |= DMA_SxCR_EN;
//	DMA2_Stream1->CR |= DMA_SxCR_EN;
}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop

08000718 <usart3_init>:
#include "Custom_usart.h"
#include <stdint.h>

void usart3_init(){

    USART3->CR1 |= USART_CR1_TE;
 8000718:	4b0a      	ldr	r3, [pc, #40]	@ (8000744 <usart3_init+0x2c>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	f042 0208 	orr.w	r2, r2, #8
 8000720:	601a      	str	r2, [r3, #0]
    USART3->CR1 |= USART_CR1_RE;
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	f042 0204 	orr.w	r2, r2, #4
 8000728:	601a      	str	r2, [r3, #0]

    USART3->CR1 &= ~USART_CR1_TXEIE;
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000730:	601a      	str	r2, [r3, #0]
    USART3->CR1 |= USART_CR1_RXNEIE;
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	f042 0220 	orr.w	r2, r2, #32
 8000738:	601a      	str	r2, [r3, #0]

    USART3->CR1 |= USART_CR1_UE;
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	f042 0201 	orr.w	r2, r2, #1
 8000740:	601a      	str	r2, [r3, #0]

}
 8000742:	4770      	bx	lr
 8000744:	40004800 	.word	0x40004800

08000748 <usart3_custom_interrupt>:

void usart3_custom_interrupt(){

	char data = USART3->RDR;
 8000748:	4a0d      	ldr	r2, [pc, #52]	@ (8000780 <usart3_custom_interrupt+0x38>)
 800074a:	6a53      	ldr	r3, [r2, #36]	@ 0x24


	if(data == '?'){
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000750:	d108      	bne.n	8000764 <usart3_custom_interrupt+0x1c>

		USART3->CR3 &= ~USART_CR3_DMAT;	// spengo l'usart
 8000752:	6893      	ldr	r3, [r2, #8]
		TIM6->CR1 |= TIM_CR1_CEN;		// accendo l'adc
 8000754:	490b      	ldr	r1, [pc, #44]	@ (8000784 <usart3_custom_interrupt+0x3c>)
		USART3->CR3 &= ~USART_CR3_DMAT;	// spengo l'usart
 8000756:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800075a:	6093      	str	r3, [r2, #8]
		TIM6->CR1 |= TIM_CR1_CEN;		// accendo l'adc
 800075c:	680b      	ldr	r3, [r1, #0]
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	600b      	str	r3, [r1, #0]
		//USART3->CR1 &= ~USART_CR1_RXNEIE;

	}

	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <usart3_custom_interrupt+0x38>)
 8000766:	6a1a      	ldr	r2, [r3, #32]
 8000768:	f042 0208 	orr.w	r2, r2, #8
 800076c:	621a      	str	r2, [r3, #32]
	USART3->ICR |= USART_ICR_TCCF;  //Azzeramento flag interrupt trasmissione
 800076e:	6a1a      	ldr	r2, [r3, #32]
 8000770:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000774:	621a      	str	r2, [r3, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 8000776:	699a      	ldr	r2, [r3, #24]
 8000778:	f042 0208 	orr.w	r2, r2, #8
 800077c:	619a      	str	r2, [r3, #24]
}
 800077e:	4770      	bx	lr
 8000780:	40004800 	.word	0x40004800
 8000784:	40001000 	.word	0x40001000

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b530      	push	{r4, r5, lr}
 800078a:	b0a1      	sub	sp, #132	@ 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078c:	224c      	movs	r2, #76	@ 0x4c
 800078e:	2100      	movs	r1, #0
 8000790:	a80c      	add	r0, sp, #48	@ 0x30
 8000792:	f004 fcc5 	bl	8005120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000796:	2220      	movs	r2, #32
 8000798:	2100      	movs	r1, #0
 800079a:	a804      	add	r0, sp, #16
 800079c:	f004 fcc0 	bl	8005120 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007a0:	2002      	movs	r0, #2
 80007a2:	f001 fdb1 	bl	8002308 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a6:	4b3a      	ldr	r3, [pc, #232]	@ (8000890 <SystemClock_Config+0x108>)
 80007a8:	2100      	movs	r1, #0
 80007aa:	4a3a      	ldr	r2, [pc, #232]	@ (8000894 <SystemClock_Config+0x10c>)
 80007ac:	9101      	str	r1, [sp, #4]
 80007ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80007b0:	f021 0101 	bic.w	r1, r1, #1
 80007b4:	62d9      	str	r1, [r3, #44]	@ 0x2c
 80007b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	9301      	str	r3, [sp, #4]
 80007be:	6993      	ldr	r3, [r2, #24]
 80007c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007c4:	6193      	str	r3, [r2, #24]
 80007c6:	6993      	ldr	r3, [r2, #24]
 80007c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007cc:	9301      	str	r3, [sp, #4]
 80007ce:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007d0:	6993      	ldr	r3, [r2, #24]
 80007d2:	0499      	lsls	r1, r3, #18
 80007d4:	d5fc      	bpl.n	80007d0 <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	4b30      	ldr	r3, [pc, #192]	@ (8000898 <SystemClock_Config+0x110>)
 80007d8:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 80007dc:	f041 0102 	orr.w	r1, r1, #2
 80007e0:	f8c3 10f4 	str.w	r1, [r3, #244]	@ 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007e4:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	9302      	str	r3, [sp, #8]
 80007f0:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007f2:	9103      	str	r1, [sp, #12]
 80007f4:	6991      	ldr	r1, [r2, #24]
 80007f6:	4b26      	ldr	r3, [pc, #152]	@ (8000890 <SystemClock_Config+0x108>)
 80007f8:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80007fc:	6191      	str	r1, [r2, #24]
 80007fe:	6992      	ldr	r2, [r2, #24]
 8000800:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000804:	9203      	str	r2, [sp, #12]
 8000806:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000808:	4a22      	ldr	r2, [pc, #136]	@ (8000894 <SystemClock_Config+0x10c>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800080a:	f041 0101 	orr.w	r1, r1, #1
 800080e:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	9303      	str	r3, [sp, #12]
 8000818:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800081a:	6993      	ldr	r3, [r2, #24]
 800081c:	049b      	lsls	r3, r3, #18
 800081e:	d5fc      	bpl.n	800081a <SystemClock_Config+0x92>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000820:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000822:	2278      	movs	r2, #120	@ 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000826:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	a80c      	add	r0, sp, #48	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 120;
 800082a:	e9cd 1217 	strd	r1, r2, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800082e:	220c      	movs	r2, #12
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000830:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8000888 <SystemClock_Config+0x100>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000834:	e9cd 3315 	strd	r3, r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000838:	e9cd 3419 	strd	r3, r4, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800083c:	e9cd 321b 	strd	r3, r2, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000840:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000842:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000846:	e9cd 331d 	strd	r3, r3, [sp, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084a:	f001 fdf3 	bl	8002434 <HAL_RCC_OscConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	b108      	cbz	r0, 8000856 <SystemClock_Config+0xce>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000852:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	e7fe      	b.n	8000854 <SystemClock_Config+0xcc>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000856:	2240      	movs	r2, #64	@ 0x40
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800085a:	2308      	movs	r3, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	253f      	movs	r5, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085e:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000860:	2403      	movs	r4, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000862:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000864:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000866:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000868:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800086a:	e9cd 3207 	strd	r3, r2, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800086e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000872:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000876:	f002 f95d 	bl	8002b34 <HAL_RCC_ClockConfig>
 800087a:	b108      	cbz	r0, 8000880 <SystemClock_Config+0xf8>
 800087c:	b672      	cpsid	i
  while (1)
 800087e:	e7fe      	b.n	800087e <SystemClock_Config+0xf6>
}
 8000880:	b021      	add	sp, #132	@ 0x84
 8000882:	bd30      	pop	{r4, r5, pc}
 8000884:	f3af 8000 	nop.w
 8000888:	00000001 	.word	0x00000001
 800088c:	00050000 	.word	0x00050000
 8000890:	58000400 	.word	0x58000400
 8000894:	58024800 	.word	0x58024800
 8000898:	58024400 	.word	0x58024400

0800089c <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	4db7      	ldr	r5, [pc, #732]	@ (8000b7c <main+0x2e0>)
  GPIO_InitStruct.Pin = B1_Pin;
 80008a0:	f44f 5900 	mov.w	r9, #8192	@ 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2602      	movs	r6, #2
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a6:	f04f 080b 	mov.w	r8, #11
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b090      	sub	sp, #64	@ 0x40
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80008ae:	2701      	movs	r7, #1
  HAL_Init();
 80008b0:	f000 fbd2 	bl	8001058 <HAL_Init>
  SystemClock_Config();
 80008b4:	f7ff ff68 	bl	8000788 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	940d      	str	r4, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008ba:	4622      	mov	r2, r4
 80008bc:	f244 0101 	movw	r1, #16385	@ 0x4001
 80008c0:	48af      	ldr	r0, [pc, #700]	@ (8000b80 <main+0x2e4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 80008c6:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80008d6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	9302      	str	r3, [sp, #8]
 80008e0:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80008e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ea:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80008ee:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80008f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f6:	9303      	str	r3, [sp, #12]
 80008f8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000906:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	9304      	str	r3, [sp, #16]
 8000910:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000916:	f043 0302 	orr.w	r3, r3, #2
 800091a:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800091e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	9305      	str	r3, [sp, #20]
 8000928:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800092e:	f043 0308 	orr.w	r3, r3, #8
 8000932:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000936:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	9306      	str	r3, [sp, #24]
 8000940:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000942:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800094a:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800094e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000956:	9307      	str	r3, [sp, #28]
 8000958:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800095a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800095e:	f043 0310 	orr.w	r3, r3, #16
 8000962:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000966:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800096a:	f003 0310 	and.w	r3, r3, #16
 800096e:	9308      	str	r3, [sp, #32]
 8000970:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000972:	f001 fcc5 	bl	8002300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000976:	4622      	mov	r2, r4
 8000978:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800097c:	4881      	ldr	r0, [pc, #516]	@ (8000b84 <main+0x2e8>)
 800097e:	f001 fcbf 	bl	8002300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000982:	4622      	mov	r2, r4
 8000984:	2102      	movs	r1, #2
 8000986:	4880      	ldr	r0, [pc, #512]	@ (8000b88 <main+0x2ec>)
 8000988:	f001 fcba 	bl	8002300 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800098c:	a909      	add	r1, sp, #36	@ 0x24
 800098e:	487f      	ldr	r0, [pc, #508]	@ (8000b8c <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = B1_Pin;
 8000992:	e9cd 9409 	strd	r9, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000996:	f001 fb71 	bl	800207c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800099a:	2332      	movs	r3, #50	@ 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099c:	a909      	add	r1, sp, #36	@ 0x24
 800099e:	487b      	ldr	r0, [pc, #492]	@ (8000b8c <main+0x2f0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009a0:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	960a      	str	r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a4:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ac:	f001 fb66 	bl	800207c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80009b0:	2386      	movs	r3, #134	@ 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	a909      	add	r1, sp, #36	@ 0x24
 80009b4:	4876      	ldr	r0, [pc, #472]	@ (8000b90 <main+0x2f4>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80009b6:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	e9cd 640a 	strd	r6, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009bc:	e9cd 480c 	strd	r4, r8, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f001 fb5c 	bl	800207c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009c4:	f244 0301 	movw	r3, #16385	@ 0x4001
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	a909      	add	r1, sp, #36	@ 0x24
 80009ca:	486d      	ldr	r0, [pc, #436]	@ (8000b80 <main+0x2e4>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009cc:	e9cd 3709 	strd	r3, r7, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f001 fb52 	bl	800207c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	a909      	add	r1, sp, #36	@ 0x24
 80009da:	4869      	ldr	r0, [pc, #420]	@ (8000b80 <main+0x2e4>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009dc:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	e9cd 9609 	strd	r9, r6, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80009e4:	f44f 6980 	mov.w	r9, #1024	@ 0x400
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	f001 fb46 	bl	800207c <HAL_GPIO_Init>
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009f0:	a909      	add	r1, sp, #36	@ 0x24
 80009f2:	4864      	ldr	r0, [pc, #400]	@ (8000b84 <main+0x2e8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80009f6:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	e9cd 740a 	strd	r7, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f001 fb3d 	bl	800207c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a06:	2180      	movs	r1, #128	@ 0x80
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a08:	4862      	ldr	r0, [pc, #392]	@ (8000b94 <main+0x2f8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0c:	e9cd 1309 	strd	r1, r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a10:	a909      	add	r1, sp, #36	@ 0x24
 8000a12:	f001 fb33 	bl	800207c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000a16:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	a909      	add	r1, sp, #36	@ 0x24
 8000a1c:	485c      	ldr	r0, [pc, #368]	@ (8000b90 <main+0x2f4>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000a1e:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000a20:	230a      	movs	r3, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000a24:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	e9cd 640a 	strd	r6, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f001 fb27 	bl	800207c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000a2e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a32:	a909      	add	r1, sp, #36	@ 0x24
 8000a34:	4857      	ldr	r0, [pc, #348]	@ (8000b94 <main+0x2f8>)
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000a36:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a3a:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	e9cd 640a 	strd	r6, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a42:	f001 fb1b 	bl	800207c <HAL_GPIO_Init>
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a46:	a909      	add	r1, sp, #36	@ 0x24
 8000a48:	484f      	ldr	r0, [pc, #316]	@ (8000b88 <main+0x2ec>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	e9cd 6709 	strd	r6, r7, [sp, #36]	@ 0x24
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f001 fb13 	bl	800207c <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a56:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a5a:	4622      	mov	r2, r4
 8000a5c:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a5e:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a60:	2038      	movs	r0, #56	@ 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a62:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8000a66:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  hadc3.Instance = ADC3;
 8000a6a:	4d4b      	ldr	r5, [pc, #300]	@ (8000b98 <main+0x2fc>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a6c:	4033      	ands	r3, r6
 8000a6e:	9301      	str	r3, [sp, #4]
 8000a70:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a72:	f000 ff35 	bl	80018e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a76:	2038      	movs	r0, #56	@ 0x38
 8000a78:	f000 ff6e 	bl	8001958 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a7c:	4622      	mov	r2, r4
 8000a7e:	4621      	mov	r1, r4
 8000a80:	2039      	movs	r0, #57	@ 0x39
 8000a82:	f000 ff2d 	bl	80018e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a86:	2039      	movs	r0, #57	@ 0x39
 8000a88:	f000 ff66 	bl	8001958 <HAL_NVIC_EnableIRQ>
  hadc3.Instance = ADC3;
 8000a8c:	4b43      	ldr	r3, [pc, #268]	@ (8000b9c <main+0x300>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8e:	940f      	str	r4, [sp, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a90:	4628      	mov	r0, r5
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a92:	606c      	str	r4, [r5, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a94:	60ec      	str	r4, [r5, #12]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a96:	82ac      	strh	r4, [r5, #20]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a98:	772c      	strb	r4, [r5, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a9a:	636c      	str	r4, [r5, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000a9c:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc3.Instance = ADC3;
 8000aa0:	602b      	str	r3, [r5, #0]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000aa2:	f44f 63b4 	mov.w	r3, #1440	@ 0x5a0
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000aa6:	f8c5 9028 	str.w	r9, [r5, #40]	@ 0x28
  hadc3.Init.NbrOfConversion = 1;
 8000aaa:	61af      	str	r7, [r5, #24]
  hadc3.Init.Oversampling.Ratio = 1;
 8000aac:	63ef      	str	r7, [r5, #60]	@ 0x3c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000aae:	626b      	str	r3, [r5, #36]	@ 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ab0:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 8000ab4:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8000ab8:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000abc:	e9c5 440b 	strd	r4, r4, [r5, #44]	@ 0x2c
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ac0:	2404      	movs	r4, #4
 8000ac2:	612c      	str	r4, [r5, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ac4:	f000 fdee 	bl	80016a4 <HAL_ADC_Init>
 8000ac8:	b108      	cbz	r0, 8000ace <main+0x232>
 8000aca:	b672      	cpsid	i
  while (1)
 8000acc:	e7fe      	b.n	8000acc <main+0x230>
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000ace:	60a8      	str	r0, [r5, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ad0:	4628      	mov	r0, r5
 8000ad2:	f000 fde7 	bl	80016a4 <HAL_ADC_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	b108      	cbz	r0, 8000ade <main+0x242>
 8000ada:	b672      	cpsid	i
  while (1)
 8000adc:	e7fe      	b.n	8000adc <main+0x240>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ade:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ae0:	a909      	add	r1, sp, #36	@ 0x24
  sConfig.Offset = 0;
 8000ae2:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ae4:	4628      	mov	r0, r5
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ae6:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aea:	2306      	movs	r3, #6
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aec:	940d      	str	r4, [sp, #52]	@ 0x34
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aee:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000af0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
  sConfig.Channel = ADC_CHANNEL_0;
 8000af4:	9709      	str	r7, [sp, #36]	@ 0x24
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000af6:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000af8:	f000 fb00 	bl	80010fc <HAL_ADC_ConfigChannel>
 8000afc:	4603      	mov	r3, r0
 8000afe:	b108      	cbz	r0, 8000b04 <main+0x268>
 8000b00:	b672      	cpsid	i
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <main+0x266>
  huart3.Instance = USART3;
 8000b04:	4c26      	ldr	r4, [pc, #152]	@ (8000ba0 <main+0x304>)
 8000b06:	4a27      	ldr	r2, [pc, #156]	@ (8000ba4 <main+0x308>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b08:	60a0      	str	r0, [r4, #8]
  huart3.Instance = USART3;
 8000b0a:	6022      	str	r2, [r4, #0]
  huart3.Init.BaudRate = 1000000;
 8000b0c:	4a26      	ldr	r2, [pc, #152]	@ (8000ba8 <main+0x30c>)
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	61a0      	str	r0, [r4, #24]
  huart3.Init.BaudRate = 1000000;
 8000b10:	6062      	str	r2, [r4, #4]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b12:	220c      	movs	r2, #12
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b14:	e9c4 0003 	strd	r0, r0, [r4, #12]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b18:	e9c4 0007 	strd	r0, r0, [r4, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b1c:	4620      	mov	r0, r4
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b1e:	6162      	str	r2, [r4, #20]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b20:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b24:	f004 fa26 	bl	8004f74 <HAL_UART_Init>
 8000b28:	4601      	mov	r1, r0
 8000b2a:	b108      	cbz	r0, 8000b30 <main+0x294>
 8000b2c:	b672      	cpsid	i
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <main+0x292>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b30:	4620      	mov	r0, r4
 8000b32:	f004 fa71 	bl	8005018 <HAL_UARTEx_SetTxFifoThreshold>
 8000b36:	4601      	mov	r1, r0
 8000b38:	b108      	cbz	r0, 8000b3e <main+0x2a2>
 8000b3a:	b672      	cpsid	i
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <main+0x2a0>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3e:	4620      	mov	r0, r4
 8000b40:	f004 faac 	bl	800509c <HAL_UARTEx_SetRxFifoThreshold>
 8000b44:	b108      	cbz	r0, 8000b4a <main+0x2ae>
 8000b46:	b672      	cpsid	i
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <main+0x2ac>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	f004 fa46 	bl	8004fdc <HAL_UARTEx_DisableFifoMode>
 8000b50:	b108      	cbz	r0, 8000b56 <main+0x2ba>
 8000b52:	b672      	cpsid	i
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <main+0x2b8>
  htim6.Instance = TIM6;
 8000b56:	4c15      	ldr	r4, [pc, #84]	@ (8000bac <main+0x310>)
 8000b58:	4a15      	ldr	r2, [pc, #84]	@ (8000bb0 <main+0x314>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5a:	900b      	str	r0, [sp, #44]	@ 0x2c
  htim6.Instance = TIM6;
 8000b5c:	6022      	str	r2, [r4, #0]
  htim6.Init.Period = 65535;
 8000b5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b62:	61a0      	str	r0, [r4, #24]
  htim6.Init.Period = 65535;
 8000b64:	60e2      	str	r2, [r4, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b66:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6a:	e9c4 7001 	strd	r7, r0, [r4, #4]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b6e:	4620      	mov	r0, r4
 8000b70:	f003 fdc0 	bl	80046f4 <HAL_TIM_Base_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	b1e8      	cbz	r0, 8000bb4 <main+0x318>
 8000b78:	b672      	cpsid	i
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <main+0x2de>
 8000b7c:	58024400 	.word	0x58024400
 8000b80:	58020400 	.word	0x58020400
 8000b84:	58020c00 	.word	0x58020c00
 8000b88:	58021000 	.word	0x58021000
 8000b8c:	58020800 	.word	0x58020800
 8000b90:	58020000 	.word	0x58020000
 8000b94:	58021800 	.word	0x58021800
 8000b98:	240009d4 	.word	0x240009d4
 8000b9c:	58026000 	.word	0x58026000
 8000ba0:	2400087c 	.word	0x2400087c
 8000ba4:	40004800 	.word	0x40004800
 8000ba8:	000f4240 	.word	0x000f4240
 8000bac:	24000910 	.word	0x24000910
 8000bb0:	40001000 	.word	0x40001000
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bb4:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bb6:	a909      	add	r1, sp, #36	@ 0x24
 8000bb8:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bba:	930b      	str	r3, [sp, #44]	@ 0x2c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bbc:	9209      	str	r2, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bbe:	f003 fe3f 	bl	8004840 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc2:	b108      	cbz	r0, 8000bc8 <main+0x32c>
 8000bc4:	b672      	cpsid	i
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <main+0x32a>
  usart3_init();
 8000bc8:	f7ff fda6 	bl	8000718 <usart3_init>
  ADC_custom_init();
 8000bcc:	f7ff fcfc 	bl	80005c8 <ADC_custom_init>
  DMA_custom_init();
 8000bd0:	f7ff fd40 	bl	8000654 <DMA_custom_init>
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <main+0x338>
 8000bd6:	bf00      	nop

08000bd8 <Error_Handler>:
 8000bd8:	b672      	cpsid	i
  while (1)
 8000bda:	e7fe      	b.n	8000bda <Error_Handler+0x2>

08000bdc <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bdc:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <HAL_MspInit+0x20>)
{
 8000bde:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000be4:	f042 0202 	orr.w	r2, r2, #2
 8000be8:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bf0:	f003 0302 	and.w	r3, r3, #2
 8000bf4:	9301      	str	r3, [sp, #4]
 8000bf6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf8:	b002      	add	sp, #8
 8000bfa:	4770      	bx	lr
 8000bfc:	58024400 	.word	0x58024400

08000c00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c00:	b530      	push	{r4, r5, lr}
 8000c02:	b0b3      	sub	sp, #204	@ 0xcc
 8000c04:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c06:	22c0      	movs	r2, #192	@ 0xc0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	a802      	add	r0, sp, #8
 8000c0c:	f004 fa88 	bl	8005120 <memset>
  if(hadc->Instance==ADC3)
 8000c10:	4b35      	ldr	r3, [pc, #212]	@ (8000ce8 <HAL_ADC_MspInit+0xe8>)
 8000c12:	6822      	ldr	r2, [r4, #0]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d001      	beq.n	8000c1c <HAL_ADC_MspInit+0x1c>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8000c18:	b033      	add	sp, #204	@ 0xcc
 8000c1a:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c1c:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000c1e:	2201      	movs	r2, #1
    PeriphClkInitStruct.PLL2.PLL2N = 20;
 8000c20:	2114      	movs	r1, #20
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c22:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c24:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000c26:	9204      	str	r2, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c28:	2202      	movs	r2, #2
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c2a:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c2c:	23c0      	movs	r3, #192	@ 0xc0
    PeriphClkInitStruct.PLL2.PLL2N = 20;
 8000c2e:	9105      	str	r1, [sp, #20]
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c30:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8000ce0 <HAL_ADC_MspInit+0xe0>
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c34:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000c38:	2320      	movs	r3, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c3a:	ed8d 7b02 	vstr	d7, [sp, #8]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000c3e:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c40:	f002 fa56 	bl	80030f0 <HAL_RCCEx_PeriphCLKConfig>
 8000c44:	2800      	cmp	r0, #0
 8000c46:	d142      	bne.n	8000cce <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000c48:	4b28      	ldr	r3, [pc, #160]	@ (8000cec <HAL_ADC_MspInit+0xec>)
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000c4a:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
    hdma_adc3.Instance = DMA2_Stream0;
 8000c4e:	4d28      	ldr	r5, [pc, #160]	@ (8000cf0 <HAL_ADC_MspInit+0xf0>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000c50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000c54:	4608      	mov	r0, r1
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000c56:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000c5a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000c5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c62:	f002 7280 	and.w	r2, r2, #16777216	@ 0x1000000
 8000c66:	9200      	str	r2, [sp, #0]
 8000c68:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c6e:	f042 0204 	orr.w	r2, r2, #4
 8000c72:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	9301      	str	r3, [sp, #4]
 8000c80:	9b01      	ldr	r3, [sp, #4]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000c82:	f000 fa31 	bl	80010e8 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c86:	2300      	movs	r3, #0
    hdma_adc3.Instance = DMA2_Stream0;
 8000c88:	491a      	ldr	r1, [pc, #104]	@ (8000cf4 <HAL_ADC_MspInit+0xf4>)
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000c8a:	2273      	movs	r2, #115	@ 0x73
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000c8c:	4628      	mov	r0, r5
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000c8e:	622b      	str	r3, [r5, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c90:	626b      	str	r3, [r5, #36]	@ 0x24
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000c92:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000c96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000c9e:	e9c5 3103 	strd	r3, r1, [r5, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ca2:	616a      	str	r2, [r5, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ca4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000ca8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cac:	e9c5 1206 	strd	r1, r2, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000cb0:	f000 ff5e 	bl	8001b70 <HAL_DMA_Init>
 8000cb4:	b970      	cbnz	r0, 8000cd4 <HAL_ADC_MspInit+0xd4>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	207f      	movs	r0, #127	@ 0x7f
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000cba:	64e5      	str	r5, [r4, #76]	@ 0x4c
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000cbc:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000cbe:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000cc0:	f000 fe0e 	bl	80018e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000cc4:	207f      	movs	r0, #127	@ 0x7f
 8000cc6:	f000 fe47 	bl	8001958 <HAL_NVIC_EnableIRQ>
}
 8000cca:	b033      	add	sp, #204	@ 0xcc
 8000ccc:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8000cce:	f7ff ff83 	bl	8000bd8 <Error_Handler>
 8000cd2:	e7b9      	b.n	8000c48 <HAL_ADC_MspInit+0x48>
      Error_Handler();
 8000cd4:	f7ff ff80 	bl	8000bd8 <Error_Handler>
 8000cd8:	e7ed      	b.n	8000cb6 <HAL_ADC_MspInit+0xb6>
 8000cda:	bf00      	nop
 8000cdc:	f3af 8000 	nop.w
 8000ce0:	00080000 	.word	0x00080000
 8000ce4:	00000000 	.word	0x00000000
 8000ce8:	58026000 	.word	0x58026000
 8000cec:	58024400 	.word	0x58024400
 8000cf0:	2400095c 	.word	0x2400095c
 8000cf4:	40020410 	.word	0x40020410

08000cf8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <HAL_TIM_Base_MspInit+0x2c>)
 8000cfa:	6802      	ldr	r2, [r0, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d000      	beq.n	8000d02 <HAL_TIM_Base_MspInit+0xa>
 8000d00:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <HAL_TIM_Base_MspInit+0x30>)
{
 8000d04:	b082      	sub	sp, #8
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d06:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000d0a:	f042 0210 	orr.w	r2, r2, #16
 8000d0e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8000d12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d16:	f003 0310 	and.w	r3, r3, #16
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000d1e:	b002      	add	sp, #8
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40001000 	.word	0x40001000
 8000d28:	58024400 	.word	0x58024400

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b530      	push	{r4, r5, lr}
 8000d2e:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	2100      	movs	r1, #0
{
 8000d32:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d34:	22c0      	movs	r2, #192	@ 0xc0
 8000d36:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	9106      	str	r1, [sp, #24]
 8000d3a:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000d3e:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d42:	f004 f9ed 	bl	8005120 <memset>
  if(huart->Instance==USART3)
 8000d46:	4b2f      	ldr	r3, [pc, #188]	@ (8000e04 <HAL_UART_MspInit+0xd8>)
 8000d48:	6822      	ldr	r2, [r4, #0]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d001      	beq.n	8000d52 <HAL_UART_MspInit+0x26>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000d4e:	b039      	add	sp, #228	@ 0xe4
 8000d50:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d52:	2202      	movs	r2, #2
 8000d54:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d56:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d58:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d5c:	f002 f9c8 	bl	80030f0 <HAL_RCCEx_PeriphCLKConfig>
 8000d60:	2800      	cmp	r0, #0
 8000d62:	d148      	bne.n	8000df6 <HAL_UART_MspInit+0xca>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d64:	4b28      	ldr	r3, [pc, #160]	@ (8000e08 <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d66:	2007      	movs	r0, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d68:	a902      	add	r1, sp, #8
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d6a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000d6e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000d72:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8000d76:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000d7a:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8000d7e:	9200      	str	r2, [sp, #0]
 8000d80:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d82:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000d86:	f042 0208 	orr.w	r2, r2, #8
 8000d8a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d8e:	f44f 7240 	mov.w	r2, #768	@ 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d96:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d98:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9c:	481b      	ldr	r0, [pc, #108]	@ (8000e0c <HAL_UART_MspInit+0xe0>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000da0:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da2:	9d01      	ldr	r5, [sp, #4]
    hdma_usart3_tx.Instance = DMA2_Stream1;
 8000da4:	4d1a      	ldr	r5, [pc, #104]	@ (8000e10 <HAL_UART_MspInit+0xe4>)
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000da6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000daa:	2200      	movs	r2, #0
 8000dac:	2300      	movs	r3, #0
 8000dae:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db2:	f001 f963 	bl	800207c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA2_Stream1;
 8000db6:	4917      	ldr	r1, [pc, #92]	@ (8000e14 <HAL_UART_MspInit+0xe8>)
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000db8:	222e      	movs	r2, #46	@ 0x2e
 8000dba:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000dbc:	4628      	mov	r0, r5
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000dbe:	60eb      	str	r3, [r5, #12]
 8000dc0:	616b      	str	r3, [r5, #20]
 8000dc2:	e9c5 1200 	strd	r1, r2, [r5]
 8000dc6:	2140      	movs	r1, #64	@ 0x40
 8000dc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dcc:	e9c5 3306 	strd	r3, r3, [r5, #24]
 8000dd0:	60a9      	str	r1, [r5, #8]
 8000dd2:	612a      	str	r2, [r5, #16]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd4:	e9c5 3308 	strd	r3, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000dd8:	f000 feca 	bl	8001b70 <HAL_DMA_Init>
 8000ddc:	b970      	cbnz	r0, 8000dfc <HAL_UART_MspInit+0xd0>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2027      	movs	r0, #39	@ 0x27
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000de2:	67e5      	str	r5, [r4, #124]	@ 0x7c
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000de4:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000de6:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000de8:	f000 fd7a 	bl	80018e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000dec:	2027      	movs	r0, #39	@ 0x27
 8000dee:	f000 fdb3 	bl	8001958 <HAL_NVIC_EnableIRQ>
}
 8000df2:	b039      	add	sp, #228	@ 0xe4
 8000df4:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8000df6:	f7ff feef 	bl	8000bd8 <Error_Handler>
 8000dfa:	e7b3      	b.n	8000d64 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8000dfc:	f7ff feec 	bl	8000bd8 <Error_Handler>
 8000e00:	e7ed      	b.n	8000dde <HAL_UART_MspInit+0xb2>
 8000e02:	bf00      	nop
 8000e04:	40004800 	.word	0x40004800
 8000e08:	58024400 	.word	0x58024400
 8000e0c:	58020c00 	.word	0x58020c00
 8000e10:	24000804 	.word	0x24000804
 8000e14:	40020428 	.word	0x40020428

08000e18 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e18:	e7fe      	b.n	8000e18 <NMI_Handler>
 8000e1a:	bf00      	nop

08000e1c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <HardFault_Handler>
 8000e1e:	bf00      	nop

08000e20 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler>
 8000e22:	bf00      	nop

08000e24 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <BusFault_Handler>
 8000e26:	bf00      	nop

08000e28 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <UsageFault_Handler>
 8000e2a:	bf00      	nop

08000e2c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop

08000e34 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e38:	f000 b93e 	b.w	80010b8 <HAL_IncTick>

08000e3c <USART3_IRQHandler>:
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */
	usart3_custom_interrupt();
 8000e3c:	f7ff bc84 	b.w	8000748 <usart3_custom_interrupt>

08000e40 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// ATTIVITA DI FINE RICEZIONE DA ADC
	DMA_custom_interrupt_rx();
 8000e40:	f7ff bc68 	b.w	8000714 <DMA_custom_interrupt_rx>

08000e44 <DMA2_Stream1_IRQHandler>:
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	DMA_custom_interrupt_tx();
 8000e44:	f7ff bc3c 	b.w	80006c0 <DMA_custom_interrupt_tx>

08000e48 <ADC3_IRQHandler>:
//	ADC_custom_interrupt();
	extern bool triggd;
	extern bool pre_triggd;
	extern uint16_t trig_indx;

	if(triggd && (DMA2_Stream0->NDTR == trig_indx )){
 8000e48:	4b20      	ldr	r3, [pc, #128]	@ (8000ecc <ADC3_IRQHandler+0x84>)
 8000e4a:	781a      	ldrb	r2, [r3, #0]
{
 8000e4c:	b430      	push	{r4, r5}
	if(triggd && (DMA2_Stream0->NDTR == trig_indx )){
 8000e4e:	b9f2      	cbnz	r2, 8000e8e <ADC3_IRQHandler+0x46>
		DMA2_Stream0->CR &= ~DMA_SxCR_EN;
		USART3->CR3 |= USART_CR3_DMAT;
		return;
	}

	else if(!triggd && (ADC3->DR < PRETRIG_VALUE) ){
 8000e50:	491f      	ldr	r1, [pc, #124]	@ (8000ed0 <ADC3_IRQHandler+0x88>)
 8000e52:	6c08      	ldr	r0, [r1, #64]	@ 0x40
 8000e54:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8000e58:	d333      	bcc.n	8000ec2 <ADC3_IRQHandler+0x7a>
		pre_triggd = 1;
		return;
	}

	else if(pre_triggd && !triggd && (ADC3->DR > TRIG_VALUE)){
 8000e5a:	481e      	ldr	r0, [pc, #120]	@ (8000ed4 <ADC3_IRQHandler+0x8c>)
 8000e5c:	7804      	ldrb	r4, [r0, #0]
 8000e5e:	b1a4      	cbz	r4, 8000e8a <ADC3_IRQHandler+0x42>
 8000e60:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000e62:	f5b1 6ffa 	cmp.w	r1, #2000	@ 0x7d0
 8000e66:	d910      	bls.n	8000e8a <ADC3_IRQHandler+0x42>
		triggd = 1;
 8000e68:	2401      	movs	r4, #1
		pre_triggd = 0;
		trig_indx = (DMA2_Stream0->NDTR + 100UL)%1000UL + 1UL;
 8000e6a:	491b      	ldr	r1, [pc, #108]	@ (8000ed8 <ADC3_IRQHandler+0x90>)
		pre_triggd = 0;
 8000e6c:	7002      	strb	r2, [r0, #0]
		trig_indx = (DMA2_Stream0->NDTR + 100UL)%1000UL + 1UL;
 8000e6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		triggd = 1;
 8000e72:	701c      	strb	r4, [r3, #0]
		trig_indx = (DMA2_Stream0->NDTR + 100UL)%1000UL + 1UL;
 8000e74:	694b      	ldr	r3, [r1, #20]
 8000e76:	4a19      	ldr	r2, [pc, #100]	@ (8000edc <ADC3_IRQHandler+0x94>)
 8000e78:	3364      	adds	r3, #100	@ 0x64
 8000e7a:	4919      	ldr	r1, [pc, #100]	@ (8000ee0 <ADC3_IRQHandler+0x98>)
 8000e7c:	fba2 4203 	umull	r4, r2, r2, r3
 8000e80:	0992      	lsrs	r2, r2, #6
 8000e82:	fb00 3312 	mls	r3, r0, r2, r3
 8000e86:	3301      	adds	r3, #1
 8000e88:	800b      	strh	r3, [r1, #0]
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}


  /* USER CODE END ADC3_IRQn 1 */
}
 8000e8a:	bc30      	pop	{r4, r5}
 8000e8c:	4770      	bx	lr
	if(triggd && (DMA2_Stream0->NDTR == trig_indx )){
 8000e8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ed8 <ADC3_IRQHandler+0x90>)
 8000e90:	4913      	ldr	r1, [pc, #76]	@ (8000ee0 <ADC3_IRQHandler+0x98>)
 8000e92:	6950      	ldr	r0, [r2, #20]
 8000e94:	8809      	ldrh	r1, [r1, #0]
 8000e96:	4288      	cmp	r0, r1
 8000e98:	d1f7      	bne.n	8000e8a <ADC3_IRQHandler+0x42>
		TIM6->CR1 &= ~TIM_CR1_CEN;
 8000e9a:	4c12      	ldr	r4, [pc, #72]	@ (8000ee4 <ADC3_IRQHandler+0x9c>)
		triggd = 0;
 8000e9c:	2000      	movs	r0, #0
		pre_triggd = 0;
 8000e9e:	4d0d      	ldr	r5, [pc, #52]	@ (8000ed4 <ADC3_IRQHandler+0x8c>)
		TIM6->CR1 &= ~TIM_CR1_CEN;
 8000ea0:	6821      	ldr	r1, [r4, #0]
 8000ea2:	f021 0101 	bic.w	r1, r1, #1
 8000ea6:	6021      	str	r1, [r4, #0]
		triggd = 0;
 8000ea8:	7018      	strb	r0, [r3, #0]
		DMA2_Stream0->CR &= ~DMA_SxCR_EN;
 8000eaa:	6913      	ldr	r3, [r2, #16]
		USART3->CR3 |= USART_CR3_DMAT;
 8000eac:	490e      	ldr	r1, [pc, #56]	@ (8000ee8 <ADC3_IRQHandler+0xa0>)
		DMA2_Stream0->CR &= ~DMA_SxCR_EN;
 8000eae:	f023 0301 	bic.w	r3, r3, #1
		pre_triggd = 0;
 8000eb2:	7028      	strb	r0, [r5, #0]
		DMA2_Stream0->CR &= ~DMA_SxCR_EN;
 8000eb4:	6113      	str	r3, [r2, #16]
		USART3->CR3 |= USART_CR3_DMAT;
 8000eb6:	688b      	ldr	r3, [r1, #8]
 8000eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
}
 8000ebc:	bc30      	pop	{r4, r5}
		USART3->CR3 |= USART_CR3_DMAT;
 8000ebe:	608b      	str	r3, [r1, #8]
}
 8000ec0:	4770      	bx	lr
		pre_triggd = 1;
 8000ec2:	4b04      	ldr	r3, [pc, #16]	@ (8000ed4 <ADC3_IRQHandler+0x8c>)
 8000ec4:	2201      	movs	r2, #1
}
 8000ec6:	bc30      	pop	{r4, r5}
		pre_triggd = 1;
 8000ec8:	701a      	strb	r2, [r3, #0]
}
 8000eca:	4770      	bx	lr
 8000ecc:	24000030 	.word	0x24000030
 8000ed0:	58026000 	.word	0x58026000
 8000ed4:	24000031 	.word	0x24000031
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	10624dd3 	.word	0x10624dd3
 8000ee0:	24000000 	.word	0x24000000
 8000ee4:	40001000 	.word	0x40001000
 8000ee8:	40004800 	.word	0x40004800

08000eec <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000eec:	4927      	ldr	r1, [pc, #156]	@ (8000f8c <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eee:	4a28      	ldr	r2, [pc, #160]	@ (8000f90 <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ef0:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8000ef8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000efe:	6813      	ldr	r3, [r2, #0]
 8000f00:	f003 030f 	and.w	r3, r3, #15
 8000f04:	2b06      	cmp	r3, #6
 8000f06:	d805      	bhi.n	8000f14 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f08:	6813      	ldr	r3, [r2, #0]
 8000f0a:	f023 030f 	bic.w	r3, r3, #15
 8000f0e:	f043 0307 	orr.w	r3, r3, #7
 8000f12:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f14:	4b1f      	ldr	r3, [pc, #124]	@ (8000f94 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f16:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f18:	4a1f      	ldr	r2, [pc, #124]	@ (8000f98 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8000f1a:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f1c:	481c      	ldr	r0, [pc, #112]	@ (8000f90 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 8000f1e:	f041 0101 	orr.w	r1, r1, #1
 8000f22:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000f24:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8000f26:	6819      	ldr	r1, [r3, #0]
 8000f28:	400a      	ands	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f2c:	6803      	ldr	r3, [r0, #0]
 8000f2e:	071b      	lsls	r3, r3, #28
 8000f30:	d505      	bpl.n	8000f3e <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f32:	6803      	ldr	r3, [r0, #0]
 8000f34:	f023 030f 	bic.w	r3, r3, #15
 8000f38:	f043 0307 	orr.w	r3, r3, #7
 8000f3c:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f3e:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <SystemInit+0xa8>)
 8000f40:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f42:	4916      	ldr	r1, [pc, #88]	@ (8000f9c <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8000f44:	4c16      	ldr	r4, [pc, #88]	@ (8000fa0 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8000f46:	4817      	ldr	r0, [pc, #92]	@ (8000fa4 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8000f48:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8000f4a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000f4c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000f4e:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8000f50:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000f52:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f56:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f58:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f5a:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f5c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f5e:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f60:	4c11      	ldr	r4, [pc, #68]	@ (8000fa8 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8000f62:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f66:	4911      	ldr	r1, [pc, #68]	@ (8000fac <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8000f68:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8000f6a:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	4019      	ands	r1, r3
 8000f70:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8000f74:	d203      	bcs.n	8000f7e <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <SystemInit+0xc4>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb4 <SystemInit+0xc8>)
 8000f80:	f243 02d2 	movw	r2, #12498	@ 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f84:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f88:	601a      	str	r2, [r3, #0]
}
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00
 8000f90:	52002000 	.word	0x52002000
 8000f94:	58024400 	.word	0x58024400
 8000f98:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f9c:	01010280 	.word	0x01010280
 8000fa0:	02020200 	.word	0x02020200
 8000fa4:	01ff0000 	.word	0x01ff0000
 8000fa8:	5c001000 	.word	0x5c001000
 8000fac:	ffff0000 	.word	0xffff0000
 8000fb0:	51008000 	.word	0x51008000
 8000fb4:	52004000 	.word	0x52004000

08000fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ff0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fbc:	f7ff ff96 	bl	8000eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc0:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fc2:	490d      	ldr	r1, [pc, #52]	@ (8000ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f004 f8a3 	bl	8005130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fea:	f7ff fc57 	bl	800089c <main>
  bx  lr
 8000fee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ff0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ff4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ff8:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000ffc:	080051e0 	.word	0x080051e0
  ldr r2, =_sbss
 8001000:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001004:	24000a3c 	.word	0x24000a3c

08001008 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC_IRQHandler>
	...

0800100c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800100c:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <HAL_InitTick+0x40>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b90b      	cbnz	r3, 8001016 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8001012:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001014:	4770      	bx	lr
{
 8001016:	b510      	push	{r4, lr}
 8001018:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800101a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800101e:	4a0c      	ldr	r2, [pc, #48]	@ (8001050 <HAL_InitTick+0x44>)
 8001020:	fbb0 f3f3 	udiv	r3, r0, r3
 8001024:	6810      	ldr	r0, [r2, #0]
 8001026:	fbb0 f0f3 	udiv	r0, r0, r3
 800102a:	f000 fca3 	bl	8001974 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102e:	b908      	cbnz	r0, 8001034 <HAL_InitTick+0x28>
 8001030:	2c0f      	cmp	r4, #15
 8001032:	d901      	bls.n	8001038 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001034:	2001      	movs	r0, #1
}
 8001036:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001038:	2200      	movs	r2, #0
 800103a:	4621      	mov	r1, r4
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f000 fc4e 	bl	80018e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001044:	4b03      	ldr	r3, [pc, #12]	@ (8001054 <HAL_InitTick+0x48>)
 8001046:	2000      	movs	r0, #0
 8001048:	601c      	str	r4, [r3, #0]
}
 800104a:	bd10      	pop	{r4, pc}
 800104c:	2400000c 	.word	0x2400000c
 8001050:	24000008 	.word	0x24000008
 8001054:	24000010 	.word	0x24000010

08001058 <HAL_Init>:
{
 8001058:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105a:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800105c:	4c12      	ldr	r4, [pc, #72]	@ (80010a8 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105e:	f000 fc2d 	bl	80018bc <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001062:	f001 fcd9 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <HAL_Init+0x54>)
 8001068:	4911      	ldr	r1, [pc, #68]	@ (80010b0 <HAL_Init+0x58>)
 800106a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800106c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800106e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001072:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001076:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001078:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800107a:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800107e:	490d      	ldr	r1, [pc, #52]	@ (80010b4 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001080:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001084:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001086:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800108a:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800108c:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800108e:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001090:	f7ff ffbc 	bl	800100c <HAL_InitTick>
 8001094:	b110      	cbz	r0, 800109c <HAL_Init+0x44>
    return HAL_ERROR;
 8001096:	2401      	movs	r4, #1
}
 8001098:	4620      	mov	r0, r4
 800109a:	bd10      	pop	{r4, pc}
 800109c:	4604      	mov	r4, r0
  HAL_MspInit();
 800109e:	f7ff fd9d 	bl	8000bdc <HAL_MspInit>
}
 80010a2:	4620      	mov	r0, r4
 80010a4:	bd10      	pop	{r4, pc}
 80010a6:	bf00      	nop
 80010a8:	24000004 	.word	0x24000004
 80010ac:	58024400 	.word	0x58024400
 80010b0:	08005190 	.word	0x08005190
 80010b4:	24000008 	.word	0x24000008

080010b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80010b8:	4a03      	ldr	r2, [pc, #12]	@ (80010c8 <HAL_IncTick+0x10>)
 80010ba:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <HAL_IncTick+0x14>)
 80010bc:	6811      	ldr	r1, [r2, #0]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	440b      	add	r3, r1
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	24000a38 	.word	0x24000a38
 80010cc:	2400000c 	.word	0x2400000c

080010d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010d0:	4b01      	ldr	r3, [pc, #4]	@ (80010d8 <HAL_GetTick+0x8>)
 80010d2:	6818      	ldr	r0, [r3, #0]
}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	24000a38 	.word	0x24000a38

080010dc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80010dc:	4b01      	ldr	r3, [pc, #4]	@ (80010e4 <HAL_GetREVID+0x8>)
 80010de:	6818      	ldr	r0, [r3, #0]
}
 80010e0:	0c00      	lsrs	r0, r0, #16
 80010e2:	4770      	bx	lr
 80010e4:	5c001000 	.word	0x5c001000

080010e8 <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80010e8:	4a03      	ldr	r2, [pc, #12]	@ (80010f8 <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 80010ea:	6853      	ldr	r3, [r2, #4]
 80010ec:	ea23 0300 	bic.w	r3, r3, r0
 80010f0:	430b      	orrs	r3, r1
 80010f2:	6053      	str	r3, [r2, #4]
}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	58000400 	.word	0x58000400

080010fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80010fe:	2200      	movs	r2, #0
{
 8001100:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8001102:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001104:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8001108:	2a01      	cmp	r2, #1
 800110a:	f000 8138 	beq.w	800137e <HAL_ADC_ConfigChannel+0x282>
 800110e:	2401      	movs	r4, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001110:	6802      	ldr	r2, [r0, #0]
 8001112:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001114:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001118:	6890      	ldr	r0, [r2, #8]
 800111a:	0745      	lsls	r5, r0, #29
 800111c:	d509      	bpl.n	8001132 <HAL_ADC_ConfigChannel+0x36>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800111e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
 8001120:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001122:	f042 0220 	orr.w	r2, r2, #32
 8001126:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800112e:	b003      	add	sp, #12
 8001130:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001132:	680d      	ldr	r5, [r1, #0]
 8001134:	2d00      	cmp	r5, #0
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001136:	ea4f 6095 	mov.w	r0, r5, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800113a:	db0d      	blt.n	8001158 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800113c:	f3c5 0613 	ubfx	r6, r5, #0, #20
 8001140:	2e00      	cmp	r6, #0
 8001142:	f000 809a 	beq.w	800127a <HAL_ADC_ConfigChannel+0x17e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001146:	fa95 f5a5 	rbit	r5, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800114a:	b115      	cbz	r5, 8001152 <HAL_ADC_ConfigChannel+0x56>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800114c:	fab5 f585 	clz	r5, r5
 8001150:	40ac      	lsls	r4, r5
 8001152:	69d5      	ldr	r5, [r2, #28]
 8001154:	432c      	orrs	r4, r5
 8001156:	61d4      	str	r4, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001158:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 800115a:	f04f 0c1f 	mov.w	ip, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800115e:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8001162:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001166:	09a5      	lsrs	r5, r4, #6
  MODIFY_REG(*preg,
 8001168:	ea04 040c 	and.w	r4, r4, ip
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800116c:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 8001170:	fa0c fc04 	lsl.w	ip, ip, r4
 8001174:	40a0      	lsls	r0, r4
 8001176:	f85e 4005 	ldr.w	r4, [lr, r5]
 800117a:	ea24 0c0c 	bic.w	ip, r4, ip
 800117e:	ea4c 0000 	orr.w	r0, ip, r0
 8001182:	f84e 0005 	str.w	r0, [lr, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001186:	6890      	ldr	r0, [r2, #8]
 8001188:	f010 0f04 	tst.w	r0, #4
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800118c:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800118e:	d101      	bne.n	8001194 <HAL_ADC_ConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001190:	0700      	lsls	r0, r0, #28
 8001192:	d51a      	bpl.n	80011ca <HAL_ADC_ConfigChannel+0xce>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001194:	6890      	ldr	r0, [r2, #8]
 8001196:	07c7      	lsls	r7, r0, #31
 8001198:	d415      	bmi.n	80011c6 <HAL_ADC_ConfigChannel+0xca>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800119a:	68ce      	ldr	r6, [r1, #12]
 800119c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 800119e:	f006 0718 	and.w	r7, r6, #24
 80011a2:	48bd      	ldr	r0, [pc, #756]	@ (8001498 <HAL_ADC_ConfigChannel+0x39c>)
 80011a4:	f8d2 50c0 	ldr.w	r5, [r2, #192]	@ 0xc0
 80011a8:	40f8      	lsrs	r0, r7
 80011aa:	f3c4 0713 	ubfx	r7, r4, #0, #20
 80011ae:	4020      	ands	r0, r4
 80011b0:	ea25 0507 	bic.w	r5, r5, r7
 80011b4:	4328      	orrs	r0, r5
 80011b6:	f8c2 00c0 	str.w	r0, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80011ba:	48b8      	ldr	r0, [pc, #736]	@ (800149c <HAL_ADC_ConfigChannel+0x3a0>)
 80011bc:	4286      	cmp	r6, r0
 80011be:	f000 8091 	beq.w	80012e4 <HAL_ADC_ConfigChannel+0x1e8>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80011c2:	2c00      	cmp	r4, #0
 80011c4:	db5b      	blt.n	800127e <HAL_ADC_ConfigChannel+0x182>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c6:	2000      	movs	r0, #0
 80011c8:	e7ae      	b.n	8001128 <HAL_ADC_ConfigChannel+0x2c>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80011ca:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011cc:	f102 0c14 	add.w	ip, r2, #20
  MODIFY_REG(*preg,
 80011d0:	f04f 0e07 	mov.w	lr, #7
 80011d4:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011d6:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 80011d8:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011dc:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 80011e0:	fa0e fe04 	lsl.w	lr, lr, r4
 80011e4:	fa06 f404 	lsl.w	r4, r6, r4
 80011e8:	f85c 0005 	ldr.w	r0, [ip, r5]
 80011ec:	ea20 000e 	bic.w	r0, r0, lr
 80011f0:	4320      	orrs	r0, r4
 80011f2:	f84c 0005 	str.w	r0, [ip, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80011f6:	48aa      	ldr	r0, [pc, #680]	@ (80014a0 <HAL_ADC_ConfigChannel+0x3a4>)
 80011f8:	694d      	ldr	r5, [r1, #20]
 80011fa:	6800      	ldr	r0, [r0, #0]
 80011fc:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 8001200:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8001204:	68d0      	ldr	r0, [r2, #12]
 8001206:	d068      	beq.n	80012da <HAL_ADC_ConfigChannel+0x1de>
 8001208:	f010 0f10 	tst.w	r0, #16
 800120c:	68d0      	ldr	r0, [r2, #12]
 800120e:	d064      	beq.n	80012da <HAL_ADC_ConfigChannel+0x1de>
 8001210:	0840      	lsrs	r0, r0, #1
 8001212:	f000 0008 	and.w	r0, r0, #8
 8001216:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001218:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800121a:	6808      	ldr	r0, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800121c:	2e04      	cmp	r6, #4
 800121e:	f000 80b1 	beq.w	8001384 <HAL_ADC_ConfigChannel+0x288>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001222:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 8001226:	f000 44f8 	and.w	r4, r0, #2080374784	@ 0x7c000000
 800122a:	f85c 0026 	ldr.w	r0, [ip, r6, lsl #2]
 800122e:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8001232:	4320      	orrs	r0, r4
 8001234:	4328      	orrs	r0, r5
 8001236:	f84c 0026 	str.w	r0, [ip, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800123a:	7e4c      	ldrb	r4, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800123c:	690d      	ldr	r5, [r1, #16]
 800123e:	f1a4 0401 	sub.w	r4, r4, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001242:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
 8001246:	fab4 f484 	clz	r4, r4
 800124a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800124e:	0964      	lsrs	r4, r4, #5
 8001250:	ea40 70c4 	orr.w	r0, r0, r4, lsl #31
 8001254:	f84c 0025 	str.w	r0, [ip, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001258:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800125a:	690d      	ldr	r5, [r1, #16]
 800125c:	f1a0 0001 	sub.w	r0, r0, #1
 8001260:	6914      	ldr	r4, [r2, #16]
 8001262:	f005 051f 	and.w	r5, r5, #31
 8001266:	fab0 f080 	clz	r0, r0
 800126a:	f424 44f0 	bic.w	r4, r4, #30720	@ 0x7800
 800126e:	0940      	lsrs	r0, r0, #5
 8001270:	02c0      	lsls	r0, r0, #11
 8001272:	40a8      	lsls	r0, r5
 8001274:	4320      	orrs	r0, r4
 8001276:	6110      	str	r0, [r2, #16]
}
 8001278:	e78c      	b.n	8001194 <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800127a:	4084      	lsls	r4, r0
 800127c:	e769      	b.n	8001152 <HAL_ADC_ConfigChannel+0x56>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800127e:	4989      	ldr	r1, [pc, #548]	@ (80014a4 <HAL_ADC_ConfigChannel+0x3a8>)
 8001280:	428a      	cmp	r2, r1
 8001282:	f000 80be 	beq.w	8001402 <HAL_ADC_ConfigChannel+0x306>
 8001286:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 800128a:	428a      	cmp	r2, r1
 800128c:	f000 80b9 	beq.w	8001402 <HAL_ADC_ConfigChannel+0x306>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001290:	f101 51c0 	add.w	r1, r1, #402653184	@ 0x18000000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001294:	4d84      	ldr	r5, [pc, #528]	@ (80014a8 <HAL_ADC_ConfigChannel+0x3ac>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001296:	f501 4184 	add.w	r1, r1, #16896	@ 0x4200
 800129a:	6888      	ldr	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800129c:	68ae      	ldr	r6, [r5, #8]
 800129e:	07f6      	lsls	r6, r6, #31
 80012a0:	f53f af3d 	bmi.w	800111e <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80012a4:	4e81      	ldr	r6, [pc, #516]	@ (80014ac <HAL_ADC_ConfigChannel+0x3b0>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012a6:	f000 77e0 	and.w	r7, r0, #29360128	@ 0x1c00000
 80012aa:	42b4      	cmp	r4, r6
 80012ac:	f000 8106 	beq.w	80014bc <HAL_ADC_ConfigChannel+0x3c0>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80012b0:	4e7f      	ldr	r6, [pc, #508]	@ (80014b0 <HAL_ADC_ConfigChannel+0x3b4>)
 80012b2:	42b4      	cmp	r4, r6
 80012b4:	f000 80e2 	beq.w	800147c <HAL_ADC_ConfigChannel+0x380>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80012b8:	4d7e      	ldr	r5, [pc, #504]	@ (80014b4 <HAL_ADC_ConfigChannel+0x3b8>)
 80012ba:	42ac      	cmp	r4, r5
 80012bc:	d183      	bne.n	80011c6 <HAL_ADC_ConfigChannel+0xca>
            if (ADC_VREFINT_INSTANCE(hadc))
 80012be:	0240      	lsls	r0, r0, #9
 80012c0:	d481      	bmi.n	80011c6 <HAL_ADC_ConfigChannel+0xca>
 80012c2:	4879      	ldr	r0, [pc, #484]	@ (80014a8 <HAL_ADC_ConfigChannel+0x3ac>)
 80012c4:	4282      	cmp	r2, r0
 80012c6:	f47f af7e 	bne.w	80011c6 <HAL_ADC_ConfigChannel+0xca>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012ca:	688a      	ldr	r2, [r1, #8]
 80012cc:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80012d0:	433a      	orrs	r2, r7
 80012d2:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80012d6:	608a      	str	r2, [r1, #8]
}
 80012d8:	e775      	b.n	80011c6 <HAL_ADC_ConfigChannel+0xca>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80012da:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80012de:	0040      	lsls	r0, r0, #1
 80012e0:	4085      	lsls	r5, r0
 80012e2:	e799      	b.n	8001218 <HAL_ADC_ConfigChannel+0x11c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80012e4:	2f00      	cmp	r7, #0
 80012e6:	d069      	beq.n	80013bc <HAL_ADC_ConfigChannel+0x2c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e8:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 80012ec:	2800      	cmp	r0, #0
 80012ee:	f000 80a1 	beq.w	8001434 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 80012f2:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80012f6:	3001      	adds	r0, #1
 80012f8:	f000 001f 	and.w	r0, r0, #31
 80012fc:	2809      	cmp	r0, #9
 80012fe:	f240 8099 	bls.w	8001434 <HAL_ADC_ConfigChannel+0x338>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001302:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8001306:	2800      	cmp	r0, #0
 8001308:	f000 80fe 	beq.w	8001508 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 800130c:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001310:	3001      	adds	r0, #1
 8001312:	0680      	lsls	r0, r0, #26
 8001314:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001318:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800131c:	2d00      	cmp	r5, #0
 800131e:	f000 80f1 	beq.w	8001504 <HAL_ADC_ConfigChannel+0x408>
  return __builtin_clz(value);
 8001322:	fab5 f585 	clz	r5, r5
 8001326:	2601      	movs	r6, #1
 8001328:	3501      	adds	r5, #1
 800132a:	f005 051f 	and.w	r5, r5, #31
 800132e:	fa06 f505 	lsl.w	r5, r6, r5
 8001332:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8001338:	2c00      	cmp	r4, #0
 800133a:	f000 80e1 	beq.w	8001500 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800133e:	fab4 f484 	clz	r4, r4
 8001342:	f06f 061d 	mvn.w	r6, #29
 8001346:	1c65      	adds	r5, r4, #1
 8001348:	2403      	movs	r4, #3
 800134a:	f005 051f 	and.w	r5, r5, #31
 800134e:	fb14 6405 	smlabb	r4, r4, r5, r6
 8001352:	0524      	lsls	r4, r4, #20
 8001354:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001358:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800135a:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 800135e:	2707      	movs	r7, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001360:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8001362:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001366:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 800136a:	4087      	lsls	r7, r0
 800136c:	5974      	ldr	r4, [r6, r5]
 800136e:	ea24 0407 	bic.w	r4, r4, r7
 8001372:	688f      	ldr	r7, [r1, #8]
 8001374:	4087      	lsls	r7, r0
 8001376:	433c      	orrs	r4, r7
 8001378:	5174      	str	r4, [r6, r5]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800137a:	680c      	ldr	r4, [r1, #0]
}
 800137c:	e721      	b.n	80011c2 <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 800137e:	2002      	movs	r0, #2
}
 8001380:	b003      	add	sp, #12
 8001382:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001384:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8001386:	0684      	lsls	r4, r0, #26
 8001388:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 800138c:	ebb5 6f80 	cmp.w	r5, r0, lsl #26
 8001390:	d032      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x2fc>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001392:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8001394:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001398:	4284      	cmp	r4, r0
 800139a:	d028      	beq.n	80013ee <HAL_ADC_ConfigChannel+0x2f2>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800139c:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 800139e:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80013a2:	4284      	cmp	r4, r0
 80013a4:	d01e      	beq.n	80013e4 <HAL_ADC_ConfigChannel+0x2e8>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013a6:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 80013a8:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80013ac:	4284      	cmp	r4, r0
 80013ae:	f47f aef1 	bne.w	8001194 <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80013b2:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 80013b4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80013b8:	66d0      	str	r0, [r2, #108]	@ 0x6c
 80013ba:	e6eb      	b.n	8001194 <HAL_ADC_ConfigChannel+0x98>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80013bc:	0ea4      	lsrs	r4, r4, #26
 80013be:	2001      	movs	r0, #1
 80013c0:	3401      	adds	r4, #1
 80013c2:	f004 051f 	and.w	r5, r4, #31
 80013c6:	06a4      	lsls	r4, r4, #26
 80013c8:	40a8      	lsls	r0, r5
 80013ca:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80013ce:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80013d0:	ea40 0004 	orr.w	r0, r0, r4
 80013d4:	eb05 0445 	add.w	r4, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80013d8:	d94e      	bls.n	8001478 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80013da:	3c1e      	subs	r4, #30
 80013dc:	0524      	lsls	r4, r4, #20
 80013de:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 80013e2:	e7b9      	b.n	8001358 <HAL_ADC_ConfigChannel+0x25c>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80013e4:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 80013e6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80013ea:	6690      	str	r0, [r2, #104]	@ 0x68
 80013ec:	e7db      	b.n	80013a6 <HAL_ADC_ConfigChannel+0x2aa>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80013ee:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 80013f0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80013f4:	6650      	str	r0, [r2, #100]	@ 0x64
 80013f6:	e7d1      	b.n	800139c <HAL_ADC_ConfigChannel+0x2a0>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80013f8:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 80013fa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80013fe:	6610      	str	r0, [r2, #96]	@ 0x60
 8001400:	e7c7      	b.n	8001392 <HAL_ADC_ConfigChannel+0x296>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001402:	4d28      	ldr	r5, [pc, #160]	@ (80014a4 <HAL_ADC_ConfigChannel+0x3a8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001404:	492c      	ldr	r1, [pc, #176]	@ (80014b8 <HAL_ADC_ConfigChannel+0x3bc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001406:	f505 7580 	add.w	r5, r5, #256	@ 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800140a:	6888      	ldr	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800140c:	f855 6cf8 	ldr.w	r6, [r5, #-248]
 8001410:	68ad      	ldr	r5, [r5, #8]
 8001412:	07ed      	lsls	r5, r5, #31
 8001414:	f53f ae83 	bmi.w	800111e <HAL_ADC_ConfigChannel+0x22>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001418:	07f7      	lsls	r7, r6, #31
 800141a:	f53f ae80 	bmi.w	800111e <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800141e:	4d23      	ldr	r5, [pc, #140]	@ (80014ac <HAL_ADC_ConfigChannel+0x3b0>)
 8001420:	42ac      	cmp	r4, r5
 8001422:	f43f aed0 	beq.w	80011c6 <HAL_ADC_ConfigChannel+0xca>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001426:	4d22      	ldr	r5, [pc, #136]	@ (80014b0 <HAL_ADC_ConfigChannel+0x3b4>)
 8001428:	42ac      	cmp	r4, r5
 800142a:	f43f aecc 	beq.w	80011c6 <HAL_ADC_ConfigChannel+0xca>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800142e:	f000 77e0 	and.w	r7, r0, #29360128	@ 0x1c00000
 8001432:	e741      	b.n	80012b8 <HAL_ADC_ConfigChannel+0x1bc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001434:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8001438:	2800      	cmp	r0, #0
 800143a:	d06d      	beq.n	8001518 <HAL_ADC_ConfigChannel+0x41c>
  return __builtin_clz(value);
 800143c:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001440:	3001      	adds	r0, #1
 8001442:	0680      	lsls	r0, r0, #26
 8001444:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001448:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800144c:	2d00      	cmp	r5, #0
 800144e:	d061      	beq.n	8001514 <HAL_ADC_ConfigChannel+0x418>
  return __builtin_clz(value);
 8001450:	fab5 f585 	clz	r5, r5
 8001454:	2601      	movs	r6, #1
 8001456:	3501      	adds	r5, #1
 8001458:	f005 051f 	and.w	r5, r5, #31
 800145c:	fa06 f505 	lsl.w	r5, r6, r5
 8001460:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8001466:	2c00      	cmp	r4, #0
 8001468:	d051      	beq.n	800150e <HAL_ADC_ConfigChannel+0x412>
  return __builtin_clz(value);
 800146a:	fab4 f484 	clz	r4, r4
 800146e:	3401      	adds	r4, #1
 8001470:	f004 041f 	and.w	r4, r4, #31
 8001474:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001478:	0524      	lsls	r4, r4, #20
 800147a:	e76d      	b.n	8001358 <HAL_ADC_ConfigChannel+0x25c>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800147c:	01c4      	lsls	r4, r0, #7
 800147e:	f53f aea2 	bmi.w	80011c6 <HAL_ADC_ConfigChannel+0xca>
 8001482:	42aa      	cmp	r2, r5
 8001484:	f47f ae9f 	bne.w	80011c6 <HAL_ADC_ConfigChannel+0xca>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001488:	688a      	ldr	r2, [r1, #8]
 800148a:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800148e:	433a      	orrs	r2, r7
 8001490:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001494:	608a      	str	r2, [r1, #8]
}
 8001496:	e696      	b.n	80011c6 <HAL_ADC_ConfigChannel+0xca>
 8001498:	000fffff 	.word	0x000fffff
 800149c:	47ff0000 	.word	0x47ff0000
 80014a0:	5c001000 	.word	0x5c001000
 80014a4:	40022000 	.word	0x40022000
 80014a8:	58026000 	.word	0x58026000
 80014ac:	cb840000 	.word	0xcb840000
 80014b0:	c7520000 	.word	0xc7520000
 80014b4:	cfb80000 	.word	0xcfb80000
 80014b8:	40022300 	.word	0x40022300
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80014bc:	0206      	lsls	r6, r0, #8
 80014be:	f53f ae82 	bmi.w	80011c6 <HAL_ADC_ConfigChannel+0xca>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80014c2:	42aa      	cmp	r2, r5
 80014c4:	f47f ae7f 	bne.w	80011c6 <HAL_ADC_ConfigChannel+0xca>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014c8:	688a      	ldr	r2, [r1, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014ca:	4815      	ldr	r0, [pc, #84]	@ (8001520 <HAL_ADC_ConfigChannel+0x424>)
 80014cc:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80014d0:	433a      	orrs	r2, r7
 80014d2:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80014d6:	608a      	str	r2, [r1, #8]
 80014d8:	6802      	ldr	r2, [r0, #0]
 80014da:	4912      	ldr	r1, [pc, #72]	@ (8001524 <HAL_ADC_ConfigChannel+0x428>)
 80014dc:	0992      	lsrs	r2, r2, #6
 80014de:	fba1 1202 	umull	r1, r2, r1, r2
 80014e2:	0992      	lsrs	r2, r2, #6
 80014e4:	3201      	adds	r2, #1
 80014e6:	0052      	lsls	r2, r2, #1
 80014e8:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80014ea:	9a01      	ldr	r2, [sp, #4]
 80014ec:	2a00      	cmp	r2, #0
 80014ee:	f43f ae6a 	beq.w	80011c6 <HAL_ADC_ConfigChannel+0xca>
                wait_loop_index--;
 80014f2:	9a01      	ldr	r2, [sp, #4]
 80014f4:	3a01      	subs	r2, #1
 80014f6:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 80014f8:	9a01      	ldr	r2, [sp, #4]
 80014fa:	2a00      	cmp	r2, #0
 80014fc:	d1f9      	bne.n	80014f2 <HAL_ADC_ConfigChannel+0x3f6>
 80014fe:	e662      	b.n	80011c6 <HAL_ADC_ConfigChannel+0xca>
 8001500:	4c09      	ldr	r4, [pc, #36]	@ (8001528 <HAL_ADC_ConfigChannel+0x42c>)
 8001502:	e729      	b.n	8001358 <HAL_ADC_ConfigChannel+0x25c>
 8001504:	2502      	movs	r5, #2
 8001506:	e714      	b.n	8001332 <HAL_ADC_ConfigChannel+0x236>
 8001508:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800150c:	e704      	b.n	8001318 <HAL_ADC_ConfigChannel+0x21c>
 800150e:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 8001512:	e721      	b.n	8001358 <HAL_ADC_ConfigChannel+0x25c>
 8001514:	2502      	movs	r5, #2
 8001516:	e7a3      	b.n	8001460 <HAL_ADC_ConfigChannel+0x364>
 8001518:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800151c:	e794      	b.n	8001448 <HAL_ADC_ConfigChannel+0x34c>
 800151e:	bf00      	nop
 8001520:	24000008 	.word	0x24000008
 8001524:	053e2d63 	.word	0x053e2d63
 8001528:	fe500000 	.word	0xfe500000

0800152c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800152c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800152e:	4a56      	ldr	r2, [pc, #344]	@ (8001688 <ADC_ConfigureBoostMode+0x15c>)
{
 8001530:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001532:	6803      	ldr	r3, [r0, #0]
 8001534:	4293      	cmp	r3, r2
 8001536:	d025      	beq.n	8001584 <ADC_ConfigureBoostMode+0x58>
 8001538:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 800153c:	4293      	cmp	r3, r2
 800153e:	d021      	beq.n	8001584 <ADC_ConfigureBoostMode+0x58>
 8001540:	4b52      	ldr	r3, [pc, #328]	@ (800168c <ADC_ConfigureBoostMode+0x160>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8001548:	d021      	beq.n	800158e <ADC_ConfigureBoostMode+0x62>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800154a:	f001 fc1d 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800154e:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8001550:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8001552:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001556:	f000 8086 	beq.w	8001666 <ADC_ConfigureBoostMode+0x13a>
 800155a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800155e:	d06f      	beq.n	8001640 <ADC_ConfigureBoostMode+0x114>
 8001560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001564:	d07f      	beq.n	8001666 <ADC_ConfigureBoostMode+0x13a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001566:	f7ff fdb9 	bl	80010dc <HAL_GetREVID>
 800156a:	f241 0303 	movw	r3, #4099	@ 0x1003
 800156e:	4298      	cmp	r0, r3
 8001570:	d84b      	bhi.n	800160a <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 8001572:	4a47      	ldr	r2, [pc, #284]	@ (8001690 <ADC_ConfigureBoostMode+0x164>)
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001574:	6823      	ldr	r3, [r4, #0]
    if (freq > 20000000UL)
 8001576:	4295      	cmp	r5, r2
 8001578:	d92a      	bls.n	80015d0 <ADC_ConfigureBoostMode+0xa4>
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001580:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001582:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001584:	4b43      	ldr	r3, [pc, #268]	@ (8001694 <ADC_ConfigureBoostMode+0x168>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 800158c:	d1dd      	bne.n	800154a <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800158e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001592:	2100      	movs	r1, #0
 8001594:	f002 fee6 	bl	8004364 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8001598:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800159a:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 800159c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80015a0:	d06b      	beq.n	800167a <ADC_ConfigureBoostMode+0x14e>
 80015a2:	d808      	bhi.n	80015b6 <ADC_ConfigureBoostMode+0x8a>
 80015a4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80015a8:	d054      	beq.n	8001654 <ADC_ConfigureBoostMode+0x128>
 80015aa:	d916      	bls.n	80015da <ADC_ConfigureBoostMode+0xae>
 80015ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80015b0:	d1d9      	bne.n	8001566 <ADC_ConfigureBoostMode+0x3a>
        freq /= 32UL;
 80015b2:	0945      	lsrs	r5, r0, #5
        break;
 80015b4:	e7d7      	b.n	8001566 <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 80015b6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80015ba:	d049      	beq.n	8001650 <ADC_ConfigureBoostMode+0x124>
 80015bc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80015c0:	d1d1      	bne.n	8001566 <ADC_ConfigureBoostMode+0x3a>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80015c2:	f7ff fd8b 	bl	80010dc <HAL_GetREVID>
 80015c6:	f241 0303 	movw	r3, #4099	@ 0x1003
 80015ca:	4298      	cmp	r0, r3
 80015cc:	d82e      	bhi.n	800162c <ADC_ConfigureBoostMode+0x100>
 80015ce:	6823      	ldr	r3, [r4, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015d6:	609a      	str	r2, [r3, #8]
}
 80015d8:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 80015da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80015de:	d006      	beq.n	80015ee <ADC_ConfigureBoostMode+0xc2>
 80015e0:	d90a      	bls.n	80015f8 <ADC_ConfigureBoostMode+0xcc>
 80015e2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80015e6:	d002      	beq.n	80015ee <ADC_ConfigureBoostMode+0xc2>
 80015e8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80015ec:	d1bb      	bne.n	8001566 <ADC_ConfigureBoostMode+0x3a>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80015ee:	0c9b      	lsrs	r3, r3, #18
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 80015f6:	e7b6      	b.n	8001566 <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 80015f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80015fc:	d0f7      	beq.n	80015ee <ADC_ConfigureBoostMode+0xc2>
 80015fe:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8001602:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001606:	d0f2      	beq.n	80015ee <ADC_ConfigureBoostMode+0xc2>
 8001608:	e7ad      	b.n	8001566 <ADC_ConfigureBoostMode+0x3a>
    if (freq <= 6250000UL)
 800160a:	4a23      	ldr	r2, [pc, #140]	@ (8001698 <ADC_ConfigureBoostMode+0x16c>)
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800160c:	6823      	ldr	r3, [r4, #0]
    if (freq <= 6250000UL)
 800160e:	4295      	cmp	r5, r2
 8001610:	d911      	bls.n	8001636 <ADC_ConfigureBoostMode+0x10a>
    else if (freq <= 12500000UL)
 8001612:	4a22      	ldr	r2, [pc, #136]	@ (800169c <ADC_ConfigureBoostMode+0x170>)
 8001614:	4295      	cmp	r5, r2
 8001616:	d91f      	bls.n	8001658 <ADC_ConfigureBoostMode+0x12c>
    else if (freq <= 25000000UL)
 8001618:	4a21      	ldr	r2, [pc, #132]	@ (80016a0 <ADC_ConfigureBoostMode+0x174>)
 800161a:	4295      	cmp	r5, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800161c:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 800161e:	d82e      	bhi.n	800167e <ADC_ConfigureBoostMode+0x152>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001620:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001624:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001628:	609a      	str	r2, [r3, #8]
}
 800162a:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 800162c:	4b1a      	ldr	r3, [pc, #104]	@ (8001698 <ADC_ConfigureBoostMode+0x16c>)
 800162e:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8001632:	6823      	ldr	r3, [r4, #0]
 8001634:	d310      	bcc.n	8001658 <ADC_ConfigureBoostMode+0x12c>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800163c:	609a      	str	r2, [r3, #8]
}
 800163e:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 8001640:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001642:	f7ff fd4b 	bl	80010dc <HAL_GetREVID>
 8001646:	f241 0303 	movw	r3, #4099	@ 0x1003
 800164a:	4298      	cmp	r0, r3
 800164c:	d8dd      	bhi.n	800160a <ADC_ConfigureBoostMode+0xde>
 800164e:	e790      	b.n	8001572 <ADC_ConfigureBoostMode+0x46>
        freq /= 128UL;
 8001650:	09c5      	lsrs	r5, r0, #7
        break;
 8001652:	e788      	b.n	8001566 <ADC_ConfigureBoostMode+0x3a>
        freq /= 16UL;
 8001654:	0905      	lsrs	r5, r0, #4
        break;
 8001656:	e786      	b.n	8001566 <ADC_ConfigureBoostMode+0x3a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800165e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001662:	609a      	str	r2, [r3, #8]
}
 8001664:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001666:	0c1b      	lsrs	r3, r3, #16
 8001668:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800166c:	f7ff fd36 	bl	80010dc <HAL_GetREVID>
 8001670:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001674:	4298      	cmp	r0, r3
 8001676:	d8c8      	bhi.n	800160a <ADC_ConfigureBoostMode+0xde>
 8001678:	e77b      	b.n	8001572 <ADC_ConfigureBoostMode+0x46>
        freq /= 64UL;
 800167a:	0985      	lsrs	r5, r0, #6
        break;
 800167c:	e773      	b.n	8001566 <ADC_ConfigureBoostMode+0x3a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800167e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001682:	609a      	str	r2, [r3, #8]
}
 8001684:	bd38      	pop	{r3, r4, r5, pc}
 8001686:	bf00      	nop
 8001688:	40022000 	.word	0x40022000
 800168c:	58026300 	.word	0x58026300
 8001690:	01312d00 	.word	0x01312d00
 8001694:	40022300 	.word	0x40022300
 8001698:	00bebc21 	.word	0x00bebc21
 800169c:	017d7841 	.word	0x017d7841
 80016a0:	02faf081 	.word	0x02faf081

080016a4 <HAL_ADC_Init>:
{
 80016a4:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80016a6:	2300      	movs	r3, #0
{
 80016a8:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80016aa:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80016ac:	2800      	cmp	r0, #0
 80016ae:	f000 80a9 	beq.w	8001804 <HAL_ADC_Init+0x160>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016b2:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80016b4:	4604      	mov	r4, r0
 80016b6:	2d00      	cmp	r5, #0
 80016b8:	f000 80aa 	beq.w	8001810 <HAL_ADC_Init+0x16c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016bc:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016be:	6893      	ldr	r3, [r2, #8]
 80016c0:	009e      	lsls	r6, r3, #2
 80016c2:	d503      	bpl.n	80016cc <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016c4:	6891      	ldr	r1, [r2, #8]
 80016c6:	4b71      	ldr	r3, [pc, #452]	@ (800188c <HAL_ADC_Init+0x1e8>)
 80016c8:	400b      	ands	r3, r1
 80016ca:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016cc:	6893      	ldr	r3, [r2, #8]
 80016ce:	00dd      	lsls	r5, r3, #3
 80016d0:	d416      	bmi.n	8001700 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016d2:	4b6f      	ldr	r3, [pc, #444]	@ (8001890 <HAL_ADC_Init+0x1ec>)
 80016d4:	496f      	ldr	r1, [pc, #444]	@ (8001894 <HAL_ADC_Init+0x1f0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80016d8:	6890      	ldr	r0, [r2, #8]
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	fba1 1303 	umull	r1, r3, r1, r3
 80016e0:	496d      	ldr	r1, [pc, #436]	@ (8001898 <HAL_ADC_Init+0x1f4>)
 80016e2:	099b      	lsrs	r3, r3, #6
 80016e4:	4001      	ands	r1, r0
 80016e6:	3301      	adds	r3, #1
 80016e8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80016ec:	6091      	str	r1, [r2, #8]
 80016ee:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80016f0:	9b01      	ldr	r3, [sp, #4]
 80016f2:	b12b      	cbz	r3, 8001700 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 80016f4:	9b01      	ldr	r3, [sp, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80016fa:	9b01      	ldr	r3, [sp, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f9      	bne.n	80016f4 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001700:	6893      	ldr	r3, [r2, #8]
 8001702:	00d8      	lsls	r0, r3, #3
 8001704:	f100 8082 	bmi.w	800180c <HAL_ADC_Init+0x168>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001708:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 800170a:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170c:	f043 0310 	orr.w	r3, r3, #16
 8001710:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001712:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001714:	432b      	orrs	r3, r5
 8001716:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001718:	6893      	ldr	r3, [r2, #8]
 800171a:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800171e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001720:	d16c      	bne.n	80017fc <HAL_ADC_Init+0x158>
 8001722:	06d9      	lsls	r1, r3, #27
 8001724:	d46a      	bmi.n	80017fc <HAL_ADC_Init+0x158>
    ADC_STATE_CLR_SET(hadc->State,
 8001726:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001728:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001732:	6893      	ldr	r3, [r2, #8]
 8001734:	07db      	lsls	r3, r3, #31
 8001736:	d40c      	bmi.n	8001752 <HAL_ADC_Init+0xae>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001738:	4b58      	ldr	r3, [pc, #352]	@ (800189c <HAL_ADC_Init+0x1f8>)
 800173a:	429a      	cmp	r2, r3
 800173c:	f000 8081 	beq.w	8001842 <HAL_ADC_Init+0x19e>
 8001740:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001744:	429a      	cmp	r2, r3
 8001746:	d07c      	beq.n	8001842 <HAL_ADC_Init+0x19e>
 8001748:	4b55      	ldr	r3, [pc, #340]	@ (80018a0 <HAL_ADC_Init+0x1fc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	07d9      	lsls	r1, r3, #31
 800174e:	f140 8089 	bpl.w	8001864 <HAL_ADC_Init+0x1c0>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001752:	f7ff fcc3 	bl	80010dc <HAL_GetREVID>
 8001756:	f241 0303 	movw	r3, #4099	@ 0x1003
 800175a:	68a1      	ldr	r1, [r4, #8]
 800175c:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800175e:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001760:	d85c      	bhi.n	800181c <HAL_ADC_Init+0x178>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001762:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001766:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001768:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800176a:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 800176e:	4302      	orrs	r2, r0
 8001770:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001772:	2b01      	cmp	r3, #1
 8001774:	d103      	bne.n	800177e <HAL_ADC_Init+0xda>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001776:	6a23      	ldr	r3, [r4, #32]
 8001778:	3b01      	subs	r3, #1
 800177a:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800177e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001780:	b123      	cbz	r3, 800178c <HAL_ADC_Init+0xe8>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001782:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001786:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001788:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800178a:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	4945      	ldr	r1, [pc, #276]	@ (80018a4 <HAL_ADC_Init+0x200>)
 8001790:	68d8      	ldr	r0, [r3, #12]
 8001792:	4001      	ands	r1, r0
 8001794:	4311      	orrs	r1, r2
 8001796:	60d9      	str	r1, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800179e:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017a0:	d11c      	bne.n	80017dc <HAL_ADC_Init+0x138>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017a2:	0712      	lsls	r2, r2, #28
 80017a4:	d41a      	bmi.n	80017dc <HAL_ADC_Init+0x138>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017a6:	68d8      	ldr	r0, [r3, #12]
 80017a8:	4a3f      	ldr	r2, [pc, #252]	@ (80018a8 <HAL_ADC_Init+0x204>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017aa:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017ac:	4002      	ands	r2, r0
 80017ae:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 80017b2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80017b4:	430a      	orrs	r2, r1
 80017b6:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80017b8:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 80017bc:	2a01      	cmp	r2, #1
 80017be:	d053      	beq.n	8001868 <HAL_ADC_Init+0x1c4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017c0:	691a      	ldr	r2, [r3, #16]
 80017c2:	f022 0201 	bic.w	r2, r2, #1
 80017c6:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80017c8:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 80017ca:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80017cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80017ce:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80017d2:	430a      	orrs	r2, r1
 80017d4:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 80017d6:	f7ff fea9 	bl	800152c <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017da:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017dc:	68e2      	ldr	r2, [r4, #12]
 80017de:	2a01      	cmp	r2, #1
 80017e0:	d027      	beq.n	8001832 <HAL_ADC_Init+0x18e>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017e4:	f022 020f 	bic.w	r2, r2, #15
 80017e8:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017ea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
}
 80017ec:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017ee:	f023 0303 	bic.w	r3, r3, #3
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6563      	str	r3, [r4, #84]	@ 0x54
}
 80017f8:	b002      	add	sp, #8
 80017fa:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017fc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80017fe:	f043 0310 	orr.w	r3, r3, #16
 8001802:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8001804:	2501      	movs	r5, #1
}
 8001806:	4628      	mov	r0, r5
 8001808:	b002      	add	sp, #8
 800180a:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800180c:	2500      	movs	r5, #0
 800180e:	e783      	b.n	8001718 <HAL_ADC_Init+0x74>
    HAL_ADC_MspInit(hadc);
 8001810:	f7ff f9f6 	bl	8000c00 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001814:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8001816:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 800181a:	e74f      	b.n	80016bc <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800181c:	2910      	cmp	r1, #16
 800181e:	d1a0      	bne.n	8001762 <HAL_ADC_Init+0xbe>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001820:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001822:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001824:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001828:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800182a:	430a      	orrs	r2, r1
 800182c:	f042 021c 	orr.w	r2, r2, #28
 8001830:	e79f      	b.n	8001772 <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001832:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001834:	69a2      	ldr	r2, [r4, #24]
 8001836:	f021 010f 	bic.w	r1, r1, #15
 800183a:	3a01      	subs	r2, #1
 800183c:	430a      	orrs	r2, r1
 800183e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001840:	e7d3      	b.n	80017ea <HAL_ADC_Init+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001842:	4a16      	ldr	r2, [pc, #88]	@ (800189c <HAL_ADC_Init+0x1f8>)
 8001844:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <HAL_ADC_Init+0x208>)
 8001846:	6892      	ldr	r2, [r2, #8]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	07de      	lsls	r6, r3, #31
 800184c:	d481      	bmi.n	8001752 <HAL_ADC_Init+0xae>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800184e:	07d0      	lsls	r0, r2, #31
 8001850:	f53f af7f 	bmi.w	8001752 <HAL_ADC_Init+0xae>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001854:	4a16      	ldr	r2, [pc, #88]	@ (80018b0 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001856:	6893      	ldr	r3, [r2, #8]
 8001858:	6861      	ldr	r1, [r4, #4]
 800185a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800185e:	430b      	orrs	r3, r1
 8001860:	6093      	str	r3, [r2, #8]
}
 8001862:	e776      	b.n	8001752 <HAL_ADC_Init+0xae>
 8001864:	4a13      	ldr	r2, [pc, #76]	@ (80018b4 <HAL_ADC_Init+0x210>)
 8001866:	e7f6      	b.n	8001856 <HAL_ADC_Init+0x1b2>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001868:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 800186c:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 800186e:	3901      	subs	r1, #1
 8001870:	6918      	ldr	r0, [r3, #16]
 8001872:	4332      	orrs	r2, r6
 8001874:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001878:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800187a:	430a      	orrs	r2, r1
 800187c:	490e      	ldr	r1, [pc, #56]	@ (80018b8 <HAL_ADC_Init+0x214>)
 800187e:	4001      	ands	r1, r0
 8001880:	430a      	orrs	r2, r1
 8001882:	f042 0201 	orr.w	r2, r2, #1
 8001886:	611a      	str	r2, [r3, #16]
 8001888:	e79e      	b.n	80017c8 <HAL_ADC_Init+0x124>
 800188a:	bf00      	nop
 800188c:	5fffffc0 	.word	0x5fffffc0
 8001890:	24000008 	.word	0x24000008
 8001894:	053e2d63 	.word	0x053e2d63
 8001898:	6fffffc0 	.word	0x6fffffc0
 800189c:	40022000 	.word	0x40022000
 80018a0:	58026000 	.word	0x58026000
 80018a4:	fff0c003 	.word	0xfff0c003
 80018a8:	ffffbffc 	.word	0xffffbffc
 80018ac:	40022100 	.word	0x40022100
 80018b0:	40022300 	.word	0x40022300
 80018b4:	58026300 	.word	0x58026300
 80018b8:	fc00f81e 	.word	0xfc00f81e

080018bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4906      	ldr	r1, [pc, #24]	@ (80018d8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018be:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c2:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c6:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c8:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018cc:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80018d2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80018d4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00
 80018dc:	05fa0000 	.word	0x05fa0000

080018e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e0:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <HAL_NVIC_SetPriority+0x6c>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ea:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ee:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f2:	f1be 0f04 	cmp.w	lr, #4
 80018f6:	bf28      	it	cs
 80018f8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fc:	f1bc 0f06 	cmp.w	ip, #6
 8001900:	d91a      	bls.n	8001938 <HAL_NVIC_SetPriority+0x58>
 8001902:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	fa03 f30c 	lsl.w	r3, r3, ip
 800190e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001916:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	fa03 f30e 	lsl.w	r3, r3, lr
 800191c:	ea21 0303 	bic.w	r3, r1, r3
 8001920:	fa03 f30c 	lsl.w	r3, r3, ip
 8001924:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800192c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800192e:	db06      	blt.n	800193e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001930:	4a07      	ldr	r2, [pc, #28]	@ (8001950 <HAL_NVIC_SetPriority+0x70>)
 8001932:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001934:	f85d fb04 	ldr.w	pc, [sp], #4
 8001938:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	4694      	mov	ip, r2
 800193c:	e7e9      	b.n	8001912 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	f000 000f 	and.w	r0, r0, #15
 8001942:	4a04      	ldr	r2, [pc, #16]	@ (8001954 <HAL_NVIC_SetPriority+0x74>)
 8001944:	5413      	strb	r3, [r2, r0]
 8001946:	f85d fb04 	ldr.w	pc, [sp], #4
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00
 8001950:	e000e400 	.word	0xe000e400
 8001954:	e000ed14 	.word	0xe000ed14

08001958 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001958:	2800      	cmp	r0, #0
 800195a:	db07      	blt.n	800196c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195c:	2301      	movs	r3, #1
 800195e:	f000 011f 	and.w	r1, r0, #31
 8001962:	4a03      	ldr	r2, [pc, #12]	@ (8001970 <HAL_NVIC_EnableIRQ+0x18>)
 8001964:	0940      	lsrs	r0, r0, #5
 8001966:	408b      	lsls	r3, r1
 8001968:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000e100 	.word	0xe000e100

08001974 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001974:	1e43      	subs	r3, r0, #1
 8001976:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800197a:	d301      	bcc.n	8001980 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800197e:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001980:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001984:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	4905      	ldr	r1, [pc, #20]	@ (800199c <HAL_SYSTICK_Config+0x28>)
 8001988:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198c:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198e:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001994:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001996:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019a0:	4936      	ldr	r1, [pc, #216]	@ (8001a7c <DMA_CalcBaseAndBitshift+0xdc>)
{
 80019a2:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019a4:	6803      	ldr	r3, [r0, #0]
 80019a6:	428b      	cmp	r3, r1
 80019a8:	d033      	beq.n	8001a12 <DMA_CalcBaseAndBitshift+0x72>
 80019aa:	3118      	adds	r1, #24
 80019ac:	1a59      	subs	r1, r3, r1
 80019ae:	fab1 f181 	clz	r1, r1
 80019b2:	0949      	lsrs	r1, r1, #5
 80019b4:	bb69      	cbnz	r1, 8001a12 <DMA_CalcBaseAndBitshift+0x72>
 80019b6:	4832      	ldr	r0, [pc, #200]	@ (8001a80 <DMA_CalcBaseAndBitshift+0xe0>)
 80019b8:	4283      	cmp	r3, r0
 80019ba:	d03e      	beq.n	8001a3a <DMA_CalcBaseAndBitshift+0x9a>
 80019bc:	3018      	adds	r0, #24
 80019be:	4283      	cmp	r3, r0
 80019c0:	d03e      	beq.n	8001a40 <DMA_CalcBaseAndBitshift+0xa0>
 80019c2:	3018      	adds	r0, #24
 80019c4:	4283      	cmp	r3, r0
 80019c6:	d034      	beq.n	8001a32 <DMA_CalcBaseAndBitshift+0x92>
 80019c8:	3018      	adds	r0, #24
 80019ca:	4283      	cmp	r3, r0
 80019cc:	d03b      	beq.n	8001a46 <DMA_CalcBaseAndBitshift+0xa6>
 80019ce:	3018      	adds	r0, #24
 80019d0:	4283      	cmp	r3, r0
 80019d2:	d03e      	beq.n	8001a52 <DMA_CalcBaseAndBitshift+0xb2>
 80019d4:	3018      	adds	r0, #24
 80019d6:	4283      	cmp	r3, r0
 80019d8:	d02a      	beq.n	8001a30 <DMA_CalcBaseAndBitshift+0x90>
 80019da:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 80019de:	4283      	cmp	r3, r0
 80019e0:	d035      	beq.n	8001a4e <DMA_CalcBaseAndBitshift+0xae>
 80019e2:	4928      	ldr	r1, [pc, #160]	@ (8001a84 <DMA_CalcBaseAndBitshift+0xe4>)
 80019e4:	428b      	cmp	r3, r1
 80019e6:	d031      	beq.n	8001a4c <DMA_CalcBaseAndBitshift+0xac>
 80019e8:	3118      	adds	r1, #24
 80019ea:	428b      	cmp	r3, r1
 80019ec:	d034      	beq.n	8001a58 <DMA_CalcBaseAndBitshift+0xb8>
 80019ee:	3118      	adds	r1, #24
 80019f0:	428b      	cmp	r3, r1
 80019f2:	d034      	beq.n	8001a5e <DMA_CalcBaseAndBitshift+0xbe>
 80019f4:	3118      	adds	r1, #24
 80019f6:	428b      	cmp	r3, r1
 80019f8:	d034      	beq.n	8001a64 <DMA_CalcBaseAndBitshift+0xc4>
 80019fa:	3118      	adds	r1, #24
 80019fc:	428b      	cmp	r3, r1
 80019fe:	d034      	beq.n	8001a6a <DMA_CalcBaseAndBitshift+0xca>
 8001a00:	3118      	adds	r1, #24
 8001a02:	428b      	cmp	r3, r1
 8001a04:	d034      	beq.n	8001a70 <DMA_CalcBaseAndBitshift+0xd0>
 8001a06:	3118      	adds	r1, #24
 8001a08:	428b      	cmp	r3, r1
 8001a0a:	d034      	beq.n	8001a76 <DMA_CalcBaseAndBitshift+0xd6>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8001a0c:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
 8001a10:	e011      	b.n	8001a36 <DMA_CalcBaseAndBitshift+0x96>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	491c      	ldr	r1, [pc, #112]	@ (8001a88 <DMA_CalcBaseAndBitshift+0xe8>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001a16:	481d      	ldr	r0, [pc, #116]	@ (8001a8c <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001a18:	3b10      	subs	r3, #16
 8001a1a:	fba1 1303 	umull	r1, r3, r1, r3
{
 8001a1e:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001a20:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001a22:	4c1b      	ldr	r4, [pc, #108]	@ (8001a90 <DMA_CalcBaseAndBitshift+0xf0>)
 8001a24:	5ce1      	ldrb	r1, [r4, r3]
  }

  return hdma->StreamBaseAddress;
}
 8001a26:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8001a2a:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
}
 8001a2e:	4770      	bx	lr
 8001a30:	2116      	movs	r1, #22
 8001a32:	4818      	ldr	r0, [pc, #96]	@ (8001a94 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8001a34:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8001a36:	6590      	str	r0, [r2, #88]	@ 0x58
}
 8001a38:	4770      	bx	lr
 8001a3a:	2110      	movs	r1, #16
 8001a3c:	4813      	ldr	r0, [pc, #76]	@ (8001a8c <DMA_CalcBaseAndBitshift+0xec>)
 8001a3e:	e7f9      	b.n	8001a34 <DMA_CalcBaseAndBitshift+0x94>
 8001a40:	2116      	movs	r1, #22
 8001a42:	4812      	ldr	r0, [pc, #72]	@ (8001a8c <DMA_CalcBaseAndBitshift+0xec>)
 8001a44:	e7f6      	b.n	8001a34 <DMA_CalcBaseAndBitshift+0x94>
 8001a46:	2106      	movs	r1, #6
 8001a48:	4812      	ldr	r0, [pc, #72]	@ (8001a94 <DMA_CalcBaseAndBitshift+0xf4>)
 8001a4a:	e7f3      	b.n	8001a34 <DMA_CalcBaseAndBitshift+0x94>
 8001a4c:	2106      	movs	r1, #6
 8001a4e:	4812      	ldr	r0, [pc, #72]	@ (8001a98 <DMA_CalcBaseAndBitshift+0xf8>)
 8001a50:	e7f0      	b.n	8001a34 <DMA_CalcBaseAndBitshift+0x94>
 8001a52:	2110      	movs	r1, #16
 8001a54:	480f      	ldr	r0, [pc, #60]	@ (8001a94 <DMA_CalcBaseAndBitshift+0xf4>)
 8001a56:	e7ed      	b.n	8001a34 <DMA_CalcBaseAndBitshift+0x94>
 8001a58:	2110      	movs	r1, #16
 8001a5a:	480f      	ldr	r0, [pc, #60]	@ (8001a98 <DMA_CalcBaseAndBitshift+0xf8>)
 8001a5c:	e7ea      	b.n	8001a34 <DMA_CalcBaseAndBitshift+0x94>
 8001a5e:	2116      	movs	r1, #22
 8001a60:	480d      	ldr	r0, [pc, #52]	@ (8001a98 <DMA_CalcBaseAndBitshift+0xf8>)
 8001a62:	e7e7      	b.n	8001a34 <DMA_CalcBaseAndBitshift+0x94>
 8001a64:	2100      	movs	r1, #0
 8001a66:	480d      	ldr	r0, [pc, #52]	@ (8001a9c <DMA_CalcBaseAndBitshift+0xfc>)
 8001a68:	e7e4      	b.n	8001a34 <DMA_CalcBaseAndBitshift+0x94>
 8001a6a:	2106      	movs	r1, #6
 8001a6c:	480b      	ldr	r0, [pc, #44]	@ (8001a9c <DMA_CalcBaseAndBitshift+0xfc>)
 8001a6e:	e7e1      	b.n	8001a34 <DMA_CalcBaseAndBitshift+0x94>
 8001a70:	2110      	movs	r1, #16
 8001a72:	480a      	ldr	r0, [pc, #40]	@ (8001a9c <DMA_CalcBaseAndBitshift+0xfc>)
 8001a74:	e7de      	b.n	8001a34 <DMA_CalcBaseAndBitshift+0x94>
 8001a76:	2116      	movs	r1, #22
 8001a78:	4808      	ldr	r0, [pc, #32]	@ (8001a9c <DMA_CalcBaseAndBitshift+0xfc>)
 8001a7a:	e7db      	b.n	8001a34 <DMA_CalcBaseAndBitshift+0x94>
 8001a7c:	40020010 	.word	0x40020010
 8001a80:	40020040 	.word	0x40020040
 8001a84:	40020428 	.word	0x40020428
 8001a88:	aaaaaaab 	.word	0xaaaaaaab
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	080051a0 	.word	0x080051a0
 8001a94:	40020004 	.word	0x40020004
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	40020404 	.word	0x40020404

08001aa0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8001aa0:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001aa2:	4b27      	ldr	r3, [pc, #156]	@ (8001b40 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8001aa4:	4927      	ldr	r1, [pc, #156]	@ (8001b44 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 8001aa6:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001aa8:	4d27      	ldr	r5, [pc, #156]	@ (8001b48 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8001aaa:	4c28      	ldr	r4, [pc, #160]	@ (8001b4c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8001aac:	42aa      	cmp	r2, r5
 8001aae:	bf18      	it	ne
 8001ab0:	429a      	cmpne	r2, r3
 8001ab2:	bf0c      	ite	eq
 8001ab4:	2301      	moveq	r3, #1
 8001ab6:	2300      	movne	r3, #0
 8001ab8:	428a      	cmp	r2, r1
 8001aba:	bf08      	it	eq
 8001abc:	f043 0301 	orreq.w	r3, r3, #1
 8001ac0:	3128      	adds	r1, #40	@ 0x28
 8001ac2:	42a2      	cmp	r2, r4
 8001ac4:	bf08      	it	eq
 8001ac6:	f043 0301 	orreq.w	r3, r3, #1
 8001aca:	3428      	adds	r4, #40	@ 0x28
 8001acc:	428a      	cmp	r2, r1
 8001ace:	bf08      	it	eq
 8001ad0:	f043 0301 	orreq.w	r3, r3, #1
 8001ad4:	3128      	adds	r1, #40	@ 0x28
 8001ad6:	42a2      	cmp	r2, r4
 8001ad8:	bf08      	it	eq
 8001ada:	f043 0301 	orreq.w	r3, r3, #1
 8001ade:	428a      	cmp	r2, r1
 8001ae0:	bf08      	it	eq
 8001ae2:	f043 0301 	orreq.w	r3, r3, #1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001ae6:	b2d1      	uxtb	r1, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001ae8:	b913      	cbnz	r3, 8001af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 8001aea:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d112      	bne.n	8001b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001af0:	f1a1 0308 	sub.w	r3, r1, #8
 8001af4:	4917      	ldr	r1, [pc, #92]	@ (8001b54 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001af6:	4a18      	ldr	r2, [pc, #96]	@ (8001b58 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8001af8:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001afc:	2101      	movs	r1, #1
 8001afe:	4c17      	ldr	r4, [pc, #92]	@ (8001b5c <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001b00:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001b04:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8001b08:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001b0a:	4099      	lsls	r1, r3
 8001b0c:	6681      	str	r1, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8001b0e:	e9c0 2418 	strd	r2, r4, [r0, #96]	@ 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8001b12:	bc30      	pop	{r4, r5}
 8001b14:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001b16:	f1a1 0310 	sub.w	r3, r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001b1a:	4911      	ldr	r1, [pc, #68]	@ (8001b60 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001b1c:	4c11      	ldr	r4, [pc, #68]	@ (8001b64 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001b1e:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001b20:	fba4 4303 	umull	r4, r3, r4, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001b24:	29a8      	cmp	r1, #168	@ 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8001b26:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8001b2a:	d800      	bhi.n	8001b2e <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8001b2c:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b68 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001b30:	f003 041f 	and.w	r4, r3, #31
 8001b34:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001b36:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001b38:	40a1      	lsls	r1, r4
 8001b3a:	4c0c      	ldr	r4, [pc, #48]	@ (8001b6c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8001b3c:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8001b3e:	e7e5      	b.n	8001b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 8001b40:	58025408 	.word	0x58025408
 8001b44:	58025430 	.word	0x58025430
 8001b48:	5802541c 	.word	0x5802541c
 8001b4c:	58025444 	.word	0x58025444
 8001b50:	58025494 	.word	0x58025494
 8001b54:	cccccccd 	.word	0xcccccccd
 8001b58:	16009600 	.word	0x16009600
 8001b5c:	58025880 	.word	0x58025880
 8001b60:	bffdfbf0 	.word	0xbffdfbf0
 8001b64:	aaaaaaab 	.word	0xaaaaaaab
 8001b68:	10008200 	.word	0x10008200
 8001b6c:	40020880 	.word	0x40020880

08001b70 <HAL_DMA_Init>:
{
 8001b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b74:	4605      	mov	r5, r0
 8001b76:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 8001b78:	f7ff faaa 	bl	80010d0 <HAL_GetTick>
  if(hdma == NULL)
 8001b7c:	2d00      	cmp	r5, #0
 8001b7e:	f000 8203 	beq.w	8001f88 <HAL_DMA_Init+0x418>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b82:	682c      	ldr	r4, [r5, #0]
 8001b84:	4606      	mov	r6, r0
 8001b86:	4b65      	ldr	r3, [pc, #404]	@ (8001d1c <HAL_DMA_Init+0x1ac>)
 8001b88:	429c      	cmp	r4, r3
 8001b8a:	f000 80bc 	beq.w	8001d06 <HAL_DMA_Init+0x196>
 8001b8e:	3318      	adds	r3, #24
 8001b90:	429c      	cmp	r4, r3
 8001b92:	f000 80b8 	beq.w	8001d06 <HAL_DMA_Init+0x196>
 8001b96:	3318      	adds	r3, #24
 8001b98:	429c      	cmp	r4, r3
 8001b9a:	f000 80b4 	beq.w	8001d06 <HAL_DMA_Init+0x196>
 8001b9e:	3318      	adds	r3, #24
 8001ba0:	429c      	cmp	r4, r3
 8001ba2:	f000 80b0 	beq.w	8001d06 <HAL_DMA_Init+0x196>
 8001ba6:	3318      	adds	r3, #24
 8001ba8:	429c      	cmp	r4, r3
 8001baa:	f000 80ac 	beq.w	8001d06 <HAL_DMA_Init+0x196>
 8001bae:	3318      	adds	r3, #24
 8001bb0:	429c      	cmp	r4, r3
 8001bb2:	f000 80a8 	beq.w	8001d06 <HAL_DMA_Init+0x196>
 8001bb6:	3318      	adds	r3, #24
 8001bb8:	429c      	cmp	r4, r3
 8001bba:	f000 80a4 	beq.w	8001d06 <HAL_DMA_Init+0x196>
 8001bbe:	3318      	adds	r3, #24
 8001bc0:	429c      	cmp	r4, r3
 8001bc2:	f000 80a0 	beq.w	8001d06 <HAL_DMA_Init+0x196>
 8001bc6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8001bca:	429c      	cmp	r4, r3
 8001bcc:	f000 809b 	beq.w	8001d06 <HAL_DMA_Init+0x196>
 8001bd0:	3318      	adds	r3, #24
 8001bd2:	429c      	cmp	r4, r3
 8001bd4:	f000 8097 	beq.w	8001d06 <HAL_DMA_Init+0x196>
 8001bd8:	3318      	adds	r3, #24
 8001bda:	429c      	cmp	r4, r3
 8001bdc:	f000 8093 	beq.w	8001d06 <HAL_DMA_Init+0x196>
 8001be0:	3318      	adds	r3, #24
 8001be2:	429c      	cmp	r4, r3
 8001be4:	f000 808f 	beq.w	8001d06 <HAL_DMA_Init+0x196>
 8001be8:	3318      	adds	r3, #24
 8001bea:	429c      	cmp	r4, r3
 8001bec:	f000 808b 	beq.w	8001d06 <HAL_DMA_Init+0x196>
 8001bf0:	3318      	adds	r3, #24
 8001bf2:	429c      	cmp	r4, r3
 8001bf4:	f000 8087 	beq.w	8001d06 <HAL_DMA_Init+0x196>
 8001bf8:	3318      	adds	r3, #24
 8001bfa:	429c      	cmp	r4, r3
 8001bfc:	f000 8083 	beq.w	8001d06 <HAL_DMA_Init+0x196>
 8001c00:	3318      	adds	r3, #24
 8001c02:	429c      	cmp	r4, r3
 8001c04:	d07f      	beq.n	8001d06 <HAL_DMA_Init+0x196>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c06:	4946      	ldr	r1, [pc, #280]	@ (8001d20 <HAL_DMA_Init+0x1b0>)
 8001c08:	4a46      	ldr	r2, [pc, #280]	@ (8001d24 <HAL_DMA_Init+0x1b4>)
 8001c0a:	4b47      	ldr	r3, [pc, #284]	@ (8001d28 <HAL_DMA_Init+0x1b8>)
 8001c0c:	eba4 0901 	sub.w	r9, r4, r1
 8001c10:	1aa2      	subs	r2, r4, r2
 8001c12:	4f46      	ldr	r7, [pc, #280]	@ (8001d2c <HAL_DMA_Init+0x1bc>)
 8001c14:	eba4 0803 	sub.w	r8, r4, r3
 8001c18:	fab9 f989 	clz	r9, r9
 8001c1c:	3314      	adds	r3, #20
 8001c1e:	fab2 f282 	clz	r2, r2
 8001c22:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8001c26:	fab8 f888 	clz	r8, r8
 8001c2a:	eba4 0a03 	sub.w	sl, r4, r3
 8001c2e:	0952      	lsrs	r2, r2, #5
 8001c30:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8001c34:	1be7      	subs	r7, r4, r7
 8001c36:	faba fa8a 	clz	sl, sl
 8001c3a:	ea49 0102 	orr.w	r1, r9, r2
 8001c3e:	4e3c      	ldr	r6, [pc, #240]	@ (8001d30 <HAL_DMA_Init+0x1c0>)
 8001c40:	fab7 f787 	clz	r7, r7
 8001c44:	483b      	ldr	r0, [pc, #236]	@ (8001d34 <HAL_DMA_Init+0x1c4>)
 8001c46:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8001c4a:	ea48 0101 	orr.w	r1, r8, r1
 8001c4e:	1ba6      	subs	r6, r4, r6
 8001c50:	eba4 0b00 	sub.w	fp, r4, r0
 8001c54:	097f      	lsrs	r7, r7, #5
 8001c56:	ea4a 0101 	orr.w	r1, sl, r1
 8001c5a:	fab6 f686 	clz	r6, r6
 8001c5e:	3014      	adds	r0, #20
 8001c60:	fabb fb8b 	clz	fp, fp
 8001c64:	4339      	orrs	r1, r7
 8001c66:	0976      	lsrs	r6, r6, #5
 8001c68:	1a23      	subs	r3, r4, r0
 8001c6a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8001c6e:	4331      	orrs	r1, r6
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	ea5b 0101 	orrs.w	r1, fp, r1
 8001c78:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	d102      	bne.n	8001c86 <HAL_DMA_Init+0x116>
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 81d4 	beq.w	800202e <HAL_DMA_Init+0x4be>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c86:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c88:	f8df c0b4 	ldr.w	ip, [pc, #180]	@ 8001d40 <HAL_DMA_Init+0x1d0>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c8c:	f885 1035 	strb.w	r1, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001c90:	2100      	movs	r1, #0
 8001c92:	f885 1034 	strb.w	r1, [r5, #52]	@ 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001c96:	6821      	ldr	r1, [r4, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c98:	ea01 0c0c 	and.w	ip, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c9c:	68a9      	ldr	r1, [r5, #8]
 8001c9e:	2940      	cmp	r1, #64	@ 0x40
 8001ca0:	f000 81c2 	beq.w	8002028 <HAL_DMA_Init+0x4b8>
 8001ca4:	f1a1 0180 	sub.w	r1, r1, #128	@ 0x80
 8001ca8:	fab1 f181 	clz	r1, r1
 8001cac:	0949      	lsrs	r1, r1, #5
 8001cae:	ea4f 3e81 	mov.w	lr, r1, lsl #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001cb2:	6929      	ldr	r1, [r5, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001cb4:	68e8      	ldr	r0, [r5, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001cb6:	08c9      	lsrs	r1, r1, #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d38 <HAL_DMA_Init+0x1c8>)
 8001cba:	9200      	str	r2, [sp, #0]
 8001cbc:	ea41 00d0 	orr.w	r0, r1, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001cc0:	6969      	ldr	r1, [r5, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001cc2:	4423      	add	r3, r4
 8001cc4:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001cc8:	69a9      	ldr	r1, [r5, #24]
 8001cca:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001cce:	69e9      	ldr	r1, [r5, #28]
 8001cd0:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001cd4:	6a29      	ldr	r1, [r5, #32]
 8001cd6:	ea40 1111 	orr.w	r1, r0, r1, lsr #4
 8001cda:	ea41 010c 	orr.w	r1, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cde:	ea4e 0101 	orr.w	r1, lr, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001ce2:	6021      	str	r1, [r4, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001ce4:	4915      	ldr	r1, [pc, #84]	@ (8001d3c <HAL_DMA_Init+0x1cc>)
 8001ce6:	fba1 0103 	umull	r0, r1, r1, r3
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cea:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001cec:	0909      	lsrs	r1, r1, #4
 8001cee:	0089      	lsls	r1, r1, #2
 8001cf0:	65e9      	str	r1, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cf2:	f7ff fe55 	bl	80019a0 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001cf6:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 8001cf8:	9a00      	ldr	r2, [sp, #0]
 8001cfa:	f001 041f 	and.w	r4, r1, #31
 8001cfe:	2101      	movs	r1, #1
 8001d00:	40a1      	lsls	r1, r4
 8001d02:	6041      	str	r1, [r0, #4]
 8001d04:	e0e2      	b.n	8001ecc <HAL_DMA_Init+0x35c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d06:	2302      	movs	r3, #2
 8001d08:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	6023      	str	r3, [r4, #0]
 8001d1a:	e01a      	b.n	8001d52 <HAL_DMA_Init+0x1e2>
 8001d1c:	40020010 	.word	0x40020010
 8001d20:	58025408 	.word	0x58025408
 8001d24:	5802541c 	.word	0x5802541c
 8001d28:	58025430 	.word	0x58025430
 8001d2c:	58025458 	.word	0x58025458
 8001d30:	5802546c 	.word	0x5802546c
 8001d34:	58025480 	.word	0x58025480
 8001d38:	a7fdabf8 	.word	0xa7fdabf8
 8001d3c:	cccccccd 	.word	0xcccccccd
 8001d40:	fffe000f 	.word	0xfffe000f
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d44:	f7ff f9c4 	bl	80010d0 <HAL_GetTick>
 8001d48:	1b80      	subs	r0, r0, r6
 8001d4a:	2805      	cmp	r0, #5
 8001d4c:	f200 8117 	bhi.w	8001f7e <HAL_DMA_Init+0x40e>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d50:	682c      	ldr	r4, [r5, #0]
 8001d52:	6823      	ldr	r3, [r4, #0]
 8001d54:	07df      	lsls	r7, r3, #31
 8001d56:	d4f5      	bmi.n	8001d44 <HAL_DMA_Init+0x1d4>
    registerValue |=  hdma->Init.Direction           |
 8001d58:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5c:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8001d5e:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d60:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001d62:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d64:	430b      	orrs	r3, r1
 8001d66:	6969      	ldr	r1, [r5, #20]
 8001d68:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6a:	69e9      	ldr	r1, [r5, #28]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d70:	49b2      	ldr	r1, [pc, #712]	@ (800203c <HAL_DMA_Init+0x4cc>)
 8001d72:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d74:	6a28      	ldr	r0, [r5, #32]
 8001d76:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d78:	48b1      	ldr	r0, [pc, #708]	@ (8002040 <HAL_DMA_Init+0x4d0>)
    registerValue |=  hdma->Init.Direction           |
 8001d7a:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d7c:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8001d7e:	2904      	cmp	r1, #4
 8001d80:	f000 8117 	beq.w	8001fb2 <HAL_DMA_Init+0x442>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d84:	6806      	ldr	r6, [r0, #0]
 8001d86:	48af      	ldr	r0, [pc, #700]	@ (8002044 <HAL_DMA_Init+0x4d4>)
 8001d88:	4030      	ands	r0, r6
 8001d8a:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8001d8e:	f080 80d5 	bcs.w	8001f3c <HAL_DMA_Init+0x3cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d92:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d94:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d96:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8001d9a:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001d9c:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d9e:	4628      	mov	r0, r5
 8001da0:	f7ff fdfe 	bl	80019a0 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001da4:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8001da6:	233f      	movs	r3, #63	@ 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001da8:	49a7      	ldr	r1, [pc, #668]	@ (8002048 <HAL_DMA_Init+0x4d8>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001daa:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dae:	4fa7      	ldr	r7, [pc, #668]	@ (800204c <HAL_DMA_Init+0x4dc>)
 8001db0:	4ea7      	ldr	r6, [pc, #668]	@ (8002050 <HAL_DMA_Init+0x4e0>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001db2:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001db4:	4aa7      	ldr	r2, [pc, #668]	@ (8002054 <HAL_DMA_Init+0x4e4>)
 8001db6:	1be7      	subs	r7, r4, r7
 8001db8:	1ba6      	subs	r6, r4, r6
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001dba:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dbc:	eba4 0902 	sub.w	r9, r4, r2
 8001dc0:	4ba5      	ldr	r3, [pc, #660]	@ (8002058 <HAL_DMA_Init+0x4e8>)
 8001dc2:	3214      	adds	r2, #20
 8001dc4:	fab9 f989 	clz	r9, r9
 8001dc8:	48a4      	ldr	r0, [pc, #656]	@ (800205c <HAL_DMA_Init+0x4ec>)
 8001dca:	eba4 0803 	sub.w	r8, r4, r3
 8001dce:	4ba4      	ldr	r3, [pc, #656]	@ (8002060 <HAL_DMA_Init+0x4f0>)
 8001dd0:	1aa2      	subs	r2, r4, r2
 8001dd2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8001dd6:	429c      	cmp	r4, r3
 8001dd8:	bf18      	it	ne
 8001dda:	428c      	cmpne	r4, r1
 8001ddc:	f103 0318 	add.w	r3, r3, #24
 8001de0:	fab2 f282 	clz	r2, r2
 8001de4:	fab8 f888 	clz	r8, r8
 8001de8:	bf0c      	ite	eq
 8001dea:	2101      	moveq	r1, #1
 8001dec:	2100      	movne	r1, #0
 8001dee:	0952      	lsrs	r2, r2, #5
 8001df0:	fab7 f787 	clz	r7, r7
 8001df4:	429c      	cmp	r4, r3
 8001df6:	bf08      	it	eq
 8001df8:	f041 0101 	orreq.w	r1, r1, #1
 8001dfc:	3318      	adds	r3, #24
 8001dfe:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8001e02:	eba4 0b00 	sub.w	fp, r4, r0
 8001e06:	429c      	cmp	r4, r3
 8001e08:	bf08      	it	eq
 8001e0a:	f041 0101 	orreq.w	r1, r1, #1
 8001e0e:	3318      	adds	r3, #24
 8001e10:	097f      	lsrs	r7, r7, #5
 8001e12:	fab6 f686 	clz	r6, r6
 8001e16:	429c      	cmp	r4, r3
 8001e18:	bf08      	it	eq
 8001e1a:	f041 0101 	orreq.w	r1, r1, #1
 8001e1e:	3318      	adds	r3, #24
 8001e20:	3014      	adds	r0, #20
 8001e22:	0976      	lsrs	r6, r6, #5
 8001e24:	429c      	cmp	r4, r3
 8001e26:	bf08      	it	eq
 8001e28:	f041 0101 	orreq.w	r1, r1, #1
 8001e2c:	3318      	adds	r3, #24
 8001e2e:	fabb fb8b 	clz	fp, fp
 8001e32:	429c      	cmp	r4, r3
 8001e34:	bf08      	it	eq
 8001e36:	f041 0101 	orreq.w	r1, r1, #1
 8001e3a:	3318      	adds	r3, #24
 8001e3c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8001e40:	429c      	cmp	r4, r3
 8001e42:	bf08      	it	eq
 8001e44:	f041 0101 	orreq.w	r1, r1, #1
 8001e48:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	bf08      	it	eq
 8001e50:	f041 0101 	orreq.w	r1, r1, #1
 8001e54:	3318      	adds	r3, #24
 8001e56:	429c      	cmp	r4, r3
 8001e58:	bf08      	it	eq
 8001e5a:	f041 0101 	orreq.w	r1, r1, #1
 8001e5e:	3318      	adds	r3, #24
 8001e60:	429c      	cmp	r4, r3
 8001e62:	bf08      	it	eq
 8001e64:	f041 0101 	orreq.w	r1, r1, #1
 8001e68:	3318      	adds	r3, #24
 8001e6a:	429c      	cmp	r4, r3
 8001e6c:	bf08      	it	eq
 8001e6e:	f041 0101 	orreq.w	r1, r1, #1
 8001e72:	3318      	adds	r3, #24
 8001e74:	429c      	cmp	r4, r3
 8001e76:	bf08      	it	eq
 8001e78:	f041 0101 	orreq.w	r1, r1, #1
 8001e7c:	3318      	adds	r3, #24
 8001e7e:	429c      	cmp	r4, r3
 8001e80:	bf08      	it	eq
 8001e82:	f041 0101 	orreq.w	r1, r1, #1
 8001e86:	3318      	adds	r3, #24
 8001e88:	429c      	cmp	r4, r3
 8001e8a:	bf08      	it	eq
 8001e8c:	f041 0101 	orreq.w	r1, r1, #1
 8001e90:	3318      	adds	r3, #24
 8001e92:	429c      	cmp	r4, r3
 8001e94:	bf08      	it	eq
 8001e96:	f041 0101 	orreq.w	r1, r1, #1
 8001e9a:	4b72      	ldr	r3, [pc, #456]	@ (8002064 <HAL_DMA_Init+0x4f4>)
 8001e9c:	ea49 0101 	orr.w	r1, r9, r1
 8001ea0:	eba4 0a03 	sub.w	sl, r4, r3
 8001ea4:	1a23      	subs	r3, r4, r0
 8001ea6:	4311      	orrs	r1, r2
 8001ea8:	faba fa8a 	clz	sl, sl
 8001eac:	fab3 f383 	clz	r3, r3
 8001eb0:	ea48 0101 	orr.w	r1, r8, r1
 8001eb4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8001eb8:	095b      	lsrs	r3, r3, #5
 8001eba:	ea4a 0101 	orr.w	r1, sl, r1
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	4339      	orrs	r1, r7
 8001ec2:	4331      	orrs	r1, r6
 8001ec4:	ea5b 0101 	orrs.w	r1, fp, r1
 8001ec8:	d100      	bne.n	8001ecc <HAL_DMA_Init+0x35c>
 8001eca:	b37b      	cbz	r3, 8001f2c <HAL_DMA_Init+0x3bc>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ecc:	4628      	mov	r0, r5
 8001ece:	9200      	str	r2, [sp, #0]
 8001ed0:	f7ff fde6 	bl	8001aa0 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ed4:	68a9      	ldr	r1, [r5, #8]
 8001ed6:	9a00      	ldr	r2, [sp, #0]
 8001ed8:	2980      	cmp	r1, #128	@ 0x80
 8001eda:	d05e      	beq.n	8001f9a <HAL_DMA_Init+0x42a>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001edc:	6868      	ldr	r0, [r5, #4]
 8001ede:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8001ee0:	b2c4      	uxtb	r4, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001ee2:	3801      	subs	r0, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ee4:	e9d5 c119 	ldrd	ip, r1, [r5, #100]	@ 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001ee8:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001eea:	601c      	str	r4, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001eec:	f8cc 1004 	str.w	r1, [ip, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001ef0:	d85a      	bhi.n	8001fa8 <HAL_DMA_Init+0x438>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001ef2:	ea49 090a 	orr.w	r9, r9, sl
 8001ef6:	9b01      	ldr	r3, [sp, #4]
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8001ef8:	1e60      	subs	r0, r4, #1
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001efa:	ea48 0809 	orr.w	r8, r8, r9
 8001efe:	ea47 0708 	orr.w	r7, r7, r8
 8001f02:	433e      	orrs	r6, r7
 8001f04:	ea43 0a06 	orr.w	sl, r3, r6
 8001f08:	ea5b 0a0a 	orrs.w	sl, fp, sl
 8001f0c:	d102      	bne.n	8001f14 <HAL_DMA_Init+0x3a4>
 8001f0e:	2a00      	cmp	r2, #0
 8001f10:	f000 8085 	beq.w	800201e <HAL_DMA_Init+0x4ae>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f14:	4a54      	ldr	r2, [pc, #336]	@ (8002068 <HAL_DMA_Init+0x4f8>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8001f16:	4955      	ldr	r1, [pc, #340]	@ (800206c <HAL_DMA_Init+0x4fc>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f18:	4422      	add	r2, r4
 8001f1a:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	4083      	lsls	r3, r0
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f20:	2000      	movs	r0, #0
 8001f22:	e9c5 211b 	strd	r2, r1, [r5, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8001f26:	676b      	str	r3, [r5, #116]	@ 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f28:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f2a:	604b      	str	r3, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f2c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001f2e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f30:	6568      	str	r0, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001f32:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
}
 8001f36:	b003      	add	sp, #12
 8001f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001f3c:	6868      	ldr	r0, [r5, #4]
 8001f3e:	f1a0 0629 	sub.w	r6, r0, #41	@ 0x29
 8001f42:	2e1f      	cmp	r6, #31
 8001f44:	d924      	bls.n	8001f90 <HAL_DMA_Init+0x420>
 8001f46:	384f      	subs	r0, #79	@ 0x4f
 8001f48:	2803      	cmp	r0, #3
 8001f4a:	d801      	bhi.n	8001f50 <HAL_DMA_Init+0x3e0>
        registerValue |= DMA_SxCR_TRBUFF;
 8001f4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001f50:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f52:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001f54:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f56:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8001f5a:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f5e:	f47f af1d 	bne.w	8001d9c <HAL_DMA_Init+0x22c>
 8001f62:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8001f64:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8001f66:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	f43f af17 	beq.w	8001d9c <HAL_DMA_Init+0x22c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f6e:	bb8a      	cbnz	r2, 8001fd4 <HAL_DMA_Init+0x464>
    switch (hdma->Init.FIFOThreshold)
 8001f70:	2901      	cmp	r1, #1
 8001f72:	d04f      	beq.n	8002014 <HAL_DMA_Init+0x4a4>
 8001f74:	f031 0202 	bics.w	r2, r1, #2
 8001f78:	f47f af10 	bne.w	8001d9c <HAL_DMA_Init+0x22c>
 8001f7c:	e032      	b.n	8001fe4 <HAL_DMA_Init+0x474>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f7e:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f80:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f82:	656a      	str	r2, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f84:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8001f88:	2001      	movs	r0, #1
}
 8001f8a:	b003      	add	sp, #12
 8001f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001f90:	4837      	ldr	r0, [pc, #220]	@ (8002070 <HAL_DMA_Init+0x500>)
 8001f92:	40f0      	lsrs	r0, r6
 8001f94:	07c0      	lsls	r0, r0, #31
 8001f96:	d5db      	bpl.n	8001f50 <HAL_DMA_Init+0x3e0>
 8001f98:	e7d8      	b.n	8001f4c <HAL_DMA_Init+0x3dc>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f9a:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f9c:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8001f9e:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	@ 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fa2:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fa4:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fa6:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001fae:	676b      	str	r3, [r5, #116]	@ 0x74
 8001fb0:	e7bc      	b.n	8001f2c <HAL_DMA_Init+0x3bc>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001fb2:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fb4:	e9d5 060b 	ldrd	r0, r6, [r5, #44]	@ 0x2c
 8001fb8:	4306      	orrs	r6, r0
 8001fba:	4333      	orrs	r3, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001fbc:	4e21      	ldr	r6, [pc, #132]	@ (8002044 <HAL_DMA_Init+0x4d4>)
 8001fbe:	403e      	ands	r6, r7
 8001fc0:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
 8001fc4:	d2ba      	bcs.n	8001f3c <HAL_DMA_Init+0x3cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001fc6:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001fc8:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fca:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8001fce:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fd2:	e7c7      	b.n	8001f64 <HAL_DMA_Init+0x3f4>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fd4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001fd8:	d00d      	beq.n	8001ff6 <HAL_DMA_Init+0x486>
    switch (hdma->Init.FIFOThreshold)
 8001fda:	2902      	cmp	r1, #2
 8001fdc:	d905      	bls.n	8001fea <HAL_DMA_Init+0x47a>
 8001fde:	2903      	cmp	r1, #3
 8001fe0:	f47f aedc 	bne.w	8001d9c <HAL_DMA_Init+0x22c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fe4:	01c2      	lsls	r2, r0, #7
 8001fe6:	f57f aed9 	bpl.w	8001d9c <HAL_DMA_Init+0x22c>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fea:	2240      	movs	r2, #64	@ 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8001fec:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fee:	656a      	str	r2, [r5, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8001ff0:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
          return HAL_ERROR;
 8001ff4:	e7c8      	b.n	8001f88 <HAL_DMA_Init+0x418>
    switch (hdma->Init.FIFOThreshold)
 8001ff6:	2903      	cmp	r1, #3
 8001ff8:	f63f aed0 	bhi.w	8001d9c <HAL_DMA_Init+0x22c>
 8001ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8002004 <HAL_DMA_Init+0x494>)
 8001ffe:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8002002:	bf00      	nop
 8002004:	08001feb 	.word	0x08001feb
 8002008:	08001fe5 	.word	0x08001fe5
 800200c:	08001feb 	.word	0x08001feb
 8002010:	08002015 	.word	0x08002015
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002014:	f1b0 7fc0 	cmp.w	r0, #25165824	@ 0x1800000
 8002018:	f47f aec0 	bne.w	8001d9c <HAL_DMA_Init+0x22c>
 800201c:	e7e5      	b.n	8001fea <HAL_DMA_Init+0x47a>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800201e:	4a15      	ldr	r2, [pc, #84]	@ (8002074 <HAL_DMA_Init+0x504>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002020:	4915      	ldr	r1, [pc, #84]	@ (8002078 <HAL_DMA_Init+0x508>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002022:	4422      	add	r2, r4
 8002024:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002026:	e779      	b.n	8001f1c <HAL_DMA_Init+0x3ac>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002028:	f04f 0e10 	mov.w	lr, #16
 800202c:	e641      	b.n	8001cb2 <HAL_DMA_Init+0x142>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800202e:	2240      	movs	r2, #64	@ 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002030:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002032:	656a      	str	r2, [r5, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002034:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8002038:	e7a6      	b.n	8001f88 <HAL_DMA_Init+0x418>
 800203a:	bf00      	nop
 800203c:	fe10803f 	.word	0xfe10803f
 8002040:	5c001000 	.word	0x5c001000
 8002044:	ffff0000 	.word	0xffff0000
 8002048:	40020010 	.word	0x40020010
 800204c:	58025458 	.word	0x58025458
 8002050:	5802546c 	.word	0x5802546c
 8002054:	58025408 	.word	0x58025408
 8002058:	58025430 	.word	0x58025430
 800205c:	58025480 	.word	0x58025480
 8002060:	40020028 	.word	0x40020028
 8002064:	58025444 	.word	0x58025444
 8002068:	1600963f 	.word	0x1600963f
 800206c:	58025940 	.word	0x58025940
 8002070:	c3c0003f 	.word	0xc3c0003f
 8002074:	1000823f 	.word	0x1000823f
 8002078:	40020940 	.word	0x40020940

0800207c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800207c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002080:	680c      	ldr	r4, [r1, #0]
{
 8002082:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002084:	2c00      	cmp	r4, #0
 8002086:	f000 80a5 	beq.w	80021d4 <HAL_GPIO_Init+0x158>
  uint32_t position = 0x00U;
 800208a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800208c:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002090:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002094:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002096:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 800209a:	ea1c 0a04 	ands.w	sl, ip, r4
 800209e:	f000 8094 	beq.w	80021ca <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020a2:	9900      	ldr	r1, [sp, #0]
 80020a4:	005f      	lsls	r7, r3, #1
 80020a6:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020a8:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020aa:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020ae:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020b2:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020b6:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020b8:	f1b8 0f01 	cmp.w	r8, #1
 80020bc:	f240 808d 	bls.w	80021da <HAL_GPIO_Init+0x15e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c0:	2a03      	cmp	r2, #3
 80020c2:	f040 80cb 	bne.w	800225c <HAL_GPIO_Init+0x1e0>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c6:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80020c8:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020ca:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020ce:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020d2:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 80020d6:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020d8:	d077      	beq.n	80021ca <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020da:	4e7f      	ldr	r6, [pc, #508]	@ (80022d8 <HAL_GPIO_Init+0x25c>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020dc:	f003 0703 	and.w	r7, r3, #3
 80020e0:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e2:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020e6:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e8:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020ec:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020f0:	497a      	ldr	r1, [pc, #488]	@ (80022dc <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f2:	f8c6 20f4 	str.w	r2, [r6, #244]	@ 0xf4
 80020f6:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
 80020fa:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020fe:	4288      	cmp	r0, r1
 8002100:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002104:	f002 0202 	and.w	r2, r2, #2
 8002108:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800210c:	9203      	str	r2, [sp, #12]
 800210e:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002110:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002112:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002116:	d031      	beq.n	800217c <HAL_GPIO_Init+0x100>
 8002118:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800211c:	4288      	cmp	r0, r1
 800211e:	f000 80b0 	beq.w	8002282 <HAL_GPIO_Init+0x206>
 8002122:	496f      	ldr	r1, [pc, #444]	@ (80022e0 <HAL_GPIO_Init+0x264>)
 8002124:	4288      	cmp	r0, r1
 8002126:	f000 80b2 	beq.w	800228e <HAL_GPIO_Init+0x212>
 800212a:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 80022e4 <HAL_GPIO_Init+0x268>
 800212e:	4560      	cmp	r0, ip
 8002130:	f000 80a1 	beq.w	8002276 <HAL_GPIO_Init+0x1fa>
 8002134:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 80022e8 <HAL_GPIO_Init+0x26c>
 8002138:	4560      	cmp	r0, ip
 800213a:	f000 80b4 	beq.w	80022a6 <HAL_GPIO_Init+0x22a>
 800213e:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 80022ec <HAL_GPIO_Init+0x270>
 8002142:	4560      	cmp	r0, ip
 8002144:	f000 80b5 	beq.w	80022b2 <HAL_GPIO_Init+0x236>
 8002148:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 80022f0 <HAL_GPIO_Init+0x274>
 800214c:	4560      	cmp	r0, ip
 800214e:	f000 80a4 	beq.w	800229a <HAL_GPIO_Init+0x21e>
 8002152:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 80022f4 <HAL_GPIO_Init+0x278>
 8002156:	4560      	cmp	r0, ip
 8002158:	f000 80b1 	beq.w	80022be <HAL_GPIO_Init+0x242>
 800215c:	f8df c198 	ldr.w	ip, [pc, #408]	@ 80022f8 <HAL_GPIO_Init+0x27c>
 8002160:	4560      	cmp	r0, ip
 8002162:	f000 80b2 	beq.w	80022ca <HAL_GPIO_Init+0x24e>
 8002166:	f8df c194 	ldr.w	ip, [pc, #404]	@ 80022fc <HAL_GPIO_Init+0x280>
 800216a:	4560      	cmp	r0, ip
 800216c:	bf0c      	ite	eq
 800216e:	f04f 0c09 	moveq.w	ip, #9
 8002172:	f04f 0c0a 	movne.w	ip, #10
 8002176:	fa0c f707 	lsl.w	r7, ip, r7
 800217a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800217c:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800217e:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 8002180:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 8002184:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 8002188:	bf4c      	ite	mi
 800218a:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 800218e:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002190:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 8002192:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 8002196:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 800219a:	bf54      	ite	pl
 800219c:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800219e:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021a2:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 80021a4:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80021a8:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 80021ac:	bf54      	ite	pl
 80021ae:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80021b0:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021b4:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 80021b6:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80021ba:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 80021be:	bf54      	ite	pl
 80021c0:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80021c2:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80021c6:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 80021ca:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021cc:	fa34 f203 	lsrs.w	r2, r4, r3
 80021d0:	f47f af61 	bne.w	8002096 <HAL_GPIO_Init+0x1a>
  }
}
 80021d4:	b005      	add	sp, #20
 80021d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021da:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021dc:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 80021de:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e2:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021e4:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e8:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ec:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ee:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f2:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 80021f4:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f8:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 80021fc:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002200:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002204:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002208:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 800220c:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002210:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 8002214:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002218:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800221c:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8002220:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002224:	f47f af4f 	bne.w	80020c6 <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002228:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800222c:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 800222e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002232:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002236:	6909      	ldr	r1, [r1, #16]
 8002238:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800223c:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 8002240:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002244:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002246:	210f      	movs	r1, #15
 8002248:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800224c:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800224e:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002252:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 8002256:	f8c8 c020 	str.w	ip, [r8, #32]
 800225a:	e734      	b.n	80020c6 <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800225c:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 800225e:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002262:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002264:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002268:	fa01 fc07 	lsl.w	ip, r1, r7
 800226c:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8002270:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002274:	e727      	b.n	80020c6 <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002276:	f04f 0c03 	mov.w	ip, #3
 800227a:	fa0c f707 	lsl.w	r7, ip, r7
 800227e:	433a      	orrs	r2, r7
 8002280:	e77c      	b.n	800217c <HAL_GPIO_Init+0x100>
 8002282:	f04f 0c01 	mov.w	ip, #1
 8002286:	fa0c f707 	lsl.w	r7, ip, r7
 800228a:	433a      	orrs	r2, r7
 800228c:	e776      	b.n	800217c <HAL_GPIO_Init+0x100>
 800228e:	f04f 0c02 	mov.w	ip, #2
 8002292:	fa0c f707 	lsl.w	r7, ip, r7
 8002296:	433a      	orrs	r2, r7
 8002298:	e770      	b.n	800217c <HAL_GPIO_Init+0x100>
 800229a:	f04f 0c06 	mov.w	ip, #6
 800229e:	fa0c f707 	lsl.w	r7, ip, r7
 80022a2:	433a      	orrs	r2, r7
 80022a4:	e76a      	b.n	800217c <HAL_GPIO_Init+0x100>
 80022a6:	f04f 0c04 	mov.w	ip, #4
 80022aa:	fa0c f707 	lsl.w	r7, ip, r7
 80022ae:	433a      	orrs	r2, r7
 80022b0:	e764      	b.n	800217c <HAL_GPIO_Init+0x100>
 80022b2:	f04f 0c05 	mov.w	ip, #5
 80022b6:	fa0c f707 	lsl.w	r7, ip, r7
 80022ba:	433a      	orrs	r2, r7
 80022bc:	e75e      	b.n	800217c <HAL_GPIO_Init+0x100>
 80022be:	f04f 0c07 	mov.w	ip, #7
 80022c2:	fa0c f707 	lsl.w	r7, ip, r7
 80022c6:	433a      	orrs	r2, r7
 80022c8:	e758      	b.n	800217c <HAL_GPIO_Init+0x100>
 80022ca:	f04f 0c08 	mov.w	ip, #8
 80022ce:	fa0c f707 	lsl.w	r7, ip, r7
 80022d2:	433a      	orrs	r2, r7
 80022d4:	e752      	b.n	800217c <HAL_GPIO_Init+0x100>
 80022d6:	bf00      	nop
 80022d8:	58024400 	.word	0x58024400
 80022dc:	58020000 	.word	0x58020000
 80022e0:	58020800 	.word	0x58020800
 80022e4:	58020c00 	.word	0x58020c00
 80022e8:	58021000 	.word	0x58021000
 80022ec:	58021400 	.word	0x58021400
 80022f0:	58021800 	.word	0x58021800
 80022f4:	58021c00 	.word	0x58021c00
 80022f8:	58022000 	.word	0x58022000
 80022fc:	58022400 	.word	0x58022400

08002300 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002300:	b902      	cbnz	r2, 8002304 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002302:	0409      	lsls	r1, r1, #16
 8002304:	6181      	str	r1, [r0, #24]
  }
}
 8002306:	4770      	bx	lr

08002308 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002308:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800230a:	4c10      	ldr	r4, [pc, #64]	@ (800234c <HAL_PWREx_ConfigSupply+0x44>)
 800230c:	68e3      	ldr	r3, [r4, #12]
 800230e:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002312:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002314:	d105      	bne.n	8002322 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	1a18      	subs	r0, r3, r0
 800231c:	bf18      	it	ne
 800231e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8002320:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002322:	f023 0307 	bic.w	r3, r3, #7
 8002326:	4303      	orrs	r3, r0
 8002328:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 800232a:	f7fe fed1 	bl	80010d0 <HAL_GetTick>
 800232e:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002330:	e005      	b.n	800233e <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002332:	f7fe fecd 	bl	80010d0 <HAL_GetTick>
 8002336:	1b40      	subs	r0, r0, r5
 8002338:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800233c:	d804      	bhi.n	8002348 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800233e:	6863      	ldr	r3, [r4, #4]
 8002340:	049b      	lsls	r3, r3, #18
 8002342:	d5f6      	bpl.n	8002332 <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 8002344:	2000      	movs	r0, #0
}
 8002346:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002348:	2001      	movs	r0, #1
}
 800234a:	bd38      	pop	{r3, r4, r5, pc}
 800234c:	58024800 	.word	0x58024800

08002350 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002350:	4b33      	ldr	r3, [pc, #204]	@ (8002420 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8002352:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002354:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002356:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002358:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800235a:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800235e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002360:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8002364:	d036      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002366:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800236a:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800236e:	f002 0203 	and.w	r2, r2, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002372:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002376:	fb05 f101 	mul.w	r1, r5, r1
 800237a:	2a01      	cmp	r2, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800237c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002380:	ee06 1a90 	vmov	s13, r1
 8002384:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8002388:	d002      	beq.n	8002390 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 800238a:	2a02      	cmp	r2, #2
 800238c:	d042      	beq.n	8002414 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 800238e:	b31a      	cbz	r2, 80023d8 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002390:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8002424 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8002394:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800239e:	ee07 3a90 	vmov	s15, r3
 80023a2:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80023a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023aa:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80023ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023b2:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80023b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80023be:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80023c0:	ee07 3a10 	vmov	s14, r3
 80023c4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80023c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023cc:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80023d0:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80023d4:	bc30      	pop	{r4, r5}
 80023d6:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	0692      	lsls	r2, r2, #26
 80023dc:	d51d      	bpl.n	800241a <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80023de:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023e0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80023e4:	4a10      	ldr	r2, [pc, #64]	@ (8002428 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80023e8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80023f0:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023f2:	ee06 3a10 	vmov	s12, r3
 80023f6:	ee05 2a90 	vmov	s11, r2
 80023fa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80023fe:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8002402:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002406:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800240a:	ee36 7a26 	vadd.f32	s14, s12, s13
 800240e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002412:	e7d0      	b.n	80023b6 <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002414:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800242c <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 8002418:	e7bc      	b.n	8002394 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800241a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8002430 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 800241e:	e7b9      	b.n	8002394 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8002420:	58024400 	.word	0x58024400
 8002424:	4a742400 	.word	0x4a742400
 8002428:	03d09000 	.word	0x03d09000
 800242c:	4af42400 	.word	0x4af42400
 8002430:	4c742400 	.word	0x4c742400

08002434 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002434:	2800      	cmp	r0, #0
 8002436:	f000 82e9 	beq.w	8002a0c <HAL_RCC_OscConfig+0x5d8>
{
 800243a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243c:	6803      	ldr	r3, [r0, #0]
 800243e:	4604      	mov	r4, r0
 8002440:	07d9      	lsls	r1, r3, #31
 8002442:	d52e      	bpl.n	80024a2 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002444:	4997      	ldr	r1, [pc, #604]	@ (80026a4 <HAL_RCC_OscConfig+0x270>)
 8002446:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002448:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800244e:	2a10      	cmp	r2, #16
 8002450:	f000 80ee 	beq.w	8002630 <HAL_RCC_OscConfig+0x1fc>
 8002454:	2a18      	cmp	r2, #24
 8002456:	f000 80e6 	beq.w	8002626 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245a:	6863      	ldr	r3, [r4, #4]
 800245c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002460:	f000 8111 	beq.w	8002686 <HAL_RCC_OscConfig+0x252>
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8167 	beq.w	8002738 <HAL_RCC_OscConfig+0x304>
 800246a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800246e:	4b8d      	ldr	r3, [pc, #564]	@ (80026a4 <HAL_RCC_OscConfig+0x270>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	f000 828a 	beq.w	800298a <HAL_RCC_OscConfig+0x556>
 8002476:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002482:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002484:	f7fe fe24 	bl	80010d0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002488:	4e86      	ldr	r6, [pc, #536]	@ (80026a4 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800248a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800248c:	e005      	b.n	800249a <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800248e:	f7fe fe1f 	bl	80010d0 <HAL_GetTick>
 8002492:	1b40      	subs	r0, r0, r5
 8002494:	2864      	cmp	r0, #100	@ 0x64
 8002496:	f200 814d 	bhi.w	8002734 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800249a:	6833      	ldr	r3, [r6, #0]
 800249c:	039b      	lsls	r3, r3, #14
 800249e:	d5f6      	bpl.n	800248e <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	079d      	lsls	r5, r3, #30
 80024a4:	d470      	bmi.n	8002588 <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80024a6:	06d9      	lsls	r1, r3, #27
 80024a8:	d533      	bpl.n	8002512 <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024aa:	4a7e      	ldr	r2, [pc, #504]	@ (80026a4 <HAL_RCC_OscConfig+0x270>)
 80024ac:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024ae:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	f000 80cb 	beq.w	8002650 <HAL_RCC_OscConfig+0x21c>
 80024ba:	2b18      	cmp	r3, #24
 80024bc:	f000 80c3 	beq.w	8002646 <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80024c0:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 80024c2:	4d78      	ldr	r5, [pc, #480]	@ (80026a4 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 816f 	beq.w	80027a8 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
 80024ca:	682b      	ldr	r3, [r5, #0]
 80024cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80024d2:	f7fe fdfd 	bl	80010d0 <HAL_GetTick>
 80024d6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024d8:	e005      	b.n	80024e6 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024da:	f7fe fdf9 	bl	80010d0 <HAL_GetTick>
 80024de:	1b80      	subs	r0, r0, r6
 80024e0:	2802      	cmp	r0, #2
 80024e2:	f200 8127 	bhi.w	8002734 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024e6:	682b      	ldr	r3, [r5, #0]
 80024e8:	05db      	lsls	r3, r3, #23
 80024ea:	d5f6      	bpl.n	80024da <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024ec:	f7fe fdf6 	bl	80010dc <HAL_GetREVID>
 80024f0:	f241 0303 	movw	r3, #4099	@ 0x1003
 80024f4:	4298      	cmp	r0, r3
 80024f6:	f200 8269 	bhi.w	80029cc <HAL_RCC_OscConfig+0x598>
 80024fa:	6a22      	ldr	r2, [r4, #32]
 80024fc:	686b      	ldr	r3, [r5, #4]
 80024fe:	2a20      	cmp	r2, #32
 8002500:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002504:	bf0c      	ite	eq
 8002506:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800250a:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800250e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002510:	6823      	ldr	r3, [r4, #0]
 8002512:	071d      	lsls	r5, r3, #28
 8002514:	d516      	bpl.n	8002544 <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002516:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002518:	4d62      	ldr	r5, [pc, #392]	@ (80026a4 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 8122 	beq.w	8002764 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
 8002520:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8002528:	f7fe fdd2 	bl	80010d0 <HAL_GetTick>
 800252c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800252e:	e005      	b.n	800253c <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002530:	f7fe fdce 	bl	80010d0 <HAL_GetTick>
 8002534:	1b80      	subs	r0, r0, r6
 8002536:	2802      	cmp	r0, #2
 8002538:	f200 80fc 	bhi.w	8002734 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800253c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800253e:	0798      	lsls	r0, r3, #30
 8002540:	d5f6      	bpl.n	8002530 <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002542:	6823      	ldr	r3, [r4, #0]
 8002544:	069a      	lsls	r2, r3, #26
 8002546:	d516      	bpl.n	8002576 <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002548:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800254a:	4d56      	ldr	r5, [pc, #344]	@ (80026a4 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 811a 	beq.w	8002786 <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 8002552:	682b      	ldr	r3, [r5, #0]
 8002554:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002558:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800255a:	f7fe fdb9 	bl	80010d0 <HAL_GetTick>
 800255e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002560:	e005      	b.n	800256e <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002562:	f7fe fdb5 	bl	80010d0 <HAL_GetTick>
 8002566:	1b80      	subs	r0, r0, r6
 8002568:	2802      	cmp	r0, #2
 800256a:	f200 80e3 	bhi.w	8002734 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800256e:	682b      	ldr	r3, [r5, #0]
 8002570:	049f      	lsls	r7, r3, #18
 8002572:	d5f6      	bpl.n	8002562 <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002574:	6823      	ldr	r3, [r4, #0]
 8002576:	0759      	lsls	r1, r3, #29
 8002578:	f100 808b 	bmi.w	8002692 <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800257c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800257e:	2b00      	cmp	r3, #0
 8002580:	f040 80bf 	bne.w	8002702 <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
 8002584:	2000      	movs	r0, #0
}
 8002586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002588:	4a46      	ldr	r2, [pc, #280]	@ (80026a4 <HAL_RCC_OscConfig+0x270>)
 800258a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800258c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800258e:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8002592:	d12d      	bne.n	80025f0 <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002594:	4b43      	ldr	r3, [pc, #268]	@ (80026a4 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002596:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	0759      	lsls	r1, r3, #29
 800259c:	d501      	bpl.n	80025a2 <HAL_RCC_OscConfig+0x16e>
 800259e:	2a00      	cmp	r2, #0
 80025a0:	d04f      	beq.n	8002642 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025a2:	4d40      	ldr	r5, [pc, #256]	@ (80026a4 <HAL_RCC_OscConfig+0x270>)
 80025a4:	682b      	ldr	r3, [r5, #0]
 80025a6:	f023 0319 	bic.w	r3, r3, #25
 80025aa:	4313      	orrs	r3, r2
 80025ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80025ae:	f7fe fd8f 	bl	80010d0 <HAL_GetTick>
 80025b2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025b4:	e005      	b.n	80025c2 <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b6:	f7fe fd8b 	bl	80010d0 <HAL_GetTick>
 80025ba:	1b80      	subs	r0, r0, r6
 80025bc:	2802      	cmp	r0, #2
 80025be:	f200 80b9 	bhi.w	8002734 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025c2:	682b      	ldr	r3, [r5, #0]
 80025c4:	075b      	lsls	r3, r3, #29
 80025c6:	d5f6      	bpl.n	80025b6 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c8:	f7fe fd88 	bl	80010dc <HAL_GetREVID>
 80025cc:	f241 0303 	movw	r3, #4099	@ 0x1003
 80025d0:	4298      	cmp	r0, r3
 80025d2:	f200 8110 	bhi.w	80027f6 <HAL_RCC_OscConfig+0x3c2>
 80025d6:	6922      	ldr	r2, [r4, #16]
 80025d8:	686b      	ldr	r3, [r5, #4]
 80025da:	2a40      	cmp	r2, #64	@ 0x40
 80025dc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80025e0:	bf0c      	ite	eq
 80025e2:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 80025e6:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80025ea:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	e75a      	b.n	80024a6 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025f0:	2b18      	cmp	r3, #24
 80025f2:	f000 80fc 	beq.w	80027ee <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025f6:	4d2b      	ldr	r5, [pc, #172]	@ (80026a4 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025f8:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025fa:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025fc:	2a00      	cmp	r2, #0
 80025fe:	f000 80e5 	beq.w	80027cc <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002602:	f023 0319 	bic.w	r3, r3, #25
 8002606:	4313      	orrs	r3, r2
 8002608:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800260a:	f7fe fd61 	bl	80010d0 <HAL_GetTick>
 800260e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002610:	e005      	b.n	800261e <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002612:	f7fe fd5d 	bl	80010d0 <HAL_GetTick>
 8002616:	1b80      	subs	r0, r0, r6
 8002618:	2802      	cmp	r0, #2
 800261a:	f200 808b 	bhi.w	8002734 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800261e:	682b      	ldr	r3, [r5, #0]
 8002620:	075f      	lsls	r7, r3, #29
 8002622:	d5f6      	bpl.n	8002612 <HAL_RCC_OscConfig+0x1de>
 8002624:	e7d0      	b.n	80025c8 <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002626:	f001 0103 	and.w	r1, r1, #3
 800262a:	2902      	cmp	r1, #2
 800262c:	f47f af15 	bne.w	800245a <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002630:	4a1c      	ldr	r2, [pc, #112]	@ (80026a4 <HAL_RCC_OscConfig+0x270>)
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	0392      	lsls	r2, r2, #14
 8002636:	f57f af34 	bpl.w	80024a2 <HAL_RCC_OscConfig+0x6e>
 800263a:	6862      	ldr	r2, [r4, #4]
 800263c:	2a00      	cmp	r2, #0
 800263e:	f47f af30 	bne.w	80024a2 <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 8002642:	2001      	movs	r0, #1
}
 8002644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002646:	f002 0203 	and.w	r2, r2, #3
 800264a:	2a01      	cmp	r2, #1
 800264c:	f47f af38 	bne.w	80024c0 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002650:	4b14      	ldr	r3, [pc, #80]	@ (80026a4 <HAL_RCC_OscConfig+0x270>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	05da      	lsls	r2, r3, #23
 8002656:	d502      	bpl.n	800265e <HAL_RCC_OscConfig+0x22a>
 8002658:	69e3      	ldr	r3, [r4, #28]
 800265a:	2b80      	cmp	r3, #128	@ 0x80
 800265c:	d1f1      	bne.n	8002642 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800265e:	f7fe fd3d 	bl	80010dc <HAL_GetREVID>
 8002662:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002666:	4298      	cmp	r0, r3
 8002668:	f200 80ce 	bhi.w	8002808 <HAL_RCC_OscConfig+0x3d4>
 800266c:	6a22      	ldr	r2, [r4, #32]
 800266e:	2a20      	cmp	r2, #32
 8002670:	f000 81bb 	beq.w	80029ea <HAL_RCC_OscConfig+0x5b6>
 8002674:	490b      	ldr	r1, [pc, #44]	@ (80026a4 <HAL_RCC_OscConfig+0x270>)
 8002676:	684b      	ldr	r3, [r1, #4]
 8002678:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800267c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8002680:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002682:	6823      	ldr	r3, [r4, #0]
 8002684:	e745      	b.n	8002512 <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002686:	4a07      	ldr	r2, [pc, #28]	@ (80026a4 <HAL_RCC_OscConfig+0x270>)
 8002688:	6813      	ldr	r3, [r2, #0]
 800268a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800268e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002690:	e6f8      	b.n	8002484 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8002692:	4d05      	ldr	r5, [pc, #20]	@ (80026a8 <HAL_RCC_OscConfig+0x274>)
 8002694:	682b      	ldr	r3, [r5, #0]
 8002696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800269c:	f7fe fd18 	bl	80010d0 <HAL_GetTick>
 80026a0:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x282>
 80026a4:	58024400 	.word	0x58024400
 80026a8:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ac:	f7fe fd10 	bl	80010d0 <HAL_GetTick>
 80026b0:	1b80      	subs	r0, r0, r6
 80026b2:	2864      	cmp	r0, #100	@ 0x64
 80026b4:	d83e      	bhi.n	8002734 <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026b6:	682b      	ldr	r3, [r5, #0]
 80026b8:	05da      	lsls	r2, r3, #23
 80026ba:	d5f7      	bpl.n	80026ac <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026bc:	68a3      	ldr	r3, [r4, #8]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	f000 818d 	beq.w	80029de <HAL_RCC_OscConfig+0x5aa>
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 8168 	beq.w	800299a <HAL_RCC_OscConfig+0x566>
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	4b85      	ldr	r3, [pc, #532]	@ (80028e4 <HAL_RCC_OscConfig+0x4b0>)
 80026ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80026d0:	f000 8194 	beq.w	80029fc <HAL_RCC_OscConfig+0x5c8>
 80026d4:	f022 0201 	bic.w	r2, r2, #1
 80026d8:	671a      	str	r2, [r3, #112]	@ 0x70
 80026da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80026dc:	f022 0204 	bic.w	r2, r2, #4
 80026e0:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80026e2:	f7fe fcf5 	bl	80010d0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026e6:	4e7f      	ldr	r6, [pc, #508]	@ (80028e4 <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e8:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80026ec:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026ee:	e004      	b.n	80026fa <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f0:	f7fe fcee 	bl	80010d0 <HAL_GetTick>
 80026f4:	1b40      	subs	r0, r0, r5
 80026f6:	42b8      	cmp	r0, r7
 80026f8:	d81c      	bhi.n	8002734 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026fa:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80026fc:	079b      	lsls	r3, r3, #30
 80026fe:	d5f7      	bpl.n	80026f0 <HAL_RCC_OscConfig+0x2bc>
 8002700:	e73c      	b.n	800257c <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002702:	4d78      	ldr	r5, [pc, #480]	@ (80028e4 <HAL_RCC_OscConfig+0x4b0>)
 8002704:	692a      	ldr	r2, [r5, #16]
 8002706:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800270a:	2a18      	cmp	r2, #24
 800270c:	f000 80f0 	beq.w	80028f0 <HAL_RCC_OscConfig+0x4bc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002710:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8002712:	682b      	ldr	r3, [r5, #0]
 8002714:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002718:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800271a:	d07f      	beq.n	800281c <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 800271c:	f7fe fcd8 	bl	80010d0 <HAL_GetTick>
 8002720:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002722:	682b      	ldr	r3, [r5, #0]
 8002724:	019b      	lsls	r3, r3, #6
 8002726:	f57f af2d 	bpl.w	8002584 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272a:	f7fe fcd1 	bl	80010d0 <HAL_GetTick>
 800272e:	1b00      	subs	r0, r0, r4
 8002730:	2802      	cmp	r0, #2
 8002732:	d9f6      	bls.n	8002722 <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
 8002734:	2003      	movs	r0, #3
}
 8002736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002738:	4d6a      	ldr	r5, [pc, #424]	@ (80028e4 <HAL_RCC_OscConfig+0x4b0>)
 800273a:	682b      	ldr	r3, [r5, #0]
 800273c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002740:	602b      	str	r3, [r5, #0]
 8002742:	682b      	ldr	r3, [r5, #0]
 8002744:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002748:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800274a:	f7fe fcc1 	bl	80010d0 <HAL_GetTick>
 800274e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002750:	e004      	b.n	800275c <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002752:	f7fe fcbd 	bl	80010d0 <HAL_GetTick>
 8002756:	1b80      	subs	r0, r0, r6
 8002758:	2864      	cmp	r0, #100	@ 0x64
 800275a:	d8eb      	bhi.n	8002734 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800275c:	682b      	ldr	r3, [r5, #0]
 800275e:	039f      	lsls	r7, r3, #14
 8002760:	d4f7      	bmi.n	8002752 <HAL_RCC_OscConfig+0x31e>
 8002762:	e69d      	b.n	80024a0 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8002764:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800276c:	f7fe fcb0 	bl	80010d0 <HAL_GetTick>
 8002770:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002772:	e004      	b.n	800277e <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002774:	f7fe fcac 	bl	80010d0 <HAL_GetTick>
 8002778:	1b80      	subs	r0, r0, r6
 800277a:	2802      	cmp	r0, #2
 800277c:	d8da      	bhi.n	8002734 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800277e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002780:	0799      	lsls	r1, r3, #30
 8002782:	d4f7      	bmi.n	8002774 <HAL_RCC_OscConfig+0x340>
 8002784:	e6dd      	b.n	8002542 <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
 8002786:	682b      	ldr	r3, [r5, #0]
 8002788:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800278c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800278e:	f7fe fc9f 	bl	80010d0 <HAL_GetTick>
 8002792:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002794:	e004      	b.n	80027a0 <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002796:	f7fe fc9b 	bl	80010d0 <HAL_GetTick>
 800279a:	1b80      	subs	r0, r0, r6
 800279c:	2802      	cmp	r0, #2
 800279e:	d8c9      	bhi.n	8002734 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027a0:	682b      	ldr	r3, [r5, #0]
 80027a2:	0498      	lsls	r0, r3, #18
 80027a4:	d4f7      	bmi.n	8002796 <HAL_RCC_OscConfig+0x362>
 80027a6:	e6e5      	b.n	8002574 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
 80027a8:	682b      	ldr	r3, [r5, #0]
 80027aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80027b0:	f7fe fc8e 	bl	80010d0 <HAL_GetTick>
 80027b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027b6:	e004      	b.n	80027c2 <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027b8:	f7fe fc8a 	bl	80010d0 <HAL_GetTick>
 80027bc:	1b80      	subs	r0, r0, r6
 80027be:	2802      	cmp	r0, #2
 80027c0:	d8b8      	bhi.n	8002734 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027c2:	682b      	ldr	r3, [r5, #0]
 80027c4:	05df      	lsls	r7, r3, #23
 80027c6:	d4f7      	bmi.n	80027b8 <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c8:	6823      	ldr	r3, [r4, #0]
 80027ca:	e6a2      	b.n	8002512 <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80027d2:	f7fe fc7d 	bl	80010d0 <HAL_GetTick>
 80027d6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027d8:	e004      	b.n	80027e4 <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027da:	f7fe fc79 	bl	80010d0 <HAL_GetTick>
 80027de:	1b80      	subs	r0, r0, r6
 80027e0:	2802      	cmp	r0, #2
 80027e2:	d8a7      	bhi.n	8002734 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027e4:	682b      	ldr	r3, [r5, #0]
 80027e6:	0758      	lsls	r0, r3, #29
 80027e8:	d4f7      	bmi.n	80027da <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	e65b      	b.n	80024a6 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027ee:	0790      	lsls	r0, r2, #30
 80027f0:	f47f af01 	bne.w	80025f6 <HAL_RCC_OscConfig+0x1c2>
 80027f4:	e6ce      	b.n	8002594 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f6:	686b      	ldr	r3, [r5, #4]
 80027f8:	6922      	ldr	r2, [r4, #16]
 80027fa:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80027fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002802:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	e64e      	b.n	80024a6 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002808:	4a36      	ldr	r2, [pc, #216]	@ (80028e4 <HAL_RCC_OscConfig+0x4b0>)
 800280a:	6a21      	ldr	r1, [r4, #32]
 800280c:	68d3      	ldr	r3, [r2, #12]
 800280e:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8002812:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002816:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	e67a      	b.n	8002512 <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 800281c:	f7fe fc58 	bl	80010d0 <HAL_GetTick>
 8002820:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002822:	e004      	b.n	800282e <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002824:	f7fe fc54 	bl	80010d0 <HAL_GetTick>
 8002828:	1b80      	subs	r0, r0, r6
 800282a:	2802      	cmp	r0, #2
 800282c:	d882      	bhi.n	8002734 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800282e:	682b      	ldr	r3, [r5, #0]
 8002830:	0199      	lsls	r1, r3, #6
 8002832:	d4f7      	bmi.n	8002824 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002834:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8002836:	4b2c      	ldr	r3, [pc, #176]	@ (80028e8 <HAL_RCC_OscConfig+0x4b4>)
 8002838:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800283a:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800283c:	492b      	ldr	r1, [pc, #172]	@ (80028ec <HAL_RCC_OscConfig+0x4b8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800283e:	4e29      	ldr	r6, [pc, #164]	@ (80028e4 <HAL_RCC_OscConfig+0x4b0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002840:	4313      	orrs	r3, r2
 8002842:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002844:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002848:	62ab      	str	r3, [r5, #40]	@ 0x28
 800284a:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 800284e:	3b01      	subs	r3, #1
 8002850:	3a01      	subs	r2, #1
 8002852:	025b      	lsls	r3, r3, #9
 8002854:	0412      	lsls	r2, r2, #16
 8002856:	b29b      	uxth	r3, r3
 8002858:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800285c:	4313      	orrs	r3, r2
 800285e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002860:	3a01      	subs	r2, #1
 8002862:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002866:	4313      	orrs	r3, r2
 8002868:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800286a:	3a01      	subs	r2, #1
 800286c:	0612      	lsls	r2, r2, #24
 800286e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002872:	4313      	orrs	r3, r2
 8002874:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8002876:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002878:	f023 0301 	bic.w	r3, r3, #1
 800287c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800287e:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8002880:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002882:	4011      	ands	r1, r2
 8002884:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8002888:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800288a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800288c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800288e:	f023 030c 	bic.w	r3, r3, #12
 8002892:	4313      	orrs	r3, r2
 8002894:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002896:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002898:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800289a:	f023 0302 	bic.w	r3, r3, #2
 800289e:	4313      	orrs	r3, r2
 80028a0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80028a2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028aa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80028ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028b0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80028b2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80028b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028b8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 80028ba:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 80028c2:	682b      	ldr	r3, [r5, #0]
 80028c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80028ca:	f7fe fc01 	bl	80010d0 <HAL_GetTick>
 80028ce:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028d0:	6833      	ldr	r3, [r6, #0]
 80028d2:	019a      	lsls	r2, r3, #6
 80028d4:	f53f ae56 	bmi.w	8002584 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d8:	f7fe fbfa 	bl	80010d0 <HAL_GetTick>
 80028dc:	1b00      	subs	r0, r0, r4
 80028de:	2802      	cmp	r0, #2
 80028e0:	d9f6      	bls.n	80028d0 <HAL_RCC_OscConfig+0x49c>
 80028e2:	e727      	b.n	8002734 <HAL_RCC_OscConfig+0x300>
 80028e4:	58024400 	.word	0x58024400
 80028e8:	fffffc0c 	.word	0xfffffc0c
 80028ec:	ffff0007 	.word	0xffff0007
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f0:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80028f2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028f4:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f6:	f43f aea4 	beq.w	8002642 <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fa:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028fe:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002900:	428b      	cmp	r3, r1
 8002902:	f47f ae9e 	bne.w	8002642 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002906:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800290c:	429a      	cmp	r2, r3
 800290e:	f47f ae98 	bne.w	8002642 <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002912:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002914:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8002918:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800291a:	429a      	cmp	r2, r3
 800291c:	f47f ae91 	bne.w	8002642 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002920:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002922:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8002926:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	f47f ae8a 	bne.w	8002642 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800292e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002930:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8002934:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002936:	429a      	cmp	r2, r3
 8002938:	f47f ae83 	bne.w	8002642 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800293c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800293e:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8002942:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002944:	4298      	cmp	r0, r3
 8002946:	f47f ae7c 	bne.w	8002642 <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800294a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800294c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800294e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002952:	429a      	cmp	r2, r3
 8002954:	f43f ae16 	beq.w	8002584 <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
 8002958:	4a2d      	ldr	r2, [pc, #180]	@ (8002a10 <HAL_RCC_OscConfig+0x5dc>)
 800295a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8002962:	f7fe fbb5 	bl	80010d0 <HAL_GetTick>
 8002966:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002968:	f7fe fbb2 	bl	80010d0 <HAL_GetTick>
 800296c:	42a8      	cmp	r0, r5
 800296e:	d0fb      	beq.n	8002968 <HAL_RCC_OscConfig+0x534>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002970:	4a27      	ldr	r2, [pc, #156]	@ (8002a10 <HAL_RCC_OscConfig+0x5dc>)
 8002972:	4b28      	ldr	r3, [pc, #160]	@ (8002a14 <HAL_RCC_OscConfig+0x5e0>)
 8002974:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8002976:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002978:	4003      	ands	r3, r0
 800297a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800297e:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8002980:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002988:	e5fc      	b.n	8002584 <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800298a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002996:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002998:	e574      	b.n	8002484 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800299a:	4d1d      	ldr	r5, [pc, #116]	@ (8002a10 <HAL_RCC_OscConfig+0x5dc>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299c:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80029a2:	f023 0301 	bic.w	r3, r3, #1
 80029a6:	672b      	str	r3, [r5, #112]	@ 0x70
 80029a8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80029aa:	f023 0304 	bic.w	r3, r3, #4
 80029ae:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80029b0:	f7fe fb8e 	bl	80010d0 <HAL_GetTick>
 80029b4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029b6:	e005      	b.n	80029c4 <HAL_RCC_OscConfig+0x590>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7fe fb8a 	bl	80010d0 <HAL_GetTick>
 80029bc:	1b80      	subs	r0, r0, r6
 80029be:	42b8      	cmp	r0, r7
 80029c0:	f63f aeb8 	bhi.w	8002734 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029c4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80029c6:	0798      	lsls	r0, r3, #30
 80029c8:	d4f6      	bmi.n	80029b8 <HAL_RCC_OscConfig+0x584>
 80029ca:	e5d7      	b.n	800257c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029cc:	68eb      	ldr	r3, [r5, #12]
 80029ce:	6a22      	ldr	r2, [r4, #32]
 80029d0:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80029d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80029d8:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029da:	6823      	ldr	r3, [r4, #0]
 80029dc:	e599      	b.n	8002512 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029de:	4a0c      	ldr	r2, [pc, #48]	@ (8002a10 <HAL_RCC_OscConfig+0x5dc>)
 80029e0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029e8:	e67b      	b.n	80026e2 <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029ea:	4a09      	ldr	r2, [pc, #36]	@ (8002a10 <HAL_RCC_OscConfig+0x5dc>)
 80029ec:	6853      	ldr	r3, [r2, #4]
 80029ee:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80029f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029f6:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f8:	6823      	ldr	r3, [r4, #0]
 80029fa:	e58a      	b.n	8002512 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029fc:	f042 0204 	orr.w	r2, r2, #4
 8002a00:	671a      	str	r2, [r3, #112]	@ 0x70
 8002a02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a0a:	e66a      	b.n	80026e2 <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 8002a0c:	2001      	movs	r0, #1
}
 8002a0e:	4770      	bx	lr
 8002a10:	58024400 	.word	0x58024400
 8002a14:	ffff0007 	.word	0xffff0007

08002a18 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a18:	4a3f      	ldr	r2, [pc, #252]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a1a:	6913      	ldr	r3, [r2, #16]
 8002a1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a20:	2b10      	cmp	r3, #16
 8002a22:	d004      	beq.n	8002a2e <HAL_RCC_GetSysClockFreq+0x16>
 8002a24:	2b18      	cmp	r3, #24
 8002a26:	d00d      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x2c>
 8002a28:	b11b      	cbz	r3, 8002a32 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 8002a2a:	483c      	ldr	r0, [pc, #240]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x104>)
 8002a2c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a2e:	483c      	ldr	r0, [pc, #240]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a30:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a32:	6813      	ldr	r3, [r2, #0]
 8002a34:	0699      	lsls	r1, r3, #26
 8002a36:	d548      	bpl.n	8002aca <HAL_RCC_GetSysClockFreq+0xb2>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a38:	6813      	ldr	r3, [r2, #0]
 8002a3a:	483a      	ldr	r0, [pc, #232]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a3c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002a40:	40d8      	lsrs	r0, r3
 8002a42:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a44:	6a93      	ldr	r3, [r2, #40]	@ 0x28
{
 8002a46:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002a48:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a4a:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 8002a4c:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a50:	6b51      	ldr	r1, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002a52:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8002a56:	d036      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0xae>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a58:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a5c:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a60:	f003 0303 	and.w	r3, r3, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a64:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a68:	fb05 f101 	mul.w	r1, r5, r1
 8002a6c:	2b01      	cmp	r3, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a72:	ee06 1a90 	vmov	s13, r1
 8002a76:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8002a7a:	d002      	beq.n	8002a82 <HAL_RCC_GetSysClockFreq+0x6a>
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d026      	beq.n	8002ace <HAL_RCC_GetSysClockFreq+0xb6>
 8002a80:	b343      	cbz	r3, 8002ad4 <HAL_RCC_GetSysClockFreq+0xbc>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a82:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002b28 <HAL_RCC_GetSysClockFreq+0x110>
 8002a86:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8002a8a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a90:	ee07 3a10 	vmov	s14, r3
 8002a94:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8002a98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002a9c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8002aa0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002aa4:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x100>)
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aac:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002ab0:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002ab2:	ee07 3a90 	vmov	s15, r3
 8002ab6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002aba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ac2:	ee17 0a90 	vmov	r0, s15
}
 8002ac6:	bc30      	pop	{r4, r5}
 8002ac8:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002aca:	4816      	ldr	r0, [pc, #88]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x10c>)
}
 8002acc:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ace:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002b2c <HAL_RCC_GetSysClockFreq+0x114>
 8002ad2:	e7d8      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ad4:	6813      	ldr	r3, [r2, #0]
 8002ad6:	069b      	lsls	r3, r3, #26
 8002ad8:	d51a      	bpl.n	8002b10 <HAL_RCC_GetSysClockFreq+0xf8>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ada:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002adc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ae0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ae2:	4910      	ldr	r1, [pc, #64]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ae4:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002aec:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aee:	ee06 3a10 	vmov	s12, r3
 8002af2:	ee05 1a90 	vmov	s11, r1
 8002af6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002afa:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8002afe:	ee36 6a07 	vadd.f32	s12, s12, s14
 8002b02:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8002b06:	ee76 7a26 	vadd.f32	s15, s12, s13
 8002b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b0e:	e7cb      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x90>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b10:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002b30 <HAL_RCC_GetSysClockFreq+0x118>
 8002b14:	e7b7      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x6e>
 8002b16:	bf00      	nop
 8002b18:	58024400 	.word	0x58024400
 8002b1c:	003d0900 	.word	0x003d0900
 8002b20:	007a1200 	.word	0x007a1200
 8002b24:	03d09000 	.word	0x03d09000
 8002b28:	4a742400 	.word	0x4a742400
 8002b2c:	4af42400 	.word	0x4af42400
 8002b30:	4c742400 	.word	0x4c742400

08002b34 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002b34:	2800      	cmp	r0, #0
 8002b36:	f000 810e 	beq.w	8002d56 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b3a:	4a8d      	ldr	r2, [pc, #564]	@ (8002d70 <HAL_RCC_ClockConfig+0x23c>)
 8002b3c:	6813      	ldr	r3, [r2, #0]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	428b      	cmp	r3, r1
{
 8002b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b48:	4604      	mov	r4, r0
 8002b4a:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b4c:	d20c      	bcs.n	8002b68 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	6813      	ldr	r3, [r2, #0]
 8002b50:	f023 030f 	bic.w	r3, r3, #15
 8002b54:	430b      	orrs	r3, r1
 8002b56:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b58:	6813      	ldr	r3, [r2, #0]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	428b      	cmp	r3, r1
 8002b60:	d002      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002b62:	2001      	movs	r0, #1
}
 8002b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b68:	6823      	ldr	r3, [r4, #0]
 8002b6a:	0758      	lsls	r0, r3, #29
 8002b6c:	d50b      	bpl.n	8002b86 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b6e:	4981      	ldr	r1, [pc, #516]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
 8002b70:	6920      	ldr	r0, [r4, #16]
 8002b72:	698a      	ldr	r2, [r1, #24]
 8002b74:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002b78:	4290      	cmp	r0, r2
 8002b7a:	d904      	bls.n	8002b86 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b7c:	698a      	ldr	r2, [r1, #24]
 8002b7e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002b82:	4302      	orrs	r2, r0
 8002b84:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b86:	0719      	lsls	r1, r3, #28
 8002b88:	d50b      	bpl.n	8002ba2 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b8a:	497a      	ldr	r1, [pc, #488]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
 8002b8c:	6960      	ldr	r0, [r4, #20]
 8002b8e:	69ca      	ldr	r2, [r1, #28]
 8002b90:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002b94:	4290      	cmp	r0, r2
 8002b96:	d904      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b98:	69ca      	ldr	r2, [r1, #28]
 8002b9a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002b9e:	4302      	orrs	r2, r0
 8002ba0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba2:	06da      	lsls	r2, r3, #27
 8002ba4:	d50b      	bpl.n	8002bbe <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ba6:	4973      	ldr	r1, [pc, #460]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
 8002ba8:	69a0      	ldr	r0, [r4, #24]
 8002baa:	69ca      	ldr	r2, [r1, #28]
 8002bac:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8002bb0:	4290      	cmp	r0, r2
 8002bb2:	d904      	bls.n	8002bbe <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bb4:	69ca      	ldr	r2, [r1, #28]
 8002bb6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002bba:	4302      	orrs	r2, r0
 8002bbc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bbe:	069f      	lsls	r7, r3, #26
 8002bc0:	d50b      	bpl.n	8002bda <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bc2:	496c      	ldr	r1, [pc, #432]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
 8002bc4:	69e0      	ldr	r0, [r4, #28]
 8002bc6:	6a0a      	ldr	r2, [r1, #32]
 8002bc8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002bcc:	4290      	cmp	r0, r2
 8002bce:	d904      	bls.n	8002bda <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002bd0:	6a0a      	ldr	r2, [r1, #32]
 8002bd2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002bd6:	4302      	orrs	r2, r0
 8002bd8:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bda:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bdc:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be0:	f140 80ab 	bpl.w	8002d3a <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002be4:	4e63      	ldr	r6, [pc, #396]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
 8002be6:	68e0      	ldr	r0, [r4, #12]
 8002be8:	69b1      	ldr	r1, [r6, #24]
 8002bea:	f001 010f 	and.w	r1, r1, #15
 8002bee:	4288      	cmp	r0, r1
 8002bf0:	d904      	bls.n	8002bfc <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf2:	69b1      	ldr	r1, [r6, #24]
 8002bf4:	f021 010f 	bic.w	r1, r1, #15
 8002bf8:	4301      	orrs	r1, r0
 8002bfa:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfc:	2a00      	cmp	r2, #0
 8002bfe:	d030      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c00:	4a5c      	ldr	r2, [pc, #368]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
 8002c02:	68a1      	ldr	r1, [r4, #8]
 8002c04:	6993      	ldr	r3, [r2, #24]
 8002c06:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c0a:	430b      	orrs	r3, r1
 8002c0c:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0e:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c10:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c12:	2902      	cmp	r1, #2
 8002c14:	f000 80a1 	beq.w	8002d5a <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c18:	2903      	cmp	r1, #3
 8002c1a:	f000 8098 	beq.w	8002d4e <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c1e:	2901      	cmp	r1, #1
 8002c20:	f000 80a1 	beq.w	8002d66 <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c24:	075f      	lsls	r7, r3, #29
 8002c26:	d59c      	bpl.n	8002b62 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c28:	4e52      	ldr	r6, [pc, #328]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c2a:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c2e:	6933      	ldr	r3, [r6, #16]
 8002c30:	f023 0307 	bic.w	r3, r3, #7
 8002c34:	430b      	orrs	r3, r1
 8002c36:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8002c38:	f7fe fa4a 	bl	80010d0 <HAL_GetTick>
 8002c3c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	e005      	b.n	8002c4c <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c40:	f7fe fa46 	bl	80010d0 <HAL_GetTick>
 8002c44:	1bc0      	subs	r0, r0, r7
 8002c46:	4540      	cmp	r0, r8
 8002c48:	f200 808b 	bhi.w	8002d62 <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4c:	6933      	ldr	r3, [r6, #16]
 8002c4e:	6862      	ldr	r2, [r4, #4]
 8002c50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c54:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8002c58:	d1f2      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	079e      	lsls	r6, r3, #30
 8002c5e:	d506      	bpl.n	8002c6e <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c60:	68e0      	ldr	r0, [r4, #12]
 8002c62:	4944      	ldr	r1, [pc, #272]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
 8002c64:	698a      	ldr	r2, [r1, #24]
 8002c66:	f002 020f 	and.w	r2, r2, #15
 8002c6a:	4282      	cmp	r2, r0
 8002c6c:	d869      	bhi.n	8002d42 <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c6e:	4940      	ldr	r1, [pc, #256]	@ (8002d70 <HAL_RCC_ClockConfig+0x23c>)
 8002c70:	680a      	ldr	r2, [r1, #0]
 8002c72:	f002 020f 	and.w	r2, r2, #15
 8002c76:	42aa      	cmp	r2, r5
 8002c78:	d90a      	bls.n	8002c90 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	680a      	ldr	r2, [r1, #0]
 8002c7c:	f022 020f 	bic.w	r2, r2, #15
 8002c80:	432a      	orrs	r2, r5
 8002c82:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c84:	680a      	ldr	r2, [r1, #0]
 8002c86:	f002 020f 	and.w	r2, r2, #15
 8002c8a:	42aa      	cmp	r2, r5
 8002c8c:	f47f af69 	bne.w	8002b62 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c90:	0758      	lsls	r0, r3, #29
 8002c92:	d50b      	bpl.n	8002cac <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c94:	4937      	ldr	r1, [pc, #220]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
 8002c96:	6920      	ldr	r0, [r4, #16]
 8002c98:	698a      	ldr	r2, [r1, #24]
 8002c9a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002c9e:	4290      	cmp	r0, r2
 8002ca0:	d204      	bcs.n	8002cac <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ca2:	698a      	ldr	r2, [r1, #24]
 8002ca4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002ca8:	4302      	orrs	r2, r0
 8002caa:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	0719      	lsls	r1, r3, #28
 8002cae:	d50b      	bpl.n	8002cc8 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cb0:	4930      	ldr	r1, [pc, #192]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
 8002cb2:	6960      	ldr	r0, [r4, #20]
 8002cb4:	69ca      	ldr	r2, [r1, #28]
 8002cb6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002cba:	4290      	cmp	r0, r2
 8002cbc:	d204      	bcs.n	8002cc8 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cbe:	69ca      	ldr	r2, [r1, #28]
 8002cc0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002cc4:	4302      	orrs	r2, r0
 8002cc6:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc8:	06da      	lsls	r2, r3, #27
 8002cca:	d50b      	bpl.n	8002ce4 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ccc:	4929      	ldr	r1, [pc, #164]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
 8002cce:	69a0      	ldr	r0, [r4, #24]
 8002cd0:	69ca      	ldr	r2, [r1, #28]
 8002cd2:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8002cd6:	4290      	cmp	r0, r2
 8002cd8:	d204      	bcs.n	8002ce4 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cda:	69ca      	ldr	r2, [r1, #28]
 8002cdc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002ce0:	4302      	orrs	r2, r0
 8002ce2:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ce4:	069b      	lsls	r3, r3, #26
 8002ce6:	d50b      	bpl.n	8002d00 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ce8:	4a22      	ldr	r2, [pc, #136]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
 8002cea:	69e1      	ldr	r1, [r4, #28]
 8002cec:	6a13      	ldr	r3, [r2, #32]
 8002cee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cf2:	4299      	cmp	r1, r3
 8002cf4:	d204      	bcs.n	8002d00 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cf6:	6a13      	ldr	r3, [r2, #32]
 8002cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d00:	f7ff fe8a 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 8002d04:	4a1b      	ldr	r2, [pc, #108]	@ (8002d74 <HAL_RCC_ClockConfig+0x240>)
 8002d06:	4603      	mov	r3, r0
 8002d08:	481b      	ldr	r0, [pc, #108]	@ (8002d78 <HAL_RCC_ClockConfig+0x244>)
 8002d0a:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d0c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d0e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8002d12:	4d1a      	ldr	r5, [pc, #104]	@ (8002d7c <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d14:	f002 020f 	and.w	r2, r2, #15
 8002d18:	4c19      	ldr	r4, [pc, #100]	@ (8002d80 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d1a:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d1c:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d1e:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8002d22:	4818      	ldr	r0, [pc, #96]	@ (8002d84 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d24:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d28:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8002d2a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8002d2c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d2e:	40d3      	lsrs	r3, r2
 8002d30:	6023      	str	r3, [r4, #0]
}
 8002d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8002d36:	f7fe b969 	b.w	800100c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d3a:	2a00      	cmp	r2, #0
 8002d3c:	f47f af60 	bne.w	8002c00 <HAL_RCC_ClockConfig+0xcc>
 8002d40:	e795      	b.n	8002c6e <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d42:	698a      	ldr	r2, [r1, #24]
 8002d44:	f022 020f 	bic.w	r2, r2, #15
 8002d48:	4302      	orrs	r2, r0
 8002d4a:	618a      	str	r2, [r1, #24]
 8002d4c:	e78f      	b.n	8002c6e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d4e:	019a      	lsls	r2, r3, #6
 8002d50:	f53f af6a 	bmi.w	8002c28 <HAL_RCC_ClockConfig+0xf4>
 8002d54:	e705      	b.n	8002b62 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002d56:	2001      	movs	r0, #1
}
 8002d58:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d5a:	0398      	lsls	r0, r3, #14
 8002d5c:	f53f af64 	bmi.w	8002c28 <HAL_RCC_ClockConfig+0xf4>
 8002d60:	e6ff      	b.n	8002b62 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8002d62:	2003      	movs	r0, #3
 8002d64:	e6fe      	b.n	8002b64 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d66:	05db      	lsls	r3, r3, #23
 8002d68:	f53f af5e 	bmi.w	8002c28 <HAL_RCC_ClockConfig+0xf4>
 8002d6c:	e6f9      	b.n	8002b62 <HAL_RCC_ClockConfig+0x2e>
 8002d6e:	bf00      	nop
 8002d70:	52002000 	.word	0x52002000
 8002d74:	58024400 	.word	0x58024400
 8002d78:	08005190 	.word	0x08005190
 8002d7c:	24000008 	.word	0x24000008
 8002d80:	24000004 	.word	0x24000004
 8002d84:	24000010 	.word	0x24000010

08002d88 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d88:	4a18      	ldr	r2, [pc, #96]	@ (8002dec <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d8a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d8c:	6913      	ldr	r3, [r2, #16]
 8002d8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d019      	beq.n	8002dca <HAL_RCC_GetHCLKFreq+0x42>
 8002d96:	2b18      	cmp	r3, #24
 8002d98:	d022      	beq.n	8002de0 <HAL_RCC_GetHCLKFreq+0x58>
 8002d9a:	b1c3      	cbz	r3, 8002dce <HAL_RCC_GetHCLKFreq+0x46>
      sysclockfreq = CSI_VALUE;
 8002d9c:	4b14      	ldr	r3, [pc, #80]	@ (8002df0 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002d9e:	4913      	ldr	r1, [pc, #76]	@ (8002dec <HAL_RCC_GetHCLKFreq+0x64>)
 8002da0:	4814      	ldr	r0, [pc, #80]	@ (8002df4 <HAL_RCC_GetHCLKFreq+0x6c>)
 8002da2:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002da4:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002da6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002daa:	4c13      	ldr	r4, [pc, #76]	@ (8002df8 <HAL_RCC_GetHCLKFreq+0x70>)
 8002dac:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002db0:	4d12      	ldr	r5, [pc, #72]	@ (8002dfc <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002db2:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002db4:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002db6:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dba:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002dbe:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dc0:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8002dc4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dc6:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8002dc8:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dca:	4b0d      	ldr	r3, [pc, #52]	@ (8002e00 <HAL_RCC_GetHCLKFreq+0x78>)
 8002dcc:	e7e7      	b.n	8002d9e <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dce:	6813      	ldr	r3, [r2, #0]
 8002dd0:	069b      	lsls	r3, r3, #26
 8002dd2:	d509      	bpl.n	8002de8 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002dd4:	6812      	ldr	r2, [r2, #0]
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8002e04 <HAL_RCC_GetHCLKFreq+0x7c>)
 8002dd8:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002ddc:	40d3      	lsrs	r3, r2
 8002dde:	e7de      	b.n	8002d9e <HAL_RCC_GetHCLKFreq+0x16>
 8002de0:	f7ff fab6 	bl	8002350 <HAL_RCC_GetSysClockFreq.part.0>
 8002de4:	4603      	mov	r3, r0
 8002de6:	e7da      	b.n	8002d9e <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002de8:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <HAL_RCC_GetHCLKFreq+0x7c>)
 8002dea:	e7d8      	b.n	8002d9e <HAL_RCC_GetHCLKFreq+0x16>
 8002dec:	58024400 	.word	0x58024400
 8002df0:	003d0900 	.word	0x003d0900
 8002df4:	08005190 	.word	0x08005190
 8002df8:	24000004 	.word	0x24000004
 8002dfc:	24000008 	.word	0x24000008
 8002e00:	007a1200 	.word	0x007a1200
 8002e04:	03d09000 	.word	0x03d09000

08002e08 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e08:	4a1c      	ldr	r2, [pc, #112]	@ (8002e7c <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e0a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e0c:	6913      	ldr	r3, [r2, #16]
 8002e0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e12:	2b10      	cmp	r3, #16
 8002e14:	d020      	beq.n	8002e58 <HAL_RCC_GetPCLK1Freq+0x50>
 8002e16:	2b18      	cmp	r3, #24
 8002e18:	d029      	beq.n	8002e6e <HAL_RCC_GetPCLK1Freq+0x66>
 8002e1a:	b1fb      	cbz	r3, 8002e5c <HAL_RCC_GetPCLK1Freq+0x54>
      sysclockfreq = CSI_VALUE;
 8002e1c:	4b18      	ldr	r3, [pc, #96]	@ (8002e80 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002e1e:	4a17      	ldr	r2, [pc, #92]	@ (8002e7c <HAL_RCC_GetPCLK1Freq+0x74>)
 8002e20:	4918      	ldr	r1, [pc, #96]	@ (8002e84 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8002e22:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8002e24:	4d18      	ldr	r5, [pc, #96]	@ (8002e88 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002e26:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e2a:	4c18      	ldr	r4, [pc, #96]	@ (8002e8c <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002e2c:	5c08      	ldrb	r0, [r1, r0]
 8002e2e:	f000 001f 	and.w	r0, r0, #31
 8002e32:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e34:	6990      	ldr	r0, [r2, #24]
 8002e36:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8002e3a:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e3c:	5c08      	ldrb	r0, [r1, r0]
 8002e3e:	f000 001f 	and.w	r0, r0, #31
 8002e42:	40c3      	lsrs	r3, r0
 8002e44:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002e46:	69d2      	ldr	r2, [r2, #28]
 8002e48:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8002e4c:	5c88      	ldrb	r0, [r1, r2]
 8002e4e:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002e52:	fa23 f000 	lsr.w	r0, r3, r0
 8002e56:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e58:	4b0d      	ldr	r3, [pc, #52]	@ (8002e90 <HAL_RCC_GetPCLK1Freq+0x88>)
 8002e5a:	e7e0      	b.n	8002e1e <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e5c:	6813      	ldr	r3, [r2, #0]
 8002e5e:	069b      	lsls	r3, r3, #26
 8002e60:	d509      	bpl.n	8002e76 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8002e66:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002e6a:	40d3      	lsrs	r3, r2
 8002e6c:	e7d7      	b.n	8002e1e <HAL_RCC_GetPCLK1Freq+0x16>
 8002e6e:	f7ff fa6f 	bl	8002350 <HAL_RCC_GetSysClockFreq.part.0>
 8002e72:	4603      	mov	r3, r0
 8002e74:	e7d3      	b.n	8002e1e <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e76:	4b07      	ldr	r3, [pc, #28]	@ (8002e94 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8002e78:	e7d1      	b.n	8002e1e <HAL_RCC_GetPCLK1Freq+0x16>
 8002e7a:	bf00      	nop
 8002e7c:	58024400 	.word	0x58024400
 8002e80:	003d0900 	.word	0x003d0900
 8002e84:	08005190 	.word	0x08005190
 8002e88:	24000008 	.word	0x24000008
 8002e8c:	24000004 	.word	0x24000004
 8002e90:	007a1200 	.word	0x007a1200
 8002e94:	03d09000 	.word	0x03d09000

08002e98 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e98:	4a1c      	ldr	r2, [pc, #112]	@ (8002f0c <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e9a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e9c:	6913      	ldr	r3, [r2, #16]
 8002e9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ea2:	2b10      	cmp	r3, #16
 8002ea4:	d020      	beq.n	8002ee8 <HAL_RCC_GetPCLK2Freq+0x50>
 8002ea6:	2b18      	cmp	r3, #24
 8002ea8:	d029      	beq.n	8002efe <HAL_RCC_GetPCLK2Freq+0x66>
 8002eaa:	b1fb      	cbz	r3, 8002eec <HAL_RCC_GetPCLK2Freq+0x54>
      sysclockfreq = CSI_VALUE;
 8002eac:	4b18      	ldr	r3, [pc, #96]	@ (8002f10 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002eae:	4a17      	ldr	r2, [pc, #92]	@ (8002f0c <HAL_RCC_GetPCLK2Freq+0x74>)
 8002eb0:	4918      	ldr	r1, [pc, #96]	@ (8002f14 <HAL_RCC_GetPCLK2Freq+0x7c>)
 8002eb2:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8002eb4:	4d18      	ldr	r5, [pc, #96]	@ (8002f18 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002eb6:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002eba:	4c18      	ldr	r4, [pc, #96]	@ (8002f1c <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002ebc:	5c08      	ldrb	r0, [r1, r0]
 8002ebe:	f000 001f 	and.w	r0, r0, #31
 8002ec2:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ec4:	6990      	ldr	r0, [r2, #24]
 8002ec6:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8002eca:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ecc:	5c08      	ldrb	r0, [r1, r0]
 8002ece:	f000 001f 	and.w	r0, r0, #31
 8002ed2:	40c3      	lsrs	r3, r0
 8002ed4:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002ed6:	69d2      	ldr	r2, [r2, #28]
 8002ed8:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8002edc:	5c88      	ldrb	r0, [r1, r2]
 8002ede:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002ee2:	fa23 f000 	lsr.w	r0, r3, r0
 8002ee6:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f20 <HAL_RCC_GetPCLK2Freq+0x88>)
 8002eea:	e7e0      	b.n	8002eae <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002eec:	6813      	ldr	r3, [r2, #0]
 8002eee:	069b      	lsls	r3, r3, #26
 8002ef0:	d509      	bpl.n	8002f06 <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8002ef6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002efa:	40d3      	lsrs	r3, r2
 8002efc:	e7d7      	b.n	8002eae <HAL_RCC_GetPCLK2Freq+0x16>
 8002efe:	f7ff fa27 	bl	8002350 <HAL_RCC_GetSysClockFreq.part.0>
 8002f02:	4603      	mov	r3, r0
 8002f04:	e7d3      	b.n	8002eae <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f06:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8002f08:	e7d1      	b.n	8002eae <HAL_RCC_GetPCLK2Freq+0x16>
 8002f0a:	bf00      	nop
 8002f0c:	58024400 	.word	0x58024400
 8002f10:	003d0900 	.word	0x003d0900
 8002f14:	08005190 	.word	0x08005190
 8002f18:	24000008 	.word	0x24000008
 8002f1c:	24000004 	.word	0x24000004
 8002f20:	007a1200 	.word	0x007a1200
 8002f24:	03d09000 	.word	0x03d09000

08002f28 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8002f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002f2a:	4c36      	ldr	r4, [pc, #216]	@ (8003004 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8002f2c:	4606      	mov	r6, r0
 8002f2e:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f36:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f38:	f7fe f8ca 	bl	80010d0 <HAL_GetTick>
 8002f3c:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002f3e:	e004      	b.n	8002f4a <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002f40:	f7fe f8c6 	bl	80010d0 <HAL_GetTick>
 8002f44:	1b40      	subs	r0, r0, r5
 8002f46:	2802      	cmp	r0, #2
 8002f48:	d856      	bhi.n	8002ff8 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	011a      	lsls	r2, r3, #4
 8002f4e:	d4f7      	bmi.n	8002f40 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002f50:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002f52:	6832      	ldr	r2, [r6, #0]
 8002f54:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002f58:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002f5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f5e:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	3a01      	subs	r2, #1
 8002f66:	025b      	lsls	r3, r3, #9
 8002f68:	0412      	lsls	r2, r2, #16
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002f70:	4313      	orrs	r3, r2
 8002f72:	6872      	ldr	r2, [r6, #4]
 8002f74:	3a01      	subs	r2, #1
 8002f76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	6932      	ldr	r2, [r6, #16]
 8002f7e:	3a01      	subs	r2, #1
 8002f80:	0612      	lsls	r2, r2, #24
 8002f82:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002f86:	4313      	orrs	r3, r2
 8002f88:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002f8a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002f8c:	6972      	ldr	r2, [r6, #20]
 8002f8e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002f92:	4313      	orrs	r3, r2
 8002f94:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002f96:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002f98:	69b3      	ldr	r3, [r6, #24]
 8002f9a:	f022 0220 	bic.w	r2, r2, #32
 8002f9e:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002fa0:	4b19      	ldr	r3, [pc, #100]	@ (8003008 <RCCEx_PLL2_Config.part.0+0xe0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002fa2:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002fa4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002fa6:	f022 0210 	bic.w	r2, r2, #16
 8002faa:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002fac:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8002fae:	69f2      	ldr	r2, [r6, #28]
 8002fb0:	400b      	ands	r3, r1
 8002fb2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002fb6:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002fb8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002fba:	f043 0310 	orr.w	r3, r3, #16
 8002fbe:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002fc0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8002fc2:	b1df      	cbz	r7, 8002ffc <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8002fc4:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002fc6:	bf0c      	ite	eq
 8002fc8:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002fcc:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8002fd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8002fd2:	4c0c      	ldr	r4, [pc, #48]	@ (8003004 <RCCEx_PLL2_Config.part.0+0xdc>)
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fda:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fdc:	f7fe f878 	bl	80010d0 <HAL_GetTick>
 8002fe0:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002fe2:	e004      	b.n	8002fee <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002fe4:	f7fe f874 	bl	80010d0 <HAL_GetTick>
 8002fe8:	1b40      	subs	r0, r0, r5
 8002fea:	2802      	cmp	r0, #2
 8002fec:	d804      	bhi.n	8002ff8 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	d5f7      	bpl.n	8002fe4 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8002ff4:	2000      	movs	r0, #0
}
 8002ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8002ff8:	2003      	movs	r0, #3
}
 8002ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002ffc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003000:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003002:	e7e6      	b.n	8002fd2 <RCCEx_PLL2_Config.part.0+0xaa>
 8003004:	58024400 	.word	0x58024400
 8003008:	ffff0007 	.word	0xffff0007

0800300c <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800300e:	4c36      	ldr	r4, [pc, #216]	@ (80030e8 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8003010:	4606      	mov	r6, r0
 8003012:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800301a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800301c:	f7fe f858 	bl	80010d0 <HAL_GetTick>
 8003020:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003022:	e004      	b.n	800302e <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003024:	f7fe f854 	bl	80010d0 <HAL_GetTick>
 8003028:	1b40      	subs	r0, r0, r5
 800302a:	2802      	cmp	r0, #2
 800302c:	d856      	bhi.n	80030dc <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	009a      	lsls	r2, r3, #2
 8003032:	d4f7      	bmi.n	8003024 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003034:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003036:	6832      	ldr	r2, [r6, #0]
 8003038:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800303c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8003040:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003042:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003046:	3b01      	subs	r3, #1
 8003048:	3a01      	subs	r2, #1
 800304a:	025b      	lsls	r3, r3, #9
 800304c:	0412      	lsls	r2, r2, #16
 800304e:	b29b      	uxth	r3, r3
 8003050:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003054:	4313      	orrs	r3, r2
 8003056:	6872      	ldr	r2, [r6, #4]
 8003058:	3a01      	subs	r2, #1
 800305a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800305e:	4313      	orrs	r3, r2
 8003060:	6932      	ldr	r2, [r6, #16]
 8003062:	3a01      	subs	r2, #1
 8003064:	0612      	lsls	r2, r2, #24
 8003066:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800306a:	4313      	orrs	r3, r2
 800306c:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800306e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003070:	6972      	ldr	r2, [r6, #20]
 8003072:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003076:	4313      	orrs	r3, r2
 8003078:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800307a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800307c:	69b3      	ldr	r3, [r6, #24]
 800307e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003082:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003084:	4b19      	ldr	r3, [pc, #100]	@ (80030ec <RCCEx_PLL3_Config.part.0+0xe0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003086:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003088:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800308a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800308e:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003090:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003092:	69f2      	ldr	r2, [r6, #28]
 8003094:	400b      	ands	r3, r1
 8003096:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800309a:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800309c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800309e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030a2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80030a4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80030a6:	b1df      	cbz	r7, 80030e0 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80030a8:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80030aa:	bf0c      	ite	eq
 80030ac:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80030b0:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 80030b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80030b6:	4c0c      	ldr	r4, [pc, #48]	@ (80030e8 <RCCEx_PLL3_Config.part.0+0xdc>)
 80030b8:	6823      	ldr	r3, [r4, #0]
 80030ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030be:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c0:	f7fe f806 	bl	80010d0 <HAL_GetTick>
 80030c4:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80030c6:	e004      	b.n	80030d2 <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80030c8:	f7fe f802 	bl	80010d0 <HAL_GetTick>
 80030cc:	1b40      	subs	r0, r0, r5
 80030ce:	2802      	cmp	r0, #2
 80030d0:	d804      	bhi.n	80030dc <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	d5f7      	bpl.n	80030c8 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 80030d8:	2000      	movs	r0, #0
}
 80030da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80030dc:	2003      	movs	r0, #3
}
 80030de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80030e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80030e6:	e7e6      	b.n	80030b6 <RCCEx_PLL3_Config.part.0+0xaa>
 80030e8:	58024400 	.word	0x58024400
 80030ec:	ffff0007 	.word	0xffff0007

080030f0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80030f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030f4:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 80030f8:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030fa:	011d      	lsls	r5, r3, #4
 80030fc:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 8003100:	d525      	bpl.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003102:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8003104:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8003108:	f000 8660 	beq.w	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800310c:	d814      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x48>
 800310e:	2900      	cmp	r1, #0
 8003110:	f000 86fa 	beq.w	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8003114:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8003118:	f040 8466 	bne.w	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800311c:	49ad      	ldr	r1, [pc, #692]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800311e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003120:	f001 0103 	and.w	r1, r1, #3
 8003124:	2903      	cmp	r1, #3
 8003126:	f000 845f 	beq.w	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800312a:	2102      	movs	r1, #2
 800312c:	3008      	adds	r0, #8
 800312e:	f7ff fefb 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
 8003132:	4606      	mov	r6, r0
        break;
 8003134:	f000 be56 	b.w	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003138:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 800313c:	f040 8454 	bne.w	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003140:	4da4      	ldr	r5, [pc, #656]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003142:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003144:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8003146:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 800314a:	4301      	orrs	r1, r0
 800314c:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800314e:	05d8      	lsls	r0, r3, #23
 8003150:	d50a      	bpl.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch (PeriphClkInit->Sai1ClockSelection)
 8003152:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8003154:	2904      	cmp	r1, #4
 8003156:	d806      	bhi.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003158:	e8df f011 	tbh	[pc, r1, lsl #1]
 800315c:	064c04a8 	.word	0x064c04a8
 8003160:	04ad0661 	.word	0x04ad0661
 8003164:	04ad      	.short	0x04ad
 8003166:	2601      	movs	r6, #1
 8003168:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800316a:	0599      	lsls	r1, r3, #22
 800316c:	d524      	bpl.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800316e:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8003170:	2980      	cmp	r1, #128	@ 0x80
 8003172:	f000 8664 	beq.w	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003176:	f200 8122 	bhi.w	80033be <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800317a:	2900      	cmp	r1, #0
 800317c:	f000 84ac 	beq.w	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003180:	2940      	cmp	r1, #64	@ 0x40
 8003182:	f040 8123 	bne.w	80033cc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003186:	4993      	ldr	r1, [pc, #588]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003188:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800318a:	f001 0103 	and.w	r1, r1, #3
 800318e:	2903      	cmp	r1, #3
 8003190:	f000 811c 	beq.w	80033cc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8003194:	2100      	movs	r1, #0
 8003196:	f104 0008 	add.w	r0, r4, #8
 800319a:	f7ff fec5 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
 800319e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80031a0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	f040 851b 	bne.w	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80031aa:	4f8a      	ldr	r7, [pc, #552]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031ac:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80031ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80031b0:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 80031b4:	4301      	orrs	r1, r0
 80031b6:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80031b8:	055f      	lsls	r7, r3, #21
 80031ba:	d528      	bpl.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4AClockSelection)
 80031bc:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 80031c0:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 80031c4:	f000 864f 	beq.w	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xd76>
 80031c8:	f200 8106 	bhi.w	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80031cc:	2900      	cmp	r1, #0
 80031ce:	f000 8463 	beq.w	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80031d2:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80031d6:	f040 8107 	bne.w	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80031da:	497e      	ldr	r1, [pc, #504]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031dc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80031de:	f001 0103 	and.w	r1, r1, #3
 80031e2:	2903      	cmp	r1, #3
 80031e4:	f000 8100 	beq.w	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80031e8:	2100      	movs	r1, #0
 80031ea:	f104 0008 	add.w	r0, r4, #8
 80031ee:	f7ff fe9b 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
 80031f2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80031f4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80031f8:	2d00      	cmp	r5, #0
 80031fa:	f040 84f4 	bne.w	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80031fe:	4f75      	ldr	r7, [pc, #468]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003200:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8003204:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003206:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 800320a:	4301      	orrs	r1, r0
 800320c:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800320e:	0518      	lsls	r0, r3, #20
 8003210:	d528      	bpl.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch (PeriphClkInit->Sai4BClockSelection)
 8003212:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8003216:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 800321a:	f000 85ac 	beq.w	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xc86>
 800321e:	f200 80e6 	bhi.w	80033ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003222:	2900      	cmp	r1, #0
 8003224:	f000 8425 	beq.w	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8003228:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 800322c:	f040 80e7 	bne.w	80033fe <HAL_RCCEx_PeriphCLKConfig+0x30e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003230:	4968      	ldr	r1, [pc, #416]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003232:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003234:	f001 0103 	and.w	r1, r1, #3
 8003238:	2903      	cmp	r1, #3
 800323a:	f000 80e0 	beq.w	80033fe <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800323e:	2100      	movs	r1, #0
 8003240:	f104 0008 	add.w	r0, r4, #8
 8003244:	f7ff fe70 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
 8003248:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800324a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800324e:	2d00      	cmp	r5, #0
 8003250:	f040 84cc 	bne.w	8003bec <HAL_RCCEx_PeriphCLKConfig+0xafc>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003254:	4f5f      	ldr	r7, [pc, #380]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003256:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 800325a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800325c:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 8003260:	4301      	orrs	r1, r0
 8003262:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003264:	0199      	lsls	r1, r3, #6
 8003266:	d518      	bpl.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch (PeriphClkInit->QspiClockSelection)
 8003268:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800326a:	2920      	cmp	r1, #32
 800326c:	f000 84ff 	beq.w	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
 8003270:	f200 80c8 	bhi.w	8003404 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003274:	b139      	cbz	r1, 8003286 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003276:	2910      	cmp	r1, #16
 8003278:	f040 80c7 	bne.w	800340a <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800327c:	4855      	ldr	r0, [pc, #340]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800327e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003280:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003284:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003286:	2d00      	cmp	r5, #0
 8003288:	f040 849f 	bne.w	8003bca <HAL_RCCEx_PeriphCLKConfig+0xada>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800328c:	4f51      	ldr	r7, [pc, #324]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800328e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003290:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003292:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8003296:	4301      	orrs	r1, r0
 8003298:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800329a:	04df      	lsls	r7, r3, #19
 800329c:	d526      	bpl.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    switch (PeriphClkInit->Spi123ClockSelection)
 800329e:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80032a0:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80032a4:	f000 857b 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xcae>
 80032a8:	f200 80b2 	bhi.w	8003410 <HAL_RCCEx_PeriphCLKConfig+0x320>
 80032ac:	2900      	cmp	r1, #0
 80032ae:	f000 83ea 	beq.w	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x996>
 80032b2:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80032b6:	f040 80b3 	bne.w	8003420 <HAL_RCCEx_PeriphCLKConfig+0x330>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80032ba:	4946      	ldr	r1, [pc, #280]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032bc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80032be:	f001 0103 	and.w	r1, r1, #3
 80032c2:	2903      	cmp	r1, #3
 80032c4:	f000 80ac 	beq.w	8003420 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80032c8:	2100      	movs	r1, #0
 80032ca:	f104 0008 	add.w	r0, r4, #8
 80032ce:	f7ff fe2b 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
 80032d2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80032d4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80032d8:	2d00      	cmp	r5, #0
 80032da:	f040 848a 	bne.w	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80032de:	4f3d      	ldr	r7, [pc, #244]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032e0:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80032e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80032e4:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80032e8:	4301      	orrs	r1, r0
 80032ea:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80032ec:	0498      	lsls	r0, r3, #18
 80032ee:	d524      	bpl.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi45ClockSelection)
 80032f0:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80032f2:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 80032f6:	f000 8516 	beq.w	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xc36>
 80032fa:	f200 8094 	bhi.w	8003426 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80032fe:	b191      	cbz	r1, 8003326 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8003300:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8003304:	f040 8099 	bne.w	800343a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003308:	4932      	ldr	r1, [pc, #200]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800330a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800330c:	f001 0103 	and.w	r1, r1, #3
 8003310:	2903      	cmp	r1, #3
 8003312:	f000 8092 	beq.w	800343a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003316:	2101      	movs	r1, #1
 8003318:	f104 0008 	add.w	r0, r4, #8
 800331c:	f7ff fe04 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
 8003320:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003322:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003326:	2d00      	cmp	r5, #0
 8003328:	f040 8476 	bne.w	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800332c:	4f29      	ldr	r7, [pc, #164]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800332e:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8003330:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003332:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8003336:	4301      	orrs	r1, r0
 8003338:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800333a:	0459      	lsls	r1, r3, #17
 800333c:	d523      	bpl.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch (PeriphClkInit->Spi6ClockSelection)
 800333e:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8003342:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8003346:	f000 8502 	beq.w	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 800334a:	d879      	bhi.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800334c:	b181      	cbz	r1, 8003370 <HAL_RCCEx_PeriphCLKConfig+0x280>
 800334e:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8003352:	d17d      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x360>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003354:	491f      	ldr	r1, [pc, #124]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003356:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003358:	f001 0103 	and.w	r1, r1, #3
 800335c:	2903      	cmp	r1, #3
 800335e:	d077      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003360:	2101      	movs	r1, #1
 8003362:	f104 0008 	add.w	r0, r4, #8
 8003366:	f7ff fddf 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
 800336a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800336c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003370:	2d00      	cmp	r5, #0
 8003372:	f040 8454 	bne.w	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003376:	4f17      	ldr	r7, [pc, #92]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003378:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800337c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800337e:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8003382:	4301      	orrs	r1, r0
 8003384:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003386:	041f      	lsls	r7, r3, #16
 8003388:	d50d      	bpl.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch (PeriphClkInit->FdcanClockSelection)
 800338a:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800338c:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8003390:	f000 82e2 	beq.w	8003958 <HAL_RCCEx_PeriphCLKConfig+0x868>
 8003394:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8003398:	f000 83f0 	beq.w	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xa8c>
 800339c:	2900      	cmp	r1, #0
 800339e:	f000 82e0 	beq.w	8003962 <HAL_RCCEx_PeriphCLKConfig+0x872>
 80033a2:	2601      	movs	r6, #1
 80033a4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80033a6:	01d8      	lsls	r0, r3, #7
 80033a8:	d55e      	bpl.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x378>
    switch (PeriphClkInit->FmcClockSelection)
 80033aa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80033ac:	2903      	cmp	r1, #3
 80033ae:	f200 85cd 	bhi.w	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80033b2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80033b6:	0055      	.short	0x0055
 80033b8:	04930050 	.word	0x04930050
 80033bc:	0055      	.short	0x0055
    switch (PeriphClkInit->Sai23ClockSelection)
 80033be:	29c0      	cmp	r1, #192	@ 0xc0
 80033c0:	f43f aef0 	beq.w	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80033c4:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80033c8:	f43f aeec 	beq.w	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80033cc:	2601      	movs	r6, #1
 80033ce:	4635      	mov	r5, r6
 80033d0:	e6f2      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 80033d2:	bf00      	nop
 80033d4:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Sai4AClockSelection)
 80033d8:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 80033dc:	f43f af0c 	beq.w	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80033e0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80033e4:	f43f af08 	beq.w	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80033e8:	2601      	movs	r6, #1
 80033ea:	4635      	mov	r5, r6
 80033ec:	e70f      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4BClockSelection)
 80033ee:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 80033f2:	f43f af2c 	beq.w	800324e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80033f6:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 80033fa:	f43f af28 	beq.w	800324e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80033fe:	2601      	movs	r6, #1
 8003400:	4635      	mov	r5, r6
 8003402:	e72f      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch (PeriphClkInit->QspiClockSelection)
 8003404:	2930      	cmp	r1, #48	@ 0x30
 8003406:	f43f af3e 	beq.w	8003286 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800340a:	2601      	movs	r6, #1
 800340c:	4635      	mov	r5, r6
 800340e:	e744      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch (PeriphClkInit->Spi123ClockSelection)
 8003410:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8003414:	f43f af60 	beq.w	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003418:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800341c:	f43f af5c 	beq.w	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003420:	2601      	movs	r6, #1
 8003422:	4635      	mov	r5, r6
 8003424:	e762      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    switch (PeriphClkInit->Spi45ClockSelection)
 8003426:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 800342a:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 800342e:	f43f af7a 	beq.w	8003326 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8003432:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8003436:	f43f af76 	beq.w	8003326 <HAL_RCCEx_PeriphCLKConfig+0x236>
 800343a:	2601      	movs	r6, #1
 800343c:	4635      	mov	r5, r6
 800343e:	e77c      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi6ClockSelection)
 8003440:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8003444:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003448:	d092      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x280>
 800344a:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 800344e:	d08f      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8003450:	2601      	movs	r6, #1
 8003452:	4635      	mov	r5, r6
 8003454:	e797      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x296>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003456:	4837      	ldr	r0, [pc, #220]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003458:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800345a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800345e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003460:	2d00      	cmp	r5, #0
 8003462:	f000 83b5 	beq.w	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003466:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003468:	0259      	lsls	r1, r3, #9
 800346a:	f100 82c0 	bmi.w	80039ee <HAL_RCCEx_PeriphCLKConfig+0x8fe>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800346e:	07df      	lsls	r7, r3, #31
 8003470:	d52f      	bpl.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
    switch (PeriphClkInit->Usart16ClockSelection)
 8003472:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8003474:	2928      	cmp	r1, #40	@ 0x28
 8003476:	d82a      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003478:	e8df f011 	tbh	[pc, r1, lsl #1]
 800347c:	002902ab 	.word	0x002902ab
 8003480:	00290029 	.word	0x00290029
 8003484:	00290029 	.word	0x00290029
 8003488:	00290029 	.word	0x00290029
 800348c:	0029029c 	.word	0x0029029c
 8003490:	00290029 	.word	0x00290029
 8003494:	00290029 	.word	0x00290029
 8003498:	00290029 	.word	0x00290029
 800349c:	0029052d 	.word	0x0029052d
 80034a0:	00290029 	.word	0x00290029
 80034a4:	00290029 	.word	0x00290029
 80034a8:	00290029 	.word	0x00290029
 80034ac:	002902ab 	.word	0x002902ab
 80034b0:	00290029 	.word	0x00290029
 80034b4:	00290029 	.word	0x00290029
 80034b8:	00290029 	.word	0x00290029
 80034bc:	002902ab 	.word	0x002902ab
 80034c0:	00290029 	.word	0x00290029
 80034c4:	00290029 	.word	0x00290029
 80034c8:	00290029 	.word	0x00290029
 80034cc:	02ab      	.short	0x02ab
 80034ce:	2601      	movs	r6, #1
 80034d0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80034d2:	0798      	lsls	r0, r3, #30
 80034d4:	d51e      	bpl.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80034d6:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80034d8:	2905      	cmp	r1, #5
 80034da:	f200 851c 	bhi.w	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 80034de:	e8df f011 	tbh	[pc, r1, lsl #1]
 80034e2:	0015      	.short	0x0015
 80034e4:	04e80006 	.word	0x04e80006
 80034e8:	00150015 	.word	0x00150015
 80034ec:	0015      	.short	0x0015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80034ee:	4911      	ldr	r1, [pc, #68]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80034f0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80034f2:	f001 0103 	and.w	r1, r1, #3
 80034f6:	2903      	cmp	r1, #3
 80034f8:	f000 850d 	beq.w	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 80034fc:	2101      	movs	r1, #1
 80034fe:	f104 0008 	add.w	r0, r4, #8
 8003502:	f7ff fd11 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
 8003506:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003508:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800350c:	2d00      	cmp	r5, #0
 800350e:	f000 837b 	beq.w	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xb18>
 8003512:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003514:	0759      	lsls	r1, r3, #29
 8003516:	d522      	bpl.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003518:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800351c:	2905      	cmp	r1, #5
 800351e:	f200 84fe 	bhi.w	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8003522:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003526:	0018      	.short	0x0018
 8003528:	04b40009 	.word	0x04b40009
 800352c:	00180018 	.word	0x00180018
 8003530:	0018      	.short	0x0018
 8003532:	bf00      	nop
 8003534:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003538:	49b0      	ldr	r1, [pc, #704]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800353a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800353c:	f001 0103 	and.w	r1, r1, #3
 8003540:	2903      	cmp	r1, #3
 8003542:	f000 84ec 	beq.w	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8003546:	2101      	movs	r1, #1
 8003548:	f104 0008 	add.w	r0, r4, #8
 800354c:	f7ff fcec 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
 8003550:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003552:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003556:	2d00      	cmp	r5, #0
 8003558:	f000 8364 	beq.w	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 800355c:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800355e:	069f      	lsls	r7, r3, #26
 8003560:	d526      	bpl.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003562:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8003566:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 800356a:	f000 836e 	beq.w	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 800356e:	f200 8194 	bhi.w	800389a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003572:	b191      	cbz	r1, 800359a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003574:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8003578:	f040 8199 	bne.w	80038ae <HAL_RCCEx_PeriphCLKConfig+0x7be>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800357c:	499f      	ldr	r1, [pc, #636]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800357e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003580:	f001 0103 	and.w	r1, r1, #3
 8003584:	2903      	cmp	r1, #3
 8003586:	f000 8192 	beq.w	80038ae <HAL_RCCEx_PeriphCLKConfig+0x7be>
 800358a:	2100      	movs	r1, #0
 800358c:	f104 0008 	add.w	r0, r4, #8
 8003590:	f7ff fcca 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
 8003594:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003596:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800359a:	2d00      	cmp	r5, #0
 800359c:	f040 834b 	bne.w	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035a0:	4f96      	ldr	r7, [pc, #600]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80035a2:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80035a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035a8:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 80035ac:	4301      	orrs	r1, r0
 80035ae:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80035b0:	0658      	lsls	r0, r3, #25
 80035b2:	d526      	bpl.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x512>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80035b4:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 80035b8:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80035bc:	f000 83a1 	beq.w	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xc12>
 80035c0:	f200 8178 	bhi.w	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 80035c4:	b191      	cbz	r1, 80035ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80035c6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80035ca:	f040 817d 	bne.w	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80035ce:	498b      	ldr	r1, [pc, #556]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80035d0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80035d2:	f001 0103 	and.w	r1, r1, #3
 80035d6:	2903      	cmp	r1, #3
 80035d8:	f000 8176 	beq.w	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 80035dc:	2100      	movs	r1, #0
 80035de:	f104 0008 	add.w	r0, r4, #8
 80035e2:	f7ff fca1 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
 80035e6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80035e8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80035ec:	2d00      	cmp	r5, #0
 80035ee:	f040 8328 	bne.w	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xb52>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035f2:	4f82      	ldr	r7, [pc, #520]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80035f4:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80035f8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80035fa:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 80035fe:	4301      	orrs	r1, r0
 8003600:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003602:	0619      	lsls	r1, r3, #24
 8003604:	d526      	bpl.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003606:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800360a:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800360e:	f000 8353 	beq.w	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
 8003612:	f200 815c 	bhi.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x7de>
 8003616:	b191      	cbz	r1, 800363e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8003618:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800361c:	f040 8161 	bne.w	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003620:	4976      	ldr	r1, [pc, #472]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003622:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003624:	f001 0103 	and.w	r1, r1, #3
 8003628:	2903      	cmp	r1, #3
 800362a:	f000 815a 	beq.w	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 800362e:	2100      	movs	r1, #0
 8003630:	f104 0008 	add.w	r0, r4, #8
 8003634:	f7ff fc78 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
 8003638:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800363a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800363e:	2d00      	cmp	r5, #0
 8003640:	f040 82fb 	bne.w	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xb4a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003644:	4f6d      	ldr	r7, [pc, #436]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003646:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 800364a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800364c:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8003650:	4301      	orrs	r1, r0
 8003652:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003654:	071f      	lsls	r7, r3, #28
 8003656:	d50b      	bpl.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x580>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003658:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800365c:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8003660:	f000 8250 	beq.w	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xa14>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003664:	4f65      	ldr	r7, [pc, #404]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003666:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003668:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 800366c:	4301      	orrs	r1, r0
 800366e:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003670:	06d8      	lsls	r0, r3, #27
 8003672:	d50b      	bpl.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003674:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8003678:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800367c:	f000 8257 	beq.w	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003680:	4f5e      	ldr	r7, [pc, #376]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003682:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003684:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8003688:	4301      	orrs	r1, r0
 800368a:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800368c:	0319      	lsls	r1, r3, #12
 800368e:	d50e      	bpl.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x5be>
    switch (PeriphClkInit->AdcClockSelection)
 8003690:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8003694:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8003698:	f000 816e 	beq.w	8003978 <HAL_RCCEx_PeriphCLKConfig+0x888>
 800369c:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 80036a0:	f000 8179 	beq.w	8003996 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 80036a4:	2900      	cmp	r1, #0
 80036a6:	f000 827a 	beq.w	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80036aa:	2601      	movs	r6, #1
 80036ac:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036ae:	035f      	lsls	r7, r3, #13
 80036b0:	d50f      	bpl.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    switch (PeriphClkInit->UsbClockSelection)
 80036b2:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 80036b6:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80036ba:	f000 82eb 	beq.w	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80036be:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 80036c2:	f000 813d 	beq.w	8003940 <HAL_RCCEx_PeriphCLKConfig+0x850>
 80036c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80036ca:	f000 8134 	beq.w	8003936 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80036ce:	2601      	movs	r6, #1
 80036d0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80036d2:	03d8      	lsls	r0, r3, #15
 80036d4:	d520      	bpl.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x628>
    switch (PeriphClkInit->SdmmcClockSelection)
 80036d6:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80036d8:	2900      	cmp	r1, #0
 80036da:	f000 8245 	beq.w	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xa78>
 80036de:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80036e2:	f040 8125 	bne.w	8003930 <HAL_RCCEx_PeriphCLKConfig+0x840>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80036e6:	4945      	ldr	r1, [pc, #276]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80036e8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80036ea:	f001 0103 	and.w	r1, r1, #3
 80036ee:	2903      	cmp	r1, #3
 80036f0:	f000 811e 	beq.w	8003930 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80036f4:	2102      	movs	r1, #2
 80036f6:	f104 0008 	add.w	r0, r4, #8
 80036fa:	f7ff fc15 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
 80036fe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003700:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003704:	2d00      	cmp	r5, #0
 8003706:	f040 8237 	bne.w	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800370a:	4f3c      	ldr	r7, [pc, #240]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800370c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800370e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003710:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8003714:	4301      	orrs	r1, r0
 8003716:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003718:	0099      	lsls	r1, r3, #2
 800371a:	d50e      	bpl.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800371c:	4937      	ldr	r1, [pc, #220]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800371e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003720:	f001 0103 	and.w	r1, r1, #3
 8003724:	2903      	cmp	r1, #3
 8003726:	d007      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8003728:	2102      	movs	r1, #2
 800372a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800372e:	f7ff fc6d 	bl	800300c <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003732:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003736:	b100      	cbz	r0, 800373a <HAL_RCCEx_PeriphCLKConfig+0x64a>
      status = HAL_ERROR;
 8003738:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800373a:	039f      	lsls	r7, r3, #14
 800373c:	f140 80e0 	bpl.w	8003900 <HAL_RCCEx_PeriphCLKConfig+0x810>
    switch (PeriphClkInit->RngClockSelection)
 8003740:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8003744:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8003748:	f000 8205 	beq.w	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 800374c:	f240 80cc 	bls.w	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
 8003750:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8003754:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8003758:	f000 80c9 	beq.w	80038ee <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 800375c:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800375e:	02d8      	lsls	r0, r3, #11
 8003760:	d506      	bpl.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x680>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003762:	4826      	ldr	r0, [pc, #152]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003764:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 8003766:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8003768:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800376c:	4331      	orrs	r1, r6
 800376e:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003770:	00d9      	lsls	r1, r3, #3
 8003772:	d507      	bpl.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x694>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003774:	4821      	ldr	r0, [pc, #132]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8003776:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 800377a:	6901      	ldr	r1, [r0, #16]
 800377c:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8003780:	4331      	orrs	r1, r6
 8003782:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003784:	029f      	lsls	r7, r3, #10
 8003786:	d506      	bpl.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003788:	481c      	ldr	r0, [pc, #112]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800378a:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 800378c:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800378e:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8003792:	4331      	orrs	r1, r6
 8003794:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003796:	005e      	lsls	r6, r3, #1
 8003798:	d509      	bpl.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x6be>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800379a:	4918      	ldr	r1, [pc, #96]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800379c:	6908      	ldr	r0, [r1, #16]
 800379e:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 80037a2:	6108      	str	r0, [r1, #16]
 80037a4:	6908      	ldr	r0, [r1, #16]
 80037a6:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 80037aa:	4330      	orrs	r0, r6
 80037ac:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	da06      	bge.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80037b2:	4812      	ldr	r0, [pc, #72]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80037b4:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 80037b6:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80037b8:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 80037bc:	4331      	orrs	r1, r6
 80037be:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037c0:	0218      	lsls	r0, r3, #8
 80037c2:	d507      	bpl.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037c4:	490d      	ldr	r1, [pc, #52]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80037c6:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 80037ca:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 80037cc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80037d0:	4303      	orrs	r3, r0
 80037d2:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80037d4:	07d1      	lsls	r1, r2, #31
 80037d6:	d513      	bpl.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x710>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80037d8:	4b08      	ldr	r3, [pc, #32]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80037da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037dc:	f003 0303 	and.w	r3, r3, #3
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	f000 818d 	beq.w	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xa10>
 80037e6:	2100      	movs	r1, #0
 80037e8:	f104 0008 	add.w	r0, r4, #8
 80037ec:	f7ff fb9c 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80037f0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80037f2:	2800      	cmp	r0, #0
 80037f4:	f040 8204 	bne.w	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 80037f8:	e002      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x710>
 80037fa:	bf00      	nop
 80037fc:	58024400 	.word	0x58024400
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003800:	0793      	lsls	r3, r2, #30
 8003802:	d50f      	bpl.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x734>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003804:	4bb2      	ldr	r3, [pc, #712]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	2b03      	cmp	r3, #3
 800380e:	f000 816c 	beq.w	8003aea <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8003812:	2101      	movs	r1, #1
 8003814:	f104 0008 	add.w	r0, r4, #8
 8003818:	f7ff fb86 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800381c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800381e:	2800      	cmp	r0, #0
 8003820:	f040 81f0 	bne.w	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xb14>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003824:	0757      	lsls	r7, r2, #29
 8003826:	d50f      	bpl.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x758>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003828:	4ba9      	ldr	r3, [pc, #676]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 800382a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	2b03      	cmp	r3, #3
 8003832:	f000 815c 	beq.w	8003aee <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 8003836:	2102      	movs	r1, #2
 8003838:	f104 0008 	add.w	r0, r4, #8
 800383c:	f7ff fb74 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003840:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003842:	2800      	cmp	r0, #0
 8003844:	f040 81d8 	bne.w	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003848:	0716      	lsls	r6, r2, #28
 800384a:	d50f      	bpl.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800384c:	4ba0      	ldr	r3, [pc, #640]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 800384e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	2b03      	cmp	r3, #3
 8003856:	f000 814c 	beq.w	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xa02>
 800385a:	2100      	movs	r1, #0
 800385c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003860:	f7ff fbd4 	bl	800300c <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003864:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003866:	2800      	cmp	r0, #0
 8003868:	f040 81c8 	bne.w	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800386c:	06d0      	lsls	r0, r2, #27
 800386e:	d54a      	bpl.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x816>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003870:	4b97      	ldr	r3, [pc, #604]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003872:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	2b03      	cmp	r3, #3
 800387e:	f000 813a 	beq.w	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8003882:	2101      	movs	r1, #1
 8003884:	4630      	mov	r0, r6
 8003886:	f7ff fbc1 	bl	800300c <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 800388a:	2800      	cmp	r0, #0
 800388c:	d03a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x814>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800388e:	6863      	ldr	r3, [r4, #4]
 8003890:	069a      	lsls	r2, r3, #26
 8003892:	f140 808c 	bpl.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x8be>
 8003896:	4605      	mov	r5, r0
 8003898:	e039      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x81e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800389a:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 800389e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80038a2:	f43f ae7a 	beq.w	800359a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80038a6:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 80038aa:	f43f ae76 	beq.w	800359a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80038ae:	2601      	movs	r6, #1
 80038b0:	4635      	mov	r5, r6
 80038b2:	e67d      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80038b4:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 80038b8:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80038bc:	f43f ae96 	beq.w	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80038c0:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 80038c4:	f43f ae92 	beq.w	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 80038c8:	2601      	movs	r6, #1
 80038ca:	4635      	mov	r5, r6
 80038cc:	e699      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x512>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80038ce:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 80038d2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80038d6:	f43f aeb2 	beq.w	800363e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80038da:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 80038de:	f43f aeae 	beq.w	800363e <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80038e2:	2601      	movs	r6, #1
 80038e4:	4635      	mov	r5, r6
 80038e6:	e6b5      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch (PeriphClkInit->RngClockSelection)
 80038e8:	2900      	cmp	r1, #0
 80038ea:	f47f af37 	bne.w	800375c <HAL_RCCEx_PeriphCLKConfig+0x66c>
    if (ret == HAL_OK)
 80038ee:	2d00      	cmp	r5, #0
 80038f0:	f47f af35 	bne.w	800375e <HAL_RCCEx_PeriphCLKConfig+0x66e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038f4:	4d76      	ldr	r5, [pc, #472]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80038f6:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 80038f8:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 80038fc:	4301      	orrs	r1, r0
 80038fe:	6569      	str	r1, [r5, #84]	@ 0x54
      status = HAL_ERROR;
 8003900:	4635      	mov	r5, r6
 8003902:	e72c      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x66e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003904:	6862      	ldr	r2, [r4, #4]
 8003906:	0693      	lsls	r3, r2, #26
 8003908:	d50d      	bpl.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x836>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800390a:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800390e:	4b70      	ldr	r3, [pc, #448]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b03      	cmp	r3, #3
 8003918:	d049      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x8be>
 800391a:	2102      	movs	r1, #2
 800391c:	4630      	mov	r0, r6
 800391e:	f7ff fb75 	bl	800300c <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8003922:	2800      	cmp	r0, #0
 8003924:	d143      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x8be>
  if (status == HAL_OK)
 8003926:	1e28      	subs	r0, r5, #0
 8003928:	bf18      	it	ne
 800392a:	2001      	movne	r0, #1
}
 800392c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003930:	2601      	movs	r6, #1
 8003932:	4635      	mov	r5, r6
 8003934:	e6f0      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x628>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003936:	4866      	ldr	r0, [pc, #408]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003938:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800393a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800393e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003940:	2d00      	cmp	r5, #0
 8003942:	f040 8140 	bne.w	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003946:	4f62      	ldr	r7, [pc, #392]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003948:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800394c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800394e:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8003952:	4301      	orrs	r1, r0
 8003954:	6579      	str	r1, [r7, #84]	@ 0x54
 8003956:	e6bc      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003958:	485d      	ldr	r0, [pc, #372]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 800395a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800395c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003960:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003962:	2d00      	cmp	r5, #0
 8003964:	f040 812c 	bne.w	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xad0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003968:	4f59      	ldr	r7, [pc, #356]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 800396a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800396c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800396e:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8003972:	4301      	orrs	r1, r0
 8003974:	6539      	str	r1, [r7, #80]	@ 0x50
 8003976:	e516      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003978:	4955      	ldr	r1, [pc, #340]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 800397a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800397c:	f001 0103 	and.w	r1, r1, #3
 8003980:	2903      	cmp	r1, #3
 8003982:	f43f ae92 	beq.w	80036aa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8003986:	2102      	movs	r1, #2
 8003988:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800398c:	f7ff fb3e 	bl	800300c <RCCEx_PLL3_Config.part.0>
 8003990:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003992:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003996:	2d00      	cmp	r5, #0
 8003998:	f040 8151 	bne.w	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xb4e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800399c:	4f4c      	ldr	r7, [pc, #304]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 800399e:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 80039a2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80039a4:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 80039a8:	4301      	orrs	r1, r0
 80039aa:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039ac:	e67f      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x5be>
  return HAL_ERROR;
 80039ae:	2001      	movs	r0, #1
}
 80039b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80039b4:	4946      	ldr	r1, [pc, #280]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80039b6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80039b8:	f001 0103 	and.w	r1, r1, #3
 80039bc:	2903      	cmp	r1, #3
 80039be:	f43f ad86 	beq.w	80034ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80039c2:	2101      	movs	r1, #1
 80039c4:	f104 0008 	add.w	r0, r4, #8
 80039c8:	f7ff faae 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
 80039cc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80039ce:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80039d2:	2d00      	cmp	r5, #0
 80039d4:	f040 8137 	bne.w	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xb56>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80039d8:	4f3d      	ldr	r7, [pc, #244]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80039da:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80039dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039de:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 80039e2:	4301      	orrs	r1, r0
 80039e4:	6579      	str	r1, [r7, #84]	@ 0x54
 80039e6:	e574      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80039e8:	2601      	movs	r6, #1
 80039ea:	f7ff bbb0 	b.w	800314e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039ee:	4f39      	ldr	r7, [pc, #228]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039f6:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80039f8:	f7fd fb6a 	bl	80010d0 <HAL_GetTick>
 80039fc:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039fe:	e006      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x91e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a00:	f7fd fb66 	bl	80010d0 <HAL_GetTick>
 8003a04:	eba0 0008 	sub.w	r0, r0, r8
 8003a08:	2864      	cmp	r0, #100	@ 0x64
 8003a0a:	f200 8277 	bhi.w	8003efc <HAL_RCCEx_PeriphCLKConfig+0xe0c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	05da      	lsls	r2, r3, #23
 8003a12:	d5f5      	bpl.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x910>
    if (ret == HAL_OK)
 8003a14:	2d00      	cmp	r5, #0
 8003a16:	f040 8272 	bne.w	8003efe <HAL_RCCEx_PeriphCLKConfig+0xe0e>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a1a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003a1c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8003a20:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8003a22:	4059      	eors	r1, r3
 8003a24:	f411 7f40 	tst.w	r1, #768	@ 0x300
 8003a28:	d00b      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x952>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a2a:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a2c:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a2e:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a32:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8003a36:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a38:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8003a3a:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8003a3e:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8003a40:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a46:	f000 8285 	beq.w	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe64>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a4a:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8003a4e:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8003a52:	f000 8293 	beq.w	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xe8c>
 8003a56:	491e      	ldr	r1, [pc, #120]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003a58:	690a      	ldr	r2, [r1, #16]
 8003a5a:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8003a5e:	610a      	str	r2, [r1, #16]
 8003a60:	481b      	ldr	r0, [pc, #108]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003a62:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8003a66:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 8003a68:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a6a:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a6e:	6701      	str	r1, [r0, #112]	@ 0x70
 8003a70:	e4fd      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x37e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a72:	4817      	ldr	r0, [pc, #92]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003a74:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003a76:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003a7a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003a7c:	2d00      	cmp	r5, #0
 8003a7e:	f040 80b5 	bne.w	8003bec <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8003a82:	f7ff bbe7 	b.w	8003254 <HAL_RCCEx_PeriphCLKConfig+0x164>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a86:	4812      	ldr	r0, [pc, #72]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003a88:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003a8a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003a8e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003a90:	2d00      	cmp	r5, #0
 8003a92:	f040 80ae 	bne.w	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003a96:	e422      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a98:	480d      	ldr	r0, [pc, #52]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003a9a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003a9c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003aa0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003aa2:	2d00      	cmp	r5, #0
 8003aa4:	f040 809f 	bne.w	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8003aa8:	f7ff bba9 	b.w	80031fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aac:	4808      	ldr	r0, [pc, #32]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003aae:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003ab0:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003ab4:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8003ab6:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8003ab8:	2d00      	cmp	r5, #0
 8003aba:	f040 81ad 	bne.w	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xd28>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003abe:	4f04      	ldr	r7, [pc, #16]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003ac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ac2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003ac4:	f021 0107 	bic.w	r1, r1, #7
 8003ac8:	4301      	orrs	r1, r0
 8003aca:	6539      	str	r1, [r7, #80]	@ 0x50
 8003acc:	f7ff bb4d 	b.w	800316a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ad0:	58024400 	.word	0x58024400
 8003ad4:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad8:	48bb      	ldr	r0, [pc, #748]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8003ada:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003adc:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003ae0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003ae2:	2d00      	cmp	r5, #0
 8003ae4:	d17c      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003ae6:	f7ff bb60 	b.w	80031aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    return HAL_ERROR;
 8003aea:	2501      	movs	r5, #1
 8003aec:	e69a      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x734>
 8003aee:	2501      	movs	r5, #1
 8003af0:	e6aa      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x758>
    return HAL_ERROR;
 8003af2:	2501      	movs	r5, #1
 8003af4:	e6ba      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003af6:	0691      	lsls	r1, r2, #26
 8003af8:	f57f af59 	bpl.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x8be>
    return HAL_ERROR;
 8003afc:	2501      	movs	r5, #1
 8003afe:	e706      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x81e>
    return HAL_ERROR;
 8003b00:	2501      	movs	r5, #1
 8003b02:	e67d      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x710>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b04:	49b0      	ldr	r1, [pc, #704]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8003b06:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003b08:	f001 0103 	and.w	r1, r1, #3
 8003b0c:	2903      	cmp	r1, #3
 8003b0e:	f000 820a 	beq.w	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xe36>
 8003b12:	2102      	movs	r1, #2
 8003b14:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003b18:	f7ff fa78 	bl	800300c <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	f000 820f 	beq.w	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xe50>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b22:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
 8003b26:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b28:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003b2c:	e59a      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x574>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b2e:	49a6      	ldr	r1, [pc, #664]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8003b30:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003b32:	f001 0103 	and.w	r1, r1, #3
 8003b36:	2903      	cmp	r1, #3
 8003b38:	f000 81f8 	beq.w	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 8003b3c:	2102      	movs	r1, #2
 8003b3e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003b42:	f7ff fa63 	bl	800300c <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b46:	2800      	cmp	r0, #0
 8003b48:	f040 81f3 	bne.w	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xe42>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b4c:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b50:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003b54:	e594      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x590>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b56:	4f9c      	ldr	r7, [pc, #624]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8003b58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b5a:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003b5e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003b60:	2d00      	cmp	r5, #0
 8003b62:	f47f adfc 	bne.w	800375e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003b66:	e6c5      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x804>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b68:	4897      	ldr	r0, [pc, #604]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8003b6a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003b6c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003b70:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003b72:	2d00      	cmp	r5, #0
 8003b74:	f43f adc9 	beq.w	800370a <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8003b78:	462e      	mov	r6, r5
 8003b7a:	e5cd      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x628>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b7c:	4992      	ldr	r1, [pc, #584]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8003b7e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003b80:	f001 0103 	and.w	r1, r1, #3
 8003b84:	2903      	cmp	r1, #3
 8003b86:	f43f ac0c 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	f104 0008 	add.w	r0, r4, #8
 8003b90:	f7ff f9ca 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
 8003b94:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b96:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003b9a:	b98d      	cbnz	r5, 8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8003b9c:	e6e4      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x878>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b9e:	488a      	ldr	r0, [pc, #552]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8003ba0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003ba2:	f000 0003 	and.w	r0, r0, #3
 8003ba6:	2803      	cmp	r0, #3
 8003ba8:	f43f ad7f 	beq.w	80036aa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8003bac:	f104 0008 	add.w	r0, r4, #8
 8003bb0:	f7ff f9ba 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
 8003bb4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bb6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003bba:	2d00      	cmp	r5, #0
 8003bbc:	d13f      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 8003bbe:	e6ed      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8003bc0:	462e      	mov	r6, r5
 8003bc2:	f7ff bbf0 	b.w	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8003bc6:	462e      	mov	r6, r5
 8003bc8:	e583      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
 8003bca:	462e      	mov	r6, r5
 8003bcc:	f7ff bb65 	b.w	800329a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003bd0:	4f7d      	ldr	r7, [pc, #500]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8003bd2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8003bd4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003bd6:	f021 0103 	bic.w	r1, r1, #3
 8003bda:	4301      	orrs	r1, r0
 8003bdc:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8003bde:	e443      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003be0:	462e      	mov	r6, r5
 8003be2:	f7ff bae9 	b.w	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8003be6:	462e      	mov	r6, r5
 8003be8:	f7ff bb11 	b.w	800320e <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8003bec:	462e      	mov	r6, r5
 8003bee:	f7ff bb39 	b.w	8003264 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003bf2:	462e      	mov	r6, r5
 8003bf4:	f7ff bb7a 	b.w	80032ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003bf8:	4605      	mov	r5, r0
 8003bfa:	e625      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x758>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003bfc:	4605      	mov	r5, r0
 8003bfe:	e635      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003c00:	4605      	mov	r5, r0
 8003c02:	e5fd      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x710>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003c04:	4605      	mov	r5, r0
 8003c06:	e60d      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c08:	4f6f      	ldr	r7, [pc, #444]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8003c0a:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8003c0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c0e:	f021 0107 	bic.w	r1, r1, #7
 8003c12:	4301      	orrs	r1, r0
 8003c14:	6579      	str	r1, [r7, #84]	@ 0x54
 8003c16:	e47d      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003c18:	462e      	mov	r6, r5
 8003c1a:	f7ff bb8e 	b.w	800333a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003c1e:	462e      	mov	r6, r5
 8003c20:	f7ff bbb1 	b.w	8003386 <HAL_RCCEx_PeriphCLKConfig+0x296>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c24:	4f68      	ldr	r7, [pc, #416]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8003c26:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8003c2a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003c2c:	f021 0107 	bic.w	r1, r1, #7
 8003c30:	4301      	orrs	r1, r0
 8003c32:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c34:	e493      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x46e>
 8003c36:	462e      	mov	r6, r5
 8003c38:	e4ba      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 8003c3a:	462e      	mov	r6, r5
 8003c3c:	e50a      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x564>
 8003c3e:	462e      	mov	r6, r5
 8003c40:	e535      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8003c42:	462e      	mov	r6, r5
 8003c44:	e4dd      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x512>
 8003c46:	462e      	mov	r6, r5
 8003c48:	e443      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c4a:	495f      	ldr	r1, [pc, #380]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8003c4c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003c4e:	f001 0103 	and.w	r1, r1, #3
 8003c52:	2903      	cmp	r1, #3
 8003c54:	f43f ae2b 	beq.w	80038ae <HAL_RCCEx_PeriphCLKConfig+0x7be>
 8003c58:	2102      	movs	r1, #2
 8003c5a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003c5e:	f7ff f9d5 	bl	800300c <RCCEx_PLL3_Config.part.0>
 8003c62:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c64:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003c68:	2d00      	cmp	r5, #0
 8003c6a:	d1e4      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xb46>
 8003c6c:	e498      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c6e:	4956      	ldr	r1, [pc, #344]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8003c70:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003c72:	f001 0103 	and.w	r1, r1, #3
 8003c76:	2903      	cmp	r1, #3
 8003c78:	f43f abc7 	beq.w	800340a <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8003c7c:	2102      	movs	r1, #2
 8003c7e:	f104 0008 	add.w	r0, r4, #8
 8003c82:	f7ff f951 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
 8003c86:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c88:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003c8c:	2d00      	cmp	r5, #0
 8003c8e:	d19c      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xada>
 8003c90:	f7ff bafc 	b.w	800328c <HAL_RCCEx_PeriphCLKConfig+0x19c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c94:	494c      	ldr	r1, [pc, #304]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8003c96:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003c98:	f001 0103 	and.w	r1, r1, #3
 8003c9c:	2903      	cmp	r1, #3
 8003c9e:	f43f ad16 	beq.w	80036ce <HAL_RCCEx_PeriphCLKConfig+0x5de>
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003ca8:	f7ff f9b0 	bl	800300c <RCCEx_PLL3_Config.part.0>
 8003cac:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003cae:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003cb2:	2d00      	cmp	r5, #0
 8003cb4:	d187      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8003cb6:	e646      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x856>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cb8:	4943      	ldr	r1, [pc, #268]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8003cba:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003cbc:	f001 0103 	and.w	r1, r1, #3
 8003cc0:	2903      	cmp	r1, #3
 8003cc2:	f43f ae0e 	beq.w	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8003cc6:	2102      	movs	r1, #2
 8003cc8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003ccc:	f7ff f99e 	bl	800300c <RCCEx_PLL3_Config.part.0>
 8003cd0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003cd2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003cd6:	2d00      	cmp	r5, #0
 8003cd8:	d1af      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xb4a>
 8003cda:	e4b3      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x554>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cdc:	493a      	ldr	r1, [pc, #232]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8003cde:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003ce0:	f001 0103 	and.w	r1, r1, #3
 8003ce4:	2903      	cmp	r1, #3
 8003ce6:	f000 8131 	beq.w	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003cea:	2102      	movs	r1, #2
 8003cec:	f104 0008 	add.w	r0, r4, #8
 8003cf0:	f7ff f91a 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
 8003cf4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cf6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003cfa:	2d00      	cmp	r5, #0
 8003cfc:	f47f abb3 	bne.w	8003466 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d00:	e766      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d02:	4931      	ldr	r1, [pc, #196]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8003d04:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003d06:	f001 0103 	and.w	r1, r1, #3
 8003d0a:	2903      	cmp	r1, #3
 8003d0c:	f43f addc 	beq.w	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 8003d10:	2102      	movs	r1, #2
 8003d12:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003d16:	f7ff f979 	bl	800300c <RCCEx_PLL3_Config.part.0>
 8003d1a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d1c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003d20:	2d00      	cmp	r5, #0
 8003d22:	d18e      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xb52>
 8003d24:	e465      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d26:	4928      	ldr	r1, [pc, #160]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8003d28:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003d2a:	f001 0103 	and.w	r1, r1, #3
 8003d2e:	2903      	cmp	r1, #3
 8003d30:	f43f ab83 	beq.w	800343a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003d34:	2101      	movs	r1, #1
 8003d36:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003d3a:	f7ff f967 	bl	800300c <RCCEx_PLL3_Config.part.0>
 8003d3e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d40:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003d44:	2d00      	cmp	r5, #0
 8003d46:	f47f af67 	bne.w	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xb28>
 8003d4a:	f7ff baef 	b.w	800332c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d4e:	491e      	ldr	r1, [pc, #120]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8003d50:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003d52:	f001 0103 	and.w	r1, r1, #3
 8003d56:	2903      	cmp	r1, #3
 8003d58:	f43f ab7a 	beq.w	8003450 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003d62:	f7ff f953 	bl	800300c <RCCEx_PLL3_Config.part.0>
 8003d66:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d68:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003d6c:	2d00      	cmp	r5, #0
 8003d6e:	f47f af56 	bne.w	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003d72:	f7ff bb00 	b.w	8003376 <HAL_RCCEx_PeriphCLKConfig+0x286>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d76:	4914      	ldr	r1, [pc, #80]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8003d78:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003d7a:	f001 0103 	and.w	r1, r1, #3
 8003d7e:	2903      	cmp	r1, #3
 8003d80:	f43f ab3d 	beq.w	80033fe <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8003d84:	2100      	movs	r1, #0
 8003d86:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003d8a:	f7ff f93f 	bl	800300c <RCCEx_PLL3_Config.part.0>
 8003d8e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d90:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003d94:	2d00      	cmp	r5, #0
 8003d96:	f47f af29 	bne.w	8003bec <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8003d9a:	f7ff ba5b 	b.w	8003254 <HAL_RCCEx_PeriphCLKConfig+0x164>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d9e:	490a      	ldr	r1, [pc, #40]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8003da0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003da2:	f001 0103 	and.w	r1, r1, #3
 8003da6:	2903      	cmp	r1, #3
 8003da8:	f43f ab3a 	beq.w	8003420 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003dac:	2100      	movs	r1, #0
 8003dae:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003db2:	f7ff f92b 	bl	800300c <RCCEx_PLL3_Config.part.0>
 8003db6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003db8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003dbc:	2d00      	cmp	r5, #0
 8003dbe:	f47f af18 	bne.w	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003dc2:	f7ff ba8c 	b.w	80032de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003dc6:	bf00      	nop
 8003dc8:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003dcc:	4973      	ldr	r1, [pc, #460]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8003dce:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003dd0:	f001 0103 	and.w	r1, r1, #3
 8003dd4:	2903      	cmp	r1, #3
 8003dd6:	f43f ae07 	beq.w	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8003dda:	2102      	movs	r1, #2
 8003ddc:	3028      	adds	r0, #40	@ 0x28
 8003dde:	f7ff f915 	bl	800300c <RCCEx_PLL3_Config.part.0>
 8003de2:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003de4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003de8:	2e00      	cmp	r6, #0
 8003dea:	f47f a9b0 	bne.w	800314e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003dee:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8003df0:	f7ff b9a6 	b.w	8003140 <HAL_RCCEx_PeriphCLKConfig+0x50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003df4:	4969      	ldr	r1, [pc, #420]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8003df6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003df8:	f001 0103 	and.w	r1, r1, #3
 8003dfc:	2903      	cmp	r1, #3
 8003dfe:	f43f a9b2 	beq.w	8003166 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e02:	2100      	movs	r1, #0
 8003e04:	f104 0008 	add.w	r0, r4, #8
 8003e08:	f7ff f88e 	bl	8002f28 <RCCEx_PLL2_Config.part.0>
 8003e0c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003e0e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003e12:	2d00      	cmp	r5, #0
 8003e14:	f43f ae53 	beq.w	8003abe <HAL_RCCEx_PeriphCLKConfig+0x9ce>
 8003e18:	462e      	mov	r6, r5
 8003e1a:	f7ff b9a6 	b.w	800316a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e1e:	495f      	ldr	r1, [pc, #380]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8003e20:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003e22:	f001 0103 	and.w	r1, r1, #3
 8003e26:	2903      	cmp	r1, #3
 8003e28:	f43f a99d 	beq.w	8003166 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003e32:	f7ff f8eb 	bl	800300c <RCCEx_PLL3_Config.part.0>
 8003e36:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003e38:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8003e3c:	e63c      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e3e:	4957      	ldr	r1, [pc, #348]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8003e40:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003e42:	f001 0103 	and.w	r1, r1, #3
 8003e46:	2903      	cmp	r1, #3
 8003e48:	f43f aac0 	beq.w	80033cc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003e52:	f7ff f8db 	bl	800300c <RCCEx_PLL3_Config.part.0>
 8003e56:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003e58:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003e5c:	2d00      	cmp	r5, #0
 8003e5e:	f47f aebf 	bne.w	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003e62:	f7ff b9a2 	b.w	80031aa <HAL_RCCEx_PeriphCLKConfig+0xba>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e66:	494d      	ldr	r1, [pc, #308]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8003e68:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003e6a:	f001 0103 	and.w	r1, r1, #3
 8003e6e:	2903      	cmp	r1, #3
 8003e70:	f43f aaba 	beq.w	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8003e74:	2100      	movs	r1, #0
 8003e76:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003e7a:	f7ff f8c7 	bl	800300c <RCCEx_PLL3_Config.part.0>
 8003e7e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e80:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003e84:	2d00      	cmp	r5, #0
 8003e86:	f47f aeae 	bne.w	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8003e8a:	f7ff b9b8 	b.w	80031fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e8e:	4943      	ldr	r1, [pc, #268]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8003e90:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003e92:	f001 0103 	and.w	r1, r1, #3
 8003e96:	2903      	cmp	r1, #3
 8003e98:	d041      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003ea0:	f7ff f8b4 	bl	800300c <RCCEx_PLL3_Config.part.0>
 8003ea4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ea6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003eaa:	2d00      	cmp	r5, #0
 8003eac:	f47f ab56 	bne.w	800355c <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8003eb0:	e6b8      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xb34>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003eb2:	493a      	ldr	r1, [pc, #232]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8003eb4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003eb6:	f001 0103 	and.w	r1, r1, #3
 8003eba:	2903      	cmp	r1, #3
 8003ebc:	d02b      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003ec4:	f7ff f8a2 	bl	800300c <RCCEx_PLL3_Config.part.0>
 8003ec8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eca:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003ece:	2d00      	cmp	r5, #0
 8003ed0:	f47f ab1f 	bne.w	8003512 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8003ed4:	e698      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ed6:	4931      	ldr	r1, [pc, #196]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8003ed8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003eda:	f001 0103 	and.w	r1, r1, #3
 8003ede:	2903      	cmp	r1, #3
 8003ee0:	f43f aaf5 	beq.w	80034ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003eea:	f7ff f88f 	bl	800300c <RCCEx_PLL3_Config.part.0>
 8003eee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ef0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003ef4:	2d00      	cmp	r5, #0
 8003ef6:	f47f aea6 	bne.w	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8003efa:	e56d      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
        ret = HAL_TIMEOUT;
 8003efc:	2503      	movs	r5, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003efe:	462e      	mov	r6, r5
 8003f00:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003f04:	f7ff bab3 	b.w	800346e <HAL_RCCEx_PeriphCLKConfig+0x37e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f08:	4d24      	ldr	r5, [pc, #144]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8003f0a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8003f0c:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003f10:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003f12:	f7ff b915 	b.w	8003140 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003f16:	2601      	movs	r6, #1
 8003f18:	4635      	mov	r5, r6
 8003f1a:	f7ff bafb 	b.w	8003514 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003f1e:	2601      	movs	r6, #1
 8003f20:	4635      	mov	r5, r6
 8003f22:	f7ff bb1c 	b.w	800355e <HAL_RCCEx_PeriphCLKConfig+0x46e>
        status = HAL_ERROR;
 8003f26:	2601      	movs	r6, #1
 8003f28:	f7ff bb9c 	b.w	8003664 <HAL_RCCEx_PeriphCLKConfig+0x574>
        status = HAL_ERROR;
 8003f2c:	2601      	movs	r6, #1
 8003f2e:	f7ff bba7 	b.w	8003680 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f32:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
 8003f36:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f38:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003f3c:	f7ff bba0 	b.w	8003680 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f40:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f44:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003f48:	f7ff bb8c 	b.w	8003664 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8003f4c:	2601      	movs	r6, #1
 8003f4e:	4635      	mov	r5, r6
 8003f50:	f7ff ba8a 	b.w	8003468 <HAL_RCCEx_PeriphCLKConfig+0x378>
        tickstart = HAL_GetTick();
 8003f54:	f7fd f8bc 	bl	80010d0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f58:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8003f9c <HAL_RCCEx_PeriphCLKConfig+0xeac>
        tickstart = HAL_GetTick();
 8003f5c:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5e:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f62:	e004      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f64:	f7fd f8b4 	bl	80010d0 <HAL_GetTick>
 8003f68:	1bc0      	subs	r0, r0, r7
 8003f6a:	4548      	cmp	r0, r9
 8003f6c:	d810      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xea0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f6e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8003f72:	079b      	lsls	r3, r3, #30
 8003f74:	d5f6      	bpl.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xe74>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f76:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8003f7a:	e566      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003f7c:	4807      	ldr	r0, [pc, #28]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8003f7e:	4a08      	ldr	r2, [pc, #32]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xeb0>)
 8003f80:	6901      	ldr	r1, [r0, #16]
 8003f82:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8003f86:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	6102      	str	r2, [r0, #16]
 8003f8e:	e567      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x970>
        status = ret;
 8003f90:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f92:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003f96:	4635      	mov	r5, r6
 8003f98:	f7ff ba69 	b.w	800346e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003f9c:	58024400 	.word	0x58024400
 8003fa0:	00ffffcf 	.word	0x00ffffcf

08003fa4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8003fa4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003fa6:	f7fe feef 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
 8003faa:	4b05      	ldr	r3, [pc, #20]	@ (8003fc0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8003fac:	4a05      	ldr	r2, [pc, #20]	@ (8003fc4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003fb4:	5cd3      	ldrb	r3, [r2, r3]
 8003fb6:	f003 031f 	and.w	r3, r3, #31
}
 8003fba:	40d8      	lsrs	r0, r3
 8003fbc:	bd08      	pop	{r3, pc}
 8003fbe:	bf00      	nop
 8003fc0:	58024400 	.word	0x58024400
 8003fc4:	08005190 	.word	0x08005190

08003fc8 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fc8:	4a47      	ldr	r2, [pc, #284]	@ (80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 8003fca:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fcc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003fce:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003fd0:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 8003fd2:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003fd6:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003fda:	6bd4      	ldr	r4, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8003fdc:	d05b      	beq.n	8004096 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003fde:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003fe2:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fe6:	f001 0103 	and.w	r1, r1, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fea:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003fee:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8003ff2:	2901      	cmp	r1, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ff8:	ee06 4a90 	vmov	s13, r4
 8003ffc:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8004000:	d003      	beq.n	800400a <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8004002:	2902      	cmp	r1, #2
 8004004:	d06a      	beq.n	80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 8004006:	2900      	cmp	r1, #0
 8004008:	d04a      	beq.n	80040a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800400a:	eddf 7a38 	vldr	s15, [pc, #224]	@ 80040ec <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800400e:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8004012:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8004014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004018:	ee07 3a90 	vmov	s15, r3
 800401c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004024:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004028:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800402c:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004030:	4a2d      	ldr	r2, [pc, #180]	@ (80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 8004032:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004036:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8004038:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800403c:	ee07 3a10 	vmov	s14, r3
 8004040:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8004044:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004046:	ee37 7a06 	vadd.f32	s14, s14, s12
 800404a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800404e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004052:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004056:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8004058:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800405c:	ee07 3a10 	vmov	s14, r3
 8004060:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004064:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004068:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800406c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004070:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004074:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8004076:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800407a:	ee06 3a90 	vmov	s13, r3
 800407e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004082:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004086:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800408a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800408e:	ee17 3a90 	vmov	r3, s15
 8004092:	6083      	str	r3, [r0, #8]
}
 8004094:	4770      	bx	lr
 8004096:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004098:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800409c:	6083      	str	r3, [r0, #8]
}
 800409e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040a0:	6813      	ldr	r3, [r2, #0]
 80040a2:	069b      	lsls	r3, r3, #26
 80040a4:	d51d      	bpl.n	80040e2 <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040a6:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040a8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80040ac:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040ae:	4910      	ldr	r1, [pc, #64]	@ (80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 80040b0:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040b8:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040ba:	ee06 3a10 	vmov	s12, r3
 80040be:	ee05 1a90 	vmov	s11, r1
 80040c2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80040c6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80040ca:	ee36 6a27 	vadd.f32	s12, s12, s15
 80040ce:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80040d2:	ee36 7a26 	vadd.f32	s14, s12, s13
 80040d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040da:	e7a9      	b.n	8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040dc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80040f4 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 80040e0:	e795      	b.n	800400e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040e2:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80040f8 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 80040e6:	e792      	b.n	800400e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 80040e8:	58024400 	.word	0x58024400
 80040ec:	4a742400 	.word	0x4a742400
 80040f0:	03d09000 	.word	0x03d09000
 80040f4:	4af42400 	.word	0x4af42400
 80040f8:	4c742400 	.word	0x4c742400

080040fc <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040fc:	4a47      	ldr	r2, [pc, #284]	@ (800421c <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 80040fe:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004100:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004102:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004104:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 8004106:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800410a:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800410e:	6c54      	ldr	r4, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 8004110:	d05b      	beq.n	80041ca <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004112:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004116:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800411a:	f001 0103 	and.w	r1, r1, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800411e:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004122:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8004126:	2901      	cmp	r1, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004128:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800412c:	ee06 4a90 	vmov	s13, r4
 8004130:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8004134:	d003      	beq.n	800413e <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8004136:	2902      	cmp	r1, #2
 8004138:	d06a      	beq.n	8004210 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 800413a:	2900      	cmp	r1, #0
 800413c:	d04a      	beq.n	80041d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800413e:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8004220 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8004142:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8004146:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414c:	ee07 3a90 	vmov	s15, r3
 8004150:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004158:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800415c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004160:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004164:	4a2d      	ldr	r2, [pc, #180]	@ (800421c <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 8004166:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800416a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800416c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004170:	ee07 3a10 	vmov	s14, r3
 8004174:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8004178:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800417a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800417e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004182:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004186:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800418a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800418c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004190:	ee07 3a10 	vmov	s14, r3
 8004194:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004198:	ee37 7a06 	vadd.f32	s14, s14, s12
 800419c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80041a0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80041a4:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80041a8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80041aa:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80041ae:	ee06 3a90 	vmov	s13, r3
 80041b2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80041b6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80041ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80041be:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80041c2:	ee17 3a90 	vmov	r3, s15
 80041c6:	6083      	str	r3, [r0, #8]
}
 80041c8:	4770      	bx	lr
 80041ca:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80041cc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80041d0:	6083      	str	r3, [r0, #8]
}
 80041d2:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041d4:	6813      	ldr	r3, [r2, #0]
 80041d6:	069b      	lsls	r3, r3, #26
 80041d8:	d51d      	bpl.n	8004216 <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041da:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041dc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80041e0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041e2:	4910      	ldr	r1, [pc, #64]	@ (8004224 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 80041e4:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041ec:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041ee:	ee06 3a10 	vmov	s12, r3
 80041f2:	ee05 1a90 	vmov	s11, r1
 80041f6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80041fa:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80041fe:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004202:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8004206:	ee36 7a26 	vadd.f32	s14, s12, s13
 800420a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800420e:	e7a9      	b.n	8004164 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004210:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004228 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8004214:	e795      	b.n	8004142 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004216:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800422c <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 800421a:	e792      	b.n	8004142 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800421c:	58024400 	.word	0x58024400
 8004220:	4a742400 	.word	0x4a742400
 8004224:	03d09000 	.word	0x03d09000
 8004228:	4af42400 	.word	0x4af42400
 800422c:	4c742400 	.word	0x4c742400

08004230 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004230:	4a47      	ldr	r2, [pc, #284]	@ (8004350 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 8004232:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004234:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8004236:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004238:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 800423a:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800423e:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004242:	6b54      	ldr	r4, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 8004244:	d05b      	beq.n	80042fe <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004246:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800424a:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800424e:	f001 0103 	and.w	r1, r1, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004252:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004256:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800425a:	2901      	cmp	r1, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800425c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004260:	ee06 4a90 	vmov	s13, r4
 8004264:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8004268:	d06f      	beq.n	800434a <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 800426a:	2902      	cmp	r1, #2
 800426c:	d06a      	beq.n	8004344 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
 800426e:	2900      	cmp	r1, #0
 8004270:	d04a      	beq.n	8004308 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004272:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8004354 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8004276:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800427a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800427c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004280:	ee07 3a90 	vmov	s15, r3
 8004284:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800428c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004290:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004294:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8004298:	4a2d      	ldr	r2, [pc, #180]	@ (8004350 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 800429a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800429e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80042a0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80042a4:	ee07 3a10 	vmov	s14, r3
 80042a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80042ac:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80042ae:	ee37 7a06 	vadd.f32	s14, s14, s12
 80042b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80042b6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80042ba:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80042be:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80042c0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80042c4:	ee07 3a10 	vmov	s14, r3
 80042c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80042cc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80042d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80042d4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80042d8:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80042dc:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80042de:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80042e2:	ee06 3a90 	vmov	s13, r3
 80042e6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80042ea:	ee76 6a86 	vadd.f32	s13, s13, s12
 80042ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80042f2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80042f6:	ee17 3a90 	vmov	r3, s15
 80042fa:	6083      	str	r3, [r0, #8]
}
 80042fc:	4770      	bx	lr
 80042fe:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004300:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8004304:	6083      	str	r3, [r0, #8]
}
 8004306:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004308:	6813      	ldr	r3, [r2, #0]
 800430a:	069b      	lsls	r3, r3, #26
 800430c:	d5b1      	bpl.n	8004272 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800430e:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004310:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004314:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004316:	4910      	ldr	r1, [pc, #64]	@ (8004358 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 8004318:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800431c:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004320:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004322:	ee06 3a10 	vmov	s12, r3
 8004326:	ee05 1a90 	vmov	s11, r1
 800432a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800432e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004332:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004336:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800433a:	ee36 7a26 	vadd.f32	s14, s12, s13
 800433e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004342:	e7a9      	b.n	8004298 <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004344:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800435c <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8004348:	e795      	b.n	8004276 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800434a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004360 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800434e:	e792      	b.n	8004276 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8004350:	58024400 	.word	0x58024400
 8004354:	4c742400 	.word	0x4c742400
 8004358:	03d09000 	.word	0x03d09000
 800435c:	4af42400 	.word	0x4af42400
 8004360:	4a742400 	.word	0x4a742400

08004364 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004364:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 8004368:	430b      	orrs	r3, r1
{
 800436a:	b500      	push	{lr}
 800436c:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800436e:	f000 8083 	beq.w	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004372:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 8004376:	430b      	orrs	r3, r1
 8004378:	d038      	beq.n	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800437a:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 800437e:	430b      	orrs	r3, r1
 8004380:	f000 80e6 	beq.w	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004384:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 8004388:	430b      	orrs	r3, r1
 800438a:	f000 8089 	beq.w	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800438e:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 8004392:	430b      	orrs	r3, r1
 8004394:	d060      	beq.n	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004396:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 800439a:	430b      	orrs	r3, r1
 800439c:	f000 8112 	beq.w	80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80043a0:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 80043a4:	430b      	orrs	r3, r1
 80043a6:	f000 80a3 	beq.w	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80043aa:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 80043ae:	430b      	orrs	r3, r1
 80043b0:	f000 80fa 	beq.w	80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80043b4:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 80043b8:	430b      	orrs	r3, r1
 80043ba:	f000 8143 	beq.w	8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80043be:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 80043c2:	4308      	orrs	r0, r1
 80043c4:	d137      	bne.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80043c6:	4a9a      	ldr	r2, [pc, #616]	@ (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80043c8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80043ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 80043ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043d2:	f000 8084 	beq.w	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80043d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043da:	f000 8157 	beq.w	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80043de:	bb53      	cbnz	r3, 8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80043e0:	6810      	ldr	r0, [r2, #0]
 80043e2:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80043e6:	d044      	beq.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 80043e8:	4892      	ldr	r0, [pc, #584]	@ (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80043ea:	e042      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80043ec:	4a90      	ldr	r2, [pc, #576]	@ (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80043ee:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80043f0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 80043f4:	2b80      	cmp	r3, #128	@ 0x80
 80043f6:	f000 80a6 	beq.w	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 80043fa:	d920      	bls.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80043fc:	2bc0      	cmp	r3, #192	@ 0xc0
 80043fe:	d037      	beq.n	8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004404:	d117      	bne.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004406:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004408:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800440a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800440e:	0749      	lsls	r1, r1, #29
 8004410:	d502      	bpl.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 80c2 	beq.w	800459c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004418:	4a85      	ldr	r2, [pc, #532]	@ (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	05d0      	lsls	r0, r2, #23
 800441e:	d503      	bpl.n	8004428 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8004420:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004424:	f000 8102 	beq.w	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004428:	4a81      	ldr	r2, [pc, #516]	@ (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	0391      	lsls	r1, r2, #14
 800442e:	d502      	bpl.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004430:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004434:	d0d8      	beq.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
          frequency = 0;
 8004436:	2000      	movs	r0, #0
}
 8004438:	b005      	add	sp, #20
 800443a:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 800443e:	2b00      	cmp	r3, #0
 8004440:	d04d      	beq.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004442:	2b40      	cmp	r3, #64	@ 0x40
 8004444:	d1f7      	bne.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004446:	6810      	ldr	r0, [r2, #0]
 8004448:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800444c:	d011      	beq.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800444e:	a801      	add	r0, sp, #4
 8004450:	f7ff fdba 	bl	8003fc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004454:	9801      	ldr	r0, [sp, #4]
 8004456:	e00c      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004458:	4a75      	ldr	r2, [pc, #468]	@ (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800445a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800445c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 8004460:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004464:	d06f      	beq.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8004466:	d938      	bls.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8004468:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800446c:	f040 8088 	bne.w	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004470:	4871      	ldr	r0, [pc, #452]	@ (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 8004472:	b005      	add	sp, #20
 8004474:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004478:	4b6d      	ldr	r3, [pc, #436]	@ (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800447a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800447c:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8004480:	2b04      	cmp	r3, #4
 8004482:	d8d8      	bhi.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004484:	a201      	add	r2, pc, #4	@ (adr r2, 800448c <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 8004486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448a:	bf00      	nop
 800448c:	0800452f 	.word	0x0800452f
 8004490:	0800450b 	.word	0x0800450b
 8004494:	0800451b 	.word	0x0800451b
 8004498:	08004471 	.word	0x08004471
 800449c:	08004517 	.word	0x08004517
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80044a0:	4a63      	ldr	r2, [pc, #396]	@ (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80044a2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80044a4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
    switch (saiclocksource)
 80044a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044ac:	d04b      	beq.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 80044ae:	d944      	bls.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 80044b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80044b4:	d0dc      	beq.n	8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80044b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044ba:	d1bc      	bne.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80044bc:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80044be:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80044c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80044c4:	0752      	lsls	r2, r2, #29
 80044c6:	d5a7      	bpl.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1a5      	bne.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044cc:	4b58      	ldr	r3, [pc, #352]	@ (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80044ce:	485b      	ldr	r0, [pc, #364]	@ (800463c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80044d6:	40d8      	lsrs	r0, r3
 80044d8:	e7cb      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d154      	bne.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80044de:	6810      	ldr	r0, [r2, #0]
 80044e0:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 80044e4:	d0c5      	beq.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80044e6:	a801      	add	r0, sp, #4
 80044e8:	f7ff fea2 	bl	8004230 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80044ec:	9802      	ldr	r0, [sp, #8]
 80044ee:	e7c0      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80044f0:	4a4f      	ldr	r2, [pc, #316]	@ (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80044f2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80044f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 80044f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044fc:	f000 80d0 	beq.w	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 8004500:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004504:	d0da      	beq.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d195      	bne.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800450a:	4b49      	ldr	r3, [pc, #292]	@ (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004512:	d0ae      	beq.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004514:	e79b      	b.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004516:	4a46      	ldr	r2, [pc, #280]	@ (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004518:	e775      	b.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800451a:	4b45      	ldr	r3, [pc, #276]	@ (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8004522:	d0a6      	beq.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004524:	a801      	add	r0, sp, #4
 8004526:	f7ff fde9 	bl	80040fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800452a:	9801      	ldr	r0, [sp, #4]
 800452c:	e7a1      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800452e:	4b40      	ldr	r3, [pc, #256]	@ (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8004536:	d09c      	beq.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004538:	e7d5      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0cf      	beq.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800453e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004542:	d080      	beq.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8004544:	e777      	b.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004546:	6810      	ldr	r0, [r2, #0]
 8004548:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800454c:	d091      	beq.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800454e:	e7e9      	b.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8004550:	4a37      	ldr	r2, [pc, #220]	@ (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004552:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004554:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
    switch (saiclocksource)
 8004558:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800455c:	d0f3      	beq.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800455e:	d806      	bhi.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0bc      	beq.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004564:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004568:	f43f af6d 	beq.w	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 800456c:	e763      	b.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800456e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004572:	f43f af7d 	beq.w	8004470 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8004576:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800457a:	f43f af44 	beq.w	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 800457e:	e75a      	b.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
 8004580:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004584:	d09a      	beq.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004586:	e756      	b.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004588:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800458c:	f43f af5b 	beq.w	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8004590:	e751      	b.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004592:	6810      	ldr	r0, [r2, #0]
 8004594:	f010 0004 	ands.w	r0, r0, #4
 8004598:	f43f af6b 	beq.w	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800459c:	6813      	ldr	r3, [r2, #0]
 800459e:	4827      	ldr	r0, [pc, #156]	@ (800463c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80045a0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80045a4:	40d8      	lsrs	r0, r3
 80045a6:	e764      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80045a8:	4b21      	ldr	r3, [pc, #132]	@ (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80045aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 80045ac:	03d2      	lsls	r2, r2, #15
 80045ae:	d5bf      	bpl.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80045b0:	6818      	ldr	r0, [r3, #0]
 80045b2:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80045b6:	f43f af5c 	beq.w	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045ba:	a801      	add	r0, sp, #4
 80045bc:	f7ff fd04 	bl	8003fc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80045c0:	9803      	ldr	r0, [sp, #12]
 80045c2:	e756      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80045c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80045c6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80045c8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 80045cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045d0:	d0df      	beq.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80045d2:	d810      	bhi.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 80045d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d8:	d058      	beq.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80045da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045de:	d118      	bne.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80045e0:	4b13      	ldr	r3, [pc, #76]	@ (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80045e2:	6818      	ldr	r0, [r3, #0]
 80045e4:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80045e8:	f43f af43 	beq.w	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045ec:	a801      	add	r0, sp, #4
 80045ee:	f7ff fd85 	bl	80040fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80045f2:	9802      	ldr	r0, [sp, #8]
 80045f4:	e73d      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80045f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045fa:	d012      	beq.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 80045fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004600:	f47f af19 	bne.w	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004604:	4b0a      	ldr	r3, [pc, #40]	@ (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004606:	6818      	ldr	r0, [r3, #0]
 8004608:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800460c:	f43f af31 	beq.w	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004610:	e6ea      	b.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 8004612:	2b00      	cmp	r3, #0
 8004614:	f47f af0f 	bne.w	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
 8004618:	b005      	add	sp, #20
 800461a:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800461e:	f7fe bbf3 	b.w	8002e08 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004622:	6810      	ldr	r0, [r2, #0]
 8004624:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8004628:	f43f af23 	beq.w	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 800462c:	4804      	ldr	r0, [pc, #16]	@ (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800462e:	e720      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004630:	58024400 	.word	0x58024400
 8004634:	007a1200 	.word	0x007a1200
 8004638:	00bb8000 	.word	0x00bb8000
 800463c:	03d09000 	.word	0x03d09000
 8004640:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8004644:	4b28      	ldr	r3, [pc, #160]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8004646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004648:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 800464c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004650:	d037      	beq.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 8004652:	d814      	bhi.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8004654:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004658:	d03f      	beq.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800465a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800465e:	d0bf      	beq.n	80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8004660:	2b00      	cmp	r3, #0
 8004662:	f47f aee8 	bne.w	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004666:	f7fe fb8f 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
 800466a:	4b1f      	ldr	r3, [pc, #124]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800466c:	4a1f      	ldr	r2, [pc, #124]	@ (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004674:	5cd3      	ldrb	r3, [r2, r3]
 8004676:	f003 031f 	and.w	r3, r3, #31
 800467a:	40d8      	lsrs	r0, r3
        break;
 800467c:	e6f9      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800467e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004682:	d017      	beq.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8004684:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004688:	d0bc      	beq.n	8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800468a:	e6d4      	b.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800468c:	6810      	ldr	r0, [r2, #0]
 800468e:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8004692:	f43f aeee 	beq.w	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004696:	a801      	add	r0, sp, #4
 8004698:	f7ff fc96 	bl	8003fc8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800469c:	9802      	ldr	r0, [sp, #8]
 800469e:	e6e8      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80046a0:	6810      	ldr	r0, [r2, #0]
 80046a2:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80046a6:	f43f aee4 	beq.w	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046aa:	a801      	add	r0, sp, #4
 80046ac:	f7ff fd26 	bl	80040fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80046b0:	9803      	ldr	r0, [sp, #12]
 80046b2:	e6de      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80046b4:	4b0c      	ldr	r3, [pc, #48]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 80046bc:	f43f aed9 	beq.w	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80046c0:	e7b4      	b.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80046c2:	4b09      	ldr	r3, [pc, #36]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	f010 0004 	ands.w	r0, r0, #4
 80046ca:	f43f aed2 	beq.w	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4807      	ldr	r0, [pc, #28]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 80046d2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80046d6:	40d8      	lsrs	r0, r3
 80046d8:	e6cb      	b.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80046da:	4b03      	ldr	r3, [pc, #12]	@ (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 80046dc:	6818      	ldr	r0, [r3, #0]
 80046de:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80046e2:	f43f aec6 	beq.w	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80046e6:	e7d6      	b.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80046e8:	58024400 	.word	0x58024400
 80046ec:	08005190 	.word	0x08005190
 80046f0:	03d09000 	.word	0x03d09000

080046f4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f4:	2800      	cmp	r0, #0
 80046f6:	f000 8094 	beq.w	8004822 <HAL_TIM_Base_Init+0x12e>
{
 80046fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046fc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004700:	4604      	mov	r4, r0
 8004702:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004706:	2b00      	cmp	r3, #0
 8004708:	d07b      	beq.n	8004802 <HAL_TIM_Base_Init+0x10e>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800470a:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	2202      	movs	r2, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800470e:	4946      	ldr	r1, [pc, #280]	@ (8004828 <HAL_TIM_Base_Init+0x134>)
 8004710:	4846      	ldr	r0, [pc, #280]	@ (800482c <HAL_TIM_Base_Init+0x138>)
 8004712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004716:	eba3 0101 	sub.w	r1, r3, r1
  htim->State = HAL_TIM_STATE_BUSY;
 800471a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800471e:	eba3 0e00 	sub.w	lr, r3, r0
  tmpcr1 = TIMx->CR1;
 8004722:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004724:	fab1 f181 	clz	r1, r1
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004728:	69a7      	ldr	r7, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800472a:	fabe fe8e 	clz	lr, lr

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800472e:	6865      	ldr	r5, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004730:	ea4f 1151 	mov.w	r1, r1, lsr #5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004734:	68e6      	ldr	r6, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004736:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800473a:	d020      	beq.n	800477e <HAL_TIM_Base_Init+0x8a>
 800473c:	b9f9      	cbnz	r1, 800477e <HAL_TIM_Base_Init+0x8a>
 800473e:	f8df c0fc 	ldr.w	ip, [pc, #252]	@ 800483c <HAL_TIM_Base_Init+0x148>
 8004742:	4563      	cmp	r3, ip
 8004744:	d01b      	beq.n	800477e <HAL_TIM_Base_Init+0x8a>
 8004746:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800474a:	4563      	cmp	r3, ip
 800474c:	d017      	beq.n	800477e <HAL_TIM_Base_Init+0x8a>
 800474e:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004752:	4563      	cmp	r3, ip
 8004754:	d013      	beq.n	800477e <HAL_TIM_Base_Init+0x8a>
 8004756:	f1be 0f00 	cmp.w	lr, #0
 800475a:	d110      	bne.n	800477e <HAL_TIM_Base_Init+0x8a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800475c:	4834      	ldr	r0, [pc, #208]	@ (8004830 <HAL_TIM_Base_Init+0x13c>)
 800475e:	4935      	ldr	r1, [pc, #212]	@ (8004834 <HAL_TIM_Base_Init+0x140>)
 8004760:	428b      	cmp	r3, r1
 8004762:	bf18      	it	ne
 8004764:	4283      	cmpne	r3, r0
 8004766:	d051      	beq.n	800480c <HAL_TIM_Base_Init+0x118>
 8004768:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800476c:	428b      	cmp	r3, r1
 800476e:	d04d      	beq.n	800480c <HAL_TIM_Base_Init+0x118>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004770:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004774:	433a      	orrs	r2, r7
  TIMx->CR1 = tmpcr1;
 8004776:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004778:	62de      	str	r6, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800477a:	629d      	str	r5, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800477c:	e01d      	b.n	80047ba <HAL_TIM_Base_Init+0xc6>
    tmpcr1 |= Structure->CounterMode;
 800477e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004780:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004784:	4302      	orrs	r2, r0
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004786:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004788:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800478c:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800478e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004792:	433a      	orrs	r2, r7
  TIMx->CR1 = tmpcr1;
 8004794:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004796:	62de      	str	r6, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004798:	629d      	str	r5, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800479a:	b961      	cbnz	r1, 80047b6 <HAL_TIM_Base_Init+0xc2>
 800479c:	f1be 0f00 	cmp.w	lr, #0
 80047a0:	d109      	bne.n	80047b6 <HAL_TIM_Base_Init+0xc2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047a2:	4925      	ldr	r1, [pc, #148]	@ (8004838 <HAL_TIM_Base_Init+0x144>)
 80047a4:	4a22      	ldr	r2, [pc, #136]	@ (8004830 <HAL_TIM_Base_Init+0x13c>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047a6:	4293      	cmp	r3, r2
 80047a8:	bf18      	it	ne
 80047aa:	428b      	cmpne	r3, r1
 80047ac:	d003      	beq.n	80047b6 <HAL_TIM_Base_Init+0xc2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d101      	bne.n	80047ba <HAL_TIM_Base_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047b6:	6962      	ldr	r2, [r4, #20]
 80047b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047ba:	2201      	movs	r2, #1
 80047bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	07d2      	lsls	r2, r2, #31
 80047c2:	d503      	bpl.n	80047cc <HAL_TIM_Base_Init+0xd8>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	f022 0201 	bic.w	r2, r2, #1
 80047ca:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047cc:	2301      	movs	r3, #1
  return HAL_OK;
 80047ce:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d0:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80047d8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80047dc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80047e0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80047e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ec:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80047f0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80047f4:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80047f8:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80047fc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8004800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8004802:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004806:	f7fc fa77 	bl	8000cf8 <HAL_TIM_Base_MspInit>
 800480a:	e77e      	b.n	800470a <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800480c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800480e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004812:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004814:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004818:	433a      	orrs	r2, r7
  TIMx->CR1 = tmpcr1;
 800481a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800481c:	62de      	str	r6, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800481e:	629d      	str	r5, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004820:	e7bf      	b.n	80047a2 <HAL_TIM_Base_Init+0xae>
    return HAL_ERROR;
 8004822:	2001      	movs	r0, #1
}
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40010000 	.word	0x40010000
 800482c:	40010400 	.word	0x40010400
 8004830:	40014000 	.word	0x40014000
 8004834:	40014400 	.word	0x40014400
 8004838:	40014800 	.word	0x40014800
 800483c:	40000400 	.word	0x40000400

08004840 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004840:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004844:	2b01      	cmp	r3, #1
 8004846:	d04b      	beq.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004848:	6803      	ldr	r3, [r0, #0]
 800484a:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800484c:	2002      	movs	r0, #2
{
 800484e:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004850:	4d24      	ldr	r5, [pc, #144]	@ (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004852:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004856:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8004858:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800485a:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800485c:	d029      	beq.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800485e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004862:	42ab      	cmp	r3, r5
 8004864:	d025      	beq.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004866:	4d20      	ldr	r5, [pc, #128]	@ (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8004868:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800486c:	42ab      	cmp	r3, r5
 800486e:	bf18      	it	ne
 8004870:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 8004874:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004878:	bf0c      	ite	eq
 800487a:	f04f 0c01 	moveq.w	ip, #1
 800487e:	f04f 0c00 	movne.w	ip, #0
 8004882:	42ab      	cmp	r3, r5
 8004884:	bf08      	it	eq
 8004886:	f04c 0c01 	orreq.w	ip, ip, #1
 800488a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800488e:	42ab      	cmp	r3, r5
 8004890:	bf08      	it	eq
 8004892:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004896:	680d      	ldr	r5, [r1, #0]
 8004898:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800489a:	4d14      	ldr	r5, [pc, #80]	@ (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 800489c:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800489e:	42ab      	cmp	r3, r5
 80048a0:	bf14      	ite	ne
 80048a2:	4660      	movne	r0, ip
 80048a4:	f04c 0001 	orreq.w	r0, ip, #1
 80048a8:	b960      	cbnz	r0, 80048c4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80048aa:	4811      	ldr	r0, [pc, #68]	@ (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80048ac:	4283      	cmp	r3, r0
 80048ae:	d009      	beq.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80048b0:	e00d      	b.n	80048ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048b2:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048b4:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048b8:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048ba:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80048bc:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048c0:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 80048c2:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048c4:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048c6:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ca:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048cc:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80048ce:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80048d0:	2101      	movs	r1, #1

  return HAL_OK;
 80048d2:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80048d4:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80048d8:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 80048dc:	bc30      	pop	{r4, r5}
 80048de:	4770      	bx	lr
  __HAL_LOCK(htim);
 80048e0:	2002      	movs	r0, #2
}
 80048e2:	4770      	bx	lr
 80048e4:	40010000 	.word	0x40010000
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40001800 	.word	0x40001800
 80048f0:	40014000 	.word	0x40014000

080048f4 <UART_SetConfig>:
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048f4:	6901      	ldr	r1, [r0, #16]
 80048f6:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80048f8:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048fa:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048fc:	49a2      	ldr	r1, [pc, #648]	@ (8004b88 <UART_SetConfig+0x294>)
{
 80048fe:	b570      	push	{r4, r5, r6, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004900:	6945      	ldr	r5, [r0, #20]
{
 8004902:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004904:	69c0      	ldr	r0, [r0, #28]
{
 8004906:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004908:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800490a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800490c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800490e:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004910:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004912:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004914:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004916:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800491e:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004920:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004922:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004924:	4a99      	ldr	r2, [pc, #612]	@ (8004b8c <UART_SetConfig+0x298>)
 8004926:	4293      	cmp	r3, r2
 8004928:	f000 8118 	beq.w	8004b5c <UART_SetConfig+0x268>
    tmpreg |= huart->Init.OneBitSampling;
 800492c:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800492e:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8004930:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004932:	4a97      	ldr	r2, [pc, #604]	@ (8004b90 <UART_SetConfig+0x29c>)
 8004934:	4032      	ands	r2, r6
 8004936:	4311      	orrs	r1, r2
 8004938:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800493a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800493c:	f022 020f 	bic.w	r2, r2, #15
 8004940:	432a      	orrs	r2, r5
 8004942:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004944:	4a93      	ldr	r2, [pc, #588]	@ (8004b94 <UART_SetConfig+0x2a0>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d028      	beq.n	800499c <UART_SetConfig+0xa8>
 800494a:	4a93      	ldr	r2, [pc, #588]	@ (8004b98 <UART_SetConfig+0x2a4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d01a      	beq.n	8004986 <UART_SetConfig+0x92>
 8004950:	4a92      	ldr	r2, [pc, #584]	@ (8004b9c <UART_SetConfig+0x2a8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d017      	beq.n	8004986 <UART_SetConfig+0x92>
 8004956:	4a92      	ldr	r2, [pc, #584]	@ (8004ba0 <UART_SetConfig+0x2ac>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d014      	beq.n	8004986 <UART_SetConfig+0x92>
 800495c:	4a91      	ldr	r2, [pc, #580]	@ (8004ba4 <UART_SetConfig+0x2b0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d011      	beq.n	8004986 <UART_SetConfig+0x92>
 8004962:	4a91      	ldr	r2, [pc, #580]	@ (8004ba8 <UART_SetConfig+0x2b4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d019      	beq.n	800499c <UART_SetConfig+0xa8>
 8004968:	4a90      	ldr	r2, [pc, #576]	@ (8004bac <UART_SetConfig+0x2b8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00b      	beq.n	8004986 <UART_SetConfig+0x92>
 800496e:	4a90      	ldr	r2, [pc, #576]	@ (8004bb0 <UART_SetConfig+0x2bc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d008      	beq.n	8004986 <UART_SetConfig+0x92>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 8004974:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004976:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8004978:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->RxISR = NULL;
 800497c:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800497e:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8004980:	67a3      	str	r3, [r4, #120]	@ 0x78

  return ret;
}
 8004982:	b006      	add	sp, #24
 8004984:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004986:	4b8b      	ldr	r3, [pc, #556]	@ (8004bb4 <UART_SetConfig+0x2c0>)
 8004988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	2b05      	cmp	r3, #5
 8004990:	d8f0      	bhi.n	8004974 <UART_SetConfig+0x80>
 8004992:	e8df f003 	tbb	[pc, r3]
 8004996:	5f9d      	.short	0x5f9d
 8004998:	977e7169 	.word	0x977e7169
 800499c:	4b85      	ldr	r3, [pc, #532]	@ (8004bb4 <UART_SetConfig+0x2c0>)
 800499e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049a4:	2b28      	cmp	r3, #40	@ 0x28
 80049a6:	d8e5      	bhi.n	8004974 <UART_SetConfig+0x80>
 80049a8:	a201      	add	r2, pc, #4	@ (adr r2, 80049b0 <UART_SetConfig+0xbc>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	08004b2b 	.word	0x08004b2b
 80049b4:	08004975 	.word	0x08004975
 80049b8:	08004975 	.word	0x08004975
 80049bc:	08004975 	.word	0x08004975
 80049c0:	08004975 	.word	0x08004975
 80049c4:	08004975 	.word	0x08004975
 80049c8:	08004975 	.word	0x08004975
 80049cc:	08004975 	.word	0x08004975
 80049d0:	08004a55 	.word	0x08004a55
 80049d4:	08004975 	.word	0x08004975
 80049d8:	08004975 	.word	0x08004975
 80049dc:	08004975 	.word	0x08004975
 80049e0:	08004975 	.word	0x08004975
 80049e4:	08004975 	.word	0x08004975
 80049e8:	08004975 	.word	0x08004975
 80049ec:	08004975 	.word	0x08004975
 80049f0:	08004a69 	.word	0x08004a69
 80049f4:	08004975 	.word	0x08004975
 80049f8:	08004975 	.word	0x08004975
 80049fc:	08004975 	.word	0x08004975
 8004a00:	08004975 	.word	0x08004975
 8004a04:	08004975 	.word	0x08004975
 8004a08:	08004975 	.word	0x08004975
 8004a0c:	08004975 	.word	0x08004975
 8004a10:	08004a79 	.word	0x08004a79
 8004a14:	08004975 	.word	0x08004975
 8004a18:	08004975 	.word	0x08004975
 8004a1c:	08004975 	.word	0x08004975
 8004a20:	08004975 	.word	0x08004975
 8004a24:	08004975 	.word	0x08004975
 8004a28:	08004975 	.word	0x08004975
 8004a2c:	08004975 	.word	0x08004975
 8004a30:	08004a93 	.word	0x08004a93
 8004a34:	08004975 	.word	0x08004975
 8004a38:	08004975 	.word	0x08004975
 8004a3c:	08004975 	.word	0x08004975
 8004a40:	08004975 	.word	0x08004975
 8004a44:	08004975 	.word	0x08004975
 8004a48:	08004975 	.word	0x08004975
 8004a4c:	08004975 	.word	0x08004975
 8004a50:	08004ac5 	.word	0x08004ac5
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a54:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004a58:	d040      	beq.n	8004adc <UART_SetConfig+0x1e8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a5a:	4668      	mov	r0, sp
 8004a5c:	f7ff fab4 	bl	8003fc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a60:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8004a62:	b368      	cbz	r0, 8004ac0 <UART_SetConfig+0x1cc>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a64:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8004a66:	e018      	b.n	8004a9a <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a68:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004a6c:	d06e      	beq.n	8004b4c <UART_SetConfig+0x258>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a6e:	a803      	add	r0, sp, #12
 8004a70:	f7ff fb44 	bl	80040fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a74:	9804      	ldr	r0, [sp, #16]
        break;
 8004a76:	e7f4      	b.n	8004a62 <UART_SetConfig+0x16e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a78:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004a7c:	d05b      	beq.n	8004b36 <UART_SetConfig+0x242>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a7e:	4b4d      	ldr	r3, [pc, #308]	@ (8004bb4 <UART_SetConfig+0x2c0>)
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	0692      	lsls	r2, r2, #26
 8004a84:	d54c      	bpl.n	8004b20 <UART_SetConfig+0x22c>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	484b      	ldr	r0, [pc, #300]	@ (8004bb8 <UART_SetConfig+0x2c4>)
 8004a8a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004a8e:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8004a90:	e003      	b.n	8004a9a <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a92:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) CSI_VALUE;
 8004a96:	4849      	ldr	r0, [pc, #292]	@ (8004bbc <UART_SetConfig+0x2c8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a98:	d027      	beq.n	8004aea <UART_SetConfig+0x1f6>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a9a:	4a49      	ldr	r2, [pc, #292]	@ (8004bc0 <UART_SetConfig+0x2cc>)
 8004a9c:	6863      	ldr	r3, [r4, #4]
 8004a9e:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aa2:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004aa6:	fbb0 f0f1 	udiv	r0, r0, r1
 8004aaa:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004aae:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab2:	f1a0 0310 	sub.w	r3, r0, #16
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	f63f af5c 	bhi.w	8004974 <UART_SetConfig+0x80>
          huart->Instance->BRR = usartdiv;
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	60d8      	str	r0, [r3, #12]
          pclk = (uint32_t) HSI_VALUE;
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	e758      	b.n	8004976 <UART_SetConfig+0x82>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ac4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004ac8:	d00f      	beq.n	8004aea <UART_SetConfig+0x1f6>
        pclk = (uint32_t) LSE_VALUE;
 8004aca:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004ace:	e7e4      	b.n	8004a9a <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ad0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004ad4:	d026      	beq.n	8004b24 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ad6:	f7fe f997 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
        break;
 8004ada:	e7c2      	b.n	8004a62 <UART_SetConfig+0x16e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004adc:	4668      	mov	r0, sp
 8004ade:	f7ff fa73 	bl	8003fc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ae2:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	d0eb      	beq.n	8004ac0 <UART_SetConfig+0x1cc>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ae8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8004aea:	4b35      	ldr	r3, [pc, #212]	@ (8004bc0 <UART_SetConfig+0x2cc>)
 8004aec:	6862      	ldr	r2, [r4, #4]
 8004aee:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8004af2:	0853      	lsrs	r3, r2, #1
 8004af4:	fbb0 f0f1 	udiv	r0, r0, r1
 8004af8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004afc:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b00:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b04:	f1a3 0210 	sub.w	r2, r3, #16
 8004b08:	428a      	cmp	r2, r1
 8004b0a:	f63f af33 	bhi.w	8004974 <UART_SetConfig+0x80>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b0e:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b12:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8004b16:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b18:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60cb      	str	r3, [r1, #12]
 8004b1e:	e7cf      	b.n	8004ac0 <UART_SetConfig+0x1cc>
          pclk = (uint32_t) HSI_VALUE;
 8004b20:	4825      	ldr	r0, [pc, #148]	@ (8004bb8 <UART_SetConfig+0x2c4>)
 8004b22:	e7ba      	b.n	8004a9a <UART_SetConfig+0x1a6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b24:	f7fe f970 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
        break;
 8004b28:	e7dc      	b.n	8004ae4 <UART_SetConfig+0x1f0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b2a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004b2e:	d012      	beq.n	8004b56 <UART_SetConfig+0x262>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b30:	f7fe f9b2 	bl	8002e98 <HAL_RCC_GetPCLK2Freq>
        break;
 8004b34:	e795      	b.n	8004a62 <UART_SetConfig+0x16e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b36:	4b1f      	ldr	r3, [pc, #124]	@ (8004bb4 <UART_SetConfig+0x2c0>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	0691      	lsls	r1, r2, #26
 8004b3c:	f140 808a 	bpl.w	8004c54 <UART_SetConfig+0x360>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	481d      	ldr	r0, [pc, #116]	@ (8004bb8 <UART_SetConfig+0x2c4>)
 8004b44:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004b48:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8004b4a:	e7ce      	b.n	8004aea <UART_SetConfig+0x1f6>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b4c:	a803      	add	r0, sp, #12
 8004b4e:	f7ff fad5 	bl	80040fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b52:	9804      	ldr	r0, [sp, #16]
        break;
 8004b54:	e7c6      	b.n	8004ae4 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b56:	f7fe f99f 	bl	8002e98 <HAL_RCC_GetPCLK2Freq>
        break;
 8004b5a:	e7c3      	b.n	8004ae4 <UART_SetConfig+0x1f0>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b5c:	6898      	ldr	r0, [r3, #8]
 8004b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8004b90 <UART_SetConfig+0x29c>)
 8004b60:	4002      	ands	r2, r0
 8004b62:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b64:	4913      	ldr	r1, [pc, #76]	@ (8004bb4 <UART_SetConfig+0x2c0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b66:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b6a:	f022 020f 	bic.w	r2, r2, #15
 8004b6e:	432a      	orrs	r2, r5
 8004b70:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b72:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	2b05      	cmp	r3, #5
 8004b7a:	f63f aefb 	bhi.w	8004974 <UART_SetConfig+0x80>
 8004b7e:	e8df f003 	tbb	[pc, r3]
 8004b82:	565b      	.short	0x565b
 8004b84:	5e61214d 	.word	0x5e61214d
 8004b88:	cfff69f3 	.word	0xcfff69f3
 8004b8c:	58000c00 	.word	0x58000c00
 8004b90:	11fff4ff 	.word	0x11fff4ff
 8004b94:	40011000 	.word	0x40011000
 8004b98:	40004400 	.word	0x40004400
 8004b9c:	40004800 	.word	0x40004800
 8004ba0:	40004c00 	.word	0x40004c00
 8004ba4:	40005000 	.word	0x40005000
 8004ba8:	40011400 	.word	0x40011400
 8004bac:	40007800 	.word	0x40007800
 8004bb0:	40007c00 	.word	0x40007c00
 8004bb4:	58024400 	.word	0x58024400
 8004bb8:	03d09000 	.word	0x03d09000
 8004bbc:	003d0900 	.word	0x003d0900
 8004bc0:	080051a8 	.word	0x080051a8
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bc4:	4b24      	ldr	r3, [pc, #144]	@ (8004c58 <UART_SetConfig+0x364>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	0690      	lsls	r0, r2, #26
 8004bca:	d43d      	bmi.n	8004c48 <UART_SetConfig+0x354>
          pclk = (uint32_t) HSI_VALUE;
 8004bcc:	4823      	ldr	r0, [pc, #140]	@ (8004c5c <UART_SetConfig+0x368>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bce:	4b24      	ldr	r3, [pc, #144]	@ (8004c60 <UART_SetConfig+0x36c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bd0:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bd2:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bd6:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bda:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bde:	4299      	cmp	r1, r3
 8004be0:	f63f aec8 	bhi.w	8004974 <UART_SetConfig+0x80>
 8004be4:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8004be8:	f63f aec4 	bhi.w	8004974 <UART_SetConfig+0x80>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bec:	2300      	movs	r3, #0
 8004bee:	4619      	mov	r1, r3
 8004bf0:	f7fb fb72 	bl	80002d8 <__aeabi_uldivmod>
 8004bf4:	4632      	mov	r2, r6
 8004bf6:	0209      	lsls	r1, r1, #8
 8004bf8:	0203      	lsls	r3, r0, #8
 8004bfa:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8004bfe:	0870      	lsrs	r0, r6, #1
 8004c00:	1818      	adds	r0, r3, r0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	f141 0100 	adc.w	r1, r1, #0
 8004c0a:	f7fb fb65 	bl	80002d8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c0e:	4b15      	ldr	r3, [pc, #84]	@ (8004c64 <UART_SetConfig+0x370>)
 8004c10:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8004c14:	429a      	cmp	r2, r3
 8004c16:	f63f aead 	bhi.w	8004974 <UART_SetConfig+0x80>
 8004c1a:	e74f      	b.n	8004abc <UART_SetConfig+0x1c8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c1c:	a803      	add	r0, sp, #12
 8004c1e:	f7ff fa6d 	bl	80040fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c22:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8004c24:	2800      	cmp	r0, #0
 8004c26:	f43f af4b 	beq.w	8004ac0 <UART_SetConfig+0x1cc>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c2a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8004c2c:	e7cf      	b.n	8004bce <UART_SetConfig+0x2da>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c2e:	4668      	mov	r0, sp
 8004c30:	f7ff f9ca 	bl	8003fc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c34:	9801      	ldr	r0, [sp, #4]
        break;
 8004c36:	e7f5      	b.n	8004c24 <UART_SetConfig+0x330>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004c38:	f7ff f9b4 	bl	8003fa4 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8004c3c:	e7f2      	b.n	8004c24 <UART_SetConfig+0x330>
        pclk = (uint32_t) LSE_VALUE;
 8004c3e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004c42:	e7c4      	b.n	8004bce <UART_SetConfig+0x2da>
        pclk = (uint32_t) CSI_VALUE;
 8004c44:	4808      	ldr	r0, [pc, #32]	@ (8004c68 <UART_SetConfig+0x374>)
 8004c46:	e7c2      	b.n	8004bce <UART_SetConfig+0x2da>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4804      	ldr	r0, [pc, #16]	@ (8004c5c <UART_SetConfig+0x368>)
 8004c4c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004c50:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8004c52:	e7bc      	b.n	8004bce <UART_SetConfig+0x2da>
          pclk = (uint32_t) HSI_VALUE;
 8004c54:	4801      	ldr	r0, [pc, #4]	@ (8004c5c <UART_SetConfig+0x368>)
 8004c56:	e748      	b.n	8004aea <UART_SetConfig+0x1f6>
 8004c58:	58024400 	.word	0x58024400
 8004c5c:	03d09000 	.word	0x03d09000
 8004c60:	080051a8 	.word	0x080051a8
 8004c64:	000ffcff 	.word	0x000ffcff
 8004c68:	003d0900 	.word	0x003d0900

08004c6c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c6c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004c6e:	071a      	lsls	r2, r3, #28
{
 8004c70:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c72:	d506      	bpl.n	8004c82 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c74:	6801      	ldr	r1, [r0, #0]
 8004c76:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8004c78:	684a      	ldr	r2, [r1, #4]
 8004c7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c7e:	4322      	orrs	r2, r4
 8004c80:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c82:	07dc      	lsls	r4, r3, #31
 8004c84:	d506      	bpl.n	8004c94 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c86:	6801      	ldr	r1, [r0, #0]
 8004c88:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8004c8a:	684a      	ldr	r2, [r1, #4]
 8004c8c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004c90:	4322      	orrs	r2, r4
 8004c92:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c94:	0799      	lsls	r1, r3, #30
 8004c96:	d506      	bpl.n	8004ca6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c98:	6801      	ldr	r1, [r0, #0]
 8004c9a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8004c9c:	684a      	ldr	r2, [r1, #4]
 8004c9e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004ca2:	4322      	orrs	r2, r4
 8004ca4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ca6:	075a      	lsls	r2, r3, #29
 8004ca8:	d506      	bpl.n	8004cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004caa:	6801      	ldr	r1, [r0, #0]
 8004cac:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8004cae:	684a      	ldr	r2, [r1, #4]
 8004cb0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004cb4:	4322      	orrs	r2, r4
 8004cb6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cb8:	06dc      	lsls	r4, r3, #27
 8004cba:	d506      	bpl.n	8004cca <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cbc:	6801      	ldr	r1, [r0, #0]
 8004cbe:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8004cc0:	688a      	ldr	r2, [r1, #8]
 8004cc2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004cc6:	4322      	orrs	r2, r4
 8004cc8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cca:	0699      	lsls	r1, r3, #26
 8004ccc:	d506      	bpl.n	8004cdc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cce:	6801      	ldr	r1, [r0, #0]
 8004cd0:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8004cd2:	688a      	ldr	r2, [r1, #8]
 8004cd4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cd8:	4322      	orrs	r2, r4
 8004cda:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cdc:	065a      	lsls	r2, r3, #25
 8004cde:	d50a      	bpl.n	8004cf6 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ce0:	6801      	ldr	r1, [r0, #0]
 8004ce2:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004ce4:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ce6:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cea:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8004cee:	ea42 0204 	orr.w	r2, r2, r4
 8004cf2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cf4:	d00b      	beq.n	8004d0e <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cf6:	061b      	lsls	r3, r3, #24
 8004cf8:	d506      	bpl.n	8004d08 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cfa:	6802      	ldr	r2, [r0, #0]
 8004cfc:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8004cfe:	6853      	ldr	r3, [r2, #4]
 8004d00:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004d04:	430b      	orrs	r3, r1
 8004d06:	6053      	str	r3, [r2, #4]
  }
}
 8004d08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d0c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d0e:	684a      	ldr	r2, [r1, #4]
 8004d10:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8004d12:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8004d16:	4322      	orrs	r2, r4
 8004d18:	604a      	str	r2, [r1, #4]
 8004d1a:	e7ec      	b.n	8004cf6 <UART_AdvFeatureConfig+0x8a>

08004d1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d1c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1e:	2300      	movs	r3, #0
{
 8004d20:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d22:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d26:	f7fc f9d3 	bl	80010d0 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d2a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8004d2c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d2e:	6813      	ldr	r3, [r2, #0]
 8004d30:	071b      	lsls	r3, r3, #28
 8004d32:	d40f      	bmi.n	8004d54 <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d34:	6813      	ldr	r3, [r2, #0]
 8004d36:	0759      	lsls	r1, r3, #29
 8004d38:	d431      	bmi.n	8004d9e <UART_CheckIdleState+0x82>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8004d3c:	2220      	movs	r2, #32
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 8004d3e:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8004d40:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004d44:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d48:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d4a:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8004d52:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d54:	69d3      	ldr	r3, [r2, #28]
 8004d56:	0298      	lsls	r0, r3, #10
 8004d58:	d4ec      	bmi.n	8004d34 <UART_CheckIdleState+0x18>
 8004d5a:	e00c      	b.n	8004d76 <UART_CheckIdleState+0x5a>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d5c:	6819      	ldr	r1, [r3, #0]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	0749      	lsls	r1, r1, #29
 8004d62:	d505      	bpl.n	8004d70 <UART_CheckIdleState+0x54>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d64:	69d9      	ldr	r1, [r3, #28]
 8004d66:	0708      	lsls	r0, r1, #28
 8004d68:	d44a      	bmi.n	8004e00 <UART_CheckIdleState+0xe4>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d6a:	69d9      	ldr	r1, [r3, #28]
 8004d6c:	0509      	lsls	r1, r1, #20
 8004d6e:	d475      	bmi.n	8004e5c <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	0298      	lsls	r0, r3, #10
 8004d74:	d4de      	bmi.n	8004d34 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d76:	f7fc f9ab 	bl	80010d0 <HAL_GetTick>
 8004d7a:	1b43      	subs	r3, r0, r5
 8004d7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d80:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d82:	d3eb      	bcc.n	8004d5c <UART_CheckIdleState+0x40>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004d88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	e843 2100 	strex	r1, r2, [r3]
 8004d90:	2900      	cmp	r1, #0
 8004d92:	d1f7      	bne.n	8004d84 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8004d94:	2320      	movs	r3, #32
 8004d96:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8004d9a:	2003      	movs	r0, #3
 8004d9c:	e7d6      	b.n	8004d4c <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9e:	69d3      	ldr	r3, [r2, #28]
 8004da0:	025b      	lsls	r3, r3, #9
 8004da2:	d4ca      	bmi.n	8004d3a <UART_CheckIdleState+0x1e>
 8004da4:	e00d      	b.n	8004dc2 <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	0750      	lsls	r0, r2, #29
 8004daa:	d507      	bpl.n	8004dbc <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dac:	69da      	ldr	r2, [r3, #28]
 8004dae:	0711      	lsls	r1, r2, #28
 8004db0:	f100 8082 	bmi.w	8004eb8 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004db4:	69da      	ldr	r2, [r3, #28]
 8004db6:	0512      	lsls	r2, r2, #20
 8004db8:	f100 80ac 	bmi.w	8004f14 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	025b      	lsls	r3, r3, #9
 8004dc0:	d4bb      	bmi.n	8004d3a <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc2:	f7fc f985 	bl	80010d0 <HAL_GetTick>
 8004dc6:	1b43      	subs	r3, r0, r5
 8004dc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	d3ea      	bcc.n	8004da6 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dd4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	e843 2100 	strex	r1, r2, [r3]
 8004ddc:	2900      	cmp	r1, #0
 8004dde:	d1f7      	bne.n	8004dd0 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de0:	f103 0208 	add.w	r2, r3, #8
 8004de4:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	f103 0008 	add.w	r0, r3, #8
 8004df0:	e840 2100 	strex	r1, r2, [r0]
 8004df4:	2900      	cmp	r1, #0
 8004df6:	d1f3      	bne.n	8004de0 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8004df8:	2320      	movs	r3, #32
 8004dfa:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8004dfe:	e7cc      	b.n	8004d9a <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e00:	2208      	movs	r2, #8
 8004e02:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e08:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	e843 2100 	strex	r1, r2, [r3]
 8004e10:	2900      	cmp	r1, #0
 8004e12:	d1f7      	bne.n	8004e04 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e14:	4856      	ldr	r0, [pc, #344]	@ (8004f70 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e16:	f103 0208 	add.w	r2, r3, #8
 8004e1a:	e852 2f00 	ldrex	r2, [r2]
 8004e1e:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e20:	f103 0508 	add.w	r5, r3, #8
 8004e24:	e845 2100 	strex	r1, r2, [r5]
 8004e28:	2900      	cmp	r1, #0
 8004e2a:	d1f4      	bne.n	8004e16 <UART_CheckIdleState+0xfa>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e2c:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8004e2e:	2a01      	cmp	r2, #1
 8004e30:	d00b      	beq.n	8004e4a <UART_CheckIdleState+0x12e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e32:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004e34:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e36:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004e38:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e3c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8004e40:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e44:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8004e48:	e79c      	b.n	8004d84 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	e843 2100 	strex	r1, r2, [r3]
 8004e56:	2900      	cmp	r1, #0
 8004e58:	d1f7      	bne.n	8004e4a <UART_CheckIdleState+0x12e>
 8004e5a:	e7ea      	b.n	8004e32 <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e60:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e66:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	e843 2100 	strex	r1, r2, [r3]
 8004e6e:	2900      	cmp	r1, #0
 8004e70:	d1f7      	bne.n	8004e62 <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e72:	483f      	ldr	r0, [pc, #252]	@ (8004f70 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	f103 0208 	add.w	r2, r3, #8
 8004e78:	e852 2f00 	ldrex	r2, [r2]
 8004e7c:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	f103 0508 	add.w	r5, r3, #8
 8004e82:	e845 2100 	strex	r1, r2, [r5]
 8004e86:	2900      	cmp	r1, #0
 8004e88:	d1f4      	bne.n	8004e74 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e8a:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8004e8c:	2a01      	cmp	r2, #1
 8004e8e:	d00a      	beq.n	8004ea6 <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e90:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004e92:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8004e94:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004e96:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8004e9a:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ea0:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8004ea4:	e76e      	b.n	8004d84 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eaa:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	e843 2100 	strex	r1, r2, [r3]
 8004eb2:	2900      	cmp	r1, #0
 8004eb4:	d1f7      	bne.n	8004ea6 <UART_CheckIdleState+0x18a>
 8004eb6:	e7eb      	b.n	8004e90 <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004eb8:	2208      	movs	r2, #8
 8004eba:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ec0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	e843 2100 	strex	r1, r2, [r3]
 8004ec8:	2900      	cmp	r1, #0
 8004eca:	d1f7      	bne.n	8004ebc <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ecc:	4828      	ldr	r0, [pc, #160]	@ (8004f70 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	f103 0208 	add.w	r2, r3, #8
 8004ed2:	e852 2f00 	ldrex	r2, [r2]
 8004ed6:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	f103 0508 	add.w	r5, r3, #8
 8004edc:	e845 2100 	strex	r1, r2, [r5]
 8004ee0:	2900      	cmp	r1, #0
 8004ee2:	d1f4      	bne.n	8004ece <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee4:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8004ee6:	2a01      	cmp	r2, #1
 8004ee8:	d00b      	beq.n	8004f02 <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eea:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004eec:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004eee:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004ef0:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8004ef4:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef6:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8004ef8:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004efc:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8004f00:	e766      	b.n	8004dd0 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f06:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	e843 2100 	strex	r1, r2, [r3]
 8004f0e:	2900      	cmp	r1, #0
 8004f10:	d1f7      	bne.n	8004f02 <UART_CheckIdleState+0x1e6>
 8004f12:	e7ea      	b.n	8004eea <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f18:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f1e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	e843 2100 	strex	r1, r2, [r3]
 8004f26:	2900      	cmp	r1, #0
 8004f28:	d1f7      	bne.n	8004f1a <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f2a:	4811      	ldr	r0, [pc, #68]	@ (8004f70 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	f103 0208 	add.w	r2, r3, #8
 8004f30:	e852 2f00 	ldrex	r2, [r2]
 8004f34:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f36:	f103 0508 	add.w	r5, r3, #8
 8004f3a:	e845 2100 	strex	r1, r2, [r5]
 8004f3e:	2900      	cmp	r1, #0
 8004f40:	d1f4      	bne.n	8004f2c <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f42:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8004f44:	2a01      	cmp	r2, #1
 8004f46:	d00a      	beq.n	8004f5e <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f48:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004f4a:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8004f4c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004f4e:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8004f52:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f56:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f58:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8004f5c:	e738      	b.n	8004dd0 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f62:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f66:	e843 2100 	strex	r1, r2, [r3]
 8004f6a:	2900      	cmp	r1, #0
 8004f6c:	d1f7      	bne.n	8004f5e <UART_CheckIdleState+0x242>
 8004f6e:	e7eb      	b.n	8004f48 <UART_CheckIdleState+0x22c>
 8004f70:	effffffe 	.word	0xeffffffe

08004f74 <HAL_UART_Init>:
  if (huart == NULL)
 8004f74:	b380      	cbz	r0, 8004fd8 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004f76:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8004f7a:	b510      	push	{r4, lr}
 8004f7c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004f7e:	b333      	cbz	r3, 8004fce <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8004f80:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004f82:	2324      	movs	r3, #36	@ 0x24
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f84:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 8004f86:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8004f8a:	6813      	ldr	r3, [r2, #0]
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f92:	b9c1      	cbnz	r1, 8004fc6 <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f94:	4620      	mov	r0, r4
 8004f96:	f7ff fcad 	bl	80048f4 <UART_SetConfig>
 8004f9a:	2801      	cmp	r0, #1
 8004f9c:	d011      	beq.n	8004fc2 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f9e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8004fa0:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fa8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fb0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	f042 0201 	orr.w	r2, r2, #1
}
 8004fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8004fbc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004fbe:	f7ff bead 	b.w	8004d1c <UART_CheckIdleState>
}
 8004fc2:	2001      	movs	r0, #1
 8004fc4:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	f7ff fe50 	bl	8004c6c <UART_AdvFeatureConfig>
 8004fcc:	e7e2      	b.n	8004f94 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8004fce:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8004fd2:	f7fb feab 	bl	8000d2c <HAL_UART_MspInit>
 8004fd6:	e7d3      	b.n	8004f80 <HAL_UART_Init+0xc>
}
 8004fd8:	2001      	movs	r0, #1
 8004fda:	4770      	bx	lr

08004fdc <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fdc:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8004fe0:	2a01      	cmp	r2, #1
 8004fe2:	d017      	beq.n	8005014 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fe4:	6802      	ldr	r2, [r0, #0]
 8004fe6:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8004fe8:	2024      	movs	r0, #36	@ 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004fea:	2100      	movs	r1, #0
{
 8004fec:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 8004fee:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8004ff2:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ff4:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004ff6:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004ff8:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8004ffc:	f024 0401 	bic.w	r4, r4, #1
 8005000:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005002:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005004:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8005006:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005008:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800500c:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8005010:	bc30      	pop	{r4, r5}
 8005012:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005014:	2002      	movs	r0, #2
}
 8005016:	4770      	bx	lr

08005018 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005018:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 800501c:	2a01      	cmp	r2, #1
 800501e:	d037      	beq.n	8005090 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005020:	6802      	ldr	r2, [r0, #0]
 8005022:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8005024:	2024      	movs	r0, #36	@ 0x24
{
 8005026:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8005028:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800502c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800502e:	6810      	ldr	r0, [r2, #0]
 8005030:	f020 0001 	bic.w	r0, r0, #1
 8005034:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005036:	6890      	ldr	r0, [r2, #8]
 8005038:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 800503c:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800503e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005040:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005042:	b310      	cbz	r0, 800508a <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005044:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005046:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005048:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800504c:	4911      	ldr	r1, [pc, #68]	@ (8005094 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800504e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8005052:	4d11      	ldr	r5, [pc, #68]	@ (8005098 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005054:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005058:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800505c:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005060:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8005062:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005066:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005068:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800506c:	fbb1 f1f5 	udiv	r1, r1, r5
 8005070:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 8005074:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8005076:	2100      	movs	r1, #0
 8005078:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800507c:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 800507e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005080:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8005084:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8005088:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800508a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800508c:	4608      	mov	r0, r1
 800508e:	e7ef      	b.n	8005070 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8005090:	2002      	movs	r0, #2
}
 8005092:	4770      	bx	lr
 8005094:	080051c8 	.word	0x080051c8
 8005098:	080051c0 	.word	0x080051c0

0800509c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800509c:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80050a0:	2a01      	cmp	r2, #1
 80050a2:	d037      	beq.n	8005114 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050a4:	6802      	ldr	r2, [r0, #0]
 80050a6:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80050a8:	2024      	movs	r0, #36	@ 0x24
{
 80050aa:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80050ac:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050b0:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80050b2:	6810      	ldr	r0, [r2, #0]
 80050b4:	f020 0001 	bic.w	r0, r0, #1
 80050b8:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80050ba:	6890      	ldr	r0, [r2, #8]
 80050bc:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 80050c0:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80050c2:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80050c4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80050c6:	b310      	cbz	r0, 800510e <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80050c8:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80050ca:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050cc:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050d0:	4911      	ldr	r1, [pc, #68]	@ (8005118 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80050d2:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 80050d6:	4d11      	ldr	r5, [pc, #68]	@ (800511c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050d8:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050dc:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80050e0:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050e4:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 80050e6:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050ea:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050ec:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050f0:	fbb1 f1f5 	udiv	r1, r1, r5
 80050f4:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 80050f8:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 80050fa:	2100      	movs	r1, #0
 80050fc:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005100:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8005102:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005104:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8005108:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 800510c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800510e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8005110:	4608      	mov	r0, r1
 8005112:	e7ef      	b.n	80050f4 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8005114:	2002      	movs	r0, #2
}
 8005116:	4770      	bx	lr
 8005118:	080051c8 	.word	0x080051c8
 800511c:	080051c0 	.word	0x080051c0

08005120 <memset>:
 8005120:	4402      	add	r2, r0
 8005122:	4603      	mov	r3, r0
 8005124:	4293      	cmp	r3, r2
 8005126:	d100      	bne.n	800512a <memset+0xa>
 8005128:	4770      	bx	lr
 800512a:	f803 1b01 	strb.w	r1, [r3], #1
 800512e:	e7f9      	b.n	8005124 <memset+0x4>

08005130 <__libc_init_array>:
 8005130:	b570      	push	{r4, r5, r6, lr}
 8005132:	4d0d      	ldr	r5, [pc, #52]	@ (8005168 <__libc_init_array+0x38>)
 8005134:	4c0d      	ldr	r4, [pc, #52]	@ (800516c <__libc_init_array+0x3c>)
 8005136:	1b64      	subs	r4, r4, r5
 8005138:	10a4      	asrs	r4, r4, #2
 800513a:	2600      	movs	r6, #0
 800513c:	42a6      	cmp	r6, r4
 800513e:	d109      	bne.n	8005154 <__libc_init_array+0x24>
 8005140:	4d0b      	ldr	r5, [pc, #44]	@ (8005170 <__libc_init_array+0x40>)
 8005142:	4c0c      	ldr	r4, [pc, #48]	@ (8005174 <__libc_init_array+0x44>)
 8005144:	f000 f818 	bl	8005178 <_init>
 8005148:	1b64      	subs	r4, r4, r5
 800514a:	10a4      	asrs	r4, r4, #2
 800514c:	2600      	movs	r6, #0
 800514e:	42a6      	cmp	r6, r4
 8005150:	d105      	bne.n	800515e <__libc_init_array+0x2e>
 8005152:	bd70      	pop	{r4, r5, r6, pc}
 8005154:	f855 3b04 	ldr.w	r3, [r5], #4
 8005158:	4798      	blx	r3
 800515a:	3601      	adds	r6, #1
 800515c:	e7ee      	b.n	800513c <__libc_init_array+0xc>
 800515e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005162:	4798      	blx	r3
 8005164:	3601      	adds	r6, #1
 8005166:	e7f2      	b.n	800514e <__libc_init_array+0x1e>
 8005168:	080051d8 	.word	0x080051d8
 800516c:	080051d8 	.word	0x080051d8
 8005170:	080051d8 	.word	0x080051d8
 8005174:	080051dc 	.word	0x080051dc

08005178 <_init>:
 8005178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517a:	bf00      	nop
 800517c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517e:	bc08      	pop	{r3}
 8005180:	469e      	mov	lr, r3
 8005182:	4770      	bx	lr

08005184 <_fini>:
 8005184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005186:	bf00      	nop
 8005188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518a:	bc08      	pop	{r3}
 800518c:	469e      	mov	lr, r3
 800518e:	4770      	bx	lr
