
DMA_first.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000964c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080098e4  080098e4  0000a8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009924  08009924  0000a924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800992c  0800992c  0000a92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009930  08009930  0000a930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08009934  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a24  24000010  08009944  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000a34  08009944  0000ba34  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ad55  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e8f  00000000  00000000  00025d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014f0  00000000  00000000  00028c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001056  00000000  00000000  0002a118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003906f  00000000  00000000  0002b16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c564  00000000  00000000  000641dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00176ca1  00000000  00000000  00080741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f73e2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005a1c  00000000  00000000  001f7428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007c  00000000  00000000  001fce44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080098cc 	.word	0x080098cc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080098cc 	.word	0x080098cc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADC_custom_init>:
 *      Author: yehan
 */
#include "Custom_ADC.h"


void ADC_custom_init(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0


//	ADC3->CR &= ~ADC_CR_ADSTART;
	ADC3->SQR1=0; // per azzerare la configurazione dell'ide
 80005cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <ADC_custom_init+0xbc>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere
 80005d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000684 <ADC_custom_init+0xbc>)
 80005d4:	4a2b      	ldr	r2, [pc, #172]	@ (8000684 <ADC_custom_init+0xbc>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_SQ1_Pos);
 80005da:	4b2a      	ldr	r3, [pc, #168]	@ (8000684 <ADC_custom_init+0xbc>)
 80005dc:	4a29      	ldr	r2, [pc, #164]	@ (8000684 <ADC_custom_init+0xbc>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->PCSEL |= ADC_PCSEL_PCSEL_0; // Dichiaro quali canali leggere : 18 e 19
 80005e2:	4b28      	ldr	r3, [pc, #160]	@ (8000684 <ADC_custom_init+0xbc>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a27      	ldr	r2, [pc, #156]	@ (8000684 <ADC_custom_init+0xbc>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	61d3      	str	r3, [r2, #28]
//	ADC3->CR &= ~ADC_CR_DEEPPWD;
//	ADC3->CR |= ADC_CR_ADVREGEN;
//	while((ADC3->ISR & ADC_ISR_LDORDY) != 1){}

	/* Calibrazione */
	ADC3->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 80005ee:	4b25      	ldr	r3, [pc, #148]	@ (8000684 <ADC_custom_init+0xbc>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	4a24      	ldr	r2, [pc, #144]	@ (8000684 <ADC_custom_init+0xbc>)
 80005f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80005f8:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 80005fa:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <ADC_custom_init+0xbc>)
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	4a21      	ldr	r2, [pc, #132]	@ (8000684 <ADC_custom_init+0xbc>)
 8000600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000604:	6093      	str	r3, [r2, #8]
	ADC3->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 8000606:	4b1f      	ldr	r3, [pc, #124]	@ (8000684 <ADC_custom_init+0xbc>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	4a1e      	ldr	r2, [pc, #120]	@ (8000684 <ADC_custom_init+0xbc>)
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 8000612:	4b1c      	ldr	r3, [pc, #112]	@ (8000684 <ADC_custom_init+0xbc>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	4a1b      	ldr	r2, [pc, #108]	@ (8000684 <ADC_custom_init+0xbc>)
 8000618:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800061c:	6093      	str	r3, [r2, #8]


	while((ADC3->CR & ADC_CR_ADCAL) != 0){};
 800061e:	bf00      	nop
 8000620:	4b18      	ldr	r3, [pc, #96]	@ (8000684 <ADC_custom_init+0xbc>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	2b00      	cmp	r3, #0
 8000626:	dbfb      	blt.n	8000620 <ADC_custom_init+0x58>
	// FIne calibrazione

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000628:	4b16      	ldr	r3, [pc, #88]	@ (8000684 <ADC_custom_init+0xbc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a15      	ldr	r2, [pc, #84]	@ (8000684 <ADC_custom_init+0xbc>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]
	ADC3->CR |= ADC_CR_ADEN;		// Accendo l' ADC
 8000634:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <ADC_custom_init+0xbc>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	4a12      	ldr	r2, [pc, #72]	@ (8000684 <ADC_custom_init+0xbc>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6093      	str	r3, [r2, #8]

	while((ADC3->ISR & ADC_ISR_ADRDY) != 0){}
 8000640:	bf00      	nop
 8000642:	4b10      	ldr	r3, [pc, #64]	@ (8000684 <ADC_custom_init+0xbc>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f9      	bne.n	8000642 <ADC_custom_init+0x7a>

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 800064e:	4b0d      	ldr	r3, [pc, #52]	@ (8000684 <ADC_custom_init+0xbc>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a0c      	ldr	r2, [pc, #48]	@ (8000684 <ADC_custom_init+0xbc>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6013      	str	r3, [r2, #0]
	// Fine accensione

	/* ADR ACCESO */

	TIM6->PSC = 48;
 800065a:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <ADC_custom_init+0xc0>)
 800065c:	2230      	movs	r2, #48	@ 0x30
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 10;
 8000660:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <ADC_custom_init+0xc0>)
 8000662:	220a      	movs	r2, #10
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CNT = 0;
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <ADC_custom_init+0xc0>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->DIER &= ~TIM_DIER_UIE;
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <ADC_custom_init+0xc0>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	4a05      	ldr	r2, [pc, #20]	@ (8000688 <ADC_custom_init+0xc0>)
 8000672:	f023 0301 	bic.w	r3, r3, #1
 8000676:	60d3      	str	r3, [r2, #12]
//	ADC3->CR  |= ADC_CR_ADSTART;
//	TIM6->CR1 |= TIM_CR1_CEN;

	//ADC3->IER |= ADC_IER_EOCIE;					// Abilito l'interrupt di fine conversione
	//ADC3->CR  |= ADC_CR_ADSTART;				// Inizio le misurazioni
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	58026000 	.word	0x58026000
 8000688:	40001000 	.word	0x40001000

0800068c <DMA_custom_init>:
#include "Custom_dma.h"


uint16_t DMA_data_buffer[1000];

void DMA_custom_init(){
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

	DMA2_Stream0->M0AR = (uint32_t) (&DMA_data_buffer);	// inidico l'indirizzo dello storarge di dati
 8000690:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <DMA_custom_init+0x28>)
 8000692:	4a09      	ldr	r2, [pc, #36]	@ (80006b8 <DMA_custom_init+0x2c>)
 8000694:	60da      	str	r2, [r3, #12]
	DMA2_Stream1->M0AR = (uint32_t) (&DMA_data_buffer);
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <DMA_custom_init+0x30>)
 8000698:	4a07      	ldr	r2, [pc, #28]	@ (80006b8 <DMA_custom_init+0x2c>)
 800069a:	60da      	str	r2, [r3, #12]

	DMA2_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
 800069c:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <DMA_custom_init+0x28>)
 800069e:	4a08      	ldr	r2, [pc, #32]	@ (80006c0 <DMA_custom_init+0x34>)
 80006a0:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->PAR = (uint32_t) (&USART3->TDR);
 80006a2:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <DMA_custom_init+0x30>)
 80006a4:	4a07      	ldr	r2, [pc, #28]	@ (80006c4 <DMA_custom_init+0x38>)
 80006a6:	609a      	str	r2, [r3, #8]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40020410 	.word	0x40020410
 80006b8:	2400002c 	.word	0x2400002c
 80006bc:	40020428 	.word	0x40020428
 80006c0:	58026040 	.word	0x58026040
 80006c4:	40004828 	.word	0x40004828

080006c8 <DMA_start>:

void DMA_start(){
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0

	uint32_t n_misure = 1000;
 80006ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d2:	607b      	str	r3, [r7, #4]

	DMA2_Stream0->NDTR = n_misure;			// numero elementi da prendere da ADC3
 80006d4:	4a18      	ldr	r2, [pc, #96]	@ (8000738 <DMA_start+0x70>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6053      	str	r3, [r2, #4]
	DMA2_Stream1->NDTR = n_misure*2;			// numero elementi da mandare a USART3
 80006da:	4a18      	ldr	r2, [pc, #96]	@ (800073c <DMA_start+0x74>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	6053      	str	r3, [r2, #4]

	DMA2_Stream0->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine ricezione
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <DMA_start+0x70>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a14      	ldr	r2, [pc, #80]	@ (8000738 <DMA_start+0x70>)
 80006e8:	f043 0310 	orr.w	r3, r3, #16
 80006ec:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine trasmissione
 80006ee:	4b13      	ldr	r3, [pc, #76]	@ (800073c <DMA_start+0x74>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a12      	ldr	r2, [pc, #72]	@ (800073c <DMA_start+0x74>)
 80006f4:	f043 0310 	orr.w	r3, r3, #16
 80006f8:	6013      	str	r3, [r2, #0]


	ADC3->CR  |= ADC_CR_ADSTART;
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <DMA_start+0x78>)
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	4a10      	ldr	r2, [pc, #64]	@ (8000740 <DMA_start+0x78>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6093      	str	r3, [r2, #8]

	ADC3->CFGR |= (1 << ADC_CFGR_DMNGT_Pos);	// DMA in single shot mode
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <DMA_start+0x78>)
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	4a0d      	ldr	r2, [pc, #52]	@ (8000740 <DMA_start+0x78>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	60d3      	str	r3, [r2, #12]

	DMA2_Stream0->CR |= DMA_SxCR_EN;
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <DMA_start+0x70>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a08      	ldr	r2, [pc, #32]	@ (8000738 <DMA_start+0x70>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_EN;
 800071e:	4b07      	ldr	r3, [pc, #28]	@ (800073c <DMA_start+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a06      	ldr	r2, [pc, #24]	@ (800073c <DMA_start+0x74>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6013      	str	r3, [r2, #0]
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40020410 	.word	0x40020410
 800073c:	40020428 	.word	0x40020428
 8000740:	58026000 	.word	0x58026000

08000744 <DMA_custom_interrupt_tx>:


void DMA_custom_interrupt_tx(){
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <DMA_custom_interrupt_tx+0x50>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	4a11      	ldr	r2, [pc, #68]	@ (8000794 <DMA_custom_interrupt_tx+0x50>)
 800074e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000752:	6093      	str	r3, [r2, #8]

	DMA2->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 8000754:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <DMA_custom_interrupt_tx+0x54>)
 8000756:	f04f 32ff 	mov.w	r2, #4294967295
 800075a:	609a      	str	r2, [r3, #8]
	DMA2->HIFCR = 0xffffffff;
 800075c:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <DMA_custom_interrupt_tx+0x54>)
 800075e:	f04f 32ff 	mov.w	r2, #4294967295
 8000762:	60da      	str	r2, [r3, #12]

	ADC3->CFGR |= (1 << ADC_CFGR_DMNGT_Pos); // ACCENDO la ricezione di dati dall'adc
 8000764:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <DMA_custom_interrupt_tx+0x58>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	4a0c      	ldr	r2, [pc, #48]	@ (800079c <DMA_custom_interrupt_tx+0x58>)
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	60d3      	str	r3, [r2, #12]

	DMA2_Stream0->CR |= DMA_SxCR_EN;
 8000770:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <DMA_custom_interrupt_tx+0x5c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a0a      	ldr	r2, [pc, #40]	@ (80007a0 <DMA_custom_interrupt_tx+0x5c>)
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_EN;
 800077c:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <DMA_custom_interrupt_tx+0x60>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a08      	ldr	r2, [pc, #32]	@ (80007a4 <DMA_custom_interrupt_tx+0x60>)
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	6013      	str	r3, [r2, #0]

}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40004800 	.word	0x40004800
 8000798:	40020400 	.word	0x40020400
 800079c:	58026000 	.word	0x58026000
 80007a0:	40020410 	.word	0x40020410
 80007a4:	40020428 	.word	0x40020428

080007a8 <DMA_custom_interrupt_rx>:


/**
 * @brief interrupt di ricezione di n dati dall'adc
 */
void DMA_custom_interrupt_rx(){
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

	ADC3->CFGR &= ~(1 << ADC_CFGR_DMNGT_Pos); // SPENGO la ricezione di dati dall'adc
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <DMA_custom_interrupt_rx+0x50>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	4a11      	ldr	r2, [pc, #68]	@ (80007f8 <DMA_custom_interrupt_rx+0x50>)
 80007b2:	f023 0301 	bic.w	r3, r3, #1
 80007b6:	60d3      	str	r3, [r2, #12]

	DMA2->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 80007b8:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <DMA_custom_interrupt_rx+0x54>)
 80007ba:	f04f 32ff 	mov.w	r2, #4294967295
 80007be:	609a      	str	r2, [r3, #8]
	DMA2->HIFCR = 0xffffffff;
 80007c0:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <DMA_custom_interrupt_rx+0x54>)
 80007c2:	f04f 32ff 	mov.w	r2, #4294967295
 80007c6:	60da      	str	r2, [r3, #12]

	USART3->CR3 |= USART_CR3_DMAT;			  // ATTVIO trasmissione usart
 80007c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <DMA_custom_interrupt_rx+0x58>)
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000800 <DMA_custom_interrupt_rx+0x58>)
 80007ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d2:	6093      	str	r3, [r2, #8]

	DMA2_Stream0->CR |= DMA_SxCR_EN;
 80007d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <DMA_custom_interrupt_rx+0x5c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000804 <DMA_custom_interrupt_rx+0x5c>)
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_EN;
 80007e0:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <DMA_custom_interrupt_rx+0x60>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a08      	ldr	r2, [pc, #32]	@ (8000808 <DMA_custom_interrupt_rx+0x60>)
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	58026000 	.word	0x58026000
 80007fc:	40020400 	.word	0x40020400
 8000800:	40004800 	.word	0x40004800
 8000804:	40020410 	.word	0x40020410
 8000808:	40020428 	.word	0x40020428

0800080c <usart3_init>:
 */

#include "Custom_usart.h"
#include <stdint.h>

void usart3_init(){
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

    USART3->CR1 |= USART_CR1_TE;
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <usart3_init+0x4c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a10      	ldr	r2, [pc, #64]	@ (8000858 <usart3_init+0x4c>)
 8000816:	f043 0308 	orr.w	r3, r3, #8
 800081a:	6013      	str	r3, [r2, #0]
    USART3->CR1 |= USART_CR1_RE;
 800081c:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <usart3_init+0x4c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0d      	ldr	r2, [pc, #52]	@ (8000858 <usart3_init+0x4c>)
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	6013      	str	r3, [r2, #0]

    USART3->CR1 &= ~USART_CR1_TXEIE;
 8000828:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <usart3_init+0x4c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a0a      	ldr	r2, [pc, #40]	@ (8000858 <usart3_init+0x4c>)
 800082e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000832:	6013      	str	r3, [r2, #0]
    USART3->CR1 |= USART_CR1_RXNEIE;
 8000834:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <usart3_init+0x4c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a07      	ldr	r2, [pc, #28]	@ (8000858 <usart3_init+0x4c>)
 800083a:	f043 0320 	orr.w	r3, r3, #32
 800083e:	6013      	str	r3, [r2, #0]

    USART3->CR1 |= USART_CR1_UE;
 8000840:	4b05      	ldr	r3, [pc, #20]	@ (8000858 <usart3_init+0x4c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a04      	ldr	r2, [pc, #16]	@ (8000858 <usart3_init+0x4c>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	6013      	str	r3, [r2, #0]

}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40004800 	.word	0x40004800

0800085c <usart3_custom_interrupt>:

void usart3_custom_interrupt(){
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0

	char data = USART3->RDR;
 8000862:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <usart3_custom_interrupt+0x5c>)
 8000864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000866:	71fb      	strb	r3, [r7, #7]
	if(data == '?'){
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b3f      	cmp	r3, #63	@ 0x3f
 800086c:	d105      	bne.n	800087a <usart3_custom_interrupt+0x1e>

		TIM6->CR1 |= TIM_CR1_CEN;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <usart3_custom_interrupt+0x60>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a12      	ldr	r2, [pc, #72]	@ (80008bc <usart3_custom_interrupt+0x60>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6013      	str	r3, [r2, #0]

	}

	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 800087a:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <usart3_custom_interrupt+0x5c>)
 800087c:	6a1b      	ldr	r3, [r3, #32]
 800087e:	4a0e      	ldr	r2, [pc, #56]	@ (80008b8 <usart3_custom_interrupt+0x5c>)
 8000880:	f043 0308 	orr.w	r3, r3, #8
 8000884:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF;  //Azzeramento flag interrupt trasmissione
 8000886:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <usart3_custom_interrupt+0x5c>)
 8000888:	6a1b      	ldr	r3, [r3, #32]
 800088a:	4a0b      	ldr	r2, [pc, #44]	@ (80008b8 <usart3_custom_interrupt+0x5c>)
 800088c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000890:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <usart3_custom_interrupt+0x5c>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	4a08      	ldr	r2, [pc, #32]	@ (80008b8 <usart3_custom_interrupt+0x5c>)
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	6193      	str	r3, [r2, #24]

	USART3->CR1 &= ~USART_CR1_RXNEIE;
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <usart3_custom_interrupt+0x5c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a05      	ldr	r2, [pc, #20]	@ (80008b8 <usart3_custom_interrupt+0x5c>)
 80008a4:	f023 0320 	bic.w	r3, r3, #32
 80008a8:	6013      	str	r3, [r2, #0]
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40004800 	.word	0x40004800
 80008bc:	40001000 	.word	0x40001000

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c4:	f000 fd9e 	bl	8001404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c8:	f000 f814 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008cc:	f000 f9da 	bl	8000c84 <MX_GPIO_Init>
  MX_DMA_Init();
 80008d0:	f000 f9b0 	bl	8000c34 <MX_DMA_Init>
  MX_ADC3_Init();
 80008d4:	f000 f8bc 	bl	8000a50 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 80008d8:	f000 f960 	bl	8000b9c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80008dc:	f000 f928 	bl	8000b30 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  usart3_init();
 80008e0:	f7ff ff94 	bl	800080c <usart3_init>

  ADC_custom_init();
 80008e4:	f7ff fe70 	bl	80005c8 <ADC_custom_init>

  DMA_custom_init();
 80008e8:	f7ff fed0 	bl	800068c <DMA_custom_init>
  DMA_start();
 80008ec:	f7ff feec 	bl	80006c8 <DMA_start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <main+0x30>

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b09e      	sub	sp, #120	@ 0x78
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008fe:	224c      	movs	r2, #76	@ 0x4c
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f008 ffb6 	bl	8009874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2220      	movs	r2, #32
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f008 ffaf 	bl	8009874 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000916:	2002      	movs	r0, #2
 8000918:	f004 f826 	bl	8004968 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	4b48      	ldr	r3, [pc, #288]	@ (8000a44 <SystemClock_Config+0x150>)
 8000922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000924:	4a47      	ldr	r2, [pc, #284]	@ (8000a44 <SystemClock_Config+0x150>)
 8000926:	f023 0301 	bic.w	r3, r3, #1
 800092a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800092c:	4b45      	ldr	r3, [pc, #276]	@ (8000a44 <SystemClock_Config+0x150>)
 800092e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	4b44      	ldr	r3, [pc, #272]	@ (8000a48 <SystemClock_Config+0x154>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	4a43      	ldr	r2, [pc, #268]	@ (8000a48 <SystemClock_Config+0x154>)
 800093c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000940:	6193      	str	r3, [r2, #24]
 8000942:	4b41      	ldr	r3, [pc, #260]	@ (8000a48 <SystemClock_Config+0x154>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800094e:	bf00      	nop
 8000950:	4b3d      	ldr	r3, [pc, #244]	@ (8000a48 <SystemClock_Config+0x154>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800095c:	d1f8      	bne.n	8000950 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a4c <SystemClock_Config+0x158>)
 8000960:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000964:	4a39      	ldr	r2, [pc, #228]	@ (8000a4c <SystemClock_Config+0x158>)
 8000966:	f043 0302 	orr.w	r3, r3, #2
 800096a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800096e:	4b37      	ldr	r3, [pc, #220]	@ (8000a4c <SystemClock_Config+0x158>)
 8000970:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000974:	f003 0302 	and.w	r3, r3, #2
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800097c:	2300      	movs	r3, #0
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	4b31      	ldr	r3, [pc, #196]	@ (8000a48 <SystemClock_Config+0x154>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a30      	ldr	r2, [pc, #192]	@ (8000a48 <SystemClock_Config+0x154>)
 8000986:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a48 <SystemClock_Config+0x154>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b2b      	ldr	r3, [pc, #172]	@ (8000a44 <SystemClock_Config+0x150>)
 8000998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800099a:	4a2a      	ldr	r2, [pc, #168]	@ (8000a44 <SystemClock_Config+0x150>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009a2:	4b28      	ldr	r3, [pc, #160]	@ (8000a44 <SystemClock_Config+0x150>)
 80009a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009ae:	bf00      	nop
 80009b0:	4b25      	ldr	r3, [pc, #148]	@ (8000a48 <SystemClock_Config+0x154>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009bc:	d1f8      	bne.n	80009b0 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009be:	2301      	movs	r3, #1
 80009c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009c2:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80009c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c8:	2302      	movs	r3, #2
 80009ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009cc:	2302      	movs	r3, #2
 80009ce:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 80009d4:	2378      	movs	r3, #120	@ 0x78
 80009d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009d8:	2302      	movs	r3, #2
 80009da:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009dc:	2304      	movs	r3, #4
 80009de:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009e4:	230c      	movs	r3, #12
 80009e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 fff1 	bl	80049dc <HAL_RCC_OscConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000a00:	f000 fa70 	bl	8000ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a04:	233f      	movs	r3, #63	@ 0x3f
 8000a06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a10:	2308      	movs	r3, #8
 8000a12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a14:	2340      	movs	r3, #64	@ 0x40
 8000a16:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a18:	2340      	movs	r3, #64	@ 0x40
 8000a1a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a22:	2340      	movs	r3, #64	@ 0x40
 8000a24:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f004 fc2f 	bl	8005290 <HAL_RCC_ClockConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000a38:	f000 fa54 	bl	8000ee4 <Error_Handler>
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	3778      	adds	r7, #120	@ 0x78
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	58000400 	.word	0x58000400
 8000a48:	58024800 	.word	0x58024800
 8000a4c:	58024400 	.word	0x58024400

08000a50 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
 8000a64:	615a      	str	r2, [r3, #20]
 8000a66:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a68:	4b2f      	ldr	r3, [pc, #188]	@ (8000b28 <MX_ADC3_Init+0xd8>)
 8000a6a:	4a30      	ldr	r2, [pc, #192]	@ (8000b2c <MX_ADC3_Init+0xdc>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000b28 <MX_ADC3_Init+0xd8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a74:	4b2c      	ldr	r3, [pc, #176]	@ (8000b28 <MX_ADC3_Init+0xd8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b28 <MX_ADC3_Init+0xd8>)
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a80:	4b29      	ldr	r3, [pc, #164]	@ (8000b28 <MX_ADC3_Init+0xd8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a86:	4b28      	ldr	r3, [pc, #160]	@ (8000b28 <MX_ADC3_Init+0xd8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000a8c:	4b26      	ldr	r3, [pc, #152]	@ (8000b28 <MX_ADC3_Init+0xd8>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a92:	4b25      	ldr	r3, [pc, #148]	@ (8000b28 <MX_ADC3_Init+0xd8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000a98:	4b23      	ldr	r3, [pc, #140]	@ (8000b28 <MX_ADC3_Init+0xd8>)
 8000a9a:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000a9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000aa0:	4b21      	ldr	r3, [pc, #132]	@ (8000b28 <MX_ADC3_Init+0xd8>)
 8000aa2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <MX_ADC3_Init+0xd8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aae:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <MX_ADC3_Init+0xd8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <MX_ADC3_Init+0xd8>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <MX_ADC3_Init+0xd8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <MX_ADC3_Init+0xd8>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ac8:	4817      	ldr	r0, [pc, #92]	@ (8000b28 <MX_ADC3_Init+0xd8>)
 8000aca:	f000 ff1d 	bl	8001908 <HAL_ADC_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000ad4:	f000 fa06 	bl	8000ee4 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000ad8:	4b13      	ldr	r3, [pc, #76]	@ (8000b28 <MX_ADC3_Init+0xd8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ade:	4812      	ldr	r0, [pc, #72]	@ (8000b28 <MX_ADC3_Init+0xd8>)
 8000ae0:	f000 ff12 	bl	8001908 <HAL_ADC_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000aea:	f000 f9fb 	bl	8000ee4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000aee:	2301      	movs	r3, #1
 8000af0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af2:	2306      	movs	r3, #6
 8000af4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000afa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000afe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b00:	2304      	movs	r3, #4
 8000b02:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <MX_ADC3_Init+0xd8>)
 8000b12:	f001 faf3 	bl	80020fc <HAL_ADC_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000b1c:	f000 f9e2 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	3720      	adds	r7, #32
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	240007fc 	.word	0x240007fc
 8000b2c:	58026000 	.word	0x58026000

08000b30 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b40:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <MX_TIM6_Init+0x64>)
 8000b42:	4a15      	ldr	r2, [pc, #84]	@ (8000b98 <MX_TIM6_Init+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8000b46:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <MX_TIM6_Init+0x64>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <MX_TIM6_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000b52:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <MX_TIM6_Init+0x64>)
 8000b54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b58:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <MX_TIM6_Init+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b60:	480c      	ldr	r0, [pc, #48]	@ (8000b94 <MX_TIM6_Init+0x64>)
 8000b62:	f007 fc1f 	bl	80083a4 <HAL_TIM_Base_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b6c:	f000 f9ba 	bl	8000ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b70:	2320      	movs	r3, #32
 8000b72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <MX_TIM6_Init+0x64>)
 8000b7e:	f007 fd0f 	bl	80085a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000b88:	f000 f9ac 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	240008d8 	.word	0x240008d8
 8000b98:	40001000 	.word	0x40001000

08000b9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ba0:	4b22      	ldr	r3, [pc, #136]	@ (8000c2c <MX_USART3_UART_Init+0x90>)
 8000ba2:	4a23      	ldr	r2, [pc, #140]	@ (8000c30 <MX_USART3_UART_Init+0x94>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000ba6:	4b21      	ldr	r3, [pc, #132]	@ (8000c2c <MX_USART3_UART_Init+0x90>)
 8000ba8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000bac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b1f      	ldr	r3, [pc, #124]	@ (8000c2c <MX_USART3_UART_Init+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c2c <MX_USART3_UART_Init+0x90>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <MX_USART3_UART_Init+0x90>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <MX_USART3_UART_Init+0x90>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	@ (8000c2c <MX_USART3_UART_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <MX_USART3_UART_Init+0x90>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd2:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <MX_USART3_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <MX_USART3_UART_Init+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bde:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <MX_USART3_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000be4:	4811      	ldr	r0, [pc, #68]	@ (8000c2c <MX_USART3_UART_Init+0x90>)
 8000be6:	f007 fd69 	bl	80086bc <HAL_UART_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bf0:	f000 f978 	bl	8000ee4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	480d      	ldr	r0, [pc, #52]	@ (8000c2c <MX_USART3_UART_Init+0x90>)
 8000bf8:	f008 fd71 	bl	80096de <HAL_UARTEx_SetTxFifoThreshold>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c02:	f000 f96f 	bl	8000ee4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c06:	2100      	movs	r1, #0
 8000c08:	4808      	ldr	r0, [pc, #32]	@ (8000c2c <MX_USART3_UART_Init+0x90>)
 8000c0a:	f008 fda6 	bl	800975a <HAL_UARTEx_SetRxFifoThreshold>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c14:	f000 f966 	bl	8000ee4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c18:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <MX_USART3_UART_Init+0x90>)
 8000c1a:	f008 fd27 	bl	800966c <HAL_UARTEx_DisableFifoMode>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c24:	f000 f95e 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	24000924 	.word	0x24000924
 8000c30:	40004800 	.word	0x40004800

08000c34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_DMA_Init+0x4c>)
 8000c3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c40:	4a0f      	ldr	r2, [pc, #60]	@ (8000c80 <MX_DMA_Init+0x4c>)
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <MX_DMA_Init+0x4c>)
 8000c4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2038      	movs	r0, #56	@ 0x38
 8000c5e:	f001 ffc2 	bl	8002be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c62:	2038      	movs	r0, #56	@ 0x38
 8000c64:	f001 ffd9 	bl	8002c1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2039      	movs	r0, #57	@ 0x39
 8000c6e:	f001 ffba 	bl	8002be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c72:	2039      	movs	r0, #57	@ 0x39
 8000c74:	f001 ffd1 	bl	8002c1a <HAL_NVIC_EnableIRQ>

}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	58024400 	.word	0x58024400

08000c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	@ 0x30
 8000c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	4b8b      	ldr	r3, [pc, #556]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca0:	4a89      	ldr	r2, [pc, #548]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000caa:	4b87      	ldr	r3, [pc, #540]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
 8000cb6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb8:	4b83      	ldr	r3, [pc, #524]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbe:	4a82      	ldr	r2, [pc, #520]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc8:	4b7f      	ldr	r3, [pc, #508]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b7c      	ldr	r3, [pc, #496]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cdc:	4a7a      	ldr	r2, [pc, #488]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce6:	4b78      	ldr	r3, [pc, #480]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf4:	4b74      	ldr	r3, [pc, #464]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfa:	4a73      	ldr	r2, [pc, #460]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d04:	4b70      	ldr	r3, [pc, #448]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d12:	4b6d      	ldr	r3, [pc, #436]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d18:	4a6b      	ldr	r2, [pc, #428]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000d1a:	f043 0308 	orr.w	r3, r3, #8
 8000d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d22:	4b69      	ldr	r3, [pc, #420]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d28:	f003 0308 	and.w	r3, r3, #8
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d30:	4b65      	ldr	r3, [pc, #404]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d36:	4a64      	ldr	r2, [pc, #400]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000d38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d40:	4b61      	ldr	r3, [pc, #388]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d4e:	4b5e      	ldr	r3, [pc, #376]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d54:	4a5c      	ldr	r2, [pc, #368]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000d56:	f043 0310 	orr.w	r3, r3, #16
 8000d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d5e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ec8 <MX_GPIO_Init+0x244>)
 8000d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d64:	f003 0310 	and.w	r3, r3, #16
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000d72:	4856      	ldr	r0, [pc, #344]	@ (8000ecc <MX_GPIO_Init+0x248>)
 8000d74:	f003 fdde 	bl	8004934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d7e:	4854      	ldr	r0, [pc, #336]	@ (8000ed0 <MX_GPIO_Init+0x24c>)
 8000d80:	f003 fdd8 	bl	8004934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2102      	movs	r1, #2
 8000d88:	4852      	ldr	r0, [pc, #328]	@ (8000ed4 <MX_GPIO_Init+0x250>)
 8000d8a:	f003 fdd3 	bl	8004934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4619      	mov	r1, r3
 8000da2:	484d      	ldr	r0, [pc, #308]	@ (8000ed8 <MX_GPIO_Init+0x254>)
 8000da4:	f003 fc16 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000da8:	2332      	movs	r3, #50	@ 0x32
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db8:	230b      	movs	r3, #11
 8000dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4845      	ldr	r0, [pc, #276]	@ (8000ed8 <MX_GPIO_Init+0x254>)
 8000dc4:	f003 fc06 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000dc8:	2386      	movs	r3, #134	@ 0x86
 8000dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd8:	230b      	movs	r3, #11
 8000dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	4619      	mov	r1, r3
 8000de2:	483e      	ldr	r0, [pc, #248]	@ (8000edc <MX_GPIO_Init+0x258>)
 8000de4:	f003 fbf6 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000de8:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4832      	ldr	r0, [pc, #200]	@ (8000ecc <MX_GPIO_Init+0x248>)
 8000e02:	f003 fbe7 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e18:	230b      	movs	r3, #11
 8000e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	482a      	ldr	r0, [pc, #168]	@ (8000ecc <MX_GPIO_Init+0x248>)
 8000e24:	f003 fbd6 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000e28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4823      	ldr	r0, [pc, #140]	@ (8000ed0 <MX_GPIO_Init+0x24c>)
 8000e42:	f003 fbc7 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000e46:	2380      	movs	r3, #128	@ 0x80
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4821      	ldr	r0, [pc, #132]	@ (8000ee0 <MX_GPIO_Init+0x25c>)
 8000e5c:	f003 fbba 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e60:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e72:	230a      	movs	r3, #10
 8000e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4817      	ldr	r0, [pc, #92]	@ (8000edc <MX_GPIO_Init+0x258>)
 8000e7e:	f003 fba9 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e82:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e94:	230b      	movs	r3, #11
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4810      	ldr	r0, [pc, #64]	@ (8000ee0 <MX_GPIO_Init+0x25c>)
 8000ea0:	f003 fb98 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4806      	ldr	r0, [pc, #24]	@ (8000ed4 <MX_GPIO_Init+0x250>)
 8000ebc:	f003 fb8a 	bl	80045d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ec0:	bf00      	nop
 8000ec2:	3730      	adds	r7, #48	@ 0x30
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	58024400 	.word	0x58024400
 8000ecc:	58020400 	.word	0x58020400
 8000ed0:	58020c00 	.word	0x58020c00
 8000ed4:	58021000 	.word	0x58021000
 8000ed8:	58020800 	.word	0x58020800
 8000edc:	58020000 	.word	0x58020000
 8000ee0:	58021800 	.word	0x58021800

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <Error_Handler+0x8>

08000ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <HAL_MspInit+0x30>)
 8000ef8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000efc:	4a08      	ldr	r2, [pc, #32]	@ (8000f20 <HAL_MspInit+0x30>)
 8000efe:	f043 0302 	orr.w	r3, r3, #2
 8000f02:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_MspInit+0x30>)
 8000f08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	58024400 	.word	0x58024400

08000f24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b0b4      	sub	sp, #208	@ 0xd0
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	22c0      	movs	r2, #192	@ 0xc0
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f008 fc9d 	bl	8009874 <memset>
  if(hadc->Instance==ADC3)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a42      	ldr	r2, [pc, #264]	@ (8001048 <HAL_ADC_MspInit+0x124>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d17d      	bne.n	8001040 <HAL_ADC_MspInit+0x11c>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f44:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 20;
 8000f54:	2314      	movs	r3, #20
 8000f56:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f60:	2302      	movs	r3, #2
 8000f62:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f64:	23c0      	movs	r3, #192	@ 0xc0
 8000f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000f68:	2320      	movs	r3, #32
 8000f6a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f004 fd14 	bl	80059a8 <HAL_RCCEx_PeriphCLKConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8000f86:	f7ff ffad 	bl	8000ee4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f8a:	4b30      	ldr	r3, [pc, #192]	@ (800104c <HAL_ADC_MspInit+0x128>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f90:	4a2e      	ldr	r2, [pc, #184]	@ (800104c <HAL_ADC_MspInit+0x128>)
 8000f92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f9a:	4b2c      	ldr	r3, [pc, #176]	@ (800104c <HAL_ADC_MspInit+0x128>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa8:	4b28      	ldr	r3, [pc, #160]	@ (800104c <HAL_ADC_MspInit+0x128>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fae:	4a27      	ldr	r2, [pc, #156]	@ (800104c <HAL_ADC_MspInit+0x128>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb8:	4b24      	ldr	r3, [pc, #144]	@ (800104c <HAL_ADC_MspInit+0x128>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000fc6:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8000fca:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000fce:	f000 fab7 	bl	8001540 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001050 <HAL_ADC_MspInit+0x12c>)
 8000fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8001054 <HAL_ADC_MspInit+0x130>)
 8000fd6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <HAL_ADC_MspInit+0x12c>)
 8000fda:	2273      	movs	r2, #115	@ 0x73
 8000fdc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fde:	4b1c      	ldr	r3, [pc, #112]	@ (8001050 <HAL_ADC_MspInit+0x12c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <HAL_ADC_MspInit+0x12c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000fea:	4b19      	ldr	r3, [pc, #100]	@ (8001050 <HAL_ADC_MspInit+0x12c>)
 8000fec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ff0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ff2:	4b17      	ldr	r3, [pc, #92]	@ (8001050 <HAL_ADC_MspInit+0x12c>)
 8000ff4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ff8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <HAL_ADC_MspInit+0x12c>)
 8000ffc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001000:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001002:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <HAL_ADC_MspInit+0x12c>)
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001008:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <HAL_ADC_MspInit+0x12c>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800100e:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <HAL_ADC_MspInit+0x12c>)
 8001010:	2200      	movs	r2, #0
 8001012:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001014:	480e      	ldr	r0, [pc, #56]	@ (8001050 <HAL_ADC_MspInit+0x12c>)
 8001016:	f001 fe1b 	bl	8002c50 <HAL_DMA_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001020:	f7ff ff60 	bl	8000ee4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <HAL_ADC_MspInit+0x12c>)
 8001028:	64da      	str	r2, [r3, #76]	@ 0x4c
 800102a:	4a09      	ldr	r2, [pc, #36]	@ (8001050 <HAL_ADC_MspInit+0x12c>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	207f      	movs	r0, #127	@ 0x7f
 8001036:	f001 fdd6 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800103a:	207f      	movs	r0, #127	@ 0x7f
 800103c:	f001 fded 	bl	8002c1a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8001040:	bf00      	nop
 8001042:	37d0      	adds	r7, #208	@ 0xd0
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	58026000 	.word	0x58026000
 800104c:	58024400 	.word	0x58024400
 8001050:	24000860 	.word	0x24000860
 8001054:	40020410 	.word	0x40020410

08001058 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0b      	ldr	r2, [pc, #44]	@ (8001094 <HAL_TIM_Base_MspInit+0x3c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10e      	bne.n	8001088 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800106a:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <HAL_TIM_Base_MspInit+0x40>)
 800106c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001070:	4a09      	ldr	r2, [pc, #36]	@ (8001098 <HAL_TIM_Base_MspInit+0x40>)
 8001072:	f043 0310 	orr.w	r3, r3, #16
 8001076:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <HAL_TIM_Base_MspInit+0x40>)
 800107c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001080:	f003 0310 	and.w	r3, r3, #16
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	40001000 	.word	0x40001000
 8001098:	58024400 	.word	0x58024400

0800109c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b0ba      	sub	sp, #232	@ 0xe8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	22c0      	movs	r2, #192	@ 0xc0
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f008 fbd9 	bl	8009874 <memset>
  if(huart->Instance==USART3)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a41      	ldr	r2, [pc, #260]	@ (80011cc <HAL_UART_MspInit+0x130>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d17b      	bne.n	80011c4 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010cc:	f04f 0202 	mov.w	r2, #2
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	4618      	mov	r0, r3
 80010e4:	f004 fc60 	bl	80059a8 <HAL_RCCEx_PeriphCLKConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010ee:	f7ff fef9 	bl	8000ee4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010f2:	4b37      	ldr	r3, [pc, #220]	@ (80011d0 <HAL_UART_MspInit+0x134>)
 80010f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010f8:	4a35      	ldr	r2, [pc, #212]	@ (80011d0 <HAL_UART_MspInit+0x134>)
 80010fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001102:	4b33      	ldr	r3, [pc, #204]	@ (80011d0 <HAL_UART_MspInit+0x134>)
 8001104:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001108:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001110:	4b2f      	ldr	r3, [pc, #188]	@ (80011d0 <HAL_UART_MspInit+0x134>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001116:	4a2e      	ldr	r2, [pc, #184]	@ (80011d0 <HAL_UART_MspInit+0x134>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001120:	4b2b      	ldr	r3, [pc, #172]	@ (80011d0 <HAL_UART_MspInit+0x134>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800112e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001132:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001148:	2307      	movs	r3, #7
 800114a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800114e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001152:	4619      	mov	r1, r3
 8001154:	481f      	ldr	r0, [pc, #124]	@ (80011d4 <HAL_UART_MspInit+0x138>)
 8001156:	f003 fa3d 	bl	80045d4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream1;
 800115a:	4b1f      	ldr	r3, [pc, #124]	@ (80011d8 <HAL_UART_MspInit+0x13c>)
 800115c:	4a1f      	ldr	r2, [pc, #124]	@ (80011dc <HAL_UART_MspInit+0x140>)
 800115e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001160:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <HAL_UART_MspInit+0x13c>)
 8001162:	222e      	movs	r2, #46	@ 0x2e
 8001164:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001166:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <HAL_UART_MspInit+0x13c>)
 8001168:	2240      	movs	r2, #64	@ 0x40
 800116a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800116c:	4b1a      	ldr	r3, [pc, #104]	@ (80011d8 <HAL_UART_MspInit+0x13c>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001172:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <HAL_UART_MspInit+0x13c>)
 8001174:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001178:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800117a:	4b17      	ldr	r3, [pc, #92]	@ (80011d8 <HAL_UART_MspInit+0x13c>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001180:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <HAL_UART_MspInit+0x13c>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001186:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <HAL_UART_MspInit+0x13c>)
 8001188:	2200      	movs	r2, #0
 800118a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800118c:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <HAL_UART_MspInit+0x13c>)
 800118e:	2200      	movs	r2, #0
 8001190:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <HAL_UART_MspInit+0x13c>)
 8001194:	2200      	movs	r2, #0
 8001196:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001198:	480f      	ldr	r0, [pc, #60]	@ (80011d8 <HAL_UART_MspInit+0x13c>)
 800119a:	f001 fd59 	bl	8002c50 <HAL_DMA_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80011a4:	f7ff fe9e 	bl	8000ee4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a0b      	ldr	r2, [pc, #44]	@ (80011d8 <HAL_UART_MspInit+0x13c>)
 80011ac:	67da      	str	r2, [r3, #124]	@ 0x7c
 80011ae:	4a0a      	ldr	r2, [pc, #40]	@ (80011d8 <HAL_UART_MspInit+0x13c>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	2027      	movs	r0, #39	@ 0x27
 80011ba:	f001 fd14 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011be:	2027      	movs	r0, #39	@ 0x27
 80011c0:	f001 fd2b 	bl	8002c1a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80011c4:	bf00      	nop
 80011c6:	37e8      	adds	r7, #232	@ 0xe8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40004800 	.word	0x40004800
 80011d0:	58024400 	.word	0x58024400
 80011d4:	58020c00 	.word	0x58020c00
 80011d8:	240009b8 	.word	0x240009b8
 80011dc:	40020428 	.word	0x40020428

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <NMI_Handler+0x4>

080011e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <HardFault_Handler+0x4>

080011f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <MemManage_Handler+0x4>

080011f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <UsageFault_Handler+0x4>

08001208 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001236:	f000 f957 	bl	80014e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}

0800123e <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	usart3_custom_interrupt();
 8001242:	f7ff fb0b 	bl	800085c <usart3_custom_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// ATTIVITA DI FINE RICEZIONE DA ADC
	DMA_custom_interrupt_rx();
 8001250:	f7ff faaa 	bl	80007a8 <DMA_custom_interrupt_rx>

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001254:	4802      	ldr	r0, [pc, #8]	@ (8001260 <DMA2_Stream0_IRQHandler+0x14>)
 8001256:	f002 f857 	bl	8003308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	24000860 	.word	0x24000860

08001264 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	DMA_custom_interrupt_tx();
 8001268:	f7ff fa6c 	bl	8000744 <DMA_custom_interrupt_tx>

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800126c:	4802      	ldr	r0, [pc, #8]	@ (8001278 <DMA2_Stream1_IRQHandler+0x14>)
 800126e:	f002 f84b 	bl	8003308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	240009b8 	.word	0x240009b8

0800127c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	uint16_t a = ADC3->DR;
 8001282:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <ADC3_IRQHandler+0x1c>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	80fb      	strh	r3, [r7, #6]

	if(1){
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001288:	4804      	ldr	r0, [pc, #16]	@ (800129c <ADC3_IRQHandler+0x20>)
 800128a:	f000 fcdf 	bl	8001c4c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}


  /* USER CODE END ADC3_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	58026000 	.word	0x58026000
 800129c:	240007fc 	.word	0x240007fc

080012a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012a4:	4b37      	ldr	r3, [pc, #220]	@ (8001384 <SystemInit+0xe4>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012aa:	4a36      	ldr	r2, [pc, #216]	@ (8001384 <SystemInit+0xe4>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012b4:	4b34      	ldr	r3, [pc, #208]	@ (8001388 <SystemInit+0xe8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 030f 	and.w	r3, r3, #15
 80012bc:	2b06      	cmp	r3, #6
 80012be:	d807      	bhi.n	80012d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012c0:	4b31      	ldr	r3, [pc, #196]	@ (8001388 <SystemInit+0xe8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f023 030f 	bic.w	r3, r3, #15
 80012c8:	4a2f      	ldr	r2, [pc, #188]	@ (8001388 <SystemInit+0xe8>)
 80012ca:	f043 0307 	orr.w	r3, r3, #7
 80012ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012d0:	4b2e      	ldr	r3, [pc, #184]	@ (800138c <SystemInit+0xec>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a2d      	ldr	r2, [pc, #180]	@ (800138c <SystemInit+0xec>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012dc:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <SystemInit+0xec>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012e2:	4b2a      	ldr	r3, [pc, #168]	@ (800138c <SystemInit+0xec>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4929      	ldr	r1, [pc, #164]	@ (800138c <SystemInit+0xec>)
 80012e8:	4b29      	ldr	r3, [pc, #164]	@ (8001390 <SystemInit+0xf0>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012ee:	4b26      	ldr	r3, [pc, #152]	@ (8001388 <SystemInit+0xe8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d007      	beq.n	800130a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012fa:	4b23      	ldr	r3, [pc, #140]	@ (8001388 <SystemInit+0xe8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 030f 	bic.w	r3, r3, #15
 8001302:	4a21      	ldr	r2, [pc, #132]	@ (8001388 <SystemInit+0xe8>)
 8001304:	f043 0307 	orr.w	r3, r3, #7
 8001308:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <SystemInit+0xec>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001310:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <SystemInit+0xec>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001316:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <SystemInit+0xec>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800131c:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <SystemInit+0xec>)
 800131e:	4a1d      	ldr	r2, [pc, #116]	@ (8001394 <SystemInit+0xf4>)
 8001320:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001322:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <SystemInit+0xec>)
 8001324:	4a1c      	ldr	r2, [pc, #112]	@ (8001398 <SystemInit+0xf8>)
 8001326:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001328:	4b18      	ldr	r3, [pc, #96]	@ (800138c <SystemInit+0xec>)
 800132a:	4a1c      	ldr	r2, [pc, #112]	@ (800139c <SystemInit+0xfc>)
 800132c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800132e:	4b17      	ldr	r3, [pc, #92]	@ (800138c <SystemInit+0xec>)
 8001330:	2200      	movs	r2, #0
 8001332:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001334:	4b15      	ldr	r3, [pc, #84]	@ (800138c <SystemInit+0xec>)
 8001336:	4a19      	ldr	r2, [pc, #100]	@ (800139c <SystemInit+0xfc>)
 8001338:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800133a:	4b14      	ldr	r3, [pc, #80]	@ (800138c <SystemInit+0xec>)
 800133c:	2200      	movs	r2, #0
 800133e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001340:	4b12      	ldr	r3, [pc, #72]	@ (800138c <SystemInit+0xec>)
 8001342:	4a16      	ldr	r2, [pc, #88]	@ (800139c <SystemInit+0xfc>)
 8001344:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001346:	4b11      	ldr	r3, [pc, #68]	@ (800138c <SystemInit+0xec>)
 8001348:	2200      	movs	r2, #0
 800134a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800134c:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <SystemInit+0xec>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0e      	ldr	r2, [pc, #56]	@ (800138c <SystemInit+0xec>)
 8001352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001356:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001358:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <SystemInit+0xec>)
 800135a:	2200      	movs	r2, #0
 800135c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <SystemInit+0x100>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <SystemInit+0x104>)
 8001364:	4013      	ands	r3, r2
 8001366:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800136a:	d202      	bcs.n	8001372 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800136c:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <SystemInit+0x108>)
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <SystemInit+0x10c>)
 8001374:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001378:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00
 8001388:	52002000 	.word	0x52002000
 800138c:	58024400 	.word	0x58024400
 8001390:	eaf6ed7f 	.word	0xeaf6ed7f
 8001394:	02020200 	.word	0x02020200
 8001398:	01ff0000 	.word	0x01ff0000
 800139c:	01010280 	.word	0x01010280
 80013a0:	5c001000 	.word	0x5c001000
 80013a4:	ffff0000 	.word	0xffff0000
 80013a8:	51008108 	.word	0x51008108
 80013ac:	52004000 	.word	0x52004000

080013b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013b4:	f7ff ff74 	bl	80012a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b8:	480c      	ldr	r0, [pc, #48]	@ (80013ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ba:	490d      	ldr	r1, [pc, #52]	@ (80013f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013bc:	4a0d      	ldr	r2, [pc, #52]	@ (80013f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d0:	4c0a      	ldr	r4, [pc, #40]	@ (80013fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013de:	f008 fa51 	bl	8009884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e2:	f7ff fa6d 	bl	80008c0 <main>
  bx  lr
 80013e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013f0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80013f4:	08009934 	.word	0x08009934
  ldr r2, =_sbss
 80013f8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80013fc:	24000a34 	.word	0x24000a34

08001400 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC_IRQHandler>
	...

08001404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140a:	2003      	movs	r0, #3
 800140c:	f001 fbe0 	bl	8002bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001410:	f004 f8f4 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 8001414:	4602      	mov	r2, r0
 8001416:	4b15      	ldr	r3, [pc, #84]	@ (800146c <HAL_Init+0x68>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	0a1b      	lsrs	r3, r3, #8
 800141c:	f003 030f 	and.w	r3, r3, #15
 8001420:	4913      	ldr	r1, [pc, #76]	@ (8001470 <HAL_Init+0x6c>)
 8001422:	5ccb      	ldrb	r3, [r1, r3]
 8001424:	f003 031f 	and.w	r3, r3, #31
 8001428:	fa22 f303 	lsr.w	r3, r2, r3
 800142c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800142e:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <HAL_Init+0x68>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	4a0e      	ldr	r2, [pc, #56]	@ (8001470 <HAL_Init+0x6c>)
 8001438:	5cd3      	ldrb	r3, [r2, r3]
 800143a:	f003 031f 	and.w	r3, r3, #31
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	fa22 f303 	lsr.w	r3, r2, r3
 8001444:	4a0b      	ldr	r2, [pc, #44]	@ (8001474 <HAL_Init+0x70>)
 8001446:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001448:	4a0b      	ldr	r2, [pc, #44]	@ (8001478 <HAL_Init+0x74>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800144e:	2000      	movs	r0, #0
 8001450:	f000 f814 	bl	800147c <HAL_InitTick>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e002      	b.n	8001464 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800145e:	f7ff fd47 	bl	8000ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	58024400 	.word	0x58024400
 8001470:	080098e4 	.word	0x080098e4
 8001474:	24000004 	.word	0x24000004
 8001478:	24000000 	.word	0x24000000

0800147c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001484:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <HAL_InitTick+0x60>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e021      	b.n	80014d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001490:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <HAL_InitTick+0x64>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <HAL_InitTick+0x60>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149e:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 fbc5 	bl	8002c36 <HAL_SYSTICK_Config>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00e      	b.n	80014d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b0f      	cmp	r3, #15
 80014ba:	d80a      	bhi.n	80014d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014bc:	2200      	movs	r2, #0
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f001 fb8f 	bl	8002be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c8:	4a06      	ldr	r2, [pc, #24]	@ (80014e4 <HAL_InitTick+0x68>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e000      	b.n	80014d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2400000c 	.word	0x2400000c
 80014e0:	24000000 	.word	0x24000000
 80014e4:	24000008 	.word	0x24000008

080014e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_IncTick+0x20>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_IncTick+0x24>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	4a04      	ldr	r2, [pc, #16]	@ (800150c <HAL_IncTick+0x24>)
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	2400000c 	.word	0x2400000c
 800150c:	24000a30 	.word	0x24000a30

08001510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return uwTick;
 8001514:	4b03      	ldr	r3, [pc, #12]	@ (8001524 <HAL_GetTick+0x14>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	24000a30 	.word	0x24000a30

08001528 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800152c:	4b03      	ldr	r3, [pc, #12]	@ (800153c <HAL_GetREVID+0x14>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	0c1b      	lsrs	r3, r3, #16
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	5c001000 	.word	0x5c001000

08001540 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800154a:	4b07      	ldr	r3, [pc, #28]	@ (8001568 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	43db      	mvns	r3, r3
 8001552:	401a      	ands	r2, r3
 8001554:	4904      	ldr	r1, [pc, #16]	@ (8001568 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	4313      	orrs	r3, r2
 800155a:	604b      	str	r3, [r1, #4]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	58000400 	.word	0x58000400

0800156c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	609a      	str	r2, [r3, #8]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	609a      	str	r2, [r3, #8]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3360      	adds	r3, #96	@ 0x60
 80015e6:	461a      	mov	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	430b      	orrs	r3, r1
 8001602:	431a      	orrs	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001608:	bf00      	nop
 800160a:	371c      	adds	r7, #28
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	f003 031f 	and.w	r3, r3, #31
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	fa01 f303 	lsl.w	r3, r1, r3
 8001634:	431a      	orrs	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	611a      	str	r2, [r3, #16]
}
 800163a:	bf00      	nop
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001646:	b480      	push	{r7}
 8001648:	b087      	sub	sp, #28
 800164a:	af00      	add	r7, sp, #0
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3360      	adds	r3, #96	@ 0x60
 8001656:	461a      	mov	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	431a      	orrs	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	601a      	str	r2, [r3, #0]
  }
}
 8001670:	bf00      	nop
 8001672:	371c      	adds	r7, #28
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b087      	sub	sp, #28
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3330      	adds	r3, #48	@ 0x30
 80016b2:	461a      	mov	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	0a1b      	lsrs	r3, r3, #8
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	4413      	add	r3, r2
 80016c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	211f      	movs	r1, #31
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	401a      	ands	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	0e9b      	lsrs	r3, r3, #26
 80016da:	f003 011f 	and.w	r1, r3, #31
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	f003 031f 	and.w	r3, r3, #31
 80016e4:	fa01 f303 	lsl.w	r3, r1, r3
 80016e8:	431a      	orrs	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016ee:	bf00      	nop
 80016f0:	371c      	adds	r7, #28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001706:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	3314      	adds	r3, #20
 8001730:	461a      	mov	r2, r3
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	0e5b      	lsrs	r3, r3, #25
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	4413      	add	r3, r2
 800173e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	0d1b      	lsrs	r3, r3, #20
 8001748:	f003 031f 	and.w	r3, r3, #31
 800174c:	2107      	movs	r1, #7
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	401a      	ands	r2, r3
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	0d1b      	lsrs	r3, r3, #20
 800175a:	f003 031f 	and.w	r3, r3, #31
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	fa01 f303 	lsl.w	r3, r1, r3
 8001764:	431a      	orrs	r2, r3
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800176a:	bf00      	nop
 800176c:	371c      	adds	r7, #28
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001790:	43db      	mvns	r3, r3
 8001792:	401a      	ands	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0318 	and.w	r3, r3, #24
 800179a:	4908      	ldr	r1, [pc, #32]	@ (80017bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800179c:	40d9      	lsrs	r1, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	400b      	ands	r3, r1
 80017a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017a6:	431a      	orrs	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	000fffff 	.word	0x000fffff

080017c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 031f 	and.w	r3, r3, #31
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001806:	4013      	ands	r3, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6093      	str	r3, [r2, #8]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	5fffffc0 	.word	0x5fffffc0

0800181c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800182c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001830:	d101      	bne.n	8001836 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	4b05      	ldr	r3, [pc, #20]	@ (8001868 <LL_ADC_EnableInternalRegulator+0x24>)
 8001852:	4013      	ands	r3, r2
 8001854:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	6fffffc0 	.word	0x6fffffc0

0800186c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001880:	d101      	bne.n	8001886 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <LL_ADC_IsEnabled+0x18>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <LL_ADC_IsEnabled+0x1a>
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d101      	bne.n	80018d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d101      	bne.n	80018f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b089      	sub	sp, #36	@ 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e18f      	b.n	8001c42 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800192c:	2b00      	cmp	r3, #0
 800192e:	d109      	bne.n	8001944 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff faf7 	bl	8000f24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff67 	bl	800181c <LL_ADC_IsDeepPowerDownEnabled>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d004      	beq.n	800195e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff4d 	bl	80017f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff82 	bl	800186c <LL_ADC_IsInternalRegulatorEnabled>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d114      	bne.n	8001998 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff66 	bl	8001844 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001978:	4b87      	ldr	r3, [pc, #540]	@ (8001b98 <HAL_ADC_Init+0x290>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	099b      	lsrs	r3, r3, #6
 800197e:	4a87      	ldr	r2, [pc, #540]	@ (8001b9c <HAL_ADC_Init+0x294>)
 8001980:	fba2 2303 	umull	r2, r3, r2, r3
 8001984:	099b      	lsrs	r3, r3, #6
 8001986:	3301      	adds	r3, #1
 8001988:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800198a:	e002      	b.n	8001992 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	3b01      	subs	r3, #1
 8001990:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f9      	bne.n	800198c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff65 	bl	800186c <LL_ADC_IsInternalRegulatorEnabled>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10d      	bne.n	80019c4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ac:	f043 0210 	orr.w	r2, r3, #16
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b8:	f043 0201 	orr.w	r2, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff76 	bl	80018ba <LL_ADC_REG_IsConversionOngoing>
 80019ce:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d4:	f003 0310 	and.w	r3, r3, #16
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f040 8129 	bne.w	8001c30 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f040 8125 	bne.w	8001c30 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ea:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019ee:	f043 0202 	orr.w	r2, r3, #2
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff4a 	bl	8001894 <LL_ADC_IsEnabled>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d136      	bne.n	8001a74 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a65      	ldr	r2, [pc, #404]	@ (8001ba0 <HAL_ADC_Init+0x298>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d004      	beq.n	8001a1a <HAL_ADC_Init+0x112>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a63      	ldr	r2, [pc, #396]	@ (8001ba4 <HAL_ADC_Init+0x29c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d10e      	bne.n	8001a38 <HAL_ADC_Init+0x130>
 8001a1a:	4861      	ldr	r0, [pc, #388]	@ (8001ba0 <HAL_ADC_Init+0x298>)
 8001a1c:	f7ff ff3a 	bl	8001894 <LL_ADC_IsEnabled>
 8001a20:	4604      	mov	r4, r0
 8001a22:	4860      	ldr	r0, [pc, #384]	@ (8001ba4 <HAL_ADC_Init+0x29c>)
 8001a24:	f7ff ff36 	bl	8001894 <LL_ADC_IsEnabled>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4323      	orrs	r3, r4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bf0c      	ite	eq
 8001a30:	2301      	moveq	r3, #1
 8001a32:	2300      	movne	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	e008      	b.n	8001a4a <HAL_ADC_Init+0x142>
 8001a38:	485b      	ldr	r0, [pc, #364]	@ (8001ba8 <HAL_ADC_Init+0x2a0>)
 8001a3a:	f7ff ff2b 	bl	8001894 <LL_ADC_IsEnabled>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	bf0c      	ite	eq
 8001a44:	2301      	moveq	r3, #1
 8001a46:	2300      	movne	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d012      	beq.n	8001a74 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a53      	ldr	r2, [pc, #332]	@ (8001ba0 <HAL_ADC_Init+0x298>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d004      	beq.n	8001a62 <HAL_ADC_Init+0x15a>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a51      	ldr	r2, [pc, #324]	@ (8001ba4 <HAL_ADC_Init+0x29c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_Init+0x15e>
 8001a62:	4a52      	ldr	r2, [pc, #328]	@ (8001bac <HAL_ADC_Init+0x2a4>)
 8001a64:	e000      	b.n	8001a68 <HAL_ADC_Init+0x160>
 8001a66:	4a52      	ldr	r2, [pc, #328]	@ (8001bb0 <HAL_ADC_Init+0x2a8>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4610      	mov	r0, r2
 8001a70:	f7ff fd7c 	bl	800156c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001a74:	f7ff fd58 	bl	8001528 <HAL_GetREVID>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d914      	bls.n	8001aac <HAL_ADC_Init+0x1a4>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d110      	bne.n	8001aac <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7d5b      	ldrb	r3, [r3, #21]
 8001a8e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a94:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a9a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7f1b      	ldrb	r3, [r3, #28]
 8001aa0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001aa2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001aa4:	f043 030c 	orr.w	r3, r3, #12
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	e00d      	b.n	8001ac8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7d5b      	ldrb	r3, [r3, #21]
 8001ab0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ab6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001abc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7f1b      	ldrb	r3, [r3, #28]
 8001ac2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7f1b      	ldrb	r3, [r3, #28]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d106      	bne.n	8001ade <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	045b      	lsls	r3, r3, #17
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d009      	beq.n	8001afa <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aea:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb4 <HAL_ADC_Init+0x2ac>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	69b9      	ldr	r1, [r7, #24]
 8001b0a:	430b      	orrs	r3, r1
 8001b0c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fed1 	bl	80018ba <LL_ADC_REG_IsConversionOngoing>
 8001b18:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fede 	bl	80018e0 <LL_ADC_INJ_IsConversionOngoing>
 8001b24:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d15f      	bne.n	8001bec <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d15c      	bne.n	8001bec <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7d1b      	ldrb	r3, [r3, #20]
 8001b36:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb8 <HAL_ADC_Init+0x2b0>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	69b9      	ldr	r1, [r7, #24]
 8001b50:	430b      	orrs	r3, r1
 8001b52:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d130      	bne.n	8001bc0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b62:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691a      	ldr	r2, [r3, #16]
 8001b6a:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <HAL_ADC_Init+0x2b4>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b72:	3a01      	subs	r2, #1
 8001b74:	0411      	lsls	r1, r2, #16
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b7a:	4311      	orrs	r1, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b80:	4311      	orrs	r1, r2
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b86:	430a      	orrs	r2, r1
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	611a      	str	r2, [r3, #16]
 8001b94:	e01c      	b.n	8001bd0 <HAL_ADC_Init+0x2c8>
 8001b96:	bf00      	nop
 8001b98:	24000000 	.word	0x24000000
 8001b9c:	053e2d63 	.word	0x053e2d63
 8001ba0:	40022000 	.word	0x40022000
 8001ba4:	40022100 	.word	0x40022100
 8001ba8:	58026000 	.word	0x58026000
 8001bac:	40022300 	.word	0x40022300
 8001bb0:	58026300 	.word	0x58026300
 8001bb4:	fff0c003 	.word	0xfff0c003
 8001bb8:	ffffbffc 	.word	0xffffbffc
 8001bbc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691a      	ldr	r2, [r3, #16]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0201 	bic.w	r2, r2, #1
 8001bce:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 fde4 	bl	80027b4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d10c      	bne.n	8001c0e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	f023 010f 	bic.w	r1, r3, #15
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	1e5a      	subs	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c0c:	e007      	b.n	8001c1e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 020f 	bic.w	r2, r2, #15
 8001c1c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c22:	f023 0303 	bic.w	r3, r3, #3
 8001c26:	f043 0201 	orr.w	r2, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c2e:	e007      	b.n	8001c40 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c34:	f043 0210 	orr.w	r2, r3, #16
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c40:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	@ 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}
 8001c4a:	bf00      	nop

08001c4c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	@ 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a87      	ldr	r2, [pc, #540]	@ (8001e8c <HAL_ADC_IRQHandler+0x240>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d004      	beq.n	8001c7c <HAL_ADC_IRQHandler+0x30>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a86      	ldr	r2, [pc, #536]	@ (8001e90 <HAL_ADC_IRQHandler+0x244>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d101      	bne.n	8001c80 <HAL_ADC_IRQHandler+0x34>
 8001c7c:	4b85      	ldr	r3, [pc, #532]	@ (8001e94 <HAL_ADC_IRQHandler+0x248>)
 8001c7e:	e000      	b.n	8001c82 <HAL_ADC_IRQHandler+0x36>
 8001c80:	4b85      	ldr	r3, [pc, #532]	@ (8001e98 <HAL_ADC_IRQHandler+0x24c>)
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fd9c 	bl	80017c0 <LL_ADC_GetMultimode>
 8001c88:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d017      	beq.n	8001cc4 <HAL_ADC_IRQHandler+0x78>
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d012      	beq.n	8001cc4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d105      	bne.n	8001cb6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cae:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 feb0 	bl	8002a1c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d004      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0x8c>
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10a      	bne.n	8001cee <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 8083 	beq.w	8001dea <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d07d      	beq.n	8001dea <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cfe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fcb6 	bl	800167c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d062      	beq.n	8001ddc <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a5d      	ldr	r2, [pc, #372]	@ (8001e90 <HAL_ADC_IRQHandler+0x244>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d002      	beq.n	8001d26 <HAL_ADC_IRQHandler+0xda>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	e000      	b.n	8001d28 <HAL_ADC_IRQHandler+0xdc>
 8001d26:	4b59      	ldr	r3, [pc, #356]	@ (8001e8c <HAL_ADC_IRQHandler+0x240>)
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d008      	beq.n	8001d42 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	d002      	beq.n	8001d42 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2b09      	cmp	r3, #9
 8001d40:	d104      	bne.n	8001d4c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	623b      	str	r3, [r7, #32]
 8001d4a:	e00c      	b.n	8001d66 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a4f      	ldr	r2, [pc, #316]	@ (8001e90 <HAL_ADC_IRQHandler+0x244>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d002      	beq.n	8001d5c <HAL_ADC_IRQHandler+0x110>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	e000      	b.n	8001d5e <HAL_ADC_IRQHandler+0x112>
 8001d5c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e8c <HAL_ADC_IRQHandler+0x240>)
 8001d5e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d135      	bne.n	8001ddc <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d12e      	bne.n	8001ddc <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fd99 	bl	80018ba <LL_ADC_REG_IsConversionOngoing>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d11a      	bne.n	8001dc4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 020c 	bic.w	r2, r2, #12
 8001d9c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d112      	bne.n	8001ddc <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dba:	f043 0201 	orr.w	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	655a      	str	r2, [r3, #84]	@ 0x54
 8001dc2:	e00b      	b.n	8001ddc <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc8:	f043 0210 	orr.w	r2, r3, #16
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd4:	f043 0201 	orr.w	r2, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f96f 	bl	80020c0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	220c      	movs	r2, #12
 8001de8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d004      	beq.n	8001dfe <HAL_ADC_IRQHandler+0x1b2>
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	f003 0320 	and.w	r3, r3, #32
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10b      	bne.n	8001e16 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 80a0 	beq.w	8001f4a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 809a 	beq.w	8001f4a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d105      	bne.n	8001e2e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e26:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fc61 	bl	80016fa <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001e38:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fc1c 	bl	800167c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e44:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a11      	ldr	r2, [pc, #68]	@ (8001e90 <HAL_ADC_IRQHandler+0x244>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d002      	beq.n	8001e56 <HAL_ADC_IRQHandler+0x20a>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	e000      	b.n	8001e58 <HAL_ADC_IRQHandler+0x20c>
 8001e56:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <HAL_ADC_IRQHandler+0x240>)
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d008      	beq.n	8001e72 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d005      	beq.n	8001e72 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2b06      	cmp	r3, #6
 8001e6a:	d002      	beq.n	8001e72 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2b07      	cmp	r3, #7
 8001e70:	d104      	bne.n	8001e7c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	623b      	str	r3, [r7, #32]
 8001e7a:	e014      	b.n	8001ea6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a03      	ldr	r2, [pc, #12]	@ (8001e90 <HAL_ADC_IRQHandler+0x244>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00a      	beq.n	8001e9c <HAL_ADC_IRQHandler+0x250>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	e008      	b.n	8001e9e <HAL_ADC_IRQHandler+0x252>
 8001e8c:	40022000 	.word	0x40022000
 8001e90:	40022100 	.word	0x40022100
 8001e94:	40022300 	.word	0x40022300
 8001e98:	58026300 	.word	0x58026300
 8001e9c:	4b84      	ldr	r3, [pc, #528]	@ (80020b0 <HAL_ADC_IRQHandler+0x464>)
 8001e9e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d047      	beq.n	8001f3c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d007      	beq.n	8001ec6 <HAL_ADC_IRQHandler+0x27a>
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d03f      	beq.n	8001f3c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d13a      	bne.n	8001f3c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ed0:	2b40      	cmp	r3, #64	@ 0x40
 8001ed2:	d133      	bne.n	8001f3c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d12e      	bne.n	8001f3c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fcfc 	bl	80018e0 <LL_ADC_INJ_IsConversionOngoing>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d11a      	bne.n	8001f24 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001efc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f02:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d112      	bne.n	8001f3c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f1a:	f043 0201 	orr.w	r2, r3, #1
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f22:	e00b      	b.n	8001f3c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f28:	f043 0210 	orr.w	r2, r3, #16
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f34:	f043 0201 	orr.w	r2, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 fd45 	bl	80029cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2260      	movs	r2, #96	@ 0x60
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d011      	beq.n	8001f78 <HAL_ADC_IRQHandler+0x32c>
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00c      	beq.n	8001f78 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f62:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8b2 	bl	80020d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2280      	movs	r2, #128	@ 0x80
 8001f76:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d012      	beq.n	8001fa8 <HAL_ADC_IRQHandler+0x35c>
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00d      	beq.n	8001fa8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f90:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 fd2b 	bl	80029f4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fa6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d012      	beq.n	8001fd8 <HAL_ADC_IRQHandler+0x38c>
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00d      	beq.n	8001fd8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fd1d 	bl	8002a08 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fd6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d043      	beq.n	800206a <HAL_ADC_IRQHandler+0x41e>
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d03e      	beq.n	800206a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d102      	bne.n	8001ffa <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ff8:	e021      	b.n	800203e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d015      	beq.n	800202c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a2a      	ldr	r2, [pc, #168]	@ (80020b0 <HAL_ADC_IRQHandler+0x464>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d004      	beq.n	8002014 <HAL_ADC_IRQHandler+0x3c8>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a29      	ldr	r2, [pc, #164]	@ (80020b4 <HAL_ADC_IRQHandler+0x468>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d101      	bne.n	8002018 <HAL_ADC_IRQHandler+0x3cc>
 8002014:	4b28      	ldr	r3, [pc, #160]	@ (80020b8 <HAL_ADC_IRQHandler+0x46c>)
 8002016:	e000      	b.n	800201a <HAL_ADC_IRQHandler+0x3ce>
 8002018:	4b28      	ldr	r3, [pc, #160]	@ (80020bc <HAL_ADC_IRQHandler+0x470>)
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fbde 	bl	80017dc <LL_ADC_GetMultiDMATransfer>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00b      	beq.n	800203e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002026:	2301      	movs	r3, #1
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
 800202a:	e008      	b.n	800203e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800203a:	2301      	movs	r3, #1
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	2b01      	cmp	r3, #1
 8002042:	d10e      	bne.n	8002062 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002048:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002054:	f043 0202 	orr.w	r2, r3, #2
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f843 	bl	80020e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2210      	movs	r2, #16
 8002068:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002070:	2b00      	cmp	r3, #0
 8002072:	d018      	beq.n	80020a6 <HAL_ADC_IRQHandler+0x45a>
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800207a:	2b00      	cmp	r3, #0
 800207c:	d013      	beq.n	80020a6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002082:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208e:	f043 0208 	orr.w	r2, r3, #8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800209e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fc9d 	bl	80029e0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80020a6:	bf00      	nop
 80020a8:	3728      	adds	r7, #40	@ 0x28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40022000 	.word	0x40022000
 80020b4:	40022100 	.word	0x40022100
 80020b8:	40022300 	.word	0x40022300
 80020bc:	58026300 	.word	0x58026300

080020c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020fc:	b590      	push	{r4, r7, lr}
 80020fe:	b0a1      	sub	sp, #132	@ 0x84
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4a65      	ldr	r2, [pc, #404]	@ (80022ac <HAL_ADC_ConfigChannel+0x1b0>)
 8002116:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x2a>
 8002122:	2302      	movs	r3, #2
 8002124:	e32e      	b.n	8002784 <HAL_ADC_ConfigChannel+0x688>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fbc1 	bl	80018ba <LL_ADC_REG_IsConversionOngoing>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	f040 8313 	bne.w	8002766 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	db2c      	blt.n	80021a2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002150:	2b00      	cmp	r3, #0
 8002152:	d108      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x6a>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0e9b      	lsrs	r3, r3, #26
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	2201      	movs	r2, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	e016      	b.n	8002194 <HAL_ADC_ConfigChannel+0x98>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002174:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002176:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002178:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800217e:	2320      	movs	r3, #32
 8002180:	e003      	b.n	800218a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002182:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002184:	fab3 f383 	clz	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	f003 031f 	and.w	r3, r3, #31
 800218e:	2201      	movs	r2, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	69d1      	ldr	r1, [r2, #28]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	430b      	orrs	r3, r1
 80021a0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	6859      	ldr	r1, [r3, #4]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	f7ff fa77 	bl	80016a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fb7e 	bl	80018ba <LL_ADC_REG_IsConversionOngoing>
 80021be:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fb8b 	bl	80018e0 <LL_ADC_INJ_IsConversionOngoing>
 80021ca:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f040 80b8 	bne.w	8002344 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f040 80b4 	bne.w	8002344 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	6819      	ldr	r1, [r3, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	461a      	mov	r2, r3
 80021ea:	f7ff fa99 	bl	8001720 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021ee:	4b30      	ldr	r3, [pc, #192]	@ (80022b0 <HAL_ADC_ConfigChannel+0x1b4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80021f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021fa:	d10b      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x118>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	089b      	lsrs	r3, r3, #2
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	e01d      	b.n	8002250 <HAL_ADC_ConfigChannel+0x154>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10b      	bne.n	800223a <HAL_ADC_ConfigChannel+0x13e>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	e00a      	b.n	8002250 <HAL_ADC_ConfigChannel+0x154>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b04      	cmp	r3, #4
 8002258:	d02c      	beq.n	80022b4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6919      	ldr	r1, [r3, #16]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002268:	f7ff f9b4 	bl	80015d4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6919      	ldr	r1, [r3, #16]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	7e5b      	ldrb	r3, [r3, #25]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d102      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x186>
 800227c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002280:	e000      	b.n	8002284 <HAL_ADC_ConfigChannel+0x188>
 8002282:	2300      	movs	r3, #0
 8002284:	461a      	mov	r2, r3
 8002286:	f7ff f9de 	bl	8001646 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6919      	ldr	r1, [r3, #16]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	7e1b      	ldrb	r3, [r3, #24]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d102      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x1a4>
 800229a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800229e:	e000      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x1a6>
 80022a0:	2300      	movs	r3, #0
 80022a2:	461a      	mov	r2, r3
 80022a4:	f7ff f9b6 	bl	8001614 <LL_ADC_SetDataRightShift>
 80022a8:	e04c      	b.n	8002344 <HAL_ADC_ConfigChannel+0x248>
 80022aa:	bf00      	nop
 80022ac:	47ff0000 	.word	0x47ff0000
 80022b0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	069b      	lsls	r3, r3, #26
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d107      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80022d6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	069b      	lsls	r3, r3, #26
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d107      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80022fa:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002302:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	069b      	lsls	r3, r3, #26
 800230c:	429a      	cmp	r2, r3
 800230e:	d107      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800231e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002326:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	069b      	lsls	r3, r3, #26
 8002330:	429a      	cmp	r2, r3
 8002332:	d107      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002342:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff faa3 	bl	8001894 <LL_ADC_IsEnabled>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	f040 8211 	bne.w	8002778 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	6819      	ldr	r1, [r3, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	461a      	mov	r2, r3
 8002364:	f7ff fa08 	bl	8001778 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4aa1      	ldr	r2, [pc, #644]	@ (80025f4 <HAL_ADC_ConfigChannel+0x4f8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	f040 812e 	bne.w	80025d0 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10b      	bne.n	800239c <HAL_ADC_ConfigChannel+0x2a0>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0e9b      	lsrs	r3, r3, #26
 800238a:	3301      	adds	r3, #1
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	2b09      	cmp	r3, #9
 8002392:	bf94      	ite	ls
 8002394:	2301      	movls	r3, #1
 8002396:	2300      	movhi	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	e019      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x2d4>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80023aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80023ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80023b4:	2320      	movs	r3, #32
 80023b6:	e003      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80023b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	3301      	adds	r3, #1
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	2b09      	cmp	r3, #9
 80023c8:	bf94      	ite	ls
 80023ca:	2301      	movls	r3, #1
 80023cc:	2300      	movhi	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d079      	beq.n	80024c8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d107      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x2f4>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0e9b      	lsrs	r3, r3, #26
 80023e6:	3301      	adds	r3, #1
 80023e8:	069b      	lsls	r3, r3, #26
 80023ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023ee:	e015      	b.n	800241c <HAL_ADC_ConfigChannel+0x320>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023f8:	fa93 f3a3 	rbit	r3, r3
 80023fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80023fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002400:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002408:	2320      	movs	r3, #32
 800240a:	e003      	b.n	8002414 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800240c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	3301      	adds	r3, #1
 8002416:	069b      	lsls	r3, r3, #26
 8002418:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002424:	2b00      	cmp	r3, #0
 8002426:	d109      	bne.n	800243c <HAL_ADC_ConfigChannel+0x340>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	0e9b      	lsrs	r3, r3, #26
 800242e:	3301      	adds	r3, #1
 8002430:	f003 031f 	and.w	r3, r3, #31
 8002434:	2101      	movs	r1, #1
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	e017      	b.n	800246c <HAL_ADC_ConfigChannel+0x370>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800244a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800244c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800244e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e003      	b.n	8002460 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	3301      	adds	r3, #1
 8002462:	f003 031f 	and.w	r3, r3, #31
 8002466:	2101      	movs	r1, #1
 8002468:	fa01 f303 	lsl.w	r3, r1, r3
 800246c:	ea42 0103 	orr.w	r1, r2, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10a      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x396>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	0e9b      	lsrs	r3, r3, #26
 8002482:	3301      	adds	r3, #1
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	4613      	mov	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4413      	add	r3, r2
 800248e:	051b      	lsls	r3, r3, #20
 8002490:	e018      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x3c8>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80024a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80024a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80024aa:	2320      	movs	r3, #32
 80024ac:	e003      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80024ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b0:	fab3 f383 	clz	r3, r3
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	3301      	adds	r3, #1
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	4613      	mov	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4413      	add	r3, r2
 80024c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c4:	430b      	orrs	r3, r1
 80024c6:	e07e      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d107      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x3e8>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0e9b      	lsrs	r3, r3, #26
 80024da:	3301      	adds	r3, #1
 80024dc:	069b      	lsls	r3, r3, #26
 80024de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024e2:	e015      	b.n	8002510 <HAL_ADC_ConfigChannel+0x414>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80024f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80024fc:	2320      	movs	r3, #32
 80024fe:	e003      	b.n	8002508 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	3301      	adds	r3, #1
 800250a:	069b      	lsls	r3, r3, #26
 800250c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002518:	2b00      	cmp	r3, #0
 800251a:	d109      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x434>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	0e9b      	lsrs	r3, r3, #26
 8002522:	3301      	adds	r3, #1
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	2101      	movs	r1, #1
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	e017      	b.n	8002560 <HAL_ADC_ConfigChannel+0x464>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	61bb      	str	r3, [r7, #24]
  return result;
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002548:	2320      	movs	r3, #32
 800254a:	e003      	b.n	8002554 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	3301      	adds	r3, #1
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	2101      	movs	r1, #1
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	ea42 0103 	orr.w	r1, r2, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10d      	bne.n	800258c <HAL_ADC_ConfigChannel+0x490>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0e9b      	lsrs	r3, r3, #26
 8002576:	3301      	adds	r3, #1
 8002578:	f003 021f 	and.w	r2, r3, #31
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	3b1e      	subs	r3, #30
 8002584:	051b      	lsls	r3, r3, #20
 8002586:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800258a:	e01b      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x4c8>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	60fb      	str	r3, [r7, #12]
  return result;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80025a4:	2320      	movs	r3, #32
 80025a6:	e003      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	3301      	adds	r3, #1
 80025b2:	f003 021f 	and.w	r2, r3, #31
 80025b6:	4613      	mov	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	3b1e      	subs	r3, #30
 80025be:	051b      	lsls	r3, r3, #20
 80025c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025c4:	430b      	orrs	r3, r1
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	6892      	ldr	r2, [r2, #8]
 80025ca:	4619      	mov	r1, r3
 80025cc:	f7ff f8a8 	bl	8001720 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f280 80cf 	bge.w	8002778 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a06      	ldr	r2, [pc, #24]	@ (80025f8 <HAL_ADC_ConfigChannel+0x4fc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d004      	beq.n	80025ee <HAL_ADC_ConfigChannel+0x4f2>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a04      	ldr	r2, [pc, #16]	@ (80025fc <HAL_ADC_ConfigChannel+0x500>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10a      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x508>
 80025ee:	4b04      	ldr	r3, [pc, #16]	@ (8002600 <HAL_ADC_ConfigChannel+0x504>)
 80025f0:	e009      	b.n	8002606 <HAL_ADC_ConfigChannel+0x50a>
 80025f2:	bf00      	nop
 80025f4:	47ff0000 	.word	0x47ff0000
 80025f8:	40022000 	.word	0x40022000
 80025fc:	40022100 	.word	0x40022100
 8002600:	40022300 	.word	0x40022300
 8002604:	4b61      	ldr	r3, [pc, #388]	@ (800278c <HAL_ADC_ConfigChannel+0x690>)
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe ffd6 	bl	80015b8 <LL_ADC_GetCommonPathInternalCh>
 800260c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a5f      	ldr	r2, [pc, #380]	@ (8002790 <HAL_ADC_ConfigChannel+0x694>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d004      	beq.n	8002622 <HAL_ADC_ConfigChannel+0x526>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a5d      	ldr	r2, [pc, #372]	@ (8002794 <HAL_ADC_ConfigChannel+0x698>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d10e      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x544>
 8002622:	485b      	ldr	r0, [pc, #364]	@ (8002790 <HAL_ADC_ConfigChannel+0x694>)
 8002624:	f7ff f936 	bl	8001894 <LL_ADC_IsEnabled>
 8002628:	4604      	mov	r4, r0
 800262a:	485a      	ldr	r0, [pc, #360]	@ (8002794 <HAL_ADC_ConfigChannel+0x698>)
 800262c:	f7ff f932 	bl	8001894 <LL_ADC_IsEnabled>
 8002630:	4603      	mov	r3, r0
 8002632:	4323      	orrs	r3, r4
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf0c      	ite	eq
 8002638:	2301      	moveq	r3, #1
 800263a:	2300      	movne	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	e008      	b.n	8002652 <HAL_ADC_ConfigChannel+0x556>
 8002640:	4855      	ldr	r0, [pc, #340]	@ (8002798 <HAL_ADC_ConfigChannel+0x69c>)
 8002642:	f7ff f927 	bl	8001894 <LL_ADC_IsEnabled>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf0c      	ite	eq
 800264c:	2301      	moveq	r3, #1
 800264e:	2300      	movne	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d07d      	beq.n	8002752 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a50      	ldr	r2, [pc, #320]	@ (800279c <HAL_ADC_ConfigChannel+0x6a0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d130      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x5c6>
 8002660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002662:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d12b      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a4a      	ldr	r2, [pc, #296]	@ (8002798 <HAL_ADC_ConfigChannel+0x69c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	f040 8081 	bne.w	8002778 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a45      	ldr	r2, [pc, #276]	@ (8002790 <HAL_ADC_ConfigChannel+0x694>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d004      	beq.n	800268a <HAL_ADC_ConfigChannel+0x58e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a43      	ldr	r2, [pc, #268]	@ (8002794 <HAL_ADC_ConfigChannel+0x698>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d101      	bne.n	800268e <HAL_ADC_ConfigChannel+0x592>
 800268a:	4a45      	ldr	r2, [pc, #276]	@ (80027a0 <HAL_ADC_ConfigChannel+0x6a4>)
 800268c:	e000      	b.n	8002690 <HAL_ADC_ConfigChannel+0x594>
 800268e:	4a3f      	ldr	r2, [pc, #252]	@ (800278c <HAL_ADC_ConfigChannel+0x690>)
 8002690:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002692:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002696:	4619      	mov	r1, r3
 8002698:	4610      	mov	r0, r2
 800269a:	f7fe ff7a 	bl	8001592 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800269e:	4b41      	ldr	r3, [pc, #260]	@ (80027a4 <HAL_ADC_ConfigChannel+0x6a8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	099b      	lsrs	r3, r3, #6
 80026a4:	4a40      	ldr	r2, [pc, #256]	@ (80027a8 <HAL_ADC_ConfigChannel+0x6ac>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	099b      	lsrs	r3, r3, #6
 80026ac:	3301      	adds	r3, #1
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80026b2:	e002      	b.n	80026ba <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f9      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026c0:	e05a      	b.n	8002778 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a39      	ldr	r2, [pc, #228]	@ (80027ac <HAL_ADC_ConfigChannel+0x6b0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d11e      	bne.n	800270a <HAL_ADC_ConfigChannel+0x60e>
 80026cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d119      	bne.n	800270a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a2f      	ldr	r2, [pc, #188]	@ (8002798 <HAL_ADC_ConfigChannel+0x69c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d14b      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002790 <HAL_ADC_ConfigChannel+0x694>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d004      	beq.n	80026f4 <HAL_ADC_ConfigChannel+0x5f8>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a29      	ldr	r2, [pc, #164]	@ (8002794 <HAL_ADC_ConfigChannel+0x698>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d101      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x5fc>
 80026f4:	4a2a      	ldr	r2, [pc, #168]	@ (80027a0 <HAL_ADC_ConfigChannel+0x6a4>)
 80026f6:	e000      	b.n	80026fa <HAL_ADC_ConfigChannel+0x5fe>
 80026f8:	4a24      	ldr	r2, [pc, #144]	@ (800278c <HAL_ADC_ConfigChannel+0x690>)
 80026fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002700:	4619      	mov	r1, r3
 8002702:	4610      	mov	r0, r2
 8002704:	f7fe ff45 	bl	8001592 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002708:	e036      	b.n	8002778 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a28      	ldr	r2, [pc, #160]	@ (80027b0 <HAL_ADC_ConfigChannel+0x6b4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d131      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x67c>
 8002714:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d12c      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1d      	ldr	r2, [pc, #116]	@ (8002798 <HAL_ADC_ConfigChannel+0x69c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d127      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a18      	ldr	r2, [pc, #96]	@ (8002790 <HAL_ADC_ConfigChannel+0x694>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d004      	beq.n	800273c <HAL_ADC_ConfigChannel+0x640>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a17      	ldr	r2, [pc, #92]	@ (8002794 <HAL_ADC_ConfigChannel+0x698>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d101      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x644>
 800273c:	4a18      	ldr	r2, [pc, #96]	@ (80027a0 <HAL_ADC_ConfigChannel+0x6a4>)
 800273e:	e000      	b.n	8002742 <HAL_ADC_ConfigChannel+0x646>
 8002740:	4a12      	ldr	r2, [pc, #72]	@ (800278c <HAL_ADC_ConfigChannel+0x690>)
 8002742:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002744:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002748:	4619      	mov	r1, r3
 800274a:	4610      	mov	r0, r2
 800274c:	f7fe ff21 	bl	8001592 <LL_ADC_SetCommonPathInternalCh>
 8002750:	e012      	b.n	8002778 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002756:	f043 0220 	orr.w	r2, r3, #32
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002764:	e008      	b.n	8002778 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276a:	f043 0220 	orr.w	r2, r3, #32
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002780:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002784:	4618      	mov	r0, r3
 8002786:	3784      	adds	r7, #132	@ 0x84
 8002788:	46bd      	mov	sp, r7
 800278a:	bd90      	pop	{r4, r7, pc}
 800278c:	58026300 	.word	0x58026300
 8002790:	40022000 	.word	0x40022000
 8002794:	40022100 	.word	0x40022100
 8002798:	58026000 	.word	0x58026000
 800279c:	cb840000 	.word	0xcb840000
 80027a0:	40022300 	.word	0x40022300
 80027a4:	24000000 	.word	0x24000000
 80027a8:	053e2d63 	.word	0x053e2d63
 80027ac:	c7520000 	.word	0xc7520000
 80027b0:	cfb80000 	.word	0xcfb80000

080027b4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a7a      	ldr	r2, [pc, #488]	@ (80029ac <ADC_ConfigureBoostMode+0x1f8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d004      	beq.n	80027d0 <ADC_ConfigureBoostMode+0x1c>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a79      	ldr	r2, [pc, #484]	@ (80029b0 <ADC_ConfigureBoostMode+0x1fc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d109      	bne.n	80027e4 <ADC_ConfigureBoostMode+0x30>
 80027d0:	4b78      	ldr	r3, [pc, #480]	@ (80029b4 <ADC_ConfigureBoostMode+0x200>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	bf14      	ite	ne
 80027dc:	2301      	movne	r3, #1
 80027de:	2300      	moveq	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	e008      	b.n	80027f6 <ADC_ConfigureBoostMode+0x42>
 80027e4:	4b74      	ldr	r3, [pc, #464]	@ (80029b8 <ADC_ConfigureBoostMode+0x204>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bf14      	ite	ne
 80027f0:	2301      	movne	r3, #1
 80027f2:	2300      	moveq	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d01c      	beq.n	8002834 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80027fa:	f003 f879 	bl	80058f0 <HAL_RCC_GetHCLKFreq>
 80027fe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002808:	d010      	beq.n	800282c <ADC_ConfigureBoostMode+0x78>
 800280a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800280e:	d873      	bhi.n	80028f8 <ADC_ConfigureBoostMode+0x144>
 8002810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002814:	d002      	beq.n	800281c <ADC_ConfigureBoostMode+0x68>
 8002816:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800281a:	d16d      	bne.n	80028f8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	0c1b      	lsrs	r3, r3, #16
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	60fb      	str	r3, [r7, #12]
        break;
 800282a:	e068      	b.n	80028fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	60fb      	str	r3, [r7, #12]
        break;
 8002832:	e064      	b.n	80028fe <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002834:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002838:	f04f 0100 	mov.w	r1, #0
 800283c:	f004 fabe 	bl	8006dbc <HAL_RCCEx_GetPeriphCLKFreq>
 8002840:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800284a:	d051      	beq.n	80028f0 <ADC_ConfigureBoostMode+0x13c>
 800284c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002850:	d854      	bhi.n	80028fc <ADC_ConfigureBoostMode+0x148>
 8002852:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002856:	d047      	beq.n	80028e8 <ADC_ConfigureBoostMode+0x134>
 8002858:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800285c:	d84e      	bhi.n	80028fc <ADC_ConfigureBoostMode+0x148>
 800285e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002862:	d03d      	beq.n	80028e0 <ADC_ConfigureBoostMode+0x12c>
 8002864:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002868:	d848      	bhi.n	80028fc <ADC_ConfigureBoostMode+0x148>
 800286a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800286e:	d033      	beq.n	80028d8 <ADC_ConfigureBoostMode+0x124>
 8002870:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002874:	d842      	bhi.n	80028fc <ADC_ConfigureBoostMode+0x148>
 8002876:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800287a:	d029      	beq.n	80028d0 <ADC_ConfigureBoostMode+0x11c>
 800287c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002880:	d83c      	bhi.n	80028fc <ADC_ConfigureBoostMode+0x148>
 8002882:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002886:	d01a      	beq.n	80028be <ADC_ConfigureBoostMode+0x10a>
 8002888:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800288c:	d836      	bhi.n	80028fc <ADC_ConfigureBoostMode+0x148>
 800288e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002892:	d014      	beq.n	80028be <ADC_ConfigureBoostMode+0x10a>
 8002894:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002898:	d830      	bhi.n	80028fc <ADC_ConfigureBoostMode+0x148>
 800289a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800289e:	d00e      	beq.n	80028be <ADC_ConfigureBoostMode+0x10a>
 80028a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028a4:	d82a      	bhi.n	80028fc <ADC_ConfigureBoostMode+0x148>
 80028a6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80028aa:	d008      	beq.n	80028be <ADC_ConfigureBoostMode+0x10a>
 80028ac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80028b0:	d824      	bhi.n	80028fc <ADC_ConfigureBoostMode+0x148>
 80028b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028b6:	d002      	beq.n	80028be <ADC_ConfigureBoostMode+0x10a>
 80028b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80028bc:	d11e      	bne.n	80028fc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	0c9b      	lsrs	r3, r3, #18
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028cc:	60fb      	str	r3, [r7, #12]
        break;
 80028ce:	e016      	b.n	80028fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	60fb      	str	r3, [r7, #12]
        break;
 80028d6:	e012      	b.n	80028fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	60fb      	str	r3, [r7, #12]
        break;
 80028de:	e00e      	b.n	80028fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	099b      	lsrs	r3, r3, #6
 80028e4:	60fb      	str	r3, [r7, #12]
        break;
 80028e6:	e00a      	b.n	80028fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	09db      	lsrs	r3, r3, #7
 80028ec:	60fb      	str	r3, [r7, #12]
        break;
 80028ee:	e006      	b.n	80028fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	60fb      	str	r3, [r7, #12]
        break;
 80028f6:	e002      	b.n	80028fe <ADC_ConfigureBoostMode+0x14a>
        break;
 80028f8:	bf00      	nop
 80028fa:	e000      	b.n	80028fe <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80028fc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80028fe:	f7fe fe13 	bl	8001528 <HAL_GetREVID>
 8002902:	4603      	mov	r3, r0
 8002904:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002908:	4293      	cmp	r3, r2
 800290a:	d815      	bhi.n	8002938 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4a2b      	ldr	r2, [pc, #172]	@ (80029bc <ADC_ConfigureBoostMode+0x208>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d908      	bls.n	8002926 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002922:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002924:	e03e      	b.n	80029a4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002934:	609a      	str	r2, [r3, #8]
}
 8002936:	e035      	b.n	80029a4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	085b      	lsrs	r3, r3, #1
 800293c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4a1f      	ldr	r2, [pc, #124]	@ (80029c0 <ADC_ConfigureBoostMode+0x20c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d808      	bhi.n	8002958 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002954:	609a      	str	r2, [r3, #8]
}
 8002956:	e025      	b.n	80029a4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4a1a      	ldr	r2, [pc, #104]	@ (80029c4 <ADC_ConfigureBoostMode+0x210>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d80a      	bhi.n	8002976 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002972:	609a      	str	r2, [r3, #8]
}
 8002974:	e016      	b.n	80029a4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4a13      	ldr	r2, [pc, #76]	@ (80029c8 <ADC_ConfigureBoostMode+0x214>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d80a      	bhi.n	8002994 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002990:	609a      	str	r2, [r3, #8]
}
 8002992:	e007      	b.n	80029a4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80029a2:	609a      	str	r2, [r3, #8]
}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40022000 	.word	0x40022000
 80029b0:	40022100 	.word	0x40022100
 80029b4:	40022300 	.word	0x40022300
 80029b8:	58026300 	.word	0x58026300
 80029bc:	01312d00 	.word	0x01312d00
 80029c0:	005f5e10 	.word	0x005f5e10
 80029c4:	00bebc20 	.word	0x00bebc20
 80029c8:	017d7840 	.word	0x017d7840

080029cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a40:	4b0b      	ldr	r3, [pc, #44]	@ (8002a70 <__NVIC_SetPriorityGrouping+0x40>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a58:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5e:	4a04      	ldr	r2, [pc, #16]	@ (8002a70 <__NVIC_SetPriorityGrouping+0x40>)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	60d3      	str	r3, [r2, #12]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed00 	.word	0xe000ed00
 8002a74:	05fa0000 	.word	0x05fa0000

08002a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a7c:	4b04      	ldr	r3, [pc, #16]	@ (8002a90 <__NVIC_GetPriorityGrouping+0x18>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	f003 0307 	and.w	r3, r3, #7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	db0b      	blt.n	8002abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	4907      	ldr	r1, [pc, #28]	@ (8002acc <__NVIC_EnableIRQ+0x38>)
 8002aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000e100 	.word	0xe000e100

08002ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002adc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	db0a      	blt.n	8002afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	490c      	ldr	r1, [pc, #48]	@ (8002b1c <__NVIC_SetPriority+0x4c>)
 8002aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aee:	0112      	lsls	r2, r2, #4
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	440b      	add	r3, r1
 8002af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af8:	e00a      	b.n	8002b10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4908      	ldr	r1, [pc, #32]	@ (8002b20 <__NVIC_SetPriority+0x50>)
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	3b04      	subs	r3, #4
 8002b08:	0112      	lsls	r2, r2, #4
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	761a      	strb	r2, [r3, #24]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e100 	.word	0xe000e100
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	@ 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f1c3 0307 	rsb	r3, r3, #7
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	bf28      	it	cs
 8002b42:	2304      	movcs	r3, #4
 8002b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d902      	bls.n	8002b54 <NVIC_EncodePriority+0x30>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3b03      	subs	r3, #3
 8002b52:	e000      	b.n	8002b56 <NVIC_EncodePriority+0x32>
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	401a      	ands	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43d9      	mvns	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	4313      	orrs	r3, r2
         );
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3724      	adds	r7, #36	@ 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b9c:	d301      	bcc.n	8002ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e00f      	b.n	8002bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bcc <SysTick_Config+0x40>)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002baa:	210f      	movs	r1, #15
 8002bac:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb0:	f7ff ff8e 	bl	8002ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb4:	4b05      	ldr	r3, [pc, #20]	@ (8002bcc <SysTick_Config+0x40>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bba:	4b04      	ldr	r3, [pc, #16]	@ (8002bcc <SysTick_Config+0x40>)
 8002bbc:	2207      	movs	r2, #7
 8002bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	e000e010 	.word	0xe000e010

08002bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ff29 	bl	8002a30 <__NVIC_SetPriorityGrouping>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4603      	mov	r3, r0
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf4:	f7ff ff40 	bl	8002a78 <__NVIC_GetPriorityGrouping>
 8002bf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	6978      	ldr	r0, [r7, #20]
 8002c00:	f7ff ff90 	bl	8002b24 <NVIC_EncodePriority>
 8002c04:	4602      	mov	r2, r0
 8002c06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff5f 	bl	8002ad0 <__NVIC_SetPriority>
}
 8002c12:	bf00      	nop
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	4603      	mov	r3, r0
 8002c22:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff33 	bl	8002a94 <__NVIC_EnableIRQ>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff ffa4 	bl	8002b8c <SysTick_Config>
 8002c44:	4603      	mov	r3, r0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002c58:	f7fe fc5a 	bl	8001510 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e316      	b.n	8003296 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a66      	ldr	r2, [pc, #408]	@ (8002e08 <HAL_DMA_Init+0x1b8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d04a      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a65      	ldr	r2, [pc, #404]	@ (8002e0c <HAL_DMA_Init+0x1bc>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d045      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a63      	ldr	r2, [pc, #396]	@ (8002e10 <HAL_DMA_Init+0x1c0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d040      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a62      	ldr	r2, [pc, #392]	@ (8002e14 <HAL_DMA_Init+0x1c4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d03b      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a60      	ldr	r2, [pc, #384]	@ (8002e18 <HAL_DMA_Init+0x1c8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d036      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a5f      	ldr	r2, [pc, #380]	@ (8002e1c <HAL_DMA_Init+0x1cc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d031      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a5d      	ldr	r2, [pc, #372]	@ (8002e20 <HAL_DMA_Init+0x1d0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d02c      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a5c      	ldr	r2, [pc, #368]	@ (8002e24 <HAL_DMA_Init+0x1d4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d027      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a5a      	ldr	r2, [pc, #360]	@ (8002e28 <HAL_DMA_Init+0x1d8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d022      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a59      	ldr	r2, [pc, #356]	@ (8002e2c <HAL_DMA_Init+0x1dc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d01d      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a57      	ldr	r2, [pc, #348]	@ (8002e30 <HAL_DMA_Init+0x1e0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d018      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a56      	ldr	r2, [pc, #344]	@ (8002e34 <HAL_DMA_Init+0x1e4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d013      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a54      	ldr	r2, [pc, #336]	@ (8002e38 <HAL_DMA_Init+0x1e8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00e      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a53      	ldr	r2, [pc, #332]	@ (8002e3c <HAL_DMA_Init+0x1ec>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d009      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a51      	ldr	r2, [pc, #324]	@ (8002e40 <HAL_DMA_Init+0x1f0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d004      	beq.n	8002d08 <HAL_DMA_Init+0xb8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a50      	ldr	r2, [pc, #320]	@ (8002e44 <HAL_DMA_Init+0x1f4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d101      	bne.n	8002d0c <HAL_DMA_Init+0xbc>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <HAL_DMA_Init+0xbe>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 813b 	beq.w	8002f8a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a37      	ldr	r2, [pc, #220]	@ (8002e08 <HAL_DMA_Init+0x1b8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d04a      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a36      	ldr	r2, [pc, #216]	@ (8002e0c <HAL_DMA_Init+0x1bc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d045      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a34      	ldr	r2, [pc, #208]	@ (8002e10 <HAL_DMA_Init+0x1c0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d040      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a33      	ldr	r2, [pc, #204]	@ (8002e14 <HAL_DMA_Init+0x1c4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d03b      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a31      	ldr	r2, [pc, #196]	@ (8002e18 <HAL_DMA_Init+0x1c8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d036      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a30      	ldr	r2, [pc, #192]	@ (8002e1c <HAL_DMA_Init+0x1cc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d031      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a2e      	ldr	r2, [pc, #184]	@ (8002e20 <HAL_DMA_Init+0x1d0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d02c      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a2d      	ldr	r2, [pc, #180]	@ (8002e24 <HAL_DMA_Init+0x1d4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d027      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a2b      	ldr	r2, [pc, #172]	@ (8002e28 <HAL_DMA_Init+0x1d8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d022      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a2a      	ldr	r2, [pc, #168]	@ (8002e2c <HAL_DMA_Init+0x1dc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d01d      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a28      	ldr	r2, [pc, #160]	@ (8002e30 <HAL_DMA_Init+0x1e0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d018      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a27      	ldr	r2, [pc, #156]	@ (8002e34 <HAL_DMA_Init+0x1e4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d013      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a25      	ldr	r2, [pc, #148]	@ (8002e38 <HAL_DMA_Init+0x1e8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00e      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a24      	ldr	r2, [pc, #144]	@ (8002e3c <HAL_DMA_Init+0x1ec>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d009      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a22      	ldr	r2, [pc, #136]	@ (8002e40 <HAL_DMA_Init+0x1f0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d004      	beq.n	8002dc4 <HAL_DMA_Init+0x174>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a21      	ldr	r2, [pc, #132]	@ (8002e44 <HAL_DMA_Init+0x1f4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d108      	bne.n	8002dd6 <HAL_DMA_Init+0x186>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	e007      	b.n	8002de6 <HAL_DMA_Init+0x196>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002de6:	e02f      	b.n	8002e48 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002de8:	f7fe fb92 	bl	8001510 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b05      	cmp	r3, #5
 8002df4:	d928      	bls.n	8002e48 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2203      	movs	r2, #3
 8002e00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e246      	b.n	8003296 <HAL_DMA_Init+0x646>
 8002e08:	40020010 	.word	0x40020010
 8002e0c:	40020028 	.word	0x40020028
 8002e10:	40020040 	.word	0x40020040
 8002e14:	40020058 	.word	0x40020058
 8002e18:	40020070 	.word	0x40020070
 8002e1c:	40020088 	.word	0x40020088
 8002e20:	400200a0 	.word	0x400200a0
 8002e24:	400200b8 	.word	0x400200b8
 8002e28:	40020410 	.word	0x40020410
 8002e2c:	40020428 	.word	0x40020428
 8002e30:	40020440 	.word	0x40020440
 8002e34:	40020458 	.word	0x40020458
 8002e38:	40020470 	.word	0x40020470
 8002e3c:	40020488 	.word	0x40020488
 8002e40:	400204a0 	.word	0x400204a0
 8002e44:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1c8      	bne.n	8002de8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4b83      	ldr	r3, [pc, #524]	@ (8003070 <HAL_DMA_Init+0x420>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002e6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e86:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d107      	bne.n	8002eac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002eac:	4b71      	ldr	r3, [pc, #452]	@ (8003074 <HAL_DMA_Init+0x424>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b71      	ldr	r3, [pc, #452]	@ (8003078 <HAL_DMA_Init+0x428>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eb8:	d328      	bcc.n	8002f0c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b28      	cmp	r3, #40	@ 0x28
 8002ec0:	d903      	bls.n	8002eca <HAL_DMA_Init+0x27a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ec8:	d917      	bls.n	8002efa <HAL_DMA_Init+0x2aa>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ed0:	d903      	bls.n	8002eda <HAL_DMA_Init+0x28a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b42      	cmp	r3, #66	@ 0x42
 8002ed8:	d90f      	bls.n	8002efa <HAL_DMA_Init+0x2aa>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b46      	cmp	r3, #70	@ 0x46
 8002ee0:	d903      	bls.n	8002eea <HAL_DMA_Init+0x29a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b48      	cmp	r3, #72	@ 0x48
 8002ee8:	d907      	bls.n	8002efa <HAL_DMA_Init+0x2aa>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b4e      	cmp	r3, #78	@ 0x4e
 8002ef0:	d905      	bls.n	8002efe <HAL_DMA_Init+0x2ae>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b52      	cmp	r3, #82	@ 0x52
 8002ef8:	d801      	bhi.n	8002efe <HAL_DMA_Init+0x2ae>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <HAL_DMA_Init+0x2b0>
 8002efe:	2300      	movs	r3, #0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f0a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f023 0307 	bic.w	r3, r3, #7
 8002f22:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d117      	bne.n	8002f66 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00e      	beq.n	8002f66 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f001 f9b9 	bl	80042c0 <DMA_CheckFifoParam>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2240      	movs	r2, #64	@ 0x40
 8002f58:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e197      	b.n	8003296 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f001 f8f4 	bl	800415c <DMA_CalcBaseAndBitshift>
 8002f74:	4603      	mov	r3, r0
 8002f76:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	223f      	movs	r2, #63	@ 0x3f
 8002f82:	409a      	lsls	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	e0cd      	b.n	8003126 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a3b      	ldr	r2, [pc, #236]	@ (800307c <HAL_DMA_Init+0x42c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d022      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a39      	ldr	r2, [pc, #228]	@ (8003080 <HAL_DMA_Init+0x430>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01d      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a38      	ldr	r2, [pc, #224]	@ (8003084 <HAL_DMA_Init+0x434>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d018      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a36      	ldr	r2, [pc, #216]	@ (8003088 <HAL_DMA_Init+0x438>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d013      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a35      	ldr	r2, [pc, #212]	@ (800308c <HAL_DMA_Init+0x43c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00e      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a33      	ldr	r2, [pc, #204]	@ (8003090 <HAL_DMA_Init+0x440>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d009      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a32      	ldr	r2, [pc, #200]	@ (8003094 <HAL_DMA_Init+0x444>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d004      	beq.n	8002fda <HAL_DMA_Init+0x38a>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a30      	ldr	r2, [pc, #192]	@ (8003098 <HAL_DMA_Init+0x448>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d101      	bne.n	8002fde <HAL_DMA_Init+0x38e>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_DMA_Init+0x390>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 8097 	beq.w	8003114 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a24      	ldr	r2, [pc, #144]	@ (800307c <HAL_DMA_Init+0x42c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d021      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a22      	ldr	r2, [pc, #136]	@ (8003080 <HAL_DMA_Init+0x430>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d01c      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a21      	ldr	r2, [pc, #132]	@ (8003084 <HAL_DMA_Init+0x434>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d017      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1f      	ldr	r2, [pc, #124]	@ (8003088 <HAL_DMA_Init+0x438>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d012      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1e      	ldr	r2, [pc, #120]	@ (800308c <HAL_DMA_Init+0x43c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00d      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1c      	ldr	r2, [pc, #112]	@ (8003090 <HAL_DMA_Init+0x440>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d008      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1b      	ldr	r2, [pc, #108]	@ (8003094 <HAL_DMA_Init+0x444>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d003      	beq.n	8003034 <HAL_DMA_Init+0x3e4>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a19      	ldr	r2, [pc, #100]	@ (8003098 <HAL_DMA_Init+0x448>)
 8003032:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4b13      	ldr	r3, [pc, #76]	@ (800309c <HAL_DMA_Init+0x44c>)
 8003050:	4013      	ands	r3, r2
 8003052:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b40      	cmp	r3, #64	@ 0x40
 800305a:	d021      	beq.n	80030a0 <HAL_DMA_Init+0x450>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b80      	cmp	r3, #128	@ 0x80
 8003062:	d102      	bne.n	800306a <HAL_DMA_Init+0x41a>
 8003064:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003068:	e01b      	b.n	80030a2 <HAL_DMA_Init+0x452>
 800306a:	2300      	movs	r3, #0
 800306c:	e019      	b.n	80030a2 <HAL_DMA_Init+0x452>
 800306e:	bf00      	nop
 8003070:	fe10803f 	.word	0xfe10803f
 8003074:	5c001000 	.word	0x5c001000
 8003078:	ffff0000 	.word	0xffff0000
 800307c:	58025408 	.word	0x58025408
 8003080:	5802541c 	.word	0x5802541c
 8003084:	58025430 	.word	0x58025430
 8003088:	58025444 	.word	0x58025444
 800308c:	58025458 	.word	0x58025458
 8003090:	5802546c 	.word	0x5802546c
 8003094:	58025480 	.word	0x58025480
 8003098:	58025494 	.word	0x58025494
 800309c:	fffe000f 	.word	0xfffe000f
 80030a0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68d2      	ldr	r2, [r2, #12]
 80030a6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030d0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b6e      	ldr	r3, [pc, #440]	@ (80032a0 <HAL_DMA_Init+0x650>)
 80030e8:	4413      	add	r3, r2
 80030ea:	4a6e      	ldr	r2, [pc, #440]	@ (80032a4 <HAL_DMA_Init+0x654>)
 80030ec:	fba2 2303 	umull	r2, r3, r2, r3
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	009a      	lsls	r2, r3, #2
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f001 f82f 	bl	800415c <DMA_CalcBaseAndBitshift>
 80030fe:	4603      	mov	r3, r0
 8003100:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003106:	f003 031f 	and.w	r3, r3, #31
 800310a:	2201      	movs	r2, #1
 800310c:	409a      	lsls	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	e008      	b.n	8003126 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2240      	movs	r2, #64	@ 0x40
 8003118:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2203      	movs	r2, #3
 800311e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e0b7      	b.n	8003296 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a5f      	ldr	r2, [pc, #380]	@ (80032a8 <HAL_DMA_Init+0x658>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d072      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a5d      	ldr	r2, [pc, #372]	@ (80032ac <HAL_DMA_Init+0x65c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d06d      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a5c      	ldr	r2, [pc, #368]	@ (80032b0 <HAL_DMA_Init+0x660>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d068      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a5a      	ldr	r2, [pc, #360]	@ (80032b4 <HAL_DMA_Init+0x664>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d063      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a59      	ldr	r2, [pc, #356]	@ (80032b8 <HAL_DMA_Init+0x668>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d05e      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a57      	ldr	r2, [pc, #348]	@ (80032bc <HAL_DMA_Init+0x66c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d059      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a56      	ldr	r2, [pc, #344]	@ (80032c0 <HAL_DMA_Init+0x670>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d054      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a54      	ldr	r2, [pc, #336]	@ (80032c4 <HAL_DMA_Init+0x674>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d04f      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a53      	ldr	r2, [pc, #332]	@ (80032c8 <HAL_DMA_Init+0x678>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d04a      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a51      	ldr	r2, [pc, #324]	@ (80032cc <HAL_DMA_Init+0x67c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d045      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a50      	ldr	r2, [pc, #320]	@ (80032d0 <HAL_DMA_Init+0x680>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d040      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a4e      	ldr	r2, [pc, #312]	@ (80032d4 <HAL_DMA_Init+0x684>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d03b      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a4d      	ldr	r2, [pc, #308]	@ (80032d8 <HAL_DMA_Init+0x688>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d036      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a4b      	ldr	r2, [pc, #300]	@ (80032dc <HAL_DMA_Init+0x68c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d031      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a4a      	ldr	r2, [pc, #296]	@ (80032e0 <HAL_DMA_Init+0x690>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d02c      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a48      	ldr	r2, [pc, #288]	@ (80032e4 <HAL_DMA_Init+0x694>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d027      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a47      	ldr	r2, [pc, #284]	@ (80032e8 <HAL_DMA_Init+0x698>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d022      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a45      	ldr	r2, [pc, #276]	@ (80032ec <HAL_DMA_Init+0x69c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d01d      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a44      	ldr	r2, [pc, #272]	@ (80032f0 <HAL_DMA_Init+0x6a0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d018      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a42      	ldr	r2, [pc, #264]	@ (80032f4 <HAL_DMA_Init+0x6a4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a41      	ldr	r2, [pc, #260]	@ (80032f8 <HAL_DMA_Init+0x6a8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00e      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a3f      	ldr	r2, [pc, #252]	@ (80032fc <HAL_DMA_Init+0x6ac>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d009      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a3e      	ldr	r2, [pc, #248]	@ (8003300 <HAL_DMA_Init+0x6b0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d004      	beq.n	8003216 <HAL_DMA_Init+0x5c6>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a3c      	ldr	r2, [pc, #240]	@ (8003304 <HAL_DMA_Init+0x6b4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d101      	bne.n	800321a <HAL_DMA_Init+0x5ca>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <HAL_DMA_Init+0x5cc>
 800321a:	2300      	movs	r3, #0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d032      	beq.n	8003286 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f001 f8c9 	bl	80043b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b80      	cmp	r3, #128	@ 0x80
 800322c:	d102      	bne.n	8003234 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003248:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d010      	beq.n	8003274 <HAL_DMA_Init+0x624>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b08      	cmp	r3, #8
 8003258:	d80c      	bhi.n	8003274 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f001 f946 	bl	80044ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	e008      	b.n	8003286 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	a7fdabf8 	.word	0xa7fdabf8
 80032a4:	cccccccd 	.word	0xcccccccd
 80032a8:	40020010 	.word	0x40020010
 80032ac:	40020028 	.word	0x40020028
 80032b0:	40020040 	.word	0x40020040
 80032b4:	40020058 	.word	0x40020058
 80032b8:	40020070 	.word	0x40020070
 80032bc:	40020088 	.word	0x40020088
 80032c0:	400200a0 	.word	0x400200a0
 80032c4:	400200b8 	.word	0x400200b8
 80032c8:	40020410 	.word	0x40020410
 80032cc:	40020428 	.word	0x40020428
 80032d0:	40020440 	.word	0x40020440
 80032d4:	40020458 	.word	0x40020458
 80032d8:	40020470 	.word	0x40020470
 80032dc:	40020488 	.word	0x40020488
 80032e0:	400204a0 	.word	0x400204a0
 80032e4:	400204b8 	.word	0x400204b8
 80032e8:	58025408 	.word	0x58025408
 80032ec:	5802541c 	.word	0x5802541c
 80032f0:	58025430 	.word	0x58025430
 80032f4:	58025444 	.word	0x58025444
 80032f8:	58025458 	.word	0x58025458
 80032fc:	5802546c 	.word	0x5802546c
 8003300:	58025480 	.word	0x58025480
 8003304:	58025494 	.word	0x58025494

08003308 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	@ 0x28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003314:	4b67      	ldr	r3, [pc, #412]	@ (80034b4 <HAL_DMA_IRQHandler+0x1ac>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a67      	ldr	r2, [pc, #412]	@ (80034b8 <HAL_DMA_IRQHandler+0x1b0>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	0a9b      	lsrs	r3, r3, #10
 8003320:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003326:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a5f      	ldr	r2, [pc, #380]	@ (80034bc <HAL_DMA_IRQHandler+0x1b4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d04a      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a5d      	ldr	r2, [pc, #372]	@ (80034c0 <HAL_DMA_IRQHandler+0x1b8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d045      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a5c      	ldr	r2, [pc, #368]	@ (80034c4 <HAL_DMA_IRQHandler+0x1bc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d040      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a5a      	ldr	r2, [pc, #360]	@ (80034c8 <HAL_DMA_IRQHandler+0x1c0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d03b      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a59      	ldr	r2, [pc, #356]	@ (80034cc <HAL_DMA_IRQHandler+0x1c4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d036      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a57      	ldr	r2, [pc, #348]	@ (80034d0 <HAL_DMA_IRQHandler+0x1c8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d031      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a56      	ldr	r2, [pc, #344]	@ (80034d4 <HAL_DMA_IRQHandler+0x1cc>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d02c      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a54      	ldr	r2, [pc, #336]	@ (80034d8 <HAL_DMA_IRQHandler+0x1d0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d027      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a53      	ldr	r2, [pc, #332]	@ (80034dc <HAL_DMA_IRQHandler+0x1d4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d022      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a51      	ldr	r2, [pc, #324]	@ (80034e0 <HAL_DMA_IRQHandler+0x1d8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d01d      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a50      	ldr	r2, [pc, #320]	@ (80034e4 <HAL_DMA_IRQHandler+0x1dc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d018      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a4e      	ldr	r2, [pc, #312]	@ (80034e8 <HAL_DMA_IRQHandler+0x1e0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d013      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a4d      	ldr	r2, [pc, #308]	@ (80034ec <HAL_DMA_IRQHandler+0x1e4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00e      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a4b      	ldr	r2, [pc, #300]	@ (80034f0 <HAL_DMA_IRQHandler+0x1e8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d009      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a4a      	ldr	r2, [pc, #296]	@ (80034f4 <HAL_DMA_IRQHandler+0x1ec>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d004      	beq.n	80033da <HAL_DMA_IRQHandler+0xd2>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a48      	ldr	r2, [pc, #288]	@ (80034f8 <HAL_DMA_IRQHandler+0x1f0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d101      	bne.n	80033de <HAL_DMA_IRQHandler+0xd6>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <HAL_DMA_IRQHandler+0xd8>
 80033de:	2300      	movs	r3, #0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 842b 	beq.w	8003c3c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	2208      	movs	r2, #8
 80033f0:	409a      	lsls	r2, r3
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 80a2 	beq.w	8003540 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a2e      	ldr	r2, [pc, #184]	@ (80034bc <HAL_DMA_IRQHandler+0x1b4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d04a      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a2d      	ldr	r2, [pc, #180]	@ (80034c0 <HAL_DMA_IRQHandler+0x1b8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d045      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a2b      	ldr	r2, [pc, #172]	@ (80034c4 <HAL_DMA_IRQHandler+0x1bc>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d040      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a2a      	ldr	r2, [pc, #168]	@ (80034c8 <HAL_DMA_IRQHandler+0x1c0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d03b      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a28      	ldr	r2, [pc, #160]	@ (80034cc <HAL_DMA_IRQHandler+0x1c4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d036      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a27      	ldr	r2, [pc, #156]	@ (80034d0 <HAL_DMA_IRQHandler+0x1c8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d031      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a25      	ldr	r2, [pc, #148]	@ (80034d4 <HAL_DMA_IRQHandler+0x1cc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d02c      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a24      	ldr	r2, [pc, #144]	@ (80034d8 <HAL_DMA_IRQHandler+0x1d0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d027      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a22      	ldr	r2, [pc, #136]	@ (80034dc <HAL_DMA_IRQHandler+0x1d4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d022      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a21      	ldr	r2, [pc, #132]	@ (80034e0 <HAL_DMA_IRQHandler+0x1d8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d01d      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1f      	ldr	r2, [pc, #124]	@ (80034e4 <HAL_DMA_IRQHandler+0x1dc>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d018      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1e      	ldr	r2, [pc, #120]	@ (80034e8 <HAL_DMA_IRQHandler+0x1e0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d013      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1c      	ldr	r2, [pc, #112]	@ (80034ec <HAL_DMA_IRQHandler+0x1e4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00e      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1b      	ldr	r2, [pc, #108]	@ (80034f0 <HAL_DMA_IRQHandler+0x1e8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d009      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a19      	ldr	r2, [pc, #100]	@ (80034f4 <HAL_DMA_IRQHandler+0x1ec>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_DMA_IRQHandler+0x194>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a18      	ldr	r2, [pc, #96]	@ (80034f8 <HAL_DMA_IRQHandler+0x1f0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d12f      	bne.n	80034fc <HAL_DMA_IRQHandler+0x1f4>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	bf14      	ite	ne
 80034aa:	2301      	movne	r3, #1
 80034ac:	2300      	moveq	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	e02e      	b.n	8003510 <HAL_DMA_IRQHandler+0x208>
 80034b2:	bf00      	nop
 80034b4:	24000000 	.word	0x24000000
 80034b8:	1b4e81b5 	.word	0x1b4e81b5
 80034bc:	40020010 	.word	0x40020010
 80034c0:	40020028 	.word	0x40020028
 80034c4:	40020040 	.word	0x40020040
 80034c8:	40020058 	.word	0x40020058
 80034cc:	40020070 	.word	0x40020070
 80034d0:	40020088 	.word	0x40020088
 80034d4:	400200a0 	.word	0x400200a0
 80034d8:	400200b8 	.word	0x400200b8
 80034dc:	40020410 	.word	0x40020410
 80034e0:	40020428 	.word	0x40020428
 80034e4:	40020440 	.word	0x40020440
 80034e8:	40020458 	.word	0x40020458
 80034ec:	40020470 	.word	0x40020470
 80034f0:	40020488 	.word	0x40020488
 80034f4:	400204a0 	.word	0x400204a0
 80034f8:	400204b8 	.word	0x400204b8
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	bf14      	ite	ne
 800350a:	2301      	movne	r3, #1
 800350c:	2300      	moveq	r3, #0
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d015      	beq.n	8003540 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0204 	bic.w	r2, r2, #4
 8003522:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	2208      	movs	r2, #8
 800352e:	409a      	lsls	r2, r3
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003538:	f043 0201 	orr.w	r2, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	fa22 f303 	lsr.w	r3, r2, r3
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d06e      	beq.n	8003634 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a69      	ldr	r2, [pc, #420]	@ (8003700 <HAL_DMA_IRQHandler+0x3f8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d04a      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a67      	ldr	r2, [pc, #412]	@ (8003704 <HAL_DMA_IRQHandler+0x3fc>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d045      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a66      	ldr	r2, [pc, #408]	@ (8003708 <HAL_DMA_IRQHandler+0x400>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d040      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a64      	ldr	r2, [pc, #400]	@ (800370c <HAL_DMA_IRQHandler+0x404>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d03b      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a63      	ldr	r2, [pc, #396]	@ (8003710 <HAL_DMA_IRQHandler+0x408>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d036      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a61      	ldr	r2, [pc, #388]	@ (8003714 <HAL_DMA_IRQHandler+0x40c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d031      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a60      	ldr	r2, [pc, #384]	@ (8003718 <HAL_DMA_IRQHandler+0x410>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d02c      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a5e      	ldr	r2, [pc, #376]	@ (800371c <HAL_DMA_IRQHandler+0x414>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d027      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a5d      	ldr	r2, [pc, #372]	@ (8003720 <HAL_DMA_IRQHandler+0x418>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d022      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a5b      	ldr	r2, [pc, #364]	@ (8003724 <HAL_DMA_IRQHandler+0x41c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d01d      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a5a      	ldr	r2, [pc, #360]	@ (8003728 <HAL_DMA_IRQHandler+0x420>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d018      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a58      	ldr	r2, [pc, #352]	@ (800372c <HAL_DMA_IRQHandler+0x424>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d013      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a57      	ldr	r2, [pc, #348]	@ (8003730 <HAL_DMA_IRQHandler+0x428>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00e      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a55      	ldr	r2, [pc, #340]	@ (8003734 <HAL_DMA_IRQHandler+0x42c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d009      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a54      	ldr	r2, [pc, #336]	@ (8003738 <HAL_DMA_IRQHandler+0x430>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d004      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x2ee>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a52      	ldr	r2, [pc, #328]	@ (800373c <HAL_DMA_IRQHandler+0x434>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d10a      	bne.n	800360c <HAL_DMA_IRQHandler+0x304>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	e003      	b.n	8003614 <HAL_DMA_IRQHandler+0x30c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2300      	movs	r3, #0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00d      	beq.n	8003634 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	2201      	movs	r2, #1
 8003622:	409a      	lsls	r2, r3
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362c:	f043 0202 	orr.w	r2, r3, #2
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003638:	f003 031f 	and.w	r3, r3, #31
 800363c:	2204      	movs	r2, #4
 800363e:	409a      	lsls	r2, r3
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 808f 	beq.w	8003768 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a2c      	ldr	r2, [pc, #176]	@ (8003700 <HAL_DMA_IRQHandler+0x3f8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d04a      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a2a      	ldr	r2, [pc, #168]	@ (8003704 <HAL_DMA_IRQHandler+0x3fc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d045      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a29      	ldr	r2, [pc, #164]	@ (8003708 <HAL_DMA_IRQHandler+0x400>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d040      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a27      	ldr	r2, [pc, #156]	@ (800370c <HAL_DMA_IRQHandler+0x404>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d03b      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a26      	ldr	r2, [pc, #152]	@ (8003710 <HAL_DMA_IRQHandler+0x408>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d036      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a24      	ldr	r2, [pc, #144]	@ (8003714 <HAL_DMA_IRQHandler+0x40c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d031      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a23      	ldr	r2, [pc, #140]	@ (8003718 <HAL_DMA_IRQHandler+0x410>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d02c      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a21      	ldr	r2, [pc, #132]	@ (800371c <HAL_DMA_IRQHandler+0x414>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d027      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a20      	ldr	r2, [pc, #128]	@ (8003720 <HAL_DMA_IRQHandler+0x418>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d022      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003724 <HAL_DMA_IRQHandler+0x41c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d01d      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003728 <HAL_DMA_IRQHandler+0x420>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d018      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1b      	ldr	r2, [pc, #108]	@ (800372c <HAL_DMA_IRQHandler+0x424>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003730 <HAL_DMA_IRQHandler+0x428>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00e      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a18      	ldr	r2, [pc, #96]	@ (8003734 <HAL_DMA_IRQHandler+0x42c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d009      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a17      	ldr	r2, [pc, #92]	@ (8003738 <HAL_DMA_IRQHandler+0x430>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d004      	beq.n	80036ea <HAL_DMA_IRQHandler+0x3e2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a15      	ldr	r2, [pc, #84]	@ (800373c <HAL_DMA_IRQHandler+0x434>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d12a      	bne.n	8003740 <HAL_DMA_IRQHandler+0x438>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bf14      	ite	ne
 80036f8:	2301      	movne	r3, #1
 80036fa:	2300      	moveq	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	e023      	b.n	8003748 <HAL_DMA_IRQHandler+0x440>
 8003700:	40020010 	.word	0x40020010
 8003704:	40020028 	.word	0x40020028
 8003708:	40020040 	.word	0x40020040
 800370c:	40020058 	.word	0x40020058
 8003710:	40020070 	.word	0x40020070
 8003714:	40020088 	.word	0x40020088
 8003718:	400200a0 	.word	0x400200a0
 800371c:	400200b8 	.word	0x400200b8
 8003720:	40020410 	.word	0x40020410
 8003724:	40020428 	.word	0x40020428
 8003728:	40020440 	.word	0x40020440
 800372c:	40020458 	.word	0x40020458
 8003730:	40020470 	.word	0x40020470
 8003734:	40020488 	.word	0x40020488
 8003738:	400204a0 	.word	0x400204a0
 800373c:	400204b8 	.word	0x400204b8
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2300      	movs	r3, #0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00d      	beq.n	8003768 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	2204      	movs	r2, #4
 8003756:	409a      	lsls	r2, r3
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003760:	f043 0204 	orr.w	r2, r3, #4
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	2210      	movs	r2, #16
 8003772:	409a      	lsls	r2, r3
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80a6 	beq.w	80038ca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a85      	ldr	r2, [pc, #532]	@ (8003998 <HAL_DMA_IRQHandler+0x690>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d04a      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a83      	ldr	r2, [pc, #524]	@ (800399c <HAL_DMA_IRQHandler+0x694>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d045      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a82      	ldr	r2, [pc, #520]	@ (80039a0 <HAL_DMA_IRQHandler+0x698>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d040      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a80      	ldr	r2, [pc, #512]	@ (80039a4 <HAL_DMA_IRQHandler+0x69c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d03b      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a7f      	ldr	r2, [pc, #508]	@ (80039a8 <HAL_DMA_IRQHandler+0x6a0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d036      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a7d      	ldr	r2, [pc, #500]	@ (80039ac <HAL_DMA_IRQHandler+0x6a4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d031      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a7c      	ldr	r2, [pc, #496]	@ (80039b0 <HAL_DMA_IRQHandler+0x6a8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d02c      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a7a      	ldr	r2, [pc, #488]	@ (80039b4 <HAL_DMA_IRQHandler+0x6ac>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d027      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a79      	ldr	r2, [pc, #484]	@ (80039b8 <HAL_DMA_IRQHandler+0x6b0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d022      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a77      	ldr	r2, [pc, #476]	@ (80039bc <HAL_DMA_IRQHandler+0x6b4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d01d      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a76      	ldr	r2, [pc, #472]	@ (80039c0 <HAL_DMA_IRQHandler+0x6b8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d018      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a74      	ldr	r2, [pc, #464]	@ (80039c4 <HAL_DMA_IRQHandler+0x6bc>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a73      	ldr	r2, [pc, #460]	@ (80039c8 <HAL_DMA_IRQHandler+0x6c0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00e      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a71      	ldr	r2, [pc, #452]	@ (80039cc <HAL_DMA_IRQHandler+0x6c4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d009      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a70      	ldr	r2, [pc, #448]	@ (80039d0 <HAL_DMA_IRQHandler+0x6c8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d004      	beq.n	800381e <HAL_DMA_IRQHandler+0x516>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a6e      	ldr	r2, [pc, #440]	@ (80039d4 <HAL_DMA_IRQHandler+0x6cc>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d10a      	bne.n	8003834 <HAL_DMA_IRQHandler+0x52c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf14      	ite	ne
 800382c:	2301      	movne	r3, #1
 800382e:	2300      	moveq	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e009      	b.n	8003848 <HAL_DMA_IRQHandler+0x540>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	bf14      	ite	ne
 8003842:	2301      	movne	r3, #1
 8003844:	2300      	moveq	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d03e      	beq.n	80038ca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003850:	f003 031f 	and.w	r3, r3, #31
 8003854:	2210      	movs	r2, #16
 8003856:	409a      	lsls	r2, r3
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d018      	beq.n	800389c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d108      	bne.n	800388a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	2b00      	cmp	r3, #0
 800387e:	d024      	beq.n	80038ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
 8003888:	e01f      	b.n	80038ca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800388e:	2b00      	cmp	r3, #0
 8003890:	d01b      	beq.n	80038ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	4798      	blx	r3
 800389a:	e016      	b.n	80038ca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d107      	bne.n	80038ba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0208 	bic.w	r2, r2, #8
 80038b8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ce:	f003 031f 	and.w	r3, r3, #31
 80038d2:	2220      	movs	r2, #32
 80038d4:	409a      	lsls	r2, r3
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 8110 	beq.w	8003b00 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003998 <HAL_DMA_IRQHandler+0x690>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d04a      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a2b      	ldr	r2, [pc, #172]	@ (800399c <HAL_DMA_IRQHandler+0x694>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d045      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a29      	ldr	r2, [pc, #164]	@ (80039a0 <HAL_DMA_IRQHandler+0x698>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d040      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a28      	ldr	r2, [pc, #160]	@ (80039a4 <HAL_DMA_IRQHandler+0x69c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d03b      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a26      	ldr	r2, [pc, #152]	@ (80039a8 <HAL_DMA_IRQHandler+0x6a0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d036      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a25      	ldr	r2, [pc, #148]	@ (80039ac <HAL_DMA_IRQHandler+0x6a4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d031      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a23      	ldr	r2, [pc, #140]	@ (80039b0 <HAL_DMA_IRQHandler+0x6a8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d02c      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a22      	ldr	r2, [pc, #136]	@ (80039b4 <HAL_DMA_IRQHandler+0x6ac>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d027      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a20      	ldr	r2, [pc, #128]	@ (80039b8 <HAL_DMA_IRQHandler+0x6b0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d022      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1f      	ldr	r2, [pc, #124]	@ (80039bc <HAL_DMA_IRQHandler+0x6b4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d01d      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1d      	ldr	r2, [pc, #116]	@ (80039c0 <HAL_DMA_IRQHandler+0x6b8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d018      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1c      	ldr	r2, [pc, #112]	@ (80039c4 <HAL_DMA_IRQHandler+0x6bc>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1a      	ldr	r2, [pc, #104]	@ (80039c8 <HAL_DMA_IRQHandler+0x6c0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00e      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a19      	ldr	r2, [pc, #100]	@ (80039cc <HAL_DMA_IRQHandler+0x6c4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d009      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a17      	ldr	r2, [pc, #92]	@ (80039d0 <HAL_DMA_IRQHandler+0x6c8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d004      	beq.n	8003980 <HAL_DMA_IRQHandler+0x678>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a16      	ldr	r2, [pc, #88]	@ (80039d4 <HAL_DMA_IRQHandler+0x6cc>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d12b      	bne.n	80039d8 <HAL_DMA_IRQHandler+0x6d0>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b00      	cmp	r3, #0
 800398c:	bf14      	ite	ne
 800398e:	2301      	movne	r3, #1
 8003990:	2300      	moveq	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	e02a      	b.n	80039ec <HAL_DMA_IRQHandler+0x6e4>
 8003996:	bf00      	nop
 8003998:	40020010 	.word	0x40020010
 800399c:	40020028 	.word	0x40020028
 80039a0:	40020040 	.word	0x40020040
 80039a4:	40020058 	.word	0x40020058
 80039a8:	40020070 	.word	0x40020070
 80039ac:	40020088 	.word	0x40020088
 80039b0:	400200a0 	.word	0x400200a0
 80039b4:	400200b8 	.word	0x400200b8
 80039b8:	40020410 	.word	0x40020410
 80039bc:	40020428 	.word	0x40020428
 80039c0:	40020440 	.word	0x40020440
 80039c4:	40020458 	.word	0x40020458
 80039c8:	40020470 	.word	0x40020470
 80039cc:	40020488 	.word	0x40020488
 80039d0:	400204a0 	.word	0x400204a0
 80039d4:	400204b8 	.word	0x400204b8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	bf14      	ite	ne
 80039e6:	2301      	movne	r3, #1
 80039e8:	2300      	moveq	r3, #0
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8087 	beq.w	8003b00 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	2220      	movs	r2, #32
 80039fc:	409a      	lsls	r2, r3
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d139      	bne.n	8003a82 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0216 	bic.w	r2, r2, #22
 8003a1c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695a      	ldr	r2, [r3, #20]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a2c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d103      	bne.n	8003a3e <HAL_DMA_IRQHandler+0x736>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0208 	bic.w	r2, r2, #8
 8003a4c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	223f      	movs	r2, #63	@ 0x3f
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 834a 	beq.w	800410c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	4798      	blx	r3
          }
          return;
 8003a80:	e344      	b.n	800410c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d018      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d108      	bne.n	8003ab0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d02c      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	4798      	blx	r3
 8003aae:	e027      	b.n	8003b00 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d023      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	4798      	blx	r3
 8003ac0:	e01e      	b.n	8003b00 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10f      	bne.n	8003af0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0210 	bic.w	r2, r2, #16
 8003ade:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 8306 	beq.w	8004116 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 8088 	beq.w	8003c28 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2204      	movs	r2, #4
 8003b1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a7a      	ldr	r2, [pc, #488]	@ (8003d10 <HAL_DMA_IRQHandler+0xa08>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d04a      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a79      	ldr	r2, [pc, #484]	@ (8003d14 <HAL_DMA_IRQHandler+0xa0c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d045      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a77      	ldr	r2, [pc, #476]	@ (8003d18 <HAL_DMA_IRQHandler+0xa10>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d040      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a76      	ldr	r2, [pc, #472]	@ (8003d1c <HAL_DMA_IRQHandler+0xa14>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d03b      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a74      	ldr	r2, [pc, #464]	@ (8003d20 <HAL_DMA_IRQHandler+0xa18>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d036      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a73      	ldr	r2, [pc, #460]	@ (8003d24 <HAL_DMA_IRQHandler+0xa1c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d031      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a71      	ldr	r2, [pc, #452]	@ (8003d28 <HAL_DMA_IRQHandler+0xa20>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d02c      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a70      	ldr	r2, [pc, #448]	@ (8003d2c <HAL_DMA_IRQHandler+0xa24>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d027      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a6e      	ldr	r2, [pc, #440]	@ (8003d30 <HAL_DMA_IRQHandler+0xa28>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d022      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a6d      	ldr	r2, [pc, #436]	@ (8003d34 <HAL_DMA_IRQHandler+0xa2c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d01d      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a6b      	ldr	r2, [pc, #428]	@ (8003d38 <HAL_DMA_IRQHandler+0xa30>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d018      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a6a      	ldr	r2, [pc, #424]	@ (8003d3c <HAL_DMA_IRQHandler+0xa34>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d013      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a68      	ldr	r2, [pc, #416]	@ (8003d40 <HAL_DMA_IRQHandler+0xa38>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00e      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a67      	ldr	r2, [pc, #412]	@ (8003d44 <HAL_DMA_IRQHandler+0xa3c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d009      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a65      	ldr	r2, [pc, #404]	@ (8003d48 <HAL_DMA_IRQHandler+0xa40>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d004      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x8b8>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a64      	ldr	r2, [pc, #400]	@ (8003d4c <HAL_DMA_IRQHandler+0xa44>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d108      	bne.n	8003bd2 <HAL_DMA_IRQHandler+0x8ca>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e007      	b.n	8003be2 <HAL_DMA_IRQHandler+0x8da>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	3301      	adds	r3, #1
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d307      	bcc.n	8003bfe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f2      	bne.n	8003be2 <HAL_DMA_IRQHandler+0x8da>
 8003bfc:	e000      	b.n	8003c00 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003bfe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d004      	beq.n	8003c18 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2203      	movs	r2, #3
 8003c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003c16:	e003      	b.n	8003c20 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8272 	beq.w	8004116 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	4798      	blx	r3
 8003c3a:	e26c      	b.n	8004116 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a43      	ldr	r2, [pc, #268]	@ (8003d50 <HAL_DMA_IRQHandler+0xa48>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d022      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a42      	ldr	r2, [pc, #264]	@ (8003d54 <HAL_DMA_IRQHandler+0xa4c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d01d      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a40      	ldr	r2, [pc, #256]	@ (8003d58 <HAL_DMA_IRQHandler+0xa50>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d018      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a3f      	ldr	r2, [pc, #252]	@ (8003d5c <HAL_DMA_IRQHandler+0xa54>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d013      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a3d      	ldr	r2, [pc, #244]	@ (8003d60 <HAL_DMA_IRQHandler+0xa58>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00e      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a3c      	ldr	r2, [pc, #240]	@ (8003d64 <HAL_DMA_IRQHandler+0xa5c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d009      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a3a      	ldr	r2, [pc, #232]	@ (8003d68 <HAL_DMA_IRQHandler+0xa60>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d004      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x984>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a39      	ldr	r2, [pc, #228]	@ (8003d6c <HAL_DMA_IRQHandler+0xa64>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d101      	bne.n	8003c90 <HAL_DMA_IRQHandler+0x988>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <HAL_DMA_IRQHandler+0x98a>
 8003c90:	2300      	movs	r3, #0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 823f 	beq.w	8004116 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	2204      	movs	r2, #4
 8003caa:	409a      	lsls	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80cd 	beq.w	8003e50 <HAL_DMA_IRQHandler+0xb48>
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80c7 	beq.w	8003e50 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	2204      	movs	r2, #4
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d049      	beq.n	8003d70 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8210 	beq.w	8004110 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cf8:	e20a      	b.n	8004110 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 8206 	beq.w	8004110 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d0c:	e200      	b.n	8004110 <HAL_DMA_IRQHandler+0xe08>
 8003d0e:	bf00      	nop
 8003d10:	40020010 	.word	0x40020010
 8003d14:	40020028 	.word	0x40020028
 8003d18:	40020040 	.word	0x40020040
 8003d1c:	40020058 	.word	0x40020058
 8003d20:	40020070 	.word	0x40020070
 8003d24:	40020088 	.word	0x40020088
 8003d28:	400200a0 	.word	0x400200a0
 8003d2c:	400200b8 	.word	0x400200b8
 8003d30:	40020410 	.word	0x40020410
 8003d34:	40020428 	.word	0x40020428
 8003d38:	40020440 	.word	0x40020440
 8003d3c:	40020458 	.word	0x40020458
 8003d40:	40020470 	.word	0x40020470
 8003d44:	40020488 	.word	0x40020488
 8003d48:	400204a0 	.word	0x400204a0
 8003d4c:	400204b8 	.word	0x400204b8
 8003d50:	58025408 	.word	0x58025408
 8003d54:	5802541c 	.word	0x5802541c
 8003d58:	58025430 	.word	0x58025430
 8003d5c:	58025444 	.word	0x58025444
 8003d60:	58025458 	.word	0x58025458
 8003d64:	5802546c 	.word	0x5802546c
 8003d68:	58025480 	.word	0x58025480
 8003d6c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d160      	bne.n	8003e3c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a7f      	ldr	r2, [pc, #508]	@ (8003f7c <HAL_DMA_IRQHandler+0xc74>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d04a      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a7d      	ldr	r2, [pc, #500]	@ (8003f80 <HAL_DMA_IRQHandler+0xc78>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d045      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a7c      	ldr	r2, [pc, #496]	@ (8003f84 <HAL_DMA_IRQHandler+0xc7c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d040      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a7a      	ldr	r2, [pc, #488]	@ (8003f88 <HAL_DMA_IRQHandler+0xc80>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d03b      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a79      	ldr	r2, [pc, #484]	@ (8003f8c <HAL_DMA_IRQHandler+0xc84>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d036      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a77      	ldr	r2, [pc, #476]	@ (8003f90 <HAL_DMA_IRQHandler+0xc88>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d031      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a76      	ldr	r2, [pc, #472]	@ (8003f94 <HAL_DMA_IRQHandler+0xc8c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d02c      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a74      	ldr	r2, [pc, #464]	@ (8003f98 <HAL_DMA_IRQHandler+0xc90>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d027      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a73      	ldr	r2, [pc, #460]	@ (8003f9c <HAL_DMA_IRQHandler+0xc94>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d022      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a71      	ldr	r2, [pc, #452]	@ (8003fa0 <HAL_DMA_IRQHandler+0xc98>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01d      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a70      	ldr	r2, [pc, #448]	@ (8003fa4 <HAL_DMA_IRQHandler+0xc9c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d018      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a6e      	ldr	r2, [pc, #440]	@ (8003fa8 <HAL_DMA_IRQHandler+0xca0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a6d      	ldr	r2, [pc, #436]	@ (8003fac <HAL_DMA_IRQHandler+0xca4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00e      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a6b      	ldr	r2, [pc, #428]	@ (8003fb0 <HAL_DMA_IRQHandler+0xca8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d009      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a6a      	ldr	r2, [pc, #424]	@ (8003fb4 <HAL_DMA_IRQHandler+0xcac>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xb12>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a68      	ldr	r2, [pc, #416]	@ (8003fb8 <HAL_DMA_IRQHandler+0xcb0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d108      	bne.n	8003e2c <HAL_DMA_IRQHandler+0xb24>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0208 	bic.w	r2, r2, #8
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	e007      	b.n	8003e3c <HAL_DMA_IRQHandler+0xb34>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0204 	bic.w	r2, r2, #4
 8003e3a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 8165 	beq.w	8004110 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e4e:	e15f      	b.n	8004110 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	2202      	movs	r2, #2
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 80c5 	beq.w	8003ff0 <HAL_DMA_IRQHandler+0xce8>
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80bf 	beq.w	8003ff0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e76:	f003 031f 	and.w	r3, r3, #31
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	409a      	lsls	r2, r3
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d018      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 813a 	beq.w	8004114 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ea8:	e134      	b.n	8004114 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 8130 	beq.w	8004114 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ebc:	e12a      	b.n	8004114 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f040 8089 	bne.w	8003fdc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a2b      	ldr	r2, [pc, #172]	@ (8003f7c <HAL_DMA_IRQHandler+0xc74>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d04a      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a29      	ldr	r2, [pc, #164]	@ (8003f80 <HAL_DMA_IRQHandler+0xc78>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d045      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a28      	ldr	r2, [pc, #160]	@ (8003f84 <HAL_DMA_IRQHandler+0xc7c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d040      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a26      	ldr	r2, [pc, #152]	@ (8003f88 <HAL_DMA_IRQHandler+0xc80>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d03b      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a25      	ldr	r2, [pc, #148]	@ (8003f8c <HAL_DMA_IRQHandler+0xc84>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d036      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a23      	ldr	r2, [pc, #140]	@ (8003f90 <HAL_DMA_IRQHandler+0xc88>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d031      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a22      	ldr	r2, [pc, #136]	@ (8003f94 <HAL_DMA_IRQHandler+0xc8c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d02c      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a20      	ldr	r2, [pc, #128]	@ (8003f98 <HAL_DMA_IRQHandler+0xc90>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d027      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8003f9c <HAL_DMA_IRQHandler+0xc94>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d022      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa0 <HAL_DMA_IRQHandler+0xc98>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d01d      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1c      	ldr	r2, [pc, #112]	@ (8003fa4 <HAL_DMA_IRQHandler+0xc9c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d018      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1a      	ldr	r2, [pc, #104]	@ (8003fa8 <HAL_DMA_IRQHandler+0xca0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d013      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a19      	ldr	r2, [pc, #100]	@ (8003fac <HAL_DMA_IRQHandler+0xca4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00e      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a17      	ldr	r2, [pc, #92]	@ (8003fb0 <HAL_DMA_IRQHandler+0xca8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d009      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a16      	ldr	r2, [pc, #88]	@ (8003fb4 <HAL_DMA_IRQHandler+0xcac>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d004      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xc62>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a14      	ldr	r2, [pc, #80]	@ (8003fb8 <HAL_DMA_IRQHandler+0xcb0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d128      	bne.n	8003fbc <HAL_DMA_IRQHandler+0xcb4>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0214 	bic.w	r2, r2, #20
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	e027      	b.n	8003fcc <HAL_DMA_IRQHandler+0xcc4>
 8003f7c:	40020010 	.word	0x40020010
 8003f80:	40020028 	.word	0x40020028
 8003f84:	40020040 	.word	0x40020040
 8003f88:	40020058 	.word	0x40020058
 8003f8c:	40020070 	.word	0x40020070
 8003f90:	40020088 	.word	0x40020088
 8003f94:	400200a0 	.word	0x400200a0
 8003f98:	400200b8 	.word	0x400200b8
 8003f9c:	40020410 	.word	0x40020410
 8003fa0:	40020428 	.word	0x40020428
 8003fa4:	40020440 	.word	0x40020440
 8003fa8:	40020458 	.word	0x40020458
 8003fac:	40020470 	.word	0x40020470
 8003fb0:	40020488 	.word	0x40020488
 8003fb4:	400204a0 	.word	0x400204a0
 8003fb8:	400204b8 	.word	0x400204b8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 020a 	bic.w	r2, r2, #10
 8003fca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8097 	beq.w	8004114 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fee:	e091      	b.n	8004114 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff4:	f003 031f 	and.w	r3, r3, #31
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8088 	beq.w	8004116 <HAL_DMA_IRQHandler+0xe0e>
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8082 	beq.w	8004116 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a41      	ldr	r2, [pc, #260]	@ (800411c <HAL_DMA_IRQHandler+0xe14>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d04a      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a3f      	ldr	r2, [pc, #252]	@ (8004120 <HAL_DMA_IRQHandler+0xe18>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d045      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a3e      	ldr	r2, [pc, #248]	@ (8004124 <HAL_DMA_IRQHandler+0xe1c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d040      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a3c      	ldr	r2, [pc, #240]	@ (8004128 <HAL_DMA_IRQHandler+0xe20>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d03b      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a3b      	ldr	r2, [pc, #236]	@ (800412c <HAL_DMA_IRQHandler+0xe24>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d036      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a39      	ldr	r2, [pc, #228]	@ (8004130 <HAL_DMA_IRQHandler+0xe28>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d031      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a38      	ldr	r2, [pc, #224]	@ (8004134 <HAL_DMA_IRQHandler+0xe2c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d02c      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a36      	ldr	r2, [pc, #216]	@ (8004138 <HAL_DMA_IRQHandler+0xe30>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d027      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a35      	ldr	r2, [pc, #212]	@ (800413c <HAL_DMA_IRQHandler+0xe34>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d022      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a33      	ldr	r2, [pc, #204]	@ (8004140 <HAL_DMA_IRQHandler+0xe38>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01d      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a32      	ldr	r2, [pc, #200]	@ (8004144 <HAL_DMA_IRQHandler+0xe3c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d018      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a30      	ldr	r2, [pc, #192]	@ (8004148 <HAL_DMA_IRQHandler+0xe40>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a2f      	ldr	r2, [pc, #188]	@ (800414c <HAL_DMA_IRQHandler+0xe44>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00e      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a2d      	ldr	r2, [pc, #180]	@ (8004150 <HAL_DMA_IRQHandler+0xe48>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d009      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004154 <HAL_DMA_IRQHandler+0xe4c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_DMA_IRQHandler+0xdaa>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a2a      	ldr	r2, [pc, #168]	@ (8004158 <HAL_DMA_IRQHandler+0xe50>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d108      	bne.n	80040c4 <HAL_DMA_IRQHandler+0xdbc>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 021c 	bic.w	r2, r2, #28
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	e007      	b.n	80040d4 <HAL_DMA_IRQHandler+0xdcc>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 020e 	bic.w	r2, r2, #14
 80040d2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	2201      	movs	r2, #1
 80040de:	409a      	lsls	r2, r3
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	4798      	blx	r3
 800410a:	e004      	b.n	8004116 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800410c:	bf00      	nop
 800410e:	e002      	b.n	8004116 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004110:	bf00      	nop
 8004112:	e000      	b.n	8004116 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004114:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004116:	3728      	adds	r7, #40	@ 0x28
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40020010 	.word	0x40020010
 8004120:	40020028 	.word	0x40020028
 8004124:	40020040 	.word	0x40020040
 8004128:	40020058 	.word	0x40020058
 800412c:	40020070 	.word	0x40020070
 8004130:	40020088 	.word	0x40020088
 8004134:	400200a0 	.word	0x400200a0
 8004138:	400200b8 	.word	0x400200b8
 800413c:	40020410 	.word	0x40020410
 8004140:	40020428 	.word	0x40020428
 8004144:	40020440 	.word	0x40020440
 8004148:	40020458 	.word	0x40020458
 800414c:	40020470 	.word	0x40020470
 8004150:	40020488 	.word	0x40020488
 8004154:	400204a0 	.word	0x400204a0
 8004158:	400204b8 	.word	0x400204b8

0800415c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a42      	ldr	r2, [pc, #264]	@ (8004274 <DMA_CalcBaseAndBitshift+0x118>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d04a      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a41      	ldr	r2, [pc, #260]	@ (8004278 <DMA_CalcBaseAndBitshift+0x11c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d045      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a3f      	ldr	r2, [pc, #252]	@ (800427c <DMA_CalcBaseAndBitshift+0x120>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d040      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a3e      	ldr	r2, [pc, #248]	@ (8004280 <DMA_CalcBaseAndBitshift+0x124>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d03b      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a3c      	ldr	r2, [pc, #240]	@ (8004284 <DMA_CalcBaseAndBitshift+0x128>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d036      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a3b      	ldr	r2, [pc, #236]	@ (8004288 <DMA_CalcBaseAndBitshift+0x12c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d031      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a39      	ldr	r2, [pc, #228]	@ (800428c <DMA_CalcBaseAndBitshift+0x130>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d02c      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a38      	ldr	r2, [pc, #224]	@ (8004290 <DMA_CalcBaseAndBitshift+0x134>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d027      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a36      	ldr	r2, [pc, #216]	@ (8004294 <DMA_CalcBaseAndBitshift+0x138>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d022      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a35      	ldr	r2, [pc, #212]	@ (8004298 <DMA_CalcBaseAndBitshift+0x13c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d01d      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a33      	ldr	r2, [pc, #204]	@ (800429c <DMA_CalcBaseAndBitshift+0x140>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d018      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a32      	ldr	r2, [pc, #200]	@ (80042a0 <DMA_CalcBaseAndBitshift+0x144>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d013      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a30      	ldr	r2, [pc, #192]	@ (80042a4 <DMA_CalcBaseAndBitshift+0x148>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00e      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a2f      	ldr	r2, [pc, #188]	@ (80042a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d009      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a2d      	ldr	r2, [pc, #180]	@ (80042ac <DMA_CalcBaseAndBitshift+0x150>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d004      	beq.n	8004204 <DMA_CalcBaseAndBitshift+0xa8>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a2c      	ldr	r2, [pc, #176]	@ (80042b0 <DMA_CalcBaseAndBitshift+0x154>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d101      	bne.n	8004208 <DMA_CalcBaseAndBitshift+0xac>
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <DMA_CalcBaseAndBitshift+0xae>
 8004208:	2300      	movs	r3, #0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d024      	beq.n	8004258 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	b2db      	uxtb	r3, r3
 8004214:	3b10      	subs	r3, #16
 8004216:	4a27      	ldr	r2, [pc, #156]	@ (80042b4 <DMA_CalcBaseAndBitshift+0x158>)
 8004218:	fba2 2303 	umull	r2, r3, r2, r3
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	4a24      	ldr	r2, [pc, #144]	@ (80042b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004228:	5cd3      	ldrb	r3, [r2, r3]
 800422a:	461a      	mov	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b03      	cmp	r3, #3
 8004234:	d908      	bls.n	8004248 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	4b1f      	ldr	r3, [pc, #124]	@ (80042bc <DMA_CalcBaseAndBitshift+0x160>)
 800423e:	4013      	ands	r3, r2
 8004240:	1d1a      	adds	r2, r3, #4
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	659a      	str	r2, [r3, #88]	@ 0x58
 8004246:	e00d      	b.n	8004264 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	4b1b      	ldr	r3, [pc, #108]	@ (80042bc <DMA_CalcBaseAndBitshift+0x160>)
 8004250:	4013      	ands	r3, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6593      	str	r3, [r2, #88]	@ 0x58
 8004256:	e005      	b.n	8004264 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004268:	4618      	mov	r0, r3
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	40020010 	.word	0x40020010
 8004278:	40020028 	.word	0x40020028
 800427c:	40020040 	.word	0x40020040
 8004280:	40020058 	.word	0x40020058
 8004284:	40020070 	.word	0x40020070
 8004288:	40020088 	.word	0x40020088
 800428c:	400200a0 	.word	0x400200a0
 8004290:	400200b8 	.word	0x400200b8
 8004294:	40020410 	.word	0x40020410
 8004298:	40020428 	.word	0x40020428
 800429c:	40020440 	.word	0x40020440
 80042a0:	40020458 	.word	0x40020458
 80042a4:	40020470 	.word	0x40020470
 80042a8:	40020488 	.word	0x40020488
 80042ac:	400204a0 	.word	0x400204a0
 80042b0:	400204b8 	.word	0x400204b8
 80042b4:	aaaaaaab 	.word	0xaaaaaaab
 80042b8:	080098f4 	.word	0x080098f4
 80042bc:	fffffc00 	.word	0xfffffc00

080042c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d120      	bne.n	8004316 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d858      	bhi.n	800438e <DMA_CheckFifoParam+0xce>
 80042dc:	a201      	add	r2, pc, #4	@ (adr r2, 80042e4 <DMA_CheckFifoParam+0x24>)
 80042de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e2:	bf00      	nop
 80042e4:	080042f5 	.word	0x080042f5
 80042e8:	08004307 	.word	0x08004307
 80042ec:	080042f5 	.word	0x080042f5
 80042f0:	0800438f 	.word	0x0800438f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d048      	beq.n	8004392 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004304:	e045      	b.n	8004392 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800430e:	d142      	bne.n	8004396 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004314:	e03f      	b.n	8004396 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800431e:	d123      	bne.n	8004368 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004324:	2b03      	cmp	r3, #3
 8004326:	d838      	bhi.n	800439a <DMA_CheckFifoParam+0xda>
 8004328:	a201      	add	r2, pc, #4	@ (adr r2, 8004330 <DMA_CheckFifoParam+0x70>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004341 	.word	0x08004341
 8004334:	08004347 	.word	0x08004347
 8004338:	08004341 	.word	0x08004341
 800433c:	08004359 	.word	0x08004359
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
        break;
 8004344:	e030      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d025      	beq.n	800439e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004356:	e022      	b.n	800439e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004360:	d11f      	bne.n	80043a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004366:	e01c      	b.n	80043a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436c:	2b02      	cmp	r3, #2
 800436e:	d902      	bls.n	8004376 <DMA_CheckFifoParam+0xb6>
 8004370:	2b03      	cmp	r3, #3
 8004372:	d003      	beq.n	800437c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004374:	e018      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	73fb      	strb	r3, [r7, #15]
        break;
 800437a:	e015      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004380:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00e      	beq.n	80043a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
    break;
 800438c:	e00b      	b.n	80043a6 <DMA_CheckFifoParam+0xe6>
        break;
 800438e:	bf00      	nop
 8004390:	e00a      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        break;
 8004392:	bf00      	nop
 8004394:	e008      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        break;
 8004396:	bf00      	nop
 8004398:	e006      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        break;
 800439a:	bf00      	nop
 800439c:	e004      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        break;
 800439e:	bf00      	nop
 80043a0:	e002      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
        break;
 80043a2:	bf00      	nop
 80043a4:	e000      	b.n	80043a8 <DMA_CheckFifoParam+0xe8>
    break;
 80043a6:	bf00      	nop
    }
  }

  return status;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop

080043b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a38      	ldr	r2, [pc, #224]	@ (80044ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d022      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a36      	ldr	r2, [pc, #216]	@ (80044b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01d      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a35      	ldr	r2, [pc, #212]	@ (80044b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d018      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a33      	ldr	r2, [pc, #204]	@ (80044b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a32      	ldr	r2, [pc, #200]	@ (80044bc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00e      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a30      	ldr	r2, [pc, #192]	@ (80044c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d009      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2f      	ldr	r2, [pc, #188]	@ (80044c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a2d      	ldr	r2, [pc, #180]	@ (80044c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d101      	bne.n	800441a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800441a:	2300      	movs	r3, #0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01a      	beq.n	8004456 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	3b08      	subs	r3, #8
 8004428:	4a28      	ldr	r2, [pc, #160]	@ (80044cc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	091b      	lsrs	r3, r3, #4
 8004430:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4b26      	ldr	r3, [pc, #152]	@ (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	461a      	mov	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a24      	ldr	r2, [pc, #144]	@ (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004444:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	2201      	movs	r2, #1
 800444e:	409a      	lsls	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004454:	e024      	b.n	80044a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	3b10      	subs	r3, #16
 800445e:	4a1e      	ldr	r2, [pc, #120]	@ (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004460:	fba2 2303 	umull	r2, r3, r2, r3
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4a1c      	ldr	r2, [pc, #112]	@ (80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d806      	bhi.n	800447e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4a1b      	ldr	r2, [pc, #108]	@ (80044e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d902      	bls.n	800447e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3308      	adds	r3, #8
 800447c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4b18      	ldr	r3, [pc, #96]	@ (80044e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	461a      	mov	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a16      	ldr	r2, [pc, #88]	@ (80044e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004490:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	2201      	movs	r2, #1
 800449a:	409a      	lsls	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	58025408 	.word	0x58025408
 80044b0:	5802541c 	.word	0x5802541c
 80044b4:	58025430 	.word	0x58025430
 80044b8:	58025444 	.word	0x58025444
 80044bc:	58025458 	.word	0x58025458
 80044c0:	5802546c 	.word	0x5802546c
 80044c4:	58025480 	.word	0x58025480
 80044c8:	58025494 	.word	0x58025494
 80044cc:	cccccccd 	.word	0xcccccccd
 80044d0:	16009600 	.word	0x16009600
 80044d4:	58025880 	.word	0x58025880
 80044d8:	aaaaaaab 	.word	0xaaaaaaab
 80044dc:	400204b8 	.word	0x400204b8
 80044e0:	4002040f 	.word	0x4002040f
 80044e4:	10008200 	.word	0x10008200
 80044e8:	40020880 	.word	0x40020880

080044ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d04a      	beq.n	8004598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b08      	cmp	r3, #8
 8004506:	d847      	bhi.n	8004598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a25      	ldr	r2, [pc, #148]	@ (80045a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d022      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a24      	ldr	r2, [pc, #144]	@ (80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d01d      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a22      	ldr	r2, [pc, #136]	@ (80045ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d018      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a21      	ldr	r2, [pc, #132]	@ (80045b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d013      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1f      	ldr	r2, [pc, #124]	@ (80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00e      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1e      	ldr	r2, [pc, #120]	@ (80045b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d009      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1c      	ldr	r2, [pc, #112]	@ (80045bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1b      	ldr	r2, [pc, #108]	@ (80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d101      	bne.n	800455c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800455c:	2300      	movs	r3, #0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4b17      	ldr	r3, [pc, #92]	@ (80045c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	461a      	mov	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a15      	ldr	r2, [pc, #84]	@ (80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004574:	671a      	str	r2, [r3, #112]	@ 0x70
 8004576:	e009      	b.n	800458c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4b14      	ldr	r3, [pc, #80]	@ (80045cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800457c:	4413      	add	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	461a      	mov	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a11      	ldr	r2, [pc, #68]	@ (80045d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800458a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3b01      	subs	r3, #1
 8004590:	2201      	movs	r2, #1
 8004592:	409a      	lsls	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004598:	bf00      	nop
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	58025408 	.word	0x58025408
 80045a8:	5802541c 	.word	0x5802541c
 80045ac:	58025430 	.word	0x58025430
 80045b0:	58025444 	.word	0x58025444
 80045b4:	58025458 	.word	0x58025458
 80045b8:	5802546c 	.word	0x5802546c
 80045bc:	58025480 	.word	0x58025480
 80045c0:	58025494 	.word	0x58025494
 80045c4:	1600963f 	.word	0x1600963f
 80045c8:	58025940 	.word	0x58025940
 80045cc:	1000823f 	.word	0x1000823f
 80045d0:	40020940 	.word	0x40020940

080045d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b089      	sub	sp, #36	@ 0x24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80045e2:	4b89      	ldr	r3, [pc, #548]	@ (8004808 <HAL_GPIO_Init+0x234>)
 80045e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045e6:	e194      	b.n	8004912 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	2101      	movs	r1, #1
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	fa01 f303 	lsl.w	r3, r1, r3
 80045f4:	4013      	ands	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 8186 	beq.w	800490c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	2b01      	cmp	r3, #1
 800460a:	d005      	beq.n	8004618 <HAL_GPIO_Init+0x44>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d130      	bne.n	800467a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	2203      	movs	r2, #3
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4013      	ands	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4313      	orrs	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800464e:	2201      	movs	r2, #1
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	43db      	mvns	r3, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4013      	ands	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	091b      	lsrs	r3, r3, #4
 8004664:	f003 0201 	and.w	r2, r3, #1
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4313      	orrs	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	2b03      	cmp	r3, #3
 8004684:	d017      	beq.n	80046b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	2203      	movs	r2, #3
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	43db      	mvns	r3, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4013      	ands	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d123      	bne.n	800470a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	08da      	lsrs	r2, r3, #3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3208      	adds	r2, #8
 80046ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	220f      	movs	r2, #15
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	43db      	mvns	r3, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4013      	ands	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	08da      	lsrs	r2, r3, #3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3208      	adds	r2, #8
 8004704:	69b9      	ldr	r1, [r7, #24]
 8004706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	2203      	movs	r2, #3
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43db      	mvns	r3, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4013      	ands	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f003 0203 	and.w	r2, r3, #3
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4313      	orrs	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 80e0 	beq.w	800490c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800474c:	4b2f      	ldr	r3, [pc, #188]	@ (800480c <HAL_GPIO_Init+0x238>)
 800474e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004752:	4a2e      	ldr	r2, [pc, #184]	@ (800480c <HAL_GPIO_Init+0x238>)
 8004754:	f043 0302 	orr.w	r3, r3, #2
 8004758:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800475c:	4b2b      	ldr	r3, [pc, #172]	@ (800480c <HAL_GPIO_Init+0x238>)
 800475e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800476a:	4a29      	ldr	r2, [pc, #164]	@ (8004810 <HAL_GPIO_Init+0x23c>)
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	089b      	lsrs	r3, r3, #2
 8004770:	3302      	adds	r3, #2
 8004772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	220f      	movs	r2, #15
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43db      	mvns	r3, r3
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	4013      	ands	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a20      	ldr	r2, [pc, #128]	@ (8004814 <HAL_GPIO_Init+0x240>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d052      	beq.n	800483c <HAL_GPIO_Init+0x268>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a1f      	ldr	r2, [pc, #124]	@ (8004818 <HAL_GPIO_Init+0x244>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d031      	beq.n	8004802 <HAL_GPIO_Init+0x22e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a1e      	ldr	r2, [pc, #120]	@ (800481c <HAL_GPIO_Init+0x248>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d02b      	beq.n	80047fe <HAL_GPIO_Init+0x22a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004820 <HAL_GPIO_Init+0x24c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d025      	beq.n	80047fa <HAL_GPIO_Init+0x226>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004824 <HAL_GPIO_Init+0x250>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d01f      	beq.n	80047f6 <HAL_GPIO_Init+0x222>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004828 <HAL_GPIO_Init+0x254>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d019      	beq.n	80047f2 <HAL_GPIO_Init+0x21e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a1a      	ldr	r2, [pc, #104]	@ (800482c <HAL_GPIO_Init+0x258>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d013      	beq.n	80047ee <HAL_GPIO_Init+0x21a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a19      	ldr	r2, [pc, #100]	@ (8004830 <HAL_GPIO_Init+0x25c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d00d      	beq.n	80047ea <HAL_GPIO_Init+0x216>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a18      	ldr	r2, [pc, #96]	@ (8004834 <HAL_GPIO_Init+0x260>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d007      	beq.n	80047e6 <HAL_GPIO_Init+0x212>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a17      	ldr	r2, [pc, #92]	@ (8004838 <HAL_GPIO_Init+0x264>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d101      	bne.n	80047e2 <HAL_GPIO_Init+0x20e>
 80047de:	2309      	movs	r3, #9
 80047e0:	e02d      	b.n	800483e <HAL_GPIO_Init+0x26a>
 80047e2:	230a      	movs	r3, #10
 80047e4:	e02b      	b.n	800483e <HAL_GPIO_Init+0x26a>
 80047e6:	2308      	movs	r3, #8
 80047e8:	e029      	b.n	800483e <HAL_GPIO_Init+0x26a>
 80047ea:	2307      	movs	r3, #7
 80047ec:	e027      	b.n	800483e <HAL_GPIO_Init+0x26a>
 80047ee:	2306      	movs	r3, #6
 80047f0:	e025      	b.n	800483e <HAL_GPIO_Init+0x26a>
 80047f2:	2305      	movs	r3, #5
 80047f4:	e023      	b.n	800483e <HAL_GPIO_Init+0x26a>
 80047f6:	2304      	movs	r3, #4
 80047f8:	e021      	b.n	800483e <HAL_GPIO_Init+0x26a>
 80047fa:	2303      	movs	r3, #3
 80047fc:	e01f      	b.n	800483e <HAL_GPIO_Init+0x26a>
 80047fe:	2302      	movs	r3, #2
 8004800:	e01d      	b.n	800483e <HAL_GPIO_Init+0x26a>
 8004802:	2301      	movs	r3, #1
 8004804:	e01b      	b.n	800483e <HAL_GPIO_Init+0x26a>
 8004806:	bf00      	nop
 8004808:	58000080 	.word	0x58000080
 800480c:	58024400 	.word	0x58024400
 8004810:	58000400 	.word	0x58000400
 8004814:	58020000 	.word	0x58020000
 8004818:	58020400 	.word	0x58020400
 800481c:	58020800 	.word	0x58020800
 8004820:	58020c00 	.word	0x58020c00
 8004824:	58021000 	.word	0x58021000
 8004828:	58021400 	.word	0x58021400
 800482c:	58021800 	.word	0x58021800
 8004830:	58021c00 	.word	0x58021c00
 8004834:	58022000 	.word	0x58022000
 8004838:	58022400 	.word	0x58022400
 800483c:	2300      	movs	r3, #0
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	f002 0203 	and.w	r2, r2, #3
 8004844:	0092      	lsls	r2, r2, #2
 8004846:	4093      	lsls	r3, r2
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4313      	orrs	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800484e:	4938      	ldr	r1, [pc, #224]	@ (8004930 <HAL_GPIO_Init+0x35c>)
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	3302      	adds	r3, #2
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800485c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004882:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800488a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	43db      	mvns	r3, r3
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4013      	ands	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80048b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4013      	ands	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	43db      	mvns	r3, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4013      	ands	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	3301      	adds	r3, #1
 8004910:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	fa22 f303 	lsr.w	r3, r2, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	f47f ae63 	bne.w	80045e8 <HAL_GPIO_Init+0x14>
  }
}
 8004922:	bf00      	nop
 8004924:	bf00      	nop
 8004926:	3724      	adds	r7, #36	@ 0x24
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	58000400 	.word	0x58000400

08004934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	807b      	strh	r3, [r7, #2]
 8004940:	4613      	mov	r3, r2
 8004942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004944:	787b      	ldrb	r3, [r7, #1]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800494a:	887a      	ldrh	r2, [r7, #2]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004950:	e003      	b.n	800495a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004952:	887b      	ldrh	r3, [r7, #2]
 8004954:	041a      	lsls	r2, r3, #16
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	619a      	str	r2, [r3, #24]
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004970:	4b19      	ldr	r3, [pc, #100]	@ (80049d8 <HAL_PWREx_ConfigSupply+0x70>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b04      	cmp	r3, #4
 800497a:	d00a      	beq.n	8004992 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800497c:	4b16      	ldr	r3, [pc, #88]	@ (80049d8 <HAL_PWREx_ConfigSupply+0x70>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	429a      	cmp	r2, r3
 8004988:	d001      	beq.n	800498e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e01f      	b.n	80049ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	e01d      	b.n	80049ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004992:	4b11      	ldr	r3, [pc, #68]	@ (80049d8 <HAL_PWREx_ConfigSupply+0x70>)
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f023 0207 	bic.w	r2, r3, #7
 800499a:	490f      	ldr	r1, [pc, #60]	@ (80049d8 <HAL_PWREx_ConfigSupply+0x70>)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80049a2:	f7fc fdb5 	bl	8001510 <HAL_GetTick>
 80049a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049a8:	e009      	b.n	80049be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049aa:	f7fc fdb1 	bl	8001510 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049b8:	d901      	bls.n	80049be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e007      	b.n	80049ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049be:	4b06      	ldr	r3, [pc, #24]	@ (80049d8 <HAL_PWREx_ConfigSupply+0x70>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049ca:	d1ee      	bne.n	80049aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	58024800 	.word	0x58024800

080049dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08c      	sub	sp, #48	@ 0x30
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f000 bc48 	b.w	8005280 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 8088 	beq.w	8004b0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049fe:	4b99      	ldr	r3, [pc, #612]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a08:	4b96      	ldr	r3, [pc, #600]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d007      	beq.n	8004a24 <HAL_RCC_OscConfig+0x48>
 8004a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a16:	2b18      	cmp	r3, #24
 8004a18:	d111      	bne.n	8004a3e <HAL_RCC_OscConfig+0x62>
 8004a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d10c      	bne.n	8004a3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a24:	4b8f      	ldr	r3, [pc, #572]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d06d      	beq.n	8004b0c <HAL_RCC_OscConfig+0x130>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d169      	bne.n	8004b0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f000 bc21 	b.w	8005280 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a46:	d106      	bne.n	8004a56 <HAL_RCC_OscConfig+0x7a>
 8004a48:	4b86      	ldr	r3, [pc, #536]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a85      	ldr	r2, [pc, #532]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	e02e      	b.n	8004ab4 <HAL_RCC_OscConfig+0xd8>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCC_OscConfig+0x9c>
 8004a5e:	4b81      	ldr	r3, [pc, #516]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a80      	ldr	r2, [pc, #512]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	4b7e      	ldr	r3, [pc, #504]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a7d      	ldr	r2, [pc, #500]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	e01d      	b.n	8004ab4 <HAL_RCC_OscConfig+0xd8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a80:	d10c      	bne.n	8004a9c <HAL_RCC_OscConfig+0xc0>
 8004a82:	4b78      	ldr	r3, [pc, #480]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a77      	ldr	r2, [pc, #476]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	4b75      	ldr	r3, [pc, #468]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a74      	ldr	r2, [pc, #464]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	e00b      	b.n	8004ab4 <HAL_RCC_OscConfig+0xd8>
 8004a9c:	4b71      	ldr	r3, [pc, #452]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a70      	ldr	r2, [pc, #448]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	4b6e      	ldr	r3, [pc, #440]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a6d      	ldr	r2, [pc, #436]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004aae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d013      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fc fd28 	bl	8001510 <HAL_GetTick>
 8004ac0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac4:	f7fc fd24 	bl	8001510 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	@ 0x64
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e3d4      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ad6:	4b63      	ldr	r3, [pc, #396]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCC_OscConfig+0xe8>
 8004ae2:	e014      	b.n	8004b0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae4:	f7fc fd14 	bl	8001510 <HAL_GetTick>
 8004ae8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aec:	f7fc fd10 	bl	8001510 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b64      	cmp	r3, #100	@ 0x64
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e3c0      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004afe:	4b59      	ldr	r3, [pc, #356]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0x110>
 8004b0a:	e000      	b.n	8004b0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 80ca 	beq.w	8004cb0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b1c:	4b51      	ldr	r3, [pc, #324]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b26:	4b4f      	ldr	r3, [pc, #316]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d007      	beq.n	8004b42 <HAL_RCC_OscConfig+0x166>
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	2b18      	cmp	r3, #24
 8004b36:	d156      	bne.n	8004be6 <HAL_RCC_OscConfig+0x20a>
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d151      	bne.n	8004be6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b42:	4b48      	ldr	r3, [pc, #288]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d005      	beq.n	8004b5a <HAL_RCC_OscConfig+0x17e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e392      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b5a:	4b42      	ldr	r3, [pc, #264]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f023 0219 	bic.w	r2, r3, #25
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	493f      	ldr	r1, [pc, #252]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6c:	f7fc fcd0 	bl	8001510 <HAL_GetTick>
 8004b70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b74:	f7fc fccc 	bl	8001510 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e37c      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b86:	4b37      	ldr	r3, [pc, #220]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b92:	f7fc fcc9 	bl	8001528 <HAL_GetREVID>
 8004b96:	4603      	mov	r3, r0
 8004b98:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d817      	bhi.n	8004bd0 <HAL_RCC_OscConfig+0x1f4>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	2b40      	cmp	r3, #64	@ 0x40
 8004ba6:	d108      	bne.n	8004bba <HAL_RCC_OscConfig+0x1de>
 8004ba8:	4b2e      	ldr	r3, [pc, #184]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004bb0:	4a2c      	ldr	r2, [pc, #176]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bb6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bb8:	e07a      	b.n	8004cb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bba:	4b2a      	ldr	r3, [pc, #168]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	031b      	lsls	r3, r3, #12
 8004bc8:	4926      	ldr	r1, [pc, #152]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bce:	e06f      	b.n	8004cb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd0:	4b24      	ldr	r3, [pc, #144]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	061b      	lsls	r3, r3, #24
 8004bde:	4921      	ldr	r1, [pc, #132]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004be4:	e064      	b.n	8004cb0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d047      	beq.n	8004c7e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bee:	4b1d      	ldr	r3, [pc, #116]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f023 0219 	bic.w	r2, r3, #25
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	491a      	ldr	r1, [pc, #104]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c00:	f7fc fc86 	bl	8001510 <HAL_GetTick>
 8004c04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c08:	f7fc fc82 	bl	8001510 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e332      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c1a:	4b12      	ldr	r3, [pc, #72]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0f0      	beq.n	8004c08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c26:	f7fc fc7f 	bl	8001528 <HAL_GetREVID>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d819      	bhi.n	8004c68 <HAL_RCC_OscConfig+0x28c>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	2b40      	cmp	r3, #64	@ 0x40
 8004c3a:	d108      	bne.n	8004c4e <HAL_RCC_OscConfig+0x272>
 8004c3c:	4b09      	ldr	r3, [pc, #36]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004c44:	4a07      	ldr	r2, [pc, #28]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c4a:	6053      	str	r3, [r2, #4]
 8004c4c:	e030      	b.n	8004cb0 <HAL_RCC_OscConfig+0x2d4>
 8004c4e:	4b05      	ldr	r3, [pc, #20]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	031b      	lsls	r3, r3, #12
 8004c5c:	4901      	ldr	r1, [pc, #4]	@ (8004c64 <HAL_RCC_OscConfig+0x288>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	604b      	str	r3, [r1, #4]
 8004c62:	e025      	b.n	8004cb0 <HAL_RCC_OscConfig+0x2d4>
 8004c64:	58024400 	.word	0x58024400
 8004c68:	4b9a      	ldr	r3, [pc, #616]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	061b      	lsls	r3, r3, #24
 8004c76:	4997      	ldr	r1, [pc, #604]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	604b      	str	r3, [r1, #4]
 8004c7c:	e018      	b.n	8004cb0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7e:	4b95      	ldr	r3, [pc, #596]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a94      	ldr	r2, [pc, #592]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8a:	f7fc fc41 	bl	8001510 <HAL_GetTick>
 8004c8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c92:	f7fc fc3d 	bl	8001510 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e2ed      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ca4:	4b8b      	ldr	r3, [pc, #556]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f0      	bne.n	8004c92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 80a9 	beq.w	8004e10 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cbe:	4b85      	ldr	r3, [pc, #532]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cc6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cc8:	4b82      	ldr	r3, [pc, #520]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ccc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d007      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x308>
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	2b18      	cmp	r3, #24
 8004cd8:	d13a      	bne.n	8004d50 <HAL_RCC_OscConfig+0x374>
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d135      	bne.n	8004d50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ce4:	4b7b      	ldr	r3, [pc, #492]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_RCC_OscConfig+0x320>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	2b80      	cmp	r3, #128	@ 0x80
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e2c1      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cfc:	f7fc fc14 	bl	8001528 <HAL_GetREVID>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d817      	bhi.n	8004d3a <HAL_RCC_OscConfig+0x35e>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	2b20      	cmp	r3, #32
 8004d10:	d108      	bne.n	8004d24 <HAL_RCC_OscConfig+0x348>
 8004d12:	4b70      	ldr	r3, [pc, #448]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004d1a:	4a6e      	ldr	r2, [pc, #440]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004d1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d20:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d22:	e075      	b.n	8004e10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d24:	4b6b      	ldr	r3, [pc, #428]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	069b      	lsls	r3, r3, #26
 8004d32:	4968      	ldr	r1, [pc, #416]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d38:	e06a      	b.n	8004e10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d3a:	4b66      	ldr	r3, [pc, #408]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	061b      	lsls	r3, r3, #24
 8004d48:	4962      	ldr	r1, [pc, #392]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d4e:	e05f      	b.n	8004e10 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d042      	beq.n	8004dde <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d58:	4b5e      	ldr	r3, [pc, #376]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fc fbd4 	bl	8001510 <HAL_GetTick>
 8004d68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d6c:	f7fc fbd0 	bl	8001510 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e280      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d7e:	4b55      	ldr	r3, [pc, #340]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0f0      	beq.n	8004d6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d8a:	f7fc fbcd 	bl	8001528 <HAL_GetREVID>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d817      	bhi.n	8004dc8 <HAL_RCC_OscConfig+0x3ec>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d108      	bne.n	8004db2 <HAL_RCC_OscConfig+0x3d6>
 8004da0:	4b4c      	ldr	r3, [pc, #304]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004da8:	4a4a      	ldr	r2, [pc, #296]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004daa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004dae:	6053      	str	r3, [r2, #4]
 8004db0:	e02e      	b.n	8004e10 <HAL_RCC_OscConfig+0x434>
 8004db2:	4b48      	ldr	r3, [pc, #288]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	069b      	lsls	r3, r3, #26
 8004dc0:	4944      	ldr	r1, [pc, #272]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	604b      	str	r3, [r1, #4]
 8004dc6:	e023      	b.n	8004e10 <HAL_RCC_OscConfig+0x434>
 8004dc8:	4b42      	ldr	r3, [pc, #264]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	061b      	lsls	r3, r3, #24
 8004dd6:	493f      	ldr	r1, [pc, #252]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60cb      	str	r3, [r1, #12]
 8004ddc:	e018      	b.n	8004e10 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004dde:	4b3d      	ldr	r3, [pc, #244]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a3c      	ldr	r2, [pc, #240]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004de4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dea:	f7fc fb91 	bl	8001510 <HAL_GetTick>
 8004dee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004df2:	f7fc fb8d 	bl	8001510 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e23d      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e04:	4b33      	ldr	r3, [pc, #204]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1f0      	bne.n	8004df2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0308 	and.w	r3, r3, #8
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d036      	beq.n	8004e8a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d019      	beq.n	8004e58 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e24:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004e26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e28:	4a2a      	ldr	r2, [pc, #168]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e30:	f7fc fb6e 	bl	8001510 <HAL_GetTick>
 8004e34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e38:	f7fc fb6a 	bl	8001510 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e21a      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004e4a:	4b22      	ldr	r3, [pc, #136]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004e4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCC_OscConfig+0x45c>
 8004e56:	e018      	b.n	8004e8a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e58:	4b1e      	ldr	r3, [pc, #120]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004e5e:	f023 0301 	bic.w	r3, r3, #1
 8004e62:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e64:	f7fc fb54 	bl	8001510 <HAL_GetTick>
 8004e68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e6c:	f7fc fb50 	bl	8001510 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e200      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e7e:	4b15      	ldr	r3, [pc, #84]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1f0      	bne.n	8004e6c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d039      	beq.n	8004f0a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d01c      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004ea4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ea8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004eaa:	f7fc fb31 	bl	8001510 <HAL_GetTick>
 8004eae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eb2:	f7fc fb2d 	bl	8001510 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e1dd      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ec4:	4b03      	ldr	r3, [pc, #12]	@ (8004ed4 <HAL_RCC_OscConfig+0x4f8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0f0      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x4d6>
 8004ed0:	e01b      	b.n	8004f0a <HAL_RCC_OscConfig+0x52e>
 8004ed2:	bf00      	nop
 8004ed4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ed8:	4b9b      	ldr	r3, [pc, #620]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a9a      	ldr	r2, [pc, #616]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004ede:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ee2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ee4:	f7fc fb14 	bl	8001510 <HAL_GetTick>
 8004ee8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eec:	f7fc fb10 	bl	8001510 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e1c0      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004efe:	4b92      	ldr	r3, [pc, #584]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f0      	bne.n	8004eec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 8081 	beq.w	800501a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f18:	4b8c      	ldr	r3, [pc, #560]	@ (800514c <HAL_RCC_OscConfig+0x770>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a8b      	ldr	r2, [pc, #556]	@ (800514c <HAL_RCC_OscConfig+0x770>)
 8004f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f24:	f7fc faf4 	bl	8001510 <HAL_GetTick>
 8004f28:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f2c:	f7fc faf0 	bl	8001510 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b64      	cmp	r3, #100	@ 0x64
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e1a0      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f3e:	4b83      	ldr	r3, [pc, #524]	@ (800514c <HAL_RCC_OscConfig+0x770>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d106      	bne.n	8004f60 <HAL_RCC_OscConfig+0x584>
 8004f52:	4b7d      	ldr	r3, [pc, #500]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f56:	4a7c      	ldr	r2, [pc, #496]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f58:	f043 0301 	orr.w	r3, r3, #1
 8004f5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f5e:	e02d      	b.n	8004fbc <HAL_RCC_OscConfig+0x5e0>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10c      	bne.n	8004f82 <HAL_RCC_OscConfig+0x5a6>
 8004f68:	4b77      	ldr	r3, [pc, #476]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6c:	4a76      	ldr	r2, [pc, #472]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f74:	4b74      	ldr	r3, [pc, #464]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f78:	4a73      	ldr	r2, [pc, #460]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f7a:	f023 0304 	bic.w	r3, r3, #4
 8004f7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f80:	e01c      	b.n	8004fbc <HAL_RCC_OscConfig+0x5e0>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	2b05      	cmp	r3, #5
 8004f88:	d10c      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x5c8>
 8004f8a:	4b6f      	ldr	r3, [pc, #444]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8e:	4a6e      	ldr	r2, [pc, #440]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f90:	f043 0304 	orr.w	r3, r3, #4
 8004f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f96:	4b6c      	ldr	r3, [pc, #432]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9a:	4a6b      	ldr	r2, [pc, #428]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004f9c:	f043 0301 	orr.w	r3, r3, #1
 8004fa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa2:	e00b      	b.n	8004fbc <HAL_RCC_OscConfig+0x5e0>
 8004fa4:	4b68      	ldr	r3, [pc, #416]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa8:	4a67      	ldr	r2, [pc, #412]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004faa:	f023 0301 	bic.w	r3, r3, #1
 8004fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fb0:	4b65      	ldr	r3, [pc, #404]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb4:	4a64      	ldr	r2, [pc, #400]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004fb6:	f023 0304 	bic.w	r3, r3, #4
 8004fba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d015      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc4:	f7fc faa4 	bl	8001510 <HAL_GetTick>
 8004fc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fca:	e00a      	b.n	8004fe2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fcc:	f7fc faa0 	bl	8001510 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e14e      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fe2:	4b59      	ldr	r3, [pc, #356]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0ee      	beq.n	8004fcc <HAL_RCC_OscConfig+0x5f0>
 8004fee:	e014      	b.n	800501a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff0:	f7fc fa8e 	bl	8001510 <HAL_GetTick>
 8004ff4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff8:	f7fc fa8a 	bl	8001510 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e138      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800500e:	4b4e      	ldr	r3, [pc, #312]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1ee      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 812d 	beq.w	800527e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005024:	4b48      	ldr	r3, [pc, #288]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800502c:	2b18      	cmp	r3, #24
 800502e:	f000 80bd 	beq.w	80051ac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005036:	2b02      	cmp	r3, #2
 8005038:	f040 809e 	bne.w	8005178 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503c:	4b42      	ldr	r3, [pc, #264]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a41      	ldr	r2, [pc, #260]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005042:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005048:	f7fc fa62 	bl	8001510 <HAL_GetTick>
 800504c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005050:	f7fc fa5e 	bl	8001510 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e10e      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005062:	4b39      	ldr	r3, [pc, #228]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800506e:	4b36      	ldr	r3, [pc, #216]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005070:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005072:	4b37      	ldr	r3, [pc, #220]	@ (8005150 <HAL_RCC_OscConfig+0x774>)
 8005074:	4013      	ands	r3, r2
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800507e:	0112      	lsls	r2, r2, #4
 8005080:	430a      	orrs	r2, r1
 8005082:	4931      	ldr	r1, [pc, #196]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005084:	4313      	orrs	r3, r2
 8005086:	628b      	str	r3, [r1, #40]	@ 0x28
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508c:	3b01      	subs	r3, #1
 800508e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005096:	3b01      	subs	r3, #1
 8005098:	025b      	lsls	r3, r3, #9
 800509a:	b29b      	uxth	r3, r3
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a2:	3b01      	subs	r3, #1
 80050a4:	041b      	lsls	r3, r3, #16
 80050a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b0:	3b01      	subs	r3, #1
 80050b2:	061b      	lsls	r3, r3, #24
 80050b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80050b8:	4923      	ldr	r1, [pc, #140]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80050be:	4b22      	ldr	r3, [pc, #136]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 80050c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c2:	4a21      	ldr	r2, [pc, #132]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 80050c4:	f023 0301 	bic.w	r3, r3, #1
 80050c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 80050cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050ce:	4b21      	ldr	r3, [pc, #132]	@ (8005154 <HAL_RCC_OscConfig+0x778>)
 80050d0:	4013      	ands	r3, r2
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80050d6:	00d2      	lsls	r2, r2, #3
 80050d8:	491b      	ldr	r1, [pc, #108]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80050de:	4b1a      	ldr	r3, [pc, #104]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 80050e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e2:	f023 020c 	bic.w	r2, r3, #12
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ea:	4917      	ldr	r1, [pc, #92]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80050f0:	4b15      	ldr	r3, [pc, #84]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 80050f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f4:	f023 0202 	bic.w	r2, r3, #2
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fc:	4912      	ldr	r1, [pc, #72]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005102:	4b11      	ldr	r3, [pc, #68]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005106:	4a10      	ldr	r2, [pc, #64]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800510c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800510e:	4b0e      	ldr	r3, [pc, #56]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005112:	4a0d      	ldr	r2, [pc, #52]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005118:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800511a:	4b0b      	ldr	r3, [pc, #44]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 800511c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511e:	4a0a      	ldr	r2, [pc, #40]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005124:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005126:	4b08      	ldr	r3, [pc, #32]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512a:	4a07      	ldr	r2, [pc, #28]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 800512c:	f043 0301 	orr.w	r3, r3, #1
 8005130:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005132:	4b05      	ldr	r3, [pc, #20]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a04      	ldr	r2, [pc, #16]	@ (8005148 <HAL_RCC_OscConfig+0x76c>)
 8005138:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800513c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513e:	f7fc f9e7 	bl	8001510 <HAL_GetTick>
 8005142:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005144:	e011      	b.n	800516a <HAL_RCC_OscConfig+0x78e>
 8005146:	bf00      	nop
 8005148:	58024400 	.word	0x58024400
 800514c:	58024800 	.word	0x58024800
 8005150:	fffffc0c 	.word	0xfffffc0c
 8005154:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005158:	f7fc f9da 	bl	8001510 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e08a      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800516a:	4b47      	ldr	r3, [pc, #284]	@ (8005288 <HAL_RCC_OscConfig+0x8ac>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0f0      	beq.n	8005158 <HAL_RCC_OscConfig+0x77c>
 8005176:	e082      	b.n	800527e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005178:	4b43      	ldr	r3, [pc, #268]	@ (8005288 <HAL_RCC_OscConfig+0x8ac>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a42      	ldr	r2, [pc, #264]	@ (8005288 <HAL_RCC_OscConfig+0x8ac>)
 800517e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005184:	f7fc f9c4 	bl	8001510 <HAL_GetTick>
 8005188:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800518c:	f7fc f9c0 	bl	8001510 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e070      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800519e:	4b3a      	ldr	r3, [pc, #232]	@ (8005288 <HAL_RCC_OscConfig+0x8ac>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1f0      	bne.n	800518c <HAL_RCC_OscConfig+0x7b0>
 80051aa:	e068      	b.n	800527e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80051ac:	4b36      	ldr	r3, [pc, #216]	@ (8005288 <HAL_RCC_OscConfig+0x8ac>)
 80051ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80051b2:	4b35      	ldr	r3, [pc, #212]	@ (8005288 <HAL_RCC_OscConfig+0x8ac>)
 80051b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d031      	beq.n	8005224 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f003 0203 	and.w	r2, r3, #3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d12a      	bne.n	8005224 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	091b      	lsrs	r3, r3, #4
 80051d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051da:	429a      	cmp	r2, r3
 80051dc:	d122      	bne.n	8005224 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d11a      	bne.n	8005224 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	0a5b      	lsrs	r3, r3, #9
 80051f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d111      	bne.n	8005224 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	0c1b      	lsrs	r3, r3, #16
 8005204:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800520e:	429a      	cmp	r2, r3
 8005210:	d108      	bne.n	8005224 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	0e1b      	lsrs	r3, r3, #24
 8005216:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800521e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005220:	429a      	cmp	r2, r3
 8005222:	d001      	beq.n	8005228 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e02b      	b.n	8005280 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005228:	4b17      	ldr	r3, [pc, #92]	@ (8005288 <HAL_RCC_OscConfig+0x8ac>)
 800522a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800522c:	08db      	lsrs	r3, r3, #3
 800522e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005232:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	429a      	cmp	r2, r3
 800523c:	d01f      	beq.n	800527e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800523e:	4b12      	ldr	r3, [pc, #72]	@ (8005288 <HAL_RCC_OscConfig+0x8ac>)
 8005240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005242:	4a11      	ldr	r2, [pc, #68]	@ (8005288 <HAL_RCC_OscConfig+0x8ac>)
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800524a:	f7fc f961 	bl	8001510 <HAL_GetTick>
 800524e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005250:	bf00      	nop
 8005252:	f7fc f95d 	bl	8001510 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525a:	4293      	cmp	r3, r2
 800525c:	d0f9      	beq.n	8005252 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800525e:	4b0a      	ldr	r3, [pc, #40]	@ (8005288 <HAL_RCC_OscConfig+0x8ac>)
 8005260:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005262:	4b0a      	ldr	r3, [pc, #40]	@ (800528c <HAL_RCC_OscConfig+0x8b0>)
 8005264:	4013      	ands	r3, r2
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800526a:	00d2      	lsls	r2, r2, #3
 800526c:	4906      	ldr	r1, [pc, #24]	@ (8005288 <HAL_RCC_OscConfig+0x8ac>)
 800526e:	4313      	orrs	r3, r2
 8005270:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005272:	4b05      	ldr	r3, [pc, #20]	@ (8005288 <HAL_RCC_OscConfig+0x8ac>)
 8005274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005276:	4a04      	ldr	r2, [pc, #16]	@ (8005288 <HAL_RCC_OscConfig+0x8ac>)
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3730      	adds	r7, #48	@ 0x30
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	58024400 	.word	0x58024400
 800528c:	ffff0007 	.word	0xffff0007

08005290 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e19c      	b.n	80055de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052a4:	4b8a      	ldr	r3, [pc, #552]	@ (80054d0 <HAL_RCC_ClockConfig+0x240>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d910      	bls.n	80052d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b2:	4b87      	ldr	r3, [pc, #540]	@ (80054d0 <HAL_RCC_ClockConfig+0x240>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f023 020f 	bic.w	r2, r3, #15
 80052ba:	4985      	ldr	r1, [pc, #532]	@ (80054d0 <HAL_RCC_ClockConfig+0x240>)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	4313      	orrs	r3, r2
 80052c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c2:	4b83      	ldr	r3, [pc, #524]	@ (80054d0 <HAL_RCC_ClockConfig+0x240>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d001      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e184      	b.n	80055de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d010      	beq.n	8005302 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	4b7b      	ldr	r3, [pc, #492]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d908      	bls.n	8005302 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052f0:	4b78      	ldr	r3, [pc, #480]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	4975      	ldr	r1, [pc, #468]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d010      	beq.n	8005330 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695a      	ldr	r2, [r3, #20]
 8005312:	4b70      	ldr	r3, [pc, #448]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800531a:	429a      	cmp	r2, r3
 800531c:	d908      	bls.n	8005330 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800531e:	4b6d      	ldr	r3, [pc, #436]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	496a      	ldr	r1, [pc, #424]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 800532c:	4313      	orrs	r3, r2
 800532e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0310 	and.w	r3, r3, #16
 8005338:	2b00      	cmp	r3, #0
 800533a:	d010      	beq.n	800535e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	699a      	ldr	r2, [r3, #24]
 8005340:	4b64      	ldr	r3, [pc, #400]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005348:	429a      	cmp	r2, r3
 800534a:	d908      	bls.n	800535e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800534c:	4b61      	ldr	r3, [pc, #388]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	495e      	ldr	r1, [pc, #376]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 800535a:	4313      	orrs	r3, r2
 800535c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b00      	cmp	r3, #0
 8005368:	d010      	beq.n	800538c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69da      	ldr	r2, [r3, #28]
 800536e:	4b59      	ldr	r3, [pc, #356]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005376:	429a      	cmp	r2, r3
 8005378:	d908      	bls.n	800538c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800537a:	4b56      	ldr	r3, [pc, #344]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	4953      	ldr	r1, [pc, #332]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005388:	4313      	orrs	r3, r2
 800538a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d010      	beq.n	80053ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	4b4d      	ldr	r3, [pc, #308]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d908      	bls.n	80053ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053a8:	4b4a      	ldr	r3, [pc, #296]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	f023 020f 	bic.w	r2, r3, #15
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	4947      	ldr	r1, [pc, #284]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d055      	beq.n	8005472 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80053c6:	4b43      	ldr	r3, [pc, #268]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	4940      	ldr	r1, [pc, #256]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d107      	bne.n	80053f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053e0:	4b3c      	ldr	r3, [pc, #240]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d121      	bne.n	8005430 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e0f6      	b.n	80055de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	d107      	bne.n	8005408 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053f8:	4b36      	ldr	r3, [pc, #216]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d115      	bne.n	8005430 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e0ea      	b.n	80055de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d107      	bne.n	8005420 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005410:	4b30      	ldr	r3, [pc, #192]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005418:	2b00      	cmp	r3, #0
 800541a:	d109      	bne.n	8005430 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e0de      	b.n	80055de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005420:	4b2c      	ldr	r3, [pc, #176]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e0d6      	b.n	80055de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005430:	4b28      	ldr	r3, [pc, #160]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f023 0207 	bic.w	r2, r3, #7
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	4925      	ldr	r1, [pc, #148]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 800543e:	4313      	orrs	r3, r2
 8005440:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005442:	f7fc f865 	bl	8001510 <HAL_GetTick>
 8005446:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005448:	e00a      	b.n	8005460 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800544a:	f7fc f861 	bl	8001510 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005458:	4293      	cmp	r3, r2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e0be      	b.n	80055de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005460:	4b1c      	ldr	r3, [pc, #112]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	429a      	cmp	r2, r3
 8005470:	d1eb      	bne.n	800544a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d010      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	4b14      	ldr	r3, [pc, #80]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	429a      	cmp	r2, r3
 800548c:	d208      	bcs.n	80054a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800548e:	4b11      	ldr	r3, [pc, #68]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	f023 020f 	bic.w	r2, r3, #15
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	490e      	ldr	r1, [pc, #56]	@ (80054d4 <HAL_RCC_ClockConfig+0x244>)
 800549c:	4313      	orrs	r3, r2
 800549e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054a0:	4b0b      	ldr	r3, [pc, #44]	@ (80054d0 <HAL_RCC_ClockConfig+0x240>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d214      	bcs.n	80054d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ae:	4b08      	ldr	r3, [pc, #32]	@ (80054d0 <HAL_RCC_ClockConfig+0x240>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f023 020f 	bic.w	r2, r3, #15
 80054b6:	4906      	ldr	r1, [pc, #24]	@ (80054d0 <HAL_RCC_ClockConfig+0x240>)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054be:	4b04      	ldr	r3, [pc, #16]	@ (80054d0 <HAL_RCC_ClockConfig+0x240>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d005      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e086      	b.n	80055de <HAL_RCC_ClockConfig+0x34e>
 80054d0:	52002000 	.word	0x52002000
 80054d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d010      	beq.n	8005506 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	4b3f      	ldr	r3, [pc, #252]	@ (80055e8 <HAL_RCC_ClockConfig+0x358>)
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d208      	bcs.n	8005506 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054f4:	4b3c      	ldr	r3, [pc, #240]	@ (80055e8 <HAL_RCC_ClockConfig+0x358>)
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	4939      	ldr	r1, [pc, #228]	@ (80055e8 <HAL_RCC_ClockConfig+0x358>)
 8005502:	4313      	orrs	r3, r2
 8005504:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0308 	and.w	r3, r3, #8
 800550e:	2b00      	cmp	r3, #0
 8005510:	d010      	beq.n	8005534 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	695a      	ldr	r2, [r3, #20]
 8005516:	4b34      	ldr	r3, [pc, #208]	@ (80055e8 <HAL_RCC_ClockConfig+0x358>)
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800551e:	429a      	cmp	r2, r3
 8005520:	d208      	bcs.n	8005534 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005522:	4b31      	ldr	r3, [pc, #196]	@ (80055e8 <HAL_RCC_ClockConfig+0x358>)
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	492e      	ldr	r1, [pc, #184]	@ (80055e8 <HAL_RCC_ClockConfig+0x358>)
 8005530:	4313      	orrs	r3, r2
 8005532:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0310 	and.w	r3, r3, #16
 800553c:	2b00      	cmp	r3, #0
 800553e:	d010      	beq.n	8005562 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699a      	ldr	r2, [r3, #24]
 8005544:	4b28      	ldr	r3, [pc, #160]	@ (80055e8 <HAL_RCC_ClockConfig+0x358>)
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800554c:	429a      	cmp	r2, r3
 800554e:	d208      	bcs.n	8005562 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005550:	4b25      	ldr	r3, [pc, #148]	@ (80055e8 <HAL_RCC_ClockConfig+0x358>)
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	4922      	ldr	r1, [pc, #136]	@ (80055e8 <HAL_RCC_ClockConfig+0x358>)
 800555e:	4313      	orrs	r3, r2
 8005560:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b00      	cmp	r3, #0
 800556c:	d010      	beq.n	8005590 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69da      	ldr	r2, [r3, #28]
 8005572:	4b1d      	ldr	r3, [pc, #116]	@ (80055e8 <HAL_RCC_ClockConfig+0x358>)
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800557a:	429a      	cmp	r2, r3
 800557c:	d208      	bcs.n	8005590 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800557e:	4b1a      	ldr	r3, [pc, #104]	@ (80055e8 <HAL_RCC_ClockConfig+0x358>)
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	4917      	ldr	r1, [pc, #92]	@ (80055e8 <HAL_RCC_ClockConfig+0x358>)
 800558c:	4313      	orrs	r3, r2
 800558e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005590:	f000 f834 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 8005594:	4602      	mov	r2, r0
 8005596:	4b14      	ldr	r3, [pc, #80]	@ (80055e8 <HAL_RCC_ClockConfig+0x358>)
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	0a1b      	lsrs	r3, r3, #8
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	4912      	ldr	r1, [pc, #72]	@ (80055ec <HAL_RCC_ClockConfig+0x35c>)
 80055a2:	5ccb      	ldrb	r3, [r1, r3]
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	fa22 f303 	lsr.w	r3, r2, r3
 80055ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055ae:	4b0e      	ldr	r3, [pc, #56]	@ (80055e8 <HAL_RCC_ClockConfig+0x358>)
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f003 030f 	and.w	r3, r3, #15
 80055b6:	4a0d      	ldr	r2, [pc, #52]	@ (80055ec <HAL_RCC_ClockConfig+0x35c>)
 80055b8:	5cd3      	ldrb	r3, [r2, r3]
 80055ba:	f003 031f 	and.w	r3, r3, #31
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	fa22 f303 	lsr.w	r3, r2, r3
 80055c4:	4a0a      	ldr	r2, [pc, #40]	@ (80055f0 <HAL_RCC_ClockConfig+0x360>)
 80055c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055c8:	4a0a      	ldr	r2, [pc, #40]	@ (80055f4 <HAL_RCC_ClockConfig+0x364>)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80055ce:	4b0a      	ldr	r3, [pc, #40]	@ (80055f8 <HAL_RCC_ClockConfig+0x368>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fb ff52 	bl	800147c <HAL_InitTick>
 80055d8:	4603      	mov	r3, r0
 80055da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3718      	adds	r7, #24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	58024400 	.word	0x58024400
 80055ec:	080098e4 	.word	0x080098e4
 80055f0:	24000004 	.word	0x24000004
 80055f4:	24000000 	.word	0x24000000
 80055f8:	24000008 	.word	0x24000008

080055fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b089      	sub	sp, #36	@ 0x24
 8005600:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005602:	4bb3      	ldr	r3, [pc, #716]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800560a:	2b18      	cmp	r3, #24
 800560c:	f200 8155 	bhi.w	80058ba <HAL_RCC_GetSysClockFreq+0x2be>
 8005610:	a201      	add	r2, pc, #4	@ (adr r2, 8005618 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005616:	bf00      	nop
 8005618:	0800567d 	.word	0x0800567d
 800561c:	080058bb 	.word	0x080058bb
 8005620:	080058bb 	.word	0x080058bb
 8005624:	080058bb 	.word	0x080058bb
 8005628:	080058bb 	.word	0x080058bb
 800562c:	080058bb 	.word	0x080058bb
 8005630:	080058bb 	.word	0x080058bb
 8005634:	080058bb 	.word	0x080058bb
 8005638:	080056a3 	.word	0x080056a3
 800563c:	080058bb 	.word	0x080058bb
 8005640:	080058bb 	.word	0x080058bb
 8005644:	080058bb 	.word	0x080058bb
 8005648:	080058bb 	.word	0x080058bb
 800564c:	080058bb 	.word	0x080058bb
 8005650:	080058bb 	.word	0x080058bb
 8005654:	080058bb 	.word	0x080058bb
 8005658:	080056a9 	.word	0x080056a9
 800565c:	080058bb 	.word	0x080058bb
 8005660:	080058bb 	.word	0x080058bb
 8005664:	080058bb 	.word	0x080058bb
 8005668:	080058bb 	.word	0x080058bb
 800566c:	080058bb 	.word	0x080058bb
 8005670:	080058bb 	.word	0x080058bb
 8005674:	080058bb 	.word	0x080058bb
 8005678:	080056af 	.word	0x080056af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800567c:	4b94      	ldr	r3, [pc, #592]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0320 	and.w	r3, r3, #32
 8005684:	2b00      	cmp	r3, #0
 8005686:	d009      	beq.n	800569c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005688:	4b91      	ldr	r3, [pc, #580]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	08db      	lsrs	r3, r3, #3
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	4a90      	ldr	r2, [pc, #576]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
 8005698:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800569a:	e111      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800569c:	4b8d      	ldr	r3, [pc, #564]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800569e:	61bb      	str	r3, [r7, #24]
      break;
 80056a0:	e10e      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80056a2:	4b8d      	ldr	r3, [pc, #564]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056a4:	61bb      	str	r3, [r7, #24]
      break;
 80056a6:	e10b      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80056a8:	4b8c      	ldr	r3, [pc, #560]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80056aa:	61bb      	str	r3, [r7, #24]
      break;
 80056ac:	e108      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056ae:	4b88      	ldr	r3, [pc, #544]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80056b8:	4b85      	ldr	r3, [pc, #532]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056bc:	091b      	lsrs	r3, r3, #4
 80056be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80056c4:	4b82      	ldr	r3, [pc, #520]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80056ce:	4b80      	ldr	r3, [pc, #512]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d2:	08db      	lsrs	r3, r3, #3
 80056d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	fb02 f303 	mul.w	r3, r2, r3
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 80e1 	beq.w	80058b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	f000 8083 	beq.w	8005800 <HAL_RCC_GetSysClockFreq+0x204>
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	f200 80a1 	bhi.w	8005844 <HAL_RCC_GetSysClockFreq+0x248>
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_RCC_GetSysClockFreq+0x114>
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d056      	beq.n	80057bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800570e:	e099      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005710:	4b6f      	ldr	r3, [pc, #444]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b00      	cmp	r3, #0
 800571a:	d02d      	beq.n	8005778 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800571c:	4b6c      	ldr	r3, [pc, #432]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	08db      	lsrs	r3, r3, #3
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	4a6b      	ldr	r2, [pc, #428]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005728:	fa22 f303 	lsr.w	r3, r2, r3
 800572c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	ee07 3a90 	vmov	s15, r3
 8005734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005746:	4b62      	ldr	r3, [pc, #392]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005756:	ed97 6a02 	vldr	s12, [r7, #8]
 800575a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80058e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800575e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005766:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800576a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005772:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005776:	e087      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	ee07 3a90 	vmov	s15, r3
 800577e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005782:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80058e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800578a:	4b51      	ldr	r3, [pc, #324]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800578c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800578e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005792:	ee07 3a90 	vmov	s15, r3
 8005796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800579a:	ed97 6a02 	vldr	s12, [r7, #8]
 800579e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80058e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057ba:	e065      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80058e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ce:	4b40      	ldr	r3, [pc, #256]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d6:	ee07 3a90 	vmov	s15, r3
 80057da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057de:	ed97 6a02 	vldr	s12, [r7, #8]
 80057e2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80058e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057fe:	e043      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80058ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800580e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005812:	4b2f      	ldr	r3, [pc, #188]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581a:	ee07 3a90 	vmov	s15, r3
 800581e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005822:	ed97 6a02 	vldr	s12, [r7, #8]
 8005826:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80058e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800582a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800582e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800583a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005842:	e021      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80058e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005856:	4b1e      	ldr	r3, [pc, #120]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585e:	ee07 3a90 	vmov	s15, r3
 8005862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005866:	ed97 6a02 	vldr	s12, [r7, #8]
 800586a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80058e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800586e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800587a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005882:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005886:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005888:	4b11      	ldr	r3, [pc, #68]	@ (80058d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800588a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588c:	0a5b      	lsrs	r3, r3, #9
 800588e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005892:	3301      	adds	r3, #1
 8005894:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	ee07 3a90 	vmov	s15, r3
 800589c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80058a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80058a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ac:	ee17 3a90 	vmov	r3, s15
 80058b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80058b2:	e005      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	61bb      	str	r3, [r7, #24]
      break;
 80058b8:	e002      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80058ba:	4b07      	ldr	r3, [pc, #28]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80058bc:	61bb      	str	r3, [r7, #24]
      break;
 80058be:	bf00      	nop
  }

  return sysclockfreq;
 80058c0:	69bb      	ldr	r3, [r7, #24]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3724      	adds	r7, #36	@ 0x24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	58024400 	.word	0x58024400
 80058d4:	03d09000 	.word	0x03d09000
 80058d8:	003d0900 	.word	0x003d0900
 80058dc:	007a1200 	.word	0x007a1200
 80058e0:	46000000 	.word	0x46000000
 80058e4:	4c742400 	.word	0x4c742400
 80058e8:	4a742400 	.word	0x4a742400
 80058ec:	4af42400 	.word	0x4af42400

080058f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80058f6:	f7ff fe81 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 80058fa:	4602      	mov	r2, r0
 80058fc:	4b10      	ldr	r3, [pc, #64]	@ (8005940 <HAL_RCC_GetHCLKFreq+0x50>)
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	0a1b      	lsrs	r3, r3, #8
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	490f      	ldr	r1, [pc, #60]	@ (8005944 <HAL_RCC_GetHCLKFreq+0x54>)
 8005908:	5ccb      	ldrb	r3, [r1, r3]
 800590a:	f003 031f 	and.w	r3, r3, #31
 800590e:	fa22 f303 	lsr.w	r3, r2, r3
 8005912:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005914:	4b0a      	ldr	r3, [pc, #40]	@ (8005940 <HAL_RCC_GetHCLKFreq+0x50>)
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	f003 030f 	and.w	r3, r3, #15
 800591c:	4a09      	ldr	r2, [pc, #36]	@ (8005944 <HAL_RCC_GetHCLKFreq+0x54>)
 800591e:	5cd3      	ldrb	r3, [r2, r3]
 8005920:	f003 031f 	and.w	r3, r3, #31
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	fa22 f303 	lsr.w	r3, r2, r3
 800592a:	4a07      	ldr	r2, [pc, #28]	@ (8005948 <HAL_RCC_GetHCLKFreq+0x58>)
 800592c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800592e:	4a07      	ldr	r2, [pc, #28]	@ (800594c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005934:	4b04      	ldr	r3, [pc, #16]	@ (8005948 <HAL_RCC_GetHCLKFreq+0x58>)
 8005936:	681b      	ldr	r3, [r3, #0]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	58024400 	.word	0x58024400
 8005944:	080098e4 	.word	0x080098e4
 8005948:	24000004 	.word	0x24000004
 800594c:	24000000 	.word	0x24000000

08005950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005954:	f7ff ffcc 	bl	80058f0 <HAL_RCC_GetHCLKFreq>
 8005958:	4602      	mov	r2, r0
 800595a:	4b06      	ldr	r3, [pc, #24]	@ (8005974 <HAL_RCC_GetPCLK1Freq+0x24>)
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	091b      	lsrs	r3, r3, #4
 8005960:	f003 0307 	and.w	r3, r3, #7
 8005964:	4904      	ldr	r1, [pc, #16]	@ (8005978 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005966:	5ccb      	ldrb	r3, [r1, r3]
 8005968:	f003 031f 	and.w	r3, r3, #31
 800596c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005970:	4618      	mov	r0, r3
 8005972:	bd80      	pop	{r7, pc}
 8005974:	58024400 	.word	0x58024400
 8005978:	080098e4 	.word	0x080098e4

0800597c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005980:	f7ff ffb6 	bl	80058f0 <HAL_RCC_GetHCLKFreq>
 8005984:	4602      	mov	r2, r0
 8005986:	4b06      	ldr	r3, [pc, #24]	@ (80059a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	0a1b      	lsrs	r3, r3, #8
 800598c:	f003 0307 	and.w	r3, r3, #7
 8005990:	4904      	ldr	r1, [pc, #16]	@ (80059a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005992:	5ccb      	ldrb	r3, [r1, r3]
 8005994:	f003 031f 	and.w	r3, r3, #31
 8005998:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800599c:	4618      	mov	r0, r3
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	58024400 	.word	0x58024400
 80059a4:	080098e4 	.word	0x080098e4

080059a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059ac:	b0ca      	sub	sp, #296	@ 0x128
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059b4:	2300      	movs	r3, #0
 80059b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059ba:	2300      	movs	r3, #0
 80059bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80059cc:	2500      	movs	r5, #0
 80059ce:	ea54 0305 	orrs.w	r3, r4, r5
 80059d2:	d049      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80059d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059de:	d02f      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80059e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059e4:	d828      	bhi.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80059e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059ea:	d01a      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80059ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059f0:	d822      	bhi.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80059f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059fa:	d007      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80059fc:	e01c      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059fe:	4bb8      	ldr	r3, [pc, #736]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a02:	4ab7      	ldr	r2, [pc, #732]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a0a:	e01a      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a10:	3308      	adds	r3, #8
 8005a12:	2102      	movs	r1, #2
 8005a14:	4618      	mov	r0, r3
 8005a16:	f002 fb61 	bl	80080dc <RCCEx_PLL2_Config>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a20:	e00f      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a26:	3328      	adds	r3, #40	@ 0x28
 8005a28:	2102      	movs	r1, #2
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f002 fc08 	bl	8008240 <RCCEx_PLL3_Config>
 8005a30:	4603      	mov	r3, r0
 8005a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a36:	e004      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a3e:	e000      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a4a:	4ba5      	ldr	r3, [pc, #660]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a58:	4aa1      	ldr	r2, [pc, #644]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a5a:	430b      	orrs	r3, r1
 8005a5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a5e:	e003      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a70:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005a74:	f04f 0900 	mov.w	r9, #0
 8005a78:	ea58 0309 	orrs.w	r3, r8, r9
 8005a7c:	d047      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d82a      	bhi.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005a88:	a201      	add	r2, pc, #4	@ (adr r2, 8005a90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005aa5 	.word	0x08005aa5
 8005a94:	08005ab3 	.word	0x08005ab3
 8005a98:	08005ac9 	.word	0x08005ac9
 8005a9c:	08005ae7 	.word	0x08005ae7
 8005aa0:	08005ae7 	.word	0x08005ae7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aa4:	4b8e      	ldr	r3, [pc, #568]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa8:	4a8d      	ldr	r2, [pc, #564]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ab0:	e01a      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab6:	3308      	adds	r3, #8
 8005ab8:	2100      	movs	r1, #0
 8005aba:	4618      	mov	r0, r3
 8005abc:	f002 fb0e 	bl	80080dc <RCCEx_PLL2_Config>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ac6:	e00f      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005acc:	3328      	adds	r3, #40	@ 0x28
 8005ace:	2100      	movs	r1, #0
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f002 fbb5 	bl	8008240 <RCCEx_PLL3_Config>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005adc:	e004      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ae4:	e000      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10a      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005af0:	4b7b      	ldr	r3, [pc, #492]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005af4:	f023 0107 	bic.w	r1, r3, #7
 8005af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005afe:	4a78      	ldr	r2, [pc, #480]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b00:	430b      	orrs	r3, r1
 8005b02:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b04:	e003      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b16:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005b1a:	f04f 0b00 	mov.w	fp, #0
 8005b1e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005b22:	d04c      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b2e:	d030      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005b30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b34:	d829      	bhi.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b36:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b38:	d02d      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005b3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b3c:	d825      	bhi.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b3e:	2b80      	cmp	r3, #128	@ 0x80
 8005b40:	d018      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005b42:	2b80      	cmp	r3, #128	@ 0x80
 8005b44:	d821      	bhi.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005b4a:	2b40      	cmp	r3, #64	@ 0x40
 8005b4c:	d007      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005b4e:	e01c      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b50:	4b63      	ldr	r3, [pc, #396]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b54:	4a62      	ldr	r2, [pc, #392]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b5c:	e01c      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b62:	3308      	adds	r3, #8
 8005b64:	2100      	movs	r1, #0
 8005b66:	4618      	mov	r0, r3
 8005b68:	f002 fab8 	bl	80080dc <RCCEx_PLL2_Config>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b72:	e011      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b78:	3328      	adds	r3, #40	@ 0x28
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f002 fb5f 	bl	8008240 <RCCEx_PLL3_Config>
 8005b82:	4603      	mov	r3, r0
 8005b84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b88:	e006      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b90:	e002      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005b92:	bf00      	nop
 8005b94:	e000      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005ba0:	4b4f      	ldr	r3, [pc, #316]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ba4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bae:	4a4c      	ldr	r2, [pc, #304]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bb4:	e003      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005bca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005bd4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	d053      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005be6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005bea:	d035      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005bec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005bf0:	d82e      	bhi.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005bf2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005bf6:	d031      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005bf8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005bfc:	d828      	bhi.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005bfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c02:	d01a      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005c04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c08:	d822      	bhi.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005c0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c12:	d007      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005c14:	e01c      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c16:	4b32      	ldr	r3, [pc, #200]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1a:	4a31      	ldr	r2, [pc, #196]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c22:	e01c      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c28:	3308      	adds	r3, #8
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f002 fa55 	bl	80080dc <RCCEx_PLL2_Config>
 8005c32:	4603      	mov	r3, r0
 8005c34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c38:	e011      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3e:	3328      	adds	r3, #40	@ 0x28
 8005c40:	2100      	movs	r1, #0
 8005c42:	4618      	mov	r0, r3
 8005c44:	f002 fafc 	bl	8008240 <RCCEx_PLL3_Config>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c4e:	e006      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c56:	e002      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c58:	bf00      	nop
 8005c5a:	e000      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10b      	bne.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c66:	4b1e      	ldr	r3, [pc, #120]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c6a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c76:	4a1a      	ldr	r2, [pc, #104]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c7c:	e003      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005c92:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c96:	2300      	movs	r3, #0
 8005c98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005c9c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	d056      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005caa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005cae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cb2:	d038      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005cb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cb8:	d831      	bhi.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005cba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005cbe:	d034      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005cc0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005cc4:	d82b      	bhi.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005cc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cca:	d01d      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005ccc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cd0:	d825      	bhi.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d006      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005cd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cda:	d00a      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005cdc:	e01f      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005cde:	bf00      	nop
 8005ce0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ce4:	4ba2      	ldr	r3, [pc, #648]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce8:	4aa1      	ldr	r2, [pc, #644]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cf0:	e01c      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf6:	3308      	adds	r3, #8
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f002 f9ee 	bl	80080dc <RCCEx_PLL2_Config>
 8005d00:	4603      	mov	r3, r0
 8005d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d06:	e011      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0c:	3328      	adds	r3, #40	@ 0x28
 8005d0e:	2100      	movs	r1, #0
 8005d10:	4618      	mov	r0, r3
 8005d12:	f002 fa95 	bl	8008240 <RCCEx_PLL3_Config>
 8005d16:	4603      	mov	r3, r0
 8005d18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d1c:	e006      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d24:	e002      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d26:	bf00      	nop
 8005d28:	e000      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10b      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d34:	4b8e      	ldr	r3, [pc, #568]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d38:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d44:	4a8a      	ldr	r2, [pc, #552]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d46:	430b      	orrs	r3, r1
 8005d48:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d4a:	e003      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005d60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d64:	2300      	movs	r3, #0
 8005d66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d6a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4313      	orrs	r3, r2
 8005d72:	d03a      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d7a:	2b30      	cmp	r3, #48	@ 0x30
 8005d7c:	d01f      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005d7e:	2b30      	cmp	r3, #48	@ 0x30
 8005d80:	d819      	bhi.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005d82:	2b20      	cmp	r3, #32
 8005d84:	d00c      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005d86:	2b20      	cmp	r3, #32
 8005d88:	d815      	bhi.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d019      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005d8e:	2b10      	cmp	r3, #16
 8005d90:	d111      	bne.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d92:	4b77      	ldr	r3, [pc, #476]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d96:	4a76      	ldr	r2, [pc, #472]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005d9e:	e011      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da4:	3308      	adds	r3, #8
 8005da6:	2102      	movs	r1, #2
 8005da8:	4618      	mov	r0, r3
 8005daa:	f002 f997 	bl	80080dc <RCCEx_PLL2_Config>
 8005dae:	4603      	mov	r3, r0
 8005db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005db4:	e006      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dbc:	e002      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005dbe:	bf00      	nop
 8005dc0:	e000      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005dc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10a      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005dcc:	4b68      	ldr	r3, [pc, #416]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dd0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dda:	4a65      	ldr	r2, [pc, #404]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ddc:	430b      	orrs	r3, r1
 8005dde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005de0:	e003      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005de6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005df6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e00:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4313      	orrs	r3, r2
 8005e08:	d051      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e14:	d035      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005e16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e1a:	d82e      	bhi.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e20:	d031      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005e22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e26:	d828      	bhi.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e2c:	d01a      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e32:	d822      	bhi.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e3c:	d007      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005e3e:	e01c      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e40:	4b4b      	ldr	r3, [pc, #300]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e44:	4a4a      	ldr	r2, [pc, #296]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e4c:	e01c      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e52:	3308      	adds	r3, #8
 8005e54:	2100      	movs	r1, #0
 8005e56:	4618      	mov	r0, r3
 8005e58:	f002 f940 	bl	80080dc <RCCEx_PLL2_Config>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e62:	e011      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e68:	3328      	adds	r3, #40	@ 0x28
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f002 f9e7 	bl	8008240 <RCCEx_PLL3_Config>
 8005e72:	4603      	mov	r3, r0
 8005e74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e78:	e006      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e80:	e002      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005e82:	bf00      	nop
 8005e84:	e000      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10a      	bne.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e90:	4b37      	ldr	r3, [pc, #220]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e94:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e9e:	4a34      	ldr	r2, [pc, #208]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ea4:	e003      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005eba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ec4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	d056      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ed4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ed8:	d033      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005eda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ede:	d82c      	bhi.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ee0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ee4:	d02f      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005ee6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005eea:	d826      	bhi.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005eec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ef0:	d02b      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005ef2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ef6:	d820      	bhi.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ef8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005efc:	d012      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005efe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f02:	d81a      	bhi.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d022      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f0c:	d115      	bne.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f12:	3308      	adds	r3, #8
 8005f14:	2101      	movs	r1, #1
 8005f16:	4618      	mov	r0, r3
 8005f18:	f002 f8e0 	bl	80080dc <RCCEx_PLL2_Config>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f22:	e015      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f28:	3328      	adds	r3, #40	@ 0x28
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f002 f987 	bl	8008240 <RCCEx_PLL3_Config>
 8005f32:	4603      	mov	r3, r0
 8005f34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f38:	e00a      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f40:	e006      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f42:	bf00      	nop
 8005f44:	e004      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f46:	bf00      	nop
 8005f48:	e002      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f4a:	bf00      	nop
 8005f4c:	e000      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10d      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f58:	4b05      	ldr	r3, [pc, #20]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f5c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f66:	4a02      	ldr	r2, [pc, #8]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f6c:	e006      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005f6e:	bf00      	nop
 8005f70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005f88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f92:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	d055      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fa8:	d033      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005faa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fae:	d82c      	bhi.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fb4:	d02f      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fba:	d826      	bhi.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005fbc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fc0:	d02b      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005fc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fc6:	d820      	bhi.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005fc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fcc:	d012      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005fce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fd2:	d81a      	bhi.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d022      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005fd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fdc:	d115      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe2:	3308      	adds	r3, #8
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f002 f878 	bl	80080dc <RCCEx_PLL2_Config>
 8005fec:	4603      	mov	r3, r0
 8005fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005ff2:	e015      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff8:	3328      	adds	r3, #40	@ 0x28
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f002 f91f 	bl	8008240 <RCCEx_PLL3_Config>
 8006002:	4603      	mov	r3, r0
 8006004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006008:	e00a      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006010:	e006      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006012:	bf00      	nop
 8006014:	e004      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006016:	bf00      	nop
 8006018:	e002      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800601a:	bf00      	nop
 800601c:	e000      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800601e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006020:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10b      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006028:	4ba3      	ldr	r3, [pc, #652]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800602a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800602c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006034:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006038:	4a9f      	ldr	r2, [pc, #636]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800603a:	430b      	orrs	r3, r1
 800603c:	6593      	str	r3, [r2, #88]	@ 0x58
 800603e:	e003      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006044:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006050:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006054:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006058:	2300      	movs	r3, #0
 800605a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800605e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006062:	460b      	mov	r3, r1
 8006064:	4313      	orrs	r3, r2
 8006066:	d037      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800606e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006072:	d00e      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006074:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006078:	d816      	bhi.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800607a:	2b00      	cmp	r3, #0
 800607c:	d018      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800607e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006082:	d111      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006084:	4b8c      	ldr	r3, [pc, #560]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006088:	4a8b      	ldr	r2, [pc, #556]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800608a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800608e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006090:	e00f      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006096:	3308      	adds	r3, #8
 8006098:	2101      	movs	r1, #1
 800609a:	4618      	mov	r0, r3
 800609c:	f002 f81e 	bl	80080dc <RCCEx_PLL2_Config>
 80060a0:	4603      	mov	r3, r0
 80060a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060a6:	e004      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060ae:	e000      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80060b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10a      	bne.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060ba:	4b7f      	ldr	r3, [pc, #508]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80060c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c8:	4a7b      	ldr	r2, [pc, #492]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060ca:	430b      	orrs	r3, r1
 80060cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80060ce:	e003      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80060d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80060e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060e8:	2300      	movs	r3, #0
 80060ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4313      	orrs	r3, r2
 80060f6:	d039      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80060f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d81c      	bhi.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006102:	a201      	add	r2, pc, #4	@ (adr r2, 8006108 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006108:	08006145 	.word	0x08006145
 800610c:	08006119 	.word	0x08006119
 8006110:	08006127 	.word	0x08006127
 8006114:	08006145 	.word	0x08006145
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006118:	4b67      	ldr	r3, [pc, #412]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800611a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611c:	4a66      	ldr	r2, [pc, #408]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800611e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006122:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006124:	e00f      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800612a:	3308      	adds	r3, #8
 800612c:	2102      	movs	r1, #2
 800612e:	4618      	mov	r0, r3
 8006130:	f001 ffd4 	bl	80080dc <RCCEx_PLL2_Config>
 8006134:	4603      	mov	r3, r0
 8006136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800613a:	e004      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006142:	e000      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006146:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10a      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800614e:	4b5a      	ldr	r3, [pc, #360]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006152:	f023 0103 	bic.w	r1, r3, #3
 8006156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800615c:	4a56      	ldr	r2, [pc, #344]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800615e:	430b      	orrs	r3, r1
 8006160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006162:	e003      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006164:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006168:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800616c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006174:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006178:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800617c:	2300      	movs	r3, #0
 800617e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006182:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006186:	460b      	mov	r3, r1
 8006188:	4313      	orrs	r3, r2
 800618a:	f000 809f 	beq.w	80062cc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800618e:	4b4b      	ldr	r3, [pc, #300]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a4a      	ldr	r2, [pc, #296]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006198:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800619a:	f7fb f9b9 	bl	8001510 <HAL_GetTick>
 800619e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061a2:	e00b      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061a4:	f7fb f9b4 	bl	8001510 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b64      	cmp	r3, #100	@ 0x64
 80061b2:	d903      	bls.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061ba:	e005      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061bc:	4b3f      	ldr	r3, [pc, #252]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0ed      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80061c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d179      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80061d0:	4b39      	ldr	r3, [pc, #228]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80061d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061dc:	4053      	eors	r3, r2
 80061de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d015      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061e6:	4b34      	ldr	r3, [pc, #208]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061f2:	4b31      	ldr	r3, [pc, #196]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061f6:	4a30      	ldr	r2, [pc, #192]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061fc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061fe:	4b2e      	ldr	r3, [pc, #184]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006202:	4a2d      	ldr	r2, [pc, #180]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006208:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800620a:	4a2b      	ldr	r2, [pc, #172]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800620c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006210:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006216:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800621a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800621e:	d118      	bne.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006220:	f7fb f976 	bl	8001510 <HAL_GetTick>
 8006224:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006228:	e00d      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800622a:	f7fb f971 	bl	8001510 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006234:	1ad2      	subs	r2, r2, r3
 8006236:	f241 3388 	movw	r3, #5000	@ 0x1388
 800623a:	429a      	cmp	r2, r3
 800623c:	d903      	bls.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006244:	e005      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006246:	4b1c      	ldr	r3, [pc, #112]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0eb      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006256:	2b00      	cmp	r3, #0
 8006258:	d129      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800625a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800625e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006266:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800626a:	d10e      	bne.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800626c:	4b12      	ldr	r3, [pc, #72]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006278:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800627c:	091a      	lsrs	r2, r3, #4
 800627e:	4b10      	ldr	r3, [pc, #64]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006280:	4013      	ands	r3, r2
 8006282:	4a0d      	ldr	r2, [pc, #52]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006284:	430b      	orrs	r3, r1
 8006286:	6113      	str	r3, [r2, #16]
 8006288:	e005      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800628a:	4b0b      	ldr	r3, [pc, #44]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	4a0a      	ldr	r2, [pc, #40]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006290:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006294:	6113      	str	r3, [r2, #16]
 8006296:	4b08      	ldr	r3, [pc, #32]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006298:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800629a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a6:	4a04      	ldr	r2, [pc, #16]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062a8:	430b      	orrs	r3, r1
 80062aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80062ac:	e00e      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80062b6:	e009      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80062b8:	58024400 	.word	0x58024400
 80062bc:	58024800 	.word	0x58024800
 80062c0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80062cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f002 0301 	and.w	r3, r2, #1
 80062d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062dc:	2300      	movs	r3, #0
 80062de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4313      	orrs	r3, r2
 80062ea:	f000 8089 	beq.w	8006400 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80062ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062f4:	2b28      	cmp	r3, #40	@ 0x28
 80062f6:	d86b      	bhi.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80062f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006300 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fe:	bf00      	nop
 8006300:	080063d9 	.word	0x080063d9
 8006304:	080063d1 	.word	0x080063d1
 8006308:	080063d1 	.word	0x080063d1
 800630c:	080063d1 	.word	0x080063d1
 8006310:	080063d1 	.word	0x080063d1
 8006314:	080063d1 	.word	0x080063d1
 8006318:	080063d1 	.word	0x080063d1
 800631c:	080063d1 	.word	0x080063d1
 8006320:	080063a5 	.word	0x080063a5
 8006324:	080063d1 	.word	0x080063d1
 8006328:	080063d1 	.word	0x080063d1
 800632c:	080063d1 	.word	0x080063d1
 8006330:	080063d1 	.word	0x080063d1
 8006334:	080063d1 	.word	0x080063d1
 8006338:	080063d1 	.word	0x080063d1
 800633c:	080063d1 	.word	0x080063d1
 8006340:	080063bb 	.word	0x080063bb
 8006344:	080063d1 	.word	0x080063d1
 8006348:	080063d1 	.word	0x080063d1
 800634c:	080063d1 	.word	0x080063d1
 8006350:	080063d1 	.word	0x080063d1
 8006354:	080063d1 	.word	0x080063d1
 8006358:	080063d1 	.word	0x080063d1
 800635c:	080063d1 	.word	0x080063d1
 8006360:	080063d9 	.word	0x080063d9
 8006364:	080063d1 	.word	0x080063d1
 8006368:	080063d1 	.word	0x080063d1
 800636c:	080063d1 	.word	0x080063d1
 8006370:	080063d1 	.word	0x080063d1
 8006374:	080063d1 	.word	0x080063d1
 8006378:	080063d1 	.word	0x080063d1
 800637c:	080063d1 	.word	0x080063d1
 8006380:	080063d9 	.word	0x080063d9
 8006384:	080063d1 	.word	0x080063d1
 8006388:	080063d1 	.word	0x080063d1
 800638c:	080063d1 	.word	0x080063d1
 8006390:	080063d1 	.word	0x080063d1
 8006394:	080063d1 	.word	0x080063d1
 8006398:	080063d1 	.word	0x080063d1
 800639c:	080063d1 	.word	0x080063d1
 80063a0:	080063d9 	.word	0x080063d9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a8:	3308      	adds	r3, #8
 80063aa:	2101      	movs	r1, #1
 80063ac:	4618      	mov	r0, r3
 80063ae:	f001 fe95 	bl	80080dc <RCCEx_PLL2_Config>
 80063b2:	4603      	mov	r3, r0
 80063b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063b8:	e00f      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063be:	3328      	adds	r3, #40	@ 0x28
 80063c0:	2101      	movs	r1, #1
 80063c2:	4618      	mov	r0, r3
 80063c4:	f001 ff3c 	bl	8008240 <RCCEx_PLL3_Config>
 80063c8:	4603      	mov	r3, r0
 80063ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063ce:	e004      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063d6:	e000      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80063d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10a      	bne.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80063e2:	4bbf      	ldr	r3, [pc, #764]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063e6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80063ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063f0:	4abb      	ldr	r2, [pc, #748]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063f2:	430b      	orrs	r3, r1
 80063f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80063f6:	e003      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	f002 0302 	and.w	r3, r2, #2
 800640c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006410:	2300      	movs	r3, #0
 8006412:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006416:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800641a:	460b      	mov	r3, r1
 800641c:	4313      	orrs	r3, r2
 800641e:	d041      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006424:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006426:	2b05      	cmp	r3, #5
 8006428:	d824      	bhi.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800642a:	a201      	add	r2, pc, #4	@ (adr r2, 8006430 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006430:	0800647d 	.word	0x0800647d
 8006434:	08006449 	.word	0x08006449
 8006438:	0800645f 	.word	0x0800645f
 800643c:	0800647d 	.word	0x0800647d
 8006440:	0800647d 	.word	0x0800647d
 8006444:	0800647d 	.word	0x0800647d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800644c:	3308      	adds	r3, #8
 800644e:	2101      	movs	r1, #1
 8006450:	4618      	mov	r0, r3
 8006452:	f001 fe43 	bl	80080dc <RCCEx_PLL2_Config>
 8006456:	4603      	mov	r3, r0
 8006458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800645c:	e00f      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800645e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006462:	3328      	adds	r3, #40	@ 0x28
 8006464:	2101      	movs	r1, #1
 8006466:	4618      	mov	r0, r3
 8006468:	f001 feea 	bl	8008240 <RCCEx_PLL3_Config>
 800646c:	4603      	mov	r3, r0
 800646e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006472:	e004      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800647a:	e000      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800647c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800647e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10a      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006486:	4b96      	ldr	r3, [pc, #600]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800648a:	f023 0107 	bic.w	r1, r3, #7
 800648e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006492:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006494:	4a92      	ldr	r2, [pc, #584]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006496:	430b      	orrs	r3, r1
 8006498:	6553      	str	r3, [r2, #84]	@ 0x54
 800649a:	e003      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800649c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ac:	f002 0304 	and.w	r3, r2, #4
 80064b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064b4:	2300      	movs	r3, #0
 80064b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80064be:	460b      	mov	r3, r1
 80064c0:	4313      	orrs	r3, r2
 80064c2:	d044      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80064c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064cc:	2b05      	cmp	r3, #5
 80064ce:	d825      	bhi.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80064d0:	a201      	add	r2, pc, #4	@ (adr r2, 80064d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80064d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d6:	bf00      	nop
 80064d8:	08006525 	.word	0x08006525
 80064dc:	080064f1 	.word	0x080064f1
 80064e0:	08006507 	.word	0x08006507
 80064e4:	08006525 	.word	0x08006525
 80064e8:	08006525 	.word	0x08006525
 80064ec:	08006525 	.word	0x08006525
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f4:	3308      	adds	r3, #8
 80064f6:	2101      	movs	r1, #1
 80064f8:	4618      	mov	r0, r3
 80064fa:	f001 fdef 	bl	80080dc <RCCEx_PLL2_Config>
 80064fe:	4603      	mov	r3, r0
 8006500:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006504:	e00f      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800650a:	3328      	adds	r3, #40	@ 0x28
 800650c:	2101      	movs	r1, #1
 800650e:	4618      	mov	r0, r3
 8006510:	f001 fe96 	bl	8008240 <RCCEx_PLL3_Config>
 8006514:	4603      	mov	r3, r0
 8006516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800651a:	e004      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006522:	e000      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10b      	bne.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800652e:	4b6c      	ldr	r3, [pc, #432]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006532:	f023 0107 	bic.w	r1, r3, #7
 8006536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800653e:	4a68      	ldr	r2, [pc, #416]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006540:	430b      	orrs	r3, r1
 8006542:	6593      	str	r3, [r2, #88]	@ 0x58
 8006544:	e003      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800654a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800654e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	f002 0320 	and.w	r3, r2, #32
 800655a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800655e:	2300      	movs	r3, #0
 8006560:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006564:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006568:	460b      	mov	r3, r1
 800656a:	4313      	orrs	r3, r2
 800656c:	d055      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800656e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006576:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800657a:	d033      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800657c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006580:	d82c      	bhi.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006586:	d02f      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800658c:	d826      	bhi.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800658e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006592:	d02b      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006594:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006598:	d820      	bhi.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800659a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800659e:	d012      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80065a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065a4:	d81a      	bhi.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d022      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80065aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065ae:	d115      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b4:	3308      	adds	r3, #8
 80065b6:	2100      	movs	r1, #0
 80065b8:	4618      	mov	r0, r3
 80065ba:	f001 fd8f 	bl	80080dc <RCCEx_PLL2_Config>
 80065be:	4603      	mov	r3, r0
 80065c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065c4:	e015      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ca:	3328      	adds	r3, #40	@ 0x28
 80065cc:	2102      	movs	r1, #2
 80065ce:	4618      	mov	r0, r3
 80065d0:	f001 fe36 	bl	8008240 <RCCEx_PLL3_Config>
 80065d4:	4603      	mov	r3, r0
 80065d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065da:	e00a      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065e2:	e006      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065e4:	bf00      	nop
 80065e6:	e004      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065e8:	bf00      	nop
 80065ea:	e002      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065ec:	bf00      	nop
 80065ee:	e000      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10b      	bne.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065fa:	4b39      	ldr	r3, [pc, #228]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800660a:	4a35      	ldr	r2, [pc, #212]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800660c:	430b      	orrs	r3, r1
 800660e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006610:	e003      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006616:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800661a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006622:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006626:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800662a:	2300      	movs	r3, #0
 800662c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006630:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006634:	460b      	mov	r3, r1
 8006636:	4313      	orrs	r3, r2
 8006638:	d058      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800663a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800663e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006642:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006646:	d033      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006648:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800664c:	d82c      	bhi.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800664e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006652:	d02f      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006658:	d826      	bhi.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800665a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800665e:	d02b      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006660:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006664:	d820      	bhi.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006666:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800666a:	d012      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800666c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006670:	d81a      	bhi.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006672:	2b00      	cmp	r3, #0
 8006674:	d022      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800667a:	d115      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800667c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006680:	3308      	adds	r3, #8
 8006682:	2100      	movs	r1, #0
 8006684:	4618      	mov	r0, r3
 8006686:	f001 fd29 	bl	80080dc <RCCEx_PLL2_Config>
 800668a:	4603      	mov	r3, r0
 800668c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006690:	e015      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006696:	3328      	adds	r3, #40	@ 0x28
 8006698:	2102      	movs	r1, #2
 800669a:	4618      	mov	r0, r3
 800669c:	f001 fdd0 	bl	8008240 <RCCEx_PLL3_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066a6:	e00a      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066ae:	e006      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066b0:	bf00      	nop
 80066b2:	e004      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066b4:	bf00      	nop
 80066b6:	e002      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066b8:	bf00      	nop
 80066ba:	e000      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10e      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066c6:	4b06      	ldr	r3, [pc, #24]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80066ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066d6:	4a02      	ldr	r2, [pc, #8]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066d8:	430b      	orrs	r3, r1
 80066da:	6593      	str	r3, [r2, #88]	@ 0x58
 80066dc:	e006      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80066de:	bf00      	nop
 80066e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80066ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80066f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066fc:	2300      	movs	r3, #0
 80066fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006702:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006706:	460b      	mov	r3, r1
 8006708:	4313      	orrs	r3, r2
 800670a:	d055      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800670c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006710:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006714:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006718:	d033      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800671a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800671e:	d82c      	bhi.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006720:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006724:	d02f      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006726:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800672a:	d826      	bhi.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800672c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006730:	d02b      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006732:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006736:	d820      	bhi.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006738:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800673c:	d012      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800673e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006742:	d81a      	bhi.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006744:	2b00      	cmp	r3, #0
 8006746:	d022      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006748:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800674c:	d115      	bne.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800674e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006752:	3308      	adds	r3, #8
 8006754:	2100      	movs	r1, #0
 8006756:	4618      	mov	r0, r3
 8006758:	f001 fcc0 	bl	80080dc <RCCEx_PLL2_Config>
 800675c:	4603      	mov	r3, r0
 800675e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006762:	e015      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006768:	3328      	adds	r3, #40	@ 0x28
 800676a:	2102      	movs	r1, #2
 800676c:	4618      	mov	r0, r3
 800676e:	f001 fd67 	bl	8008240 <RCCEx_PLL3_Config>
 8006772:	4603      	mov	r3, r0
 8006774:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006778:	e00a      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006780:	e006      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006782:	bf00      	nop
 8006784:	e004      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006786:	bf00      	nop
 8006788:	e002      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800678a:	bf00      	nop
 800678c:	e000      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800678e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006790:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10b      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006798:	4ba1      	ldr	r3, [pc, #644]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800679a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800679c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80067a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067a8:	4a9d      	ldr	r2, [pc, #628]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067aa:	430b      	orrs	r3, r1
 80067ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80067ae:	e003      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80067b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f002 0308 	and.w	r3, r2, #8
 80067c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067c8:	2300      	movs	r3, #0
 80067ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80067d2:	460b      	mov	r3, r1
 80067d4:	4313      	orrs	r3, r2
 80067d6:	d01e      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80067d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067e4:	d10c      	bne.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ea:	3328      	adds	r3, #40	@ 0x28
 80067ec:	2102      	movs	r1, #2
 80067ee:	4618      	mov	r0, r3
 80067f0:	f001 fd26 	bl	8008240 <RCCEx_PLL3_Config>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d002      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006800:	4b87      	ldr	r3, [pc, #540]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006804:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006810:	4a83      	ldr	r2, [pc, #524]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006812:	430b      	orrs	r3, r1
 8006814:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800681a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681e:	f002 0310 	and.w	r3, r2, #16
 8006822:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006826:	2300      	movs	r3, #0
 8006828:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800682c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006830:	460b      	mov	r3, r1
 8006832:	4313      	orrs	r3, r2
 8006834:	d01e      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800683e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006842:	d10c      	bne.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006848:	3328      	adds	r3, #40	@ 0x28
 800684a:	2102      	movs	r1, #2
 800684c:	4618      	mov	r0, r3
 800684e:	f001 fcf7 	bl	8008240 <RCCEx_PLL3_Config>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d002      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800685e:	4b70      	ldr	r3, [pc, #448]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006862:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800686e:	4a6c      	ldr	r2, [pc, #432]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006870:	430b      	orrs	r3, r1
 8006872:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006884:	2300      	movs	r3, #0
 8006886:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800688a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800688e:	460b      	mov	r3, r1
 8006890:	4313      	orrs	r3, r2
 8006892:	d03e      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006898:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800689c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068a0:	d022      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80068a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068a6:	d81b      	bhi.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80068ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068b0:	d00b      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80068b2:	e015      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b8:	3308      	adds	r3, #8
 80068ba:	2100      	movs	r1, #0
 80068bc:	4618      	mov	r0, r3
 80068be:	f001 fc0d 	bl	80080dc <RCCEx_PLL2_Config>
 80068c2:	4603      	mov	r3, r0
 80068c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068c8:	e00f      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ce:	3328      	adds	r3, #40	@ 0x28
 80068d0:	2102      	movs	r1, #2
 80068d2:	4618      	mov	r0, r3
 80068d4:	f001 fcb4 	bl	8008240 <RCCEx_PLL3_Config>
 80068d8:	4603      	mov	r3, r0
 80068da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068de:	e004      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068e6:	e000      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80068e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10b      	bne.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068f2:	4b4b      	ldr	r3, [pc, #300]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80068fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006902:	4a47      	ldr	r2, [pc, #284]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006904:	430b      	orrs	r3, r1
 8006906:	6593      	str	r3, [r2, #88]	@ 0x58
 8006908:	e003      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800690a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800690e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800691e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006920:	2300      	movs	r3, #0
 8006922:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006924:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006928:	460b      	mov	r3, r1
 800692a:	4313      	orrs	r3, r2
 800692c:	d03b      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800692e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006936:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800693a:	d01f      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800693c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006940:	d818      	bhi.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006942:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006946:	d003      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006948:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800694c:	d007      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800694e:	e011      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006950:	4b33      	ldr	r3, [pc, #204]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006954:	4a32      	ldr	r2, [pc, #200]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800695a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800695c:	e00f      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800695e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006962:	3328      	adds	r3, #40	@ 0x28
 8006964:	2101      	movs	r1, #1
 8006966:	4618      	mov	r0, r3
 8006968:	f001 fc6a 	bl	8008240 <RCCEx_PLL3_Config>
 800696c:	4603      	mov	r3, r0
 800696e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006972:	e004      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800697a:	e000      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800697c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800697e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10b      	bne.n	800699e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006986:	4b26      	ldr	r3, [pc, #152]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800698a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800698e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006996:	4a22      	ldr	r2, [pc, #136]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006998:	430b      	orrs	r3, r1
 800699a:	6553      	str	r3, [r2, #84]	@ 0x54
 800699c:	e003      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800699e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80069a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80069b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80069b4:	2300      	movs	r3, #0
 80069b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80069b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80069bc:	460b      	mov	r3, r1
 80069be:	4313      	orrs	r3, r2
 80069c0:	d034      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80069c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80069cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069d0:	d007      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80069d2:	e011      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069d4:	4b12      	ldr	r3, [pc, #72]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d8:	4a11      	ldr	r2, [pc, #68]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069e0:	e00e      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e6:	3308      	adds	r3, #8
 80069e8:	2102      	movs	r1, #2
 80069ea:	4618      	mov	r0, r3
 80069ec:	f001 fb76 	bl	80080dc <RCCEx_PLL2_Config>
 80069f0:	4603      	mov	r3, r0
 80069f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069f6:	e003      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10d      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a08:	4b05      	ldr	r3, [pc, #20]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a0c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a16:	4a02      	ldr	r2, [pc, #8]	@ (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a18:	430b      	orrs	r3, r1
 8006a1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a1c:	e006      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006a1e:	bf00      	nop
 8006a20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a34:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a3e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a42:	460b      	mov	r3, r1
 8006a44:	4313      	orrs	r3, r2
 8006a46:	d00c      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4c:	3328      	adds	r3, #40	@ 0x28
 8006a4e:	2102      	movs	r1, #2
 8006a50:	4618      	mov	r0, r3
 8006a52:	f001 fbf5 	bl	8008240 <RCCEx_PLL3_Config>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a70:	2300      	movs	r3, #0
 8006a72:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a74:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a78:	460b      	mov	r3, r1
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	d038      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a8a:	d018      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006a8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a90:	d811      	bhi.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006a92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a96:	d014      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a9c:	d80b      	bhi.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d011      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006aa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aa6:	d106      	bne.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa8:	4bc3      	ldr	r3, [pc, #780]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aac:	4ac2      	ldr	r2, [pc, #776]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ab2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006ab4:	e008      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006abc:	e004      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006abe:	bf00      	nop
 8006ac0:	e002      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006ac2:	bf00      	nop
 8006ac4:	e000      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10b      	bne.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ad0:	4bb9      	ldr	r3, [pc, #740]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ae0:	4ab5      	ldr	r2, [pc, #724]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ae2:	430b      	orrs	r3, r1
 8006ae4:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ae6:	e003      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006afc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006afe:	2300      	movs	r3, #0
 8006b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b02:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b06:	460b      	mov	r3, r1
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	d009      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b0c:	4baa      	ldr	r3, [pc, #680]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b1a:	4aa7      	ldr	r2, [pc, #668]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b1c:	430b      	orrs	r3, r1
 8006b1e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006b2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b2e:	2300      	movs	r3, #0
 8006b30:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b36:	460b      	mov	r3, r1
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	d00a      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006b3c:	4b9e      	ldr	r3, [pc, #632]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b4c:	4a9a      	ldr	r2, [pc, #616]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b4e:	430b      	orrs	r3, r1
 8006b50:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b60:	2300      	movs	r3, #0
 8006b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b64:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b68:	460b      	mov	r3, r1
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	d009      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b6e:	4b92      	ldr	r3, [pc, #584]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b72:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b7c:	4a8e      	ldr	r2, [pc, #568]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b7e:	430b      	orrs	r3, r1
 8006b80:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006b8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b90:	2300      	movs	r3, #0
 8006b92:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b94:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006b98:	460b      	mov	r3, r1
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	d00e      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b9e:	4b86      	ldr	r3, [pc, #536]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	4a85      	ldr	r2, [pc, #532]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ba4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ba8:	6113      	str	r3, [r2, #16]
 8006baa:	4b83      	ldr	r3, [pc, #524]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bac:	6919      	ldr	r1, [r3, #16]
 8006bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006bb6:	4a80      	ldr	r2, [pc, #512]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bb8:	430b      	orrs	r3, r1
 8006bba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bca:	2300      	movs	r3, #0
 8006bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	d009      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006bd8:	4b77      	ldr	r3, [pc, #476]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bdc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006be6:	4a74      	ldr	r2, [pc, #464]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006be8:	430b      	orrs	r3, r1
 8006bea:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006bf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bfe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c02:	460b      	mov	r3, r1
 8006c04:	4313      	orrs	r3, r2
 8006c06:	d00a      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c08:	4b6b      	ldr	r3, [pc, #428]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c0c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c18:	4a67      	ldr	r2, [pc, #412]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c1a:	430b      	orrs	r3, r1
 8006c1c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c26:	2100      	movs	r1, #0
 8006c28:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c30:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c34:	460b      	mov	r3, r1
 8006c36:	4313      	orrs	r3, r2
 8006c38:	d011      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3e:	3308      	adds	r3, #8
 8006c40:	2100      	movs	r1, #0
 8006c42:	4618      	mov	r0, r3
 8006c44:	f001 fa4a 	bl	80080dc <RCCEx_PLL2_Config>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	2100      	movs	r1, #0
 8006c68:	6239      	str	r1, [r7, #32]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c70:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c74:	460b      	mov	r3, r1
 8006c76:	4313      	orrs	r3, r2
 8006c78:	d011      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c7e:	3308      	adds	r3, #8
 8006c80:	2101      	movs	r1, #1
 8006c82:	4618      	mov	r0, r3
 8006c84:	f001 fa2a 	bl	80080dc <RCCEx_PLL2_Config>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	61b9      	str	r1, [r7, #24]
 8006caa:	f003 0304 	and.w	r3, r3, #4
 8006cae:	61fb      	str	r3, [r7, #28]
 8006cb0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	d011      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	2102      	movs	r1, #2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f001 fa0a 	bl	80080dc <RCCEx_PLL2_Config>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	6139      	str	r1, [r7, #16]
 8006cea:	f003 0308 	and.w	r3, r3, #8
 8006cee:	617b      	str	r3, [r7, #20]
 8006cf0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	d011      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfe:	3328      	adds	r3, #40	@ 0x28
 8006d00:	2100      	movs	r1, #0
 8006d02:	4618      	mov	r0, r3
 8006d04:	f001 fa9c 	bl	8008240 <RCCEx_PLL3_Config>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d26:	2100      	movs	r1, #0
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	f003 0310 	and.w	r3, r3, #16
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d34:	460b      	mov	r3, r1
 8006d36:	4313      	orrs	r3, r2
 8006d38:	d011      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3e:	3328      	adds	r3, #40	@ 0x28
 8006d40:	2101      	movs	r1, #1
 8006d42:	4618      	mov	r0, r3
 8006d44:	f001 fa7c 	bl	8008240 <RCCEx_PLL3_Config>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d66:	2100      	movs	r1, #0
 8006d68:	6039      	str	r1, [r7, #0]
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	607b      	str	r3, [r7, #4]
 8006d70:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d74:	460b      	mov	r3, r1
 8006d76:	4313      	orrs	r3, r2
 8006d78:	d011      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7e:	3328      	adds	r3, #40	@ 0x28
 8006d80:	2102      	movs	r1, #2
 8006d82:	4618      	mov	r0, r3
 8006d84:	f001 fa5c 	bl	8008240 <RCCEx_PLL3_Config>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006d9e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	e000      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006db2:	46bd      	mov	sp, r7
 8006db4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006db8:	58024400 	.word	0x58024400

08006dbc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b090      	sub	sp, #64	@ 0x40
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006dc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dca:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	f040 8094 	bne.w	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006dd4:	4b9e      	ldr	r3, [pc, #632]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dd8:	f003 0307 	and.w	r3, r3, #7
 8006ddc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de0:	2b04      	cmp	r3, #4
 8006de2:	f200 8087 	bhi.w	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006de6:	a201      	add	r2, pc, #4	@ (adr r2, 8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dec:	08006e01 	.word	0x08006e01
 8006df0:	08006e29 	.word	0x08006e29
 8006df4:	08006e51 	.word	0x08006e51
 8006df8:	08006eed 	.word	0x08006eed
 8006dfc:	08006e79 	.word	0x08006e79
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e00:	4b93      	ldr	r3, [pc, #588]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e0c:	d108      	bne.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e12:	4618      	mov	r0, r3
 8006e14:	f001 f810 	bl	8007e38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e1c:	f000 bd45 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e24:	f000 bd41 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e28:	4b89      	ldr	r3, [pc, #548]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e34:	d108      	bne.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e36:	f107 0318 	add.w	r3, r7, #24
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 fd54 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e44:	f000 bd31 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e4c:	f000 bd2d 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e50:	4b7f      	ldr	r3, [pc, #508]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e5c:	d108      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e5e:	f107 030c 	add.w	r3, r7, #12
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fe94 	bl	8007b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e6c:	f000 bd1d 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e70:	2300      	movs	r3, #0
 8006e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e74:	f000 bd19 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e78:	4b75      	ldr	r3, [pc, #468]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e80:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e82:	4b73      	ldr	r3, [pc, #460]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0304 	and.w	r3, r3, #4
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d10c      	bne.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d109      	bne.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e94:	4b6e      	ldr	r3, [pc, #440]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	08db      	lsrs	r3, r3, #3
 8006e9a:	f003 0303 	and.w	r3, r3, #3
 8006e9e:	4a6d      	ldr	r2, [pc, #436]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ea6:	e01f      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ea8:	4b69      	ldr	r3, [pc, #420]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eb4:	d106      	bne.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ebc:	d102      	bne.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ebe:	4b66      	ldr	r3, [pc, #408]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ec2:	e011      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ec4:	4b62      	ldr	r3, [pc, #392]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ecc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ed0:	d106      	bne.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ed8:	d102      	bne.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006eda:	4b60      	ldr	r3, [pc, #384]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ede:	e003      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006ee4:	f000 bce1 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ee8:	f000 bcdf 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006eec:	4b5c      	ldr	r3, [pc, #368]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ef0:	f000 bcdb 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ef8:	f000 bcd7 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f00:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006f04:	430b      	orrs	r3, r1
 8006f06:	f040 80ad 	bne.w	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006f0a:	4b51      	ldr	r3, [pc, #324]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f0e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006f12:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f1a:	d056      	beq.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f22:	f200 8090 	bhi.w	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f28:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f2a:	f000 8088 	beq.w	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f30:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f32:	f200 8088 	bhi.w	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f38:	2b80      	cmp	r3, #128	@ 0x80
 8006f3a:	d032      	beq.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3e:	2b80      	cmp	r3, #128	@ 0x80
 8006f40:	f200 8081 	bhi.w	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4c:	2b40      	cmp	r3, #64	@ 0x40
 8006f4e:	d014      	beq.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006f50:	e079      	b.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f52:	4b3f      	ldr	r3, [pc, #252]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f5e:	d108      	bne.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 ff67 	bl	8007e38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f6e:	f000 bc9c 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f72:	2300      	movs	r3, #0
 8006f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f76:	f000 bc98 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f7a:	4b35      	ldr	r3, [pc, #212]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f86:	d108      	bne.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f88:	f107 0318 	add.w	r3, r7, #24
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fcab 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f96:	f000 bc88 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f9e:	f000 bc84 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006faa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fae:	d108      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fb0:	f107 030c 	add.w	r3, r7, #12
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 fdeb 	bl	8007b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fbe:	f000 bc74 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fc6:	f000 bc70 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fca:	4b21      	ldr	r3, [pc, #132]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006fd2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d10c      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d109      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	08db      	lsrs	r3, r3, #3
 8006fec:	f003 0303 	and.w	r3, r3, #3
 8006ff0:	4a18      	ldr	r2, [pc, #96]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ff8:	e01f      	b.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ffa:	4b15      	ldr	r3, [pc, #84]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007006:	d106      	bne.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800700a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800700e:	d102      	bne.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007010:	4b11      	ldr	r3, [pc, #68]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007012:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007014:	e011      	b.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007016:	4b0e      	ldr	r3, [pc, #56]	@ (8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800701e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007022:	d106      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800702a:	d102      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800702c:	4b0b      	ldr	r3, [pc, #44]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007030:	e003      	b.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007032:	2300      	movs	r3, #0
 8007034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007036:	f000 bc38 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800703a:	f000 bc36 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800703e:	4b08      	ldr	r3, [pc, #32]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007042:	f000 bc32 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800704a:	f000 bc2e 	b.w	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800704e:	bf00      	nop
 8007050:	58024400 	.word	0x58024400
 8007054:	03d09000 	.word	0x03d09000
 8007058:	003d0900 	.word	0x003d0900
 800705c:	007a1200 	.word	0x007a1200
 8007060:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007068:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800706c:	430b      	orrs	r3, r1
 800706e:	f040 809c 	bne.w	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007072:	4b9e      	ldr	r3, [pc, #632]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007076:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800707a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800707c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007082:	d054      	beq.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007086:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800708a:	f200 808b 	bhi.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007090:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007094:	f000 8083 	beq.w	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800709e:	f200 8081 	bhi.w	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80070a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070a8:	d02f      	beq.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80070aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070b0:	d878      	bhi.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80070b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d004      	beq.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80070b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070be:	d012      	beq.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80070c0:	e070      	b.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070c2:	4b8a      	ldr	r3, [pc, #552]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070ce:	d107      	bne.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 feaf 	bl	8007e38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070de:	e3e4      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070e0:	2300      	movs	r3, #0
 80070e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070e4:	e3e1      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070e6:	4b81      	ldr	r3, [pc, #516]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070f2:	d107      	bne.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070f4:	f107 0318 	add.w	r3, r7, #24
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 fbf5 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007102:	e3d2      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007104:	2300      	movs	r3, #0
 8007106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007108:	e3cf      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800710a:	4b78      	ldr	r3, [pc, #480]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007112:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007116:	d107      	bne.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007118:	f107 030c 	add.w	r3, r7, #12
 800711c:	4618      	mov	r0, r3
 800711e:	f000 fd37 	bl	8007b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007126:	e3c0      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007128:	2300      	movs	r3, #0
 800712a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800712c:	e3bd      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800712e:	4b6f      	ldr	r3, [pc, #444]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007132:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007136:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007138:	4b6c      	ldr	r3, [pc, #432]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	2b04      	cmp	r3, #4
 8007142:	d10c      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007146:	2b00      	cmp	r3, #0
 8007148:	d109      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800714a:	4b68      	ldr	r3, [pc, #416]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	08db      	lsrs	r3, r3, #3
 8007150:	f003 0303 	and.w	r3, r3, #3
 8007154:	4a66      	ldr	r2, [pc, #408]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007156:	fa22 f303 	lsr.w	r3, r2, r3
 800715a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800715c:	e01e      	b.n	800719c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800715e:	4b63      	ldr	r3, [pc, #396]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800716a:	d106      	bne.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800716c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800716e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007172:	d102      	bne.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007174:	4b5f      	ldr	r3, [pc, #380]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007176:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007178:	e010      	b.n	800719c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800717a:	4b5c      	ldr	r3, [pc, #368]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007182:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007186:	d106      	bne.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800718a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800718e:	d102      	bne.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007190:	4b59      	ldr	r3, [pc, #356]	@ (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007192:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007194:	e002      	b.n	800719c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007196:	2300      	movs	r3, #0
 8007198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800719a:	e386      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800719c:	e385      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800719e:	4b57      	ldr	r3, [pc, #348]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80071a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071a2:	e382      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80071a4:	2300      	movs	r3, #0
 80071a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071a8:	e37f      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80071aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071ae:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80071b2:	430b      	orrs	r3, r1
 80071b4:	f040 80a7 	bne.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80071b8:	4b4c      	ldr	r3, [pc, #304]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071bc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80071c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80071c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071c8:	d055      	beq.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80071ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071d0:	f200 8096 	bhi.w	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80071d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071da:	f000 8084 	beq.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80071de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071e4:	f200 808c 	bhi.w	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80071e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071ee:	d030      	beq.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80071f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071f6:	f200 8083 	bhi.w	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80071fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d004      	beq.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007202:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007206:	d012      	beq.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007208:	e07a      	b.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800720a:	4b38      	ldr	r3, [pc, #224]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007212:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007216:	d107      	bne.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007218:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800721c:	4618      	mov	r0, r3
 800721e:	f000 fe0b 	bl	8007e38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007226:	e340      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007228:	2300      	movs	r3, #0
 800722a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800722c:	e33d      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800722e:	4b2f      	ldr	r3, [pc, #188]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007236:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800723a:	d107      	bne.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800723c:	f107 0318 	add.w	r3, r7, #24
 8007240:	4618      	mov	r0, r3
 8007242:	f000 fb51 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800724a:	e32e      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800724c:	2300      	movs	r3, #0
 800724e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007250:	e32b      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007252:	4b26      	ldr	r3, [pc, #152]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800725a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800725e:	d107      	bne.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007260:	f107 030c 	add.w	r3, r7, #12
 8007264:	4618      	mov	r0, r3
 8007266:	f000 fc93 	bl	8007b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800726e:	e31c      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007270:	2300      	movs	r3, #0
 8007272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007274:	e319      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007276:	4b1d      	ldr	r3, [pc, #116]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800727a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800727e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007280:	4b1a      	ldr	r3, [pc, #104]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0304 	and.w	r3, r3, #4
 8007288:	2b04      	cmp	r3, #4
 800728a:	d10c      	bne.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800728c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800728e:	2b00      	cmp	r3, #0
 8007290:	d109      	bne.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007292:	4b16      	ldr	r3, [pc, #88]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	08db      	lsrs	r3, r3, #3
 8007298:	f003 0303 	and.w	r3, r3, #3
 800729c:	4a14      	ldr	r2, [pc, #80]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800729e:	fa22 f303 	lsr.w	r3, r2, r3
 80072a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072a4:	e01e      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072a6:	4b11      	ldr	r3, [pc, #68]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072b2:	d106      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80072b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072ba:	d102      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80072bc:	4b0d      	ldr	r3, [pc, #52]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80072be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072c0:	e010      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072c2:	4b0a      	ldr	r3, [pc, #40]	@ (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072ce:	d106      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80072d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072d6:	d102      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80072d8:	4b07      	ldr	r3, [pc, #28]	@ (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80072da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072dc:	e002      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80072de:	2300      	movs	r3, #0
 80072e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80072e2:	e2e2      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072e4:	e2e1      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80072e6:	4b05      	ldr	r3, [pc, #20]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80072e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072ea:	e2de      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072ec:	58024400 	.word	0x58024400
 80072f0:	03d09000 	.word	0x03d09000
 80072f4:	003d0900 	.word	0x003d0900
 80072f8:	007a1200 	.word	0x007a1200
 80072fc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007300:	2300      	movs	r3, #0
 8007302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007304:	e2d1      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800730a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800730e:	430b      	orrs	r3, r1
 8007310:	f040 809c 	bne.w	800744c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007314:	4b93      	ldr	r3, [pc, #588]	@ (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007318:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800731c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800731e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007320:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007324:	d054      	beq.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007328:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800732c:	f200 808b 	bhi.w	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007332:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007336:	f000 8083 	beq.w	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800733a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007340:	f200 8081 	bhi.w	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007346:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800734a:	d02f      	beq.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800734c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007352:	d878      	bhi.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007356:	2b00      	cmp	r3, #0
 8007358:	d004      	beq.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800735a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007360:	d012      	beq.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007362:	e070      	b.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007364:	4b7f      	ldr	r3, [pc, #508]	@ (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800736c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007370:	d107      	bne.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007376:	4618      	mov	r0, r3
 8007378:	f000 fd5e 	bl	8007e38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800737c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007380:	e293      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007382:	2300      	movs	r3, #0
 8007384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007386:	e290      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007388:	4b76      	ldr	r3, [pc, #472]	@ (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007390:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007394:	d107      	bne.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007396:	f107 0318 	add.w	r3, r7, #24
 800739a:	4618      	mov	r0, r3
 800739c:	f000 faa4 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073a4:	e281      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073aa:	e27e      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073ac:	4b6d      	ldr	r3, [pc, #436]	@ (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073b8:	d107      	bne.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073ba:	f107 030c 	add.w	r3, r7, #12
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 fbe6 	bl	8007b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073c8:	e26f      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073ca:	2300      	movs	r3, #0
 80073cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073ce:	e26c      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073d0:	4b64      	ldr	r3, [pc, #400]	@ (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80073d8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073da:	4b62      	ldr	r3, [pc, #392]	@ (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0304 	and.w	r3, r3, #4
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d10c      	bne.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80073e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d109      	bne.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073ec:	4b5d      	ldr	r3, [pc, #372]	@ (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	08db      	lsrs	r3, r3, #3
 80073f2:	f003 0303 	and.w	r3, r3, #3
 80073f6:	4a5c      	ldr	r2, [pc, #368]	@ (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80073f8:	fa22 f303 	lsr.w	r3, r2, r3
 80073fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073fe:	e01e      	b.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007400:	4b58      	ldr	r3, [pc, #352]	@ (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800740c:	d106      	bne.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800740e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007410:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007414:	d102      	bne.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007416:	4b55      	ldr	r3, [pc, #340]	@ (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007418:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800741a:	e010      	b.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800741c:	4b51      	ldr	r3, [pc, #324]	@ (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007424:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007428:	d106      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800742a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800742c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007430:	d102      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007432:	4b4f      	ldr	r3, [pc, #316]	@ (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007434:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007436:	e002      	b.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007438:	2300      	movs	r3, #0
 800743a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800743c:	e235      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800743e:	e234      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007440:	4b4c      	ldr	r3, [pc, #304]	@ (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007444:	e231      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007446:	2300      	movs	r3, #0
 8007448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800744a:	e22e      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800744c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007450:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007454:	430b      	orrs	r3, r1
 8007456:	f040 808f 	bne.w	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800745a:	4b42      	ldr	r3, [pc, #264]	@ (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800745c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800745e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007462:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007466:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800746a:	d06b      	beq.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800746c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007472:	d874      	bhi.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007476:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800747a:	d056      	beq.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800747c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007482:	d86c      	bhi.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007486:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800748a:	d03b      	beq.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800748c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007492:	d864      	bhi.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007496:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800749a:	d021      	beq.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800749c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800749e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074a2:	d85c      	bhi.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80074a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d004      	beq.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80074aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074b0:	d004      	beq.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80074b2:	e054      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80074b4:	f7fe fa4c 	bl	8005950 <HAL_RCC_GetPCLK1Freq>
 80074b8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80074ba:	e1f6      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074bc:	4b29      	ldr	r3, [pc, #164]	@ (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074c8:	d107      	bne.n	80074da <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074ca:	f107 0318 	add.w	r3, r7, #24
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 fa0a 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074d8:	e1e7      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074de:	e1e4      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074e0:	4b20      	ldr	r3, [pc, #128]	@ (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074ec:	d107      	bne.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074ee:	f107 030c 	add.w	r3, r7, #12
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 fb4c 	bl	8007b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074fc:	e1d5      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074fe:	2300      	movs	r3, #0
 8007500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007502:	e1d2      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007504:	4b17      	ldr	r3, [pc, #92]	@ (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0304 	and.w	r3, r3, #4
 800750c:	2b04      	cmp	r3, #4
 800750e:	d109      	bne.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007510:	4b14      	ldr	r3, [pc, #80]	@ (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	08db      	lsrs	r3, r3, #3
 8007516:	f003 0303 	and.w	r3, r3, #3
 800751a:	4a13      	ldr	r2, [pc, #76]	@ (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800751c:	fa22 f303 	lsr.w	r3, r2, r3
 8007520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007522:	e1c2      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007524:	2300      	movs	r3, #0
 8007526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007528:	e1bf      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800752a:	4b0e      	ldr	r3, [pc, #56]	@ (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007536:	d102      	bne.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007538:	4b0c      	ldr	r3, [pc, #48]	@ (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800753a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800753c:	e1b5      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800753e:	2300      	movs	r3, #0
 8007540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007542:	e1b2      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007544:	4b07      	ldr	r3, [pc, #28]	@ (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800754c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007550:	d102      	bne.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007552:	4b07      	ldr	r3, [pc, #28]	@ (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007556:	e1a8      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007558:	2300      	movs	r3, #0
 800755a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800755c:	e1a5      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800755e:	2300      	movs	r3, #0
 8007560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007562:	e1a2      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007564:	58024400 	.word	0x58024400
 8007568:	03d09000 	.word	0x03d09000
 800756c:	003d0900 	.word	0x003d0900
 8007570:	007a1200 	.word	0x007a1200
 8007574:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800757c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007580:	430b      	orrs	r3, r1
 8007582:	d173      	bne.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007584:	4b9c      	ldr	r3, [pc, #624]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007588:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800758c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800758e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007590:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007594:	d02f      	beq.n	80075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007598:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800759c:	d863      	bhi.n	8007666 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800759e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d004      	beq.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80075a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075aa:	d012      	beq.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80075ac:	e05b      	b.n	8007666 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075ae:	4b92      	ldr	r3, [pc, #584]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075ba:	d107      	bne.n	80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075bc:	f107 0318 	add.w	r3, r7, #24
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 f991 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075ca:	e16e      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075cc:	2300      	movs	r3, #0
 80075ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075d0:	e16b      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075d2:	4b89      	ldr	r3, [pc, #548]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075de:	d107      	bne.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075e0:	f107 030c 	add.w	r3, r7, #12
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 fad3 	bl	8007b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075ee:	e15c      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075f4:	e159      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075f6:	4b80      	ldr	r3, [pc, #512]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80075fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007600:	4b7d      	ldr	r3, [pc, #500]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0304 	and.w	r3, r3, #4
 8007608:	2b04      	cmp	r3, #4
 800760a:	d10c      	bne.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800760c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800760e:	2b00      	cmp	r3, #0
 8007610:	d109      	bne.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007612:	4b79      	ldr	r3, [pc, #484]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	08db      	lsrs	r3, r3, #3
 8007618:	f003 0303 	and.w	r3, r3, #3
 800761c:	4a77      	ldr	r2, [pc, #476]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800761e:	fa22 f303 	lsr.w	r3, r2, r3
 8007622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007624:	e01e      	b.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007626:	4b74      	ldr	r3, [pc, #464]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800762e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007632:	d106      	bne.n	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007636:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800763a:	d102      	bne.n	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800763c:	4b70      	ldr	r3, [pc, #448]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800763e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007640:	e010      	b.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007642:	4b6d      	ldr	r3, [pc, #436]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800764a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800764e:	d106      	bne.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007652:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007656:	d102      	bne.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007658:	4b6a      	ldr	r3, [pc, #424]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800765a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800765c:	e002      	b.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800765e:	2300      	movs	r3, #0
 8007660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007662:	e122      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007664:	e121      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007666:	2300      	movs	r3, #0
 8007668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800766a:	e11e      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800766c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007670:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007674:	430b      	orrs	r3, r1
 8007676:	d133      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007678:	4b5f      	ldr	r3, [pc, #380]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800767a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800767c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007680:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007684:	2b00      	cmp	r3, #0
 8007686:	d004      	beq.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800768a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800768e:	d012      	beq.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007690:	e023      	b.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007692:	4b59      	ldr	r3, [pc, #356]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800769a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800769e:	d107      	bne.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 fbc7 	bl	8007e38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076ae:	e0fc      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076b4:	e0f9      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076b6:	4b50      	ldr	r3, [pc, #320]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076c2:	d107      	bne.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076c4:	f107 0318 	add.w	r3, r7, #24
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 f90d 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076d2:	e0ea      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076d4:	2300      	movs	r3, #0
 80076d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076d8:	e0e7      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80076da:	2300      	movs	r3, #0
 80076dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076de:	e0e4      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80076e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076e4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80076e8:	430b      	orrs	r3, r1
 80076ea:	f040 808d 	bne.w	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80076ee:	4b42      	ldr	r3, [pc, #264]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076f2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80076f6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80076f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076fe:	d06b      	beq.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007702:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007706:	d874      	bhi.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800770e:	d056      	beq.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007716:	d86c      	bhi.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800771e:	d03b      	beq.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007722:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007726:	d864      	bhi.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800772e:	d021      	beq.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007732:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007736:	d85c      	bhi.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773a:	2b00      	cmp	r3, #0
 800773c:	d004      	beq.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800773e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007740:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007744:	d004      	beq.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007746:	e054      	b.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007748:	f000 f8b8 	bl	80078bc <HAL_RCCEx_GetD3PCLK1Freq>
 800774c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800774e:	e0ac      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007750:	4b29      	ldr	r3, [pc, #164]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007758:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800775c:	d107      	bne.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800775e:	f107 0318 	add.w	r3, r7, #24
 8007762:	4618      	mov	r0, r3
 8007764:	f000 f8c0 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800776c:	e09d      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800776e:	2300      	movs	r3, #0
 8007770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007772:	e09a      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007774:	4b20      	ldr	r3, [pc, #128]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800777c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007780:	d107      	bne.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007782:	f107 030c 	add.w	r3, r7, #12
 8007786:	4618      	mov	r0, r3
 8007788:	f000 fa02 	bl	8007b90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007790:	e08b      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007792:	2300      	movs	r3, #0
 8007794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007796:	e088      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007798:	4b17      	ldr	r3, [pc, #92]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0304 	and.w	r3, r3, #4
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	d109      	bne.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077a4:	4b14      	ldr	r3, [pc, #80]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	08db      	lsrs	r3, r3, #3
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	4a13      	ldr	r2, [pc, #76]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80077b0:	fa22 f303 	lsr.w	r3, r2, r3
 80077b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077b6:	e078      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077b8:	2300      	movs	r3, #0
 80077ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077bc:	e075      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80077be:	4b0e      	ldr	r3, [pc, #56]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ca:	d102      	bne.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80077cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80077ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077d0:	e06b      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077d6:	e068      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80077d8:	4b07      	ldr	r3, [pc, #28]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077e4:	d102      	bne.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80077e6:	4b07      	ldr	r3, [pc, #28]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80077e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077ea:	e05e      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077ec:	2300      	movs	r3, #0
 80077ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077f0:	e05b      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80077f2:	2300      	movs	r3, #0
 80077f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077f6:	e058      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077f8:	58024400 	.word	0x58024400
 80077fc:	03d09000 	.word	0x03d09000
 8007800:	003d0900 	.word	0x003d0900
 8007804:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800780c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007810:	430b      	orrs	r3, r1
 8007812:	d148      	bne.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007814:	4b27      	ldr	r3, [pc, #156]	@ (80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007818:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800781c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800781e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007820:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007824:	d02a      	beq.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800782c:	d838      	bhi.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800782e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007830:	2b00      	cmp	r3, #0
 8007832:	d004      	beq.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007836:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800783a:	d00d      	beq.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800783c:	e030      	b.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800783e:	4b1d      	ldr	r3, [pc, #116]	@ (80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007846:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800784a:	d102      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800784c:	4b1a      	ldr	r3, [pc, #104]	@ (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800784e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007850:	e02b      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007852:	2300      	movs	r3, #0
 8007854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007856:	e028      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007858:	4b16      	ldr	r3, [pc, #88]	@ (80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007860:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007864:	d107      	bne.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007866:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fae4 	bl	8007e38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007874:	e019      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007876:	2300      	movs	r3, #0
 8007878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800787a:	e016      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800787c:	4b0d      	ldr	r3, [pc, #52]	@ (80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007884:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007888:	d107      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800788a:	f107 0318 	add.w	r3, r7, #24
 800788e:	4618      	mov	r0, r3
 8007890:	f000 f82a 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007898:	e007      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800789a:	2300      	movs	r3, #0
 800789c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800789e:	e004      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80078a0:	2300      	movs	r3, #0
 80078a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078a4:	e001      	b.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80078a6:	2300      	movs	r3, #0
 80078a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80078aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3740      	adds	r7, #64	@ 0x40
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	58024400 	.word	0x58024400
 80078b8:	007a1200 	.word	0x007a1200

080078bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80078c0:	f7fe f816 	bl	80058f0 <HAL_RCC_GetHCLKFreq>
 80078c4:	4602      	mov	r2, r0
 80078c6:	4b06      	ldr	r3, [pc, #24]	@ (80078e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	091b      	lsrs	r3, r3, #4
 80078cc:	f003 0307 	and.w	r3, r3, #7
 80078d0:	4904      	ldr	r1, [pc, #16]	@ (80078e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80078d2:	5ccb      	ldrb	r3, [r1, r3]
 80078d4:	f003 031f 	and.w	r3, r3, #31
 80078d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80078dc:	4618      	mov	r0, r3
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	58024400 	.word	0x58024400
 80078e4:	080098e4 	.word	0x080098e4

080078e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b089      	sub	sp, #36	@ 0x24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078f0:	4ba1      	ldr	r3, [pc, #644]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f4:	f003 0303 	and.w	r3, r3, #3
 80078f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80078fa:	4b9f      	ldr	r3, [pc, #636]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078fe:	0b1b      	lsrs	r3, r3, #12
 8007900:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007904:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007906:	4b9c      	ldr	r3, [pc, #624]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790a:	091b      	lsrs	r3, r3, #4
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007912:	4b99      	ldr	r3, [pc, #612]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007916:	08db      	lsrs	r3, r3, #3
 8007918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	fb02 f303 	mul.w	r3, r2, r3
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800792a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 8111 	beq.w	8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	2b02      	cmp	r3, #2
 800793a:	f000 8083 	beq.w	8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	2b02      	cmp	r3, #2
 8007942:	f200 80a1 	bhi.w	8007a88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d056      	beq.n	8007a00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007952:	e099      	b.n	8007a88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007954:	4b88      	ldr	r3, [pc, #544]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0320 	and.w	r3, r3, #32
 800795c:	2b00      	cmp	r3, #0
 800795e:	d02d      	beq.n	80079bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007960:	4b85      	ldr	r3, [pc, #532]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	08db      	lsrs	r3, r3, #3
 8007966:	f003 0303 	and.w	r3, r3, #3
 800796a:	4a84      	ldr	r2, [pc, #528]	@ (8007b7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800796c:	fa22 f303 	lsr.w	r3, r2, r3
 8007970:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	ee07 3a90 	vmov	s15, r3
 8007978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	ee07 3a90 	vmov	s15, r3
 8007982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800798a:	4b7b      	ldr	r3, [pc, #492]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800798c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007992:	ee07 3a90 	vmov	s15, r3
 8007996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800799a:	ed97 6a03 	vldr	s12, [r7, #12]
 800799e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80079ba:	e087      	b.n	8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	ee07 3a90 	vmov	s15, r3
 80079c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007b84 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80079ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ce:	4b6a      	ldr	r3, [pc, #424]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079d6:	ee07 3a90 	vmov	s15, r3
 80079da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079de:	ed97 6a03 	vldr	s12, [r7, #12]
 80079e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079fe:	e065      	b.n	8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	ee07 3a90 	vmov	s15, r3
 8007a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a0a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a12:	4b59      	ldr	r3, [pc, #356]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a1a:	ee07 3a90 	vmov	s15, r3
 8007a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a26:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a42:	e043      	b.n	8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	ee07 3a90 	vmov	s15, r3
 8007a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a4e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007b8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a56:	4b48      	ldr	r3, [pc, #288]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a5e:	ee07 3a90 	vmov	s15, r3
 8007a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a6a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a86:	e021      	b.n	8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a9a:	4b37      	ldr	r3, [pc, #220]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa2:	ee07 3a90 	vmov	s15, r3
 8007aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007aca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007acc:	4b2a      	ldr	r3, [pc, #168]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad0:	0a5b      	lsrs	r3, r3, #9
 8007ad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ad6:	ee07 3a90 	vmov	s15, r3
 8007ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ade:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ae2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ae6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007af2:	ee17 2a90 	vmov	r2, s15
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007afa:	4b1f      	ldr	r3, [pc, #124]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007afe:	0c1b      	lsrs	r3, r3, #16
 8007b00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b04:	ee07 3a90 	vmov	s15, r3
 8007b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b14:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b20:	ee17 2a90 	vmov	r2, s15
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007b28:	4b13      	ldr	r3, [pc, #76]	@ (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b2c:	0e1b      	lsrs	r3, r3, #24
 8007b2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b32:	ee07 3a90 	vmov	s15, r3
 8007b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b42:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b4e:	ee17 2a90 	vmov	r2, s15
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007b56:	e008      	b.n	8007b6a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	609a      	str	r2, [r3, #8]
}
 8007b6a:	bf00      	nop
 8007b6c:	3724      	adds	r7, #36	@ 0x24
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	58024400 	.word	0x58024400
 8007b7c:	03d09000 	.word	0x03d09000
 8007b80:	46000000 	.word	0x46000000
 8007b84:	4c742400 	.word	0x4c742400
 8007b88:	4a742400 	.word	0x4a742400
 8007b8c:	4af42400 	.word	0x4af42400

08007b90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b089      	sub	sp, #36	@ 0x24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b98:	4ba1      	ldr	r3, [pc, #644]	@ (8007e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b9c:	f003 0303 	and.w	r3, r3, #3
 8007ba0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007ba2:	4b9f      	ldr	r3, [pc, #636]	@ (8007e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba6:	0d1b      	lsrs	r3, r3, #20
 8007ba8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007bae:	4b9c      	ldr	r3, [pc, #624]	@ (8007e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb2:	0a1b      	lsrs	r3, r3, #8
 8007bb4:	f003 0301 	and.w	r3, r3, #1
 8007bb8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007bba:	4b99      	ldr	r3, [pc, #612]	@ (8007e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bbe:	08db      	lsrs	r3, r3, #3
 8007bc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	fb02 f303 	mul.w	r3, r2, r3
 8007bca:	ee07 3a90 	vmov	s15, r3
 8007bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 8111 	beq.w	8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	f000 8083 	beq.w	8007cec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	f200 80a1 	bhi.w	8007d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d003      	beq.n	8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d056      	beq.n	8007ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007bfa:	e099      	b.n	8007d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bfc:	4b88      	ldr	r3, [pc, #544]	@ (8007e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0320 	and.w	r3, r3, #32
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d02d      	beq.n	8007c64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c08:	4b85      	ldr	r3, [pc, #532]	@ (8007e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	08db      	lsrs	r3, r3, #3
 8007c0e:	f003 0303 	and.w	r3, r3, #3
 8007c12:	4a84      	ldr	r2, [pc, #528]	@ (8007e24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007c14:	fa22 f303 	lsr.w	r3, r2, r3
 8007c18:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	ee07 3a90 	vmov	s15, r3
 8007c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	ee07 3a90 	vmov	s15, r3
 8007c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c32:	4b7b      	ldr	r3, [pc, #492]	@ (8007e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c3a:	ee07 3a90 	vmov	s15, r3
 8007c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c46:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c62:	e087      	b.n	8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	ee07 3a90 	vmov	s15, r3
 8007c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c6e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007e2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c76:	4b6a      	ldr	r3, [pc, #424]	@ (8007e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c7e:	ee07 3a90 	vmov	s15, r3
 8007c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c8a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ca6:	e065      	b.n	8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	ee07 3a90 	vmov	s15, r3
 8007cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007e30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cba:	4b59      	ldr	r3, [pc, #356]	@ (8007e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cc2:	ee07 3a90 	vmov	s15, r3
 8007cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cea:	e043      	b.n	8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	ee07 3a90 	vmov	s15, r3
 8007cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007e34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cfe:	4b48      	ldr	r3, [pc, #288]	@ (8007e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d06:	ee07 3a90 	vmov	s15, r3
 8007d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d12:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d2e:	e021      	b.n	8007d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	ee07 3a90 	vmov	s15, r3
 8007d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d3a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007e30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d42:	4b37      	ldr	r3, [pc, #220]	@ (8007e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d4a:	ee07 3a90 	vmov	s15, r3
 8007d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d56:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007d74:	4b2a      	ldr	r3, [pc, #168]	@ (8007e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d78:	0a5b      	lsrs	r3, r3, #9
 8007d7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d7e:	ee07 3a90 	vmov	s15, r3
 8007d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d9a:	ee17 2a90 	vmov	r2, s15
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007da2:	4b1f      	ldr	r3, [pc, #124]	@ (8007e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da6:	0c1b      	lsrs	r3, r3, #16
 8007da8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dac:	ee07 3a90 	vmov	s15, r3
 8007db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007db8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dc8:	ee17 2a90 	vmov	r2, s15
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007dd0:	4b13      	ldr	r3, [pc, #76]	@ (8007e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd4:	0e1b      	lsrs	r3, r3, #24
 8007dd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dda:	ee07 3a90 	vmov	s15, r3
 8007dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007de6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007df6:	ee17 2a90 	vmov	r2, s15
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007dfe:	e008      	b.n	8007e12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	609a      	str	r2, [r3, #8]
}
 8007e12:	bf00      	nop
 8007e14:	3724      	adds	r7, #36	@ 0x24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	58024400 	.word	0x58024400
 8007e24:	03d09000 	.word	0x03d09000
 8007e28:	46000000 	.word	0x46000000
 8007e2c:	4c742400 	.word	0x4c742400
 8007e30:	4a742400 	.word	0x4a742400
 8007e34:	4af42400 	.word	0x4af42400

08007e38 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b089      	sub	sp, #36	@ 0x24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e40:	4ba0      	ldr	r3, [pc, #640]	@ (80080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e44:	f003 0303 	and.w	r3, r3, #3
 8007e48:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007e4a:	4b9e      	ldr	r3, [pc, #632]	@ (80080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e4e:	091b      	lsrs	r3, r3, #4
 8007e50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e54:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007e56:	4b9b      	ldr	r3, [pc, #620]	@ (80080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007e60:	4b98      	ldr	r3, [pc, #608]	@ (80080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e64:	08db      	lsrs	r3, r3, #3
 8007e66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e6a:	693a      	ldr	r2, [r7, #16]
 8007e6c:	fb02 f303 	mul.w	r3, r2, r3
 8007e70:	ee07 3a90 	vmov	s15, r3
 8007e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e78:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f000 8111 	beq.w	80080a6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	f000 8083 	beq.w	8007f92 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	f200 80a1 	bhi.w	8007fd6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d056      	beq.n	8007f4e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007ea0:	e099      	b.n	8007fd6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ea2:	4b88      	ldr	r3, [pc, #544]	@ (80080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d02d      	beq.n	8007f0a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007eae:	4b85      	ldr	r3, [pc, #532]	@ (80080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	08db      	lsrs	r3, r3, #3
 8007eb4:	f003 0303 	and.w	r3, r3, #3
 8007eb8:	4a83      	ldr	r2, [pc, #524]	@ (80080c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007eba:	fa22 f303 	lsr.w	r3, r2, r3
 8007ebe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	ee07 3a90 	vmov	s15, r3
 8007ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	ee07 3a90 	vmov	s15, r3
 8007ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ed8:	4b7a      	ldr	r3, [pc, #488]	@ (80080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ee0:	ee07 3a90 	vmov	s15, r3
 8007ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eec:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80080cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ef0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ef4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ef8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007efc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f04:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f08:	e087      	b.n	800801a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	ee07 3a90 	vmov	s15, r3
 8007f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f14:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007f18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f1c:	4b69      	ldr	r3, [pc, #420]	@ (80080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f24:	ee07 3a90 	vmov	s15, r3
 8007f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f30:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80080cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f4c:	e065      	b.n	800801a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	ee07 3a90 	vmov	s15, r3
 8007f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f58:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80080d4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007f5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f60:	4b58      	ldr	r3, [pc, #352]	@ (80080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f68:	ee07 3a90 	vmov	s15, r3
 8007f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f70:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f74:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80080cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f90:	e043      	b.n	800801a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	ee07 3a90 	vmov	s15, r3
 8007f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80080d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007fa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fa4:	4b47      	ldr	r3, [pc, #284]	@ (80080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fac:	ee07 3a90 	vmov	s15, r3
 8007fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fb8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80080cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007fbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fd4:	e021      	b.n	800801a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	ee07 3a90 	vmov	s15, r3
 8007fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007fe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fe8:	4b36      	ldr	r3, [pc, #216]	@ (80080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff0:	ee07 3a90 	vmov	s15, r3
 8007ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ff8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ffc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80080cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008000:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008008:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800800c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008014:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008018:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800801a:	4b2a      	ldr	r3, [pc, #168]	@ (80080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800801c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800801e:	0a5b      	lsrs	r3, r3, #9
 8008020:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008024:	ee07 3a90 	vmov	s15, r3
 8008028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008030:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008034:	edd7 6a07 	vldr	s13, [r7, #28]
 8008038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800803c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008040:	ee17 2a90 	vmov	r2, s15
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008048:	4b1e      	ldr	r3, [pc, #120]	@ (80080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800804a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800804c:	0c1b      	lsrs	r3, r3, #16
 800804e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008052:	ee07 3a90 	vmov	s15, r3
 8008056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800805e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008062:	edd7 6a07 	vldr	s13, [r7, #28]
 8008066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800806a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800806e:	ee17 2a90 	vmov	r2, s15
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008076:	4b13      	ldr	r3, [pc, #76]	@ (80080c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800807a:	0e1b      	lsrs	r3, r3, #24
 800807c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008080:	ee07 3a90 	vmov	s15, r3
 8008084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008088:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800808c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008090:	edd7 6a07 	vldr	s13, [r7, #28]
 8008094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800809c:	ee17 2a90 	vmov	r2, s15
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80080a4:	e008      	b.n	80080b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	609a      	str	r2, [r3, #8]
}
 80080b8:	bf00      	nop
 80080ba:	3724      	adds	r7, #36	@ 0x24
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	58024400 	.word	0x58024400
 80080c8:	03d09000 	.word	0x03d09000
 80080cc:	46000000 	.word	0x46000000
 80080d0:	4c742400 	.word	0x4c742400
 80080d4:	4a742400 	.word	0x4a742400
 80080d8:	4af42400 	.word	0x4af42400

080080dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80080ea:	4b53      	ldr	r3, [pc, #332]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80080ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ee:	f003 0303 	and.w	r3, r3, #3
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d101      	bne.n	80080fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e099      	b.n	800822e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80080fa:	4b4f      	ldr	r3, [pc, #316]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a4e      	ldr	r2, [pc, #312]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008100:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008106:	f7f9 fa03 	bl	8001510 <HAL_GetTick>
 800810a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800810c:	e008      	b.n	8008120 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800810e:	f7f9 f9ff 	bl	8001510 <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	2b02      	cmp	r3, #2
 800811a:	d901      	bls.n	8008120 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e086      	b.n	800822e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008120:	4b45      	ldr	r3, [pc, #276]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1f0      	bne.n	800810e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800812c:	4b42      	ldr	r3, [pc, #264]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 800812e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008130:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	031b      	lsls	r3, r3, #12
 800813a:	493f      	ldr	r1, [pc, #252]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 800813c:	4313      	orrs	r3, r2
 800813e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	3b01      	subs	r3, #1
 8008146:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	3b01      	subs	r3, #1
 8008150:	025b      	lsls	r3, r3, #9
 8008152:	b29b      	uxth	r3, r3
 8008154:	431a      	orrs	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	3b01      	subs	r3, #1
 800815c:	041b      	lsls	r3, r3, #16
 800815e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008162:	431a      	orrs	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	3b01      	subs	r3, #1
 800816a:	061b      	lsls	r3, r3, #24
 800816c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008170:	4931      	ldr	r1, [pc, #196]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008172:	4313      	orrs	r3, r2
 8008174:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008176:	4b30      	ldr	r3, [pc, #192]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	492d      	ldr	r1, [pc, #180]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008184:	4313      	orrs	r3, r2
 8008186:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008188:	4b2b      	ldr	r3, [pc, #172]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 800818a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818c:	f023 0220 	bic.w	r2, r3, #32
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	4928      	ldr	r1, [pc, #160]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008196:	4313      	orrs	r3, r2
 8008198:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800819a:	4b27      	ldr	r3, [pc, #156]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 800819c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819e:	4a26      	ldr	r2, [pc, #152]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081a0:	f023 0310 	bic.w	r3, r3, #16
 80081a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80081a6:	4b24      	ldr	r3, [pc, #144]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081aa:	4b24      	ldr	r3, [pc, #144]	@ (800823c <RCCEx_PLL2_Config+0x160>)
 80081ac:	4013      	ands	r3, r2
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	69d2      	ldr	r2, [r2, #28]
 80081b2:	00d2      	lsls	r2, r2, #3
 80081b4:	4920      	ldr	r1, [pc, #128]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80081ba:	4b1f      	ldr	r3, [pc, #124]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081be:	4a1e      	ldr	r2, [pc, #120]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081c0:	f043 0310 	orr.w	r3, r3, #16
 80081c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d106      	bne.n	80081da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80081cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d0:	4a19      	ldr	r2, [pc, #100]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80081d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081d8:	e00f      	b.n	80081fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d106      	bne.n	80081ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80081e0:	4b15      	ldr	r3, [pc, #84]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e4:	4a14      	ldr	r2, [pc, #80]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80081ec:	e005      	b.n	80081fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80081ee:	4b12      	ldr	r3, [pc, #72]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f2:	4a11      	ldr	r2, [pc, #68]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80081f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80081fa:	4b0f      	ldr	r3, [pc, #60]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a0e      	ldr	r2, [pc, #56]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008200:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008206:	f7f9 f983 	bl	8001510 <HAL_GetTick>
 800820a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800820c:	e008      	b.n	8008220 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800820e:	f7f9 f97f 	bl	8001510 <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	2b02      	cmp	r3, #2
 800821a:	d901      	bls.n	8008220 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e006      	b.n	800822e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008220:	4b05      	ldr	r3, [pc, #20]	@ (8008238 <RCCEx_PLL2_Config+0x15c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d0f0      	beq.n	800820e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800822c:	7bfb      	ldrb	r3, [r7, #15]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	58024400 	.word	0x58024400
 800823c:	ffff0007 	.word	0xffff0007

08008240 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800824e:	4b53      	ldr	r3, [pc, #332]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008252:	f003 0303 	and.w	r3, r3, #3
 8008256:	2b03      	cmp	r3, #3
 8008258:	d101      	bne.n	800825e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e099      	b.n	8008392 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800825e:	4b4f      	ldr	r3, [pc, #316]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a4e      	ldr	r2, [pc, #312]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008264:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800826a:	f7f9 f951 	bl	8001510 <HAL_GetTick>
 800826e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008270:	e008      	b.n	8008284 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008272:	f7f9 f94d 	bl	8001510 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	2b02      	cmp	r3, #2
 800827e:	d901      	bls.n	8008284 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e086      	b.n	8008392 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008284:	4b45      	ldr	r3, [pc, #276]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1f0      	bne.n	8008272 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008290:	4b42      	ldr	r3, [pc, #264]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008294:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	051b      	lsls	r3, r3, #20
 800829e:	493f      	ldr	r1, [pc, #252]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 80082a0:	4313      	orrs	r3, r2
 80082a2:	628b      	str	r3, [r1, #40]	@ 0x28
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	3b01      	subs	r3, #1
 80082b4:	025b      	lsls	r3, r3, #9
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	431a      	orrs	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	3b01      	subs	r3, #1
 80082c0:	041b      	lsls	r3, r3, #16
 80082c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80082c6:	431a      	orrs	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	061b      	lsls	r3, r3, #24
 80082d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80082d4:	4931      	ldr	r1, [pc, #196]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80082da:	4b30      	ldr	r3, [pc, #192]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 80082dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	492d      	ldr	r1, [pc, #180]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80082ec:	4b2b      	ldr	r3, [pc, #172]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 80082ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	4928      	ldr	r1, [pc, #160]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80082fe:	4b27      	ldr	r3, [pc, #156]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008302:	4a26      	ldr	r2, [pc, #152]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008308:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800830a:	4b24      	ldr	r3, [pc, #144]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 800830c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800830e:	4b24      	ldr	r3, [pc, #144]	@ (80083a0 <RCCEx_PLL3_Config+0x160>)
 8008310:	4013      	ands	r3, r2
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	69d2      	ldr	r2, [r2, #28]
 8008316:	00d2      	lsls	r2, r2, #3
 8008318:	4920      	ldr	r1, [pc, #128]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 800831a:	4313      	orrs	r3, r2
 800831c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800831e:	4b1f      	ldr	r3, [pc, #124]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008322:	4a1e      	ldr	r2, [pc, #120]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008328:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d106      	bne.n	800833e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008330:	4b1a      	ldr	r3, [pc, #104]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008334:	4a19      	ldr	r2, [pc, #100]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008336:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800833a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800833c:	e00f      	b.n	800835e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d106      	bne.n	8008352 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008344:	4b15      	ldr	r3, [pc, #84]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008348:	4a14      	ldr	r2, [pc, #80]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 800834a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800834e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008350:	e005      	b.n	800835e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008352:	4b12      	ldr	r3, [pc, #72]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008356:	4a11      	ldr	r2, [pc, #68]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008358:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800835c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800835e:	4b0f      	ldr	r3, [pc, #60]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a0e      	ldr	r2, [pc, #56]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800836a:	f7f9 f8d1 	bl	8001510 <HAL_GetTick>
 800836e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008370:	e008      	b.n	8008384 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008372:	f7f9 f8cd 	bl	8001510 <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	2b02      	cmp	r3, #2
 800837e:	d901      	bls.n	8008384 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e006      	b.n	8008392 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008384:	4b05      	ldr	r3, [pc, #20]	@ (800839c <RCCEx_PLL3_Config+0x15c>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800838c:	2b00      	cmp	r3, #0
 800838e:	d0f0      	beq.n	8008372 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008390:	7bfb      	ldrb	r3, [r7, #15]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	58024400 	.word	0x58024400
 80083a0:	ffff0007 	.word	0xffff0007

080083a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e049      	b.n	800844a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d106      	bne.n	80083d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7f8 fe44 	bl	8001058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2202      	movs	r2, #2
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3304      	adds	r3, #4
 80083e0:	4619      	mov	r1, r3
 80083e2:	4610      	mov	r0, r2
 80083e4:	f000 f836 	bl	8008454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
	...

08008454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a46      	ldr	r2, [pc, #280]	@ (8008580 <TIM_Base_SetConfig+0x12c>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d013      	beq.n	8008494 <TIM_Base_SetConfig+0x40>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008472:	d00f      	beq.n	8008494 <TIM_Base_SetConfig+0x40>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a43      	ldr	r2, [pc, #268]	@ (8008584 <TIM_Base_SetConfig+0x130>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d00b      	beq.n	8008494 <TIM_Base_SetConfig+0x40>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a42      	ldr	r2, [pc, #264]	@ (8008588 <TIM_Base_SetConfig+0x134>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d007      	beq.n	8008494 <TIM_Base_SetConfig+0x40>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a41      	ldr	r2, [pc, #260]	@ (800858c <TIM_Base_SetConfig+0x138>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d003      	beq.n	8008494 <TIM_Base_SetConfig+0x40>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a40      	ldr	r2, [pc, #256]	@ (8008590 <TIM_Base_SetConfig+0x13c>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d108      	bne.n	80084a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800849a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a35      	ldr	r2, [pc, #212]	@ (8008580 <TIM_Base_SetConfig+0x12c>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d01f      	beq.n	80084ee <TIM_Base_SetConfig+0x9a>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084b4:	d01b      	beq.n	80084ee <TIM_Base_SetConfig+0x9a>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a32      	ldr	r2, [pc, #200]	@ (8008584 <TIM_Base_SetConfig+0x130>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d017      	beq.n	80084ee <TIM_Base_SetConfig+0x9a>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a31      	ldr	r2, [pc, #196]	@ (8008588 <TIM_Base_SetConfig+0x134>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d013      	beq.n	80084ee <TIM_Base_SetConfig+0x9a>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a30      	ldr	r2, [pc, #192]	@ (800858c <TIM_Base_SetConfig+0x138>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d00f      	beq.n	80084ee <TIM_Base_SetConfig+0x9a>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a2f      	ldr	r2, [pc, #188]	@ (8008590 <TIM_Base_SetConfig+0x13c>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d00b      	beq.n	80084ee <TIM_Base_SetConfig+0x9a>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a2e      	ldr	r2, [pc, #184]	@ (8008594 <TIM_Base_SetConfig+0x140>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d007      	beq.n	80084ee <TIM_Base_SetConfig+0x9a>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a2d      	ldr	r2, [pc, #180]	@ (8008598 <TIM_Base_SetConfig+0x144>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d003      	beq.n	80084ee <TIM_Base_SetConfig+0x9a>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a2c      	ldr	r2, [pc, #176]	@ (800859c <TIM_Base_SetConfig+0x148>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d108      	bne.n	8008500 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	4313      	orrs	r3, r2
 800850c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	689a      	ldr	r2, [r3, #8]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a16      	ldr	r2, [pc, #88]	@ (8008580 <TIM_Base_SetConfig+0x12c>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d00f      	beq.n	800854c <TIM_Base_SetConfig+0xf8>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a18      	ldr	r2, [pc, #96]	@ (8008590 <TIM_Base_SetConfig+0x13c>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d00b      	beq.n	800854c <TIM_Base_SetConfig+0xf8>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a17      	ldr	r2, [pc, #92]	@ (8008594 <TIM_Base_SetConfig+0x140>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d007      	beq.n	800854c <TIM_Base_SetConfig+0xf8>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a16      	ldr	r2, [pc, #88]	@ (8008598 <TIM_Base_SetConfig+0x144>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d003      	beq.n	800854c <TIM_Base_SetConfig+0xf8>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a15      	ldr	r2, [pc, #84]	@ (800859c <TIM_Base_SetConfig+0x148>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d103      	bne.n	8008554 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	691a      	ldr	r2, [r3, #16]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	2b01      	cmp	r3, #1
 8008564:	d105      	bne.n	8008572 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	f023 0201 	bic.w	r2, r3, #1
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	611a      	str	r2, [r3, #16]
  }
}
 8008572:	bf00      	nop
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	40010000 	.word	0x40010000
 8008584:	40000400 	.word	0x40000400
 8008588:	40000800 	.word	0x40000800
 800858c:	40000c00 	.word	0x40000c00
 8008590:	40010400 	.word	0x40010400
 8008594:	40014000 	.word	0x40014000
 8008598:	40014400 	.word	0x40014400
 800859c:	40014800 	.word	0x40014800

080085a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d101      	bne.n	80085b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085b4:	2302      	movs	r3, #2
 80085b6:	e06d      	b.n	8008694 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2202      	movs	r2, #2
 80085c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a30      	ldr	r2, [pc, #192]	@ (80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d004      	beq.n	80085ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a2f      	ldr	r2, [pc, #188]	@ (80086a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d108      	bne.n	80085fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80085f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008604:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	4313      	orrs	r3, r2
 800860e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a20      	ldr	r2, [pc, #128]	@ (80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d022      	beq.n	8008668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800862a:	d01d      	beq.n	8008668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a1d      	ldr	r2, [pc, #116]	@ (80086a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d018      	beq.n	8008668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a1c      	ldr	r2, [pc, #112]	@ (80086ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d013      	beq.n	8008668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a1a      	ldr	r2, [pc, #104]	@ (80086b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d00e      	beq.n	8008668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a15      	ldr	r2, [pc, #84]	@ (80086a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d009      	beq.n	8008668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a16      	ldr	r2, [pc, #88]	@ (80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d004      	beq.n	8008668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a15      	ldr	r2, [pc, #84]	@ (80086b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d10c      	bne.n	8008682 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800866e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	4313      	orrs	r3, r2
 8008678:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	40010000 	.word	0x40010000
 80086a4:	40010400 	.word	0x40010400
 80086a8:	40000400 	.word	0x40000400
 80086ac:	40000800 	.word	0x40000800
 80086b0:	40000c00 	.word	0x40000c00
 80086b4:	40001800 	.word	0x40001800
 80086b8:	40014000 	.word	0x40014000

080086bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e042      	b.n	8008754 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d106      	bne.n	80086e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7f8 fcdb 	bl	800109c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2224      	movs	r2, #36	@ 0x24
 80086ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f022 0201 	bic.w	r2, r2, #1
 80086fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008702:	2b00      	cmp	r3, #0
 8008704:	d002      	beq.n	800870c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fd90 	bl	800922c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f825 	bl	800875c <UART_SetConfig>
 8008712:	4603      	mov	r3, r0
 8008714:	2b01      	cmp	r3, #1
 8008716:	d101      	bne.n	800871c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e01b      	b.n	8008754 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800872a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	689a      	ldr	r2, [r3, #8]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800873a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f042 0201 	orr.w	r2, r2, #1
 800874a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fe0f 	bl	8009370 <UART_CheckIdleState>
 8008752:	4603      	mov	r3, r0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800875c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008760:	b092      	sub	sp, #72	@ 0x48
 8008762:	af00      	add	r7, sp, #0
 8008764:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008766:	2300      	movs	r3, #0
 8008768:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	689a      	ldr	r2, [r3, #8]
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	431a      	orrs	r2, r3
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	431a      	orrs	r2, r3
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	4313      	orrs	r3, r2
 8008782:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	4bbe      	ldr	r3, [pc, #760]	@ (8008a84 <UART_SetConfig+0x328>)
 800878c:	4013      	ands	r3, r2
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	6812      	ldr	r2, [r2, #0]
 8008792:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008794:	430b      	orrs	r3, r1
 8008796:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	68da      	ldr	r2, [r3, #12]
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	430a      	orrs	r2, r1
 80087ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	699b      	ldr	r3, [r3, #24]
 80087b2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4ab3      	ldr	r2, [pc, #716]	@ (8008a88 <UART_SetConfig+0x32c>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d004      	beq.n	80087c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	6a1b      	ldr	r3, [r3, #32]
 80087c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087c4:	4313      	orrs	r3, r2
 80087c6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	689a      	ldr	r2, [r3, #8]
 80087ce:	4baf      	ldr	r3, [pc, #700]	@ (8008a8c <UART_SetConfig+0x330>)
 80087d0:	4013      	ands	r3, r2
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	6812      	ldr	r2, [r2, #0]
 80087d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80087d8:	430b      	orrs	r3, r1
 80087da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e2:	f023 010f 	bic.w	r1, r3, #15
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	430a      	orrs	r2, r1
 80087f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4aa6      	ldr	r2, [pc, #664]	@ (8008a90 <UART_SetConfig+0x334>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d177      	bne.n	80088ec <UART_SetConfig+0x190>
 80087fc:	4ba5      	ldr	r3, [pc, #660]	@ (8008a94 <UART_SetConfig+0x338>)
 80087fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008800:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008804:	2b28      	cmp	r3, #40	@ 0x28
 8008806:	d86d      	bhi.n	80088e4 <UART_SetConfig+0x188>
 8008808:	a201      	add	r2, pc, #4	@ (adr r2, 8008810 <UART_SetConfig+0xb4>)
 800880a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880e:	bf00      	nop
 8008810:	080088b5 	.word	0x080088b5
 8008814:	080088e5 	.word	0x080088e5
 8008818:	080088e5 	.word	0x080088e5
 800881c:	080088e5 	.word	0x080088e5
 8008820:	080088e5 	.word	0x080088e5
 8008824:	080088e5 	.word	0x080088e5
 8008828:	080088e5 	.word	0x080088e5
 800882c:	080088e5 	.word	0x080088e5
 8008830:	080088bd 	.word	0x080088bd
 8008834:	080088e5 	.word	0x080088e5
 8008838:	080088e5 	.word	0x080088e5
 800883c:	080088e5 	.word	0x080088e5
 8008840:	080088e5 	.word	0x080088e5
 8008844:	080088e5 	.word	0x080088e5
 8008848:	080088e5 	.word	0x080088e5
 800884c:	080088e5 	.word	0x080088e5
 8008850:	080088c5 	.word	0x080088c5
 8008854:	080088e5 	.word	0x080088e5
 8008858:	080088e5 	.word	0x080088e5
 800885c:	080088e5 	.word	0x080088e5
 8008860:	080088e5 	.word	0x080088e5
 8008864:	080088e5 	.word	0x080088e5
 8008868:	080088e5 	.word	0x080088e5
 800886c:	080088e5 	.word	0x080088e5
 8008870:	080088cd 	.word	0x080088cd
 8008874:	080088e5 	.word	0x080088e5
 8008878:	080088e5 	.word	0x080088e5
 800887c:	080088e5 	.word	0x080088e5
 8008880:	080088e5 	.word	0x080088e5
 8008884:	080088e5 	.word	0x080088e5
 8008888:	080088e5 	.word	0x080088e5
 800888c:	080088e5 	.word	0x080088e5
 8008890:	080088d5 	.word	0x080088d5
 8008894:	080088e5 	.word	0x080088e5
 8008898:	080088e5 	.word	0x080088e5
 800889c:	080088e5 	.word	0x080088e5
 80088a0:	080088e5 	.word	0x080088e5
 80088a4:	080088e5 	.word	0x080088e5
 80088a8:	080088e5 	.word	0x080088e5
 80088ac:	080088e5 	.word	0x080088e5
 80088b0:	080088dd 	.word	0x080088dd
 80088b4:	2301      	movs	r3, #1
 80088b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ba:	e222      	b.n	8008d02 <UART_SetConfig+0x5a6>
 80088bc:	2304      	movs	r3, #4
 80088be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088c2:	e21e      	b.n	8008d02 <UART_SetConfig+0x5a6>
 80088c4:	2308      	movs	r3, #8
 80088c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ca:	e21a      	b.n	8008d02 <UART_SetConfig+0x5a6>
 80088cc:	2310      	movs	r3, #16
 80088ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d2:	e216      	b.n	8008d02 <UART_SetConfig+0x5a6>
 80088d4:	2320      	movs	r3, #32
 80088d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088da:	e212      	b.n	8008d02 <UART_SetConfig+0x5a6>
 80088dc:	2340      	movs	r3, #64	@ 0x40
 80088de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e2:	e20e      	b.n	8008d02 <UART_SetConfig+0x5a6>
 80088e4:	2380      	movs	r3, #128	@ 0x80
 80088e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ea:	e20a      	b.n	8008d02 <UART_SetConfig+0x5a6>
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a69      	ldr	r2, [pc, #420]	@ (8008a98 <UART_SetConfig+0x33c>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d130      	bne.n	8008958 <UART_SetConfig+0x1fc>
 80088f6:	4b67      	ldr	r3, [pc, #412]	@ (8008a94 <UART_SetConfig+0x338>)
 80088f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088fa:	f003 0307 	and.w	r3, r3, #7
 80088fe:	2b05      	cmp	r3, #5
 8008900:	d826      	bhi.n	8008950 <UART_SetConfig+0x1f4>
 8008902:	a201      	add	r2, pc, #4	@ (adr r2, 8008908 <UART_SetConfig+0x1ac>)
 8008904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008908:	08008921 	.word	0x08008921
 800890c:	08008929 	.word	0x08008929
 8008910:	08008931 	.word	0x08008931
 8008914:	08008939 	.word	0x08008939
 8008918:	08008941 	.word	0x08008941
 800891c:	08008949 	.word	0x08008949
 8008920:	2300      	movs	r3, #0
 8008922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008926:	e1ec      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008928:	2304      	movs	r3, #4
 800892a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800892e:	e1e8      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008930:	2308      	movs	r3, #8
 8008932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008936:	e1e4      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008938:	2310      	movs	r3, #16
 800893a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893e:	e1e0      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008940:	2320      	movs	r3, #32
 8008942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008946:	e1dc      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008948:	2340      	movs	r3, #64	@ 0x40
 800894a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800894e:	e1d8      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008950:	2380      	movs	r3, #128	@ 0x80
 8008952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008956:	e1d4      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a4f      	ldr	r2, [pc, #316]	@ (8008a9c <UART_SetConfig+0x340>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d130      	bne.n	80089c4 <UART_SetConfig+0x268>
 8008962:	4b4c      	ldr	r3, [pc, #304]	@ (8008a94 <UART_SetConfig+0x338>)
 8008964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008966:	f003 0307 	and.w	r3, r3, #7
 800896a:	2b05      	cmp	r3, #5
 800896c:	d826      	bhi.n	80089bc <UART_SetConfig+0x260>
 800896e:	a201      	add	r2, pc, #4	@ (adr r2, 8008974 <UART_SetConfig+0x218>)
 8008970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008974:	0800898d 	.word	0x0800898d
 8008978:	08008995 	.word	0x08008995
 800897c:	0800899d 	.word	0x0800899d
 8008980:	080089a5 	.word	0x080089a5
 8008984:	080089ad 	.word	0x080089ad
 8008988:	080089b5 	.word	0x080089b5
 800898c:	2300      	movs	r3, #0
 800898e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008992:	e1b6      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008994:	2304      	movs	r3, #4
 8008996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800899a:	e1b2      	b.n	8008d02 <UART_SetConfig+0x5a6>
 800899c:	2308      	movs	r3, #8
 800899e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089a2:	e1ae      	b.n	8008d02 <UART_SetConfig+0x5a6>
 80089a4:	2310      	movs	r3, #16
 80089a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089aa:	e1aa      	b.n	8008d02 <UART_SetConfig+0x5a6>
 80089ac:	2320      	movs	r3, #32
 80089ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089b2:	e1a6      	b.n	8008d02 <UART_SetConfig+0x5a6>
 80089b4:	2340      	movs	r3, #64	@ 0x40
 80089b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ba:	e1a2      	b.n	8008d02 <UART_SetConfig+0x5a6>
 80089bc:	2380      	movs	r3, #128	@ 0x80
 80089be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c2:	e19e      	b.n	8008d02 <UART_SetConfig+0x5a6>
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a35      	ldr	r2, [pc, #212]	@ (8008aa0 <UART_SetConfig+0x344>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d130      	bne.n	8008a30 <UART_SetConfig+0x2d4>
 80089ce:	4b31      	ldr	r3, [pc, #196]	@ (8008a94 <UART_SetConfig+0x338>)
 80089d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089d2:	f003 0307 	and.w	r3, r3, #7
 80089d6:	2b05      	cmp	r3, #5
 80089d8:	d826      	bhi.n	8008a28 <UART_SetConfig+0x2cc>
 80089da:	a201      	add	r2, pc, #4	@ (adr r2, 80089e0 <UART_SetConfig+0x284>)
 80089dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e0:	080089f9 	.word	0x080089f9
 80089e4:	08008a01 	.word	0x08008a01
 80089e8:	08008a09 	.word	0x08008a09
 80089ec:	08008a11 	.word	0x08008a11
 80089f0:	08008a19 	.word	0x08008a19
 80089f4:	08008a21 	.word	0x08008a21
 80089f8:	2300      	movs	r3, #0
 80089fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089fe:	e180      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008a00:	2304      	movs	r3, #4
 8008a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a06:	e17c      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008a08:	2308      	movs	r3, #8
 8008a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a0e:	e178      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008a10:	2310      	movs	r3, #16
 8008a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a16:	e174      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008a18:	2320      	movs	r3, #32
 8008a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a1e:	e170      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008a20:	2340      	movs	r3, #64	@ 0x40
 8008a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a26:	e16c      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008a28:	2380      	movs	r3, #128	@ 0x80
 8008a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a2e:	e168      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a1b      	ldr	r2, [pc, #108]	@ (8008aa4 <UART_SetConfig+0x348>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d142      	bne.n	8008ac0 <UART_SetConfig+0x364>
 8008a3a:	4b16      	ldr	r3, [pc, #88]	@ (8008a94 <UART_SetConfig+0x338>)
 8008a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a3e:	f003 0307 	and.w	r3, r3, #7
 8008a42:	2b05      	cmp	r3, #5
 8008a44:	d838      	bhi.n	8008ab8 <UART_SetConfig+0x35c>
 8008a46:	a201      	add	r2, pc, #4	@ (adr r2, 8008a4c <UART_SetConfig+0x2f0>)
 8008a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4c:	08008a65 	.word	0x08008a65
 8008a50:	08008a6d 	.word	0x08008a6d
 8008a54:	08008a75 	.word	0x08008a75
 8008a58:	08008a7d 	.word	0x08008a7d
 8008a5c:	08008aa9 	.word	0x08008aa9
 8008a60:	08008ab1 	.word	0x08008ab1
 8008a64:	2300      	movs	r3, #0
 8008a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a6a:	e14a      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008a6c:	2304      	movs	r3, #4
 8008a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a72:	e146      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008a74:	2308      	movs	r3, #8
 8008a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a7a:	e142      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008a7c:	2310      	movs	r3, #16
 8008a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a82:	e13e      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008a84:	cfff69f3 	.word	0xcfff69f3
 8008a88:	58000c00 	.word	0x58000c00
 8008a8c:	11fff4ff 	.word	0x11fff4ff
 8008a90:	40011000 	.word	0x40011000
 8008a94:	58024400 	.word	0x58024400
 8008a98:	40004400 	.word	0x40004400
 8008a9c:	40004800 	.word	0x40004800
 8008aa0:	40004c00 	.word	0x40004c00
 8008aa4:	40005000 	.word	0x40005000
 8008aa8:	2320      	movs	r3, #32
 8008aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aae:	e128      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008ab0:	2340      	movs	r3, #64	@ 0x40
 8008ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ab6:	e124      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008ab8:	2380      	movs	r3, #128	@ 0x80
 8008aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008abe:	e120      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4acb      	ldr	r2, [pc, #812]	@ (8008df4 <UART_SetConfig+0x698>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d176      	bne.n	8008bb8 <UART_SetConfig+0x45c>
 8008aca:	4bcb      	ldr	r3, [pc, #812]	@ (8008df8 <UART_SetConfig+0x69c>)
 8008acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ace:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ad2:	2b28      	cmp	r3, #40	@ 0x28
 8008ad4:	d86c      	bhi.n	8008bb0 <UART_SetConfig+0x454>
 8008ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8008adc <UART_SetConfig+0x380>)
 8008ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008adc:	08008b81 	.word	0x08008b81
 8008ae0:	08008bb1 	.word	0x08008bb1
 8008ae4:	08008bb1 	.word	0x08008bb1
 8008ae8:	08008bb1 	.word	0x08008bb1
 8008aec:	08008bb1 	.word	0x08008bb1
 8008af0:	08008bb1 	.word	0x08008bb1
 8008af4:	08008bb1 	.word	0x08008bb1
 8008af8:	08008bb1 	.word	0x08008bb1
 8008afc:	08008b89 	.word	0x08008b89
 8008b00:	08008bb1 	.word	0x08008bb1
 8008b04:	08008bb1 	.word	0x08008bb1
 8008b08:	08008bb1 	.word	0x08008bb1
 8008b0c:	08008bb1 	.word	0x08008bb1
 8008b10:	08008bb1 	.word	0x08008bb1
 8008b14:	08008bb1 	.word	0x08008bb1
 8008b18:	08008bb1 	.word	0x08008bb1
 8008b1c:	08008b91 	.word	0x08008b91
 8008b20:	08008bb1 	.word	0x08008bb1
 8008b24:	08008bb1 	.word	0x08008bb1
 8008b28:	08008bb1 	.word	0x08008bb1
 8008b2c:	08008bb1 	.word	0x08008bb1
 8008b30:	08008bb1 	.word	0x08008bb1
 8008b34:	08008bb1 	.word	0x08008bb1
 8008b38:	08008bb1 	.word	0x08008bb1
 8008b3c:	08008b99 	.word	0x08008b99
 8008b40:	08008bb1 	.word	0x08008bb1
 8008b44:	08008bb1 	.word	0x08008bb1
 8008b48:	08008bb1 	.word	0x08008bb1
 8008b4c:	08008bb1 	.word	0x08008bb1
 8008b50:	08008bb1 	.word	0x08008bb1
 8008b54:	08008bb1 	.word	0x08008bb1
 8008b58:	08008bb1 	.word	0x08008bb1
 8008b5c:	08008ba1 	.word	0x08008ba1
 8008b60:	08008bb1 	.word	0x08008bb1
 8008b64:	08008bb1 	.word	0x08008bb1
 8008b68:	08008bb1 	.word	0x08008bb1
 8008b6c:	08008bb1 	.word	0x08008bb1
 8008b70:	08008bb1 	.word	0x08008bb1
 8008b74:	08008bb1 	.word	0x08008bb1
 8008b78:	08008bb1 	.word	0x08008bb1
 8008b7c:	08008ba9 	.word	0x08008ba9
 8008b80:	2301      	movs	r3, #1
 8008b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b86:	e0bc      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008b88:	2304      	movs	r3, #4
 8008b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b8e:	e0b8      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008b90:	2308      	movs	r3, #8
 8008b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b96:	e0b4      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008b98:	2310      	movs	r3, #16
 8008b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b9e:	e0b0      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008ba0:	2320      	movs	r3, #32
 8008ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ba6:	e0ac      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008ba8:	2340      	movs	r3, #64	@ 0x40
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bae:	e0a8      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008bb0:	2380      	movs	r3, #128	@ 0x80
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb6:	e0a4      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a8f      	ldr	r2, [pc, #572]	@ (8008dfc <UART_SetConfig+0x6a0>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d130      	bne.n	8008c24 <UART_SetConfig+0x4c8>
 8008bc2:	4b8d      	ldr	r3, [pc, #564]	@ (8008df8 <UART_SetConfig+0x69c>)
 8008bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bc6:	f003 0307 	and.w	r3, r3, #7
 8008bca:	2b05      	cmp	r3, #5
 8008bcc:	d826      	bhi.n	8008c1c <UART_SetConfig+0x4c0>
 8008bce:	a201      	add	r2, pc, #4	@ (adr r2, 8008bd4 <UART_SetConfig+0x478>)
 8008bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd4:	08008bed 	.word	0x08008bed
 8008bd8:	08008bf5 	.word	0x08008bf5
 8008bdc:	08008bfd 	.word	0x08008bfd
 8008be0:	08008c05 	.word	0x08008c05
 8008be4:	08008c0d 	.word	0x08008c0d
 8008be8:	08008c15 	.word	0x08008c15
 8008bec:	2300      	movs	r3, #0
 8008bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bf2:	e086      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008bf4:	2304      	movs	r3, #4
 8008bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bfa:	e082      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008bfc:	2308      	movs	r3, #8
 8008bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c02:	e07e      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008c04:	2310      	movs	r3, #16
 8008c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c0a:	e07a      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008c0c:	2320      	movs	r3, #32
 8008c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c12:	e076      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008c14:	2340      	movs	r3, #64	@ 0x40
 8008c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c1a:	e072      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008c1c:	2380      	movs	r3, #128	@ 0x80
 8008c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c22:	e06e      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a75      	ldr	r2, [pc, #468]	@ (8008e00 <UART_SetConfig+0x6a4>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d130      	bne.n	8008c90 <UART_SetConfig+0x534>
 8008c2e:	4b72      	ldr	r3, [pc, #456]	@ (8008df8 <UART_SetConfig+0x69c>)
 8008c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c32:	f003 0307 	and.w	r3, r3, #7
 8008c36:	2b05      	cmp	r3, #5
 8008c38:	d826      	bhi.n	8008c88 <UART_SetConfig+0x52c>
 8008c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c40 <UART_SetConfig+0x4e4>)
 8008c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c40:	08008c59 	.word	0x08008c59
 8008c44:	08008c61 	.word	0x08008c61
 8008c48:	08008c69 	.word	0x08008c69
 8008c4c:	08008c71 	.word	0x08008c71
 8008c50:	08008c79 	.word	0x08008c79
 8008c54:	08008c81 	.word	0x08008c81
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5e:	e050      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008c60:	2304      	movs	r3, #4
 8008c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c66:	e04c      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008c68:	2308      	movs	r3, #8
 8008c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6e:	e048      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008c70:	2310      	movs	r3, #16
 8008c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c76:	e044      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008c78:	2320      	movs	r3, #32
 8008c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7e:	e040      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008c80:	2340      	movs	r3, #64	@ 0x40
 8008c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c86:	e03c      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008c88:	2380      	movs	r3, #128	@ 0x80
 8008c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8e:	e038      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a5b      	ldr	r2, [pc, #364]	@ (8008e04 <UART_SetConfig+0x6a8>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d130      	bne.n	8008cfc <UART_SetConfig+0x5a0>
 8008c9a:	4b57      	ldr	r3, [pc, #348]	@ (8008df8 <UART_SetConfig+0x69c>)
 8008c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c9e:	f003 0307 	and.w	r3, r3, #7
 8008ca2:	2b05      	cmp	r3, #5
 8008ca4:	d826      	bhi.n	8008cf4 <UART_SetConfig+0x598>
 8008ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8008cac <UART_SetConfig+0x550>)
 8008ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cac:	08008cc5 	.word	0x08008cc5
 8008cb0:	08008ccd 	.word	0x08008ccd
 8008cb4:	08008cd5 	.word	0x08008cd5
 8008cb8:	08008cdd 	.word	0x08008cdd
 8008cbc:	08008ce5 	.word	0x08008ce5
 8008cc0:	08008ced 	.word	0x08008ced
 8008cc4:	2302      	movs	r3, #2
 8008cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cca:	e01a      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008ccc:	2304      	movs	r3, #4
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd2:	e016      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008cd4:	2308      	movs	r3, #8
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cda:	e012      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008cdc:	2310      	movs	r3, #16
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce2:	e00e      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008ce4:	2320      	movs	r3, #32
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cea:	e00a      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008cec:	2340      	movs	r3, #64	@ 0x40
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf2:	e006      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008cf4:	2380      	movs	r3, #128	@ 0x80
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfa:	e002      	b.n	8008d02 <UART_SetConfig+0x5a6>
 8008cfc:	2380      	movs	r3, #128	@ 0x80
 8008cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a3f      	ldr	r2, [pc, #252]	@ (8008e04 <UART_SetConfig+0x6a8>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	f040 80f8 	bne.w	8008efe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d0e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008d12:	2b20      	cmp	r3, #32
 8008d14:	dc46      	bgt.n	8008da4 <UART_SetConfig+0x648>
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	f2c0 8082 	blt.w	8008e20 <UART_SetConfig+0x6c4>
 8008d1c:	3b02      	subs	r3, #2
 8008d1e:	2b1e      	cmp	r3, #30
 8008d20:	d87e      	bhi.n	8008e20 <UART_SetConfig+0x6c4>
 8008d22:	a201      	add	r2, pc, #4	@ (adr r2, 8008d28 <UART_SetConfig+0x5cc>)
 8008d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d28:	08008dab 	.word	0x08008dab
 8008d2c:	08008e21 	.word	0x08008e21
 8008d30:	08008db3 	.word	0x08008db3
 8008d34:	08008e21 	.word	0x08008e21
 8008d38:	08008e21 	.word	0x08008e21
 8008d3c:	08008e21 	.word	0x08008e21
 8008d40:	08008dc3 	.word	0x08008dc3
 8008d44:	08008e21 	.word	0x08008e21
 8008d48:	08008e21 	.word	0x08008e21
 8008d4c:	08008e21 	.word	0x08008e21
 8008d50:	08008e21 	.word	0x08008e21
 8008d54:	08008e21 	.word	0x08008e21
 8008d58:	08008e21 	.word	0x08008e21
 8008d5c:	08008e21 	.word	0x08008e21
 8008d60:	08008dd3 	.word	0x08008dd3
 8008d64:	08008e21 	.word	0x08008e21
 8008d68:	08008e21 	.word	0x08008e21
 8008d6c:	08008e21 	.word	0x08008e21
 8008d70:	08008e21 	.word	0x08008e21
 8008d74:	08008e21 	.word	0x08008e21
 8008d78:	08008e21 	.word	0x08008e21
 8008d7c:	08008e21 	.word	0x08008e21
 8008d80:	08008e21 	.word	0x08008e21
 8008d84:	08008e21 	.word	0x08008e21
 8008d88:	08008e21 	.word	0x08008e21
 8008d8c:	08008e21 	.word	0x08008e21
 8008d90:	08008e21 	.word	0x08008e21
 8008d94:	08008e21 	.word	0x08008e21
 8008d98:	08008e21 	.word	0x08008e21
 8008d9c:	08008e21 	.word	0x08008e21
 8008da0:	08008e13 	.word	0x08008e13
 8008da4:	2b40      	cmp	r3, #64	@ 0x40
 8008da6:	d037      	beq.n	8008e18 <UART_SetConfig+0x6bc>
 8008da8:	e03a      	b.n	8008e20 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008daa:	f7fe fd87 	bl	80078bc <HAL_RCCEx_GetD3PCLK1Freq>
 8008dae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008db0:	e03c      	b.n	8008e2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fe fd96 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dc0:	e034      	b.n	8008e2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dc2:	f107 0318 	add.w	r3, r7, #24
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fe fee2 	bl	8007b90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dd0:	e02c      	b.n	8008e2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dd2:	4b09      	ldr	r3, [pc, #36]	@ (8008df8 <UART_SetConfig+0x69c>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 0320 	and.w	r3, r3, #32
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d016      	beq.n	8008e0c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008dde:	4b06      	ldr	r3, [pc, #24]	@ (8008df8 <UART_SetConfig+0x69c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	08db      	lsrs	r3, r3, #3
 8008de4:	f003 0303 	and.w	r3, r3, #3
 8008de8:	4a07      	ldr	r2, [pc, #28]	@ (8008e08 <UART_SetConfig+0x6ac>)
 8008dea:	fa22 f303 	lsr.w	r3, r2, r3
 8008dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008df0:	e01c      	b.n	8008e2c <UART_SetConfig+0x6d0>
 8008df2:	bf00      	nop
 8008df4:	40011400 	.word	0x40011400
 8008df8:	58024400 	.word	0x58024400
 8008dfc:	40007800 	.word	0x40007800
 8008e00:	40007c00 	.word	0x40007c00
 8008e04:	58000c00 	.word	0x58000c00
 8008e08:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008e0c:	4b9d      	ldr	r3, [pc, #628]	@ (8009084 <UART_SetConfig+0x928>)
 8008e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e10:	e00c      	b.n	8008e2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e12:	4b9d      	ldr	r3, [pc, #628]	@ (8009088 <UART_SetConfig+0x92c>)
 8008e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e16:	e009      	b.n	8008e2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e1e:	e005      	b.n	8008e2c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008e20:	2300      	movs	r3, #0
 8008e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008e2a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f000 81de 	beq.w	80091f0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e38:	4a94      	ldr	r2, [pc, #592]	@ (800908c <UART_SetConfig+0x930>)
 8008e3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e42:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e46:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	005b      	lsls	r3, r3, #1
 8008e50:	4413      	add	r3, r2
 8008e52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d305      	bcc.n	8008e64 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d903      	bls.n	8008e6c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008e6a:	e1c1      	b.n	80091f0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e6e:	2200      	movs	r2, #0
 8008e70:	60bb      	str	r3, [r7, #8]
 8008e72:	60fa      	str	r2, [r7, #12]
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e78:	4a84      	ldr	r2, [pc, #528]	@ (800908c <UART_SetConfig+0x930>)
 8008e7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	2200      	movs	r2, #0
 8008e82:	603b      	str	r3, [r7, #0]
 8008e84:	607a      	str	r2, [r7, #4]
 8008e86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e8e:	f7f7 fa23 	bl	80002d8 <__aeabi_uldivmod>
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	4610      	mov	r0, r2
 8008e98:	4619      	mov	r1, r3
 8008e9a:	f04f 0200 	mov.w	r2, #0
 8008e9e:	f04f 0300 	mov.w	r3, #0
 8008ea2:	020b      	lsls	r3, r1, #8
 8008ea4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ea8:	0202      	lsls	r2, r0, #8
 8008eaa:	6979      	ldr	r1, [r7, #20]
 8008eac:	6849      	ldr	r1, [r1, #4]
 8008eae:	0849      	lsrs	r1, r1, #1
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	4605      	mov	r5, r0
 8008eb6:	eb12 0804 	adds.w	r8, r2, r4
 8008eba:	eb43 0905 	adc.w	r9, r3, r5
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	469a      	mov	sl, r3
 8008ec6:	4693      	mov	fp, r2
 8008ec8:	4652      	mov	r2, sl
 8008eca:	465b      	mov	r3, fp
 8008ecc:	4640      	mov	r0, r8
 8008ece:	4649      	mov	r1, r9
 8008ed0:	f7f7 fa02 	bl	80002d8 <__aeabi_uldivmod>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4613      	mov	r3, r2
 8008eda:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ede:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ee2:	d308      	bcc.n	8008ef6 <UART_SetConfig+0x79a>
 8008ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008eea:	d204      	bcs.n	8008ef6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ef2:	60da      	str	r2, [r3, #12]
 8008ef4:	e17c      	b.n	80091f0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008efc:	e178      	b.n	80091f0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f06:	f040 80c5 	bne.w	8009094 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008f0a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f0e:	2b20      	cmp	r3, #32
 8008f10:	dc48      	bgt.n	8008fa4 <UART_SetConfig+0x848>
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	db7b      	blt.n	800900e <UART_SetConfig+0x8b2>
 8008f16:	2b20      	cmp	r3, #32
 8008f18:	d879      	bhi.n	800900e <UART_SetConfig+0x8b2>
 8008f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f20 <UART_SetConfig+0x7c4>)
 8008f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f20:	08008fab 	.word	0x08008fab
 8008f24:	08008fb3 	.word	0x08008fb3
 8008f28:	0800900f 	.word	0x0800900f
 8008f2c:	0800900f 	.word	0x0800900f
 8008f30:	08008fbb 	.word	0x08008fbb
 8008f34:	0800900f 	.word	0x0800900f
 8008f38:	0800900f 	.word	0x0800900f
 8008f3c:	0800900f 	.word	0x0800900f
 8008f40:	08008fcb 	.word	0x08008fcb
 8008f44:	0800900f 	.word	0x0800900f
 8008f48:	0800900f 	.word	0x0800900f
 8008f4c:	0800900f 	.word	0x0800900f
 8008f50:	0800900f 	.word	0x0800900f
 8008f54:	0800900f 	.word	0x0800900f
 8008f58:	0800900f 	.word	0x0800900f
 8008f5c:	0800900f 	.word	0x0800900f
 8008f60:	08008fdb 	.word	0x08008fdb
 8008f64:	0800900f 	.word	0x0800900f
 8008f68:	0800900f 	.word	0x0800900f
 8008f6c:	0800900f 	.word	0x0800900f
 8008f70:	0800900f 	.word	0x0800900f
 8008f74:	0800900f 	.word	0x0800900f
 8008f78:	0800900f 	.word	0x0800900f
 8008f7c:	0800900f 	.word	0x0800900f
 8008f80:	0800900f 	.word	0x0800900f
 8008f84:	0800900f 	.word	0x0800900f
 8008f88:	0800900f 	.word	0x0800900f
 8008f8c:	0800900f 	.word	0x0800900f
 8008f90:	0800900f 	.word	0x0800900f
 8008f94:	0800900f 	.word	0x0800900f
 8008f98:	0800900f 	.word	0x0800900f
 8008f9c:	0800900f 	.word	0x0800900f
 8008fa0:	08009001 	.word	0x08009001
 8008fa4:	2b40      	cmp	r3, #64	@ 0x40
 8008fa6:	d02e      	beq.n	8009006 <UART_SetConfig+0x8aa>
 8008fa8:	e031      	b.n	800900e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008faa:	f7fc fcd1 	bl	8005950 <HAL_RCC_GetPCLK1Freq>
 8008fae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fb0:	e033      	b.n	800901a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fb2:	f7fc fce3 	bl	800597c <HAL_RCC_GetPCLK2Freq>
 8008fb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fb8:	e02f      	b.n	800901a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fe fc92 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fc8:	e027      	b.n	800901a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fca:	f107 0318 	add.w	r3, r7, #24
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fe fdde 	bl	8007b90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fd8:	e01f      	b.n	800901a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fda:	4b2d      	ldr	r3, [pc, #180]	@ (8009090 <UART_SetConfig+0x934>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 0320 	and.w	r3, r3, #32
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d009      	beq.n	8008ffa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8009090 <UART_SetConfig+0x934>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	08db      	lsrs	r3, r3, #3
 8008fec:	f003 0303 	and.w	r3, r3, #3
 8008ff0:	4a24      	ldr	r2, [pc, #144]	@ (8009084 <UART_SetConfig+0x928>)
 8008ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ff8:	e00f      	b.n	800901a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008ffa:	4b22      	ldr	r3, [pc, #136]	@ (8009084 <UART_SetConfig+0x928>)
 8008ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ffe:	e00c      	b.n	800901a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009000:	4b21      	ldr	r3, [pc, #132]	@ (8009088 <UART_SetConfig+0x92c>)
 8009002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009004:	e009      	b.n	800901a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800900a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800900c:	e005      	b.n	800901a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800900e:	2300      	movs	r3, #0
 8009010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009018:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800901a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 80e7 	beq.w	80091f0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009026:	4a19      	ldr	r2, [pc, #100]	@ (800908c <UART_SetConfig+0x930>)
 8009028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800902c:	461a      	mov	r2, r3
 800902e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009030:	fbb3 f3f2 	udiv	r3, r3, r2
 8009034:	005a      	lsls	r2, r3, #1
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	085b      	lsrs	r3, r3, #1
 800903c:	441a      	add	r2, r3
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	fbb2 f3f3 	udiv	r3, r2, r3
 8009046:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800904a:	2b0f      	cmp	r3, #15
 800904c:	d916      	bls.n	800907c <UART_SetConfig+0x920>
 800904e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009054:	d212      	bcs.n	800907c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009058:	b29b      	uxth	r3, r3
 800905a:	f023 030f 	bic.w	r3, r3, #15
 800905e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009062:	085b      	lsrs	r3, r3, #1
 8009064:	b29b      	uxth	r3, r3
 8009066:	f003 0307 	and.w	r3, r3, #7
 800906a:	b29a      	uxth	r2, r3
 800906c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800906e:	4313      	orrs	r3, r2
 8009070:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009078:	60da      	str	r2, [r3, #12]
 800907a:	e0b9      	b.n	80091f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009082:	e0b5      	b.n	80091f0 <UART_SetConfig+0xa94>
 8009084:	03d09000 	.word	0x03d09000
 8009088:	003d0900 	.word	0x003d0900
 800908c:	080098fc 	.word	0x080098fc
 8009090:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009094:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009098:	2b20      	cmp	r3, #32
 800909a:	dc49      	bgt.n	8009130 <UART_SetConfig+0x9d4>
 800909c:	2b00      	cmp	r3, #0
 800909e:	db7c      	blt.n	800919a <UART_SetConfig+0xa3e>
 80090a0:	2b20      	cmp	r3, #32
 80090a2:	d87a      	bhi.n	800919a <UART_SetConfig+0xa3e>
 80090a4:	a201      	add	r2, pc, #4	@ (adr r2, 80090ac <UART_SetConfig+0x950>)
 80090a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090aa:	bf00      	nop
 80090ac:	08009137 	.word	0x08009137
 80090b0:	0800913f 	.word	0x0800913f
 80090b4:	0800919b 	.word	0x0800919b
 80090b8:	0800919b 	.word	0x0800919b
 80090bc:	08009147 	.word	0x08009147
 80090c0:	0800919b 	.word	0x0800919b
 80090c4:	0800919b 	.word	0x0800919b
 80090c8:	0800919b 	.word	0x0800919b
 80090cc:	08009157 	.word	0x08009157
 80090d0:	0800919b 	.word	0x0800919b
 80090d4:	0800919b 	.word	0x0800919b
 80090d8:	0800919b 	.word	0x0800919b
 80090dc:	0800919b 	.word	0x0800919b
 80090e0:	0800919b 	.word	0x0800919b
 80090e4:	0800919b 	.word	0x0800919b
 80090e8:	0800919b 	.word	0x0800919b
 80090ec:	08009167 	.word	0x08009167
 80090f0:	0800919b 	.word	0x0800919b
 80090f4:	0800919b 	.word	0x0800919b
 80090f8:	0800919b 	.word	0x0800919b
 80090fc:	0800919b 	.word	0x0800919b
 8009100:	0800919b 	.word	0x0800919b
 8009104:	0800919b 	.word	0x0800919b
 8009108:	0800919b 	.word	0x0800919b
 800910c:	0800919b 	.word	0x0800919b
 8009110:	0800919b 	.word	0x0800919b
 8009114:	0800919b 	.word	0x0800919b
 8009118:	0800919b 	.word	0x0800919b
 800911c:	0800919b 	.word	0x0800919b
 8009120:	0800919b 	.word	0x0800919b
 8009124:	0800919b 	.word	0x0800919b
 8009128:	0800919b 	.word	0x0800919b
 800912c:	0800918d 	.word	0x0800918d
 8009130:	2b40      	cmp	r3, #64	@ 0x40
 8009132:	d02e      	beq.n	8009192 <UART_SetConfig+0xa36>
 8009134:	e031      	b.n	800919a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009136:	f7fc fc0b 	bl	8005950 <HAL_RCC_GetPCLK1Freq>
 800913a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800913c:	e033      	b.n	80091a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800913e:	f7fc fc1d 	bl	800597c <HAL_RCC_GetPCLK2Freq>
 8009142:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009144:	e02f      	b.n	80091a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800914a:	4618      	mov	r0, r3
 800914c:	f7fe fbcc 	bl	80078e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009154:	e027      	b.n	80091a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009156:	f107 0318 	add.w	r3, r7, #24
 800915a:	4618      	mov	r0, r3
 800915c:	f7fe fd18 	bl	8007b90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009164:	e01f      	b.n	80091a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009166:	4b2d      	ldr	r3, [pc, #180]	@ (800921c <UART_SetConfig+0xac0>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 0320 	and.w	r3, r3, #32
 800916e:	2b00      	cmp	r3, #0
 8009170:	d009      	beq.n	8009186 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009172:	4b2a      	ldr	r3, [pc, #168]	@ (800921c <UART_SetConfig+0xac0>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	08db      	lsrs	r3, r3, #3
 8009178:	f003 0303 	and.w	r3, r3, #3
 800917c:	4a28      	ldr	r2, [pc, #160]	@ (8009220 <UART_SetConfig+0xac4>)
 800917e:	fa22 f303 	lsr.w	r3, r2, r3
 8009182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009184:	e00f      	b.n	80091a6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009186:	4b26      	ldr	r3, [pc, #152]	@ (8009220 <UART_SetConfig+0xac4>)
 8009188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800918a:	e00c      	b.n	80091a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800918c:	4b25      	ldr	r3, [pc, #148]	@ (8009224 <UART_SetConfig+0xac8>)
 800918e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009190:	e009      	b.n	80091a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009198:	e005      	b.n	80091a6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800919a:	2300      	movs	r3, #0
 800919c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80091a4:	bf00      	nop
    }

    if (pclk != 0U)
 80091a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d021      	beq.n	80091f0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b0:	4a1d      	ldr	r2, [pc, #116]	@ (8009228 <UART_SetConfig+0xacc>)
 80091b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091b6:	461a      	mov	r2, r3
 80091b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	085b      	lsrs	r3, r3, #1
 80091c4:	441a      	add	r2, r3
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d2:	2b0f      	cmp	r3, #15
 80091d4:	d909      	bls.n	80091ea <UART_SetConfig+0xa8e>
 80091d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091dc:	d205      	bcs.n	80091ea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	60da      	str	r2, [r3, #12]
 80091e8:	e002      	b.n	80091f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	2200      	movs	r2, #0
 8009204:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	2200      	movs	r2, #0
 800920a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800920c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009210:	4618      	mov	r0, r3
 8009212:	3748      	adds	r7, #72	@ 0x48
 8009214:	46bd      	mov	sp, r7
 8009216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800921a:	bf00      	nop
 800921c:	58024400 	.word	0x58024400
 8009220:	03d09000 	.word	0x03d09000
 8009224:	003d0900 	.word	0x003d0900
 8009228:	080098fc 	.word	0x080098fc

0800922c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009238:	f003 0308 	and.w	r3, r3, #8
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00a      	beq.n	8009256 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	430a      	orrs	r2, r1
 8009254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800925a:	f003 0301 	and.w	r3, r3, #1
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00a      	beq.n	8009278 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800927c:	f003 0302 	and.w	r3, r3, #2
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00a      	beq.n	800929a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	430a      	orrs	r2, r1
 8009298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929e:	f003 0304 	and.w	r3, r3, #4
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00a      	beq.n	80092bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	430a      	orrs	r2, r1
 80092ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c0:	f003 0310 	and.w	r3, r3, #16
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00a      	beq.n	80092de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	430a      	orrs	r2, r1
 80092dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e2:	f003 0320 	and.w	r3, r3, #32
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00a      	beq.n	8009300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	430a      	orrs	r2, r1
 80092fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009308:	2b00      	cmp	r3, #0
 800930a:	d01a      	beq.n	8009342 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	430a      	orrs	r2, r1
 8009320:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009326:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800932a:	d10a      	bne.n	8009342 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	430a      	orrs	r2, r1
 8009340:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00a      	beq.n	8009364 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	430a      	orrs	r2, r1
 8009362:	605a      	str	r2, [r3, #4]
  }
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b098      	sub	sp, #96	@ 0x60
 8009374:	af02      	add	r7, sp, #8
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009380:	f7f8 f8c6 	bl	8001510 <HAL_GetTick>
 8009384:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 0308 	and.w	r3, r3, #8
 8009390:	2b08      	cmp	r3, #8
 8009392:	d12f      	bne.n	80093f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009394:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800939c:	2200      	movs	r2, #0
 800939e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f88e 	bl	80094c4 <UART_WaitOnFlagUntilTimeout>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d022      	beq.n	80093f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b6:	e853 3f00 	ldrex	r3, [r3]
 80093ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	461a      	mov	r2, r3
 80093ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80093ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093d4:	e841 2300 	strex	r3, r2, [r1]
 80093d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1e6      	bne.n	80093ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2220      	movs	r2, #32
 80093e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e063      	b.n	80094bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 0304 	and.w	r3, r3, #4
 80093fe:	2b04      	cmp	r3, #4
 8009400:	d149      	bne.n	8009496 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009402:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800940a:	2200      	movs	r2, #0
 800940c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 f857 	bl	80094c4 <UART_WaitOnFlagUntilTimeout>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d03c      	beq.n	8009496 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009424:	e853 3f00 	ldrex	r3, [r3]
 8009428:	623b      	str	r3, [r7, #32]
   return(result);
 800942a:	6a3b      	ldr	r3, [r7, #32]
 800942c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009430:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800943a:	633b      	str	r3, [r7, #48]	@ 0x30
 800943c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009442:	e841 2300 	strex	r3, r2, [r1]
 8009446:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1e6      	bne.n	800941c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3308      	adds	r3, #8
 8009454:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	e853 3f00 	ldrex	r3, [r3]
 800945c:	60fb      	str	r3, [r7, #12]
   return(result);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f023 0301 	bic.w	r3, r3, #1
 8009464:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	3308      	adds	r3, #8
 800946c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800946e:	61fa      	str	r2, [r7, #28]
 8009470:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009472:	69b9      	ldr	r1, [r7, #24]
 8009474:	69fa      	ldr	r2, [r7, #28]
 8009476:	e841 2300 	strex	r3, r2, [r1]
 800947a:	617b      	str	r3, [r7, #20]
   return(result);
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1e5      	bne.n	800944e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2220      	movs	r2, #32
 8009486:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009492:	2303      	movs	r3, #3
 8009494:	e012      	b.n	80094bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2220      	movs	r2, #32
 800949a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2220      	movs	r2, #32
 80094a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3758      	adds	r7, #88	@ 0x58
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	603b      	str	r3, [r7, #0]
 80094d0:	4613      	mov	r3, r2
 80094d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094d4:	e04f      	b.n	8009576 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094dc:	d04b      	beq.n	8009576 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094de:	f7f8 f817 	bl	8001510 <HAL_GetTick>
 80094e2:	4602      	mov	r2, r0
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	69ba      	ldr	r2, [r7, #24]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d302      	bcc.n	80094f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d101      	bne.n	80094f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80094f4:	2303      	movs	r3, #3
 80094f6:	e04e      	b.n	8009596 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 0304 	and.w	r3, r3, #4
 8009502:	2b00      	cmp	r3, #0
 8009504:	d037      	beq.n	8009576 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	2b80      	cmp	r3, #128	@ 0x80
 800950a:	d034      	beq.n	8009576 <UART_WaitOnFlagUntilTimeout+0xb2>
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	2b40      	cmp	r3, #64	@ 0x40
 8009510:	d031      	beq.n	8009576 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	69db      	ldr	r3, [r3, #28]
 8009518:	f003 0308 	and.w	r3, r3, #8
 800951c:	2b08      	cmp	r3, #8
 800951e:	d110      	bne.n	8009542 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2208      	movs	r2, #8
 8009526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 f839 	bl	80095a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2208      	movs	r2, #8
 8009532:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	e029      	b.n	8009596 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69db      	ldr	r3, [r3, #28]
 8009548:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800954c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009550:	d111      	bne.n	8009576 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800955a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	f000 f81f 	bl	80095a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2220      	movs	r2, #32
 8009566:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009572:	2303      	movs	r3, #3
 8009574:	e00f      	b.n	8009596 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	69da      	ldr	r2, [r3, #28]
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	4013      	ands	r3, r2
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	429a      	cmp	r2, r3
 8009584:	bf0c      	ite	eq
 8009586:	2301      	moveq	r3, #1
 8009588:	2300      	movne	r3, #0
 800958a:	b2db      	uxtb	r3, r3
 800958c:	461a      	mov	r2, r3
 800958e:	79fb      	ldrb	r3, [r7, #7]
 8009590:	429a      	cmp	r2, r3
 8009592:	d0a0      	beq.n	80094d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
	...

080095a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b095      	sub	sp, #84	@ 0x54
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095b0:	e853 3f00 	ldrex	r3, [r3]
 80095b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80095b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	461a      	mov	r2, r3
 80095c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80095c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80095cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095ce:	e841 2300 	strex	r3, r2, [r1]
 80095d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d1e6      	bne.n	80095a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	3308      	adds	r3, #8
 80095e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e2:	6a3b      	ldr	r3, [r7, #32]
 80095e4:	e853 3f00 	ldrex	r3, [r3]
 80095e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80095ea:	69fa      	ldr	r2, [r7, #28]
 80095ec:	4b1e      	ldr	r3, [pc, #120]	@ (8009668 <UART_EndRxTransfer+0xc8>)
 80095ee:	4013      	ands	r3, r2
 80095f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3308      	adds	r3, #8
 80095f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80095fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009600:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009602:	e841 2300 	strex	r3, r2, [r1]
 8009606:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1e5      	bne.n	80095da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009612:	2b01      	cmp	r3, #1
 8009614:	d118      	bne.n	8009648 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	e853 3f00 	ldrex	r3, [r3]
 8009622:	60bb      	str	r3, [r7, #8]
   return(result);
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	f023 0310 	bic.w	r3, r3, #16
 800962a:	647b      	str	r3, [r7, #68]	@ 0x44
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	461a      	mov	r2, r3
 8009632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009634:	61bb      	str	r3, [r7, #24]
 8009636:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009638:	6979      	ldr	r1, [r7, #20]
 800963a:	69ba      	ldr	r2, [r7, #24]
 800963c:	e841 2300 	strex	r3, r2, [r1]
 8009640:	613b      	str	r3, [r7, #16]
   return(result);
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1e6      	bne.n	8009616 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2220      	movs	r2, #32
 800964c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800965c:	bf00      	nop
 800965e:	3754      	adds	r7, #84	@ 0x54
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr
 8009668:	effffffe 	.word	0xeffffffe

0800966c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800967a:	2b01      	cmp	r3, #1
 800967c:	d101      	bne.n	8009682 <HAL_UARTEx_DisableFifoMode+0x16>
 800967e:	2302      	movs	r3, #2
 8009680:	e027      	b.n	80096d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2224      	movs	r2, #36	@ 0x24
 800968e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f022 0201 	bic.w	r2, r2, #1
 80096a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80096b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2220      	movs	r2, #32
 80096c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3714      	adds	r7, #20
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr

080096de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b084      	sub	sp, #16
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d101      	bne.n	80096f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80096f2:	2302      	movs	r3, #2
 80096f4:	e02d      	b.n	8009752 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2224      	movs	r2, #36	@ 0x24
 8009702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f022 0201 	bic.w	r2, r2, #1
 800971c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	683a      	ldr	r2, [r7, #0]
 800972e:	430a      	orrs	r2, r1
 8009730:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f850 	bl	80097d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2220      	movs	r2, #32
 8009744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b084      	sub	sp, #16
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800976a:	2b01      	cmp	r3, #1
 800976c:	d101      	bne.n	8009772 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800976e:	2302      	movs	r3, #2
 8009770:	e02d      	b.n	80097ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2224      	movs	r2, #36	@ 0x24
 800977e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f022 0201 	bic.w	r2, r2, #1
 8009798:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	430a      	orrs	r2, r1
 80097ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f812 	bl	80097d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2220      	movs	r2, #32
 80097c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
	...

080097d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d108      	bne.n	80097fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80097f8:	e031      	b.n	800985e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80097fa:	2310      	movs	r3, #16
 80097fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80097fe:	2310      	movs	r3, #16
 8009800:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	0e5b      	lsrs	r3, r3, #25
 800980a:	b2db      	uxtb	r3, r3
 800980c:	f003 0307 	and.w	r3, r3, #7
 8009810:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	0f5b      	lsrs	r3, r3, #29
 800981a:	b2db      	uxtb	r3, r3
 800981c:	f003 0307 	and.w	r3, r3, #7
 8009820:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009822:	7bbb      	ldrb	r3, [r7, #14]
 8009824:	7b3a      	ldrb	r2, [r7, #12]
 8009826:	4911      	ldr	r1, [pc, #68]	@ (800986c <UARTEx_SetNbDataToProcess+0x94>)
 8009828:	5c8a      	ldrb	r2, [r1, r2]
 800982a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800982e:	7b3a      	ldrb	r2, [r7, #12]
 8009830:	490f      	ldr	r1, [pc, #60]	@ (8009870 <UARTEx_SetNbDataToProcess+0x98>)
 8009832:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009834:	fb93 f3f2 	sdiv	r3, r3, r2
 8009838:	b29a      	uxth	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009840:	7bfb      	ldrb	r3, [r7, #15]
 8009842:	7b7a      	ldrb	r2, [r7, #13]
 8009844:	4909      	ldr	r1, [pc, #36]	@ (800986c <UARTEx_SetNbDataToProcess+0x94>)
 8009846:	5c8a      	ldrb	r2, [r1, r2]
 8009848:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800984c:	7b7a      	ldrb	r2, [r7, #13]
 800984e:	4908      	ldr	r1, [pc, #32]	@ (8009870 <UARTEx_SetNbDataToProcess+0x98>)
 8009850:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009852:	fb93 f3f2 	sdiv	r3, r3, r2
 8009856:	b29a      	uxth	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800985e:	bf00      	nop
 8009860:	3714      	adds	r7, #20
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	08009914 	.word	0x08009914
 8009870:	0800991c 	.word	0x0800991c

08009874 <memset>:
 8009874:	4402      	add	r2, r0
 8009876:	4603      	mov	r3, r0
 8009878:	4293      	cmp	r3, r2
 800987a:	d100      	bne.n	800987e <memset+0xa>
 800987c:	4770      	bx	lr
 800987e:	f803 1b01 	strb.w	r1, [r3], #1
 8009882:	e7f9      	b.n	8009878 <memset+0x4>

08009884 <__libc_init_array>:
 8009884:	b570      	push	{r4, r5, r6, lr}
 8009886:	4d0d      	ldr	r5, [pc, #52]	@ (80098bc <__libc_init_array+0x38>)
 8009888:	4c0d      	ldr	r4, [pc, #52]	@ (80098c0 <__libc_init_array+0x3c>)
 800988a:	1b64      	subs	r4, r4, r5
 800988c:	10a4      	asrs	r4, r4, #2
 800988e:	2600      	movs	r6, #0
 8009890:	42a6      	cmp	r6, r4
 8009892:	d109      	bne.n	80098a8 <__libc_init_array+0x24>
 8009894:	4d0b      	ldr	r5, [pc, #44]	@ (80098c4 <__libc_init_array+0x40>)
 8009896:	4c0c      	ldr	r4, [pc, #48]	@ (80098c8 <__libc_init_array+0x44>)
 8009898:	f000 f818 	bl	80098cc <_init>
 800989c:	1b64      	subs	r4, r4, r5
 800989e:	10a4      	asrs	r4, r4, #2
 80098a0:	2600      	movs	r6, #0
 80098a2:	42a6      	cmp	r6, r4
 80098a4:	d105      	bne.n	80098b2 <__libc_init_array+0x2e>
 80098a6:	bd70      	pop	{r4, r5, r6, pc}
 80098a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80098ac:	4798      	blx	r3
 80098ae:	3601      	adds	r6, #1
 80098b0:	e7ee      	b.n	8009890 <__libc_init_array+0xc>
 80098b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80098b6:	4798      	blx	r3
 80098b8:	3601      	adds	r6, #1
 80098ba:	e7f2      	b.n	80098a2 <__libc_init_array+0x1e>
 80098bc:	0800992c 	.word	0x0800992c
 80098c0:	0800992c 	.word	0x0800992c
 80098c4:	0800992c 	.word	0x0800992c
 80098c8:	08009930 	.word	0x08009930

080098cc <_init>:
 80098cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ce:	bf00      	nop
 80098d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098d2:	bc08      	pop	{r3}
 80098d4:	469e      	mov	lr, r3
 80098d6:	4770      	bx	lr

080098d8 <_fini>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	bf00      	nop
 80098dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098de:	bc08      	pop	{r3}
 80098e0:	469e      	mov	lr, r3
 80098e2:	4770      	bx	lr
