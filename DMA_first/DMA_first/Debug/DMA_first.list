
DMA_first.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082e4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800857c  0800857c  0000957c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080085bc  080085bc  000095bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080085c4  080085c4  000095c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080085c8  080085c8  000095c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  080085cc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a28  24000014  080085e0  0000a014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000a3c  080085e0  0000aa3c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000186e8  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a86  00000000  00000000  0002272a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001310  00000000  00000000  000251b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ee4  00000000  00000000  000264c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038e1c  00000000  00000000  000273a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a61e  00000000  00000000  000601c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017658a  00000000  00000000  0007a7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f0d68  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005168  00000000  00000000  001f0dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007c  00000000  00000000  001f5f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008564 	.word	0x08008564

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	08008564 	.word	0x08008564

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADC_custom_init>:
volatile bool pre_triggd = 0;
volatile bool triggd = 0;
volatile uint16_t trig_indx=1;
volatile uint16_t trig_indx_c;

void ADC_custom_init(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0


//	ADC3->CR &= ~ADC_CR_ADSTART;
	ADC3->SQR1=0; // per azzerare la configurazione dell'ide
 80005cc:	4b30      	ldr	r3, [pc, #192]	@ (8000690 <ADC_custom_init+0xc8>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere
 80005d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000690 <ADC_custom_init+0xc8>)
 80005d4:	4a2e      	ldr	r2, [pc, #184]	@ (8000690 <ADC_custom_init+0xc8>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_SQ1_Pos);
 80005da:	4b2d      	ldr	r3, [pc, #180]	@ (8000690 <ADC_custom_init+0xc8>)
 80005dc:	4a2c      	ldr	r2, [pc, #176]	@ (8000690 <ADC_custom_init+0xc8>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->PCSEL |= ADC_PCSEL_PCSEL_0; // Dichiaro quali canali leggere : 18 e 19
 80005e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <ADC_custom_init+0xc8>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a2a      	ldr	r2, [pc, #168]	@ (8000690 <ADC_custom_init+0xc8>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	61d3      	str	r3, [r2, #28]


	/* Calibrazione */
	ADC3->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 80005ee:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <ADC_custom_init+0xc8>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	4a27      	ldr	r2, [pc, #156]	@ (8000690 <ADC_custom_init+0xc8>)
 80005f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80005f8:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 80005fa:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <ADC_custom_init+0xc8>)
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	4a24      	ldr	r2, [pc, #144]	@ (8000690 <ADC_custom_init+0xc8>)
 8000600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000604:	6093      	str	r3, [r2, #8]
	ADC3->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 8000606:	4b22      	ldr	r3, [pc, #136]	@ (8000690 <ADC_custom_init+0xc8>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	4a21      	ldr	r2, [pc, #132]	@ (8000690 <ADC_custom_init+0xc8>)
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 8000612:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <ADC_custom_init+0xc8>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	4a1e      	ldr	r2, [pc, #120]	@ (8000690 <ADC_custom_init+0xc8>)
 8000618:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800061c:	6093      	str	r3, [r2, #8]


	while((ADC3->CR & ADC_CR_ADCAL) != 0){};
 800061e:	bf00      	nop
 8000620:	4b1b      	ldr	r3, [pc, #108]	@ (8000690 <ADC_custom_init+0xc8>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	2b00      	cmp	r3, #0
 8000626:	dbfb      	blt.n	8000620 <ADC_custom_init+0x58>
	// FIne calibrazione

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000628:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <ADC_custom_init+0xc8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a18      	ldr	r2, [pc, #96]	@ (8000690 <ADC_custom_init+0xc8>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]
	ADC3->CR |= ADC_CR_ADEN;		// Accendo l' ADC
 8000634:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <ADC_custom_init+0xc8>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	4a15      	ldr	r2, [pc, #84]	@ (8000690 <ADC_custom_init+0xc8>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6093      	str	r3, [r2, #8]

	while((ADC3->ISR & ADC_ISR_ADRDY) != 0){}
 8000640:	bf00      	nop
 8000642:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <ADC_custom_init+0xc8>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f9      	bne.n	8000642 <ADC_custom_init+0x7a>

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 800064e:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <ADC_custom_init+0xc8>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a0f      	ldr	r2, [pc, #60]	@ (8000690 <ADC_custom_init+0xc8>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6013      	str	r3, [r2, #0]

	/* ADR ACCESO */

	// TIM6 set to 240Mhz

	TIM6->PSC = 10; // TIM6 CLOCK/PSC
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <ADC_custom_init+0xcc>)
 800065c:	220a      	movs	r2, #10
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 10;	// TIM6 CLOCK/PSC/ARR
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <ADC_custom_init+0xcc>)
 8000662:	220a      	movs	r2, #10
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CNT = 0;
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <ADC_custom_init+0xcc>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->DIER &= ~TIM_DIER_UIE;
 800066c:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <ADC_custom_init+0xcc>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	4a08      	ldr	r2, [pc, #32]	@ (8000694 <ADC_custom_init+0xcc>)
 8000672:	f023 0301 	bic.w	r3, r3, #1
 8000676:	60d3      	str	r3, [r2, #12]

	ADC3->IER |= ADC_IER_EOCIE;
 8000678:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <ADC_custom_init+0xc8>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	4a04      	ldr	r2, [pc, #16]	@ (8000690 <ADC_custom_init+0xc8>)
 800067e:	f043 0304 	orr.w	r3, r3, #4
 8000682:	6053      	str	r3, [r2, #4]
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	58026000 	.word	0x58026000
 8000694:	40001000 	.word	0x40001000

08000698 <ADC_custom_interrupt>:



void ADC_custom_interrupt(){
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

	if(triggd && (DMA2_Stream0->NDTR == trig_indx)){
 800069c:	4b2e      	ldr	r3, [pc, #184]	@ (8000758 <ADC_custom_interrupt+0xc0>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d01f      	beq.n	80006e6 <ADC_custom_interrupt+0x4e>
 80006a6:	4b2d      	ldr	r3, [pc, #180]	@ (800075c <ADC_custom_interrupt+0xc4>)
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	4a2d      	ldr	r2, [pc, #180]	@ (8000760 <ADC_custom_interrupt+0xc8>)
 80006ac:	8812      	ldrh	r2, [r2, #0]
 80006ae:	b292      	uxth	r2, r2
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d118      	bne.n	80006e6 <ADC_custom_interrupt+0x4e>

		TIM6->CR1 &= ~TIM_CR1_CEN;
 80006b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000764 <ADC_custom_interrupt+0xcc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a2a      	ldr	r2, [pc, #168]	@ (8000764 <ADC_custom_interrupt+0xcc>)
 80006ba:	f023 0301 	bic.w	r3, r3, #1
 80006be:	6013      	str	r3, [r2, #0]

		triggd = 0;
 80006c0:	4b25      	ldr	r3, [pc, #148]	@ (8000758 <ADC_custom_interrupt+0xc0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
		pre_triggd = 0;
 80006c6:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <ADC_custom_interrupt+0xd0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]

		DMA2_Stream0->CR &= ~DMA_SxCR_EN;
 80006cc:	4b23      	ldr	r3, [pc, #140]	@ (800075c <ADC_custom_interrupt+0xc4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a22      	ldr	r2, [pc, #136]	@ (800075c <ADC_custom_interrupt+0xc4>)
 80006d2:	f023 0301 	bic.w	r3, r3, #1
 80006d6:	6013      	str	r3, [r2, #0]
		USART3->CR3 |= USART_CR3_DMAT;
 80006d8:	4b24      	ldr	r3, [pc, #144]	@ (800076c <ADC_custom_interrupt+0xd4>)
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	4a23      	ldr	r2, [pc, #140]	@ (800076c <ADC_custom_interrupt+0xd4>)
 80006de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006e2:	6093      	str	r3, [r2, #8]
		return;
 80006e4:	e034      	b.n	8000750 <ADC_custom_interrupt+0xb8>
	}

	else if(!triggd && (ADC3->DR < PRETRIG_VALUE) ){
 80006e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <ADC_custom_interrupt+0xc0>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	f083 0301 	eor.w	r3, r3, #1
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d008      	beq.n	8000708 <ADC_custom_interrupt+0x70>
 80006f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000770 <ADC_custom_interrupt+0xd8>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fa:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80006fe:	d203      	bcs.n	8000708 <ADC_custom_interrupt+0x70>
		pre_triggd = 1;
 8000700:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <ADC_custom_interrupt+0xd0>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
		return;
 8000706:	e023      	b.n	8000750 <ADC_custom_interrupt+0xb8>
	}

	else if(pre_triggd && !triggd && (ADC3->DR > TRIG_VALUE)){
 8000708:	4b17      	ldr	r3, [pc, #92]	@ (8000768 <ADC_custom_interrupt+0xd0>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	2b00      	cmp	r3, #0
 8000710:	d018      	beq.n	8000744 <ADC_custom_interrupt+0xac>
 8000712:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <ADC_custom_interrupt+0xc0>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b2db      	uxtb	r3, r3
 8000718:	f083 0301 	eor.w	r3, r3, #1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d010      	beq.n	8000744 <ADC_custom_interrupt+0xac>
 8000722:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <ADC_custom_interrupt+0xd8>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000726:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800072a:	d90b      	bls.n	8000744 <ADC_custom_interrupt+0xac>
		triggd = 1;
 800072c:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <ADC_custom_interrupt+0xc0>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
		pre_triggd = 0;
 8000732:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <ADC_custom_interrupt+0xd0>)
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]
		trig_indx = DMA2_Stream0->NDTR;
 8000738:	4b08      	ldr	r3, [pc, #32]	@ (800075c <ADC_custom_interrupt+0xc4>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	b29a      	uxth	r2, r3
 800073e:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <ADC_custom_interrupt+0xc8>)
 8000740:	801a      	strh	r2, [r3, #0]
		return;
 8000742:	e005      	b.n	8000750 <ADC_custom_interrupt+0xb8>
	}

	ADC3->ISR |= ADC_ISR_EOC;
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <ADC_custom_interrupt+0xd8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a09      	ldr	r2, [pc, #36]	@ (8000770 <ADC_custom_interrupt+0xd8>)
 800074a:	f043 0304 	orr.w	r3, r3, #4
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	24000031 	.word	0x24000031
 800075c:	40020410 	.word	0x40020410
 8000760:	24000000 	.word	0x24000000
 8000764:	40001000 	.word	0x40001000
 8000768:	24000030 	.word	0x24000030
 800076c:	40004800 	.word	0x40004800
 8000770:	58026000 	.word	0x58026000

08000774 <DMA_custom_init>:

#define DMA_DATA_BUFF_SIZE 1000

uint16_t DMA_data_buffer[DMA_DATA_BUFF_SIZE];

void DMA_custom_init(){
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0

	DMA2_Stream0->M0AR = (uint32_t) (&DMA_data_buffer);	// inidico l'indirizzo dello storarge di dati
 800077a:	4b20      	ldr	r3, [pc, #128]	@ (80007fc <DMA_custom_init+0x88>)
 800077c:	4a20      	ldr	r2, [pc, #128]	@ (8000800 <DMA_custom_init+0x8c>)
 800077e:	60da      	str	r2, [r3, #12]
	DMA2_Stream1->M0AR = (uint32_t) (&DMA_data_buffer);
 8000780:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <DMA_custom_init+0x90>)
 8000782:	4a1f      	ldr	r2, [pc, #124]	@ (8000800 <DMA_custom_init+0x8c>)
 8000784:	60da      	str	r2, [r3, #12]

	DMA2_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <DMA_custom_init+0x88>)
 8000788:	4a1f      	ldr	r2, [pc, #124]	@ (8000808 <DMA_custom_init+0x94>)
 800078a:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->PAR = (uint32_t) (&USART3->TDR);
 800078c:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <DMA_custom_init+0x90>)
 800078e:	4a1f      	ldr	r2, [pc, #124]	@ (800080c <DMA_custom_init+0x98>)
 8000790:	609a      	str	r2, [r3, #8]

	uint32_t n_misure = DMA_DATA_BUFF_SIZE;
 8000792:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000796:	607b      	str	r3, [r7, #4]

	DMA2_Stream0->NDTR = n_misure;			// numero elementi da prendere da ADC3
 8000798:	4a18      	ldr	r2, [pc, #96]	@ (80007fc <DMA_custom_init+0x88>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6053      	str	r3, [r2, #4]
	DMA2_Stream1->NDTR = n_misure*2;			// numero elementi da mandare a USART3
 800079e:	4a19      	ldr	r2, [pc, #100]	@ (8000804 <DMA_custom_init+0x90>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	6053      	str	r3, [r2, #4]

	DMA2_Stream0->CR &= ~DMA_SxCR_TCIE;		// disablilito interrupt di fine ricezione
 80007a6:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <DMA_custom_init+0x88>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a14      	ldr	r2, [pc, #80]	@ (80007fc <DMA_custom_init+0x88>)
 80007ac:	f023 0310 	bic.w	r3, r3, #16
 80007b0:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine trasmissione
 80007b2:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <DMA_custom_init+0x90>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a13      	ldr	r2, [pc, #76]	@ (8000804 <DMA_custom_init+0x90>)
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	6013      	str	r3, [r2, #0]

	ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);	// DMA in single shot mode
 80007be:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <DMA_custom_init+0x9c>)
 80007c0:	68db      	ldr	r3, [r3, #12]
 80007c2:	4a13      	ldr	r2, [pc, #76]	@ (8000810 <DMA_custom_init+0x9c>)
 80007c4:	f043 0303 	orr.w	r3, r3, #3
 80007c8:	60d3      	str	r3, [r2, #12]

	DMA2_Stream0->CR |= DMA_SxCR_EN;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <DMA_custom_init+0x88>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a0b      	ldr	r2, [pc, #44]	@ (80007fc <DMA_custom_init+0x88>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_EN;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <DMA_custom_init+0x90>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a0a      	ldr	r2, [pc, #40]	@ (8000804 <DMA_custom_init+0x90>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6013      	str	r3, [r2, #0]

	ADC3->CR  |= ADC_CR_ADSTART;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <DMA_custom_init+0x9c>)
 80007e4:	689b      	ldr	r3, [r3, #8]
 80007e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000810 <DMA_custom_init+0x9c>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6093      	str	r3, [r2, #8]

	//TIM6->CR1 |= TIM_CR1_CEN;	LO ACCENDO NELL'USART3 INTERR
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40020410 	.word	0x40020410
 8000800:	24000034 	.word	0x24000034
 8000804:	40020428 	.word	0x40020428
 8000808:	58026040 	.word	0x58026040
 800080c:	40004828 	.word	0x40004828
 8000810:	58026000 	.word	0x58026000

08000814 <DMA_custom_interrupt_tx>:


void DMA_custom_interrupt_tx(){
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

	extern uint16_t trig_indx;

	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 8000818:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <DMA_custom_interrupt_tx+0x80>)
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	4a1d      	ldr	r2, [pc, #116]	@ (8000894 <DMA_custom_interrupt_tx+0x80>)
 800081e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000822:	6093      	str	r3, [r2, #8]

	DMA2->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 8000824:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <DMA_custom_interrupt_tx+0x84>)
 8000826:	f04f 32ff 	mov.w	r2, #4294967295
 800082a:	609a      	str	r2, [r3, #8]
	DMA2->HIFCR = 0xffffffff;
 800082c:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <DMA_custom_interrupt_tx+0x84>)
 800082e:	f04f 32ff 	mov.w	r2, #4294967295
 8000832:	60da      	str	r2, [r3, #12]

	//ADC3->CFGR |= (1 << ADC_CFGR_DMNGT_Pos); // ACCENDO la ricezione di dati dall'adc

	DMA2_Stream0->CR |= DMA_SxCR_EN;
 8000834:	4b19      	ldr	r3, [pc, #100]	@ (800089c <DMA_custom_interrupt_tx+0x88>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a18      	ldr	r2, [pc, #96]	@ (800089c <DMA_custom_interrupt_tx+0x88>)
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_EN;
 8000840:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <DMA_custom_interrupt_tx+0x8c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a16      	ldr	r2, [pc, #88]	@ (80008a0 <DMA_custom_interrupt_tx+0x8c>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	6013      	str	r3, [r2, #0]

	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 800084c:	bf00      	nop
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <DMA_custom_interrupt_tx+0x80>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000856:	2b00      	cmp	r3, #0
 8000858:	d0f9      	beq.n	800084e <DMA_custom_interrupt_tx+0x3a>
	USART3->TDR = (unsigned char)(trig_indx & 0xFF );
 800085a:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <DMA_custom_interrupt_tx+0x90>)
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	b2da      	uxtb	r2, r3
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <DMA_custom_interrupt_tx+0x80>)
 8000862:	629a      	str	r2, [r3, #40]	@ 0x28
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 8000864:	bf00      	nop
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <DMA_custom_interrupt_tx+0x80>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0f9      	beq.n	8000866 <DMA_custom_interrupt_tx+0x52>
	USART3->TDR = *((unsigned char*)&trig_indx + 1);
 8000872:	4b0d      	ldr	r3, [pc, #52]	@ (80008a8 <DMA_custom_interrupt_tx+0x94>)
 8000874:	781a      	ldrb	r2, [r3, #0]
 8000876:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <DMA_custom_interrupt_tx+0x80>)
 8000878:	629a      	str	r2, [r3, #40]	@ 0x28
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 800087a:	bf00      	nop
 800087c:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <DMA_custom_interrupt_tx+0x80>)
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000884:	2b00      	cmp	r3, #0
 8000886:	d0f9      	beq.n	800087c <DMA_custom_interrupt_tx+0x68>

//	ADC3->CR |= ADC_CR_ADSTART;
	//TIM6->CR1 |= TIM_CR1_CEN;

//	USART3->CR3 |= USART_CR3_DMAT;
}
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	40004800 	.word	0x40004800
 8000898:	40020400 	.word	0x40020400
 800089c:	40020410 	.word	0x40020410
 80008a0:	40020428 	.word	0x40020428
 80008a4:	24000000 	.word	0x24000000
 80008a8:	24000001 	.word	0x24000001

080008ac <DMA_custom_interrupt_rx>:


/**
 * @brief interrupt di ricezione di n dati dall'adc
 */
void DMA_custom_interrupt_rx(){
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
//
//	USART3->CR3 |= USART_CR3_DMAT;			  // ATTVIO trasmissione usart
//
//	DMA2_Stream0->CR |= DMA_SxCR_EN;
//	DMA2_Stream1->CR |= DMA_SxCR_EN;
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <usart3_init>:
 */

#include "Custom_usart.h"
#include <stdint.h>

void usart3_init(){
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

    USART3->CR1 |= USART_CR1_TE;
 80008c0:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <usart3_init+0x4c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a10      	ldr	r2, [pc, #64]	@ (8000908 <usart3_init+0x4c>)
 80008c6:	f043 0308 	orr.w	r3, r3, #8
 80008ca:	6013      	str	r3, [r2, #0]
    USART3->CR1 |= USART_CR1_RE;
 80008cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <usart3_init+0x4c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000908 <usart3_init+0x4c>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6013      	str	r3, [r2, #0]

    USART3->CR1 &= ~USART_CR1_TXEIE;
 80008d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <usart3_init+0x4c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <usart3_init+0x4c>)
 80008de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80008e2:	6013      	str	r3, [r2, #0]
    USART3->CR1 |= USART_CR1_RXNEIE;
 80008e4:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <usart3_init+0x4c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a07      	ldr	r2, [pc, #28]	@ (8000908 <usart3_init+0x4c>)
 80008ea:	f043 0320 	orr.w	r3, r3, #32
 80008ee:	6013      	str	r3, [r2, #0]

    USART3->CR1 |= USART_CR1_UE;
 80008f0:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <usart3_init+0x4c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a04      	ldr	r2, [pc, #16]	@ (8000908 <usart3_init+0x4c>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	6013      	str	r3, [r2, #0]

}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40004800 	.word	0x40004800

0800090c <usart3_custom_interrupt>:

void usart3_custom_interrupt(){
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0

	char data = USART3->RDR;
 8000912:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <usart3_custom_interrupt+0x5c>)
 8000914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000916:	71fb      	strb	r3, [r7, #7]


	if(data == '?'){
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	2b3f      	cmp	r3, #63	@ 0x3f
 800091c:	d10b      	bne.n	8000936 <usart3_custom_interrupt+0x2a>

		USART3->CR3 &= ~USART_CR3_DMAT;	// spengo l'usart
 800091e:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <usart3_custom_interrupt+0x5c>)
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	4a11      	ldr	r2, [pc, #68]	@ (8000968 <usart3_custom_interrupt+0x5c>)
 8000924:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000928:	6093      	str	r3, [r2, #8]
		TIM6->CR1 |= TIM_CR1_CEN;		// accendo l'adc
 800092a:	4b10      	ldr	r3, [pc, #64]	@ (800096c <usart3_custom_interrupt+0x60>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a0f      	ldr	r2, [pc, #60]	@ (800096c <usart3_custom_interrupt+0x60>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6013      	str	r3, [r2, #0]
		//USART3->CR1 &= ~USART_CR1_RXNEIE;

	}

	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <usart3_custom_interrupt+0x5c>)
 8000938:	6a1b      	ldr	r3, [r3, #32]
 800093a:	4a0b      	ldr	r2, [pc, #44]	@ (8000968 <usart3_custom_interrupt+0x5c>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF;  //Azzeramento flag interrupt trasmissione
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <usart3_custom_interrupt+0x5c>)
 8000944:	6a1b      	ldr	r3, [r3, #32]
 8000946:	4a08      	ldr	r2, [pc, #32]	@ (8000968 <usart3_custom_interrupt+0x5c>)
 8000948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800094c:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <usart3_custom_interrupt+0x5c>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	4a05      	ldr	r2, [pc, #20]	@ (8000968 <usart3_custom_interrupt+0x5c>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	6193      	str	r3, [r2, #24]
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40004800 	.word	0x40004800
 800096c:	40001000 	.word	0x40001000

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000974:	f000 fd88 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000978:	f000 f812 	bl	80009a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097c:	f000 f9da 	bl	8000d34 <MX_GPIO_Init>
  MX_DMA_Init();
 8000980:	f000 f9b0 	bl	8000ce4 <MX_DMA_Init>
  MX_ADC3_Init();
 8000984:	f000 f8ba 	bl	8000afc <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8000988:	f000 f95e 	bl	8000c48 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 800098c:	f000 f926 	bl	8000bdc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  usart3_init();
 8000990:	f7ff ff94 	bl	80008bc <usart3_init>

  ADC_custom_init();
 8000994:	f7ff fe18 	bl	80005c8 <ADC_custom_init>

  DMA_custom_init();
 8000998:	f7ff feec 	bl	8000774 <DMA_custom_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <main+0x2c>

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b09e      	sub	sp, #120	@ 0x78
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009aa:	224c      	movs	r2, #76	@ 0x4c
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f007 fdac 	bl	800850c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	2220      	movs	r2, #32
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f007 fda5 	bl	800850c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009c2:	2002      	movs	r0, #2
 80009c4:	f002 fe1c 	bl	8003600 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	4b48      	ldr	r3, [pc, #288]	@ (8000af0 <SystemClock_Config+0x150>)
 80009ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009d0:	4a47      	ldr	r2, [pc, #284]	@ (8000af0 <SystemClock_Config+0x150>)
 80009d2:	f023 0301 	bic.w	r3, r3, #1
 80009d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009d8:	4b45      	ldr	r3, [pc, #276]	@ (8000af0 <SystemClock_Config+0x150>)
 80009da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	4b44      	ldr	r3, [pc, #272]	@ (8000af4 <SystemClock_Config+0x154>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	4a43      	ldr	r2, [pc, #268]	@ (8000af4 <SystemClock_Config+0x154>)
 80009e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009ec:	6193      	str	r3, [r2, #24]
 80009ee:	4b41      	ldr	r3, [pc, #260]	@ (8000af4 <SystemClock_Config+0x154>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009fa:	bf00      	nop
 80009fc:	4b3d      	ldr	r3, [pc, #244]	@ (8000af4 <SystemClock_Config+0x154>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a08:	d1f8      	bne.n	80009fc <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000af8 <SystemClock_Config+0x158>)
 8000a0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a10:	4a39      	ldr	r2, [pc, #228]	@ (8000af8 <SystemClock_Config+0x158>)
 8000a12:	f043 0302 	orr.w	r3, r3, #2
 8000a16:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a1a:	4b37      	ldr	r3, [pc, #220]	@ (8000af8 <SystemClock_Config+0x158>)
 8000a1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a20:	f003 0302 	and.w	r3, r3, #2
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a28:	2300      	movs	r3, #0
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	4b31      	ldr	r3, [pc, #196]	@ (8000af4 <SystemClock_Config+0x154>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a30      	ldr	r2, [pc, #192]	@ (8000af4 <SystemClock_Config+0x154>)
 8000a32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b2e      	ldr	r3, [pc, #184]	@ (8000af4 <SystemClock_Config+0x154>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b2b      	ldr	r3, [pc, #172]	@ (8000af0 <SystemClock_Config+0x150>)
 8000a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a46:	4a2a      	ldr	r2, [pc, #168]	@ (8000af0 <SystemClock_Config+0x150>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a4e:	4b28      	ldr	r3, [pc, #160]	@ (8000af0 <SystemClock_Config+0x150>)
 8000a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a5a:	bf00      	nop
 8000a5c:	4b25      	ldr	r3, [pc, #148]	@ (8000af4 <SystemClock_Config+0x154>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a68:	d1f8      	bne.n	8000a5c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a6e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a74:	2302      	movs	r3, #2
 8000a76:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000a80:	2378      	movs	r3, #120	@ 0x78
 8000a82:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a90:	230c      	movs	r3, #12
 8000a92:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f002 fde7 	bl	8003674 <HAL_RCC_OscConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000aac:	f000 fa72 	bl	8000f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab0:	233f      	movs	r3, #63	@ 0x3f
 8000ab2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000abc:	2308      	movs	r3, #8
 8000abe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ac0:	2340      	movs	r3, #64	@ 0x40
 8000ac2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ac4:	2340      	movs	r3, #64	@ 0x40
 8000ac6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ac8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ace:	2340      	movs	r3, #64	@ 0x40
 8000ad0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	2104      	movs	r1, #4
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f003 fa25 	bl	8003f28 <HAL_RCC_ClockConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000ae4:	f000 fa56 	bl	8000f94 <Error_Handler>
  }
}
 8000ae8:	bf00      	nop
 8000aea:	3778      	adds	r7, #120	@ 0x78
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	58000400 	.word	0x58000400
 8000af4:	58024800 	.word	0x58024800
 8000af8:	58024400 	.word	0x58024400

08000afc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
 8000b10:	615a      	str	r2, [r3, #20]
 8000b12:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b14:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd4 <MX_ADC3_Init+0xd8>)
 8000b16:	4a30      	ldr	r2, [pc, #192]	@ (8000bd8 <MX_ADC3_Init+0xdc>)
 8000b18:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000bd4 <MX_ADC3_Init+0xd8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b20:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd4 <MX_ADC3_Init+0xd8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b26:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd4 <MX_ADC3_Init+0xd8>)
 8000b28:	2204      	movs	r2, #4
 8000b2a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b2c:	4b29      	ldr	r3, [pc, #164]	@ (8000bd4 <MX_ADC3_Init+0xd8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b32:	4b28      	ldr	r3, [pc, #160]	@ (8000bd4 <MX_ADC3_Init+0xd8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000b38:	4b26      	ldr	r3, [pc, #152]	@ (8000bd4 <MX_ADC3_Init+0xd8>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b3e:	4b25      	ldr	r3, [pc, #148]	@ (8000bd4 <MX_ADC3_Init+0xd8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000b44:	4b23      	ldr	r3, [pc, #140]	@ (8000bd4 <MX_ADC3_Init+0xd8>)
 8000b46:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000b4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b4c:	4b21      	ldr	r3, [pc, #132]	@ (8000bd4 <MX_ADC3_Init+0xd8>)
 8000b4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b52:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b54:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd4 <MX_ADC3_Init+0xd8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd4 <MX_ADC3_Init+0xd8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b60:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <MX_ADC3_Init+0xd8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000b66:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <MX_ADC3_Init+0xd8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <MX_ADC3_Init+0xd8>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b74:	4817      	ldr	r0, [pc, #92]	@ (8000bd4 <MX_ADC3_Init+0xd8>)
 8000b76:	f000 fec7 	bl	8001908 <HAL_ADC_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000b80:	f000 fa08 	bl	8000f94 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000b84:	4b13      	ldr	r3, [pc, #76]	@ (8000bd4 <MX_ADC3_Init+0xd8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b8a:	4812      	ldr	r0, [pc, #72]	@ (8000bd4 <MX_ADC3_Init+0xd8>)
 8000b8c:	f000 febc 	bl	8001908 <HAL_ADC_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000b96:	f000 f9fd 	bl	8000f94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b9e:	2306      	movs	r3, #6
 8000ba0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ba6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000baa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bac:	2304      	movs	r3, #4
 8000bae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <MX_ADC3_Init+0xd8>)
 8000bbe:	f001 f845 	bl	8001c4c <HAL_ADC_ConfigChannel>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000bc8:	f000 f9e4 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	24000804 	.word	0x24000804
 8000bd8:	58026000 	.word	0x58026000

08000bdc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bec:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <MX_TIM6_Init+0x64>)
 8000bee:	4a15      	ldr	r2, [pc, #84]	@ (8000c44 <MX_TIM6_Init+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <MX_TIM6_Init+0x64>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <MX_TIM6_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <MX_TIM6_Init+0x64>)
 8000c00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c04:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <MX_TIM6_Init+0x64>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c0c:	480c      	ldr	r0, [pc, #48]	@ (8000c40 <MX_TIM6_Init+0x64>)
 8000c0e:	f006 fa15 	bl	800703c <HAL_TIM_Base_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c18:	f000 f9bc 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c1c:	2320      	movs	r3, #32
 8000c1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <MX_TIM6_Init+0x64>)
 8000c2a:	f006 fb05 	bl	8007238 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c34:	f000 f9ae 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	240008e0 	.word	0x240008e0
 8000c44:	40001000 	.word	0x40001000

08000c48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c4c:	4b22      	ldr	r3, [pc, #136]	@ (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c4e:	4a23      	ldr	r2, [pc, #140]	@ (8000cdc <MX_USART3_UART_Init+0x94>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8000c52:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c54:	4a22      	ldr	r2, [pc, #136]	@ (8000ce0 <MX_USART3_UART_Init+0x98>)
 8000c56:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c58:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c64:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c6c:	220c      	movs	r2, #12
 8000c6e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c70:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c76:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	@ (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c88:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c8e:	4812      	ldr	r0, [pc, #72]	@ (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000c90:	f006 fb60 	bl	8007354 <HAL_UART_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000c9a:	f000 f97b 	bl	8000f94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	480d      	ldr	r0, [pc, #52]	@ (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000ca2:	f007 fb68 	bl	8008376 <HAL_UARTEx_SetTxFifoThreshold>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000cac:	f000 f972 	bl	8000f94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4809      	ldr	r0, [pc, #36]	@ (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000cb4:	f007 fb9d 	bl	80083f2 <HAL_UARTEx_SetRxFifoThreshold>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000cbe:	f000 f969 	bl	8000f94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <MX_USART3_UART_Init+0x90>)
 8000cc4:	f007 fb1e 	bl	8008304 <HAL_UARTEx_DisableFifoMode>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000cce:	f000 f961 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2400092c 	.word	0x2400092c
 8000cdc:	40004800 	.word	0x40004800
 8000ce0:	000f4240 	.word	0x000f4240

08000ce4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <MX_DMA_Init+0x4c>)
 8000cec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8000d30 <MX_DMA_Init+0x4c>)
 8000cf2:	f043 0302 	orr.w	r3, r3, #2
 8000cf6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <MX_DMA_Init+0x4c>)
 8000cfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d00:	f003 0302 	and.w	r3, r3, #2
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2038      	movs	r0, #56	@ 0x38
 8000d0e:	f001 fce0 	bl	80026d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d12:	2038      	movs	r0, #56	@ 0x38
 8000d14:	f001 fcf7 	bl	8002706 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2039      	movs	r0, #57	@ 0x39
 8000d1e:	f001 fcd8 	bl	80026d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000d22:	2039      	movs	r0, #57	@ 0x39
 8000d24:	f001 fcef 	bl	8002706 <HAL_NVIC_EnableIRQ>

}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	58024400 	.word	0x58024400

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08c      	sub	sp, #48	@ 0x30
 8000d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	4b8b      	ldr	r3, [pc, #556]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d50:	4a89      	ldr	r2, [pc, #548]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d5a:	4b87      	ldr	r3, [pc, #540]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d60:	f003 0304 	and.w	r3, r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
 8000d66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d68:	4b83      	ldr	r3, [pc, #524]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6e:	4a82      	ldr	r2, [pc, #520]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000d70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d78:	4b7f      	ldr	r3, [pc, #508]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b7c      	ldr	r3, [pc, #496]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8c:	4a7a      	ldr	r2, [pc, #488]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d96:	4b78      	ldr	r3, [pc, #480]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da4:	4b74      	ldr	r3, [pc, #464]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000daa:	4a73      	ldr	r2, [pc, #460]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db4:	4b70      	ldr	r3, [pc, #448]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc8:	4a6b      	ldr	r2, [pc, #428]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000dca:	f043 0308 	orr.w	r3, r3, #8
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd2:	4b69      	ldr	r3, [pc, #420]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd8:	f003 0308 	and.w	r3, r3, #8
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de0:	4b65      	ldr	r3, [pc, #404]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de6:	4a64      	ldr	r2, [pc, #400]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df0:	4b61      	ldr	r3, [pc, #388]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dfe:	4b5e      	ldr	r3, [pc, #376]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e04:	4a5c      	ldr	r2, [pc, #368]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000e06:	f043 0310 	orr.w	r3, r3, #16
 8000e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e0e:	4b5a      	ldr	r3, [pc, #360]	@ (8000f78 <MX_GPIO_Init+0x244>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e14:	f003 0310 	and.w	r3, r3, #16
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000e22:	4856      	ldr	r0, [pc, #344]	@ (8000f7c <MX_GPIO_Init+0x248>)
 8000e24:	f002 fbd2 	bl	80035cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e2e:	4854      	ldr	r0, [pc, #336]	@ (8000f80 <MX_GPIO_Init+0x24c>)
 8000e30:	f002 fbcc 	bl	80035cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2102      	movs	r1, #2
 8000e38:	4852      	ldr	r0, [pc, #328]	@ (8000f84 <MX_GPIO_Init+0x250>)
 8000e3a:	f002 fbc7 	bl	80035cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4619      	mov	r1, r3
 8000e52:	484d      	ldr	r0, [pc, #308]	@ (8000f88 <MX_GPIO_Init+0x254>)
 8000e54:	f002 fa0a 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e58:	2332      	movs	r3, #50	@ 0x32
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e68:	230b      	movs	r3, #11
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	4845      	ldr	r0, [pc, #276]	@ (8000f88 <MX_GPIO_Init+0x254>)
 8000e74:	f002 f9fa 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e78:	2386      	movs	r3, #134	@ 0x86
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e88:	230b      	movs	r3, #11
 8000e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	483e      	ldr	r0, [pc, #248]	@ (8000f8c <MX_GPIO_Init+0x258>)
 8000e94:	f002 f9ea 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e98:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4832      	ldr	r0, [pc, #200]	@ (8000f7c <MX_GPIO_Init+0x248>)
 8000eb2:	f002 f9db 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec8:	230b      	movs	r3, #11
 8000eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	482a      	ldr	r0, [pc, #168]	@ (8000f7c <MX_GPIO_Init+0x248>)
 8000ed4:	f002 f9ca 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ed8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4823      	ldr	r0, [pc, #140]	@ (8000f80 <MX_GPIO_Init+0x24c>)
 8000ef2:	f002 f9bb 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ef6:	2380      	movs	r3, #128	@ 0x80
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000efa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4821      	ldr	r0, [pc, #132]	@ (8000f90 <MX_GPIO_Init+0x25c>)
 8000f0c:	f002 f9ae 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f10:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f22:	230a      	movs	r3, #10
 8000f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4817      	ldr	r0, [pc, #92]	@ (8000f8c <MX_GPIO_Init+0x258>)
 8000f2e:	f002 f99d 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f32:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f44:	230b      	movs	r3, #11
 8000f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4810      	ldr	r0, [pc, #64]	@ (8000f90 <MX_GPIO_Init+0x25c>)
 8000f50:	f002 f98c 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f54:	2302      	movs	r3, #2
 8000f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4806      	ldr	r0, [pc, #24]	@ (8000f84 <MX_GPIO_Init+0x250>)
 8000f6c:	f002 f97e 	bl	800326c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f70:	bf00      	nop
 8000f72:	3730      	adds	r7, #48	@ 0x30
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	58024400 	.word	0x58024400
 8000f7c:	58020400 	.word	0x58020400
 8000f80:	58020c00 	.word	0x58020c00
 8000f84:	58021000 	.word	0x58021000
 8000f88:	58020800 	.word	0x58020800
 8000f8c:	58020000 	.word	0x58020000
 8000f90:	58021800 	.word	0x58021800

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
}
 8000f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <Error_Handler+0x8>

08000fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <HAL_MspInit+0x30>)
 8000fa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fac:	4a08      	ldr	r2, [pc, #32]	@ (8000fd0 <HAL_MspInit+0x30>)
 8000fae:	f043 0302 	orr.w	r3, r3, #2
 8000fb2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000fb6:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <HAL_MspInit+0x30>)
 8000fb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	58024400 	.word	0x58024400

08000fd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b0b4      	sub	sp, #208	@ 0xd0
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	22c0      	movs	r2, #192	@ 0xc0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f007 fa91 	bl	800850c <memset>
  if(hadc->Instance==ADC3)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a43      	ldr	r2, [pc, #268]	@ (80010fc <HAL_ADC_MspInit+0x128>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d17e      	bne.n	80010f2 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ff4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001000:	2301      	movs	r3, #1
 8001002:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 20;
 8001004:	2314      	movs	r3, #20
 8001006:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001008:	2302      	movs	r3, #2
 800100a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800100c:	2302      	movs	r3, #2
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001010:	2302      	movs	r3, #2
 8001012:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001014:	23c0      	movs	r3, #192	@ 0xc0
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001018:	2320      	movs	r3, #32
 800101a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001020:	2300      	movs	r3, #0
 8001022:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	4618      	mov	r0, r3
 800102c:	f003 fb08 	bl	8004640 <HAL_RCCEx_PeriphCLKConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8001036:	f7ff ffad 	bl	8000f94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800103a:	4b31      	ldr	r3, [pc, #196]	@ (8001100 <HAL_ADC_MspInit+0x12c>)
 800103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001040:	4a2f      	ldr	r2, [pc, #188]	@ (8001100 <HAL_ADC_MspInit+0x12c>)
 8001042:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001046:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800104a:	4b2d      	ldr	r3, [pc, #180]	@ (8001100 <HAL_ADC_MspInit+0x12c>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001050:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001058:	4b29      	ldr	r3, [pc, #164]	@ (8001100 <HAL_ADC_MspInit+0x12c>)
 800105a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105e:	4a28      	ldr	r2, [pc, #160]	@ (8001100 <HAL_ADC_MspInit+0x12c>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001068:	4b25      	ldr	r3, [pc, #148]	@ (8001100 <HAL_ADC_MspInit+0x12c>)
 800106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001076:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 800107a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800107e:	f000 faa1 	bl	80015c4 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8001082:	4b20      	ldr	r3, [pc, #128]	@ (8001104 <HAL_ADC_MspInit+0x130>)
 8001084:	4a20      	ldr	r2, [pc, #128]	@ (8001108 <HAL_ADC_MspInit+0x134>)
 8001086:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001088:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <HAL_ADC_MspInit+0x130>)
 800108a:	2273      	movs	r2, #115	@ 0x73
 800108c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800108e:	4b1d      	ldr	r3, [pc, #116]	@ (8001104 <HAL_ADC_MspInit+0x130>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001094:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <HAL_ADC_MspInit+0x130>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800109a:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <HAL_ADC_MspInit+0x130>)
 800109c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010a0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010a2:	4b18      	ldr	r3, [pc, #96]	@ (8001104 <HAL_ADC_MspInit+0x130>)
 80010a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010a8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010aa:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <HAL_ADC_MspInit+0x130>)
 80010ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <HAL_ADC_MspInit+0x130>)
 80010b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010b8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80010ba:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <HAL_ADC_MspInit+0x130>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010c0:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <HAL_ADC_MspInit+0x130>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80010c6:	480f      	ldr	r0, [pc, #60]	@ (8001104 <HAL_ADC_MspInit+0x130>)
 80010c8:	f001 fb38 	bl	800273c <HAL_DMA_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80010d2:	f7ff ff5f 	bl	8000f94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <HAL_ADC_MspInit+0x130>)
 80010da:	64da      	str	r2, [r3, #76]	@ 0x4c
 80010dc:	4a09      	ldr	r2, [pc, #36]	@ (8001104 <HAL_ADC_MspInit+0x130>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	207f      	movs	r0, #127	@ 0x7f
 80010e8:	f001 faf3 	bl	80026d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80010ec:	207f      	movs	r0, #127	@ 0x7f
 80010ee:	f001 fb0a 	bl	8002706 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 80010f2:	bf00      	nop
 80010f4:	37d0      	adds	r7, #208	@ 0xd0
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	58026000 	.word	0x58026000
 8001100:	58024400 	.word	0x58024400
 8001104:	24000868 	.word	0x24000868
 8001108:	40020410 	.word	0x40020410

0800110c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0b      	ldr	r2, [pc, #44]	@ (8001148 <HAL_TIM_Base_MspInit+0x3c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d10e      	bne.n	800113c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <HAL_TIM_Base_MspInit+0x40>)
 8001120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001124:	4a09      	ldr	r2, [pc, #36]	@ (800114c <HAL_TIM_Base_MspInit+0x40>)
 8001126:	f043 0310 	orr.w	r3, r3, #16
 800112a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800112e:	4b07      	ldr	r3, [pc, #28]	@ (800114c <HAL_TIM_Base_MspInit+0x40>)
 8001130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001134:	f003 0310 	and.w	r3, r3, #16
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	40001000 	.word	0x40001000
 800114c:	58024400 	.word	0x58024400

08001150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b0ba      	sub	sp, #232	@ 0xe8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	22c0      	movs	r2, #192	@ 0xc0
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f007 f9cb 	bl	800850c <memset>
  if(huart->Instance==USART3)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a41      	ldr	r2, [pc, #260]	@ (8001280 <HAL_UART_MspInit+0x130>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d17b      	bne.n	8001278 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001180:	f04f 0202 	mov.w	r2, #2
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4618      	mov	r0, r3
 8001198:	f003 fa52 	bl	8004640 <HAL_RCCEx_PeriphCLKConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80011a2:	f7ff fef7 	bl	8000f94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011a6:	4b37      	ldr	r3, [pc, #220]	@ (8001284 <HAL_UART_MspInit+0x134>)
 80011a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011ac:	4a35      	ldr	r2, [pc, #212]	@ (8001284 <HAL_UART_MspInit+0x134>)
 80011ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011b6:	4b33      	ldr	r3, [pc, #204]	@ (8001284 <HAL_UART_MspInit+0x134>)
 80011b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001284 <HAL_UART_MspInit+0x134>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ca:	4a2e      	ldr	r2, [pc, #184]	@ (8001284 <HAL_UART_MspInit+0x134>)
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001284 <HAL_UART_MspInit+0x134>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011fc:	2307      	movs	r3, #7
 80011fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001202:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001206:	4619      	mov	r1, r3
 8001208:	481f      	ldr	r0, [pc, #124]	@ (8001288 <HAL_UART_MspInit+0x138>)
 800120a:	f002 f82f 	bl	800326c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream1;
 800120e:	4b1f      	ldr	r3, [pc, #124]	@ (800128c <HAL_UART_MspInit+0x13c>)
 8001210:	4a1f      	ldr	r2, [pc, #124]	@ (8001290 <HAL_UART_MspInit+0x140>)
 8001212:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001214:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <HAL_UART_MspInit+0x13c>)
 8001216:	222e      	movs	r2, #46	@ 0x2e
 8001218:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800121a:	4b1c      	ldr	r3, [pc, #112]	@ (800128c <HAL_UART_MspInit+0x13c>)
 800121c:	2240      	movs	r2, #64	@ 0x40
 800121e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001220:	4b1a      	ldr	r3, [pc, #104]	@ (800128c <HAL_UART_MspInit+0x13c>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001226:	4b19      	ldr	r3, [pc, #100]	@ (800128c <HAL_UART_MspInit+0x13c>)
 8001228:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800122c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800122e:	4b17      	ldr	r3, [pc, #92]	@ (800128c <HAL_UART_MspInit+0x13c>)
 8001230:	2200      	movs	r2, #0
 8001232:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001234:	4b15      	ldr	r3, [pc, #84]	@ (800128c <HAL_UART_MspInit+0x13c>)
 8001236:	2200      	movs	r2, #0
 8001238:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800123a:	4b14      	ldr	r3, [pc, #80]	@ (800128c <HAL_UART_MspInit+0x13c>)
 800123c:	2200      	movs	r2, #0
 800123e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <HAL_UART_MspInit+0x13c>)
 8001242:	2200      	movs	r2, #0
 8001244:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001246:	4b11      	ldr	r3, [pc, #68]	@ (800128c <HAL_UART_MspInit+0x13c>)
 8001248:	2200      	movs	r2, #0
 800124a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800124c:	480f      	ldr	r0, [pc, #60]	@ (800128c <HAL_UART_MspInit+0x13c>)
 800124e:	f001 fa75 	bl	800273c <HAL_DMA_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001258:	f7ff fe9c 	bl	8000f94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a0b      	ldr	r2, [pc, #44]	@ (800128c <HAL_UART_MspInit+0x13c>)
 8001260:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001262:	4a0a      	ldr	r2, [pc, #40]	@ (800128c <HAL_UART_MspInit+0x13c>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	2027      	movs	r0, #39	@ 0x27
 800126e:	f001 fa30 	bl	80026d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001272:	2027      	movs	r0, #39	@ 0x27
 8001274:	f001 fa47 	bl	8002706 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001278:	bf00      	nop
 800127a:	37e8      	adds	r7, #232	@ 0xe8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40004800 	.word	0x40004800
 8001284:	58024400 	.word	0x58024400
 8001288:	58020c00 	.word	0x58020c00
 800128c:	240009c0 	.word	0x240009c0
 8001290:	40020428 	.word	0x40020428

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <NMI_Handler+0x4>

0800129c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <HardFault_Handler+0x4>

080012a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <MemManage_Handler+0x4>

080012ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <UsageFault_Handler+0x4>

080012bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ea:	f000 f93f 	bl	800156c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	usart3_custom_interrupt();
 80012f6:	f7ff fb09 	bl	800090c <usart3_custom_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}

080012fe <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// ATTIVITA DI FINE RICEZIONE DA ADC
	DMA_custom_interrupt_rx();
 8001302:	f7ff fad3 	bl	80008ac <DMA_custom_interrupt_rx>
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
	}
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}

0800130a <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	DMA_custom_interrupt_tx();
 800130e:	f7ff fa81 	bl	8000814 <DMA_custom_interrupt_tx>
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
	}
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}

08001316 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	ADC_custom_interrupt();
 800131a:	f7ff f9bd 	bl	8000698 <ADC_custom_interrupt>
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}


  /* USER CODE END ADC3_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001328:	4b37      	ldr	r3, [pc, #220]	@ (8001408 <SystemInit+0xe4>)
 800132a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800132e:	4a36      	ldr	r2, [pc, #216]	@ (8001408 <SystemInit+0xe4>)
 8001330:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001334:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001338:	4b34      	ldr	r3, [pc, #208]	@ (800140c <SystemInit+0xe8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 030f 	and.w	r3, r3, #15
 8001340:	2b06      	cmp	r3, #6
 8001342:	d807      	bhi.n	8001354 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001344:	4b31      	ldr	r3, [pc, #196]	@ (800140c <SystemInit+0xe8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f023 030f 	bic.w	r3, r3, #15
 800134c:	4a2f      	ldr	r2, [pc, #188]	@ (800140c <SystemInit+0xe8>)
 800134e:	f043 0307 	orr.w	r3, r3, #7
 8001352:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001354:	4b2e      	ldr	r3, [pc, #184]	@ (8001410 <SystemInit+0xec>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a2d      	ldr	r2, [pc, #180]	@ (8001410 <SystemInit+0xec>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001360:	4b2b      	ldr	r3, [pc, #172]	@ (8001410 <SystemInit+0xec>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001366:	4b2a      	ldr	r3, [pc, #168]	@ (8001410 <SystemInit+0xec>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4929      	ldr	r1, [pc, #164]	@ (8001410 <SystemInit+0xec>)
 800136c:	4b29      	ldr	r3, [pc, #164]	@ (8001414 <SystemInit+0xf0>)
 800136e:	4013      	ands	r3, r2
 8001370:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001372:	4b26      	ldr	r3, [pc, #152]	@ (800140c <SystemInit+0xe8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d007      	beq.n	800138e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800137e:	4b23      	ldr	r3, [pc, #140]	@ (800140c <SystemInit+0xe8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 030f 	bic.w	r3, r3, #15
 8001386:	4a21      	ldr	r2, [pc, #132]	@ (800140c <SystemInit+0xe8>)
 8001388:	f043 0307 	orr.w	r3, r3, #7
 800138c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800138e:	4b20      	ldr	r3, [pc, #128]	@ (8001410 <SystemInit+0xec>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001394:	4b1e      	ldr	r3, [pc, #120]	@ (8001410 <SystemInit+0xec>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800139a:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <SystemInit+0xec>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <SystemInit+0xec>)
 80013a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001418 <SystemInit+0xf4>)
 80013a4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001410 <SystemInit+0xec>)
 80013a8:	4a1c      	ldr	r2, [pc, #112]	@ (800141c <SystemInit+0xf8>)
 80013aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013ac:	4b18      	ldr	r3, [pc, #96]	@ (8001410 <SystemInit+0xec>)
 80013ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001420 <SystemInit+0xfc>)
 80013b0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013b2:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <SystemInit+0xec>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013b8:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <SystemInit+0xec>)
 80013ba:	4a19      	ldr	r2, [pc, #100]	@ (8001420 <SystemInit+0xfc>)
 80013bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013be:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <SystemInit+0xec>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013c4:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <SystemInit+0xec>)
 80013c6:	4a16      	ldr	r2, [pc, #88]	@ (8001420 <SystemInit+0xfc>)
 80013c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013ca:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <SystemInit+0xec>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <SystemInit+0xec>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001410 <SystemInit+0xec>)
 80013d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <SystemInit+0xec>)
 80013de:	2200      	movs	r2, #0
 80013e0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013e2:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <SystemInit+0x100>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <SystemInit+0x104>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013ee:	d202      	bcs.n	80013f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013f0:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <SystemInit+0x108>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <SystemInit+0x10c>)
 80013f8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80013fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00
 800140c:	52002000 	.word	0x52002000
 8001410:	58024400 	.word	0x58024400
 8001414:	eaf6ed7f 	.word	0xeaf6ed7f
 8001418:	02020200 	.word	0x02020200
 800141c:	01ff0000 	.word	0x01ff0000
 8001420:	01010280 	.word	0x01010280
 8001424:	5c001000 	.word	0x5c001000
 8001428:	ffff0000 	.word	0xffff0000
 800142c:	51008108 	.word	0x51008108
 8001430:	52004000 	.word	0x52004000

08001434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001434:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800146c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001438:	f7ff ff74 	bl	8001324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800143c:	480c      	ldr	r0, [pc, #48]	@ (8001470 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800143e:	490d      	ldr	r1, [pc, #52]	@ (8001474 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001440:	4a0d      	ldr	r2, [pc, #52]	@ (8001478 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001444:	e002      	b.n	800144c <LoopCopyDataInit>

08001446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144a:	3304      	adds	r3, #4

0800144c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800144c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001450:	d3f9      	bcc.n	8001446 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001452:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001454:	4c0a      	ldr	r4, [pc, #40]	@ (8001480 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001458:	e001      	b.n	800145e <LoopFillZerobss>

0800145a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800145c:	3204      	adds	r2, #4

0800145e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001460:	d3fb      	bcc.n	800145a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001462:	f007 f85b 	bl	800851c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001466:	f7ff fa83 	bl	8000970 <main>
  bx  lr
 800146a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800146c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001470:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001474:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001478:	080085cc 	.word	0x080085cc
  ldr r2, =_sbss
 800147c:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001480:	24000a3c 	.word	0x24000a3c

08001484 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC_IRQHandler>
	...

08001488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148e:	2003      	movs	r0, #3
 8001490:	f001 f914 	bl	80026bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001494:	f002 fefe 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 8001498:	4602      	mov	r2, r0
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <HAL_Init+0x68>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	4913      	ldr	r1, [pc, #76]	@ (80014f4 <HAL_Init+0x6c>)
 80014a6:	5ccb      	ldrb	r3, [r1, r3]
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	fa22 f303 	lsr.w	r3, r2, r3
 80014b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014b2:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <HAL_Init+0x68>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	4a0e      	ldr	r2, [pc, #56]	@ (80014f4 <HAL_Init+0x6c>)
 80014bc:	5cd3      	ldrb	r3, [r2, r3]
 80014be:	f003 031f 	and.w	r3, r3, #31
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
 80014c8:	4a0b      	ldr	r2, [pc, #44]	@ (80014f8 <HAL_Init+0x70>)
 80014ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014cc:	4a0b      	ldr	r2, [pc, #44]	@ (80014fc <HAL_Init+0x74>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014d2:	2000      	movs	r0, #0
 80014d4:	f000 f814 	bl	8001500 <HAL_InitTick>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e002      	b.n	80014e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014e2:	f7ff fd5d 	bl	8000fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	58024400 	.word	0x58024400
 80014f4:	0800857c 	.word	0x0800857c
 80014f8:	24000008 	.word	0x24000008
 80014fc:	24000004 	.word	0x24000004

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001508:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <HAL_InitTick+0x60>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e021      	b.n	8001558 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001514:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <HAL_InitTick+0x64>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <HAL_InitTick+0x60>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001522:	fbb3 f3f1 	udiv	r3, r3, r1
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f001 f8f9 	bl	8002722 <HAL_SYSTICK_Config>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e00e      	b.n	8001558 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d80a      	bhi.n	8001556 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001540:	2200      	movs	r2, #0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f001 f8c3 	bl	80026d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800154c:	4a06      	ldr	r2, [pc, #24]	@ (8001568 <HAL_InitTick+0x68>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	24000010 	.word	0x24000010
 8001564:	24000004 	.word	0x24000004
 8001568:	2400000c 	.word	0x2400000c

0800156c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <HAL_IncTick+0x20>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <HAL_IncTick+0x24>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a04      	ldr	r2, [pc, #16]	@ (8001590 <HAL_IncTick+0x24>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	24000010 	.word	0x24000010
 8001590:	24000a38 	.word	0x24000a38

08001594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b03      	ldr	r3, [pc, #12]	@ (80015a8 <HAL_GetTick+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	24000a38 	.word	0x24000a38

080015ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015b0:	4b03      	ldr	r3, [pc, #12]	@ (80015c0 <HAL_GetREVID+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	0c1b      	lsrs	r3, r3, #16
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	5c001000 	.word	0x5c001000

080015c4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80015ce:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	401a      	ands	r2, r3
 80015d8:	4904      	ldr	r1, [pc, #16]	@ (80015ec <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	58000400 	.word	0x58000400

080015f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	609a      	str	r2, [r3, #8]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	609a      	str	r2, [r3, #8]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	3360      	adds	r3, #96	@ 0x60
 800166a:	461a      	mov	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	430b      	orrs	r3, r1
 8001686:	431a      	orrs	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800168c:	bf00      	nop
 800168e:	371c      	adds	r7, #28
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	431a      	orrs	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	611a      	str	r2, [r3, #16]
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b087      	sub	sp, #28
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	3360      	adds	r3, #96	@ 0x60
 80016da:	461a      	mov	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	431a      	orrs	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	601a      	str	r2, [r3, #0]
  }
}
 80016f4:	bf00      	nop
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3330      	adds	r3, #48	@ 0x30
 8001710:	461a      	mov	r2, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	f003 030c 	and.w	r3, r3, #12
 800171c:	4413      	add	r3, r2
 800171e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	f003 031f 	and.w	r3, r3, #31
 800172a:	211f      	movs	r1, #31
 800172c:	fa01 f303 	lsl.w	r3, r1, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	401a      	ands	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	0e9b      	lsrs	r3, r3, #26
 8001738:	f003 011f 	and.w	r1, r3, #31
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	431a      	orrs	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800174c:	bf00      	nop
 800174e:	371c      	adds	r7, #28
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3314      	adds	r3, #20
 8001768:	461a      	mov	r2, r3
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	0e5b      	lsrs	r3, r3, #25
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	4413      	add	r3, r2
 8001776:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	0d1b      	lsrs	r3, r3, #20
 8001780:	f003 031f 	and.w	r3, r3, #31
 8001784:	2107      	movs	r1, #7
 8001786:	fa01 f303 	lsl.w	r3, r1, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	401a      	ands	r2, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	0d1b      	lsrs	r3, r3, #20
 8001792:	f003 031f 	and.w	r3, r3, #31
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	431a      	orrs	r2, r3
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017a2:	bf00      	nop
 80017a4:	371c      	adds	r7, #28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017c8:	43db      	mvns	r3, r3
 80017ca:	401a      	ands	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0318 	and.w	r3, r3, #24
 80017d2:	4908      	ldr	r1, [pc, #32]	@ (80017f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017d4:	40d9      	lsrs	r1, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	400b      	ands	r3, r1
 80017da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017de:	431a      	orrs	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	000fffff 	.word	0x000fffff

080017f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001806:	4013      	ands	r3, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6093      	str	r3, [r2, #8]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	5fffffc0 	.word	0x5fffffc0

0800181c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800182c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001830:	d101      	bne.n	8001836 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	4b05      	ldr	r3, [pc, #20]	@ (8001868 <LL_ADC_EnableInternalRegulator+0x24>)
 8001852:	4013      	ands	r3, r2
 8001854:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	6fffffc0 	.word	0x6fffffc0

0800186c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001880:	d101      	bne.n	8001886 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <LL_ADC_IsEnabled+0x18>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <LL_ADC_IsEnabled+0x1a>
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d101      	bne.n	80018d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d101      	bne.n	80018f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b089      	sub	sp, #36	@ 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e18f      	b.n	8001c42 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800192c:	2b00      	cmp	r3, #0
 800192e:	d109      	bne.n	8001944 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff fb4f 	bl	8000fd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff67 	bl	800181c <LL_ADC_IsDeepPowerDownEnabled>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d004      	beq.n	800195e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff4d 	bl	80017f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff82 	bl	800186c <LL_ADC_IsInternalRegulatorEnabled>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d114      	bne.n	8001998 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff66 	bl	8001844 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001978:	4b87      	ldr	r3, [pc, #540]	@ (8001b98 <HAL_ADC_Init+0x290>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	099b      	lsrs	r3, r3, #6
 800197e:	4a87      	ldr	r2, [pc, #540]	@ (8001b9c <HAL_ADC_Init+0x294>)
 8001980:	fba2 2303 	umull	r2, r3, r2, r3
 8001984:	099b      	lsrs	r3, r3, #6
 8001986:	3301      	adds	r3, #1
 8001988:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800198a:	e002      	b.n	8001992 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	3b01      	subs	r3, #1
 8001990:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f9      	bne.n	800198c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff65 	bl	800186c <LL_ADC_IsInternalRegulatorEnabled>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10d      	bne.n	80019c4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ac:	f043 0210 	orr.w	r2, r3, #16
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b8:	f043 0201 	orr.w	r2, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff76 	bl	80018ba <LL_ADC_REG_IsConversionOngoing>
 80019ce:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d4:	f003 0310 	and.w	r3, r3, #16
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f040 8129 	bne.w	8001c30 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f040 8125 	bne.w	8001c30 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ea:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019ee:	f043 0202 	orr.w	r2, r3, #2
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff4a 	bl	8001894 <LL_ADC_IsEnabled>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d136      	bne.n	8001a74 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a65      	ldr	r2, [pc, #404]	@ (8001ba0 <HAL_ADC_Init+0x298>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d004      	beq.n	8001a1a <HAL_ADC_Init+0x112>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a63      	ldr	r2, [pc, #396]	@ (8001ba4 <HAL_ADC_Init+0x29c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d10e      	bne.n	8001a38 <HAL_ADC_Init+0x130>
 8001a1a:	4861      	ldr	r0, [pc, #388]	@ (8001ba0 <HAL_ADC_Init+0x298>)
 8001a1c:	f7ff ff3a 	bl	8001894 <LL_ADC_IsEnabled>
 8001a20:	4604      	mov	r4, r0
 8001a22:	4860      	ldr	r0, [pc, #384]	@ (8001ba4 <HAL_ADC_Init+0x29c>)
 8001a24:	f7ff ff36 	bl	8001894 <LL_ADC_IsEnabled>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4323      	orrs	r3, r4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bf0c      	ite	eq
 8001a30:	2301      	moveq	r3, #1
 8001a32:	2300      	movne	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	e008      	b.n	8001a4a <HAL_ADC_Init+0x142>
 8001a38:	485b      	ldr	r0, [pc, #364]	@ (8001ba8 <HAL_ADC_Init+0x2a0>)
 8001a3a:	f7ff ff2b 	bl	8001894 <LL_ADC_IsEnabled>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	bf0c      	ite	eq
 8001a44:	2301      	moveq	r3, #1
 8001a46:	2300      	movne	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d012      	beq.n	8001a74 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a53      	ldr	r2, [pc, #332]	@ (8001ba0 <HAL_ADC_Init+0x298>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d004      	beq.n	8001a62 <HAL_ADC_Init+0x15a>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a51      	ldr	r2, [pc, #324]	@ (8001ba4 <HAL_ADC_Init+0x29c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_Init+0x15e>
 8001a62:	4a52      	ldr	r2, [pc, #328]	@ (8001bac <HAL_ADC_Init+0x2a4>)
 8001a64:	e000      	b.n	8001a68 <HAL_ADC_Init+0x160>
 8001a66:	4a52      	ldr	r2, [pc, #328]	@ (8001bb0 <HAL_ADC_Init+0x2a8>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4610      	mov	r0, r2
 8001a70:	f7ff fdbe 	bl	80015f0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001a74:	f7ff fd9a 	bl	80015ac <HAL_GetREVID>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d914      	bls.n	8001aac <HAL_ADC_Init+0x1a4>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d110      	bne.n	8001aac <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7d5b      	ldrb	r3, [r3, #21]
 8001a8e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a94:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a9a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7f1b      	ldrb	r3, [r3, #28]
 8001aa0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001aa2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001aa4:	f043 030c 	orr.w	r3, r3, #12
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	e00d      	b.n	8001ac8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7d5b      	ldrb	r3, [r3, #21]
 8001ab0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ab6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001abc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7f1b      	ldrb	r3, [r3, #28]
 8001ac2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7f1b      	ldrb	r3, [r3, #28]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d106      	bne.n	8001ade <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	045b      	lsls	r3, r3, #17
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d009      	beq.n	8001afa <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aea:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb4 <HAL_ADC_Init+0x2ac>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	69b9      	ldr	r1, [r7, #24]
 8001b0a:	430b      	orrs	r3, r1
 8001b0c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fed1 	bl	80018ba <LL_ADC_REG_IsConversionOngoing>
 8001b18:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fede 	bl	80018e0 <LL_ADC_INJ_IsConversionOngoing>
 8001b24:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d15f      	bne.n	8001bec <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d15c      	bne.n	8001bec <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7d1b      	ldrb	r3, [r3, #20]
 8001b36:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb8 <HAL_ADC_Init+0x2b0>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	69b9      	ldr	r1, [r7, #24]
 8001b50:	430b      	orrs	r3, r1
 8001b52:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d130      	bne.n	8001bc0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b62:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691a      	ldr	r2, [r3, #16]
 8001b6a:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <HAL_ADC_Init+0x2b4>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b72:	3a01      	subs	r2, #1
 8001b74:	0411      	lsls	r1, r2, #16
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b7a:	4311      	orrs	r1, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b80:	4311      	orrs	r1, r2
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b86:	430a      	orrs	r2, r1
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	611a      	str	r2, [r3, #16]
 8001b94:	e01c      	b.n	8001bd0 <HAL_ADC_Init+0x2c8>
 8001b96:	bf00      	nop
 8001b98:	24000004 	.word	0x24000004
 8001b9c:	053e2d63 	.word	0x053e2d63
 8001ba0:	40022000 	.word	0x40022000
 8001ba4:	40022100 	.word	0x40022100
 8001ba8:	58026000 	.word	0x58026000
 8001bac:	40022300 	.word	0x40022300
 8001bb0:	58026300 	.word	0x58026300
 8001bb4:	fff0c003 	.word	0xfff0c003
 8001bb8:	ffffbffc 	.word	0xffffbffc
 8001bbc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691a      	ldr	r2, [r3, #16]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0201 	bic.w	r2, r2, #1
 8001bce:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 fb8c 	bl	8002304 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d10c      	bne.n	8001c0e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	f023 010f 	bic.w	r1, r3, #15
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	1e5a      	subs	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c0c:	e007      	b.n	8001c1e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 020f 	bic.w	r2, r2, #15
 8001c1c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c22:	f023 0303 	bic.w	r3, r3, #3
 8001c26:	f043 0201 	orr.w	r2, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c2e:	e007      	b.n	8001c40 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c34:	f043 0210 	orr.w	r2, r3, #16
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c40:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	@ 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}
 8001c4a:	bf00      	nop

08001c4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b0a1      	sub	sp, #132	@ 0x84
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4a65      	ldr	r2, [pc, #404]	@ (8001dfc <HAL_ADC_ConfigChannel+0x1b0>)
 8001c66:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x2a>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e32e      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x688>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fe19 	bl	80018ba <LL_ADC_REG_IsConversionOngoing>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f040 8313 	bne.w	80022b6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db2c      	blt.n	8001cf2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d108      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x6a>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	0e9b      	lsrs	r3, r3, #26
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	2201      	movs	r2, #1
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	e016      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x98>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cc6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001cce:	2320      	movs	r3, #32
 8001cd0:	e003      	b.n	8001cda <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001cd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cd4:	fab3 f383 	clz	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	2201      	movs	r2, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	69d1      	ldr	r1, [r2, #28]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	430b      	orrs	r3, r1
 8001cf0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	6859      	ldr	r1, [r3, #4]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f7ff fcfe 	bl	8001700 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fdd6 	bl	80018ba <LL_ADC_REG_IsConversionOngoing>
 8001d0e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fde3 	bl	80018e0 <LL_ADC_INJ_IsConversionOngoing>
 8001d1a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f040 80b8 	bne.w	8001e94 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 80b4 	bne.w	8001e94 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6818      	ldr	r0, [r3, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	6819      	ldr	r1, [r3, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	f7ff fd0d 	bl	8001758 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d3e:	4b30      	ldr	r3, [pc, #192]	@ (8001e00 <HAL_ADC_ConfigChannel+0x1b4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001d46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d4a:	d10b      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x118>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	695a      	ldr	r2, [r3, #20]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	e01d      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x154>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10b      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x13e>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	695a      	ldr	r2, [r3, #20]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	e00a      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x154>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	695a      	ldr	r2, [r3, #20]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d02c      	beq.n	8001e04 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	6919      	ldr	r1, [r3, #16]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001db8:	f7ff fc4e 	bl	8001658 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	6919      	ldr	r1, [r3, #16]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	7e5b      	ldrb	r3, [r3, #25]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d102      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x186>
 8001dcc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001dd0:	e000      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x188>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	f7ff fc78 	bl	80016ca <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	6919      	ldr	r1, [r3, #16]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	7e1b      	ldrb	r3, [r3, #24]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d102      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x1a4>
 8001dea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001dee:	e000      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x1a6>
 8001df0:	2300      	movs	r3, #0
 8001df2:	461a      	mov	r2, r3
 8001df4:	f7ff fc50 	bl	8001698 <LL_ADC_SetDataRightShift>
 8001df8:	e04c      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x248>
 8001dfa:	bf00      	nop
 8001dfc:	47ff0000 	.word	0x47ff0000
 8001e00:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	069b      	lsls	r3, r3, #26
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d107      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e26:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	069b      	lsls	r3, r3, #26
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d107      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e4a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	069b      	lsls	r3, r3, #26
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d107      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e6e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	069b      	lsls	r3, r3, #26
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d107      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e92:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fcfb 	bl	8001894 <LL_ADC_IsEnabled>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f040 8211 	bne.w	80022c8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	6819      	ldr	r1, [r3, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f7ff fc7c 	bl	80017b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4aa1      	ldr	r2, [pc, #644]	@ (8002144 <HAL_ADC_ConfigChannel+0x4f8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	f040 812e 	bne.w	8002120 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10b      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x2a0>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0e9b      	lsrs	r3, r3, #26
 8001eda:	3301      	adds	r3, #1
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	2b09      	cmp	r3, #9
 8001ee2:	bf94      	ite	ls
 8001ee4:	2301      	movls	r3, #1
 8001ee6:	2300      	movhi	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	e019      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x2d4>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001efe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8001f04:	2320      	movs	r3, #32
 8001f06:	e003      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8001f08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	3301      	adds	r3, #1
 8001f12:	f003 031f 	and.w	r3, r3, #31
 8001f16:	2b09      	cmp	r3, #9
 8001f18:	bf94      	ite	ls
 8001f1a:	2301      	movls	r3, #1
 8001f1c:	2300      	movhi	r3, #0
 8001f1e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d079      	beq.n	8002018 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d107      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x2f4>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0e9b      	lsrs	r3, r3, #26
 8001f36:	3301      	adds	r3, #1
 8001f38:	069b      	lsls	r3, r3, #26
 8001f3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f3e:	e015      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x320>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f48:	fa93 f3a3 	rbit	r3, r3
 8001f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001f4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f50:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001f52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8001f58:	2320      	movs	r3, #32
 8001f5a:	e003      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8001f5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	3301      	adds	r3, #1
 8001f66:	069b      	lsls	r3, r3, #26
 8001f68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d109      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x340>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	0e9b      	lsrs	r3, r3, #26
 8001f7e:	3301      	adds	r3, #1
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	2101      	movs	r1, #1
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	e017      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x370>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f9c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001f9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8001fa4:	2320      	movs	r3, #32
 8001fa6:	e003      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8001fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbc:	ea42 0103 	orr.w	r1, r2, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10a      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x396>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0e9b      	lsrs	r3, r3, #26
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f003 021f 	and.w	r2, r3, #31
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	051b      	lsls	r3, r3, #20
 8001fe0:	e018      	b.n	8002014 <HAL_ADC_ConfigChannel+0x3c8>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8001ffa:	2320      	movs	r3, #32
 8001ffc:	e003      	b.n	8002006 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8001ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002000:	fab3 f383 	clz	r3, r3
 8002004:	b2db      	uxtb	r3, r3
 8002006:	3301      	adds	r3, #1
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002014:	430b      	orrs	r3, r1
 8002016:	e07e      	b.n	8002116 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002020:	2b00      	cmp	r3, #0
 8002022:	d107      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x3e8>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	0e9b      	lsrs	r3, r3, #26
 800202a:	3301      	adds	r3, #1
 800202c:	069b      	lsls	r3, r3, #26
 800202e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002032:	e015      	b.n	8002060 <HAL_ADC_ConfigChannel+0x414>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800203c:	fa93 f3a3 	rbit	r3, r3
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800204c:	2320      	movs	r3, #32
 800204e:	e003      	b.n	8002058 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	3301      	adds	r3, #1
 800205a:	069b      	lsls	r3, r3, #26
 800205c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002068:	2b00      	cmp	r3, #0
 800206a:	d109      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x434>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	0e9b      	lsrs	r3, r3, #26
 8002072:	3301      	adds	r3, #1
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	2101      	movs	r1, #1
 800207a:	fa01 f303 	lsl.w	r3, r1, r3
 800207e:	e017      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x464>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	61bb      	str	r3, [r7, #24]
  return result;
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002098:	2320      	movs	r3, #32
 800209a:	e003      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	fab3 f383 	clz	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	3301      	adds	r3, #1
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	2101      	movs	r1, #1
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	ea42 0103 	orr.w	r1, r2, r3
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10d      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x490>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	0e9b      	lsrs	r3, r3, #26
 80020c6:	3301      	adds	r3, #1
 80020c8:	f003 021f 	and.w	r2, r3, #31
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	3b1e      	subs	r3, #30
 80020d4:	051b      	lsls	r3, r3, #20
 80020d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020da:	e01b      	b.n	8002114 <HAL_ADC_ConfigChannel+0x4c8>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	fa93 f3a3 	rbit	r3, r3
 80020e8:	60fb      	str	r3, [r7, #12]
  return result;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80020f4:	2320      	movs	r3, #32
 80020f6:	e003      	b.n	8002100 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	3301      	adds	r3, #1
 8002102:	f003 021f 	and.w	r2, r3, #31
 8002106:	4613      	mov	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	3b1e      	subs	r3, #30
 800210e:	051b      	lsls	r3, r3, #20
 8002110:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002114:	430b      	orrs	r3, r1
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	6892      	ldr	r2, [r2, #8]
 800211a:	4619      	mov	r1, r3
 800211c:	f7ff fb1c 	bl	8001758 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	f280 80cf 	bge.w	80022c8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a06      	ldr	r2, [pc, #24]	@ (8002148 <HAL_ADC_ConfigChannel+0x4fc>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d004      	beq.n	800213e <HAL_ADC_ConfigChannel+0x4f2>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a04      	ldr	r2, [pc, #16]	@ (800214c <HAL_ADC_ConfigChannel+0x500>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d10a      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x508>
 800213e:	4b04      	ldr	r3, [pc, #16]	@ (8002150 <HAL_ADC_ConfigChannel+0x504>)
 8002140:	e009      	b.n	8002156 <HAL_ADC_ConfigChannel+0x50a>
 8002142:	bf00      	nop
 8002144:	47ff0000 	.word	0x47ff0000
 8002148:	40022000 	.word	0x40022000
 800214c:	40022100 	.word	0x40022100
 8002150:	40022300 	.word	0x40022300
 8002154:	4b61      	ldr	r3, [pc, #388]	@ (80022dc <HAL_ADC_ConfigChannel+0x690>)
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fa70 	bl	800163c <LL_ADC_GetCommonPathInternalCh>
 800215c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a5f      	ldr	r2, [pc, #380]	@ (80022e0 <HAL_ADC_ConfigChannel+0x694>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d004      	beq.n	8002172 <HAL_ADC_ConfigChannel+0x526>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a5d      	ldr	r2, [pc, #372]	@ (80022e4 <HAL_ADC_ConfigChannel+0x698>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d10e      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x544>
 8002172:	485b      	ldr	r0, [pc, #364]	@ (80022e0 <HAL_ADC_ConfigChannel+0x694>)
 8002174:	f7ff fb8e 	bl	8001894 <LL_ADC_IsEnabled>
 8002178:	4604      	mov	r4, r0
 800217a:	485a      	ldr	r0, [pc, #360]	@ (80022e4 <HAL_ADC_ConfigChannel+0x698>)
 800217c:	f7ff fb8a 	bl	8001894 <LL_ADC_IsEnabled>
 8002180:	4603      	mov	r3, r0
 8002182:	4323      	orrs	r3, r4
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	e008      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x556>
 8002190:	4855      	ldr	r0, [pc, #340]	@ (80022e8 <HAL_ADC_ConfigChannel+0x69c>)
 8002192:	f7ff fb7f 	bl	8001894 <LL_ADC_IsEnabled>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf0c      	ite	eq
 800219c:	2301      	moveq	r3, #1
 800219e:	2300      	movne	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d07d      	beq.n	80022a2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a50      	ldr	r2, [pc, #320]	@ (80022ec <HAL_ADC_ConfigChannel+0x6a0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d130      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x5c6>
 80021b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d12b      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a4a      	ldr	r2, [pc, #296]	@ (80022e8 <HAL_ADC_ConfigChannel+0x69c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	f040 8081 	bne.w	80022c8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a45      	ldr	r2, [pc, #276]	@ (80022e0 <HAL_ADC_ConfigChannel+0x694>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d004      	beq.n	80021da <HAL_ADC_ConfigChannel+0x58e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a43      	ldr	r2, [pc, #268]	@ (80022e4 <HAL_ADC_ConfigChannel+0x698>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d101      	bne.n	80021de <HAL_ADC_ConfigChannel+0x592>
 80021da:	4a45      	ldr	r2, [pc, #276]	@ (80022f0 <HAL_ADC_ConfigChannel+0x6a4>)
 80021dc:	e000      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x594>
 80021de:	4a3f      	ldr	r2, [pc, #252]	@ (80022dc <HAL_ADC_ConfigChannel+0x690>)
 80021e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021e6:	4619      	mov	r1, r3
 80021e8:	4610      	mov	r0, r2
 80021ea:	f7ff fa14 	bl	8001616 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021ee:	4b41      	ldr	r3, [pc, #260]	@ (80022f4 <HAL_ADC_ConfigChannel+0x6a8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	099b      	lsrs	r3, r3, #6
 80021f4:	4a40      	ldr	r2, [pc, #256]	@ (80022f8 <HAL_ADC_ConfigChannel+0x6ac>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	099b      	lsrs	r3, r3, #6
 80021fc:	3301      	adds	r3, #1
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002202:	e002      	b.n	800220a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	3b01      	subs	r3, #1
 8002208:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f9      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002210:	e05a      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a39      	ldr	r2, [pc, #228]	@ (80022fc <HAL_ADC_ConfigChannel+0x6b0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d11e      	bne.n	800225a <HAL_ADC_ConfigChannel+0x60e>
 800221c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800221e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d119      	bne.n	800225a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a2f      	ldr	r2, [pc, #188]	@ (80022e8 <HAL_ADC_ConfigChannel+0x69c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d14b      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a2a      	ldr	r2, [pc, #168]	@ (80022e0 <HAL_ADC_ConfigChannel+0x694>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d004      	beq.n	8002244 <HAL_ADC_ConfigChannel+0x5f8>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a29      	ldr	r2, [pc, #164]	@ (80022e4 <HAL_ADC_ConfigChannel+0x698>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d101      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x5fc>
 8002244:	4a2a      	ldr	r2, [pc, #168]	@ (80022f0 <HAL_ADC_ConfigChannel+0x6a4>)
 8002246:	e000      	b.n	800224a <HAL_ADC_ConfigChannel+0x5fe>
 8002248:	4a24      	ldr	r2, [pc, #144]	@ (80022dc <HAL_ADC_ConfigChannel+0x690>)
 800224a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800224c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002250:	4619      	mov	r1, r3
 8002252:	4610      	mov	r0, r2
 8002254:	f7ff f9df 	bl	8001616 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002258:	e036      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a28      	ldr	r2, [pc, #160]	@ (8002300 <HAL_ADC_ConfigChannel+0x6b4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d131      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x67c>
 8002264:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d12c      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a1d      	ldr	r2, [pc, #116]	@ (80022e8 <HAL_ADC_ConfigChannel+0x69c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d127      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a18      	ldr	r2, [pc, #96]	@ (80022e0 <HAL_ADC_ConfigChannel+0x694>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d004      	beq.n	800228c <HAL_ADC_ConfigChannel+0x640>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a17      	ldr	r2, [pc, #92]	@ (80022e4 <HAL_ADC_ConfigChannel+0x698>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d101      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x644>
 800228c:	4a18      	ldr	r2, [pc, #96]	@ (80022f0 <HAL_ADC_ConfigChannel+0x6a4>)
 800228e:	e000      	b.n	8002292 <HAL_ADC_ConfigChannel+0x646>
 8002290:	4a12      	ldr	r2, [pc, #72]	@ (80022dc <HAL_ADC_ConfigChannel+0x690>)
 8002292:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002294:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002298:	4619      	mov	r1, r3
 800229a:	4610      	mov	r0, r2
 800229c:	f7ff f9bb 	bl	8001616 <LL_ADC_SetCommonPathInternalCh>
 80022a0:	e012      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a6:	f043 0220 	orr.w	r2, r3, #32
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80022b4:	e008      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ba:	f043 0220 	orr.w	r2, r3, #32
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80022d0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3784      	adds	r7, #132	@ 0x84
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd90      	pop	{r4, r7, pc}
 80022dc:	58026300 	.word	0x58026300
 80022e0:	40022000 	.word	0x40022000
 80022e4:	40022100 	.word	0x40022100
 80022e8:	58026000 	.word	0x58026000
 80022ec:	cb840000 	.word	0xcb840000
 80022f0:	40022300 	.word	0x40022300
 80022f4:	24000004 	.word	0x24000004
 80022f8:	053e2d63 	.word	0x053e2d63
 80022fc:	c7520000 	.word	0xc7520000
 8002300:	cfb80000 	.word	0xcfb80000

08002304 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a7a      	ldr	r2, [pc, #488]	@ (80024fc <ADC_ConfigureBoostMode+0x1f8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d004      	beq.n	8002320 <ADC_ConfigureBoostMode+0x1c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a79      	ldr	r2, [pc, #484]	@ (8002500 <ADC_ConfigureBoostMode+0x1fc>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d109      	bne.n	8002334 <ADC_ConfigureBoostMode+0x30>
 8002320:	4b78      	ldr	r3, [pc, #480]	@ (8002504 <ADC_ConfigureBoostMode+0x200>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf14      	ite	ne
 800232c:	2301      	movne	r3, #1
 800232e:	2300      	moveq	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	e008      	b.n	8002346 <ADC_ConfigureBoostMode+0x42>
 8002334:	4b74      	ldr	r3, [pc, #464]	@ (8002508 <ADC_ConfigureBoostMode+0x204>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf14      	ite	ne
 8002340:	2301      	movne	r3, #1
 8002342:	2300      	moveq	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d01c      	beq.n	8002384 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800234a:	f002 f91d 	bl	8004588 <HAL_RCC_GetHCLKFreq>
 800234e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002358:	d010      	beq.n	800237c <ADC_ConfigureBoostMode+0x78>
 800235a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800235e:	d873      	bhi.n	8002448 <ADC_ConfigureBoostMode+0x144>
 8002360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002364:	d002      	beq.n	800236c <ADC_ConfigureBoostMode+0x68>
 8002366:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800236a:	d16d      	bne.n	8002448 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	0c1b      	lsrs	r3, r3, #16
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	fbb2 f3f3 	udiv	r3, r2, r3
 8002378:	60fb      	str	r3, [r7, #12]
        break;
 800237a:	e068      	b.n	800244e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	60fb      	str	r3, [r7, #12]
        break;
 8002382:	e064      	b.n	800244e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002384:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002388:	f04f 0100 	mov.w	r1, #0
 800238c:	f003 fb62 	bl	8005a54 <HAL_RCCEx_GetPeriphCLKFreq>
 8002390:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800239a:	d051      	beq.n	8002440 <ADC_ConfigureBoostMode+0x13c>
 800239c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80023a0:	d854      	bhi.n	800244c <ADC_ConfigureBoostMode+0x148>
 80023a2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80023a6:	d047      	beq.n	8002438 <ADC_ConfigureBoostMode+0x134>
 80023a8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80023ac:	d84e      	bhi.n	800244c <ADC_ConfigureBoostMode+0x148>
 80023ae:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80023b2:	d03d      	beq.n	8002430 <ADC_ConfigureBoostMode+0x12c>
 80023b4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80023b8:	d848      	bhi.n	800244c <ADC_ConfigureBoostMode+0x148>
 80023ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023be:	d033      	beq.n	8002428 <ADC_ConfigureBoostMode+0x124>
 80023c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023c4:	d842      	bhi.n	800244c <ADC_ConfigureBoostMode+0x148>
 80023c6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80023ca:	d029      	beq.n	8002420 <ADC_ConfigureBoostMode+0x11c>
 80023cc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80023d0:	d83c      	bhi.n	800244c <ADC_ConfigureBoostMode+0x148>
 80023d2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80023d6:	d01a      	beq.n	800240e <ADC_ConfigureBoostMode+0x10a>
 80023d8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80023dc:	d836      	bhi.n	800244c <ADC_ConfigureBoostMode+0x148>
 80023de:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80023e2:	d014      	beq.n	800240e <ADC_ConfigureBoostMode+0x10a>
 80023e4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80023e8:	d830      	bhi.n	800244c <ADC_ConfigureBoostMode+0x148>
 80023ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023ee:	d00e      	beq.n	800240e <ADC_ConfigureBoostMode+0x10a>
 80023f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023f4:	d82a      	bhi.n	800244c <ADC_ConfigureBoostMode+0x148>
 80023f6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80023fa:	d008      	beq.n	800240e <ADC_ConfigureBoostMode+0x10a>
 80023fc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002400:	d824      	bhi.n	800244c <ADC_ConfigureBoostMode+0x148>
 8002402:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002406:	d002      	beq.n	800240e <ADC_ConfigureBoostMode+0x10a>
 8002408:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800240c:	d11e      	bne.n	800244c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	0c9b      	lsrs	r3, r3, #18
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	fbb2 f3f3 	udiv	r3, r2, r3
 800241c:	60fb      	str	r3, [r7, #12]
        break;
 800241e:	e016      	b.n	800244e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	60fb      	str	r3, [r7, #12]
        break;
 8002426:	e012      	b.n	800244e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	60fb      	str	r3, [r7, #12]
        break;
 800242e:	e00e      	b.n	800244e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	099b      	lsrs	r3, r3, #6
 8002434:	60fb      	str	r3, [r7, #12]
        break;
 8002436:	e00a      	b.n	800244e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	09db      	lsrs	r3, r3, #7
 800243c:	60fb      	str	r3, [r7, #12]
        break;
 800243e:	e006      	b.n	800244e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	0a1b      	lsrs	r3, r3, #8
 8002444:	60fb      	str	r3, [r7, #12]
        break;
 8002446:	e002      	b.n	800244e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002448:	bf00      	nop
 800244a:	e000      	b.n	800244e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800244c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800244e:	f7ff f8ad 	bl	80015ac <HAL_GetREVID>
 8002452:	4603      	mov	r3, r0
 8002454:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002458:	4293      	cmp	r3, r2
 800245a:	d815      	bhi.n	8002488 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4a2b      	ldr	r2, [pc, #172]	@ (800250c <ADC_ConfigureBoostMode+0x208>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d908      	bls.n	8002476 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002472:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002474:	e03e      	b.n	80024f4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002484:	609a      	str	r2, [r3, #8]
}
 8002486:	e035      	b.n	80024f4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	085b      	lsrs	r3, r3, #1
 800248c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4a1f      	ldr	r2, [pc, #124]	@ (8002510 <ADC_ConfigureBoostMode+0x20c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d808      	bhi.n	80024a8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80024a4:	609a      	str	r2, [r3, #8]
}
 80024a6:	e025      	b.n	80024f4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002514 <ADC_ConfigureBoostMode+0x210>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d80a      	bhi.n	80024c6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024c2:	609a      	str	r2, [r3, #8]
}
 80024c4:	e016      	b.n	80024f4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4a13      	ldr	r2, [pc, #76]	@ (8002518 <ADC_ConfigureBoostMode+0x214>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d80a      	bhi.n	80024e4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024e0:	609a      	str	r2, [r3, #8]
}
 80024e2:	e007      	b.n	80024f4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80024f2:	609a      	str	r2, [r3, #8]
}
 80024f4:	bf00      	nop
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40022000 	.word	0x40022000
 8002500:	40022100 	.word	0x40022100
 8002504:	40022300 	.word	0x40022300
 8002508:	58026300 	.word	0x58026300
 800250c:	01312d00 	.word	0x01312d00
 8002510:	005f5e10 	.word	0x005f5e10
 8002514:	00bebc20 	.word	0x00bebc20
 8002518:	017d7840 	.word	0x017d7840

0800251c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800252c:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <__NVIC_SetPriorityGrouping+0x40>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002538:	4013      	ands	r3, r2
 800253a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002544:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <__NVIC_SetPriorityGrouping+0x44>)
 8002546:	4313      	orrs	r3, r2
 8002548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800254a:	4a04      	ldr	r2, [pc, #16]	@ (800255c <__NVIC_SetPriorityGrouping+0x40>)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	60d3      	str	r3, [r2, #12]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000ed00 	.word	0xe000ed00
 8002560:	05fa0000 	.word	0x05fa0000

08002564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002568:	4b04      	ldr	r3, [pc, #16]	@ (800257c <__NVIC_GetPriorityGrouping+0x18>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	0a1b      	lsrs	r3, r3, #8
 800256e:	f003 0307 	and.w	r3, r3, #7
}
 8002572:	4618      	mov	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800258a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800258e:	2b00      	cmp	r3, #0
 8002590:	db0b      	blt.n	80025aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	f003 021f 	and.w	r2, r3, #31
 8002598:	4907      	ldr	r1, [pc, #28]	@ (80025b8 <__NVIC_EnableIRQ+0x38>)
 800259a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	2001      	movs	r0, #1
 80025a2:	fa00 f202 	lsl.w	r2, r0, r2
 80025a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000e100 	.word	0xe000e100

080025bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	6039      	str	r1, [r7, #0]
 80025c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	db0a      	blt.n	80025e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	490c      	ldr	r1, [pc, #48]	@ (8002608 <__NVIC_SetPriority+0x4c>)
 80025d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025da:	0112      	lsls	r2, r2, #4
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	440b      	add	r3, r1
 80025e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e4:	e00a      	b.n	80025fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4908      	ldr	r1, [pc, #32]	@ (800260c <__NVIC_SetPriority+0x50>)
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	3b04      	subs	r3, #4
 80025f4:	0112      	lsls	r2, r2, #4
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	440b      	add	r3, r1
 80025fa:	761a      	strb	r2, [r3, #24]
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000e100 	.word	0xe000e100
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	@ 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f1c3 0307 	rsb	r3, r3, #7
 800262a:	2b04      	cmp	r3, #4
 800262c:	bf28      	it	cs
 800262e:	2304      	movcs	r3, #4
 8002630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3304      	adds	r3, #4
 8002636:	2b06      	cmp	r3, #6
 8002638:	d902      	bls.n	8002640 <NVIC_EncodePriority+0x30>
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3b03      	subs	r3, #3
 800263e:	e000      	b.n	8002642 <NVIC_EncodePriority+0x32>
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002644:	f04f 32ff 	mov.w	r2, #4294967295
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43da      	mvns	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	401a      	ands	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002658:	f04f 31ff 	mov.w	r1, #4294967295
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa01 f303 	lsl.w	r3, r1, r3
 8002662:	43d9      	mvns	r1, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002668:	4313      	orrs	r3, r2
         );
}
 800266a:	4618      	mov	r0, r3
 800266c:	3724      	adds	r7, #36	@ 0x24
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3b01      	subs	r3, #1
 8002684:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002688:	d301      	bcc.n	800268e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268a:	2301      	movs	r3, #1
 800268c:	e00f      	b.n	80026ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800268e:	4a0a      	ldr	r2, [pc, #40]	@ (80026b8 <SysTick_Config+0x40>)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3b01      	subs	r3, #1
 8002694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002696:	210f      	movs	r1, #15
 8002698:	f04f 30ff 	mov.w	r0, #4294967295
 800269c:	f7ff ff8e 	bl	80025bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a0:	4b05      	ldr	r3, [pc, #20]	@ (80026b8 <SysTick_Config+0x40>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026a6:	4b04      	ldr	r3, [pc, #16]	@ (80026b8 <SysTick_Config+0x40>)
 80026a8:	2207      	movs	r2, #7
 80026aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	e000e010 	.word	0xe000e010

080026bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff ff29 	bl	800251c <__NVIC_SetPriorityGrouping>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b086      	sub	sp, #24
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4603      	mov	r3, r0
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026e0:	f7ff ff40 	bl	8002564 <__NVIC_GetPriorityGrouping>
 80026e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	6978      	ldr	r0, [r7, #20]
 80026ec:	f7ff ff90 	bl	8002610 <NVIC_EncodePriority>
 80026f0:	4602      	mov	r2, r0
 80026f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff5f 	bl	80025bc <__NVIC_SetPriority>
}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002710:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff33 	bl	8002580 <__NVIC_EnableIRQ>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ffa4 	bl	8002678 <SysTick_Config>
 8002730:	4603      	mov	r3, r0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002744:	f7fe ff26 	bl	8001594 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e316      	b.n	8002d82 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a66      	ldr	r2, [pc, #408]	@ (80028f4 <HAL_DMA_Init+0x1b8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d04a      	beq.n	80027f4 <HAL_DMA_Init+0xb8>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a65      	ldr	r2, [pc, #404]	@ (80028f8 <HAL_DMA_Init+0x1bc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d045      	beq.n	80027f4 <HAL_DMA_Init+0xb8>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a63      	ldr	r2, [pc, #396]	@ (80028fc <HAL_DMA_Init+0x1c0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d040      	beq.n	80027f4 <HAL_DMA_Init+0xb8>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a62      	ldr	r2, [pc, #392]	@ (8002900 <HAL_DMA_Init+0x1c4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d03b      	beq.n	80027f4 <HAL_DMA_Init+0xb8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a60      	ldr	r2, [pc, #384]	@ (8002904 <HAL_DMA_Init+0x1c8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d036      	beq.n	80027f4 <HAL_DMA_Init+0xb8>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a5f      	ldr	r2, [pc, #380]	@ (8002908 <HAL_DMA_Init+0x1cc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d031      	beq.n	80027f4 <HAL_DMA_Init+0xb8>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a5d      	ldr	r2, [pc, #372]	@ (800290c <HAL_DMA_Init+0x1d0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d02c      	beq.n	80027f4 <HAL_DMA_Init+0xb8>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a5c      	ldr	r2, [pc, #368]	@ (8002910 <HAL_DMA_Init+0x1d4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d027      	beq.n	80027f4 <HAL_DMA_Init+0xb8>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a5a      	ldr	r2, [pc, #360]	@ (8002914 <HAL_DMA_Init+0x1d8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d022      	beq.n	80027f4 <HAL_DMA_Init+0xb8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a59      	ldr	r2, [pc, #356]	@ (8002918 <HAL_DMA_Init+0x1dc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d01d      	beq.n	80027f4 <HAL_DMA_Init+0xb8>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a57      	ldr	r2, [pc, #348]	@ (800291c <HAL_DMA_Init+0x1e0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d018      	beq.n	80027f4 <HAL_DMA_Init+0xb8>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a56      	ldr	r2, [pc, #344]	@ (8002920 <HAL_DMA_Init+0x1e4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d013      	beq.n	80027f4 <HAL_DMA_Init+0xb8>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a54      	ldr	r2, [pc, #336]	@ (8002924 <HAL_DMA_Init+0x1e8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d00e      	beq.n	80027f4 <HAL_DMA_Init+0xb8>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a53      	ldr	r2, [pc, #332]	@ (8002928 <HAL_DMA_Init+0x1ec>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d009      	beq.n	80027f4 <HAL_DMA_Init+0xb8>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a51      	ldr	r2, [pc, #324]	@ (800292c <HAL_DMA_Init+0x1f0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d004      	beq.n	80027f4 <HAL_DMA_Init+0xb8>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a50      	ldr	r2, [pc, #320]	@ (8002930 <HAL_DMA_Init+0x1f4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d101      	bne.n	80027f8 <HAL_DMA_Init+0xbc>
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <HAL_DMA_Init+0xbe>
 80027f8:	2300      	movs	r3, #0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 813b 	beq.w	8002a76 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a37      	ldr	r2, [pc, #220]	@ (80028f4 <HAL_DMA_Init+0x1b8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d04a      	beq.n	80028b0 <HAL_DMA_Init+0x174>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a36      	ldr	r2, [pc, #216]	@ (80028f8 <HAL_DMA_Init+0x1bc>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d045      	beq.n	80028b0 <HAL_DMA_Init+0x174>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a34      	ldr	r2, [pc, #208]	@ (80028fc <HAL_DMA_Init+0x1c0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d040      	beq.n	80028b0 <HAL_DMA_Init+0x174>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a33      	ldr	r2, [pc, #204]	@ (8002900 <HAL_DMA_Init+0x1c4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d03b      	beq.n	80028b0 <HAL_DMA_Init+0x174>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a31      	ldr	r2, [pc, #196]	@ (8002904 <HAL_DMA_Init+0x1c8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d036      	beq.n	80028b0 <HAL_DMA_Init+0x174>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a30      	ldr	r2, [pc, #192]	@ (8002908 <HAL_DMA_Init+0x1cc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d031      	beq.n	80028b0 <HAL_DMA_Init+0x174>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a2e      	ldr	r2, [pc, #184]	@ (800290c <HAL_DMA_Init+0x1d0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d02c      	beq.n	80028b0 <HAL_DMA_Init+0x174>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a2d      	ldr	r2, [pc, #180]	@ (8002910 <HAL_DMA_Init+0x1d4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d027      	beq.n	80028b0 <HAL_DMA_Init+0x174>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a2b      	ldr	r2, [pc, #172]	@ (8002914 <HAL_DMA_Init+0x1d8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d022      	beq.n	80028b0 <HAL_DMA_Init+0x174>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a2a      	ldr	r2, [pc, #168]	@ (8002918 <HAL_DMA_Init+0x1dc>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d01d      	beq.n	80028b0 <HAL_DMA_Init+0x174>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a28      	ldr	r2, [pc, #160]	@ (800291c <HAL_DMA_Init+0x1e0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d018      	beq.n	80028b0 <HAL_DMA_Init+0x174>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a27      	ldr	r2, [pc, #156]	@ (8002920 <HAL_DMA_Init+0x1e4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d013      	beq.n	80028b0 <HAL_DMA_Init+0x174>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a25      	ldr	r2, [pc, #148]	@ (8002924 <HAL_DMA_Init+0x1e8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00e      	beq.n	80028b0 <HAL_DMA_Init+0x174>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a24      	ldr	r2, [pc, #144]	@ (8002928 <HAL_DMA_Init+0x1ec>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d009      	beq.n	80028b0 <HAL_DMA_Init+0x174>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a22      	ldr	r2, [pc, #136]	@ (800292c <HAL_DMA_Init+0x1f0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d004      	beq.n	80028b0 <HAL_DMA_Init+0x174>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a21      	ldr	r2, [pc, #132]	@ (8002930 <HAL_DMA_Init+0x1f4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d108      	bne.n	80028c2 <HAL_DMA_Init+0x186>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0201 	bic.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e007      	b.n	80028d2 <HAL_DMA_Init+0x196>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0201 	bic.w	r2, r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028d2:	e02f      	b.n	8002934 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028d4:	f7fe fe5e 	bl	8001594 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b05      	cmp	r3, #5
 80028e0:	d928      	bls.n	8002934 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2220      	movs	r2, #32
 80028e6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2203      	movs	r2, #3
 80028ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e246      	b.n	8002d82 <HAL_DMA_Init+0x646>
 80028f4:	40020010 	.word	0x40020010
 80028f8:	40020028 	.word	0x40020028
 80028fc:	40020040 	.word	0x40020040
 8002900:	40020058 	.word	0x40020058
 8002904:	40020070 	.word	0x40020070
 8002908:	40020088 	.word	0x40020088
 800290c:	400200a0 	.word	0x400200a0
 8002910:	400200b8 	.word	0x400200b8
 8002914:	40020410 	.word	0x40020410
 8002918:	40020428 	.word	0x40020428
 800291c:	40020440 	.word	0x40020440
 8002920:	40020458 	.word	0x40020458
 8002924:	40020470 	.word	0x40020470
 8002928:	40020488 	.word	0x40020488
 800292c:	400204a0 	.word	0x400204a0
 8002930:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1c8      	bne.n	80028d4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4b83      	ldr	r3, [pc, #524]	@ (8002b5c <HAL_DMA_Init+0x420>)
 800294e:	4013      	ands	r3, r2
 8002950:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800295a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002966:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002972:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002984:	2b04      	cmp	r3, #4
 8002986:	d107      	bne.n	8002998 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002990:	4313      	orrs	r3, r2
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4313      	orrs	r3, r2
 8002996:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002998:	4b71      	ldr	r3, [pc, #452]	@ (8002b60 <HAL_DMA_Init+0x424>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b71      	ldr	r3, [pc, #452]	@ (8002b64 <HAL_DMA_Init+0x428>)
 800299e:	4013      	ands	r3, r2
 80029a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029a4:	d328      	bcc.n	80029f8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b28      	cmp	r3, #40	@ 0x28
 80029ac:	d903      	bls.n	80029b6 <HAL_DMA_Init+0x27a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80029b4:	d917      	bls.n	80029e6 <HAL_DMA_Init+0x2aa>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80029bc:	d903      	bls.n	80029c6 <HAL_DMA_Init+0x28a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b42      	cmp	r3, #66	@ 0x42
 80029c4:	d90f      	bls.n	80029e6 <HAL_DMA_Init+0x2aa>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b46      	cmp	r3, #70	@ 0x46
 80029cc:	d903      	bls.n	80029d6 <HAL_DMA_Init+0x29a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b48      	cmp	r3, #72	@ 0x48
 80029d4:	d907      	bls.n	80029e6 <HAL_DMA_Init+0x2aa>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b4e      	cmp	r3, #78	@ 0x4e
 80029dc:	d905      	bls.n	80029ea <HAL_DMA_Init+0x2ae>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b52      	cmp	r3, #82	@ 0x52
 80029e4:	d801      	bhi.n	80029ea <HAL_DMA_Init+0x2ae>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_DMA_Init+0x2b0>
 80029ea:	2300      	movs	r3, #0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029f6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f023 0307 	bic.w	r3, r3, #7
 8002a0e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d117      	bne.n	8002a52 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00e      	beq.n	8002a52 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 fa8f 	bl	8002f58 <DMA_CheckFifoParam>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2240      	movs	r2, #64	@ 0x40
 8002a44:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e197      	b.n	8002d82 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f9ca 	bl	8002df4 <DMA_CalcBaseAndBitshift>
 8002a60:	4603      	mov	r3, r0
 8002a62:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	223f      	movs	r2, #63	@ 0x3f
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	e0cd      	b.n	8002c12 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a3b      	ldr	r2, [pc, #236]	@ (8002b68 <HAL_DMA_Init+0x42c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d022      	beq.n	8002ac6 <HAL_DMA_Init+0x38a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a39      	ldr	r2, [pc, #228]	@ (8002b6c <HAL_DMA_Init+0x430>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01d      	beq.n	8002ac6 <HAL_DMA_Init+0x38a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a38      	ldr	r2, [pc, #224]	@ (8002b70 <HAL_DMA_Init+0x434>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d018      	beq.n	8002ac6 <HAL_DMA_Init+0x38a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a36      	ldr	r2, [pc, #216]	@ (8002b74 <HAL_DMA_Init+0x438>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_DMA_Init+0x38a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a35      	ldr	r2, [pc, #212]	@ (8002b78 <HAL_DMA_Init+0x43c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00e      	beq.n	8002ac6 <HAL_DMA_Init+0x38a>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a33      	ldr	r2, [pc, #204]	@ (8002b7c <HAL_DMA_Init+0x440>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d009      	beq.n	8002ac6 <HAL_DMA_Init+0x38a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a32      	ldr	r2, [pc, #200]	@ (8002b80 <HAL_DMA_Init+0x444>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d004      	beq.n	8002ac6 <HAL_DMA_Init+0x38a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a30      	ldr	r2, [pc, #192]	@ (8002b84 <HAL_DMA_Init+0x448>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d101      	bne.n	8002aca <HAL_DMA_Init+0x38e>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_DMA_Init+0x390>
 8002aca:	2300      	movs	r3, #0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 8097 	beq.w	8002c00 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a24      	ldr	r2, [pc, #144]	@ (8002b68 <HAL_DMA_Init+0x42c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d021      	beq.n	8002b20 <HAL_DMA_Init+0x3e4>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a22      	ldr	r2, [pc, #136]	@ (8002b6c <HAL_DMA_Init+0x430>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d01c      	beq.n	8002b20 <HAL_DMA_Init+0x3e4>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a21      	ldr	r2, [pc, #132]	@ (8002b70 <HAL_DMA_Init+0x434>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d017      	beq.n	8002b20 <HAL_DMA_Init+0x3e4>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b74 <HAL_DMA_Init+0x438>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d012      	beq.n	8002b20 <HAL_DMA_Init+0x3e4>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1e      	ldr	r2, [pc, #120]	@ (8002b78 <HAL_DMA_Init+0x43c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d00d      	beq.n	8002b20 <HAL_DMA_Init+0x3e4>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1c      	ldr	r2, [pc, #112]	@ (8002b7c <HAL_DMA_Init+0x440>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d008      	beq.n	8002b20 <HAL_DMA_Init+0x3e4>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1b      	ldr	r2, [pc, #108]	@ (8002b80 <HAL_DMA_Init+0x444>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d003      	beq.n	8002b20 <HAL_DMA_Init+0x3e4>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a19      	ldr	r2, [pc, #100]	@ (8002b84 <HAL_DMA_Init+0x448>)
 8002b1e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4b13      	ldr	r3, [pc, #76]	@ (8002b88 <HAL_DMA_Init+0x44c>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b40      	cmp	r3, #64	@ 0x40
 8002b46:	d021      	beq.n	8002b8c <HAL_DMA_Init+0x450>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b80      	cmp	r3, #128	@ 0x80
 8002b4e:	d102      	bne.n	8002b56 <HAL_DMA_Init+0x41a>
 8002b50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b54:	e01b      	b.n	8002b8e <HAL_DMA_Init+0x452>
 8002b56:	2300      	movs	r3, #0
 8002b58:	e019      	b.n	8002b8e <HAL_DMA_Init+0x452>
 8002b5a:	bf00      	nop
 8002b5c:	fe10803f 	.word	0xfe10803f
 8002b60:	5c001000 	.word	0x5c001000
 8002b64:	ffff0000 	.word	0xffff0000
 8002b68:	58025408 	.word	0x58025408
 8002b6c:	5802541c 	.word	0x5802541c
 8002b70:	58025430 	.word	0x58025430
 8002b74:	58025444 	.word	0x58025444
 8002b78:	58025458 	.word	0x58025458
 8002b7c:	5802546c 	.word	0x5802546c
 8002b80:	58025480 	.word	0x58025480
 8002b84:	58025494 	.word	0x58025494
 8002b88:	fffe000f 	.word	0xfffe000f
 8002b8c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68d2      	ldr	r2, [r2, #12]
 8002b92:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ba4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002bac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002bb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002bbc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b6e      	ldr	r3, [pc, #440]	@ (8002d8c <HAL_DMA_Init+0x650>)
 8002bd4:	4413      	add	r3, r2
 8002bd6:	4a6e      	ldr	r2, [pc, #440]	@ (8002d90 <HAL_DMA_Init+0x654>)
 8002bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	009a      	lsls	r2, r3, #2
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f905 	bl	8002df4 <DMA_CalcBaseAndBitshift>
 8002bea:	4603      	mov	r3, r0
 8002bec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf2:	f003 031f 	and.w	r3, r3, #31
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	e008      	b.n	8002c12 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2240      	movs	r2, #64	@ 0x40
 8002c04:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2203      	movs	r2, #3
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e0b7      	b.n	8002d82 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a5f      	ldr	r2, [pc, #380]	@ (8002d94 <HAL_DMA_Init+0x658>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d072      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a5d      	ldr	r2, [pc, #372]	@ (8002d98 <HAL_DMA_Init+0x65c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d06d      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a5c      	ldr	r2, [pc, #368]	@ (8002d9c <HAL_DMA_Init+0x660>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d068      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a5a      	ldr	r2, [pc, #360]	@ (8002da0 <HAL_DMA_Init+0x664>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d063      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a59      	ldr	r2, [pc, #356]	@ (8002da4 <HAL_DMA_Init+0x668>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d05e      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a57      	ldr	r2, [pc, #348]	@ (8002da8 <HAL_DMA_Init+0x66c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d059      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a56      	ldr	r2, [pc, #344]	@ (8002dac <HAL_DMA_Init+0x670>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d054      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a54      	ldr	r2, [pc, #336]	@ (8002db0 <HAL_DMA_Init+0x674>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d04f      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a53      	ldr	r2, [pc, #332]	@ (8002db4 <HAL_DMA_Init+0x678>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d04a      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a51      	ldr	r2, [pc, #324]	@ (8002db8 <HAL_DMA_Init+0x67c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d045      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a50      	ldr	r2, [pc, #320]	@ (8002dbc <HAL_DMA_Init+0x680>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d040      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a4e      	ldr	r2, [pc, #312]	@ (8002dc0 <HAL_DMA_Init+0x684>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d03b      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a4d      	ldr	r2, [pc, #308]	@ (8002dc4 <HAL_DMA_Init+0x688>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d036      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a4b      	ldr	r2, [pc, #300]	@ (8002dc8 <HAL_DMA_Init+0x68c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d031      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a4a      	ldr	r2, [pc, #296]	@ (8002dcc <HAL_DMA_Init+0x690>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d02c      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a48      	ldr	r2, [pc, #288]	@ (8002dd0 <HAL_DMA_Init+0x694>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d027      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a47      	ldr	r2, [pc, #284]	@ (8002dd4 <HAL_DMA_Init+0x698>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d022      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a45      	ldr	r2, [pc, #276]	@ (8002dd8 <HAL_DMA_Init+0x69c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01d      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a44      	ldr	r2, [pc, #272]	@ (8002ddc <HAL_DMA_Init+0x6a0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d018      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a42      	ldr	r2, [pc, #264]	@ (8002de0 <HAL_DMA_Init+0x6a4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a41      	ldr	r2, [pc, #260]	@ (8002de4 <HAL_DMA_Init+0x6a8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00e      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a3f      	ldr	r2, [pc, #252]	@ (8002de8 <HAL_DMA_Init+0x6ac>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d009      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a3e      	ldr	r2, [pc, #248]	@ (8002dec <HAL_DMA_Init+0x6b0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d004      	beq.n	8002d02 <HAL_DMA_Init+0x5c6>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a3c      	ldr	r2, [pc, #240]	@ (8002df0 <HAL_DMA_Init+0x6b4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d101      	bne.n	8002d06 <HAL_DMA_Init+0x5ca>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <HAL_DMA_Init+0x5cc>
 8002d06:	2300      	movs	r3, #0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d032      	beq.n	8002d72 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f99f 	bl	8003050 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b80      	cmp	r3, #128	@ 0x80
 8002d18:	d102      	bne.n	8002d20 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d34:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d010      	beq.n	8002d60 <HAL_DMA_Init+0x624>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d80c      	bhi.n	8002d60 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fa1c 	bl	8003184 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	e008      	b.n	8002d72 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	a7fdabf8 	.word	0xa7fdabf8
 8002d90:	cccccccd 	.word	0xcccccccd
 8002d94:	40020010 	.word	0x40020010
 8002d98:	40020028 	.word	0x40020028
 8002d9c:	40020040 	.word	0x40020040
 8002da0:	40020058 	.word	0x40020058
 8002da4:	40020070 	.word	0x40020070
 8002da8:	40020088 	.word	0x40020088
 8002dac:	400200a0 	.word	0x400200a0
 8002db0:	400200b8 	.word	0x400200b8
 8002db4:	40020410 	.word	0x40020410
 8002db8:	40020428 	.word	0x40020428
 8002dbc:	40020440 	.word	0x40020440
 8002dc0:	40020458 	.word	0x40020458
 8002dc4:	40020470 	.word	0x40020470
 8002dc8:	40020488 	.word	0x40020488
 8002dcc:	400204a0 	.word	0x400204a0
 8002dd0:	400204b8 	.word	0x400204b8
 8002dd4:	58025408 	.word	0x58025408
 8002dd8:	5802541c 	.word	0x5802541c
 8002ddc:	58025430 	.word	0x58025430
 8002de0:	58025444 	.word	0x58025444
 8002de4:	58025458 	.word	0x58025458
 8002de8:	5802546c 	.word	0x5802546c
 8002dec:	58025480 	.word	0x58025480
 8002df0:	58025494 	.word	0x58025494

08002df4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a42      	ldr	r2, [pc, #264]	@ (8002f0c <DMA_CalcBaseAndBitshift+0x118>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d04a      	beq.n	8002e9c <DMA_CalcBaseAndBitshift+0xa8>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a41      	ldr	r2, [pc, #260]	@ (8002f10 <DMA_CalcBaseAndBitshift+0x11c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d045      	beq.n	8002e9c <DMA_CalcBaseAndBitshift+0xa8>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a3f      	ldr	r2, [pc, #252]	@ (8002f14 <DMA_CalcBaseAndBitshift+0x120>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d040      	beq.n	8002e9c <DMA_CalcBaseAndBitshift+0xa8>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a3e      	ldr	r2, [pc, #248]	@ (8002f18 <DMA_CalcBaseAndBitshift+0x124>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d03b      	beq.n	8002e9c <DMA_CalcBaseAndBitshift+0xa8>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a3c      	ldr	r2, [pc, #240]	@ (8002f1c <DMA_CalcBaseAndBitshift+0x128>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d036      	beq.n	8002e9c <DMA_CalcBaseAndBitshift+0xa8>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a3b      	ldr	r2, [pc, #236]	@ (8002f20 <DMA_CalcBaseAndBitshift+0x12c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d031      	beq.n	8002e9c <DMA_CalcBaseAndBitshift+0xa8>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a39      	ldr	r2, [pc, #228]	@ (8002f24 <DMA_CalcBaseAndBitshift+0x130>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d02c      	beq.n	8002e9c <DMA_CalcBaseAndBitshift+0xa8>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a38      	ldr	r2, [pc, #224]	@ (8002f28 <DMA_CalcBaseAndBitshift+0x134>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d027      	beq.n	8002e9c <DMA_CalcBaseAndBitshift+0xa8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a36      	ldr	r2, [pc, #216]	@ (8002f2c <DMA_CalcBaseAndBitshift+0x138>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d022      	beq.n	8002e9c <DMA_CalcBaseAndBitshift+0xa8>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a35      	ldr	r2, [pc, #212]	@ (8002f30 <DMA_CalcBaseAndBitshift+0x13c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d01d      	beq.n	8002e9c <DMA_CalcBaseAndBitshift+0xa8>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a33      	ldr	r2, [pc, #204]	@ (8002f34 <DMA_CalcBaseAndBitshift+0x140>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d018      	beq.n	8002e9c <DMA_CalcBaseAndBitshift+0xa8>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a32      	ldr	r2, [pc, #200]	@ (8002f38 <DMA_CalcBaseAndBitshift+0x144>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d013      	beq.n	8002e9c <DMA_CalcBaseAndBitshift+0xa8>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a30      	ldr	r2, [pc, #192]	@ (8002f3c <DMA_CalcBaseAndBitshift+0x148>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00e      	beq.n	8002e9c <DMA_CalcBaseAndBitshift+0xa8>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a2f      	ldr	r2, [pc, #188]	@ (8002f40 <DMA_CalcBaseAndBitshift+0x14c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d009      	beq.n	8002e9c <DMA_CalcBaseAndBitshift+0xa8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a2d      	ldr	r2, [pc, #180]	@ (8002f44 <DMA_CalcBaseAndBitshift+0x150>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d004      	beq.n	8002e9c <DMA_CalcBaseAndBitshift+0xa8>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a2c      	ldr	r2, [pc, #176]	@ (8002f48 <DMA_CalcBaseAndBitshift+0x154>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d101      	bne.n	8002ea0 <DMA_CalcBaseAndBitshift+0xac>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <DMA_CalcBaseAndBitshift+0xae>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d024      	beq.n	8002ef0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	3b10      	subs	r3, #16
 8002eae:	4a27      	ldr	r2, [pc, #156]	@ (8002f4c <DMA_CalcBaseAndBitshift+0x158>)
 8002eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	4a24      	ldr	r2, [pc, #144]	@ (8002f50 <DMA_CalcBaseAndBitshift+0x15c>)
 8002ec0:	5cd3      	ldrb	r3, [r2, r3]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d908      	bls.n	8002ee0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f54 <DMA_CalcBaseAndBitshift+0x160>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	1d1a      	adds	r2, r3, #4
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ede:	e00d      	b.n	8002efc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f54 <DMA_CalcBaseAndBitshift+0x160>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eee:	e005      	b.n	8002efc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	40020010 	.word	0x40020010
 8002f10:	40020028 	.word	0x40020028
 8002f14:	40020040 	.word	0x40020040
 8002f18:	40020058 	.word	0x40020058
 8002f1c:	40020070 	.word	0x40020070
 8002f20:	40020088 	.word	0x40020088
 8002f24:	400200a0 	.word	0x400200a0
 8002f28:	400200b8 	.word	0x400200b8
 8002f2c:	40020410 	.word	0x40020410
 8002f30:	40020428 	.word	0x40020428
 8002f34:	40020440 	.word	0x40020440
 8002f38:	40020458 	.word	0x40020458
 8002f3c:	40020470 	.word	0x40020470
 8002f40:	40020488 	.word	0x40020488
 8002f44:	400204a0 	.word	0x400204a0
 8002f48:	400204b8 	.word	0x400204b8
 8002f4c:	aaaaaaab 	.word	0xaaaaaaab
 8002f50:	0800858c 	.word	0x0800858c
 8002f54:	fffffc00 	.word	0xfffffc00

08002f58 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d120      	bne.n	8002fae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d858      	bhi.n	8003026 <DMA_CheckFifoParam+0xce>
 8002f74:	a201      	add	r2, pc, #4	@ (adr r2, 8002f7c <DMA_CheckFifoParam+0x24>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002f8d 	.word	0x08002f8d
 8002f80:	08002f9f 	.word	0x08002f9f
 8002f84:	08002f8d 	.word	0x08002f8d
 8002f88:	08003027 	.word	0x08003027
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d048      	beq.n	800302a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f9c:	e045      	b.n	800302a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fa6:	d142      	bne.n	800302e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002fac:	e03f      	b.n	800302e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fb6:	d123      	bne.n	8003000 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d838      	bhi.n	8003032 <DMA_CheckFifoParam+0xda>
 8002fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc8 <DMA_CheckFifoParam+0x70>)
 8002fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc6:	bf00      	nop
 8002fc8:	08002fd9 	.word	0x08002fd9
 8002fcc:	08002fdf 	.word	0x08002fdf
 8002fd0:	08002fd9 	.word	0x08002fd9
 8002fd4:	08002ff1 	.word	0x08002ff1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
        break;
 8002fdc:	e030      	b.n	8003040 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d025      	beq.n	8003036 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002fee:	e022      	b.n	8003036 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ff8:	d11f      	bne.n	800303a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ffe:	e01c      	b.n	800303a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003004:	2b02      	cmp	r3, #2
 8003006:	d902      	bls.n	800300e <DMA_CheckFifoParam+0xb6>
 8003008:	2b03      	cmp	r3, #3
 800300a:	d003      	beq.n	8003014 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800300c:	e018      	b.n	8003040 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
        break;
 8003012:	e015      	b.n	8003040 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003018:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00e      	beq.n	800303e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
    break;
 8003024:	e00b      	b.n	800303e <DMA_CheckFifoParam+0xe6>
        break;
 8003026:	bf00      	nop
 8003028:	e00a      	b.n	8003040 <DMA_CheckFifoParam+0xe8>
        break;
 800302a:	bf00      	nop
 800302c:	e008      	b.n	8003040 <DMA_CheckFifoParam+0xe8>
        break;
 800302e:	bf00      	nop
 8003030:	e006      	b.n	8003040 <DMA_CheckFifoParam+0xe8>
        break;
 8003032:	bf00      	nop
 8003034:	e004      	b.n	8003040 <DMA_CheckFifoParam+0xe8>
        break;
 8003036:	bf00      	nop
 8003038:	e002      	b.n	8003040 <DMA_CheckFifoParam+0xe8>
        break;
 800303a:	bf00      	nop
 800303c:	e000      	b.n	8003040 <DMA_CheckFifoParam+0xe8>
    break;
 800303e:	bf00      	nop
    }
  }

  return status;
 8003040:	7bfb      	ldrb	r3, [r7, #15]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop

08003050 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a38      	ldr	r2, [pc, #224]	@ (8003144 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d022      	beq.n	80030ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a36      	ldr	r2, [pc, #216]	@ (8003148 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d01d      	beq.n	80030ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a35      	ldr	r2, [pc, #212]	@ (800314c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d018      	beq.n	80030ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a33      	ldr	r2, [pc, #204]	@ (8003150 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d013      	beq.n	80030ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a32      	ldr	r2, [pc, #200]	@ (8003154 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d00e      	beq.n	80030ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a30      	ldr	r2, [pc, #192]	@ (8003158 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d009      	beq.n	80030ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a2f      	ldr	r2, [pc, #188]	@ (800315c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d004      	beq.n	80030ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003160 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d101      	bne.n	80030b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80030b2:	2300      	movs	r3, #0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d01a      	beq.n	80030ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	3b08      	subs	r3, #8
 80030c0:	4a28      	ldr	r2, [pc, #160]	@ (8003164 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4b26      	ldr	r3, [pc, #152]	@ (8003168 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	461a      	mov	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a24      	ldr	r2, [pc, #144]	@ (800316c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80030dc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	2201      	movs	r2, #1
 80030e6:	409a      	lsls	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80030ec:	e024      	b.n	8003138 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	3b10      	subs	r3, #16
 80030f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003170 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80030f8:	fba2 2303 	umull	r2, r3, r2, r3
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4a1c      	ldr	r2, [pc, #112]	@ (8003174 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d806      	bhi.n	8003116 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4a1b      	ldr	r2, [pc, #108]	@ (8003178 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d902      	bls.n	8003116 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	3308      	adds	r3, #8
 8003114:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	4b18      	ldr	r3, [pc, #96]	@ (800317c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	461a      	mov	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a16      	ldr	r2, [pc, #88]	@ (8003180 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003128:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	2201      	movs	r2, #1
 8003132:	409a      	lsls	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003138:	bf00      	nop
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	58025408 	.word	0x58025408
 8003148:	5802541c 	.word	0x5802541c
 800314c:	58025430 	.word	0x58025430
 8003150:	58025444 	.word	0x58025444
 8003154:	58025458 	.word	0x58025458
 8003158:	5802546c 	.word	0x5802546c
 800315c:	58025480 	.word	0x58025480
 8003160:	58025494 	.word	0x58025494
 8003164:	cccccccd 	.word	0xcccccccd
 8003168:	16009600 	.word	0x16009600
 800316c:	58025880 	.word	0x58025880
 8003170:	aaaaaaab 	.word	0xaaaaaaab
 8003174:	400204b8 	.word	0x400204b8
 8003178:	4002040f 	.word	0x4002040f
 800317c:	10008200 	.word	0x10008200
 8003180:	40020880 	.word	0x40020880

08003184 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d04a      	beq.n	8003230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d847      	bhi.n	8003230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a25      	ldr	r2, [pc, #148]	@ (800323c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d022      	beq.n	80031f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a24      	ldr	r2, [pc, #144]	@ (8003240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d01d      	beq.n	80031f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a22      	ldr	r2, [pc, #136]	@ (8003244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d018      	beq.n	80031f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a21      	ldr	r2, [pc, #132]	@ (8003248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d013      	beq.n	80031f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a1f      	ldr	r2, [pc, #124]	@ (800324c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00e      	beq.n	80031f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d009      	beq.n	80031f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d004      	beq.n	80031f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d101      	bne.n	80031f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80031f4:	2300      	movs	r3, #0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4b17      	ldr	r3, [pc, #92]	@ (800325c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	461a      	mov	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a15      	ldr	r2, [pc, #84]	@ (8003260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800320c:	671a      	str	r2, [r3, #112]	@ 0x70
 800320e:	e009      	b.n	8003224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4b14      	ldr	r3, [pc, #80]	@ (8003264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	461a      	mov	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a11      	ldr	r2, [pc, #68]	@ (8003268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003222:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	3b01      	subs	r3, #1
 8003228:	2201      	movs	r2, #1
 800322a:	409a      	lsls	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	58025408 	.word	0x58025408
 8003240:	5802541c 	.word	0x5802541c
 8003244:	58025430 	.word	0x58025430
 8003248:	58025444 	.word	0x58025444
 800324c:	58025458 	.word	0x58025458
 8003250:	5802546c 	.word	0x5802546c
 8003254:	58025480 	.word	0x58025480
 8003258:	58025494 	.word	0x58025494
 800325c:	1600963f 	.word	0x1600963f
 8003260:	58025940 	.word	0x58025940
 8003264:	1000823f 	.word	0x1000823f
 8003268:	40020940 	.word	0x40020940

0800326c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800326c:	b480      	push	{r7}
 800326e:	b089      	sub	sp, #36	@ 0x24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800327a:	4b89      	ldr	r3, [pc, #548]	@ (80034a0 <HAL_GPIO_Init+0x234>)
 800327c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800327e:	e194      	b.n	80035aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	2101      	movs	r1, #1
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	fa01 f303 	lsl.w	r3, r1, r3
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 8186 	beq.w	80035a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d005      	beq.n	80032b0 <HAL_GPIO_Init+0x44>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d130      	bne.n	8003312 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	2203      	movs	r2, #3
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032e6:	2201      	movs	r2, #1
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	f003 0201 	and.w	r2, r3, #1
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b03      	cmp	r3, #3
 800331c:	d017      	beq.n	800334e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	2203      	movs	r2, #3
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d123      	bne.n	80033a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	08da      	lsrs	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3208      	adds	r2, #8
 8003362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	220f      	movs	r2, #15
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4013      	ands	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	08da      	lsrs	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3208      	adds	r2, #8
 800339c:	69b9      	ldr	r1, [r7, #24]
 800339e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	2203      	movs	r2, #3
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4013      	ands	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f003 0203 	and.w	r2, r3, #3
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80e0 	beq.w	80035a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e4:	4b2f      	ldr	r3, [pc, #188]	@ (80034a4 <HAL_GPIO_Init+0x238>)
 80033e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80033ea:	4a2e      	ldr	r2, [pc, #184]	@ (80034a4 <HAL_GPIO_Init+0x238>)
 80033ec:	f043 0302 	orr.w	r3, r3, #2
 80033f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80033f4:	4b2b      	ldr	r3, [pc, #172]	@ (80034a4 <HAL_GPIO_Init+0x238>)
 80033f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003402:	4a29      	ldr	r2, [pc, #164]	@ (80034a8 <HAL_GPIO_Init+0x23c>)
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	3302      	adds	r3, #2
 800340a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	220f      	movs	r2, #15
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a20      	ldr	r2, [pc, #128]	@ (80034ac <HAL_GPIO_Init+0x240>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d052      	beq.n	80034d4 <HAL_GPIO_Init+0x268>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a1f      	ldr	r2, [pc, #124]	@ (80034b0 <HAL_GPIO_Init+0x244>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d031      	beq.n	800349a <HAL_GPIO_Init+0x22e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a1e      	ldr	r2, [pc, #120]	@ (80034b4 <HAL_GPIO_Init+0x248>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d02b      	beq.n	8003496 <HAL_GPIO_Init+0x22a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a1d      	ldr	r2, [pc, #116]	@ (80034b8 <HAL_GPIO_Init+0x24c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d025      	beq.n	8003492 <HAL_GPIO_Init+0x226>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a1c      	ldr	r2, [pc, #112]	@ (80034bc <HAL_GPIO_Init+0x250>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d01f      	beq.n	800348e <HAL_GPIO_Init+0x222>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a1b      	ldr	r2, [pc, #108]	@ (80034c0 <HAL_GPIO_Init+0x254>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d019      	beq.n	800348a <HAL_GPIO_Init+0x21e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a1a      	ldr	r2, [pc, #104]	@ (80034c4 <HAL_GPIO_Init+0x258>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d013      	beq.n	8003486 <HAL_GPIO_Init+0x21a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a19      	ldr	r2, [pc, #100]	@ (80034c8 <HAL_GPIO_Init+0x25c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00d      	beq.n	8003482 <HAL_GPIO_Init+0x216>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a18      	ldr	r2, [pc, #96]	@ (80034cc <HAL_GPIO_Init+0x260>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d007      	beq.n	800347e <HAL_GPIO_Init+0x212>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a17      	ldr	r2, [pc, #92]	@ (80034d0 <HAL_GPIO_Init+0x264>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d101      	bne.n	800347a <HAL_GPIO_Init+0x20e>
 8003476:	2309      	movs	r3, #9
 8003478:	e02d      	b.n	80034d6 <HAL_GPIO_Init+0x26a>
 800347a:	230a      	movs	r3, #10
 800347c:	e02b      	b.n	80034d6 <HAL_GPIO_Init+0x26a>
 800347e:	2308      	movs	r3, #8
 8003480:	e029      	b.n	80034d6 <HAL_GPIO_Init+0x26a>
 8003482:	2307      	movs	r3, #7
 8003484:	e027      	b.n	80034d6 <HAL_GPIO_Init+0x26a>
 8003486:	2306      	movs	r3, #6
 8003488:	e025      	b.n	80034d6 <HAL_GPIO_Init+0x26a>
 800348a:	2305      	movs	r3, #5
 800348c:	e023      	b.n	80034d6 <HAL_GPIO_Init+0x26a>
 800348e:	2304      	movs	r3, #4
 8003490:	e021      	b.n	80034d6 <HAL_GPIO_Init+0x26a>
 8003492:	2303      	movs	r3, #3
 8003494:	e01f      	b.n	80034d6 <HAL_GPIO_Init+0x26a>
 8003496:	2302      	movs	r3, #2
 8003498:	e01d      	b.n	80034d6 <HAL_GPIO_Init+0x26a>
 800349a:	2301      	movs	r3, #1
 800349c:	e01b      	b.n	80034d6 <HAL_GPIO_Init+0x26a>
 800349e:	bf00      	nop
 80034a0:	58000080 	.word	0x58000080
 80034a4:	58024400 	.word	0x58024400
 80034a8:	58000400 	.word	0x58000400
 80034ac:	58020000 	.word	0x58020000
 80034b0:	58020400 	.word	0x58020400
 80034b4:	58020800 	.word	0x58020800
 80034b8:	58020c00 	.word	0x58020c00
 80034bc:	58021000 	.word	0x58021000
 80034c0:	58021400 	.word	0x58021400
 80034c4:	58021800 	.word	0x58021800
 80034c8:	58021c00 	.word	0x58021c00
 80034cc:	58022000 	.word	0x58022000
 80034d0:	58022400 	.word	0x58022400
 80034d4:	2300      	movs	r3, #0
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	f002 0203 	and.w	r2, r2, #3
 80034dc:	0092      	lsls	r2, r2, #2
 80034de:	4093      	lsls	r3, r2
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034e6:	4938      	ldr	r1, [pc, #224]	@ (80035c8 <HAL_GPIO_Init+0x35c>)
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	089b      	lsrs	r3, r3, #2
 80034ec:	3302      	adds	r3, #2
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	43db      	mvns	r3, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4013      	ands	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800351a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003548:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	3301      	adds	r3, #1
 80035a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	fa22 f303 	lsr.w	r3, r2, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f47f ae63 	bne.w	8003280 <HAL_GPIO_Init+0x14>
  }
}
 80035ba:	bf00      	nop
 80035bc:	bf00      	nop
 80035be:	3724      	adds	r7, #36	@ 0x24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	58000400 	.word	0x58000400

080035cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	807b      	strh	r3, [r7, #2]
 80035d8:	4613      	mov	r3, r2
 80035da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035dc:	787b      	ldrb	r3, [r7, #1]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035e2:	887a      	ldrh	r2, [r7, #2]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80035e8:	e003      	b.n	80035f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80035ea:	887b      	ldrh	r3, [r7, #2]
 80035ec:	041a      	lsls	r2, r3, #16
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	619a      	str	r2, [r3, #24]
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
	...

08003600 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003608:	4b19      	ldr	r3, [pc, #100]	@ (8003670 <HAL_PWREx_ConfigSupply+0x70>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b04      	cmp	r3, #4
 8003612:	d00a      	beq.n	800362a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003614:	4b16      	ldr	r3, [pc, #88]	@ (8003670 <HAL_PWREx_ConfigSupply+0x70>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	429a      	cmp	r2, r3
 8003620:	d001      	beq.n	8003626 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e01f      	b.n	8003666 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e01d      	b.n	8003666 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800362a:	4b11      	ldr	r3, [pc, #68]	@ (8003670 <HAL_PWREx_ConfigSupply+0x70>)
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f023 0207 	bic.w	r2, r3, #7
 8003632:	490f      	ldr	r1, [pc, #60]	@ (8003670 <HAL_PWREx_ConfigSupply+0x70>)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4313      	orrs	r3, r2
 8003638:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800363a:	f7fd ffab 	bl	8001594 <HAL_GetTick>
 800363e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003640:	e009      	b.n	8003656 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003642:	f7fd ffa7 	bl	8001594 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003650:	d901      	bls.n	8003656 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e007      	b.n	8003666 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003656:	4b06      	ldr	r3, [pc, #24]	@ (8003670 <HAL_PWREx_ConfigSupply+0x70>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800365e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003662:	d1ee      	bne.n	8003642 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	58024800 	.word	0x58024800

08003674 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08c      	sub	sp, #48	@ 0x30
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d102      	bne.n	8003688 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	f000 bc48 	b.w	8003f18 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8088 	beq.w	80037a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003696:	4b99      	ldr	r3, [pc, #612]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800369e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036a0:	4b96      	ldr	r3, [pc, #600]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 80036a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80036a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a8:	2b10      	cmp	r3, #16
 80036aa:	d007      	beq.n	80036bc <HAL_RCC_OscConfig+0x48>
 80036ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ae:	2b18      	cmp	r3, #24
 80036b0:	d111      	bne.n	80036d6 <HAL_RCC_OscConfig+0x62>
 80036b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d10c      	bne.n	80036d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036bc:	4b8f      	ldr	r3, [pc, #572]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d06d      	beq.n	80037a4 <HAL_RCC_OscConfig+0x130>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d169      	bne.n	80037a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f000 bc21 	b.w	8003f18 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036de:	d106      	bne.n	80036ee <HAL_RCC_OscConfig+0x7a>
 80036e0:	4b86      	ldr	r3, [pc, #536]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a85      	ldr	r2, [pc, #532]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 80036e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	e02e      	b.n	800374c <HAL_RCC_OscConfig+0xd8>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10c      	bne.n	8003710 <HAL_RCC_OscConfig+0x9c>
 80036f6:	4b81      	ldr	r3, [pc, #516]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a80      	ldr	r2, [pc, #512]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 80036fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	4b7e      	ldr	r3, [pc, #504]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a7d      	ldr	r2, [pc, #500]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 8003708:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	e01d      	b.n	800374c <HAL_RCC_OscConfig+0xd8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0xc0>
 800371a:	4b78      	ldr	r3, [pc, #480]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a77      	ldr	r2, [pc, #476]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 8003720:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	4b75      	ldr	r3, [pc, #468]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a74      	ldr	r2, [pc, #464]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 800372c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e00b      	b.n	800374c <HAL_RCC_OscConfig+0xd8>
 8003734:	4b71      	ldr	r3, [pc, #452]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a70      	ldr	r2, [pc, #448]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 800373a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	4b6e      	ldr	r3, [pc, #440]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a6d      	ldr	r2, [pc, #436]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 8003746:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800374a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d013      	beq.n	800377c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fd ff1e 	bl	8001594 <HAL_GetTick>
 8003758:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800375c:	f7fd ff1a 	bl	8001594 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	@ 0x64
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e3d4      	b.n	8003f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800376e:	4b63      	ldr	r3, [pc, #396]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0xe8>
 800377a:	e014      	b.n	80037a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377c:	f7fd ff0a 	bl	8001594 <HAL_GetTick>
 8003780:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003784:	f7fd ff06 	bl	8001594 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b64      	cmp	r3, #100	@ 0x64
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e3c0      	b.n	8003f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003796:	4b59      	ldr	r3, [pc, #356]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x110>
 80037a2:	e000      	b.n	80037a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80ca 	beq.w	8003948 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037b4:	4b51      	ldr	r3, [pc, #324]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037be:	4b4f      	ldr	r3, [pc, #316]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 80037c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <HAL_RCC_OscConfig+0x166>
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	2b18      	cmp	r3, #24
 80037ce:	d156      	bne.n	800387e <HAL_RCC_OscConfig+0x20a>
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d151      	bne.n	800387e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037da:	4b48      	ldr	r3, [pc, #288]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <HAL_RCC_OscConfig+0x17e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e392      	b.n	8003f18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037f2:	4b42      	ldr	r3, [pc, #264]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f023 0219 	bic.w	r2, r3, #25
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	493f      	ldr	r1, [pc, #252]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 8003800:	4313      	orrs	r3, r2
 8003802:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fd fec6 	bl	8001594 <HAL_GetTick>
 8003808:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800380c:	f7fd fec2 	bl	8001594 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e37c      	b.n	8003f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800381e:	4b37      	ldr	r3, [pc, #220]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382a:	f7fd febf 	bl	80015ac <HAL_GetREVID>
 800382e:	4603      	mov	r3, r0
 8003830:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003834:	4293      	cmp	r3, r2
 8003836:	d817      	bhi.n	8003868 <HAL_RCC_OscConfig+0x1f4>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2b40      	cmp	r3, #64	@ 0x40
 800383e:	d108      	bne.n	8003852 <HAL_RCC_OscConfig+0x1de>
 8003840:	4b2e      	ldr	r3, [pc, #184]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003848:	4a2c      	ldr	r2, [pc, #176]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 800384a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800384e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003850:	e07a      	b.n	8003948 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003852:	4b2a      	ldr	r3, [pc, #168]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	031b      	lsls	r3, r3, #12
 8003860:	4926      	ldr	r1, [pc, #152]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003866:	e06f      	b.n	8003948 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003868:	4b24      	ldr	r3, [pc, #144]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	061b      	lsls	r3, r3, #24
 8003876:	4921      	ldr	r1, [pc, #132]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 8003878:	4313      	orrs	r3, r2
 800387a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800387c:	e064      	b.n	8003948 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d047      	beq.n	8003916 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003886:	4b1d      	ldr	r3, [pc, #116]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 0219 	bic.w	r2, r3, #25
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	491a      	ldr	r1, [pc, #104]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 8003894:	4313      	orrs	r3, r2
 8003896:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7fd fe7c 	bl	8001594 <HAL_GetTick>
 800389c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a0:	f7fd fe78 	bl	8001594 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e332      	b.n	8003f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038b2:	4b12      	ldr	r3, [pc, #72]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f0      	beq.n	80038a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038be:	f7fd fe75 	bl	80015ac <HAL_GetREVID>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d819      	bhi.n	8003900 <HAL_RCC_OscConfig+0x28c>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	2b40      	cmp	r3, #64	@ 0x40
 80038d2:	d108      	bne.n	80038e6 <HAL_RCC_OscConfig+0x272>
 80038d4:	4b09      	ldr	r3, [pc, #36]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80038dc:	4a07      	ldr	r2, [pc, #28]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 80038de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e2:	6053      	str	r3, [r2, #4]
 80038e4:	e030      	b.n	8003948 <HAL_RCC_OscConfig+0x2d4>
 80038e6:	4b05      	ldr	r3, [pc, #20]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	031b      	lsls	r3, r3, #12
 80038f4:	4901      	ldr	r1, [pc, #4]	@ (80038fc <HAL_RCC_OscConfig+0x288>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	604b      	str	r3, [r1, #4]
 80038fa:	e025      	b.n	8003948 <HAL_RCC_OscConfig+0x2d4>
 80038fc:	58024400 	.word	0x58024400
 8003900:	4b9a      	ldr	r3, [pc, #616]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	061b      	lsls	r3, r3, #24
 800390e:	4997      	ldr	r1, [pc, #604]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003910:	4313      	orrs	r3, r2
 8003912:	604b      	str	r3, [r1, #4]
 8003914:	e018      	b.n	8003948 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003916:	4b95      	ldr	r3, [pc, #596]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a94      	ldr	r2, [pc, #592]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 800391c:	f023 0301 	bic.w	r3, r3, #1
 8003920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003922:	f7fd fe37 	bl	8001594 <HAL_GetTick>
 8003926:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800392a:	f7fd fe33 	bl	8001594 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e2ed      	b.n	8003f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800393c:	4b8b      	ldr	r3, [pc, #556]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f0      	bne.n	800392a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80a9 	beq.w	8003aa8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003956:	4b85      	ldr	r3, [pc, #532]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800395e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003960:	4b82      	ldr	r3, [pc, #520]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003964:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	2b08      	cmp	r3, #8
 800396a:	d007      	beq.n	800397c <HAL_RCC_OscConfig+0x308>
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	2b18      	cmp	r3, #24
 8003970:	d13a      	bne.n	80039e8 <HAL_RCC_OscConfig+0x374>
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	2b01      	cmp	r3, #1
 800397a:	d135      	bne.n	80039e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800397c:	4b7b      	ldr	r3, [pc, #492]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_RCC_OscConfig+0x320>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	2b80      	cmp	r3, #128	@ 0x80
 800398e:	d001      	beq.n	8003994 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e2c1      	b.n	8003f18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003994:	f7fd fe0a 	bl	80015ac <HAL_GetREVID>
 8003998:	4603      	mov	r3, r0
 800399a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800399e:	4293      	cmp	r3, r2
 80039a0:	d817      	bhi.n	80039d2 <HAL_RCC_OscConfig+0x35e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d108      	bne.n	80039bc <HAL_RCC_OscConfig+0x348>
 80039aa:	4b70      	ldr	r3, [pc, #448]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80039b2:	4a6e      	ldr	r2, [pc, #440]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 80039b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80039b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039ba:	e075      	b.n	8003aa8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039bc:	4b6b      	ldr	r3, [pc, #428]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	069b      	lsls	r3, r3, #26
 80039ca:	4968      	ldr	r1, [pc, #416]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039d0:	e06a      	b.n	8003aa8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039d2:	4b66      	ldr	r3, [pc, #408]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	061b      	lsls	r3, r3, #24
 80039e0:	4962      	ldr	r1, [pc, #392]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039e6:	e05f      	b.n	8003aa8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d042      	beq.n	8003a76 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80039f0:	4b5e      	ldr	r3, [pc, #376]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a5d      	ldr	r2, [pc, #372]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 80039f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fd fdca 	bl	8001594 <HAL_GetTick>
 8003a00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a04:	f7fd fdc6 	bl	8001594 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e280      	b.n	8003f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a16:	4b55      	ldr	r3, [pc, #340]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a22:	f7fd fdc3 	bl	80015ac <HAL_GetREVID>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d817      	bhi.n	8003a60 <HAL_RCC_OscConfig+0x3ec>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d108      	bne.n	8003a4a <HAL_RCC_OscConfig+0x3d6>
 8003a38:	4b4c      	ldr	r3, [pc, #304]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003a40:	4a4a      	ldr	r2, [pc, #296]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003a42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a46:	6053      	str	r3, [r2, #4]
 8003a48:	e02e      	b.n	8003aa8 <HAL_RCC_OscConfig+0x434>
 8003a4a:	4b48      	ldr	r3, [pc, #288]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	069b      	lsls	r3, r3, #26
 8003a58:	4944      	ldr	r1, [pc, #272]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	604b      	str	r3, [r1, #4]
 8003a5e:	e023      	b.n	8003aa8 <HAL_RCC_OscConfig+0x434>
 8003a60:	4b42      	ldr	r3, [pc, #264]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	061b      	lsls	r3, r3, #24
 8003a6e:	493f      	ldr	r1, [pc, #252]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60cb      	str	r3, [r1, #12]
 8003a74:	e018      	b.n	8003aa8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a76:	4b3d      	ldr	r3, [pc, #244]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a3c      	ldr	r2, [pc, #240]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003a7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a82:	f7fd fd87 	bl	8001594 <HAL_GetTick>
 8003a86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a8a:	f7fd fd83 	bl	8001594 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e23d      	b.n	8003f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a9c:	4b33      	ldr	r3, [pc, #204]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f0      	bne.n	8003a8a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d036      	beq.n	8003b22 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d019      	beq.n	8003af0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003abc:	4b2b      	ldr	r3, [pc, #172]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac0:	4a2a      	ldr	r2, [pc, #168]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac8:	f7fd fd64 	bl	8001594 <HAL_GetTick>
 8003acc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad0:	f7fd fd60 	bl	8001594 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e21a      	b.n	8003f18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ae2:	4b22      	ldr	r3, [pc, #136]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x45c>
 8003aee:	e018      	b.n	8003b22 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af0:	4b1e      	ldr	r3, [pc, #120]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afc:	f7fd fd4a 	bl	8001594 <HAL_GetTick>
 8003b00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b04:	f7fd fd46 	bl	8001594 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e200      	b.n	8003f18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b16:	4b15      	ldr	r3, [pc, #84]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d039      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d01c      	beq.n	8003b70 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b36:	4b0d      	ldr	r3, [pc, #52]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003b3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b42:	f7fd fd27 	bl	8001594 <HAL_GetTick>
 8003b46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b4a:	f7fd fd23 	bl	8001594 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e1dd      	b.n	8003f18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b5c:	4b03      	ldr	r3, [pc, #12]	@ (8003b6c <HAL_RCC_OscConfig+0x4f8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x4d6>
 8003b68:	e01b      	b.n	8003ba2 <HAL_RCC_OscConfig+0x52e>
 8003b6a:	bf00      	nop
 8003b6c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b70:	4b9b      	ldr	r3, [pc, #620]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a9a      	ldr	r2, [pc, #616]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003b76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b7c:	f7fd fd0a 	bl	8001594 <HAL_GetTick>
 8003b80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b84:	f7fd fd06 	bl	8001594 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e1c0      	b.n	8003f18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b96:	4b92      	ldr	r3, [pc, #584]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 8081 	beq.w	8003cb2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bb0:	4b8c      	ldr	r3, [pc, #560]	@ (8003de4 <HAL_RCC_OscConfig+0x770>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a8b      	ldr	r2, [pc, #556]	@ (8003de4 <HAL_RCC_OscConfig+0x770>)
 8003bb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bbc:	f7fd fcea 	bl	8001594 <HAL_GetTick>
 8003bc0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc4:	f7fd fce6 	bl	8001594 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	@ 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e1a0      	b.n	8003f18 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bd6:	4b83      	ldr	r3, [pc, #524]	@ (8003de4 <HAL_RCC_OscConfig+0x770>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d106      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x584>
 8003bea:	4b7d      	ldr	r3, [pc, #500]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bee:	4a7c      	ldr	r2, [pc, #496]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf6:	e02d      	b.n	8003c54 <HAL_RCC_OscConfig+0x5e0>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10c      	bne.n	8003c1a <HAL_RCC_OscConfig+0x5a6>
 8003c00:	4b77      	ldr	r3, [pc, #476]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c04:	4a76      	ldr	r2, [pc, #472]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c0c:	4b74      	ldr	r3, [pc, #464]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c10:	4a73      	ldr	r2, [pc, #460]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003c12:	f023 0304 	bic.w	r3, r3, #4
 8003c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c18:	e01c      	b.n	8003c54 <HAL_RCC_OscConfig+0x5e0>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	2b05      	cmp	r3, #5
 8003c20:	d10c      	bne.n	8003c3c <HAL_RCC_OscConfig+0x5c8>
 8003c22:	4b6f      	ldr	r3, [pc, #444]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c26:	4a6e      	ldr	r2, [pc, #440]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003c28:	f043 0304 	orr.w	r3, r3, #4
 8003c2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c2e:	4b6c      	ldr	r3, [pc, #432]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c32:	4a6b      	ldr	r2, [pc, #428]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c3a:	e00b      	b.n	8003c54 <HAL_RCC_OscConfig+0x5e0>
 8003c3c:	4b68      	ldr	r3, [pc, #416]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c40:	4a67      	ldr	r2, [pc, #412]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003c42:	f023 0301 	bic.w	r3, r3, #1
 8003c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c48:	4b65      	ldr	r3, [pc, #404]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4c:	4a64      	ldr	r2, [pc, #400]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003c4e:	f023 0304 	bic.w	r3, r3, #4
 8003c52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d015      	beq.n	8003c88 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5c:	f7fd fc9a 	bl	8001594 <HAL_GetTick>
 8003c60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c62:	e00a      	b.n	8003c7a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c64:	f7fd fc96 	bl	8001594 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e14e      	b.n	8003f18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c7a:	4b59      	ldr	r3, [pc, #356]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0ee      	beq.n	8003c64 <HAL_RCC_OscConfig+0x5f0>
 8003c86:	e014      	b.n	8003cb2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c88:	f7fd fc84 	bl	8001594 <HAL_GetTick>
 8003c8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c90:	f7fd fc80 	bl	8001594 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e138      	b.n	8003f18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ca6:	4b4e      	ldr	r3, [pc, #312]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1ee      	bne.n	8003c90 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 812d 	beq.w	8003f16 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003cbc:	4b48      	ldr	r3, [pc, #288]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cc4:	2b18      	cmp	r3, #24
 8003cc6:	f000 80bd 	beq.w	8003e44 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	f040 809e 	bne.w	8003e10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd4:	4b42      	ldr	r3, [pc, #264]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a41      	ldr	r2, [pc, #260]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003cda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce0:	f7fd fc58 	bl	8001594 <HAL_GetTick>
 8003ce4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce8:	f7fd fc54 	bl	8001594 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e10e      	b.n	8003f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cfa:	4b39      	ldr	r3, [pc, #228]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d06:	4b36      	ldr	r3, [pc, #216]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003d08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d0a:	4b37      	ldr	r3, [pc, #220]	@ (8003de8 <HAL_RCC_OscConfig+0x774>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d16:	0112      	lsls	r2, r2, #4
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	4931      	ldr	r1, [pc, #196]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d24:	3b01      	subs	r3, #1
 8003d26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	025b      	lsls	r3, r3, #9
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	041b      	lsls	r3, r3, #16
 8003d3e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	061b      	lsls	r3, r3, #24
 8003d4c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003d50:	4923      	ldr	r1, [pc, #140]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003d56:	4b22      	ldr	r3, [pc, #136]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5a:	4a21      	ldr	r2, [pc, #132]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d62:	4b1f      	ldr	r3, [pc, #124]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003d64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d66:	4b21      	ldr	r3, [pc, #132]	@ (8003dec <HAL_RCC_OscConfig+0x778>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d6e:	00d2      	lsls	r2, r2, #3
 8003d70:	491b      	ldr	r1, [pc, #108]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d76:	4b1a      	ldr	r3, [pc, #104]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7a:	f023 020c 	bic.w	r2, r3, #12
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d82:	4917      	ldr	r1, [pc, #92]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d88:	4b15      	ldr	r3, [pc, #84]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8c:	f023 0202 	bic.w	r2, r3, #2
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d94:	4912      	ldr	r1, [pc, #72]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d9a:	4b11      	ldr	r3, [pc, #68]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9e:	4a10      	ldr	r2, [pc, #64]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003da4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da6:	4b0e      	ldr	r3, [pc, #56]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003daa:	4a0d      	ldr	r2, [pc, #52]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003db0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003db2:	4b0b      	ldr	r3, [pc, #44]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	4a0a      	ldr	r2, [pc, #40]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003db8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003dbe:	4b08      	ldr	r3, [pc, #32]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc2:	4a07      	ldr	r2, [pc, #28]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dca:	4b05      	ldr	r3, [pc, #20]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a04      	ldr	r2, [pc, #16]	@ (8003de0 <HAL_RCC_OscConfig+0x76c>)
 8003dd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd6:	f7fd fbdd 	bl	8001594 <HAL_GetTick>
 8003dda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ddc:	e011      	b.n	8003e02 <HAL_RCC_OscConfig+0x78e>
 8003dde:	bf00      	nop
 8003de0:	58024400 	.word	0x58024400
 8003de4:	58024800 	.word	0x58024800
 8003de8:	fffffc0c 	.word	0xfffffc0c
 8003dec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df0:	f7fd fbd0 	bl	8001594 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e08a      	b.n	8003f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e02:	4b47      	ldr	r3, [pc, #284]	@ (8003f20 <HAL_RCC_OscConfig+0x8ac>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f0      	beq.n	8003df0 <HAL_RCC_OscConfig+0x77c>
 8003e0e:	e082      	b.n	8003f16 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e10:	4b43      	ldr	r3, [pc, #268]	@ (8003f20 <HAL_RCC_OscConfig+0x8ac>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a42      	ldr	r2, [pc, #264]	@ (8003f20 <HAL_RCC_OscConfig+0x8ac>)
 8003e16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1c:	f7fd fbba 	bl	8001594 <HAL_GetTick>
 8003e20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e24:	f7fd fbb6 	bl	8001594 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e070      	b.n	8003f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e36:	4b3a      	ldr	r3, [pc, #232]	@ (8003f20 <HAL_RCC_OscConfig+0x8ac>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x7b0>
 8003e42:	e068      	b.n	8003f16 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e44:	4b36      	ldr	r3, [pc, #216]	@ (8003f20 <HAL_RCC_OscConfig+0x8ac>)
 8003e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e4a:	4b35      	ldr	r3, [pc, #212]	@ (8003f20 <HAL_RCC_OscConfig+0x8ac>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d031      	beq.n	8003ebc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f003 0203 	and.w	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d12a      	bne.n	8003ebc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	091b      	lsrs	r3, r3, #4
 8003e6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d122      	bne.n	8003ebc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e80:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d11a      	bne.n	8003ebc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	0a5b      	lsrs	r3, r3, #9
 8003e8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e92:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d111      	bne.n	8003ebc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	0c1b      	lsrs	r3, r3, #16
 8003e9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d108      	bne.n	8003ebc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	0e1b      	lsrs	r3, r3, #24
 8003eae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e02b      	b.n	8003f18 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003ec0:	4b17      	ldr	r3, [pc, #92]	@ (8003f20 <HAL_RCC_OscConfig+0x8ac>)
 8003ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec4:	08db      	lsrs	r3, r3, #3
 8003ec6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003eca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d01f      	beq.n	8003f16 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003ed6:	4b12      	ldr	r3, [pc, #72]	@ (8003f20 <HAL_RCC_OscConfig+0x8ac>)
 8003ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eda:	4a11      	ldr	r2, [pc, #68]	@ (8003f20 <HAL_RCC_OscConfig+0x8ac>)
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ee2:	f7fd fb57 	bl	8001594 <HAL_GetTick>
 8003ee6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003ee8:	bf00      	nop
 8003eea:	f7fd fb53 	bl	8001594 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d0f9      	beq.n	8003eea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8003f20 <HAL_RCC_OscConfig+0x8ac>)
 8003ef8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003efa:	4b0a      	ldr	r3, [pc, #40]	@ (8003f24 <HAL_RCC_OscConfig+0x8b0>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f02:	00d2      	lsls	r2, r2, #3
 8003f04:	4906      	ldr	r1, [pc, #24]	@ (8003f20 <HAL_RCC_OscConfig+0x8ac>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003f0a:	4b05      	ldr	r3, [pc, #20]	@ (8003f20 <HAL_RCC_OscConfig+0x8ac>)
 8003f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0e:	4a04      	ldr	r2, [pc, #16]	@ (8003f20 <HAL_RCC_OscConfig+0x8ac>)
 8003f10:	f043 0301 	orr.w	r3, r3, #1
 8003f14:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3730      	adds	r7, #48	@ 0x30
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	58024400 	.word	0x58024400
 8003f24:	ffff0007 	.word	0xffff0007

08003f28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e19c      	b.n	8004276 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f3c:	4b8a      	ldr	r3, [pc, #552]	@ (8004168 <HAL_RCC_ClockConfig+0x240>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 030f 	and.w	r3, r3, #15
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d910      	bls.n	8003f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4a:	4b87      	ldr	r3, [pc, #540]	@ (8004168 <HAL_RCC_ClockConfig+0x240>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 020f 	bic.w	r2, r3, #15
 8003f52:	4985      	ldr	r1, [pc, #532]	@ (8004168 <HAL_RCC_ClockConfig+0x240>)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5a:	4b83      	ldr	r3, [pc, #524]	@ (8004168 <HAL_RCC_ClockConfig+0x240>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d001      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e184      	b.n	8004276 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d010      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	4b7b      	ldr	r3, [pc, #492]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d908      	bls.n	8003f9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f88:	4b78      	ldr	r3, [pc, #480]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	4975      	ldr	r1, [pc, #468]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d010      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695a      	ldr	r2, [r3, #20]
 8003faa:	4b70      	ldr	r3, [pc, #448]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d908      	bls.n	8003fc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003fb6:	4b6d      	ldr	r3, [pc, #436]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	496a      	ldr	r1, [pc, #424]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d010      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699a      	ldr	r2, [r3, #24]
 8003fd8:	4b64      	ldr	r3, [pc, #400]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d908      	bls.n	8003ff6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003fe4:	4b61      	ldr	r3, [pc, #388]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	495e      	ldr	r1, [pc, #376]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d010      	beq.n	8004024 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69da      	ldr	r2, [r3, #28]
 8004006:	4b59      	ldr	r3, [pc, #356]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800400e:	429a      	cmp	r2, r3
 8004010:	d908      	bls.n	8004024 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004012:	4b56      	ldr	r3, [pc, #344]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	4953      	ldr	r1, [pc, #332]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 8004020:	4313      	orrs	r3, r2
 8004022:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d010      	beq.n	8004052 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	4b4d      	ldr	r3, [pc, #308]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	429a      	cmp	r2, r3
 800403e:	d908      	bls.n	8004052 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004040:	4b4a      	ldr	r3, [pc, #296]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	f023 020f 	bic.w	r2, r3, #15
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4947      	ldr	r1, [pc, #284]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 800404e:	4313      	orrs	r3, r2
 8004050:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d055      	beq.n	800410a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800405e:	4b43      	ldr	r3, [pc, #268]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	4940      	ldr	r1, [pc, #256]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 800406c:	4313      	orrs	r3, r2
 800406e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d107      	bne.n	8004088 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004078:	4b3c      	ldr	r3, [pc, #240]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d121      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0f6      	b.n	8004276 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b03      	cmp	r3, #3
 800408e:	d107      	bne.n	80040a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004090:	4b36      	ldr	r3, [pc, #216]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d115      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0ea      	b.n	8004276 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d107      	bne.n	80040b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040a8:	4b30      	ldr	r3, [pc, #192]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d109      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0de      	b.n	8004276 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040b8:	4b2c      	ldr	r3, [pc, #176]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0d6      	b.n	8004276 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040c8:	4b28      	ldr	r3, [pc, #160]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f023 0207 	bic.w	r2, r3, #7
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	4925      	ldr	r1, [pc, #148]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040da:	f7fd fa5b 	bl	8001594 <HAL_GetTick>
 80040de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e0:	e00a      	b.n	80040f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e2:	f7fd fa57 	bl	8001594 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e0be      	b.n	8004276 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f8:	4b1c      	ldr	r3, [pc, #112]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	429a      	cmp	r2, r3
 8004108:	d1eb      	bne.n	80040e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d010      	beq.n	8004138 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	4b14      	ldr	r3, [pc, #80]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	429a      	cmp	r2, r3
 8004124:	d208      	bcs.n	8004138 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004126:	4b11      	ldr	r3, [pc, #68]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	f023 020f 	bic.w	r2, r3, #15
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	490e      	ldr	r1, [pc, #56]	@ (800416c <HAL_RCC_ClockConfig+0x244>)
 8004134:	4313      	orrs	r3, r2
 8004136:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004138:	4b0b      	ldr	r3, [pc, #44]	@ (8004168 <HAL_RCC_ClockConfig+0x240>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 030f 	and.w	r3, r3, #15
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d214      	bcs.n	8004170 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004146:	4b08      	ldr	r3, [pc, #32]	@ (8004168 <HAL_RCC_ClockConfig+0x240>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f023 020f 	bic.w	r2, r3, #15
 800414e:	4906      	ldr	r1, [pc, #24]	@ (8004168 <HAL_RCC_ClockConfig+0x240>)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	4313      	orrs	r3, r2
 8004154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004156:	4b04      	ldr	r3, [pc, #16]	@ (8004168 <HAL_RCC_ClockConfig+0x240>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d005      	beq.n	8004170 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e086      	b.n	8004276 <HAL_RCC_ClockConfig+0x34e>
 8004168:	52002000 	.word	0x52002000
 800416c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d010      	beq.n	800419e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	4b3f      	ldr	r3, [pc, #252]	@ (8004280 <HAL_RCC_ClockConfig+0x358>)
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004188:	429a      	cmp	r2, r3
 800418a:	d208      	bcs.n	800419e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800418c:	4b3c      	ldr	r3, [pc, #240]	@ (8004280 <HAL_RCC_ClockConfig+0x358>)
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	4939      	ldr	r1, [pc, #228]	@ (8004280 <HAL_RCC_ClockConfig+0x358>)
 800419a:	4313      	orrs	r3, r2
 800419c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d010      	beq.n	80041cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695a      	ldr	r2, [r3, #20]
 80041ae:	4b34      	ldr	r3, [pc, #208]	@ (8004280 <HAL_RCC_ClockConfig+0x358>)
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d208      	bcs.n	80041cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041ba:	4b31      	ldr	r3, [pc, #196]	@ (8004280 <HAL_RCC_ClockConfig+0x358>)
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	492e      	ldr	r1, [pc, #184]	@ (8004280 <HAL_RCC_ClockConfig+0x358>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0310 	and.w	r3, r3, #16
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d010      	beq.n	80041fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699a      	ldr	r2, [r3, #24]
 80041dc:	4b28      	ldr	r3, [pc, #160]	@ (8004280 <HAL_RCC_ClockConfig+0x358>)
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d208      	bcs.n	80041fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041e8:	4b25      	ldr	r3, [pc, #148]	@ (8004280 <HAL_RCC_ClockConfig+0x358>)
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	4922      	ldr	r1, [pc, #136]	@ (8004280 <HAL_RCC_ClockConfig+0x358>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b00      	cmp	r3, #0
 8004204:	d010      	beq.n	8004228 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69da      	ldr	r2, [r3, #28]
 800420a:	4b1d      	ldr	r3, [pc, #116]	@ (8004280 <HAL_RCC_ClockConfig+0x358>)
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004212:	429a      	cmp	r2, r3
 8004214:	d208      	bcs.n	8004228 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004216:	4b1a      	ldr	r3, [pc, #104]	@ (8004280 <HAL_RCC_ClockConfig+0x358>)
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	4917      	ldr	r1, [pc, #92]	@ (8004280 <HAL_RCC_ClockConfig+0x358>)
 8004224:	4313      	orrs	r3, r2
 8004226:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004228:	f000 f834 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 800422c:	4602      	mov	r2, r0
 800422e:	4b14      	ldr	r3, [pc, #80]	@ (8004280 <HAL_RCC_ClockConfig+0x358>)
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	0a1b      	lsrs	r3, r3, #8
 8004234:	f003 030f 	and.w	r3, r3, #15
 8004238:	4912      	ldr	r1, [pc, #72]	@ (8004284 <HAL_RCC_ClockConfig+0x35c>)
 800423a:	5ccb      	ldrb	r3, [r1, r3]
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
 8004244:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004246:	4b0e      	ldr	r3, [pc, #56]	@ (8004280 <HAL_RCC_ClockConfig+0x358>)
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	4a0d      	ldr	r2, [pc, #52]	@ (8004284 <HAL_RCC_ClockConfig+0x35c>)
 8004250:	5cd3      	ldrb	r3, [r2, r3]
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	fa22 f303 	lsr.w	r3, r2, r3
 800425c:	4a0a      	ldr	r2, [pc, #40]	@ (8004288 <HAL_RCC_ClockConfig+0x360>)
 800425e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004260:	4a0a      	ldr	r2, [pc, #40]	@ (800428c <HAL_RCC_ClockConfig+0x364>)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004266:	4b0a      	ldr	r3, [pc, #40]	@ (8004290 <HAL_RCC_ClockConfig+0x368>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7fd f948 	bl	8001500 <HAL_InitTick>
 8004270:	4603      	mov	r3, r0
 8004272:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004274:	7bfb      	ldrb	r3, [r7, #15]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	58024400 	.word	0x58024400
 8004284:	0800857c 	.word	0x0800857c
 8004288:	24000008 	.word	0x24000008
 800428c:	24000004 	.word	0x24000004
 8004290:	2400000c 	.word	0x2400000c

08004294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004294:	b480      	push	{r7}
 8004296:	b089      	sub	sp, #36	@ 0x24
 8004298:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800429a:	4bb3      	ldr	r3, [pc, #716]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042a2:	2b18      	cmp	r3, #24
 80042a4:	f200 8155 	bhi.w	8004552 <HAL_RCC_GetSysClockFreq+0x2be>
 80042a8:	a201      	add	r2, pc, #4	@ (adr r2, 80042b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80042aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ae:	bf00      	nop
 80042b0:	08004315 	.word	0x08004315
 80042b4:	08004553 	.word	0x08004553
 80042b8:	08004553 	.word	0x08004553
 80042bc:	08004553 	.word	0x08004553
 80042c0:	08004553 	.word	0x08004553
 80042c4:	08004553 	.word	0x08004553
 80042c8:	08004553 	.word	0x08004553
 80042cc:	08004553 	.word	0x08004553
 80042d0:	0800433b 	.word	0x0800433b
 80042d4:	08004553 	.word	0x08004553
 80042d8:	08004553 	.word	0x08004553
 80042dc:	08004553 	.word	0x08004553
 80042e0:	08004553 	.word	0x08004553
 80042e4:	08004553 	.word	0x08004553
 80042e8:	08004553 	.word	0x08004553
 80042ec:	08004553 	.word	0x08004553
 80042f0:	08004341 	.word	0x08004341
 80042f4:	08004553 	.word	0x08004553
 80042f8:	08004553 	.word	0x08004553
 80042fc:	08004553 	.word	0x08004553
 8004300:	08004553 	.word	0x08004553
 8004304:	08004553 	.word	0x08004553
 8004308:	08004553 	.word	0x08004553
 800430c:	08004553 	.word	0x08004553
 8004310:	08004347 	.word	0x08004347
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004314:	4b94      	ldr	r3, [pc, #592]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0320 	and.w	r3, r3, #32
 800431c:	2b00      	cmp	r3, #0
 800431e:	d009      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004320:	4b91      	ldr	r3, [pc, #580]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	08db      	lsrs	r3, r3, #3
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	4a90      	ldr	r2, [pc, #576]	@ (800456c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800432c:	fa22 f303 	lsr.w	r3, r2, r3
 8004330:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004332:	e111      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004334:	4b8d      	ldr	r3, [pc, #564]	@ (800456c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004336:	61bb      	str	r3, [r7, #24]
      break;
 8004338:	e10e      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800433a:	4b8d      	ldr	r3, [pc, #564]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800433c:	61bb      	str	r3, [r7, #24]
      break;
 800433e:	e10b      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004340:	4b8c      	ldr	r3, [pc, #560]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004342:	61bb      	str	r3, [r7, #24]
      break;
 8004344:	e108      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004346:	4b88      	ldr	r3, [pc, #544]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004350:	4b85      	ldr	r3, [pc, #532]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800435a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800435c:	4b82      	ldr	r3, [pc, #520]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800435e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004366:	4b80      	ldr	r3, [pc, #512]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800436a:	08db      	lsrs	r3, r3, #3
 800436c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	fb02 f303 	mul.w	r3, r2, r3
 8004376:	ee07 3a90 	vmov	s15, r3
 800437a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80e1 	beq.w	800454c <HAL_RCC_GetSysClockFreq+0x2b8>
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b02      	cmp	r3, #2
 800438e:	f000 8083 	beq.w	8004498 <HAL_RCC_GetSysClockFreq+0x204>
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b02      	cmp	r3, #2
 8004396:	f200 80a1 	bhi.w	80044dc <HAL_RCC_GetSysClockFreq+0x248>
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_RCC_GetSysClockFreq+0x114>
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d056      	beq.n	8004454 <HAL_RCC_GetSysClockFreq+0x1c0>
 80043a6:	e099      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d02d      	beq.n	8004410 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043b4:	4b6c      	ldr	r3, [pc, #432]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	08db      	lsrs	r3, r3, #3
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	4a6b      	ldr	r2, [pc, #428]	@ (800456c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043c0:	fa22 f303 	lsr.w	r3, r2, r3
 80043c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	ee07 3a90 	vmov	s15, r3
 80043cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043de:	4b62      	ldr	r3, [pc, #392]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e6:	ee07 3a90 	vmov	s15, r3
 80043ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80043f2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004578 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800440e:	e087      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800457c <HAL_RCC_GetSysClockFreq+0x2e8>
 800441e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004422:	4b51      	ldr	r3, [pc, #324]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004432:	ed97 6a02 	vldr	s12, [r7, #8]
 8004436:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004578 <HAL_RCC_GetSysClockFreq+0x2e4>
 800443a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800443e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800444a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004452:	e065      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	ee07 3a90 	vmov	s15, r3
 800445a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004580 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004466:	4b40      	ldr	r3, [pc, #256]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004476:	ed97 6a02 	vldr	s12, [r7, #8]
 800447a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004578 <HAL_RCC_GetSysClockFreq+0x2e4>
 800447e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800448a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800448e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004492:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004496:	e043      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004584 <HAL_RCC_GetSysClockFreq+0x2f0>
 80044a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80044be:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004578 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044da:	e021      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004580 <HAL_RCC_GetSysClockFreq+0x2ec>
 80044ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004502:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004578 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800450a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800450e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800451a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800451e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004520:	4b11      	ldr	r3, [pc, #68]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004524:	0a5b      	lsrs	r3, r3, #9
 8004526:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800452a:	3301      	adds	r3, #1
 800452c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	ee07 3a90 	vmov	s15, r3
 8004534:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004538:	edd7 6a07 	vldr	s13, [r7, #28]
 800453c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004544:	ee17 3a90 	vmov	r3, s15
 8004548:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800454a:	e005      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	61bb      	str	r3, [r7, #24]
      break;
 8004550:	e002      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004552:	4b07      	ldr	r3, [pc, #28]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004554:	61bb      	str	r3, [r7, #24]
      break;
 8004556:	bf00      	nop
  }

  return sysclockfreq;
 8004558:	69bb      	ldr	r3, [r7, #24]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3724      	adds	r7, #36	@ 0x24
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	58024400 	.word	0x58024400
 800456c:	03d09000 	.word	0x03d09000
 8004570:	003d0900 	.word	0x003d0900
 8004574:	007a1200 	.word	0x007a1200
 8004578:	46000000 	.word	0x46000000
 800457c:	4c742400 	.word	0x4c742400
 8004580:	4a742400 	.word	0x4a742400
 8004584:	4af42400 	.word	0x4af42400

08004588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800458e:	f7ff fe81 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 8004592:	4602      	mov	r2, r0
 8004594:	4b10      	ldr	r3, [pc, #64]	@ (80045d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	0a1b      	lsrs	r3, r3, #8
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	490f      	ldr	r1, [pc, #60]	@ (80045dc <HAL_RCC_GetHCLKFreq+0x54>)
 80045a0:	5ccb      	ldrb	r3, [r1, r3]
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	fa22 f303 	lsr.w	r3, r2, r3
 80045aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045ac:	4b0a      	ldr	r3, [pc, #40]	@ (80045d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	4a09      	ldr	r2, [pc, #36]	@ (80045dc <HAL_RCC_GetHCLKFreq+0x54>)
 80045b6:	5cd3      	ldrb	r3, [r2, r3]
 80045b8:	f003 031f 	and.w	r3, r3, #31
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	fa22 f303 	lsr.w	r3, r2, r3
 80045c2:	4a07      	ldr	r2, [pc, #28]	@ (80045e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80045c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045c6:	4a07      	ldr	r2, [pc, #28]	@ (80045e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80045cc:	4b04      	ldr	r3, [pc, #16]	@ (80045e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80045ce:	681b      	ldr	r3, [r3, #0]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	58024400 	.word	0x58024400
 80045dc:	0800857c 	.word	0x0800857c
 80045e0:	24000008 	.word	0x24000008
 80045e4:	24000004 	.word	0x24000004

080045e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80045ec:	f7ff ffcc 	bl	8004588 <HAL_RCC_GetHCLKFreq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b06      	ldr	r3, [pc, #24]	@ (800460c <HAL_RCC_GetPCLK1Freq+0x24>)
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	091b      	lsrs	r3, r3, #4
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	4904      	ldr	r1, [pc, #16]	@ (8004610 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045fe:	5ccb      	ldrb	r3, [r1, r3]
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004608:	4618      	mov	r0, r3
 800460a:	bd80      	pop	{r7, pc}
 800460c:	58024400 	.word	0x58024400
 8004610:	0800857c 	.word	0x0800857c

08004614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004618:	f7ff ffb6 	bl	8004588 <HAL_RCC_GetHCLKFreq>
 800461c:	4602      	mov	r2, r0
 800461e:	4b06      	ldr	r3, [pc, #24]	@ (8004638 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	0a1b      	lsrs	r3, r3, #8
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	4904      	ldr	r1, [pc, #16]	@ (800463c <HAL_RCC_GetPCLK2Freq+0x28>)
 800462a:	5ccb      	ldrb	r3, [r1, r3]
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004634:	4618      	mov	r0, r3
 8004636:	bd80      	pop	{r7, pc}
 8004638:	58024400 	.word	0x58024400
 800463c:	0800857c 	.word	0x0800857c

08004640 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004644:	b0ca      	sub	sp, #296	@ 0x128
 8004646:	af00      	add	r7, sp, #0
 8004648:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800464c:	2300      	movs	r3, #0
 800464e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004652:	2300      	movs	r3, #0
 8004654:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004664:	2500      	movs	r5, #0
 8004666:	ea54 0305 	orrs.w	r3, r4, r5
 800466a:	d049      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800466c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004670:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004672:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004676:	d02f      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004678:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800467c:	d828      	bhi.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800467e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004682:	d01a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004684:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004688:	d822      	bhi.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800468e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004692:	d007      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004694:	e01c      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004696:	4bb8      	ldr	r3, [pc, #736]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469a:	4ab7      	ldr	r2, [pc, #732]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800469c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046a2:	e01a      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a8:	3308      	adds	r3, #8
 80046aa:	2102      	movs	r1, #2
 80046ac:	4618      	mov	r0, r3
 80046ae:	f002 fb61 	bl	8006d74 <RCCEx_PLL2_Config>
 80046b2:	4603      	mov	r3, r0
 80046b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046b8:	e00f      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046be:	3328      	adds	r3, #40	@ 0x28
 80046c0:	2102      	movs	r1, #2
 80046c2:	4618      	mov	r0, r3
 80046c4:	f002 fc08 	bl	8006ed8 <RCCEx_PLL3_Config>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046ce:	e004      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046d6:	e000      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80046d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10a      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80046e2:	4ba5      	ldr	r3, [pc, #660]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046f0:	4aa1      	ldr	r2, [pc, #644]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046f2:	430b      	orrs	r3, r1
 80046f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80046f6:	e003      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800470c:	f04f 0900 	mov.w	r9, #0
 8004710:	ea58 0309 	orrs.w	r3, r8, r9
 8004714:	d047      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800471c:	2b04      	cmp	r3, #4
 800471e:	d82a      	bhi.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004720:	a201      	add	r2, pc, #4	@ (adr r2, 8004728 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004726:	bf00      	nop
 8004728:	0800473d 	.word	0x0800473d
 800472c:	0800474b 	.word	0x0800474b
 8004730:	08004761 	.word	0x08004761
 8004734:	0800477f 	.word	0x0800477f
 8004738:	0800477f 	.word	0x0800477f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800473c:	4b8e      	ldr	r3, [pc, #568]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800473e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004740:	4a8d      	ldr	r2, [pc, #564]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004742:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004746:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004748:	e01a      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800474a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474e:	3308      	adds	r3, #8
 8004750:	2100      	movs	r1, #0
 8004752:	4618      	mov	r0, r3
 8004754:	f002 fb0e 	bl	8006d74 <RCCEx_PLL2_Config>
 8004758:	4603      	mov	r3, r0
 800475a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800475e:	e00f      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004764:	3328      	adds	r3, #40	@ 0x28
 8004766:	2100      	movs	r1, #0
 8004768:	4618      	mov	r0, r3
 800476a:	f002 fbb5 	bl	8006ed8 <RCCEx_PLL3_Config>
 800476e:	4603      	mov	r3, r0
 8004770:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004774:	e004      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800477c:	e000      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800477e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004788:	4b7b      	ldr	r3, [pc, #492]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800478a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800478c:	f023 0107 	bic.w	r1, r3, #7
 8004790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004796:	4a78      	ldr	r2, [pc, #480]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004798:	430b      	orrs	r3, r1
 800479a:	6513      	str	r3, [r2, #80]	@ 0x50
 800479c:	e003      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80047a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80047b2:	f04f 0b00 	mov.w	fp, #0
 80047b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80047ba:	d04c      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80047bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047c6:	d030      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80047c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047cc:	d829      	bhi.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80047d0:	d02d      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80047d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80047d4:	d825      	bhi.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047d6:	2b80      	cmp	r3, #128	@ 0x80
 80047d8:	d018      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80047da:	2b80      	cmp	r3, #128	@ 0x80
 80047dc:	d821      	bhi.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80047e2:	2b40      	cmp	r3, #64	@ 0x40
 80047e4:	d007      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80047e6:	e01c      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e8:	4b63      	ldr	r3, [pc, #396]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ec:	4a62      	ldr	r2, [pc, #392]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047f4:	e01c      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fa:	3308      	adds	r3, #8
 80047fc:	2100      	movs	r1, #0
 80047fe:	4618      	mov	r0, r3
 8004800:	f002 fab8 	bl	8006d74 <RCCEx_PLL2_Config>
 8004804:	4603      	mov	r3, r0
 8004806:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800480a:	e011      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800480c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004810:	3328      	adds	r3, #40	@ 0x28
 8004812:	2100      	movs	r1, #0
 8004814:	4618      	mov	r0, r3
 8004816:	f002 fb5f 	bl	8006ed8 <RCCEx_PLL3_Config>
 800481a:	4603      	mov	r3, r0
 800481c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004820:	e006      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004828:	e002      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800482a:	bf00      	nop
 800482c:	e000      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800482e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004838:	4b4f      	ldr	r3, [pc, #316]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800483a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800483c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004846:	4a4c      	ldr	r2, [pc, #304]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004848:	430b      	orrs	r3, r1
 800484a:	6513      	str	r3, [r2, #80]	@ 0x50
 800484c:	e003      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004862:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004866:	2300      	movs	r3, #0
 8004868:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800486c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004870:	460b      	mov	r3, r1
 8004872:	4313      	orrs	r3, r2
 8004874:	d053      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800487e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004882:	d035      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004884:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004888:	d82e      	bhi.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800488a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800488e:	d031      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004890:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004894:	d828      	bhi.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004896:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800489a:	d01a      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800489c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048a0:	d822      	bhi.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80048a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048aa:	d007      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80048ac:	e01c      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ae:	4b32      	ldr	r3, [pc, #200]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b2:	4a31      	ldr	r2, [pc, #196]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048ba:	e01c      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c0:	3308      	adds	r3, #8
 80048c2:	2100      	movs	r1, #0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f002 fa55 	bl	8006d74 <RCCEx_PLL2_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80048d0:	e011      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d6:	3328      	adds	r3, #40	@ 0x28
 80048d8:	2100      	movs	r1, #0
 80048da:	4618      	mov	r0, r3
 80048dc:	f002 fafc 	bl	8006ed8 <RCCEx_PLL3_Config>
 80048e0:	4603      	mov	r3, r0
 80048e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048e6:	e006      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048ee:	e002      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80048f0:	bf00      	nop
 80048f2:	e000      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80048f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10b      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80048fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004902:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800490e:	4a1a      	ldr	r2, [pc, #104]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004910:	430b      	orrs	r3, r1
 8004912:	6593      	str	r3, [r2, #88]	@ 0x58
 8004914:	e003      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800491a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004926:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800492a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800492e:	2300      	movs	r3, #0
 8004930:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004934:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004938:	460b      	mov	r3, r1
 800493a:	4313      	orrs	r3, r2
 800493c:	d056      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800493e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004942:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004946:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800494a:	d038      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800494c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004950:	d831      	bhi.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004952:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004956:	d034      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004958:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800495c:	d82b      	bhi.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800495e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004962:	d01d      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004964:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004968:	d825      	bhi.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800496a:	2b00      	cmp	r3, #0
 800496c:	d006      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800496e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004972:	d00a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004974:	e01f      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004976:	bf00      	nop
 8004978:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800497c:	4ba2      	ldr	r3, [pc, #648]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004980:	4aa1      	ldr	r2, [pc, #644]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004988:	e01c      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800498a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498e:	3308      	adds	r3, #8
 8004990:	2100      	movs	r1, #0
 8004992:	4618      	mov	r0, r3
 8004994:	f002 f9ee 	bl	8006d74 <RCCEx_PLL2_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800499e:	e011      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a4:	3328      	adds	r3, #40	@ 0x28
 80049a6:	2100      	movs	r1, #0
 80049a8:	4618      	mov	r0, r3
 80049aa:	f002 fa95 	bl	8006ed8 <RCCEx_PLL3_Config>
 80049ae:	4603      	mov	r3, r0
 80049b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049b4:	e006      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049bc:	e002      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80049be:	bf00      	nop
 80049c0:	e000      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80049c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10b      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80049cc:	4b8e      	ldr	r3, [pc, #568]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80049d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80049dc:	4a8a      	ldr	r2, [pc, #552]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049de:	430b      	orrs	r3, r1
 80049e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80049e2:	e003      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80049f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80049fc:	2300      	movs	r3, #0
 80049fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004a02:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004a06:	460b      	mov	r3, r1
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	d03a      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a12:	2b30      	cmp	r3, #48	@ 0x30
 8004a14:	d01f      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004a16:	2b30      	cmp	r3, #48	@ 0x30
 8004a18:	d819      	bhi.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004a1a:	2b20      	cmp	r3, #32
 8004a1c:	d00c      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d815      	bhi.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d019      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004a26:	2b10      	cmp	r3, #16
 8004a28:	d111      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a2a:	4b77      	ldr	r3, [pc, #476]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2e:	4a76      	ldr	r2, [pc, #472]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a36:	e011      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3c:	3308      	adds	r3, #8
 8004a3e:	2102      	movs	r1, #2
 8004a40:	4618      	mov	r0, r3
 8004a42:	f002 f997 	bl	8006d74 <RCCEx_PLL2_Config>
 8004a46:	4603      	mov	r3, r0
 8004a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a4c:	e006      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a54:	e002      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a56:	bf00      	nop
 8004a58:	e000      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a64:	4b68      	ldr	r3, [pc, #416]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a68:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a72:	4a65      	ldr	r2, [pc, #404]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a74:	430b      	orrs	r3, r1
 8004a76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a78:	e003      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004a8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004a92:	2300      	movs	r3, #0
 8004a94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004a98:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	d051      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004aac:	d035      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004aae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ab2:	d82e      	bhi.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ab4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ab8:	d031      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004aba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004abe:	d828      	bhi.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ac4:	d01a      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aca:	d822      	bhi.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ad4:	d007      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004ad6:	e01c      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad8:	4b4b      	ldr	r3, [pc, #300]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004adc:	4a4a      	ldr	r2, [pc, #296]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ae4:	e01c      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aea:	3308      	adds	r3, #8
 8004aec:	2100      	movs	r1, #0
 8004aee:	4618      	mov	r0, r3
 8004af0:	f002 f940 	bl	8006d74 <RCCEx_PLL2_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004afa:	e011      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b00:	3328      	adds	r3, #40	@ 0x28
 8004b02:	2100      	movs	r1, #0
 8004b04:	4618      	mov	r0, r3
 8004b06:	f002 f9e7 	bl	8006ed8 <RCCEx_PLL3_Config>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b10:	e006      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b18:	e002      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004b1a:	bf00      	nop
 8004b1c:	e000      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004b1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10a      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004b28:	4b37      	ldr	r3, [pc, #220]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b2c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b36:	4a34      	ldr	r2, [pc, #208]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b3c:	e003      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004b52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b56:	2300      	movs	r3, #0
 8004b58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004b5c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004b60:	460b      	mov	r3, r1
 8004b62:	4313      	orrs	r3, r2
 8004b64:	d056      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b70:	d033      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004b72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b76:	d82c      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b7c:	d02f      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004b7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b82:	d826      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b88:	d02b      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004b8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b8e:	d820      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b94:	d012      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004b96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b9a:	d81a      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d022      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ba4:	d115      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004baa:	3308      	adds	r3, #8
 8004bac:	2101      	movs	r1, #1
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f002 f8e0 	bl	8006d74 <RCCEx_PLL2_Config>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004bba:	e015      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc0:	3328      	adds	r3, #40	@ 0x28
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f002 f987 	bl	8006ed8 <RCCEx_PLL3_Config>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004bd0:	e00a      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bd8:	e006      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bda:	bf00      	nop
 8004bdc:	e004      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bde:	bf00      	nop
 8004be0:	e002      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004be2:	bf00      	nop
 8004be4:	e000      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004be6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10d      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004bf0:	4b05      	ldr	r3, [pc, #20]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bfe:	4a02      	ldr	r2, [pc, #8]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c00:	430b      	orrs	r3, r1
 8004c02:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c04:	e006      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004c06:	bf00      	nop
 8004c08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004c20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c24:	2300      	movs	r3, #0
 8004c26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c2a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4313      	orrs	r3, r2
 8004c32:	d055      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c40:	d033      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c46:	d82c      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c4c:	d02f      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c52:	d826      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c58:	d02b      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004c5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c5e:	d820      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c64:	d012      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004c66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c6a:	d81a      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d022      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004c70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c74:	d115      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f002 f878 	bl	8006d74 <RCCEx_PLL2_Config>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c8a:	e015      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c90:	3328      	adds	r3, #40	@ 0x28
 8004c92:	2101      	movs	r1, #1
 8004c94:	4618      	mov	r0, r3
 8004c96:	f002 f91f 	bl	8006ed8 <RCCEx_PLL3_Config>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ca0:	e00a      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ca8:	e006      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004caa:	bf00      	nop
 8004cac:	e004      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cae:	bf00      	nop
 8004cb0:	e002      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cb2:	bf00      	nop
 8004cb4:	e000      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10b      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004cc0:	4ba3      	ldr	r3, [pc, #652]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ccc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004cd0:	4a9f      	ldr	r2, [pc, #636]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cd2:	430b      	orrs	r3, r1
 8004cd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cd6:	e003      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004cec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004cf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	d037      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d0a:	d00e      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004d0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d10:	d816      	bhi.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d018      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004d16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d1a:	d111      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d1c:	4b8c      	ldr	r3, [pc, #560]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d20:	4a8b      	ldr	r2, [pc, #556]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d28:	e00f      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2e:	3308      	adds	r3, #8
 8004d30:	2101      	movs	r1, #1
 8004d32:	4618      	mov	r0, r3
 8004d34:	f002 f81e 	bl	8006d74 <RCCEx_PLL2_Config>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d3e:	e004      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d46:	e000      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10a      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d52:	4b7f      	ldr	r3, [pc, #508]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d56:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d60:	4a7b      	ldr	r2, [pc, #492]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d62:	430b      	orrs	r3, r1
 8004d64:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d66:	e003      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d80:	2300      	movs	r3, #0
 8004d82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004d86:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	d039      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d81c      	bhi.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004da0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da0:	08004ddd 	.word	0x08004ddd
 8004da4:	08004db1 	.word	0x08004db1
 8004da8:	08004dbf 	.word	0x08004dbf
 8004dac:	08004ddd 	.word	0x08004ddd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db0:	4b67      	ldr	r3, [pc, #412]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db4:	4a66      	ldr	r2, [pc, #408]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004dbc:	e00f      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc2:	3308      	adds	r3, #8
 8004dc4:	2102      	movs	r1, #2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f001 ffd4 	bl	8006d74 <RCCEx_PLL2_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004dd2:	e004      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dda:	e000      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10a      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004de6:	4b5a      	ldr	r3, [pc, #360]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dea:	f023 0103 	bic.w	r1, r3, #3
 8004dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004df4:	4a56      	ldr	r2, [pc, #344]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004df6:	430b      	orrs	r3, r1
 8004df8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dfa:	e003      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004e10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e14:	2300      	movs	r3, #0
 8004e16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f000 809f 	beq.w	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e26:	4b4b      	ldr	r3, [pc, #300]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a4a      	ldr	r2, [pc, #296]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e32:	f7fc fbaf 	bl	8001594 <HAL_GetTick>
 8004e36:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e3a:	e00b      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3c:	f7fc fbaa 	bl	8001594 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b64      	cmp	r3, #100	@ 0x64
 8004e4a:	d903      	bls.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e52:	e005      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e54:	4b3f      	ldr	r3, [pc, #252]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0ed      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004e60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d179      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e68:	4b39      	ldr	r3, [pc, #228]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e74:	4053      	eors	r3, r2
 8004e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d015      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e7e:	4b34      	ldr	r3, [pc, #208]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e8a:	4b31      	ldr	r3, [pc, #196]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e8e:	4a30      	ldr	r2, [pc, #192]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e94:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e96:	4b2e      	ldr	r3, [pc, #184]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ea0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ea2:	4a2b      	ldr	r2, [pc, #172]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ea4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ea8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004eb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eb6:	d118      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb8:	f7fc fb6c 	bl	8001594 <HAL_GetTick>
 8004ebc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ec0:	e00d      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec2:	f7fc fb67 	bl	8001594 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004ecc:	1ad2      	subs	r2, r2, r3
 8004ece:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d903      	bls.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004edc:	e005      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ede:	4b1c      	ldr	r3, [pc, #112]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0eb      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004eea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d129      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004efe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f02:	d10e      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004f04:	4b12      	ldr	r3, [pc, #72]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f14:	091a      	lsrs	r2, r3, #4
 8004f16:	4b10      	ldr	r3, [pc, #64]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004f18:	4013      	ands	r3, r2
 8004f1a:	4a0d      	ldr	r2, [pc, #52]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	6113      	str	r3, [r2, #16]
 8004f20:	e005      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004f22:	4b0b      	ldr	r3, [pc, #44]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	4a0a      	ldr	r2, [pc, #40]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f2c:	6113      	str	r3, [r2, #16]
 8004f2e:	4b08      	ldr	r3, [pc, #32]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f30:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f3e:	4a04      	ldr	r2, [pc, #16]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f40:	430b      	orrs	r3, r1
 8004f42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f44:	e00e      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004f4e:	e009      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004f50:	58024400 	.word	0x58024400
 8004f54:	58024800 	.word	0x58024800
 8004f58:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6c:	f002 0301 	and.w	r3, r2, #1
 8004f70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f74:	2300      	movs	r3, #0
 8004f76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f7a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f000 8089 	beq.w	8005098 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f8c:	2b28      	cmp	r3, #40	@ 0x28
 8004f8e:	d86b      	bhi.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004f90:	a201      	add	r2, pc, #4	@ (adr r2, 8004f98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	08005071 	.word	0x08005071
 8004f9c:	08005069 	.word	0x08005069
 8004fa0:	08005069 	.word	0x08005069
 8004fa4:	08005069 	.word	0x08005069
 8004fa8:	08005069 	.word	0x08005069
 8004fac:	08005069 	.word	0x08005069
 8004fb0:	08005069 	.word	0x08005069
 8004fb4:	08005069 	.word	0x08005069
 8004fb8:	0800503d 	.word	0x0800503d
 8004fbc:	08005069 	.word	0x08005069
 8004fc0:	08005069 	.word	0x08005069
 8004fc4:	08005069 	.word	0x08005069
 8004fc8:	08005069 	.word	0x08005069
 8004fcc:	08005069 	.word	0x08005069
 8004fd0:	08005069 	.word	0x08005069
 8004fd4:	08005069 	.word	0x08005069
 8004fd8:	08005053 	.word	0x08005053
 8004fdc:	08005069 	.word	0x08005069
 8004fe0:	08005069 	.word	0x08005069
 8004fe4:	08005069 	.word	0x08005069
 8004fe8:	08005069 	.word	0x08005069
 8004fec:	08005069 	.word	0x08005069
 8004ff0:	08005069 	.word	0x08005069
 8004ff4:	08005069 	.word	0x08005069
 8004ff8:	08005071 	.word	0x08005071
 8004ffc:	08005069 	.word	0x08005069
 8005000:	08005069 	.word	0x08005069
 8005004:	08005069 	.word	0x08005069
 8005008:	08005069 	.word	0x08005069
 800500c:	08005069 	.word	0x08005069
 8005010:	08005069 	.word	0x08005069
 8005014:	08005069 	.word	0x08005069
 8005018:	08005071 	.word	0x08005071
 800501c:	08005069 	.word	0x08005069
 8005020:	08005069 	.word	0x08005069
 8005024:	08005069 	.word	0x08005069
 8005028:	08005069 	.word	0x08005069
 800502c:	08005069 	.word	0x08005069
 8005030:	08005069 	.word	0x08005069
 8005034:	08005069 	.word	0x08005069
 8005038:	08005071 	.word	0x08005071
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800503c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005040:	3308      	adds	r3, #8
 8005042:	2101      	movs	r1, #1
 8005044:	4618      	mov	r0, r3
 8005046:	f001 fe95 	bl	8006d74 <RCCEx_PLL2_Config>
 800504a:	4603      	mov	r3, r0
 800504c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005050:	e00f      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005056:	3328      	adds	r3, #40	@ 0x28
 8005058:	2101      	movs	r1, #1
 800505a:	4618      	mov	r0, r3
 800505c:	f001 ff3c 	bl	8006ed8 <RCCEx_PLL3_Config>
 8005060:	4603      	mov	r3, r0
 8005062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005066:	e004      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800506e:	e000      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005070:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10a      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800507a:	4bbf      	ldr	r3, [pc, #764]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800507c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800507e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005086:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005088:	4abb      	ldr	r2, [pc, #748]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800508a:	430b      	orrs	r3, r1
 800508c:	6553      	str	r3, [r2, #84]	@ 0x54
 800508e:	e003      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005090:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005094:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a0:	f002 0302 	and.w	r3, r2, #2
 80050a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050a8:	2300      	movs	r3, #0
 80050aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80050ae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80050b2:	460b      	mov	r3, r1
 80050b4:	4313      	orrs	r3, r2
 80050b6:	d041      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80050b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050be:	2b05      	cmp	r3, #5
 80050c0:	d824      	bhi.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80050c2:	a201      	add	r2, pc, #4	@ (adr r2, 80050c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80050c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c8:	08005115 	.word	0x08005115
 80050cc:	080050e1 	.word	0x080050e1
 80050d0:	080050f7 	.word	0x080050f7
 80050d4:	08005115 	.word	0x08005115
 80050d8:	08005115 	.word	0x08005115
 80050dc:	08005115 	.word	0x08005115
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e4:	3308      	adds	r3, #8
 80050e6:	2101      	movs	r1, #1
 80050e8:	4618      	mov	r0, r3
 80050ea:	f001 fe43 	bl	8006d74 <RCCEx_PLL2_Config>
 80050ee:	4603      	mov	r3, r0
 80050f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050f4:	e00f      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050fa:	3328      	adds	r3, #40	@ 0x28
 80050fc:	2101      	movs	r1, #1
 80050fe:	4618      	mov	r0, r3
 8005100:	f001 feea 	bl	8006ed8 <RCCEx_PLL3_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800510a:	e004      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005112:	e000      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10a      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800511e:	4b96      	ldr	r3, [pc, #600]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005122:	f023 0107 	bic.w	r1, r3, #7
 8005126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800512a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800512c:	4a92      	ldr	r2, [pc, #584]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800512e:	430b      	orrs	r3, r1
 8005130:	6553      	str	r3, [r2, #84]	@ 0x54
 8005132:	e003      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005134:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005138:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800513c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005144:	f002 0304 	and.w	r3, r2, #4
 8005148:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800514c:	2300      	movs	r3, #0
 800514e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005152:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005156:	460b      	mov	r3, r1
 8005158:	4313      	orrs	r3, r2
 800515a:	d044      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800515c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005160:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005164:	2b05      	cmp	r3, #5
 8005166:	d825      	bhi.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005168:	a201      	add	r2, pc, #4	@ (adr r2, 8005170 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800516a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516e:	bf00      	nop
 8005170:	080051bd 	.word	0x080051bd
 8005174:	08005189 	.word	0x08005189
 8005178:	0800519f 	.word	0x0800519f
 800517c:	080051bd 	.word	0x080051bd
 8005180:	080051bd 	.word	0x080051bd
 8005184:	080051bd 	.word	0x080051bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800518c:	3308      	adds	r3, #8
 800518e:	2101      	movs	r1, #1
 8005190:	4618      	mov	r0, r3
 8005192:	f001 fdef 	bl	8006d74 <RCCEx_PLL2_Config>
 8005196:	4603      	mov	r3, r0
 8005198:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800519c:	e00f      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800519e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a2:	3328      	adds	r3, #40	@ 0x28
 80051a4:	2101      	movs	r1, #1
 80051a6:	4618      	mov	r0, r3
 80051a8:	f001 fe96 	bl	8006ed8 <RCCEx_PLL3_Config>
 80051ac:	4603      	mov	r3, r0
 80051ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80051b2:	e004      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051ba:	e000      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80051bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10b      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051c6:	4b6c      	ldr	r3, [pc, #432]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ca:	f023 0107 	bic.w	r1, r3, #7
 80051ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051d6:	4a68      	ldr	r2, [pc, #416]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051d8:	430b      	orrs	r3, r1
 80051da:	6593      	str	r3, [r2, #88]	@ 0x58
 80051dc:	e003      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ee:	f002 0320 	and.w	r3, r2, #32
 80051f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051f6:	2300      	movs	r3, #0
 80051f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005200:	460b      	mov	r3, r1
 8005202:	4313      	orrs	r3, r2
 8005204:	d055      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005212:	d033      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005214:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005218:	d82c      	bhi.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800521a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800521e:	d02f      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005224:	d826      	bhi.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005226:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800522a:	d02b      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800522c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005230:	d820      	bhi.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005232:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005236:	d012      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005238:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800523c:	d81a      	bhi.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800523e:	2b00      	cmp	r3, #0
 8005240:	d022      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005242:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005246:	d115      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800524c:	3308      	adds	r3, #8
 800524e:	2100      	movs	r1, #0
 8005250:	4618      	mov	r0, r3
 8005252:	f001 fd8f 	bl	8006d74 <RCCEx_PLL2_Config>
 8005256:	4603      	mov	r3, r0
 8005258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800525c:	e015      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800525e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005262:	3328      	adds	r3, #40	@ 0x28
 8005264:	2102      	movs	r1, #2
 8005266:	4618      	mov	r0, r3
 8005268:	f001 fe36 	bl	8006ed8 <RCCEx_PLL3_Config>
 800526c:	4603      	mov	r3, r0
 800526e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005272:	e00a      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800527a:	e006      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800527c:	bf00      	nop
 800527e:	e004      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005280:	bf00      	nop
 8005282:	e002      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005284:	bf00      	nop
 8005286:	e000      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800528a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10b      	bne.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005292:	4b39      	ldr	r3, [pc, #228]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005296:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800529a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a2:	4a35      	ldr	r2, [pc, #212]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052a4:	430b      	orrs	r3, r1
 80052a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80052a8:	e003      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80052be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052c2:	2300      	movs	r3, #0
 80052c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80052c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80052cc:	460b      	mov	r3, r1
 80052ce:	4313      	orrs	r3, r2
 80052d0:	d058      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80052d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052da:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052de:	d033      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80052e0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052e4:	d82c      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ea:	d02f      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80052ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052f0:	d826      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052f6:	d02b      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80052f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052fc:	d820      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005302:	d012      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005308:	d81a      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d022      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800530e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005312:	d115      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005318:	3308      	adds	r3, #8
 800531a:	2100      	movs	r1, #0
 800531c:	4618      	mov	r0, r3
 800531e:	f001 fd29 	bl	8006d74 <RCCEx_PLL2_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005328:	e015      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800532a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800532e:	3328      	adds	r3, #40	@ 0x28
 8005330:	2102      	movs	r1, #2
 8005332:	4618      	mov	r0, r3
 8005334:	f001 fdd0 	bl	8006ed8 <RCCEx_PLL3_Config>
 8005338:	4603      	mov	r3, r0
 800533a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800533e:	e00a      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005346:	e006      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005348:	bf00      	nop
 800534a:	e004      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800534c:	bf00      	nop
 800534e:	e002      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005350:	bf00      	nop
 8005352:	e000      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10e      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800535e:	4b06      	ldr	r3, [pc, #24]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005362:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800536a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800536e:	4a02      	ldr	r2, [pc, #8]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005370:	430b      	orrs	r3, r1
 8005372:	6593      	str	r3, [r2, #88]	@ 0x58
 8005374:	e006      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005376:	bf00      	nop
 8005378:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800537c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005380:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005390:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005394:	2300      	movs	r3, #0
 8005396:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800539a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800539e:	460b      	mov	r3, r1
 80053a0:	4313      	orrs	r3, r2
 80053a2:	d055      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80053a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80053ac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80053b0:	d033      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80053b2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80053b6:	d82c      	bhi.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053bc:	d02f      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80053be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053c2:	d826      	bhi.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053c4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80053c8:	d02b      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80053ca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80053ce:	d820      	bhi.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053d4:	d012      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80053d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053da:	d81a      	bhi.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d022      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80053e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e4:	d115      	bne.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ea:	3308      	adds	r3, #8
 80053ec:	2100      	movs	r1, #0
 80053ee:	4618      	mov	r0, r3
 80053f0:	f001 fcc0 	bl	8006d74 <RCCEx_PLL2_Config>
 80053f4:	4603      	mov	r3, r0
 80053f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80053fa:	e015      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005400:	3328      	adds	r3, #40	@ 0x28
 8005402:	2102      	movs	r1, #2
 8005404:	4618      	mov	r0, r3
 8005406:	f001 fd67 	bl	8006ed8 <RCCEx_PLL3_Config>
 800540a:	4603      	mov	r3, r0
 800540c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005410:	e00a      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005418:	e006      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800541a:	bf00      	nop
 800541c:	e004      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800541e:	bf00      	nop
 8005420:	e002      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005422:	bf00      	nop
 8005424:	e000      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10b      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005430:	4ba1      	ldr	r3, [pc, #644]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005434:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800543c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005440:	4a9d      	ldr	r2, [pc, #628]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005442:	430b      	orrs	r3, r1
 8005444:	6593      	str	r3, [r2, #88]	@ 0x58
 8005446:	e003      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005448:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800544c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	f002 0308 	and.w	r3, r2, #8
 800545c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005460:	2300      	movs	r3, #0
 8005462:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005466:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800546a:	460b      	mov	r3, r1
 800546c:	4313      	orrs	r3, r2
 800546e:	d01e      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005474:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800547c:	d10c      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800547e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005482:	3328      	adds	r3, #40	@ 0x28
 8005484:	2102      	movs	r1, #2
 8005486:	4618      	mov	r0, r3
 8005488:	f001 fd26 	bl	8006ed8 <RCCEx_PLL3_Config>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005498:	4b87      	ldr	r3, [pc, #540]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800549a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800549c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054a8:	4a83      	ldr	r2, [pc, #524]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054aa:	430b      	orrs	r3, r1
 80054ac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b6:	f002 0310 	and.w	r3, r2, #16
 80054ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054be:	2300      	movs	r3, #0
 80054c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80054c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80054c8:	460b      	mov	r3, r1
 80054ca:	4313      	orrs	r3, r2
 80054cc:	d01e      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80054ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054da:	d10c      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e0:	3328      	adds	r3, #40	@ 0x28
 80054e2:	2102      	movs	r1, #2
 80054e4:	4618      	mov	r0, r3
 80054e6:	f001 fcf7 	bl	8006ed8 <RCCEx_PLL3_Config>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054f6:	4b70      	ldr	r3, [pc, #448]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80054fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005502:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005506:	4a6c      	ldr	r2, [pc, #432]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005508:	430b      	orrs	r3, r1
 800550a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800550c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005518:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800551c:	2300      	movs	r3, #0
 800551e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005522:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005526:	460b      	mov	r3, r1
 8005528:	4313      	orrs	r3, r2
 800552a:	d03e      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800552c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005530:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005534:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005538:	d022      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800553a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800553e:	d81b      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005548:	d00b      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800554a:	e015      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800554c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005550:	3308      	adds	r3, #8
 8005552:	2100      	movs	r1, #0
 8005554:	4618      	mov	r0, r3
 8005556:	f001 fc0d 	bl	8006d74 <RCCEx_PLL2_Config>
 800555a:	4603      	mov	r3, r0
 800555c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005560:	e00f      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005566:	3328      	adds	r3, #40	@ 0x28
 8005568:	2102      	movs	r1, #2
 800556a:	4618      	mov	r0, r3
 800556c:	f001 fcb4 	bl	8006ed8 <RCCEx_PLL3_Config>
 8005570:	4603      	mov	r3, r0
 8005572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005576:	e004      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800557e:	e000      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10b      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800558a:	4b4b      	ldr	r3, [pc, #300]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800558c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005596:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800559a:	4a47      	ldr	r2, [pc, #284]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800559c:	430b      	orrs	r3, r1
 800559e:	6593      	str	r3, [r2, #88]	@ 0x58
 80055a0:	e003      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80055b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055b8:	2300      	movs	r3, #0
 80055ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80055c0:	460b      	mov	r3, r1
 80055c2:	4313      	orrs	r3, r2
 80055c4:	d03b      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80055c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055d2:	d01f      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80055d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055d8:	d818      	bhi.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80055da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055de:	d003      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80055e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055e4:	d007      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80055e6:	e011      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055e8:	4b33      	ldr	r3, [pc, #204]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ec:	4a32      	ldr	r2, [pc, #200]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80055f4:	e00f      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fa:	3328      	adds	r3, #40	@ 0x28
 80055fc:	2101      	movs	r1, #1
 80055fe:	4618      	mov	r0, r3
 8005600:	f001 fc6a 	bl	8006ed8 <RCCEx_PLL3_Config>
 8005604:	4603      	mov	r3, r0
 8005606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800560a:	e004      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005612:	e000      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10b      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800561e:	4b26      	ldr	r3, [pc, #152]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005622:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800562a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800562e:	4a22      	ldr	r2, [pc, #136]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005630:	430b      	orrs	r3, r1
 8005632:	6553      	str	r3, [r2, #84]	@ 0x54
 8005634:	e003      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800563a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800563e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005646:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800564a:	673b      	str	r3, [r7, #112]	@ 0x70
 800564c:	2300      	movs	r3, #0
 800564e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005650:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005654:	460b      	mov	r3, r1
 8005656:	4313      	orrs	r3, r2
 8005658:	d034      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800565a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005668:	d007      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800566a:	e011      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800566c:	4b12      	ldr	r3, [pc, #72]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800566e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005670:	4a11      	ldr	r2, [pc, #68]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005672:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005676:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005678:	e00e      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800567a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800567e:	3308      	adds	r3, #8
 8005680:	2102      	movs	r1, #2
 8005682:	4618      	mov	r0, r3
 8005684:	f001 fb76 	bl	8006d74 <RCCEx_PLL2_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800568e:	e003      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005696:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005698:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10d      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80056a0:	4b05      	ldr	r3, [pc, #20]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80056a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ae:	4a02      	ldr	r2, [pc, #8]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056b0:	430b      	orrs	r3, r1
 80056b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80056b4:	e006      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80056b6:	bf00      	nop
 80056b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80056d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056d2:	2300      	movs	r3, #0
 80056d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80056da:	460b      	mov	r3, r1
 80056dc:	4313      	orrs	r3, r2
 80056de:	d00c      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e4:	3328      	adds	r3, #40	@ 0x28
 80056e6:	2102      	movs	r1, #2
 80056e8:	4618      	mov	r0, r3
 80056ea:	f001 fbf5 	bl	8006ed8 <RCCEx_PLL3_Config>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005702:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005706:	663b      	str	r3, [r7, #96]	@ 0x60
 8005708:	2300      	movs	r3, #0
 800570a:	667b      	str	r3, [r7, #100]	@ 0x64
 800570c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005710:	460b      	mov	r3, r1
 8005712:	4313      	orrs	r3, r2
 8005714:	d038      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800571a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800571e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005722:	d018      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005724:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005728:	d811      	bhi.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800572a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800572e:	d014      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005730:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005734:	d80b      	bhi.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005736:	2b00      	cmp	r3, #0
 8005738:	d011      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800573a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800573e:	d106      	bne.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005740:	4bc3      	ldr	r3, [pc, #780]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005744:	4ac2      	ldr	r2, [pc, #776]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005746:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800574a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800574c:	e008      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005754:	e004      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005756:	bf00      	nop
 8005758:	e002      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800575a:	bf00      	nop
 800575c:	e000      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800575e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005760:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10b      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005768:	4bb9      	ldr	r3, [pc, #740]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800576a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800576c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005778:	4ab5      	ldr	r2, [pc, #724]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800577a:	430b      	orrs	r3, r1
 800577c:	6553      	str	r3, [r2, #84]	@ 0x54
 800577e:	e003      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005784:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005790:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005794:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005796:	2300      	movs	r3, #0
 8005798:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800579a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800579e:	460b      	mov	r3, r1
 80057a0:	4313      	orrs	r3, r2
 80057a2:	d009      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057a4:	4baa      	ldr	r3, [pc, #680]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80057ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057b2:	4aa7      	ldr	r2, [pc, #668]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057b4:	430b      	orrs	r3, r1
 80057b6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80057b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80057c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80057c6:	2300      	movs	r3, #0
 80057c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80057ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80057ce:	460b      	mov	r3, r1
 80057d0:	4313      	orrs	r3, r2
 80057d2:	d00a      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80057d4:	4b9e      	ldr	r3, [pc, #632]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80057dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80057e4:	4a9a      	ldr	r2, [pc, #616]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057e6:	430b      	orrs	r3, r1
 80057e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80057f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057f8:	2300      	movs	r3, #0
 80057fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005800:	460b      	mov	r3, r1
 8005802:	4313      	orrs	r3, r2
 8005804:	d009      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005806:	4b92      	ldr	r3, [pc, #584]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800580a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800580e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005814:	4a8e      	ldr	r2, [pc, #568]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005816:	430b      	orrs	r3, r1
 8005818:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800581a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005822:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005826:	643b      	str	r3, [r7, #64]	@ 0x40
 8005828:	2300      	movs	r3, #0
 800582a:	647b      	str	r3, [r7, #68]	@ 0x44
 800582c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005830:	460b      	mov	r3, r1
 8005832:	4313      	orrs	r3, r2
 8005834:	d00e      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005836:	4b86      	ldr	r3, [pc, #536]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	4a85      	ldr	r2, [pc, #532]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800583c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005840:	6113      	str	r3, [r2, #16]
 8005842:	4b83      	ldr	r3, [pc, #524]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005844:	6919      	ldr	r1, [r3, #16]
 8005846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800584a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800584e:	4a80      	ldr	r2, [pc, #512]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005850:	430b      	orrs	r3, r1
 8005852:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005860:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005862:	2300      	movs	r3, #0
 8005864:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005866:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800586a:	460b      	mov	r3, r1
 800586c:	4313      	orrs	r3, r2
 800586e:	d009      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005870:	4b77      	ldr	r3, [pc, #476]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005874:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800587e:	4a74      	ldr	r2, [pc, #464]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005880:	430b      	orrs	r3, r1
 8005882:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005890:	633b      	str	r3, [r7, #48]	@ 0x30
 8005892:	2300      	movs	r3, #0
 8005894:	637b      	str	r3, [r7, #52]	@ 0x34
 8005896:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800589a:	460b      	mov	r3, r1
 800589c:	4313      	orrs	r3, r2
 800589e:	d00a      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80058a0:	4b6b      	ldr	r3, [pc, #428]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80058a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058b0:	4a67      	ldr	r2, [pc, #412]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058b2:	430b      	orrs	r3, r1
 80058b4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80058b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058be:	2100      	movs	r1, #0
 80058c0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80058cc:	460b      	mov	r3, r1
 80058ce:	4313      	orrs	r3, r2
 80058d0:	d011      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d6:	3308      	adds	r3, #8
 80058d8:	2100      	movs	r1, #0
 80058da:	4618      	mov	r0, r3
 80058dc:	f001 fa4a 	bl	8006d74 <RCCEx_PLL2_Config>
 80058e0:	4603      	mov	r3, r0
 80058e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80058e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80058f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	2100      	movs	r1, #0
 8005900:	6239      	str	r1, [r7, #32]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	627b      	str	r3, [r7, #36]	@ 0x24
 8005908:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800590c:	460b      	mov	r3, r1
 800590e:	4313      	orrs	r3, r2
 8005910:	d011      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005916:	3308      	adds	r3, #8
 8005918:	2101      	movs	r1, #1
 800591a:	4618      	mov	r0, r3
 800591c:	f001 fa2a 	bl	8006d74 <RCCEx_PLL2_Config>
 8005920:	4603      	mov	r3, r0
 8005922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005932:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	2100      	movs	r1, #0
 8005940:	61b9      	str	r1, [r7, #24]
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	61fb      	str	r3, [r7, #28]
 8005948:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800594c:	460b      	mov	r3, r1
 800594e:	4313      	orrs	r3, r2
 8005950:	d011      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005956:	3308      	adds	r3, #8
 8005958:	2102      	movs	r1, #2
 800595a:	4618      	mov	r0, r3
 800595c:	f001 fa0a 	bl	8006d74 <RCCEx_PLL2_Config>
 8005960:	4603      	mov	r3, r0
 8005962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800596e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005972:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597e:	2100      	movs	r1, #0
 8005980:	6139      	str	r1, [r7, #16]
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800598c:	460b      	mov	r3, r1
 800598e:	4313      	orrs	r3, r2
 8005990:	d011      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005996:	3328      	adds	r3, #40	@ 0x28
 8005998:	2100      	movs	r1, #0
 800599a:	4618      	mov	r0, r3
 800599c:	f001 fa9c 	bl	8006ed8 <RCCEx_PLL3_Config>
 80059a0:	4603      	mov	r3, r0
 80059a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80059a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80059b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	2100      	movs	r1, #0
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	f003 0310 	and.w	r3, r3, #16
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80059cc:	460b      	mov	r3, r1
 80059ce:	4313      	orrs	r3, r2
 80059d0:	d011      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d6:	3328      	adds	r3, #40	@ 0x28
 80059d8:	2101      	movs	r1, #1
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 fa7c 	bl	8006ed8 <RCCEx_PLL3_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80059e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80059f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fe:	2100      	movs	r1, #0
 8005a00:	6039      	str	r1, [r7, #0]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	607b      	str	r3, [r7, #4]
 8005a08:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	d011      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a16:	3328      	adds	r3, #40	@ 0x28
 8005a18:	2102      	movs	r1, #2
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f001 fa5c 	bl	8006ed8 <RCCEx_PLL3_Config>
 8005a20:	4603      	mov	r3, r0
 8005a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005a36:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	e000      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a50:	58024400 	.word	0x58024400

08005a54 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b090      	sub	sp, #64	@ 0x40
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005a5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a62:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005a66:	430b      	orrs	r3, r1
 8005a68:	f040 8094 	bne.w	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005a6c:	4b9e      	ldr	r3, [pc, #632]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	f200 8087 	bhi.w	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a84:	08005a99 	.word	0x08005a99
 8005a88:	08005ac1 	.word	0x08005ac1
 8005a8c:	08005ae9 	.word	0x08005ae9
 8005a90:	08005b85 	.word	0x08005b85
 8005a94:	08005b11 	.word	0x08005b11
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a98:	4b93      	ldr	r3, [pc, #588]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aa0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005aa4:	d108      	bne.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005aa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f001 f810 	bl	8006ad0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ab4:	f000 bd45 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005abc:	f000 bd41 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ac0:	4b89      	ldr	r3, [pc, #548]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ac8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005acc:	d108      	bne.n	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ace:	f107 0318 	add.w	r3, r7, #24
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fd54 	bl	8006580 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005adc:	f000 bd31 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ae4:	f000 bd2d 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ae8:	4b7f      	ldr	r3, [pc, #508]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005af0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005af4:	d108      	bne.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005af6:	f107 030c 	add.w	r3, r7, #12
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fe94 	bl	8006828 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b04:	f000 bd1d 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b0c:	f000 bd19 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005b10:	4b75      	ldr	r3, [pc, #468]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b18:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b1a:	4b73      	ldr	r3, [pc, #460]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0304 	and.w	r3, r3, #4
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d10c      	bne.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d109      	bne.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b2c:	4b6e      	ldr	r3, [pc, #440]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	08db      	lsrs	r3, r3, #3
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	4a6d      	ldr	r2, [pc, #436]	@ (8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005b38:	fa22 f303 	lsr.w	r3, r2, r3
 8005b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b3e:	e01f      	b.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b40:	4b69      	ldr	r3, [pc, #420]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b4c:	d106      	bne.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b54:	d102      	bne.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005b56:	4b66      	ldr	r3, [pc, #408]	@ (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b5a:	e011      	b.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b5c:	4b62      	ldr	r3, [pc, #392]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b68:	d106      	bne.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b70:	d102      	bne.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005b72:	4b60      	ldr	r3, [pc, #384]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b76:	e003      	b.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005b7c:	f000 bce1 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b80:	f000 bcdf 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b84:	4b5c      	ldr	r3, [pc, #368]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b88:	f000 bcdb 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b90:	f000 bcd7 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b98:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	f040 80ad 	bne.w	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005ba2:	4b51      	ldr	r3, [pc, #324]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ba6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005baa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bb2:	d056      	beq.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bba:	f200 8090 	bhi.w	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc0:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bc2:	f000 8088 	beq.w	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc8:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bca:	f200 8088 	bhi.w	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd0:	2b80      	cmp	r3, #128	@ 0x80
 8005bd2:	d032      	beq.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd6:	2b80      	cmp	r3, #128	@ 0x80
 8005bd8:	f200 8081 	bhi.w	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be4:	2b40      	cmp	r3, #64	@ 0x40
 8005be6:	d014      	beq.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005be8:	e079      	b.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bea:	4b3f      	ldr	r3, [pc, #252]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bf2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bf6:	d108      	bne.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 ff67 	bl	8006ad0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c06:	f000 bc9c 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c0e:	f000 bc98 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c12:	4b35      	ldr	r3, [pc, #212]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c1e:	d108      	bne.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c20:	f107 0318 	add.w	r3, r7, #24
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fcab 	bl	8006580 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c2e:	f000 bc88 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c36:	f000 bc84 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c46:	d108      	bne.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c48:	f107 030c 	add.w	r3, r7, #12
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 fdeb 	bl	8006828 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c56:	f000 bc74 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c5e:	f000 bc70 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c62:	4b21      	ldr	r3, [pc, #132]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c6a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d10c      	bne.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d109      	bne.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	08db      	lsrs	r3, r3, #3
 8005c84:	f003 0303 	and.w	r3, r3, #3
 8005c88:	4a18      	ldr	r2, [pc, #96]	@ (8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c90:	e01f      	b.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c92:	4b15      	ldr	r3, [pc, #84]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c9e:	d106      	bne.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ca6:	d102      	bne.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005ca8:	4b11      	ldr	r3, [pc, #68]	@ (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cac:	e011      	b.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005cae:	4b0e      	ldr	r3, [pc, #56]	@ (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cba:	d106      	bne.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cc2:	d102      	bne.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cc8:	e003      	b.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005cce:	f000 bc38 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005cd2:	f000 bc36 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005cd6:	4b08      	ldr	r3, [pc, #32]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cda:	f000 bc32 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ce2:	f000 bc2e 	b.w	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005ce6:	bf00      	nop
 8005ce8:	58024400 	.word	0x58024400
 8005cec:	03d09000 	.word	0x03d09000
 8005cf0:	003d0900 	.word	0x003d0900
 8005cf4:	007a1200 	.word	0x007a1200
 8005cf8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005cfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d00:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005d04:	430b      	orrs	r3, r1
 8005d06:	f040 809c 	bne.w	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005d0a:	4b9e      	ldr	r3, [pc, #632]	@ (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d0e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005d12:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d1a:	d054      	beq.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d22:	f200 808b 	bhi.w	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005d2c:	f000 8083 	beq.w	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d32:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005d36:	f200 8081 	bhi.w	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d40:	d02f      	beq.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d48:	d878      	bhi.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d004      	beq.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d56:	d012      	beq.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005d58:	e070      	b.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d5a:	4b8a      	ldr	r3, [pc, #552]	@ (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d66:	d107      	bne.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 feaf 	bl	8006ad0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d76:	e3e4      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d7c:	e3e1      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d7e:	4b81      	ldr	r3, [pc, #516]	@ (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d8a:	d107      	bne.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d8c:	f107 0318 	add.w	r3, r7, #24
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fbf5 	bl	8006580 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d9a:	e3d2      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005da0:	e3cf      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005da2:	4b78      	ldr	r3, [pc, #480]	@ (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005daa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dae:	d107      	bne.n	8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005db0:	f107 030c 	add.w	r3, r7, #12
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 fd37 	bl	8006828 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dbe:	e3c0      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dc4:	e3bd      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005dc6:	4b6f      	ldr	r3, [pc, #444]	@ (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005dce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005dd0:	4b6c      	ldr	r3, [pc, #432]	@ (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d10c      	bne.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d109      	bne.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005de2:	4b68      	ldr	r3, [pc, #416]	@ (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	08db      	lsrs	r3, r3, #3
 8005de8:	f003 0303 	and.w	r3, r3, #3
 8005dec:	4a66      	ldr	r2, [pc, #408]	@ (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005dee:	fa22 f303 	lsr.w	r3, r2, r3
 8005df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005df4:	e01e      	b.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005df6:	4b63      	ldr	r3, [pc, #396]	@ (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e02:	d106      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e0a:	d102      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005e0c:	4b5f      	ldr	r3, [pc, #380]	@ (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e10:	e010      	b.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e12:	4b5c      	ldr	r3, [pc, #368]	@ (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e1e:	d106      	bne.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e26:	d102      	bne.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005e28:	4b59      	ldr	r3, [pc, #356]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e2c:	e002      	b.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005e32:	e386      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005e34:	e385      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005e36:	4b57      	ldr	r3, [pc, #348]	@ (8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e3a:	e382      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e40:	e37f      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005e42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e46:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005e4a:	430b      	orrs	r3, r1
 8005e4c:	f040 80a7 	bne.w	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005e50:	4b4c      	ldr	r3, [pc, #304]	@ (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e54:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005e58:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e60:	d055      	beq.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e68:	f200 8096 	bhi.w	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e72:	f000 8084 	beq.w	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e7c:	f200 808c 	bhi.w	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e86:	d030      	beq.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e8e:	f200 8083 	bhi.w	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d004      	beq.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e9e:	d012      	beq.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005ea0:	e07a      	b.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ea2:	4b38      	ldr	r3, [pc, #224]	@ (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005eae:	d107      	bne.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005eb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fe0b 	bl	8006ad0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ebe:	e340      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ec4:	e33d      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ece:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ed2:	d107      	bne.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ed4:	f107 0318 	add.w	r3, r7, #24
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 fb51 	bl	8006580 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ee2:	e32e      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ee8:	e32b      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005eea:	4b26      	ldr	r3, [pc, #152]	@ (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ef2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ef6:	d107      	bne.n	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ef8:	f107 030c 	add.w	r3, r7, #12
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 fc93 	bl	8006828 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f06:	e31c      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f0c:	e319      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f16:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f18:	4b1a      	ldr	r3, [pc, #104]	@ (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d10c      	bne.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d109      	bne.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f2a:	4b16      	ldr	r3, [pc, #88]	@ (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	08db      	lsrs	r3, r3, #3
 8005f30:	f003 0303 	and.w	r3, r3, #3
 8005f34:	4a14      	ldr	r2, [pc, #80]	@ (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005f36:	fa22 f303 	lsr.w	r3, r2, r3
 8005f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f3c:	e01e      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f3e:	4b11      	ldr	r3, [pc, #68]	@ (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f4a:	d106      	bne.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f52:	d102      	bne.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005f54:	4b0d      	ldr	r3, [pc, #52]	@ (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f58:	e010      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f66:	d106      	bne.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f6e:	d102      	bne.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005f70:	4b07      	ldr	r3, [pc, #28]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f74:	e002      	b.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005f7a:	e2e2      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f7c:	e2e1      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005f7e:	4b05      	ldr	r3, [pc, #20]	@ (8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f82:	e2de      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f84:	58024400 	.word	0x58024400
 8005f88:	03d09000 	.word	0x03d09000
 8005f8c:	003d0900 	.word	0x003d0900
 8005f90:	007a1200 	.word	0x007a1200
 8005f94:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f9c:	e2d1      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005f9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fa2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005fa6:	430b      	orrs	r3, r1
 8005fa8:	f040 809c 	bne.w	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005fac:	4b93      	ldr	r3, [pc, #588]	@ (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fb0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005fb4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fbc:	d054      	beq.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fc4:	f200 808b 	bhi.w	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fce:	f000 8083 	beq.w	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fd8:	f200 8081 	bhi.w	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fe2:	d02f      	beq.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fea:	d878      	bhi.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d004      	beq.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ff8:	d012      	beq.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005ffa:	e070      	b.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ffc:	4b7f      	ldr	r3, [pc, #508]	@ (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006004:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006008:	d107      	bne.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800600a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800600e:	4618      	mov	r0, r3
 8006010:	f000 fd5e 	bl	8006ad0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006018:	e293      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800601a:	2300      	movs	r3, #0
 800601c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800601e:	e290      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006020:	4b76      	ldr	r3, [pc, #472]	@ (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006028:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800602c:	d107      	bne.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800602e:	f107 0318 	add.w	r3, r7, #24
 8006032:	4618      	mov	r0, r3
 8006034:	f000 faa4 	bl	8006580 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800603c:	e281      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006042:	e27e      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006044:	4b6d      	ldr	r3, [pc, #436]	@ (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800604c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006050:	d107      	bne.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006052:	f107 030c 	add.w	r3, r7, #12
 8006056:	4618      	mov	r0, r3
 8006058:	f000 fbe6 	bl	8006828 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006060:	e26f      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006062:	2300      	movs	r3, #0
 8006064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006066:	e26c      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006068:	4b64      	ldr	r3, [pc, #400]	@ (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800606a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800606c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006070:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006072:	4b62      	ldr	r3, [pc, #392]	@ (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0304 	and.w	r3, r3, #4
 800607a:	2b04      	cmp	r3, #4
 800607c:	d10c      	bne.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800607e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006080:	2b00      	cmp	r3, #0
 8006082:	d109      	bne.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006084:	4b5d      	ldr	r3, [pc, #372]	@ (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	08db      	lsrs	r3, r3, #3
 800608a:	f003 0303 	and.w	r3, r3, #3
 800608e:	4a5c      	ldr	r2, [pc, #368]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006090:	fa22 f303 	lsr.w	r3, r2, r3
 8006094:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006096:	e01e      	b.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006098:	4b58      	ldr	r3, [pc, #352]	@ (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060a4:	d106      	bne.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80060a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060ac:	d102      	bne.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80060ae:	4b55      	ldr	r3, [pc, #340]	@ (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80060b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060b2:	e010      	b.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060b4:	4b51      	ldr	r3, [pc, #324]	@ (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060c0:	d106      	bne.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80060c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060c8:	d102      	bne.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80060ca:	4b4f      	ldr	r3, [pc, #316]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80060cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060ce:	e002      	b.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80060d0:	2300      	movs	r3, #0
 80060d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80060d4:	e235      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80060d6:	e234      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80060d8:	4b4c      	ldr	r3, [pc, #304]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80060da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060dc:	e231      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80060de:	2300      	movs	r3, #0
 80060e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060e2:	e22e      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80060e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060e8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80060ec:	430b      	orrs	r3, r1
 80060ee:	f040 808f 	bne.w	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80060f2:	4b42      	ldr	r3, [pc, #264]	@ (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80060f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060f6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80060fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80060fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006102:	d06b      	beq.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006106:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800610a:	d874      	bhi.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800610c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006112:	d056      	beq.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006116:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800611a:	d86c      	bhi.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800611c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006122:	d03b      	beq.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006126:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800612a:	d864      	bhi.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800612c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800612e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006132:	d021      	beq.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006136:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800613a:	d85c      	bhi.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800613c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800613e:	2b00      	cmp	r3, #0
 8006140:	d004      	beq.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006148:	d004      	beq.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800614a:	e054      	b.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800614c:	f7fe fa4c 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8006150:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006152:	e1f6      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006154:	4b29      	ldr	r3, [pc, #164]	@ (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800615c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006160:	d107      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006162:	f107 0318 	add.w	r3, r7, #24
 8006166:	4618      	mov	r0, r3
 8006168:	f000 fa0a 	bl	8006580 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006170:	e1e7      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006172:	2300      	movs	r3, #0
 8006174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006176:	e1e4      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006178:	4b20      	ldr	r3, [pc, #128]	@ (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006180:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006184:	d107      	bne.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006186:	f107 030c 	add.w	r3, r7, #12
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fb4c 	bl	8006828 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006194:	e1d5      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006196:	2300      	movs	r3, #0
 8006198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800619a:	e1d2      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800619c:	4b17      	ldr	r3, [pc, #92]	@ (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d109      	bne.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061a8:	4b14      	ldr	r3, [pc, #80]	@ (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	08db      	lsrs	r3, r3, #3
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	4a13      	ldr	r2, [pc, #76]	@ (8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80061b4:	fa22 f303 	lsr.w	r3, r2, r3
 80061b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061ba:	e1c2      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061bc:	2300      	movs	r3, #0
 80061be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061c0:	e1bf      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80061c2:	4b0e      	ldr	r3, [pc, #56]	@ (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061ce:	d102      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80061d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80061d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061d4:	e1b5      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061d6:	2300      	movs	r3, #0
 80061d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061da:	e1b2      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061dc:	4b07      	ldr	r3, [pc, #28]	@ (80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061e8:	d102      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80061ea:	4b07      	ldr	r3, [pc, #28]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80061ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061ee:	e1a8      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061f0:	2300      	movs	r3, #0
 80061f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061f4:	e1a5      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80061f6:	2300      	movs	r3, #0
 80061f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061fa:	e1a2      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80061fc:	58024400 	.word	0x58024400
 8006200:	03d09000 	.word	0x03d09000
 8006204:	003d0900 	.word	0x003d0900
 8006208:	007a1200 	.word	0x007a1200
 800620c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006214:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006218:	430b      	orrs	r3, r1
 800621a:	d173      	bne.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800621c:	4b9c      	ldr	r3, [pc, #624]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800621e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006220:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006224:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006228:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800622c:	d02f      	beq.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800622e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006230:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006234:	d863      	bhi.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006238:	2b00      	cmp	r3, #0
 800623a:	d004      	beq.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800623c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006242:	d012      	beq.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006244:	e05b      	b.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006246:	4b92      	ldr	r3, [pc, #584]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800624e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006252:	d107      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006254:	f107 0318 	add.w	r3, r7, #24
 8006258:	4618      	mov	r0, r3
 800625a:	f000 f991 	bl	8006580 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006262:	e16e      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006264:	2300      	movs	r3, #0
 8006266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006268:	e16b      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800626a:	4b89      	ldr	r3, [pc, #548]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006272:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006276:	d107      	bne.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006278:	f107 030c 	add.w	r3, r7, #12
 800627c:	4618      	mov	r0, r3
 800627e:	f000 fad3 	bl	8006828 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006286:	e15c      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006288:	2300      	movs	r3, #0
 800628a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800628c:	e159      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800628e:	4b80      	ldr	r3, [pc, #512]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006292:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006296:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006298:	4b7d      	ldr	r3, [pc, #500]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b04      	cmp	r3, #4
 80062a2:	d10c      	bne.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80062a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d109      	bne.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062aa:	4b79      	ldr	r3, [pc, #484]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	08db      	lsrs	r3, r3, #3
 80062b0:	f003 0303 	and.w	r3, r3, #3
 80062b4:	4a77      	ldr	r2, [pc, #476]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80062b6:	fa22 f303 	lsr.w	r3, r2, r3
 80062ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062bc:	e01e      	b.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062be:	4b74      	ldr	r3, [pc, #464]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ca:	d106      	bne.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80062cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062d2:	d102      	bne.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80062d4:	4b70      	ldr	r3, [pc, #448]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80062d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062d8:	e010      	b.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062da:	4b6d      	ldr	r3, [pc, #436]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062e6:	d106      	bne.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80062e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062ee:	d102      	bne.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80062f0:	4b6a      	ldr	r3, [pc, #424]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80062f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062f4:	e002      	b.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80062f6:	2300      	movs	r3, #0
 80062f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80062fa:	e122      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80062fc:	e121      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80062fe:	2300      	movs	r3, #0
 8006300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006302:	e11e      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006308:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800630c:	430b      	orrs	r3, r1
 800630e:	d133      	bne.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006310:	4b5f      	ldr	r3, [pc, #380]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006318:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800631a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631c:	2b00      	cmp	r3, #0
 800631e:	d004      	beq.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006322:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006326:	d012      	beq.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006328:	e023      	b.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800632a:	4b59      	ldr	r3, [pc, #356]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006332:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006336:	d107      	bne.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006338:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800633c:	4618      	mov	r0, r3
 800633e:	f000 fbc7 	bl	8006ad0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006346:	e0fc      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006348:	2300      	movs	r3, #0
 800634a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800634c:	e0f9      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800634e:	4b50      	ldr	r3, [pc, #320]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006356:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800635a:	d107      	bne.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800635c:	f107 0318 	add.w	r3, r7, #24
 8006360:	4618      	mov	r0, r3
 8006362:	f000 f90d 	bl	8006580 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800636a:	e0ea      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800636c:	2300      	movs	r3, #0
 800636e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006370:	e0e7      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006372:	2300      	movs	r3, #0
 8006374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006376:	e0e4      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800637c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006380:	430b      	orrs	r3, r1
 8006382:	f040 808d 	bne.w	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006386:	4b42      	ldr	r3, [pc, #264]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800638a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800638e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006392:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006396:	d06b      	beq.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800639e:	d874      	bhi.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80063a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a6:	d056      	beq.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80063a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ae:	d86c      	bhi.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80063b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063b6:	d03b      	beq.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80063b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063be:	d864      	bhi.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80063c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063c6:	d021      	beq.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80063c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063ce:	d85c      	bhi.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80063d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d004      	beq.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80063d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063dc:	d004      	beq.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80063de:	e054      	b.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80063e0:	f000 f8b8 	bl	8006554 <HAL_RCCEx_GetD3PCLK1Freq>
 80063e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063e6:	e0ac      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063e8:	4b29      	ldr	r3, [pc, #164]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063f4:	d107      	bne.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063f6:	f107 0318 	add.w	r3, r7, #24
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 f8c0 	bl	8006580 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006404:	e09d      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006406:	2300      	movs	r3, #0
 8006408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800640a:	e09a      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800640c:	4b20      	ldr	r3, [pc, #128]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006418:	d107      	bne.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800641a:	f107 030c 	add.w	r3, r7, #12
 800641e:	4618      	mov	r0, r3
 8006420:	f000 fa02 	bl	8006828 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006428:	e08b      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800642a:	2300      	movs	r3, #0
 800642c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800642e:	e088      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006430:	4b17      	ldr	r3, [pc, #92]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0304 	and.w	r3, r3, #4
 8006438:	2b04      	cmp	r3, #4
 800643a:	d109      	bne.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800643c:	4b14      	ldr	r3, [pc, #80]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	08db      	lsrs	r3, r3, #3
 8006442:	f003 0303 	and.w	r3, r3, #3
 8006446:	4a13      	ldr	r2, [pc, #76]	@ (8006494 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006448:	fa22 f303 	lsr.w	r3, r2, r3
 800644c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800644e:	e078      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006450:	2300      	movs	r3, #0
 8006452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006454:	e075      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006456:	4b0e      	ldr	r3, [pc, #56]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800645e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006462:	d102      	bne.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006464:	4b0c      	ldr	r3, [pc, #48]	@ (8006498 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006468:	e06b      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800646a:	2300      	movs	r3, #0
 800646c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800646e:	e068      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006470:	4b07      	ldr	r3, [pc, #28]	@ (8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006478:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800647c:	d102      	bne.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800647e:	4b07      	ldr	r3, [pc, #28]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006482:	e05e      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006484:	2300      	movs	r3, #0
 8006486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006488:	e05b      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800648a:	2300      	movs	r3, #0
 800648c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800648e:	e058      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006490:	58024400 	.word	0x58024400
 8006494:	03d09000 	.word	0x03d09000
 8006498:	003d0900 	.word	0x003d0900
 800649c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80064a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064a4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80064a8:	430b      	orrs	r3, r1
 80064aa:	d148      	bne.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80064ac:	4b27      	ldr	r3, [pc, #156]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80064b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80064b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064bc:	d02a      	beq.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80064be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064c4:	d838      	bhi.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80064c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d004      	beq.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80064cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064d2:	d00d      	beq.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80064d4:	e030      	b.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80064d6:	4b1d      	ldr	r3, [pc, #116]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064e2:	d102      	bne.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80064e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80064e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064e8:	e02b      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064ee:	e028      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064f0:	4b16      	ldr	r3, [pc, #88]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064fc:	d107      	bne.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fae4 	bl	8006ad0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800650c:	e019      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800650e:	2300      	movs	r3, #0
 8006510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006512:	e016      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006514:	4b0d      	ldr	r3, [pc, #52]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800651c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006520:	d107      	bne.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006522:	f107 0318 	add.w	r3, r7, #24
 8006526:	4618      	mov	r0, r3
 8006528:	f000 f82a 	bl	8006580 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006530:	e007      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006536:	e004      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006538:	2300      	movs	r3, #0
 800653a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800653c:	e001      	b.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800653e:	2300      	movs	r3, #0
 8006540:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006544:	4618      	mov	r0, r3
 8006546:	3740      	adds	r7, #64	@ 0x40
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	58024400 	.word	0x58024400
 8006550:	007a1200 	.word	0x007a1200

08006554 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006558:	f7fe f816 	bl	8004588 <HAL_RCC_GetHCLKFreq>
 800655c:	4602      	mov	r2, r0
 800655e:	4b06      	ldr	r3, [pc, #24]	@ (8006578 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	091b      	lsrs	r3, r3, #4
 8006564:	f003 0307 	and.w	r3, r3, #7
 8006568:	4904      	ldr	r1, [pc, #16]	@ (800657c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800656a:	5ccb      	ldrb	r3, [r1, r3]
 800656c:	f003 031f 	and.w	r3, r3, #31
 8006570:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006574:	4618      	mov	r0, r3
 8006576:	bd80      	pop	{r7, pc}
 8006578:	58024400 	.word	0x58024400
 800657c:	0800857c 	.word	0x0800857c

08006580 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006580:	b480      	push	{r7}
 8006582:	b089      	sub	sp, #36	@ 0x24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006588:	4ba1      	ldr	r3, [pc, #644]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800658a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658c:	f003 0303 	and.w	r3, r3, #3
 8006590:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006592:	4b9f      	ldr	r3, [pc, #636]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006596:	0b1b      	lsrs	r3, r3, #12
 8006598:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800659c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800659e:	4b9c      	ldr	r3, [pc, #624]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a2:	091b      	lsrs	r3, r3, #4
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80065aa:	4b99      	ldr	r3, [pc, #612]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ae:	08db      	lsrs	r3, r3, #3
 80065b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	fb02 f303 	mul.w	r3, r2, r3
 80065ba:	ee07 3a90 	vmov	s15, r3
 80065be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 8111 	beq.w	80067f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	f000 8083 	beq.w	80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	2b02      	cmp	r3, #2
 80065da:	f200 80a1 	bhi.w	8006720 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d056      	beq.n	8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80065ea:	e099      	b.n	8006720 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065ec:	4b88      	ldr	r3, [pc, #544]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0320 	and.w	r3, r3, #32
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d02d      	beq.n	8006654 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065f8:	4b85      	ldr	r3, [pc, #532]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	08db      	lsrs	r3, r3, #3
 80065fe:	f003 0303 	and.w	r3, r3, #3
 8006602:	4a84      	ldr	r2, [pc, #528]	@ (8006814 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006604:	fa22 f303 	lsr.w	r3, r2, r3
 8006608:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	ee07 3a90 	vmov	s15, r3
 8006610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	ee07 3a90 	vmov	s15, r3
 800661a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800661e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006622:	4b7b      	ldr	r3, [pc, #492]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800662a:	ee07 3a90 	vmov	s15, r3
 800662e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006632:	ed97 6a03 	vldr	s12, [r7, #12]
 8006636:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800663a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800663e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800664a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800664e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006652:	e087      	b.n	8006764 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	ee07 3a90 	vmov	s15, r3
 800665a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800665e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800681c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006666:	4b6a      	ldr	r3, [pc, #424]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800666a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800666e:	ee07 3a90 	vmov	s15, r3
 8006672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006676:	ed97 6a03 	vldr	s12, [r7, #12]
 800667a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800667e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800668a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800668e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006696:	e065      	b.n	8006764 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80066a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066aa:	4b59      	ldr	r3, [pc, #356]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b2:	ee07 3a90 	vmov	s15, r3
 80066b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80066be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066da:	e043      	b.n	8006764 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80066ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ee:	4b48      	ldr	r3, [pc, #288]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006702:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800670a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800670e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800671a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800671e:	e021      	b.n	8006764 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800672a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800672e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006732:	4b37      	ldr	r3, [pc, #220]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800673a:	ee07 3a90 	vmov	s15, r3
 800673e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006742:	ed97 6a03 	vldr	s12, [r7, #12]
 8006746:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800674a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800674e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800675a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800675e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006762:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006764:	4b2a      	ldr	r3, [pc, #168]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006768:	0a5b      	lsrs	r3, r3, #9
 800676a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800676e:	ee07 3a90 	vmov	s15, r3
 8006772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006776:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800677a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800677e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800678a:	ee17 2a90 	vmov	r2, s15
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006792:	4b1f      	ldr	r3, [pc, #124]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006796:	0c1b      	lsrs	r3, r3, #16
 8006798:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800679c:	ee07 3a90 	vmov	s15, r3
 80067a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80067b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067b8:	ee17 2a90 	vmov	r2, s15
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80067c0:	4b13      	ldr	r3, [pc, #76]	@ (8006810 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c4:	0e1b      	lsrs	r3, r3, #24
 80067c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067ca:	ee07 3a90 	vmov	s15, r3
 80067ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067da:	edd7 6a07 	vldr	s13, [r7, #28]
 80067de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067e6:	ee17 2a90 	vmov	r2, s15
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80067ee:	e008      	b.n	8006802 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	609a      	str	r2, [r3, #8]
}
 8006802:	bf00      	nop
 8006804:	3724      	adds	r7, #36	@ 0x24
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	58024400 	.word	0x58024400
 8006814:	03d09000 	.word	0x03d09000
 8006818:	46000000 	.word	0x46000000
 800681c:	4c742400 	.word	0x4c742400
 8006820:	4a742400 	.word	0x4a742400
 8006824:	4af42400 	.word	0x4af42400

08006828 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006828:	b480      	push	{r7}
 800682a:	b089      	sub	sp, #36	@ 0x24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006830:	4ba1      	ldr	r3, [pc, #644]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006834:	f003 0303 	and.w	r3, r3, #3
 8006838:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800683a:	4b9f      	ldr	r3, [pc, #636]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800683c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683e:	0d1b      	lsrs	r3, r3, #20
 8006840:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006844:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006846:	4b9c      	ldr	r3, [pc, #624]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684a:	0a1b      	lsrs	r3, r3, #8
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006852:	4b99      	ldr	r3, [pc, #612]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006856:	08db      	lsrs	r3, r3, #3
 8006858:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	fb02 f303 	mul.w	r3, r2, r3
 8006862:	ee07 3a90 	vmov	s15, r3
 8006866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 8111 	beq.w	8006a98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	2b02      	cmp	r3, #2
 800687a:	f000 8083 	beq.w	8006984 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	2b02      	cmp	r3, #2
 8006882:	f200 80a1 	bhi.w	80069c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d056      	beq.n	8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006892:	e099      	b.n	80069c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006894:	4b88      	ldr	r3, [pc, #544]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0320 	and.w	r3, r3, #32
 800689c:	2b00      	cmp	r3, #0
 800689e:	d02d      	beq.n	80068fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068a0:	4b85      	ldr	r3, [pc, #532]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	08db      	lsrs	r3, r3, #3
 80068a6:	f003 0303 	and.w	r3, r3, #3
 80068aa:	4a84      	ldr	r2, [pc, #528]	@ (8006abc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80068ac:	fa22 f303 	lsr.w	r3, r2, r3
 80068b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	ee07 3a90 	vmov	s15, r3
 80068b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	ee07 3a90 	vmov	s15, r3
 80068c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ca:	4b7b      	ldr	r3, [pc, #492]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068da:	ed97 6a03 	vldr	s12, [r7, #12]
 80068de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80068fa:	e087      	b.n	8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	ee07 3a90 	vmov	s15, r3
 8006902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006906:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800690a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800690e:	4b6a      	ldr	r3, [pc, #424]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006916:	ee07 3a90 	vmov	s15, r3
 800691a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800691e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006922:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800692a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800692e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800693a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800693e:	e065      	b.n	8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	ee07 3a90 	vmov	s15, r3
 8006946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800694e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006952:	4b59      	ldr	r3, [pc, #356]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800695a:	ee07 3a90 	vmov	s15, r3
 800695e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006962:	ed97 6a03 	vldr	s12, [r7, #12]
 8006966:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800696a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800696e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800697a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800697e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006982:	e043      	b.n	8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	ee07 3a90 	vmov	s15, r3
 800698a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006acc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006996:	4b48      	ldr	r3, [pc, #288]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699e:	ee07 3a90 	vmov	s15, r3
 80069a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069c6:	e021      	b.n	8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	ee07 3a90 	vmov	s15, r3
 80069ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80069d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069da:	4b37      	ldr	r3, [pc, #220]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e2:	ee07 3a90 	vmov	s15, r3
 80069e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a0a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a10:	0a5b      	lsrs	r3, r3, #9
 8006a12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a16:	ee07 3a90 	vmov	s15, r3
 8006a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a26:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a32:	ee17 2a90 	vmov	r2, s15
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3e:	0c1b      	lsrs	r3, r3, #16
 8006a40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a44:	ee07 3a90 	vmov	s15, r3
 8006a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a54:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a60:	ee17 2a90 	vmov	r2, s15
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006a68:	4b13      	ldr	r3, [pc, #76]	@ (8006ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6c:	0e1b      	lsrs	r3, r3, #24
 8006a6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a72:	ee07 3a90 	vmov	s15, r3
 8006a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a8e:	ee17 2a90 	vmov	r2, s15
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006a96:	e008      	b.n	8006aaa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	609a      	str	r2, [r3, #8]
}
 8006aaa:	bf00      	nop
 8006aac:	3724      	adds	r7, #36	@ 0x24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	58024400 	.word	0x58024400
 8006abc:	03d09000 	.word	0x03d09000
 8006ac0:	46000000 	.word	0x46000000
 8006ac4:	4c742400 	.word	0x4c742400
 8006ac8:	4a742400 	.word	0x4a742400
 8006acc:	4af42400 	.word	0x4af42400

08006ad0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b089      	sub	sp, #36	@ 0x24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ad8:	4ba0      	ldr	r3, [pc, #640]	@ (8006d5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006adc:	f003 0303 	and.w	r3, r3, #3
 8006ae0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006ae2:	4b9e      	ldr	r3, [pc, #632]	@ (8006d5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae6:	091b      	lsrs	r3, r3, #4
 8006ae8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006aec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006aee:	4b9b      	ldr	r3, [pc, #620]	@ (8006d5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006af8:	4b98      	ldr	r3, [pc, #608]	@ (8006d5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006afc:	08db      	lsrs	r3, r3, #3
 8006afe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	fb02 f303 	mul.w	r3, r2, r3
 8006b08:	ee07 3a90 	vmov	s15, r3
 8006b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b10:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f000 8111 	beq.w	8006d3e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	f000 8083 	beq.w	8006c2a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	f200 80a1 	bhi.w	8006c6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d056      	beq.n	8006be6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006b38:	e099      	b.n	8006c6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b3a:	4b88      	ldr	r3, [pc, #544]	@ (8006d5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0320 	and.w	r3, r3, #32
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d02d      	beq.n	8006ba2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b46:	4b85      	ldr	r3, [pc, #532]	@ (8006d5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	08db      	lsrs	r3, r3, #3
 8006b4c:	f003 0303 	and.w	r3, r3, #3
 8006b50:	4a83      	ldr	r2, [pc, #524]	@ (8006d60 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006b52:	fa22 f303 	lsr.w	r3, r2, r3
 8006b56:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	ee07 3a90 	vmov	s15, r3
 8006b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b70:	4b7a      	ldr	r3, [pc, #488]	@ (8006d5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b78:	ee07 3a90 	vmov	s15, r3
 8006b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b80:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b84:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006d64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006b88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b9c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ba0:	e087      	b.n	8006cb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	ee07 3a90 	vmov	s15, r3
 8006ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bac:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006d68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006bb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb4:	4b69      	ldr	r3, [pc, #420]	@ (8006d5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bbc:	ee07 3a90 	vmov	s15, r3
 8006bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bc8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006d64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006bcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006be4:	e065      	b.n	8006cb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	ee07 3a90 	vmov	s15, r3
 8006bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006bf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf8:	4b58      	ldr	r3, [pc, #352]	@ (8006d5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c00:	ee07 3a90 	vmov	s15, r3
 8006c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c08:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c0c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006d64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c28:	e043      	b.n	8006cb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	ee07 3a90 	vmov	s15, r3
 8006c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c34:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006d70 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006c38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c3c:	4b47      	ldr	r3, [pc, #284]	@ (8006d5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c44:	ee07 3a90 	vmov	s15, r3
 8006c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c50:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006d64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c6c:	e021      	b.n	8006cb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	ee07 3a90 	vmov	s15, r3
 8006c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c78:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006d68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006c7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c80:	4b36      	ldr	r3, [pc, #216]	@ (8006d5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c88:	ee07 3a90 	vmov	s15, r3
 8006c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c90:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c94:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006d64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cb0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8006d5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb6:	0a5b      	lsrs	r3, r3, #9
 8006cb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cbc:	ee07 3a90 	vmov	s15, r3
 8006cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ccc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cd8:	ee17 2a90 	vmov	r2, s15
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8006d5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce4:	0c1b      	lsrs	r3, r3, #16
 8006ce6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cea:	ee07 3a90 	vmov	s15, r3
 8006cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d06:	ee17 2a90 	vmov	r2, s15
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006d0e:	4b13      	ldr	r3, [pc, #76]	@ (8006d5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d12:	0e1b      	lsrs	r3, r3, #24
 8006d14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d18:	ee07 3a90 	vmov	s15, r3
 8006d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d28:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d34:	ee17 2a90 	vmov	r2, s15
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006d3c:	e008      	b.n	8006d50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	609a      	str	r2, [r3, #8]
}
 8006d50:	bf00      	nop
 8006d52:	3724      	adds	r7, #36	@ 0x24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	58024400 	.word	0x58024400
 8006d60:	03d09000 	.word	0x03d09000
 8006d64:	46000000 	.word	0x46000000
 8006d68:	4c742400 	.word	0x4c742400
 8006d6c:	4a742400 	.word	0x4a742400
 8006d70:	4af42400 	.word	0x4af42400

08006d74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d82:	4b53      	ldr	r3, [pc, #332]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d86:	f003 0303 	and.w	r3, r3, #3
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	d101      	bne.n	8006d92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e099      	b.n	8006ec6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d92:	4b4f      	ldr	r3, [pc, #316]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a4e      	ldr	r2, [pc, #312]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006d98:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d9e:	f7fa fbf9 	bl	8001594 <HAL_GetTick>
 8006da2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006da4:	e008      	b.n	8006db8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006da6:	f7fa fbf5 	bl	8001594 <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d901      	bls.n	8006db8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e086      	b.n	8006ec6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006db8:	4b45      	ldr	r3, [pc, #276]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1f0      	bne.n	8006da6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006dc4:	4b42      	ldr	r3, [pc, #264]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	031b      	lsls	r3, r3, #12
 8006dd2:	493f      	ldr	r1, [pc, #252]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	628b      	str	r3, [r1, #40]	@ 0x28
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	025b      	lsls	r3, r3, #9
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	431a      	orrs	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	041b      	lsls	r3, r3, #16
 8006df6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	061b      	lsls	r3, r3, #24
 8006e04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e08:	4931      	ldr	r1, [pc, #196]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e0e:	4b30      	ldr	r3, [pc, #192]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	492d      	ldr	r1, [pc, #180]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e20:	4b2b      	ldr	r3, [pc, #172]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e24:	f023 0220 	bic.w	r2, r3, #32
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	4928      	ldr	r1, [pc, #160]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006e32:	4b27      	ldr	r3, [pc, #156]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e36:	4a26      	ldr	r2, [pc, #152]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006e38:	f023 0310 	bic.w	r3, r3, #16
 8006e3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e3e:	4b24      	ldr	r3, [pc, #144]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006e40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e42:	4b24      	ldr	r3, [pc, #144]	@ (8006ed4 <RCCEx_PLL2_Config+0x160>)
 8006e44:	4013      	ands	r3, r2
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	69d2      	ldr	r2, [r2, #28]
 8006e4a:	00d2      	lsls	r2, r2, #3
 8006e4c:	4920      	ldr	r1, [pc, #128]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e52:	4b1f      	ldr	r3, [pc, #124]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e56:	4a1e      	ldr	r2, [pc, #120]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006e58:	f043 0310 	orr.w	r3, r3, #16
 8006e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d106      	bne.n	8006e72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e64:	4b1a      	ldr	r3, [pc, #104]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e68:	4a19      	ldr	r2, [pc, #100]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006e6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e70:	e00f      	b.n	8006e92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d106      	bne.n	8006e86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e78:	4b15      	ldr	r3, [pc, #84]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7c:	4a14      	ldr	r2, [pc, #80]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006e7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e84:	e005      	b.n	8006e92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e86:	4b12      	ldr	r3, [pc, #72]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8a:	4a11      	ldr	r2, [pc, #68]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006e8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006e90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e92:	4b0f      	ldr	r3, [pc, #60]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a0e      	ldr	r2, [pc, #56]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006e98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e9e:	f7fa fb79 	bl	8001594 <HAL_GetTick>
 8006ea2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ea4:	e008      	b.n	8006eb8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006ea6:	f7fa fb75 	bl	8001594 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d901      	bls.n	8006eb8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e006      	b.n	8006ec6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006eb8:	4b05      	ldr	r3, [pc, #20]	@ (8006ed0 <RCCEx_PLL2_Config+0x15c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d0f0      	beq.n	8006ea6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	58024400 	.word	0x58024400
 8006ed4:	ffff0007 	.word	0xffff0007

08006ed8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ee6:	4b53      	ldr	r3, [pc, #332]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	2b03      	cmp	r3, #3
 8006ef0:	d101      	bne.n	8006ef6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e099      	b.n	800702a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006ef6:	4b4f      	ldr	r3, [pc, #316]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a4e      	ldr	r2, [pc, #312]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006efc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f02:	f7fa fb47 	bl	8001594 <HAL_GetTick>
 8006f06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f08:	e008      	b.n	8006f1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f0a:	f7fa fb43 	bl	8001594 <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d901      	bls.n	8006f1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e086      	b.n	800702a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f1c:	4b45      	ldr	r3, [pc, #276]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1f0      	bne.n	8006f0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f28:	4b42      	ldr	r3, [pc, #264]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	051b      	lsls	r3, r3, #20
 8006f36:	493f      	ldr	r1, [pc, #252]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	025b      	lsls	r3, r3, #9
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	431a      	orrs	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	041b      	lsls	r3, r3, #16
 8006f5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	061b      	lsls	r3, r3, #24
 8006f68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f6c:	4931      	ldr	r1, [pc, #196]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f72:	4b30      	ldr	r3, [pc, #192]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f76:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	492d      	ldr	r1, [pc, #180]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f84:	4b2b      	ldr	r3, [pc, #172]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f88:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	4928      	ldr	r1, [pc, #160]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f96:	4b27      	ldr	r3, [pc, #156]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9a:	4a26      	ldr	r2, [pc, #152]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006fa2:	4b24      	ldr	r3, [pc, #144]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006fa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fa6:	4b24      	ldr	r3, [pc, #144]	@ (8007038 <RCCEx_PLL3_Config+0x160>)
 8006fa8:	4013      	ands	r3, r2
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	69d2      	ldr	r2, [r2, #28]
 8006fae:	00d2      	lsls	r2, r2, #3
 8006fb0:	4920      	ldr	r1, [pc, #128]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fba:	4a1e      	ldr	r2, [pc, #120]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d106      	bne.n	8006fd6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fcc:	4a19      	ldr	r2, [pc, #100]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006fce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006fd4:	e00f      	b.n	8006ff6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d106      	bne.n	8006fea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006fdc:	4b15      	ldr	r3, [pc, #84]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe0:	4a14      	ldr	r2, [pc, #80]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006fe2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006fe8:	e005      	b.n	8006ff6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006fea:	4b12      	ldr	r3, [pc, #72]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fee:	4a11      	ldr	r2, [pc, #68]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006ff0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a0e      	ldr	r2, [pc, #56]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 8006ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007002:	f7fa fac7 	bl	8001594 <HAL_GetTick>
 8007006:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007008:	e008      	b.n	800701c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800700a:	f7fa fac3 	bl	8001594 <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	2b02      	cmp	r3, #2
 8007016:	d901      	bls.n	800701c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e006      	b.n	800702a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800701c:	4b05      	ldr	r3, [pc, #20]	@ (8007034 <RCCEx_PLL3_Config+0x15c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d0f0      	beq.n	800700a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007028:	7bfb      	ldrb	r3, [r7, #15]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	58024400 	.word	0x58024400
 8007038:	ffff0007 	.word	0xffff0007

0800703c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d101      	bne.n	800704e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e049      	b.n	80070e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d106      	bne.n	8007068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7fa f852 	bl	800110c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	3304      	adds	r3, #4
 8007078:	4619      	mov	r1, r3
 800707a:	4610      	mov	r0, r2
 800707c:	f000 f836 	bl	80070ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
	...

080070ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a46      	ldr	r2, [pc, #280]	@ (8007218 <TIM_Base_SetConfig+0x12c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d013      	beq.n	800712c <TIM_Base_SetConfig+0x40>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800710a:	d00f      	beq.n	800712c <TIM_Base_SetConfig+0x40>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a43      	ldr	r2, [pc, #268]	@ (800721c <TIM_Base_SetConfig+0x130>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00b      	beq.n	800712c <TIM_Base_SetConfig+0x40>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a42      	ldr	r2, [pc, #264]	@ (8007220 <TIM_Base_SetConfig+0x134>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d007      	beq.n	800712c <TIM_Base_SetConfig+0x40>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a41      	ldr	r2, [pc, #260]	@ (8007224 <TIM_Base_SetConfig+0x138>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d003      	beq.n	800712c <TIM_Base_SetConfig+0x40>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a40      	ldr	r2, [pc, #256]	@ (8007228 <TIM_Base_SetConfig+0x13c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d108      	bne.n	800713e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a35      	ldr	r2, [pc, #212]	@ (8007218 <TIM_Base_SetConfig+0x12c>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d01f      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800714c:	d01b      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a32      	ldr	r2, [pc, #200]	@ (800721c <TIM_Base_SetConfig+0x130>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d017      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a31      	ldr	r2, [pc, #196]	@ (8007220 <TIM_Base_SetConfig+0x134>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d013      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a30      	ldr	r2, [pc, #192]	@ (8007224 <TIM_Base_SetConfig+0x138>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00f      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a2f      	ldr	r2, [pc, #188]	@ (8007228 <TIM_Base_SetConfig+0x13c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d00b      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a2e      	ldr	r2, [pc, #184]	@ (800722c <TIM_Base_SetConfig+0x140>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d007      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a2d      	ldr	r2, [pc, #180]	@ (8007230 <TIM_Base_SetConfig+0x144>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d003      	beq.n	8007186 <TIM_Base_SetConfig+0x9a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a2c      	ldr	r2, [pc, #176]	@ (8007234 <TIM_Base_SetConfig+0x148>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d108      	bne.n	8007198 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800718c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	4313      	orrs	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a16      	ldr	r2, [pc, #88]	@ (8007218 <TIM_Base_SetConfig+0x12c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d00f      	beq.n	80071e4 <TIM_Base_SetConfig+0xf8>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a18      	ldr	r2, [pc, #96]	@ (8007228 <TIM_Base_SetConfig+0x13c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d00b      	beq.n	80071e4 <TIM_Base_SetConfig+0xf8>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a17      	ldr	r2, [pc, #92]	@ (800722c <TIM_Base_SetConfig+0x140>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d007      	beq.n	80071e4 <TIM_Base_SetConfig+0xf8>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a16      	ldr	r2, [pc, #88]	@ (8007230 <TIM_Base_SetConfig+0x144>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d003      	beq.n	80071e4 <TIM_Base_SetConfig+0xf8>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a15      	ldr	r2, [pc, #84]	@ (8007234 <TIM_Base_SetConfig+0x148>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d103      	bne.n	80071ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	f003 0301 	and.w	r3, r3, #1
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d105      	bne.n	800720a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	f023 0201 	bic.w	r2, r3, #1
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	611a      	str	r2, [r3, #16]
  }
}
 800720a:	bf00      	nop
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40010000 	.word	0x40010000
 800721c:	40000400 	.word	0x40000400
 8007220:	40000800 	.word	0x40000800
 8007224:	40000c00 	.word	0x40000c00
 8007228:	40010400 	.word	0x40010400
 800722c:	40014000 	.word	0x40014000
 8007230:	40014400 	.word	0x40014400
 8007234:	40014800 	.word	0x40014800

08007238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007248:	2b01      	cmp	r3, #1
 800724a:	d101      	bne.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800724c:	2302      	movs	r3, #2
 800724e:	e06d      	b.n	800732c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a30      	ldr	r2, [pc, #192]	@ (8007338 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d004      	beq.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a2f      	ldr	r2, [pc, #188]	@ (800733c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d108      	bne.n	8007296 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800728a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	4313      	orrs	r3, r2
 8007294:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800729c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a20      	ldr	r2, [pc, #128]	@ (8007338 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d022      	beq.n	8007300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072c2:	d01d      	beq.n	8007300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007340 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d018      	beq.n	8007300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a1c      	ldr	r2, [pc, #112]	@ (8007344 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d013      	beq.n	8007300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a1a      	ldr	r2, [pc, #104]	@ (8007348 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d00e      	beq.n	8007300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a15      	ldr	r2, [pc, #84]	@ (800733c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d009      	beq.n	8007300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a16      	ldr	r2, [pc, #88]	@ (800734c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d004      	beq.n	8007300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a15      	ldr	r2, [pc, #84]	@ (8007350 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d10c      	bne.n	800731a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007306:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	4313      	orrs	r3, r2
 8007310:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	40010000 	.word	0x40010000
 800733c:	40010400 	.word	0x40010400
 8007340:	40000400 	.word	0x40000400
 8007344:	40000800 	.word	0x40000800
 8007348:	40000c00 	.word	0x40000c00
 800734c:	40001800 	.word	0x40001800
 8007350:	40014000 	.word	0x40014000

08007354 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e042      	b.n	80073ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800736c:	2b00      	cmp	r3, #0
 800736e:	d106      	bne.n	800737e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7f9 fee9 	bl	8001150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2224      	movs	r2, #36	@ 0x24
 8007382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0201 	bic.w	r2, r2, #1
 8007394:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fd90 	bl	8007ec4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f825 	bl	80073f4 <UART_SetConfig>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d101      	bne.n	80073b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e01b      	b.n	80073ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689a      	ldr	r2, [r3, #8]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f042 0201 	orr.w	r2, r2, #1
 80073e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fe0f 	bl	8008008 <UART_CheckIdleState>
 80073ea:	4603      	mov	r3, r0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073f8:	b092      	sub	sp, #72	@ 0x48
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	431a      	orrs	r2, r3
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	431a      	orrs	r2, r3
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	4313      	orrs	r3, r2
 800741a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	4bbe      	ldr	r3, [pc, #760]	@ (800771c <UART_SetConfig+0x328>)
 8007424:	4013      	ands	r3, r2
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	6812      	ldr	r2, [r2, #0]
 800742a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800742c:	430b      	orrs	r3, r1
 800742e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4ab3      	ldr	r2, [pc, #716]	@ (8007720 <UART_SetConfig+0x32c>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d004      	beq.n	8007460 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800745c:	4313      	orrs	r3, r2
 800745e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689a      	ldr	r2, [r3, #8]
 8007466:	4baf      	ldr	r3, [pc, #700]	@ (8007724 <UART_SetConfig+0x330>)
 8007468:	4013      	ands	r3, r2
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	6812      	ldr	r2, [r2, #0]
 800746e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007470:	430b      	orrs	r3, r1
 8007472:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747a:	f023 010f 	bic.w	r1, r3, #15
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4aa6      	ldr	r2, [pc, #664]	@ (8007728 <UART_SetConfig+0x334>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d177      	bne.n	8007584 <UART_SetConfig+0x190>
 8007494:	4ba5      	ldr	r3, [pc, #660]	@ (800772c <UART_SetConfig+0x338>)
 8007496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007498:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800749c:	2b28      	cmp	r3, #40	@ 0x28
 800749e:	d86d      	bhi.n	800757c <UART_SetConfig+0x188>
 80074a0:	a201      	add	r2, pc, #4	@ (adr r2, 80074a8 <UART_SetConfig+0xb4>)
 80074a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a6:	bf00      	nop
 80074a8:	0800754d 	.word	0x0800754d
 80074ac:	0800757d 	.word	0x0800757d
 80074b0:	0800757d 	.word	0x0800757d
 80074b4:	0800757d 	.word	0x0800757d
 80074b8:	0800757d 	.word	0x0800757d
 80074bc:	0800757d 	.word	0x0800757d
 80074c0:	0800757d 	.word	0x0800757d
 80074c4:	0800757d 	.word	0x0800757d
 80074c8:	08007555 	.word	0x08007555
 80074cc:	0800757d 	.word	0x0800757d
 80074d0:	0800757d 	.word	0x0800757d
 80074d4:	0800757d 	.word	0x0800757d
 80074d8:	0800757d 	.word	0x0800757d
 80074dc:	0800757d 	.word	0x0800757d
 80074e0:	0800757d 	.word	0x0800757d
 80074e4:	0800757d 	.word	0x0800757d
 80074e8:	0800755d 	.word	0x0800755d
 80074ec:	0800757d 	.word	0x0800757d
 80074f0:	0800757d 	.word	0x0800757d
 80074f4:	0800757d 	.word	0x0800757d
 80074f8:	0800757d 	.word	0x0800757d
 80074fc:	0800757d 	.word	0x0800757d
 8007500:	0800757d 	.word	0x0800757d
 8007504:	0800757d 	.word	0x0800757d
 8007508:	08007565 	.word	0x08007565
 800750c:	0800757d 	.word	0x0800757d
 8007510:	0800757d 	.word	0x0800757d
 8007514:	0800757d 	.word	0x0800757d
 8007518:	0800757d 	.word	0x0800757d
 800751c:	0800757d 	.word	0x0800757d
 8007520:	0800757d 	.word	0x0800757d
 8007524:	0800757d 	.word	0x0800757d
 8007528:	0800756d 	.word	0x0800756d
 800752c:	0800757d 	.word	0x0800757d
 8007530:	0800757d 	.word	0x0800757d
 8007534:	0800757d 	.word	0x0800757d
 8007538:	0800757d 	.word	0x0800757d
 800753c:	0800757d 	.word	0x0800757d
 8007540:	0800757d 	.word	0x0800757d
 8007544:	0800757d 	.word	0x0800757d
 8007548:	08007575 	.word	0x08007575
 800754c:	2301      	movs	r3, #1
 800754e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007552:	e222      	b.n	800799a <UART_SetConfig+0x5a6>
 8007554:	2304      	movs	r3, #4
 8007556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800755a:	e21e      	b.n	800799a <UART_SetConfig+0x5a6>
 800755c:	2308      	movs	r3, #8
 800755e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007562:	e21a      	b.n	800799a <UART_SetConfig+0x5a6>
 8007564:	2310      	movs	r3, #16
 8007566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800756a:	e216      	b.n	800799a <UART_SetConfig+0x5a6>
 800756c:	2320      	movs	r3, #32
 800756e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007572:	e212      	b.n	800799a <UART_SetConfig+0x5a6>
 8007574:	2340      	movs	r3, #64	@ 0x40
 8007576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800757a:	e20e      	b.n	800799a <UART_SetConfig+0x5a6>
 800757c:	2380      	movs	r3, #128	@ 0x80
 800757e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007582:	e20a      	b.n	800799a <UART_SetConfig+0x5a6>
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a69      	ldr	r2, [pc, #420]	@ (8007730 <UART_SetConfig+0x33c>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d130      	bne.n	80075f0 <UART_SetConfig+0x1fc>
 800758e:	4b67      	ldr	r3, [pc, #412]	@ (800772c <UART_SetConfig+0x338>)
 8007590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	2b05      	cmp	r3, #5
 8007598:	d826      	bhi.n	80075e8 <UART_SetConfig+0x1f4>
 800759a:	a201      	add	r2, pc, #4	@ (adr r2, 80075a0 <UART_SetConfig+0x1ac>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	080075b9 	.word	0x080075b9
 80075a4:	080075c1 	.word	0x080075c1
 80075a8:	080075c9 	.word	0x080075c9
 80075ac:	080075d1 	.word	0x080075d1
 80075b0:	080075d9 	.word	0x080075d9
 80075b4:	080075e1 	.word	0x080075e1
 80075b8:	2300      	movs	r3, #0
 80075ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075be:	e1ec      	b.n	800799a <UART_SetConfig+0x5a6>
 80075c0:	2304      	movs	r3, #4
 80075c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c6:	e1e8      	b.n	800799a <UART_SetConfig+0x5a6>
 80075c8:	2308      	movs	r3, #8
 80075ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ce:	e1e4      	b.n	800799a <UART_SetConfig+0x5a6>
 80075d0:	2310      	movs	r3, #16
 80075d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075d6:	e1e0      	b.n	800799a <UART_SetConfig+0x5a6>
 80075d8:	2320      	movs	r3, #32
 80075da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075de:	e1dc      	b.n	800799a <UART_SetConfig+0x5a6>
 80075e0:	2340      	movs	r3, #64	@ 0x40
 80075e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075e6:	e1d8      	b.n	800799a <UART_SetConfig+0x5a6>
 80075e8:	2380      	movs	r3, #128	@ 0x80
 80075ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ee:	e1d4      	b.n	800799a <UART_SetConfig+0x5a6>
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a4f      	ldr	r2, [pc, #316]	@ (8007734 <UART_SetConfig+0x340>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d130      	bne.n	800765c <UART_SetConfig+0x268>
 80075fa:	4b4c      	ldr	r3, [pc, #304]	@ (800772c <UART_SetConfig+0x338>)
 80075fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	2b05      	cmp	r3, #5
 8007604:	d826      	bhi.n	8007654 <UART_SetConfig+0x260>
 8007606:	a201      	add	r2, pc, #4	@ (adr r2, 800760c <UART_SetConfig+0x218>)
 8007608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760c:	08007625 	.word	0x08007625
 8007610:	0800762d 	.word	0x0800762d
 8007614:	08007635 	.word	0x08007635
 8007618:	0800763d 	.word	0x0800763d
 800761c:	08007645 	.word	0x08007645
 8007620:	0800764d 	.word	0x0800764d
 8007624:	2300      	movs	r3, #0
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762a:	e1b6      	b.n	800799a <UART_SetConfig+0x5a6>
 800762c:	2304      	movs	r3, #4
 800762e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007632:	e1b2      	b.n	800799a <UART_SetConfig+0x5a6>
 8007634:	2308      	movs	r3, #8
 8007636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800763a:	e1ae      	b.n	800799a <UART_SetConfig+0x5a6>
 800763c:	2310      	movs	r3, #16
 800763e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007642:	e1aa      	b.n	800799a <UART_SetConfig+0x5a6>
 8007644:	2320      	movs	r3, #32
 8007646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800764a:	e1a6      	b.n	800799a <UART_SetConfig+0x5a6>
 800764c:	2340      	movs	r3, #64	@ 0x40
 800764e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007652:	e1a2      	b.n	800799a <UART_SetConfig+0x5a6>
 8007654:	2380      	movs	r3, #128	@ 0x80
 8007656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800765a:	e19e      	b.n	800799a <UART_SetConfig+0x5a6>
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a35      	ldr	r2, [pc, #212]	@ (8007738 <UART_SetConfig+0x344>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d130      	bne.n	80076c8 <UART_SetConfig+0x2d4>
 8007666:	4b31      	ldr	r3, [pc, #196]	@ (800772c <UART_SetConfig+0x338>)
 8007668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800766a:	f003 0307 	and.w	r3, r3, #7
 800766e:	2b05      	cmp	r3, #5
 8007670:	d826      	bhi.n	80076c0 <UART_SetConfig+0x2cc>
 8007672:	a201      	add	r2, pc, #4	@ (adr r2, 8007678 <UART_SetConfig+0x284>)
 8007674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007678:	08007691 	.word	0x08007691
 800767c:	08007699 	.word	0x08007699
 8007680:	080076a1 	.word	0x080076a1
 8007684:	080076a9 	.word	0x080076a9
 8007688:	080076b1 	.word	0x080076b1
 800768c:	080076b9 	.word	0x080076b9
 8007690:	2300      	movs	r3, #0
 8007692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007696:	e180      	b.n	800799a <UART_SetConfig+0x5a6>
 8007698:	2304      	movs	r3, #4
 800769a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800769e:	e17c      	b.n	800799a <UART_SetConfig+0x5a6>
 80076a0:	2308      	movs	r3, #8
 80076a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076a6:	e178      	b.n	800799a <UART_SetConfig+0x5a6>
 80076a8:	2310      	movs	r3, #16
 80076aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ae:	e174      	b.n	800799a <UART_SetConfig+0x5a6>
 80076b0:	2320      	movs	r3, #32
 80076b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076b6:	e170      	b.n	800799a <UART_SetConfig+0x5a6>
 80076b8:	2340      	movs	r3, #64	@ 0x40
 80076ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076be:	e16c      	b.n	800799a <UART_SetConfig+0x5a6>
 80076c0:	2380      	movs	r3, #128	@ 0x80
 80076c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076c6:	e168      	b.n	800799a <UART_SetConfig+0x5a6>
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a1b      	ldr	r2, [pc, #108]	@ (800773c <UART_SetConfig+0x348>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d142      	bne.n	8007758 <UART_SetConfig+0x364>
 80076d2:	4b16      	ldr	r3, [pc, #88]	@ (800772c <UART_SetConfig+0x338>)
 80076d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076d6:	f003 0307 	and.w	r3, r3, #7
 80076da:	2b05      	cmp	r3, #5
 80076dc:	d838      	bhi.n	8007750 <UART_SetConfig+0x35c>
 80076de:	a201      	add	r2, pc, #4	@ (adr r2, 80076e4 <UART_SetConfig+0x2f0>)
 80076e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e4:	080076fd 	.word	0x080076fd
 80076e8:	08007705 	.word	0x08007705
 80076ec:	0800770d 	.word	0x0800770d
 80076f0:	08007715 	.word	0x08007715
 80076f4:	08007741 	.word	0x08007741
 80076f8:	08007749 	.word	0x08007749
 80076fc:	2300      	movs	r3, #0
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007702:	e14a      	b.n	800799a <UART_SetConfig+0x5a6>
 8007704:	2304      	movs	r3, #4
 8007706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770a:	e146      	b.n	800799a <UART_SetConfig+0x5a6>
 800770c:	2308      	movs	r3, #8
 800770e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007712:	e142      	b.n	800799a <UART_SetConfig+0x5a6>
 8007714:	2310      	movs	r3, #16
 8007716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800771a:	e13e      	b.n	800799a <UART_SetConfig+0x5a6>
 800771c:	cfff69f3 	.word	0xcfff69f3
 8007720:	58000c00 	.word	0x58000c00
 8007724:	11fff4ff 	.word	0x11fff4ff
 8007728:	40011000 	.word	0x40011000
 800772c:	58024400 	.word	0x58024400
 8007730:	40004400 	.word	0x40004400
 8007734:	40004800 	.word	0x40004800
 8007738:	40004c00 	.word	0x40004c00
 800773c:	40005000 	.word	0x40005000
 8007740:	2320      	movs	r3, #32
 8007742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007746:	e128      	b.n	800799a <UART_SetConfig+0x5a6>
 8007748:	2340      	movs	r3, #64	@ 0x40
 800774a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800774e:	e124      	b.n	800799a <UART_SetConfig+0x5a6>
 8007750:	2380      	movs	r3, #128	@ 0x80
 8007752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007756:	e120      	b.n	800799a <UART_SetConfig+0x5a6>
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4acb      	ldr	r2, [pc, #812]	@ (8007a8c <UART_SetConfig+0x698>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d176      	bne.n	8007850 <UART_SetConfig+0x45c>
 8007762:	4bcb      	ldr	r3, [pc, #812]	@ (8007a90 <UART_SetConfig+0x69c>)
 8007764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007766:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800776a:	2b28      	cmp	r3, #40	@ 0x28
 800776c:	d86c      	bhi.n	8007848 <UART_SetConfig+0x454>
 800776e:	a201      	add	r2, pc, #4	@ (adr r2, 8007774 <UART_SetConfig+0x380>)
 8007770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007774:	08007819 	.word	0x08007819
 8007778:	08007849 	.word	0x08007849
 800777c:	08007849 	.word	0x08007849
 8007780:	08007849 	.word	0x08007849
 8007784:	08007849 	.word	0x08007849
 8007788:	08007849 	.word	0x08007849
 800778c:	08007849 	.word	0x08007849
 8007790:	08007849 	.word	0x08007849
 8007794:	08007821 	.word	0x08007821
 8007798:	08007849 	.word	0x08007849
 800779c:	08007849 	.word	0x08007849
 80077a0:	08007849 	.word	0x08007849
 80077a4:	08007849 	.word	0x08007849
 80077a8:	08007849 	.word	0x08007849
 80077ac:	08007849 	.word	0x08007849
 80077b0:	08007849 	.word	0x08007849
 80077b4:	08007829 	.word	0x08007829
 80077b8:	08007849 	.word	0x08007849
 80077bc:	08007849 	.word	0x08007849
 80077c0:	08007849 	.word	0x08007849
 80077c4:	08007849 	.word	0x08007849
 80077c8:	08007849 	.word	0x08007849
 80077cc:	08007849 	.word	0x08007849
 80077d0:	08007849 	.word	0x08007849
 80077d4:	08007831 	.word	0x08007831
 80077d8:	08007849 	.word	0x08007849
 80077dc:	08007849 	.word	0x08007849
 80077e0:	08007849 	.word	0x08007849
 80077e4:	08007849 	.word	0x08007849
 80077e8:	08007849 	.word	0x08007849
 80077ec:	08007849 	.word	0x08007849
 80077f0:	08007849 	.word	0x08007849
 80077f4:	08007839 	.word	0x08007839
 80077f8:	08007849 	.word	0x08007849
 80077fc:	08007849 	.word	0x08007849
 8007800:	08007849 	.word	0x08007849
 8007804:	08007849 	.word	0x08007849
 8007808:	08007849 	.word	0x08007849
 800780c:	08007849 	.word	0x08007849
 8007810:	08007849 	.word	0x08007849
 8007814:	08007841 	.word	0x08007841
 8007818:	2301      	movs	r3, #1
 800781a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781e:	e0bc      	b.n	800799a <UART_SetConfig+0x5a6>
 8007820:	2304      	movs	r3, #4
 8007822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007826:	e0b8      	b.n	800799a <UART_SetConfig+0x5a6>
 8007828:	2308      	movs	r3, #8
 800782a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800782e:	e0b4      	b.n	800799a <UART_SetConfig+0x5a6>
 8007830:	2310      	movs	r3, #16
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007836:	e0b0      	b.n	800799a <UART_SetConfig+0x5a6>
 8007838:	2320      	movs	r3, #32
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783e:	e0ac      	b.n	800799a <UART_SetConfig+0x5a6>
 8007840:	2340      	movs	r3, #64	@ 0x40
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007846:	e0a8      	b.n	800799a <UART_SetConfig+0x5a6>
 8007848:	2380      	movs	r3, #128	@ 0x80
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800784e:	e0a4      	b.n	800799a <UART_SetConfig+0x5a6>
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a8f      	ldr	r2, [pc, #572]	@ (8007a94 <UART_SetConfig+0x6a0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d130      	bne.n	80078bc <UART_SetConfig+0x4c8>
 800785a:	4b8d      	ldr	r3, [pc, #564]	@ (8007a90 <UART_SetConfig+0x69c>)
 800785c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800785e:	f003 0307 	and.w	r3, r3, #7
 8007862:	2b05      	cmp	r3, #5
 8007864:	d826      	bhi.n	80078b4 <UART_SetConfig+0x4c0>
 8007866:	a201      	add	r2, pc, #4	@ (adr r2, 800786c <UART_SetConfig+0x478>)
 8007868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786c:	08007885 	.word	0x08007885
 8007870:	0800788d 	.word	0x0800788d
 8007874:	08007895 	.word	0x08007895
 8007878:	0800789d 	.word	0x0800789d
 800787c:	080078a5 	.word	0x080078a5
 8007880:	080078ad 	.word	0x080078ad
 8007884:	2300      	movs	r3, #0
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788a:	e086      	b.n	800799a <UART_SetConfig+0x5a6>
 800788c:	2304      	movs	r3, #4
 800788e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007892:	e082      	b.n	800799a <UART_SetConfig+0x5a6>
 8007894:	2308      	movs	r3, #8
 8007896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789a:	e07e      	b.n	800799a <UART_SetConfig+0x5a6>
 800789c:	2310      	movs	r3, #16
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a2:	e07a      	b.n	800799a <UART_SetConfig+0x5a6>
 80078a4:	2320      	movs	r3, #32
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078aa:	e076      	b.n	800799a <UART_SetConfig+0x5a6>
 80078ac:	2340      	movs	r3, #64	@ 0x40
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b2:	e072      	b.n	800799a <UART_SetConfig+0x5a6>
 80078b4:	2380      	movs	r3, #128	@ 0x80
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ba:	e06e      	b.n	800799a <UART_SetConfig+0x5a6>
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a75      	ldr	r2, [pc, #468]	@ (8007a98 <UART_SetConfig+0x6a4>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d130      	bne.n	8007928 <UART_SetConfig+0x534>
 80078c6:	4b72      	ldr	r3, [pc, #456]	@ (8007a90 <UART_SetConfig+0x69c>)
 80078c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	2b05      	cmp	r3, #5
 80078d0:	d826      	bhi.n	8007920 <UART_SetConfig+0x52c>
 80078d2:	a201      	add	r2, pc, #4	@ (adr r2, 80078d8 <UART_SetConfig+0x4e4>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	080078f1 	.word	0x080078f1
 80078dc:	080078f9 	.word	0x080078f9
 80078e0:	08007901 	.word	0x08007901
 80078e4:	08007909 	.word	0x08007909
 80078e8:	08007911 	.word	0x08007911
 80078ec:	08007919 	.word	0x08007919
 80078f0:	2300      	movs	r3, #0
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f6:	e050      	b.n	800799a <UART_SetConfig+0x5a6>
 80078f8:	2304      	movs	r3, #4
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fe:	e04c      	b.n	800799a <UART_SetConfig+0x5a6>
 8007900:	2308      	movs	r3, #8
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007906:	e048      	b.n	800799a <UART_SetConfig+0x5a6>
 8007908:	2310      	movs	r3, #16
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790e:	e044      	b.n	800799a <UART_SetConfig+0x5a6>
 8007910:	2320      	movs	r3, #32
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007916:	e040      	b.n	800799a <UART_SetConfig+0x5a6>
 8007918:	2340      	movs	r3, #64	@ 0x40
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791e:	e03c      	b.n	800799a <UART_SetConfig+0x5a6>
 8007920:	2380      	movs	r3, #128	@ 0x80
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007926:	e038      	b.n	800799a <UART_SetConfig+0x5a6>
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a5b      	ldr	r2, [pc, #364]	@ (8007a9c <UART_SetConfig+0x6a8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d130      	bne.n	8007994 <UART_SetConfig+0x5a0>
 8007932:	4b57      	ldr	r3, [pc, #348]	@ (8007a90 <UART_SetConfig+0x69c>)
 8007934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	2b05      	cmp	r3, #5
 800793c:	d826      	bhi.n	800798c <UART_SetConfig+0x598>
 800793e:	a201      	add	r2, pc, #4	@ (adr r2, 8007944 <UART_SetConfig+0x550>)
 8007940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007944:	0800795d 	.word	0x0800795d
 8007948:	08007965 	.word	0x08007965
 800794c:	0800796d 	.word	0x0800796d
 8007950:	08007975 	.word	0x08007975
 8007954:	0800797d 	.word	0x0800797d
 8007958:	08007985 	.word	0x08007985
 800795c:	2302      	movs	r3, #2
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007962:	e01a      	b.n	800799a <UART_SetConfig+0x5a6>
 8007964:	2304      	movs	r3, #4
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796a:	e016      	b.n	800799a <UART_SetConfig+0x5a6>
 800796c:	2308      	movs	r3, #8
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007972:	e012      	b.n	800799a <UART_SetConfig+0x5a6>
 8007974:	2310      	movs	r3, #16
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797a:	e00e      	b.n	800799a <UART_SetConfig+0x5a6>
 800797c:	2320      	movs	r3, #32
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007982:	e00a      	b.n	800799a <UART_SetConfig+0x5a6>
 8007984:	2340      	movs	r3, #64	@ 0x40
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798a:	e006      	b.n	800799a <UART_SetConfig+0x5a6>
 800798c:	2380      	movs	r3, #128	@ 0x80
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007992:	e002      	b.n	800799a <UART_SetConfig+0x5a6>
 8007994:	2380      	movs	r3, #128	@ 0x80
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a3f      	ldr	r2, [pc, #252]	@ (8007a9c <UART_SetConfig+0x6a8>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	f040 80f8 	bne.w	8007b96 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	dc46      	bgt.n	8007a3c <UART_SetConfig+0x648>
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	f2c0 8082 	blt.w	8007ab8 <UART_SetConfig+0x6c4>
 80079b4:	3b02      	subs	r3, #2
 80079b6:	2b1e      	cmp	r3, #30
 80079b8:	d87e      	bhi.n	8007ab8 <UART_SetConfig+0x6c4>
 80079ba:	a201      	add	r2, pc, #4	@ (adr r2, 80079c0 <UART_SetConfig+0x5cc>)
 80079bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c0:	08007a43 	.word	0x08007a43
 80079c4:	08007ab9 	.word	0x08007ab9
 80079c8:	08007a4b 	.word	0x08007a4b
 80079cc:	08007ab9 	.word	0x08007ab9
 80079d0:	08007ab9 	.word	0x08007ab9
 80079d4:	08007ab9 	.word	0x08007ab9
 80079d8:	08007a5b 	.word	0x08007a5b
 80079dc:	08007ab9 	.word	0x08007ab9
 80079e0:	08007ab9 	.word	0x08007ab9
 80079e4:	08007ab9 	.word	0x08007ab9
 80079e8:	08007ab9 	.word	0x08007ab9
 80079ec:	08007ab9 	.word	0x08007ab9
 80079f0:	08007ab9 	.word	0x08007ab9
 80079f4:	08007ab9 	.word	0x08007ab9
 80079f8:	08007a6b 	.word	0x08007a6b
 80079fc:	08007ab9 	.word	0x08007ab9
 8007a00:	08007ab9 	.word	0x08007ab9
 8007a04:	08007ab9 	.word	0x08007ab9
 8007a08:	08007ab9 	.word	0x08007ab9
 8007a0c:	08007ab9 	.word	0x08007ab9
 8007a10:	08007ab9 	.word	0x08007ab9
 8007a14:	08007ab9 	.word	0x08007ab9
 8007a18:	08007ab9 	.word	0x08007ab9
 8007a1c:	08007ab9 	.word	0x08007ab9
 8007a20:	08007ab9 	.word	0x08007ab9
 8007a24:	08007ab9 	.word	0x08007ab9
 8007a28:	08007ab9 	.word	0x08007ab9
 8007a2c:	08007ab9 	.word	0x08007ab9
 8007a30:	08007ab9 	.word	0x08007ab9
 8007a34:	08007ab9 	.word	0x08007ab9
 8007a38:	08007aab 	.word	0x08007aab
 8007a3c:	2b40      	cmp	r3, #64	@ 0x40
 8007a3e:	d037      	beq.n	8007ab0 <UART_SetConfig+0x6bc>
 8007a40:	e03a      	b.n	8007ab8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a42:	f7fe fd87 	bl	8006554 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a48:	e03c      	b.n	8007ac4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fe fd96 	bl	8006580 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a58:	e034      	b.n	8007ac4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a5a:	f107 0318 	add.w	r3, r7, #24
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fe fee2 	bl	8006828 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a68:	e02c      	b.n	8007ac4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a6a:	4b09      	ldr	r3, [pc, #36]	@ (8007a90 <UART_SetConfig+0x69c>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d016      	beq.n	8007aa4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a76:	4b06      	ldr	r3, [pc, #24]	@ (8007a90 <UART_SetConfig+0x69c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	08db      	lsrs	r3, r3, #3
 8007a7c:	f003 0303 	and.w	r3, r3, #3
 8007a80:	4a07      	ldr	r2, [pc, #28]	@ (8007aa0 <UART_SetConfig+0x6ac>)
 8007a82:	fa22 f303 	lsr.w	r3, r2, r3
 8007a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a88:	e01c      	b.n	8007ac4 <UART_SetConfig+0x6d0>
 8007a8a:	bf00      	nop
 8007a8c:	40011400 	.word	0x40011400
 8007a90:	58024400 	.word	0x58024400
 8007a94:	40007800 	.word	0x40007800
 8007a98:	40007c00 	.word	0x40007c00
 8007a9c:	58000c00 	.word	0x58000c00
 8007aa0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007aa4:	4b9d      	ldr	r3, [pc, #628]	@ (8007d1c <UART_SetConfig+0x928>)
 8007aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aa8:	e00c      	b.n	8007ac4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007aaa:	4b9d      	ldr	r3, [pc, #628]	@ (8007d20 <UART_SetConfig+0x92c>)
 8007aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aae:	e009      	b.n	8007ac4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ab0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ab6:	e005      	b.n	8007ac4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ac2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f000 81de 	beq.w	8007e88 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad0:	4a94      	ldr	r2, [pc, #592]	@ (8007d24 <UART_SetConfig+0x930>)
 8007ad2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ada:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ade:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	4413      	add	r3, r2
 8007aea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d305      	bcc.n	8007afc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d903      	bls.n	8007b04 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b02:	e1c1      	b.n	8007e88 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b06:	2200      	movs	r2, #0
 8007b08:	60bb      	str	r3, [r7, #8]
 8007b0a:	60fa      	str	r2, [r7, #12]
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b10:	4a84      	ldr	r2, [pc, #528]	@ (8007d24 <UART_SetConfig+0x930>)
 8007b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	2200      	movs	r2, #0
 8007b1a:	603b      	str	r3, [r7, #0]
 8007b1c:	607a      	str	r2, [r7, #4]
 8007b1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b26:	f7f8 fbd7 	bl	80002d8 <__aeabi_uldivmod>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4610      	mov	r0, r2
 8007b30:	4619      	mov	r1, r3
 8007b32:	f04f 0200 	mov.w	r2, #0
 8007b36:	f04f 0300 	mov.w	r3, #0
 8007b3a:	020b      	lsls	r3, r1, #8
 8007b3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b40:	0202      	lsls	r2, r0, #8
 8007b42:	6979      	ldr	r1, [r7, #20]
 8007b44:	6849      	ldr	r1, [r1, #4]
 8007b46:	0849      	lsrs	r1, r1, #1
 8007b48:	2000      	movs	r0, #0
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	eb12 0804 	adds.w	r8, r2, r4
 8007b52:	eb43 0905 	adc.w	r9, r3, r5
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	469a      	mov	sl, r3
 8007b5e:	4693      	mov	fp, r2
 8007b60:	4652      	mov	r2, sl
 8007b62:	465b      	mov	r3, fp
 8007b64:	4640      	mov	r0, r8
 8007b66:	4649      	mov	r1, r9
 8007b68:	f7f8 fbb6 	bl	80002d8 <__aeabi_uldivmod>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4613      	mov	r3, r2
 8007b72:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b7a:	d308      	bcc.n	8007b8e <UART_SetConfig+0x79a>
 8007b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b82:	d204      	bcs.n	8007b8e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b8a:	60da      	str	r2, [r3, #12]
 8007b8c:	e17c      	b.n	8007e88 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b94:	e178      	b.n	8007e88 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b9e:	f040 80c5 	bne.w	8007d2c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007ba2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007ba6:	2b20      	cmp	r3, #32
 8007ba8:	dc48      	bgt.n	8007c3c <UART_SetConfig+0x848>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	db7b      	blt.n	8007ca6 <UART_SetConfig+0x8b2>
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	d879      	bhi.n	8007ca6 <UART_SetConfig+0x8b2>
 8007bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb8 <UART_SetConfig+0x7c4>)
 8007bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb8:	08007c43 	.word	0x08007c43
 8007bbc:	08007c4b 	.word	0x08007c4b
 8007bc0:	08007ca7 	.word	0x08007ca7
 8007bc4:	08007ca7 	.word	0x08007ca7
 8007bc8:	08007c53 	.word	0x08007c53
 8007bcc:	08007ca7 	.word	0x08007ca7
 8007bd0:	08007ca7 	.word	0x08007ca7
 8007bd4:	08007ca7 	.word	0x08007ca7
 8007bd8:	08007c63 	.word	0x08007c63
 8007bdc:	08007ca7 	.word	0x08007ca7
 8007be0:	08007ca7 	.word	0x08007ca7
 8007be4:	08007ca7 	.word	0x08007ca7
 8007be8:	08007ca7 	.word	0x08007ca7
 8007bec:	08007ca7 	.word	0x08007ca7
 8007bf0:	08007ca7 	.word	0x08007ca7
 8007bf4:	08007ca7 	.word	0x08007ca7
 8007bf8:	08007c73 	.word	0x08007c73
 8007bfc:	08007ca7 	.word	0x08007ca7
 8007c00:	08007ca7 	.word	0x08007ca7
 8007c04:	08007ca7 	.word	0x08007ca7
 8007c08:	08007ca7 	.word	0x08007ca7
 8007c0c:	08007ca7 	.word	0x08007ca7
 8007c10:	08007ca7 	.word	0x08007ca7
 8007c14:	08007ca7 	.word	0x08007ca7
 8007c18:	08007ca7 	.word	0x08007ca7
 8007c1c:	08007ca7 	.word	0x08007ca7
 8007c20:	08007ca7 	.word	0x08007ca7
 8007c24:	08007ca7 	.word	0x08007ca7
 8007c28:	08007ca7 	.word	0x08007ca7
 8007c2c:	08007ca7 	.word	0x08007ca7
 8007c30:	08007ca7 	.word	0x08007ca7
 8007c34:	08007ca7 	.word	0x08007ca7
 8007c38:	08007c99 	.word	0x08007c99
 8007c3c:	2b40      	cmp	r3, #64	@ 0x40
 8007c3e:	d02e      	beq.n	8007c9e <UART_SetConfig+0x8aa>
 8007c40:	e031      	b.n	8007ca6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c42:	f7fc fcd1 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8007c46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c48:	e033      	b.n	8007cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c4a:	f7fc fce3 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
 8007c4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c50:	e02f      	b.n	8007cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe fc92 	bl	8006580 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c60:	e027      	b.n	8007cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c62:	f107 0318 	add.w	r3, r7, #24
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fe fdde 	bl	8006828 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c70:	e01f      	b.n	8007cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c72:	4b2d      	ldr	r3, [pc, #180]	@ (8007d28 <UART_SetConfig+0x934>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d009      	beq.n	8007c92 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8007d28 <UART_SetConfig+0x934>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	08db      	lsrs	r3, r3, #3
 8007c84:	f003 0303 	and.w	r3, r3, #3
 8007c88:	4a24      	ldr	r2, [pc, #144]	@ (8007d1c <UART_SetConfig+0x928>)
 8007c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c90:	e00f      	b.n	8007cb2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007c92:	4b22      	ldr	r3, [pc, #136]	@ (8007d1c <UART_SetConfig+0x928>)
 8007c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c96:	e00c      	b.n	8007cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c98:	4b21      	ldr	r3, [pc, #132]	@ (8007d20 <UART_SetConfig+0x92c>)
 8007c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c9c:	e009      	b.n	8007cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ca4:	e005      	b.n	8007cb2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007cb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 80e7 	beq.w	8007e88 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cbe:	4a19      	ldr	r2, [pc, #100]	@ (8007d24 <UART_SetConfig+0x930>)
 8007cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ccc:	005a      	lsls	r2, r3, #1
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	085b      	lsrs	r3, r3, #1
 8007cd4:	441a      	add	r2, r3
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cde:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce2:	2b0f      	cmp	r3, #15
 8007ce4:	d916      	bls.n	8007d14 <UART_SetConfig+0x920>
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cec:	d212      	bcs.n	8007d14 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	f023 030f 	bic.w	r3, r3, #15
 8007cf6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfa:	085b      	lsrs	r3, r3, #1
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	f003 0307 	and.w	r3, r3, #7
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d06:	4313      	orrs	r3, r2
 8007d08:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007d10:	60da      	str	r2, [r3, #12]
 8007d12:	e0b9      	b.n	8007e88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d1a:	e0b5      	b.n	8007e88 <UART_SetConfig+0xa94>
 8007d1c:	03d09000 	.word	0x03d09000
 8007d20:	003d0900 	.word	0x003d0900
 8007d24:	08008594 	.word	0x08008594
 8007d28:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d2c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	dc49      	bgt.n	8007dc8 <UART_SetConfig+0x9d4>
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	db7c      	blt.n	8007e32 <UART_SetConfig+0xa3e>
 8007d38:	2b20      	cmp	r3, #32
 8007d3a:	d87a      	bhi.n	8007e32 <UART_SetConfig+0xa3e>
 8007d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d44 <UART_SetConfig+0x950>)
 8007d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d42:	bf00      	nop
 8007d44:	08007dcf 	.word	0x08007dcf
 8007d48:	08007dd7 	.word	0x08007dd7
 8007d4c:	08007e33 	.word	0x08007e33
 8007d50:	08007e33 	.word	0x08007e33
 8007d54:	08007ddf 	.word	0x08007ddf
 8007d58:	08007e33 	.word	0x08007e33
 8007d5c:	08007e33 	.word	0x08007e33
 8007d60:	08007e33 	.word	0x08007e33
 8007d64:	08007def 	.word	0x08007def
 8007d68:	08007e33 	.word	0x08007e33
 8007d6c:	08007e33 	.word	0x08007e33
 8007d70:	08007e33 	.word	0x08007e33
 8007d74:	08007e33 	.word	0x08007e33
 8007d78:	08007e33 	.word	0x08007e33
 8007d7c:	08007e33 	.word	0x08007e33
 8007d80:	08007e33 	.word	0x08007e33
 8007d84:	08007dff 	.word	0x08007dff
 8007d88:	08007e33 	.word	0x08007e33
 8007d8c:	08007e33 	.word	0x08007e33
 8007d90:	08007e33 	.word	0x08007e33
 8007d94:	08007e33 	.word	0x08007e33
 8007d98:	08007e33 	.word	0x08007e33
 8007d9c:	08007e33 	.word	0x08007e33
 8007da0:	08007e33 	.word	0x08007e33
 8007da4:	08007e33 	.word	0x08007e33
 8007da8:	08007e33 	.word	0x08007e33
 8007dac:	08007e33 	.word	0x08007e33
 8007db0:	08007e33 	.word	0x08007e33
 8007db4:	08007e33 	.word	0x08007e33
 8007db8:	08007e33 	.word	0x08007e33
 8007dbc:	08007e33 	.word	0x08007e33
 8007dc0:	08007e33 	.word	0x08007e33
 8007dc4:	08007e25 	.word	0x08007e25
 8007dc8:	2b40      	cmp	r3, #64	@ 0x40
 8007dca:	d02e      	beq.n	8007e2a <UART_SetConfig+0xa36>
 8007dcc:	e031      	b.n	8007e32 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dce:	f7fc fc0b 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8007dd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007dd4:	e033      	b.n	8007e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dd6:	f7fc fc1d 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
 8007dda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ddc:	e02f      	b.n	8007e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fe fbcc 	bl	8006580 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dec:	e027      	b.n	8007e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dee:	f107 0318 	add.w	r3, r7, #24
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fe fd18 	bl	8006828 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dfc:	e01f      	b.n	8007e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8007eb4 <UART_SetConfig+0xac0>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0320 	and.w	r3, r3, #32
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d009      	beq.n	8007e1e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8007eb4 <UART_SetConfig+0xac0>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	08db      	lsrs	r3, r3, #3
 8007e10:	f003 0303 	and.w	r3, r3, #3
 8007e14:	4a28      	ldr	r2, [pc, #160]	@ (8007eb8 <UART_SetConfig+0xac4>)
 8007e16:	fa22 f303 	lsr.w	r3, r2, r3
 8007e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e1c:	e00f      	b.n	8007e3e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007e1e:	4b26      	ldr	r3, [pc, #152]	@ (8007eb8 <UART_SetConfig+0xac4>)
 8007e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e22:	e00c      	b.n	8007e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e24:	4b25      	ldr	r3, [pc, #148]	@ (8007ebc <UART_SetConfig+0xac8>)
 8007e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e28:	e009      	b.n	8007e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e30:	e005      	b.n	8007e3e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007e32:	2300      	movs	r3, #0
 8007e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007e3c:	bf00      	nop
    }

    if (pclk != 0U)
 8007e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d021      	beq.n	8007e88 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e48:	4a1d      	ldr	r2, [pc, #116]	@ (8007ec0 <UART_SetConfig+0xacc>)
 8007e4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e52:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	085b      	lsrs	r3, r3, #1
 8007e5c:	441a      	add	r2, r3
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e66:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6a:	2b0f      	cmp	r3, #15
 8007e6c:	d909      	bls.n	8007e82 <UART_SetConfig+0xa8e>
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e74:	d205      	bcs.n	8007e82 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	60da      	str	r2, [r3, #12]
 8007e80:	e002      	b.n	8007e88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007ea4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3748      	adds	r7, #72	@ 0x48
 8007eac:	46bd      	mov	sp, r7
 8007eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eb2:	bf00      	nop
 8007eb4:	58024400 	.word	0x58024400
 8007eb8:	03d09000 	.word	0x03d09000
 8007ebc:	003d0900 	.word	0x003d0900
 8007ec0:	08008594 	.word	0x08008594

08007ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed0:	f003 0308 	and.w	r3, r3, #8
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00a      	beq.n	8007eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	430a      	orrs	r2, r1
 8007eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00a      	beq.n	8007f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f14:	f003 0302 	and.w	r3, r3, #2
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00a      	beq.n	8007f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f36:	f003 0304 	and.w	r3, r3, #4
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00a      	beq.n	8007f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	430a      	orrs	r2, r1
 8007f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f58:	f003 0310 	and.w	r3, r3, #16
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00a      	beq.n	8007f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7a:	f003 0320 	and.w	r3, r3, #32
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00a      	beq.n	8007f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d01a      	beq.n	8007fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	430a      	orrs	r2, r1
 8007fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fc2:	d10a      	bne.n	8007fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00a      	beq.n	8007ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	605a      	str	r2, [r3, #4]
  }
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b098      	sub	sp, #96	@ 0x60
 800800c:	af02      	add	r7, sp, #8
 800800e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008018:	f7f9 fabc 	bl	8001594 <HAL_GetTick>
 800801c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0308 	and.w	r3, r3, #8
 8008028:	2b08      	cmp	r3, #8
 800802a:	d12f      	bne.n	800808c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800802c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008034:	2200      	movs	r2, #0
 8008036:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f88e 	bl	800815c <UART_WaitOnFlagUntilTimeout>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d022      	beq.n	800808c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804e:	e853 3f00 	ldrex	r3, [r3]
 8008052:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008056:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800805a:	653b      	str	r3, [r7, #80]	@ 0x50
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	461a      	mov	r2, r3
 8008062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008064:	647b      	str	r3, [r7, #68]	@ 0x44
 8008066:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008068:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800806a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800806c:	e841 2300 	strex	r3, r2, [r1]
 8008070:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1e6      	bne.n	8008046 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2220      	movs	r2, #32
 800807c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e063      	b.n	8008154 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0304 	and.w	r3, r3, #4
 8008096:	2b04      	cmp	r3, #4
 8008098:	d149      	bne.n	800812e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800809a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080a2:	2200      	movs	r2, #0
 80080a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f857 	bl	800815c <UART_WaitOnFlagUntilTimeout>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d03c      	beq.n	800812e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	623b      	str	r3, [r7, #32]
   return(result);
 80080c2:	6a3b      	ldr	r3, [r7, #32]
 80080c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80080d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080da:	e841 2300 	strex	r3, r2, [r1]
 80080de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e6      	bne.n	80080b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3308      	adds	r3, #8
 80080ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	e853 3f00 	ldrex	r3, [r3]
 80080f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f023 0301 	bic.w	r3, r3, #1
 80080fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3308      	adds	r3, #8
 8008104:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008106:	61fa      	str	r2, [r7, #28]
 8008108:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810a:	69b9      	ldr	r1, [r7, #24]
 800810c:	69fa      	ldr	r2, [r7, #28]
 800810e:	e841 2300 	strex	r3, r2, [r1]
 8008112:	617b      	str	r3, [r7, #20]
   return(result);
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1e5      	bne.n	80080e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2220      	movs	r2, #32
 800811e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e012      	b.n	8008154 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2220      	movs	r2, #32
 8008132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2220      	movs	r2, #32
 800813a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3758      	adds	r7, #88	@ 0x58
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	603b      	str	r3, [r7, #0]
 8008168:	4613      	mov	r3, r2
 800816a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800816c:	e04f      	b.n	800820e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008174:	d04b      	beq.n	800820e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008176:	f7f9 fa0d 	bl	8001594 <HAL_GetTick>
 800817a:	4602      	mov	r2, r0
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	429a      	cmp	r2, r3
 8008184:	d302      	bcc.n	800818c <UART_WaitOnFlagUntilTimeout+0x30>
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e04e      	b.n	800822e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0304 	and.w	r3, r3, #4
 800819a:	2b00      	cmp	r3, #0
 800819c:	d037      	beq.n	800820e <UART_WaitOnFlagUntilTimeout+0xb2>
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	2b80      	cmp	r3, #128	@ 0x80
 80081a2:	d034      	beq.n	800820e <UART_WaitOnFlagUntilTimeout+0xb2>
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2b40      	cmp	r3, #64	@ 0x40
 80081a8:	d031      	beq.n	800820e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	69db      	ldr	r3, [r3, #28]
 80081b0:	f003 0308 	and.w	r3, r3, #8
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	d110      	bne.n	80081da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2208      	movs	r2, #8
 80081be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 f839 	bl	8008238 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2208      	movs	r2, #8
 80081ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e029      	b.n	800822e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	69db      	ldr	r3, [r3, #28]
 80081e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081e8:	d111      	bne.n	800820e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f000 f81f 	bl	8008238 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2220      	movs	r2, #32
 80081fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800820a:	2303      	movs	r3, #3
 800820c:	e00f      	b.n	800822e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69da      	ldr	r2, [r3, #28]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	4013      	ands	r3, r2
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	429a      	cmp	r2, r3
 800821c:	bf0c      	ite	eq
 800821e:	2301      	moveq	r3, #1
 8008220:	2300      	movne	r3, #0
 8008222:	b2db      	uxtb	r3, r3
 8008224:	461a      	mov	r2, r3
 8008226:	79fb      	ldrb	r3, [r7, #7]
 8008228:	429a      	cmp	r2, r3
 800822a:	d0a0      	beq.n	800816e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
	...

08008238 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008238:	b480      	push	{r7}
 800823a:	b095      	sub	sp, #84	@ 0x54
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008248:	e853 3f00 	ldrex	r3, [r3]
 800824c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800824e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008250:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008254:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	461a      	mov	r2, r3
 800825c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800825e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008260:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008262:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008264:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008266:	e841 2300 	strex	r3, r2, [r1]
 800826a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800826c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1e6      	bne.n	8008240 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3308      	adds	r3, #8
 8008278:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	e853 3f00 	ldrex	r3, [r3]
 8008280:	61fb      	str	r3, [r7, #28]
   return(result);
 8008282:	69fa      	ldr	r2, [r7, #28]
 8008284:	4b1e      	ldr	r3, [pc, #120]	@ (8008300 <UART_EndRxTransfer+0xc8>)
 8008286:	4013      	ands	r3, r2
 8008288:	64bb      	str	r3, [r7, #72]	@ 0x48
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3308      	adds	r3, #8
 8008290:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008292:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008294:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008296:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008298:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800829a:	e841 2300 	strex	r3, r2, [r1]
 800829e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1e5      	bne.n	8008272 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d118      	bne.n	80082e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	e853 3f00 	ldrex	r3, [r3]
 80082ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	f023 0310 	bic.w	r3, r3, #16
 80082c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	461a      	mov	r2, r3
 80082ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082cc:	61bb      	str	r3, [r7, #24]
 80082ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d0:	6979      	ldr	r1, [r7, #20]
 80082d2:	69ba      	ldr	r2, [r7, #24]
 80082d4:	e841 2300 	strex	r3, r2, [r1]
 80082d8:	613b      	str	r3, [r7, #16]
   return(result);
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1e6      	bne.n	80082ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2220      	movs	r2, #32
 80082e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80082f4:	bf00      	nop
 80082f6:	3754      	adds	r7, #84	@ 0x54
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	effffffe 	.word	0xeffffffe

08008304 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008312:	2b01      	cmp	r3, #1
 8008314:	d101      	bne.n	800831a <HAL_UARTEx_DisableFifoMode+0x16>
 8008316:	2302      	movs	r3, #2
 8008318:	e027      	b.n	800836a <HAL_UARTEx_DisableFifoMode+0x66>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2224      	movs	r2, #36	@ 0x24
 8008326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f022 0201 	bic.w	r2, r2, #1
 8008340:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008348:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2220      	movs	r2, #32
 800835c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr

08008376 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b084      	sub	sp, #16
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008386:	2b01      	cmp	r3, #1
 8008388:	d101      	bne.n	800838e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800838a:	2302      	movs	r3, #2
 800838c:	e02d      	b.n	80083ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2224      	movs	r2, #36	@ 0x24
 800839a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f022 0201 	bic.w	r2, r2, #1
 80083b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	683a      	ldr	r2, [r7, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f850 	bl	8008470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2220      	movs	r2, #32
 80083dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008402:	2b01      	cmp	r3, #1
 8008404:	d101      	bne.n	800840a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008406:	2302      	movs	r3, #2
 8008408:	e02d      	b.n	8008466 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2224      	movs	r2, #36	@ 0x24
 8008416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f022 0201 	bic.w	r2, r2, #1
 8008430:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	430a      	orrs	r2, r1
 8008444:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f812 	bl	8008470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2220      	movs	r2, #32
 8008458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
	...

08008470 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800847c:	2b00      	cmp	r3, #0
 800847e:	d108      	bne.n	8008492 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008490:	e031      	b.n	80084f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008492:	2310      	movs	r3, #16
 8008494:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008496:	2310      	movs	r3, #16
 8008498:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	0e5b      	lsrs	r3, r3, #25
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	f003 0307 	and.w	r3, r3, #7
 80084a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	0f5b      	lsrs	r3, r3, #29
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	f003 0307 	and.w	r3, r3, #7
 80084b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	7b3a      	ldrb	r2, [r7, #12]
 80084be:	4911      	ldr	r1, [pc, #68]	@ (8008504 <UARTEx_SetNbDataToProcess+0x94>)
 80084c0:	5c8a      	ldrb	r2, [r1, r2]
 80084c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084c6:	7b3a      	ldrb	r2, [r7, #12]
 80084c8:	490f      	ldr	r1, [pc, #60]	@ (8008508 <UARTEx_SetNbDataToProcess+0x98>)
 80084ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
 80084da:	7b7a      	ldrb	r2, [r7, #13]
 80084dc:	4909      	ldr	r1, [pc, #36]	@ (8008504 <UARTEx_SetNbDataToProcess+0x94>)
 80084de:	5c8a      	ldrb	r2, [r1, r2]
 80084e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084e4:	7b7a      	ldrb	r2, [r7, #13]
 80084e6:	4908      	ldr	r1, [pc, #32]	@ (8008508 <UARTEx_SetNbDataToProcess+0x98>)
 80084e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80084f6:	bf00      	nop
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	080085ac 	.word	0x080085ac
 8008508:	080085b4 	.word	0x080085b4

0800850c <memset>:
 800850c:	4402      	add	r2, r0
 800850e:	4603      	mov	r3, r0
 8008510:	4293      	cmp	r3, r2
 8008512:	d100      	bne.n	8008516 <memset+0xa>
 8008514:	4770      	bx	lr
 8008516:	f803 1b01 	strb.w	r1, [r3], #1
 800851a:	e7f9      	b.n	8008510 <memset+0x4>

0800851c <__libc_init_array>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	4d0d      	ldr	r5, [pc, #52]	@ (8008554 <__libc_init_array+0x38>)
 8008520:	4c0d      	ldr	r4, [pc, #52]	@ (8008558 <__libc_init_array+0x3c>)
 8008522:	1b64      	subs	r4, r4, r5
 8008524:	10a4      	asrs	r4, r4, #2
 8008526:	2600      	movs	r6, #0
 8008528:	42a6      	cmp	r6, r4
 800852a:	d109      	bne.n	8008540 <__libc_init_array+0x24>
 800852c:	4d0b      	ldr	r5, [pc, #44]	@ (800855c <__libc_init_array+0x40>)
 800852e:	4c0c      	ldr	r4, [pc, #48]	@ (8008560 <__libc_init_array+0x44>)
 8008530:	f000 f818 	bl	8008564 <_init>
 8008534:	1b64      	subs	r4, r4, r5
 8008536:	10a4      	asrs	r4, r4, #2
 8008538:	2600      	movs	r6, #0
 800853a:	42a6      	cmp	r6, r4
 800853c:	d105      	bne.n	800854a <__libc_init_array+0x2e>
 800853e:	bd70      	pop	{r4, r5, r6, pc}
 8008540:	f855 3b04 	ldr.w	r3, [r5], #4
 8008544:	4798      	blx	r3
 8008546:	3601      	adds	r6, #1
 8008548:	e7ee      	b.n	8008528 <__libc_init_array+0xc>
 800854a:	f855 3b04 	ldr.w	r3, [r5], #4
 800854e:	4798      	blx	r3
 8008550:	3601      	adds	r6, #1
 8008552:	e7f2      	b.n	800853a <__libc_init_array+0x1e>
 8008554:	080085c4 	.word	0x080085c4
 8008558:	080085c4 	.word	0x080085c4
 800855c:	080085c4 	.word	0x080085c4
 8008560:	080085c8 	.word	0x080085c8

08008564 <_init>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	bf00      	nop
 8008568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856a:	bc08      	pop	{r3}
 800856c:	469e      	mov	lr, r3
 800856e:	4770      	bx	lr

08008570 <_fini>:
 8008570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008572:	bf00      	nop
 8008574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008576:	bc08      	pop	{r3}
 8008578:	469e      	mov	lr, r3
 800857a:	4770      	bx	lr
