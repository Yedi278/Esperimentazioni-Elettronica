
DMA_first.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082f0  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008588  08008588  00009588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080085c8  080085c8  000095c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080085d0  080085d0  000095d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080085d4  080085d4  000095d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  080085d8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000324  24000014  080085ec  0000a014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000338  080085ec  0000a338  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000186e2  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a7d  00000000  00000000  00022724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001310  00000000  00000000  000251a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ee4  00000000  00000000  000264b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038e1c  00000000  00000000  0002739c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a623  00000000  00000000  000601b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00176589  00000000  00000000  0007a7db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f0d64  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005168  00000000  00000000  001f0da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007c  00000000  00000000  001f5f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008570 	.word	0x08008570

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	08008570 	.word	0x08008570

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADC_custom_init>:
bool pre_triggd = false;
bool triggd = false;
uint16_t trig_indx=1;
uint16_t trig_indx_c;

void ADC_custom_init(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0


//	ADC3->CR &= ~ADC_CR_ADSTART;
	ADC3->SQR1=0; // per azzerare la configurazione dell'ide
 80005cc:	4b30      	ldr	r3, [pc, #192]	@ (8000690 <ADC_custom_init+0xc8>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere
 80005d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000690 <ADC_custom_init+0xc8>)
 80005d4:	4a2e      	ldr	r2, [pc, #184]	@ (8000690 <ADC_custom_init+0xc8>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_SQ1_Pos);
 80005da:	4b2d      	ldr	r3, [pc, #180]	@ (8000690 <ADC_custom_init+0xc8>)
 80005dc:	4a2c      	ldr	r2, [pc, #176]	@ (8000690 <ADC_custom_init+0xc8>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->PCSEL |= ADC_PCSEL_PCSEL_0; // Dichiaro quali canali leggere : 18 e 19
 80005e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <ADC_custom_init+0xc8>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a2a      	ldr	r2, [pc, #168]	@ (8000690 <ADC_custom_init+0xc8>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	61d3      	str	r3, [r2, #28]


	/* Calibrazione */
	ADC3->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 80005ee:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <ADC_custom_init+0xc8>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	4a27      	ldr	r2, [pc, #156]	@ (8000690 <ADC_custom_init+0xc8>)
 80005f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80005f8:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 80005fa:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <ADC_custom_init+0xc8>)
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	4a24      	ldr	r2, [pc, #144]	@ (8000690 <ADC_custom_init+0xc8>)
 8000600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000604:	6093      	str	r3, [r2, #8]
	ADC3->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 8000606:	4b22      	ldr	r3, [pc, #136]	@ (8000690 <ADC_custom_init+0xc8>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	4a21      	ldr	r2, [pc, #132]	@ (8000690 <ADC_custom_init+0xc8>)
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 8000612:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <ADC_custom_init+0xc8>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	4a1e      	ldr	r2, [pc, #120]	@ (8000690 <ADC_custom_init+0xc8>)
 8000618:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800061c:	6093      	str	r3, [r2, #8]


	while((ADC3->CR & ADC_CR_ADCAL) != 0){};
 800061e:	bf00      	nop
 8000620:	4b1b      	ldr	r3, [pc, #108]	@ (8000690 <ADC_custom_init+0xc8>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	2b00      	cmp	r3, #0
 8000626:	dbfb      	blt.n	8000620 <ADC_custom_init+0x58>
	// FIne calibrazione

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000628:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <ADC_custom_init+0xc8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a18      	ldr	r2, [pc, #96]	@ (8000690 <ADC_custom_init+0xc8>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]
	ADC3->CR |= ADC_CR_ADEN;		// Accendo l' ADC
 8000634:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <ADC_custom_init+0xc8>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	4a15      	ldr	r2, [pc, #84]	@ (8000690 <ADC_custom_init+0xc8>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6093      	str	r3, [r2, #8]

	while((ADC3->ISR & ADC_ISR_ADRDY) != 0){}
 8000640:	bf00      	nop
 8000642:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <ADC_custom_init+0xc8>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f9      	bne.n	8000642 <ADC_custom_init+0x7a>

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 800064e:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <ADC_custom_init+0xc8>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a0f      	ldr	r2, [pc, #60]	@ (8000690 <ADC_custom_init+0xc8>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6013      	str	r3, [r2, #0]
	// Fine accensione

	/* ADR ACCESO */

	TIM6->PSC = 1;
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <ADC_custom_init+0xcc>)
 800065c:	2201      	movs	r2, #1
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 50;
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <ADC_custom_init+0xcc>)
 8000662:	2232      	movs	r2, #50	@ 0x32
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CNT = 0;
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <ADC_custom_init+0xcc>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->DIER &= ~TIM_DIER_UIE;
 800066c:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <ADC_custom_init+0xcc>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	4a08      	ldr	r2, [pc, #32]	@ (8000694 <ADC_custom_init+0xcc>)
 8000672:	f023 0301 	bic.w	r3, r3, #1
 8000676:	60d3      	str	r3, [r2, #12]

	ADC3->IER |= ADC_IER_EOCIE;
 8000678:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <ADC_custom_init+0xc8>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	4a04      	ldr	r2, [pc, #16]	@ (8000690 <ADC_custom_init+0xc8>)
 800067e:	f043 0304 	orr.w	r3, r3, #4
 8000682:	6053      	str	r3, [r2, #4]
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	58026000 	.word	0x58026000
 8000694:	40001000 	.word	0x40001000

08000698 <ADC_custom_interrupt>:



void ADC_custom_interrupt(){
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

	trig_indx_c = DMA2_Stream0->NDTR;
 800069c:	4b30      	ldr	r3, [pc, #192]	@ (8000760 <ADC_custom_interrupt+0xc8>)
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4b30      	ldr	r3, [pc, #192]	@ (8000764 <ADC_custom_interrupt+0xcc>)
 80006a4:	801a      	strh	r2, [r3, #0]
	raw_data = ADC3->DR;
 80006a6:	4b30      	ldr	r3, [pc, #192]	@ (8000768 <ADC_custom_interrupt+0xd0>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	4b2f      	ldr	r3, [pc, #188]	@ (800076c <ADC_custom_interrupt+0xd4>)
 80006ae:	801a      	strh	r2, [r3, #0]

	if(triggd && (trig_indx_c == trig_indx)){
 80006b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000770 <ADC_custom_interrupt+0xd8>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d015      	beq.n	80006e4 <ADC_custom_interrupt+0x4c>
 80006b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000764 <ADC_custom_interrupt+0xcc>)
 80006ba:	881a      	ldrh	r2, [r3, #0]
 80006bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <ADC_custom_interrupt+0xdc>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d10f      	bne.n	80006e4 <ADC_custom_interrupt+0x4c>

		TIM6->CR1 &= ~TIM_CR1_CEN;
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <ADC_custom_interrupt+0xe0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a2b      	ldr	r2, [pc, #172]	@ (8000778 <ADC_custom_interrupt+0xe0>)
 80006ca:	f023 0301 	bic.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

		triggd = false;
 80006d0:	4b27      	ldr	r3, [pc, #156]	@ (8000770 <ADC_custom_interrupt+0xd8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]

		USART3->CR3 |= USART_CR3_DMAT;
 80006d6:	4b29      	ldr	r3, [pc, #164]	@ (800077c <ADC_custom_interrupt+0xe4>)
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	4a28      	ldr	r2, [pc, #160]	@ (800077c <ADC_custom_interrupt+0xe4>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006e0:	6093      	str	r3, [r2, #8]
		return;
 80006e2:	e039      	b.n	8000758 <ADC_custom_interrupt+0xc0>
	}

	if(!triggd && !pre_triggd && (raw_data < PRETRIG_VALUE) ){
 80006e4:	4b22      	ldr	r3, [pc, #136]	@ (8000770 <ADC_custom_interrupt+0xd8>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	f083 0301 	eor.w	r3, r3, #1
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d010      	beq.n	8000714 <ADC_custom_interrupt+0x7c>
 80006f2:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <ADC_custom_interrupt+0xe8>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	f083 0301 	eor.w	r3, r3, #1
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d009      	beq.n	8000714 <ADC_custom_interrupt+0x7c>
 8000700:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <ADC_custom_interrupt+0xd4>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	b29b      	uxth	r3, r3
 8000706:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800070a:	d203      	bcs.n	8000714 <ADC_custom_interrupt+0x7c>
		pre_triggd = true;
 800070c:	4b1c      	ldr	r3, [pc, #112]	@ (8000780 <ADC_custom_interrupt+0xe8>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
		return;
 8000712:	e021      	b.n	8000758 <ADC_custom_interrupt+0xc0>
	}

	if(pre_triggd && !triggd && (raw_data > TRIG_VALUE)){
 8000714:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <ADC_custom_interrupt+0xe8>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d017      	beq.n	800074c <ADC_custom_interrupt+0xb4>
 800071c:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <ADC_custom_interrupt+0xd8>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	f083 0301 	eor.w	r3, r3, #1
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d010      	beq.n	800074c <ADC_custom_interrupt+0xb4>
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <ADC_custom_interrupt+0xd4>)
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	b29b      	uxth	r3, r3
 8000730:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000734:	d90a      	bls.n	800074c <ADC_custom_interrupt+0xb4>
		triggd = true;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <ADC_custom_interrupt+0xd8>)
 8000738:	2201      	movs	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
		pre_triggd = false;
 800073c:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <ADC_custom_interrupt+0xe8>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
		trig_indx = trig_indx_c;
 8000742:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <ADC_custom_interrupt+0xcc>)
 8000744:	881a      	ldrh	r2, [r3, #0]
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <ADC_custom_interrupt+0xdc>)
 8000748:	801a      	strh	r2, [r3, #0]
		return;
 800074a:	e005      	b.n	8000758 <ADC_custom_interrupt+0xc0>
	}

	ADC3->ISR |= ADC_ISR_EOC;
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <ADC_custom_interrupt+0xd0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a05      	ldr	r2, [pc, #20]	@ (8000768 <ADC_custom_interrupt+0xd0>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	40020410 	.word	0x40020410
 8000764:	24000034 	.word	0x24000034
 8000768:	58026000 	.word	0x58026000
 800076c:	24000030 	.word	0x24000030
 8000770:	24000033 	.word	0x24000033
 8000774:	24000000 	.word	0x24000000
 8000778:	40001000 	.word	0x40001000
 800077c:	40004800 	.word	0x40004800
 8000780:	24000032 	.word	0x24000032

08000784 <DMA_custom_init>:

#define DMA_DATA_BUFF_SIZE 100

uint16_t DMA_data_buffer[DMA_DATA_BUFF_SIZE];

void DMA_custom_init(){
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0

	DMA2_Stream0->M0AR = (uint32_t) (&DMA_data_buffer);	// inidico l'indirizzo dello storarge di dati
 800078a:	4b1f      	ldr	r3, [pc, #124]	@ (8000808 <DMA_custom_init+0x84>)
 800078c:	4a1f      	ldr	r2, [pc, #124]	@ (800080c <DMA_custom_init+0x88>)
 800078e:	60da      	str	r2, [r3, #12]
	DMA2_Stream1->M0AR = (uint32_t) (&DMA_data_buffer);
 8000790:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <DMA_custom_init+0x8c>)
 8000792:	4a1e      	ldr	r2, [pc, #120]	@ (800080c <DMA_custom_init+0x88>)
 8000794:	60da      	str	r2, [r3, #12]

	DMA2_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
 8000796:	4b1c      	ldr	r3, [pc, #112]	@ (8000808 <DMA_custom_init+0x84>)
 8000798:	4a1e      	ldr	r2, [pc, #120]	@ (8000814 <DMA_custom_init+0x90>)
 800079a:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->PAR = (uint32_t) (&USART3->TDR);
 800079c:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <DMA_custom_init+0x8c>)
 800079e:	4a1e      	ldr	r2, [pc, #120]	@ (8000818 <DMA_custom_init+0x94>)
 80007a0:	609a      	str	r2, [r3, #8]

	uint32_t n_misure = DMA_DATA_BUFF_SIZE;
 80007a2:	2364      	movs	r3, #100	@ 0x64
 80007a4:	607b      	str	r3, [r7, #4]

	DMA2_Stream0->NDTR = n_misure;			// numero elementi da prendere da ADC3
 80007a6:	4a18      	ldr	r2, [pc, #96]	@ (8000808 <DMA_custom_init+0x84>)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6053      	str	r3, [r2, #4]
	DMA2_Stream1->NDTR = n_misure*2;			// numero elementi da mandare a USART3
 80007ac:	4a18      	ldr	r2, [pc, #96]	@ (8000810 <DMA_custom_init+0x8c>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	6053      	str	r3, [r2, #4]

	DMA2_Stream0->CR &= ~DMA_SxCR_TCIE;		// disablilito interrupt di fine ricezione
 80007b4:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <DMA_custom_init+0x84>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a13      	ldr	r2, [pc, #76]	@ (8000808 <DMA_custom_init+0x84>)
 80007ba:	f023 0310 	bic.w	r3, r3, #16
 80007be:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine trasmissione
 80007c0:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <DMA_custom_init+0x8c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a12      	ldr	r2, [pc, #72]	@ (8000810 <DMA_custom_init+0x8c>)
 80007c6:	f043 0310 	orr.w	r3, r3, #16
 80007ca:	6013      	str	r3, [r2, #0]

	ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);	// DMA in single shot mode
 80007cc:	4b13      	ldr	r3, [pc, #76]	@ (800081c <DMA_custom_init+0x98>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	4a12      	ldr	r2, [pc, #72]	@ (800081c <DMA_custom_init+0x98>)
 80007d2:	f043 0303 	orr.w	r3, r3, #3
 80007d6:	60d3      	str	r3, [r2, #12]

	DMA2_Stream0->CR |= DMA_SxCR_EN;
 80007d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <DMA_custom_init+0x84>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000808 <DMA_custom_init+0x84>)
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_EN;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <DMA_custom_init+0x8c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a09      	ldr	r2, [pc, #36]	@ (8000810 <DMA_custom_init+0x8c>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	6013      	str	r3, [r2, #0]

	ADC3->CR  |= ADC_CR_ADSTART;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <DMA_custom_init+0x98>)
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	4a09      	ldr	r2, [pc, #36]	@ (800081c <DMA_custom_init+0x98>)
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	6093      	str	r3, [r2, #8]

	//TIM6->CR1 |= TIM_CR1_CEN;	LO ACCENDO NELL'USART3 INTERR
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	40020410 	.word	0x40020410
 800080c:	24000038 	.word	0x24000038
 8000810:	40020428 	.word	0x40020428
 8000814:	58026040 	.word	0x58026040
 8000818:	40004828 	.word	0x40004828
 800081c:	58026000 	.word	0x58026000

08000820 <DMA_custom_interrupt_tx>:


void DMA_custom_interrupt_tx(){
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

	extern uint16_t trig_indx;

	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 8000824:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <DMA_custom_interrupt_tx+0x80>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	4a1d      	ldr	r2, [pc, #116]	@ (80008a0 <DMA_custom_interrupt_tx+0x80>)
 800082a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800082e:	6093      	str	r3, [r2, #8]

	DMA2->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 8000830:	4b1c      	ldr	r3, [pc, #112]	@ (80008a4 <DMA_custom_interrupt_tx+0x84>)
 8000832:	f04f 32ff 	mov.w	r2, #4294967295
 8000836:	609a      	str	r2, [r3, #8]
	DMA2->HIFCR = 0xffffffff;
 8000838:	4b1a      	ldr	r3, [pc, #104]	@ (80008a4 <DMA_custom_interrupt_tx+0x84>)
 800083a:	f04f 32ff 	mov.w	r2, #4294967295
 800083e:	60da      	str	r2, [r3, #12]

	//ADC3->CFGR |= (1 << ADC_CFGR_DMNGT_Pos); // ACCENDO la ricezione di dati dall'adc

	DMA2_Stream0->CR |= DMA_SxCR_EN;
 8000840:	4b19      	ldr	r3, [pc, #100]	@ (80008a8 <DMA_custom_interrupt_tx+0x88>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a18      	ldr	r2, [pc, #96]	@ (80008a8 <DMA_custom_interrupt_tx+0x88>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_EN;
 800084c:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <DMA_custom_interrupt_tx+0x8c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a16      	ldr	r2, [pc, #88]	@ (80008ac <DMA_custom_interrupt_tx+0x8c>)
 8000852:	f043 0301 	orr.w	r3, r3, #1
 8000856:	6013      	str	r3, [r2, #0]

	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 8000858:	bf00      	nop
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <DMA_custom_interrupt_tx+0x80>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000862:	2b00      	cmp	r3, #0
 8000864:	d0f9      	beq.n	800085a <DMA_custom_interrupt_tx+0x3a>
	USART3->TDR = (unsigned char)(trig_indx & 0xFF );
 8000866:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <DMA_custom_interrupt_tx+0x90>)
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	b2da      	uxtb	r2, r3
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <DMA_custom_interrupt_tx+0x80>)
 800086e:	629a      	str	r2, [r3, #40]	@ 0x28
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 8000870:	bf00      	nop
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <DMA_custom_interrupt_tx+0x80>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087a:	2b00      	cmp	r3, #0
 800087c:	d0f9      	beq.n	8000872 <DMA_custom_interrupt_tx+0x52>
	USART3->TDR = *((unsigned char*)&trig_indx + 1);
 800087e:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <DMA_custom_interrupt_tx+0x94>)
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <DMA_custom_interrupt_tx+0x80>)
 8000884:	629a      	str	r2, [r3, #40]	@ 0x28
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 8000886:	bf00      	nop
 8000888:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <DMA_custom_interrupt_tx+0x80>)
 800088a:	69db      	ldr	r3, [r3, #28]
 800088c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000890:	2b00      	cmp	r3, #0
 8000892:	d0f9      	beq.n	8000888 <DMA_custom_interrupt_tx+0x68>

//	ADC3->CR |= ADC_CR_ADSTART;
	//TIM6->CR1 |= TIM_CR1_CEN;

//	USART3->CR3 |= USART_CR3_DMAT;
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	40004800 	.word	0x40004800
 80008a4:	40020400 	.word	0x40020400
 80008a8:	40020410 	.word	0x40020410
 80008ac:	40020428 	.word	0x40020428
 80008b0:	24000000 	.word	0x24000000
 80008b4:	24000001 	.word	0x24000001

080008b8 <DMA_custom_interrupt_rx>:


/**
 * @brief interrupt di ricezione di n dati dall'adc
 */
void DMA_custom_interrupt_rx(){
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
//
//	USART3->CR3 |= USART_CR3_DMAT;			  // ATTVIO trasmissione usart
//
//	DMA2_Stream0->CR |= DMA_SxCR_EN;
//	DMA2_Stream1->CR |= DMA_SxCR_EN;
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
	...

080008c8 <usart3_init>:
 */

#include "Custom_usart.h"
#include <stdint.h>

void usart3_init(){
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

    USART3->CR1 |= USART_CR1_TE;
 80008cc:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <usart3_init+0x4c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a10      	ldr	r2, [pc, #64]	@ (8000914 <usart3_init+0x4c>)
 80008d2:	f043 0308 	orr.w	r3, r3, #8
 80008d6:	6013      	str	r3, [r2, #0]
    USART3->CR1 |= USART_CR1_RE;
 80008d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <usart3_init+0x4c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000914 <usart3_init+0x4c>)
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	6013      	str	r3, [r2, #0]

    USART3->CR1 &= ~USART_CR1_TXEIE;
 80008e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <usart3_init+0x4c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000914 <usart3_init+0x4c>)
 80008ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80008ee:	6013      	str	r3, [r2, #0]
    USART3->CR1 |= USART_CR1_RXNEIE;
 80008f0:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <usart3_init+0x4c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a07      	ldr	r2, [pc, #28]	@ (8000914 <usart3_init+0x4c>)
 80008f6:	f043 0320 	orr.w	r3, r3, #32
 80008fa:	6013      	str	r3, [r2, #0]

    USART3->CR1 |= USART_CR1_UE;
 80008fc:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <usart3_init+0x4c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a04      	ldr	r2, [pc, #16]	@ (8000914 <usart3_init+0x4c>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	6013      	str	r3, [r2, #0]

}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40004800 	.word	0x40004800

08000918 <usart3_custom_interrupt>:

void usart3_custom_interrupt(){
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0

	char data = USART3->RDR;
 800091e:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <usart3_custom_interrupt+0x5c>)
 8000920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000922:	71fb      	strb	r3, [r7, #7]


	if(data == '?'){
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	2b3f      	cmp	r3, #63	@ 0x3f
 8000928:	d10b      	bne.n	8000942 <usart3_custom_interrupt+0x2a>

		USART3->CR3 &= ~USART_CR3_DMAT;	// spengo l'usart
 800092a:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <usart3_custom_interrupt+0x5c>)
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	4a11      	ldr	r2, [pc, #68]	@ (8000974 <usart3_custom_interrupt+0x5c>)
 8000930:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000934:	6093      	str	r3, [r2, #8]
		TIM6->CR1 |= TIM_CR1_CEN;		// accendo l'adc
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <usart3_custom_interrupt+0x60>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a0f      	ldr	r2, [pc, #60]	@ (8000978 <usart3_custom_interrupt+0x60>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6013      	str	r3, [r2, #0]
		//USART3->CR1 &= ~USART_CR1_RXNEIE;

	}

	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 8000942:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <usart3_custom_interrupt+0x5c>)
 8000944:	6a1b      	ldr	r3, [r3, #32]
 8000946:	4a0b      	ldr	r2, [pc, #44]	@ (8000974 <usart3_custom_interrupt+0x5c>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF;  //Azzeramento flag interrupt trasmissione
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <usart3_custom_interrupt+0x5c>)
 8000950:	6a1b      	ldr	r3, [r3, #32]
 8000952:	4a08      	ldr	r2, [pc, #32]	@ (8000974 <usart3_custom_interrupt+0x5c>)
 8000954:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000958:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <usart3_custom_interrupt+0x5c>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4a05      	ldr	r2, [pc, #20]	@ (8000974 <usart3_custom_interrupt+0x5c>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	6193      	str	r3, [r2, #24]
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40004800 	.word	0x40004800
 8000978:	40001000 	.word	0x40001000

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000980:	f000 fd88 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000984:	f000 f812 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000988:	f000 f9da 	bl	8000d40 <MX_GPIO_Init>
  MX_DMA_Init();
 800098c:	f000 f9b0 	bl	8000cf0 <MX_DMA_Init>
  MX_ADC3_Init();
 8000990:	f000 f8ba 	bl	8000b08 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8000994:	f000 f95e 	bl	8000c54 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000998:	f000 f926 	bl	8000be8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  usart3_init();
 800099c:	f7ff ff94 	bl	80008c8 <usart3_init>

  ADC_custom_init();
 80009a0:	f7ff fe12 	bl	80005c8 <ADC_custom_init>

  DMA_custom_init();
 80009a4:	f7ff feee 	bl	8000784 <DMA_custom_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <main+0x2c>

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b09e      	sub	sp, #120	@ 0x78
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009b6:	224c      	movs	r2, #76	@ 0x4c
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f007 fdac 	bl	8008518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2220      	movs	r2, #32
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f007 fda5 	bl	8008518 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009ce:	2002      	movs	r0, #2
 80009d0:	f002 fe1c 	bl	800360c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	4b48      	ldr	r3, [pc, #288]	@ (8000afc <SystemClock_Config+0x150>)
 80009da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009dc:	4a47      	ldr	r2, [pc, #284]	@ (8000afc <SystemClock_Config+0x150>)
 80009de:	f023 0301 	bic.w	r3, r3, #1
 80009e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009e4:	4b45      	ldr	r3, [pc, #276]	@ (8000afc <SystemClock_Config+0x150>)
 80009e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	4b44      	ldr	r3, [pc, #272]	@ (8000b00 <SystemClock_Config+0x154>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	4a43      	ldr	r2, [pc, #268]	@ (8000b00 <SystemClock_Config+0x154>)
 80009f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009f8:	6193      	str	r3, [r2, #24]
 80009fa:	4b41      	ldr	r3, [pc, #260]	@ (8000b00 <SystemClock_Config+0x154>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a06:	bf00      	nop
 8000a08:	4b3d      	ldr	r3, [pc, #244]	@ (8000b00 <SystemClock_Config+0x154>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a14:	d1f8      	bne.n	8000a08 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b3b      	ldr	r3, [pc, #236]	@ (8000b04 <SystemClock_Config+0x158>)
 8000a18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a1c:	4a39      	ldr	r2, [pc, #228]	@ (8000b04 <SystemClock_Config+0x158>)
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a26:	4b37      	ldr	r3, [pc, #220]	@ (8000b04 <SystemClock_Config+0x158>)
 8000a28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a2c:	f003 0302 	and.w	r3, r3, #2
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a34:	2300      	movs	r3, #0
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	4b31      	ldr	r3, [pc, #196]	@ (8000b00 <SystemClock_Config+0x154>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a30      	ldr	r2, [pc, #192]	@ (8000b00 <SystemClock_Config+0x154>)
 8000a3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b2e      	ldr	r3, [pc, #184]	@ (8000b00 <SystemClock_Config+0x154>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000afc <SystemClock_Config+0x150>)
 8000a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a52:	4a2a      	ldr	r2, [pc, #168]	@ (8000afc <SystemClock_Config+0x150>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a5a:	4b28      	ldr	r3, [pc, #160]	@ (8000afc <SystemClock_Config+0x150>)
 8000a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a66:	bf00      	nop
 8000a68:	4b25      	ldr	r3, [pc, #148]	@ (8000b00 <SystemClock_Config+0x154>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a74:	d1f8      	bne.n	8000a68 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a76:	2301      	movs	r3, #1
 8000a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a7a:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a80:	2302      	movs	r3, #2
 8000a82:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a84:	2302      	movs	r3, #2
 8000a86:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000a8c:	2378      	movs	r3, #120	@ 0x78
 8000a8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a94:	2304      	movs	r3, #4
 8000a96:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a9c:	230c      	movs	r3, #12
 8000a9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aac:	4618      	mov	r0, r3
 8000aae:	f002 fde7 	bl	8003680 <HAL_RCC_OscConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000ab8:	f000 fa72 	bl	8000fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abc:	233f      	movs	r3, #63	@ 0x3f
 8000abe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000acc:	2340      	movs	r3, #64	@ 0x40
 8000ace:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ad0:	2340      	movs	r3, #64	@ 0x40
 8000ad2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ad4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ada:	2340      	movs	r3, #64	@ 0x40
 8000adc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	2104      	movs	r1, #4
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 fa25 	bl	8003f34 <HAL_RCC_ClockConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000af0:	f000 fa56 	bl	8000fa0 <Error_Handler>
  }
}
 8000af4:	bf00      	nop
 8000af6:	3778      	adds	r7, #120	@ 0x78
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	58000400 	.word	0x58000400
 8000b00:	58024800 	.word	0x58024800
 8000b04:	58024400 	.word	0x58024400

08000b08 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b20:	4b2f      	ldr	r3, [pc, #188]	@ (8000be0 <MX_ADC3_Init+0xd8>)
 8000b22:	4a30      	ldr	r2, [pc, #192]	@ (8000be4 <MX_ADC3_Init+0xdc>)
 8000b24:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b26:	4b2e      	ldr	r3, [pc, #184]	@ (8000be0 <MX_ADC3_Init+0xd8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000be0 <MX_ADC3_Init+0xd8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b32:	4b2b      	ldr	r3, [pc, #172]	@ (8000be0 <MX_ADC3_Init+0xd8>)
 8000b34:	2204      	movs	r2, #4
 8000b36:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b38:	4b29      	ldr	r3, [pc, #164]	@ (8000be0 <MX_ADC3_Init+0xd8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b3e:	4b28      	ldr	r3, [pc, #160]	@ (8000be0 <MX_ADC3_Init+0xd8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000b44:	4b26      	ldr	r3, [pc, #152]	@ (8000be0 <MX_ADC3_Init+0xd8>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b4a:	4b25      	ldr	r3, [pc, #148]	@ (8000be0 <MX_ADC3_Init+0xd8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000b50:	4b23      	ldr	r3, [pc, #140]	@ (8000be0 <MX_ADC3_Init+0xd8>)
 8000b52:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000b56:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b58:	4b21      	ldr	r3, [pc, #132]	@ (8000be0 <MX_ADC3_Init+0xd8>)
 8000b5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b60:	4b1f      	ldr	r3, [pc, #124]	@ (8000be0 <MX_ADC3_Init+0xd8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b66:	4b1e      	ldr	r3, [pc, #120]	@ (8000be0 <MX_ADC3_Init+0xd8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <MX_ADC3_Init+0xd8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000b72:	4b1b      	ldr	r3, [pc, #108]	@ (8000be0 <MX_ADC3_Init+0xd8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <MX_ADC3_Init+0xd8>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b80:	4817      	ldr	r0, [pc, #92]	@ (8000be0 <MX_ADC3_Init+0xd8>)
 8000b82:	f000 fec7 	bl	8001914 <HAL_ADC_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000b8c:	f000 fa08 	bl	8000fa0 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000b90:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <MX_ADC3_Init+0xd8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b96:	4812      	ldr	r0, [pc, #72]	@ (8000be0 <MX_ADC3_Init+0xd8>)
 8000b98:	f000 febc 	bl	8001914 <HAL_ADC_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000ba2:	f000 f9fd 	bl	8000fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000baa:	2306      	movs	r3, #6
 8000bac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bb2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <MX_ADC3_Init+0xd8>)
 8000bca:	f001 f845 	bl	8001c58 <HAL_ADC_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000bd4:	f000 f9e4 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	3720      	adds	r7, #32
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	24000100 	.word	0x24000100
 8000be4:	58026000 	.word	0x58026000

08000be8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <MX_TIM6_Init+0x64>)
 8000bfa:	4a15      	ldr	r2, [pc, #84]	@ (8000c50 <MX_TIM6_Init+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <MX_TIM6_Init+0x64>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <MX_TIM6_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <MX_TIM6_Init+0x64>)
 8000c0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c10:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <MX_TIM6_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c18:	480c      	ldr	r0, [pc, #48]	@ (8000c4c <MX_TIM6_Init+0x64>)
 8000c1a:	f006 fa15 	bl	8007048 <HAL_TIM_Base_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c24:	f000 f9bc 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c28:	2320      	movs	r3, #32
 8000c2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <MX_TIM6_Init+0x64>)
 8000c36:	f006 fb05 	bl	8007244 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c40:	f000 f9ae 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	240001dc 	.word	0x240001dc
 8000c50:	40001000 	.word	0x40001000

08000c54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c58:	4b22      	ldr	r3, [pc, #136]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c5a:	4a23      	ldr	r2, [pc, #140]	@ (8000ce8 <MX_USART3_UART_Init+0x94>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c60:	4a22      	ldr	r2, [pc, #136]	@ (8000cec <MX_USART3_UART_Init+0x98>)
 8000c62:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c78:	220c      	movs	r2, #12
 8000c7a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c82:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c88:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c94:	4b13      	ldr	r3, [pc, #76]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c9a:	4812      	ldr	r0, [pc, #72]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000c9c:	f006 fb60 	bl	8007360 <HAL_UART_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000ca6:	f000 f97b 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000caa:	2100      	movs	r1, #0
 8000cac:	480d      	ldr	r0, [pc, #52]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000cae:	f007 fb68 	bl	8008382 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000cb8:	f000 f972 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4809      	ldr	r0, [pc, #36]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000cc0:	f007 fb9d 	bl	80083fe <HAL_UARTEx_SetRxFifoThreshold>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000cca:	f000 f969 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <MX_USART3_UART_Init+0x90>)
 8000cd0:	f007 fb1e 	bl	8008310 <HAL_UARTEx_DisableFifoMode>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000cda:	f000 f961 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	24000228 	.word	0x24000228
 8000ce8:	40004800 	.word	0x40004800
 8000cec:	000f4240 	.word	0x000f4240

08000cf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <MX_DMA_Init+0x4c>)
 8000cf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cfc:	4a0f      	ldr	r2, [pc, #60]	@ (8000d3c <MX_DMA_Init+0x4c>)
 8000cfe:	f043 0302 	orr.w	r3, r3, #2
 8000d02:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d06:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <MX_DMA_Init+0x4c>)
 8000d08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2100      	movs	r1, #0
 8000d18:	2038      	movs	r0, #56	@ 0x38
 8000d1a:	f001 fce0 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d1e:	2038      	movs	r0, #56	@ 0x38
 8000d20:	f001 fcf7 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2100      	movs	r1, #0
 8000d28:	2039      	movs	r0, #57	@ 0x39
 8000d2a:	f001 fcd8 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000d2e:	2039      	movs	r0, #57	@ 0x39
 8000d30:	f001 fcef 	bl	8002712 <HAL_NVIC_EnableIRQ>

}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	58024400 	.word	0x58024400

08000d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08c      	sub	sp, #48	@ 0x30
 8000d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d56:	4b8b      	ldr	r3, [pc, #556]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5c:	4a89      	ldr	r2, [pc, #548]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d66:	4b87      	ldr	r3, [pc, #540]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d74:	4b83      	ldr	r3, [pc, #524]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7a:	4a82      	ldr	r2, [pc, #520]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000d7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d84:	4b7f      	ldr	r3, [pc, #508]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	4b7c      	ldr	r3, [pc, #496]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d98:	4a7a      	ldr	r2, [pc, #488]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da2:	4b78      	ldr	r3, [pc, #480]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db0:	4b74      	ldr	r3, [pc, #464]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db6:	4a73      	ldr	r2, [pc, #460]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc0:	4b70      	ldr	r3, [pc, #448]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dce:	4b6d      	ldr	r3, [pc, #436]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd4:	4a6b      	ldr	r2, [pc, #428]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000dd6:	f043 0308 	orr.w	r3, r3, #8
 8000dda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dde:	4b69      	ldr	r3, [pc, #420]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de4:	f003 0308 	and.w	r3, r3, #8
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dec:	4b65      	ldr	r3, [pc, #404]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df2:	4a64      	ldr	r2, [pc, #400]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000df4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000df8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dfc:	4b61      	ldr	r3, [pc, #388]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e0a:	4b5e      	ldr	r3, [pc, #376]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	4a5c      	ldr	r2, [pc, #368]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000e12:	f043 0310 	orr.w	r3, r3, #16
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1a:	4b5a      	ldr	r3, [pc, #360]	@ (8000f84 <MX_GPIO_Init+0x244>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e20:	f003 0310 	and.w	r3, r3, #16
 8000e24:	603b      	str	r3, [r7, #0]
 8000e26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000e2e:	4856      	ldr	r0, [pc, #344]	@ (8000f88 <MX_GPIO_Init+0x248>)
 8000e30:	f002 fbd2 	bl	80035d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e3a:	4854      	ldr	r0, [pc, #336]	@ (8000f8c <MX_GPIO_Init+0x24c>)
 8000e3c:	f002 fbcc 	bl	80035d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2102      	movs	r1, #2
 8000e44:	4852      	ldr	r0, [pc, #328]	@ (8000f90 <MX_GPIO_Init+0x250>)
 8000e46:	f002 fbc7 	bl	80035d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e50:	2300      	movs	r3, #0
 8000e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	484d      	ldr	r0, [pc, #308]	@ (8000f94 <MX_GPIO_Init+0x254>)
 8000e60:	f002 fa0a 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e64:	2332      	movs	r3, #50	@ 0x32
 8000e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e74:	230b      	movs	r3, #11
 8000e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4845      	ldr	r0, [pc, #276]	@ (8000f94 <MX_GPIO_Init+0x254>)
 8000e80:	f002 f9fa 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e84:	2386      	movs	r3, #134	@ 0x86
 8000e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e94:	230b      	movs	r3, #11
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	483e      	ldr	r0, [pc, #248]	@ (8000f98 <MX_GPIO_Init+0x258>)
 8000ea0:	f002 f9ea 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ea4:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4832      	ldr	r0, [pc, #200]	@ (8000f88 <MX_GPIO_Init+0x248>)
 8000ebe:	f002 f9db 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ec2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed4:	230b      	movs	r3, #11
 8000ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	482a      	ldr	r0, [pc, #168]	@ (8000f88 <MX_GPIO_Init+0x248>)
 8000ee0:	f002 f9ca 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ee4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	4823      	ldr	r0, [pc, #140]	@ (8000f8c <MX_GPIO_Init+0x24c>)
 8000efe:	f002 f9bb 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000f02:	2380      	movs	r3, #128	@ 0x80
 8000f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f06:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4619      	mov	r1, r3
 8000f16:	4821      	ldr	r0, [pc, #132]	@ (8000f9c <MX_GPIO_Init+0x25c>)
 8000f18:	f002 f9ae 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f1c:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f2e:	230a      	movs	r3, #10
 8000f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4619      	mov	r1, r3
 8000f38:	4817      	ldr	r0, [pc, #92]	@ (8000f98 <MX_GPIO_Init+0x258>)
 8000f3a:	f002 f99d 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f3e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f50:	230b      	movs	r3, #11
 8000f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4810      	ldr	r0, [pc, #64]	@ (8000f9c <MX_GPIO_Init+0x25c>)
 8000f5c:	f002 f98c 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f60:	2302      	movs	r3, #2
 8000f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	4619      	mov	r1, r3
 8000f76:	4806      	ldr	r0, [pc, #24]	@ (8000f90 <MX_GPIO_Init+0x250>)
 8000f78:	f002 f97e 	bl	8003278 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f7c:	bf00      	nop
 8000f7e:	3730      	adds	r7, #48	@ 0x30
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	58024400 	.word	0x58024400
 8000f88:	58020400 	.word	0x58020400
 8000f8c:	58020c00 	.word	0x58020c00
 8000f90:	58021000 	.word	0x58021000
 8000f94:	58020800 	.word	0x58020800
 8000f98:	58020000 	.word	0x58020000
 8000f9c:	58021800 	.word	0x58021800

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <Error_Handler+0x8>

08000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <HAL_MspInit+0x30>)
 8000fb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fb8:	4a08      	ldr	r2, [pc, #32]	@ (8000fdc <HAL_MspInit+0x30>)
 8000fba:	f043 0302 	orr.w	r3, r3, #2
 8000fbe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_MspInit+0x30>)
 8000fc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	58024400 	.word	0x58024400

08000fe0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0b4      	sub	sp, #208	@ 0xd0
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	22c0      	movs	r2, #192	@ 0xc0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f007 fa91 	bl	8008518 <memset>
  if(hadc->Instance==ADC3)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a43      	ldr	r2, [pc, #268]	@ (8001108 <HAL_ADC_MspInit+0x128>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d17e      	bne.n	80010fe <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001000:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800100c:	2301      	movs	r3, #1
 800100e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 20;
 8001010:	2314      	movs	r3, #20
 8001012:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001014:	2302      	movs	r3, #2
 8001016:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001018:	2302      	movs	r3, #2
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800101c:	2302      	movs	r3, #2
 800101e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001020:	23c0      	movs	r3, #192	@ 0xc0
 8001022:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001024:	2320      	movs	r3, #32
 8001026:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	4618      	mov	r0, r3
 8001038:	f003 fb08 	bl	800464c <HAL_RCCEx_PeriphCLKConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8001042:	f7ff ffad 	bl	8000fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001046:	4b31      	ldr	r3, [pc, #196]	@ (800110c <HAL_ADC_MspInit+0x12c>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104c:	4a2f      	ldr	r2, [pc, #188]	@ (800110c <HAL_ADC_MspInit+0x12c>)
 800104e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001052:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001056:	4b2d      	ldr	r3, [pc, #180]	@ (800110c <HAL_ADC_MspInit+0x12c>)
 8001058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001064:	4b29      	ldr	r3, [pc, #164]	@ (800110c <HAL_ADC_MspInit+0x12c>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106a:	4a28      	ldr	r2, [pc, #160]	@ (800110c <HAL_ADC_MspInit+0x12c>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001074:	4b25      	ldr	r3, [pc, #148]	@ (800110c <HAL_ADC_MspInit+0x12c>)
 8001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001082:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001086:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800108a:	f000 faa1 	bl	80015d0 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 800108e:	4b20      	ldr	r3, [pc, #128]	@ (8001110 <HAL_ADC_MspInit+0x130>)
 8001090:	4a20      	ldr	r2, [pc, #128]	@ (8001114 <HAL_ADC_MspInit+0x134>)
 8001092:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001094:	4b1e      	ldr	r3, [pc, #120]	@ (8001110 <HAL_ADC_MspInit+0x130>)
 8001096:	2273      	movs	r2, #115	@ 0x73
 8001098:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800109a:	4b1d      	ldr	r3, [pc, #116]	@ (8001110 <HAL_ADC_MspInit+0x130>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001110 <HAL_ADC_MspInit+0x130>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80010a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <HAL_ADC_MspInit+0x130>)
 80010a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010ac:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010ae:	4b18      	ldr	r3, [pc, #96]	@ (8001110 <HAL_ADC_MspInit+0x130>)
 80010b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010b4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010b6:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <HAL_ADC_MspInit+0x130>)
 80010b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010bc:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80010be:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <HAL_ADC_MspInit+0x130>)
 80010c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010c4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80010c6:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <HAL_ADC_MspInit+0x130>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010cc:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <HAL_ADC_MspInit+0x130>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80010d2:	480f      	ldr	r0, [pc, #60]	@ (8001110 <HAL_ADC_MspInit+0x130>)
 80010d4:	f001 fb38 	bl	8002748 <HAL_DMA_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80010de:	f7ff ff5f 	bl	8000fa0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <HAL_ADC_MspInit+0x130>)
 80010e6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80010e8:	4a09      	ldr	r2, [pc, #36]	@ (8001110 <HAL_ADC_MspInit+0x130>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	207f      	movs	r0, #127	@ 0x7f
 80010f4:	f001 faf3 	bl	80026de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80010f8:	207f      	movs	r0, #127	@ 0x7f
 80010fa:	f001 fb0a 	bl	8002712 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 80010fe:	bf00      	nop
 8001100:	37d0      	adds	r7, #208	@ 0xd0
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	58026000 	.word	0x58026000
 800110c:	58024400 	.word	0x58024400
 8001110:	24000164 	.word	0x24000164
 8001114:	40020410 	.word	0x40020410

08001118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0b      	ldr	r2, [pc, #44]	@ (8001154 <HAL_TIM_Base_MspInit+0x3c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d10e      	bne.n	8001148 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800112a:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <HAL_TIM_Base_MspInit+0x40>)
 800112c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001130:	4a09      	ldr	r2, [pc, #36]	@ (8001158 <HAL_TIM_Base_MspInit+0x40>)
 8001132:	f043 0310 	orr.w	r3, r3, #16
 8001136:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800113a:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <HAL_TIM_Base_MspInit+0x40>)
 800113c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001140:	f003 0310 	and.w	r3, r3, #16
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	40001000 	.word	0x40001000
 8001158:	58024400 	.word	0x58024400

0800115c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0ba      	sub	sp, #232	@ 0xe8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	22c0      	movs	r2, #192	@ 0xc0
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f007 f9cb 	bl	8008518 <memset>
  if(huart->Instance==USART3)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a41      	ldr	r2, [pc, #260]	@ (800128c <HAL_UART_MspInit+0x130>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d17b      	bne.n	8001284 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800118c:	f04f 0202 	mov.w	r2, #2
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 fa52 	bl	800464c <HAL_RCCEx_PeriphCLKConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80011ae:	f7ff fef7 	bl	8000fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011b2:	4b37      	ldr	r3, [pc, #220]	@ (8001290 <HAL_UART_MspInit+0x134>)
 80011b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011b8:	4a35      	ldr	r2, [pc, #212]	@ (8001290 <HAL_UART_MspInit+0x134>)
 80011ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011c2:	4b33      	ldr	r3, [pc, #204]	@ (8001290 <HAL_UART_MspInit+0x134>)
 80011c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001290 <HAL_UART_MspInit+0x134>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d6:	4a2e      	ldr	r2, [pc, #184]	@ (8001290 <HAL_UART_MspInit+0x134>)
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001290 <HAL_UART_MspInit+0x134>)
 80011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001208:	2307      	movs	r3, #7
 800120a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001212:	4619      	mov	r1, r3
 8001214:	481f      	ldr	r0, [pc, #124]	@ (8001294 <HAL_UART_MspInit+0x138>)
 8001216:	f002 f82f 	bl	8003278 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream1;
 800121a:	4b1f      	ldr	r3, [pc, #124]	@ (8001298 <HAL_UART_MspInit+0x13c>)
 800121c:	4a1f      	ldr	r2, [pc, #124]	@ (800129c <HAL_UART_MspInit+0x140>)
 800121e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001220:	4b1d      	ldr	r3, [pc, #116]	@ (8001298 <HAL_UART_MspInit+0x13c>)
 8001222:	222e      	movs	r2, #46	@ 0x2e
 8001224:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001226:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <HAL_UART_MspInit+0x13c>)
 8001228:	2240      	movs	r2, #64	@ 0x40
 800122a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800122c:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <HAL_UART_MspInit+0x13c>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001232:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <HAL_UART_MspInit+0x13c>)
 8001234:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001238:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800123a:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <HAL_UART_MspInit+0x13c>)
 800123c:	2200      	movs	r2, #0
 800123e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001240:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <HAL_UART_MspInit+0x13c>)
 8001242:	2200      	movs	r2, #0
 8001244:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001246:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <HAL_UART_MspInit+0x13c>)
 8001248:	2200      	movs	r2, #0
 800124a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <HAL_UART_MspInit+0x13c>)
 800124e:	2200      	movs	r2, #0
 8001250:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001252:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <HAL_UART_MspInit+0x13c>)
 8001254:	2200      	movs	r2, #0
 8001256:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001258:	480f      	ldr	r0, [pc, #60]	@ (8001298 <HAL_UART_MspInit+0x13c>)
 800125a:	f001 fa75 	bl	8002748 <HAL_DMA_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001264:	f7ff fe9c 	bl	8000fa0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a0b      	ldr	r2, [pc, #44]	@ (8001298 <HAL_UART_MspInit+0x13c>)
 800126c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800126e:	4a0a      	ldr	r2, [pc, #40]	@ (8001298 <HAL_UART_MspInit+0x13c>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	2027      	movs	r0, #39	@ 0x27
 800127a:	f001 fa30 	bl	80026de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800127e:	2027      	movs	r0, #39	@ 0x27
 8001280:	f001 fa47 	bl	8002712 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001284:	bf00      	nop
 8001286:	37e8      	adds	r7, #232	@ 0xe8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40004800 	.word	0x40004800
 8001290:	58024400 	.word	0x58024400
 8001294:	58020c00 	.word	0x58020c00
 8001298:	240002bc 	.word	0x240002bc
 800129c:	40020428 	.word	0x40020428

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <NMI_Handler+0x4>

080012a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <HardFault_Handler+0x4>

080012b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <MemManage_Handler+0x4>

080012b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f6:	f000 f93f 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}

080012fe <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	usart3_custom_interrupt();
 8001302:	f7ff fb09 	bl	8000918 <usart3_custom_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}

0800130a <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// ATTIVITA DI FINE RICEZIONE DA ADC
	DMA_custom_interrupt_rx();
 800130e:	f7ff fad3 	bl	80008b8 <DMA_custom_interrupt_rx>
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
	}
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}

08001316 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	DMA_custom_interrupt_tx();
 800131a:	f7ff fa81 	bl	8000820 <DMA_custom_interrupt_tx>
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
	}
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}

08001322 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	ADC_custom_interrupt();
 8001326:	f7ff f9b7 	bl	8000698 <ADC_custom_interrupt>
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}


  /* USER CODE END ADC3_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001334:	4b37      	ldr	r3, [pc, #220]	@ (8001414 <SystemInit+0xe4>)
 8001336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800133a:	4a36      	ldr	r2, [pc, #216]	@ (8001414 <SystemInit+0xe4>)
 800133c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001340:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001344:	4b34      	ldr	r3, [pc, #208]	@ (8001418 <SystemInit+0xe8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 030f 	and.w	r3, r3, #15
 800134c:	2b06      	cmp	r3, #6
 800134e:	d807      	bhi.n	8001360 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001350:	4b31      	ldr	r3, [pc, #196]	@ (8001418 <SystemInit+0xe8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f023 030f 	bic.w	r3, r3, #15
 8001358:	4a2f      	ldr	r2, [pc, #188]	@ (8001418 <SystemInit+0xe8>)
 800135a:	f043 0307 	orr.w	r3, r3, #7
 800135e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001360:	4b2e      	ldr	r3, [pc, #184]	@ (800141c <SystemInit+0xec>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a2d      	ldr	r2, [pc, #180]	@ (800141c <SystemInit+0xec>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800136c:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <SystemInit+0xec>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001372:	4b2a      	ldr	r3, [pc, #168]	@ (800141c <SystemInit+0xec>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	4929      	ldr	r1, [pc, #164]	@ (800141c <SystemInit+0xec>)
 8001378:	4b29      	ldr	r3, [pc, #164]	@ (8001420 <SystemInit+0xf0>)
 800137a:	4013      	ands	r3, r2
 800137c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800137e:	4b26      	ldr	r3, [pc, #152]	@ (8001418 <SystemInit+0xe8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d007      	beq.n	800139a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800138a:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <SystemInit+0xe8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 030f 	bic.w	r3, r3, #15
 8001392:	4a21      	ldr	r2, [pc, #132]	@ (8001418 <SystemInit+0xe8>)
 8001394:	f043 0307 	orr.w	r3, r3, #7
 8001398:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800139a:	4b20      	ldr	r3, [pc, #128]	@ (800141c <SystemInit+0xec>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013a0:	4b1e      	ldr	r3, [pc, #120]	@ (800141c <SystemInit+0xec>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013a6:	4b1d      	ldr	r3, [pc, #116]	@ (800141c <SystemInit+0xec>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <SystemInit+0xec>)
 80013ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001424 <SystemInit+0xf4>)
 80013b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <SystemInit+0xec>)
 80013b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001428 <SystemInit+0xf8>)
 80013b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013b8:	4b18      	ldr	r3, [pc, #96]	@ (800141c <SystemInit+0xec>)
 80013ba:	4a1c      	ldr	r2, [pc, #112]	@ (800142c <SystemInit+0xfc>)
 80013bc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013be:	4b17      	ldr	r3, [pc, #92]	@ (800141c <SystemInit+0xec>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013c4:	4b15      	ldr	r3, [pc, #84]	@ (800141c <SystemInit+0xec>)
 80013c6:	4a19      	ldr	r2, [pc, #100]	@ (800142c <SystemInit+0xfc>)
 80013c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <SystemInit+0xec>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <SystemInit+0xec>)
 80013d2:	4a16      	ldr	r2, [pc, #88]	@ (800142c <SystemInit+0xfc>)
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <SystemInit+0xec>)
 80013d8:	2200      	movs	r2, #0
 80013da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <SystemInit+0xec>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0e      	ldr	r2, [pc, #56]	@ (800141c <SystemInit+0xec>)
 80013e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <SystemInit+0xec>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <SystemInit+0x100>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <SystemInit+0x104>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013fa:	d202      	bcs.n	8001402 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <SystemInit+0x108>)
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <SystemInit+0x10c>)
 8001404:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001408:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00
 8001418:	52002000 	.word	0x52002000
 800141c:	58024400 	.word	0x58024400
 8001420:	eaf6ed7f 	.word	0xeaf6ed7f
 8001424:	02020200 	.word	0x02020200
 8001428:	01ff0000 	.word	0x01ff0000
 800142c:	01010280 	.word	0x01010280
 8001430:	5c001000 	.word	0x5c001000
 8001434:	ffff0000 	.word	0xffff0000
 8001438:	51008108 	.word	0x51008108
 800143c:	52004000 	.word	0x52004000

08001440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001440:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001478 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001444:	f7ff ff74 	bl	8001330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001448:	480c      	ldr	r0, [pc, #48]	@ (800147c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800144a:	490d      	ldr	r1, [pc, #52]	@ (8001480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800144c:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001460:	4c0a      	ldr	r4, [pc, #40]	@ (800148c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146e:	f007 f85b 	bl	8008528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001472:	f7ff fa83 	bl	800097c <main>
  bx  lr
 8001476:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001478:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800147c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001480:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001484:	080085d8 	.word	0x080085d8
  ldr r2, =_sbss
 8001488:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 800148c:	24000338 	.word	0x24000338

08001490 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC_IRQHandler>
	...

08001494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149a:	2003      	movs	r0, #3
 800149c:	f001 f914 	bl	80026c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014a0:	f002 fefe 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 80014a4:	4602      	mov	r2, r0
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <HAL_Init+0x68>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	0a1b      	lsrs	r3, r3, #8
 80014ac:	f003 030f 	and.w	r3, r3, #15
 80014b0:	4913      	ldr	r1, [pc, #76]	@ (8001500 <HAL_Init+0x6c>)
 80014b2:	5ccb      	ldrb	r3, [r1, r3]
 80014b4:	f003 031f 	and.w	r3, r3, #31
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
 80014bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <HAL_Init+0x68>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001500 <HAL_Init+0x6c>)
 80014c8:	5cd3      	ldrb	r3, [r2, r3]
 80014ca:	f003 031f 	and.w	r3, r3, #31
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	fa22 f303 	lsr.w	r3, r2, r3
 80014d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001504 <HAL_Init+0x70>)
 80014d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001508 <HAL_Init+0x74>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 f814 	bl	800150c <HAL_InitTick>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e002      	b.n	80014f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014ee:	f7ff fd5d 	bl	8000fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	58024400 	.word	0x58024400
 8001500:	08008588 	.word	0x08008588
 8001504:	24000008 	.word	0x24000008
 8001508:	24000004 	.word	0x24000004

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001514:	4b15      	ldr	r3, [pc, #84]	@ (800156c <HAL_InitTick+0x60>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e021      	b.n	8001564 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001520:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <HAL_InitTick+0x64>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <HAL_InitTick+0x60>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f001 f8f9 	bl	800272e <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e00e      	b.n	8001564 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d80a      	bhi.n	8001562 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f001 f8c3 	bl	80026de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001558:	4a06      	ldr	r2, [pc, #24]	@ (8001574 <HAL_InitTick+0x68>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	24000010 	.word	0x24000010
 8001570:	24000004 	.word	0x24000004
 8001574:	2400000c 	.word	0x2400000c

08001578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_IncTick+0x20>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_IncTick+0x24>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a04      	ldr	r2, [pc, #16]	@ (800159c <HAL_IncTick+0x24>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	24000010 	.word	0x24000010
 800159c:	24000334 	.word	0x24000334

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	@ (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	24000334 	.word	0x24000334

080015b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015bc:	4b03      	ldr	r3, [pc, #12]	@ (80015cc <HAL_GetREVID+0x14>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	0c1b      	lsrs	r3, r3, #16
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	5c001000 	.word	0x5c001000

080015d0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80015da:	4b07      	ldr	r3, [pc, #28]	@ (80015f8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	401a      	ands	r2, r3
 80015e4:	4904      	ldr	r1, [pc, #16]	@ (80015f8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	58000400 	.word	0x58000400

080015fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	609a      	str	r2, [r3, #8]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	609a      	str	r2, [r3, #8]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3360      	adds	r3, #96	@ 0x60
 8001676:	461a      	mov	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	430b      	orrs	r3, r1
 8001692:	431a      	orrs	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001698:	bf00      	nop
 800169a:	371c      	adds	r7, #28
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	f003 031f 	and.w	r3, r3, #31
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	431a      	orrs	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	611a      	str	r2, [r3, #16]
}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b087      	sub	sp, #28
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3360      	adds	r3, #96	@ 0x60
 80016e6:	461a      	mov	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	431a      	orrs	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	601a      	str	r2, [r3, #0]
  }
}
 8001700:	bf00      	nop
 8001702:	371c      	adds	r7, #28
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	3330      	adds	r3, #48	@ 0x30
 800171c:	461a      	mov	r2, r3
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	4413      	add	r3, r2
 800172a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	211f      	movs	r1, #31
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	401a      	ands	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	0e9b      	lsrs	r3, r3, #26
 8001744:	f003 011f 	and.w	r1, r3, #31
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	431a      	orrs	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001758:	bf00      	nop
 800175a:	371c      	adds	r7, #28
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001764:	b480      	push	{r7}
 8001766:	b087      	sub	sp, #28
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3314      	adds	r3, #20
 8001774:	461a      	mov	r2, r3
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	0e5b      	lsrs	r3, r3, #25
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	4413      	add	r3, r2
 8001782:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	0d1b      	lsrs	r3, r3, #20
 800178c:	f003 031f 	and.w	r3, r3, #31
 8001790:	2107      	movs	r1, #7
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	401a      	ands	r2, r3
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	0d1b      	lsrs	r3, r3, #20
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	431a      	orrs	r2, r3
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017ae:	bf00      	nop
 80017b0:	371c      	adds	r7, #28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017d4:	43db      	mvns	r3, r3
 80017d6:	401a      	ands	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f003 0318 	and.w	r3, r3, #24
 80017de:	4908      	ldr	r1, [pc, #32]	@ (8001800 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017e0:	40d9      	lsrs	r1, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	400b      	ands	r3, r1
 80017e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017ea:	431a      	orrs	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	000fffff 	.word	0x000fffff

08001804 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	4b04      	ldr	r3, [pc, #16]	@ (8001824 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001812:	4013      	ands	r3, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6093      	str	r3, [r2, #8]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	5fffffc0 	.word	0x5fffffc0

08001828 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800183c:	d101      	bne.n	8001842 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <LL_ADC_EnableInternalRegulator+0x24>)
 800185e:	4013      	ands	r3, r2
 8001860:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	6fffffc0 	.word	0x6fffffc0

08001878 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001888:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800188c:	d101      	bne.n	8001892 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <LL_ADC_IsEnabled+0x18>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <LL_ADC_IsEnabled+0x1a>
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d101      	bne.n	80018de <LL_ADC_REG_IsConversionOngoing+0x18>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d101      	bne.n	8001904 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b089      	sub	sp, #36	@ 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e18f      	b.n	8001c4e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001938:	2b00      	cmp	r3, #0
 800193a:	d109      	bne.n	8001950 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff fb4f 	bl	8000fe0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff67 	bl	8001828 <LL_ADC_IsDeepPowerDownEnabled>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d004      	beq.n	800196a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff4d 	bl	8001804 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff ff82 	bl	8001878 <LL_ADC_IsInternalRegulatorEnabled>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d114      	bne.n	80019a4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff66 	bl	8001850 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001984:	4b87      	ldr	r3, [pc, #540]	@ (8001ba4 <HAL_ADC_Init+0x290>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	099b      	lsrs	r3, r3, #6
 800198a:	4a87      	ldr	r2, [pc, #540]	@ (8001ba8 <HAL_ADC_Init+0x294>)
 800198c:	fba2 2303 	umull	r2, r3, r2, r3
 8001990:	099b      	lsrs	r3, r3, #6
 8001992:	3301      	adds	r3, #1
 8001994:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001996:	e002      	b.n	800199e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	3b01      	subs	r3, #1
 800199c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f9      	bne.n	8001998 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff65 	bl	8001878 <LL_ADC_IsInternalRegulatorEnabled>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10d      	bne.n	80019d0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019b8:	f043 0210 	orr.w	r2, r3, #16
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c4:	f043 0201 	orr.w	r2, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff76 	bl	80018c6 <LL_ADC_REG_IsConversionOngoing>
 80019da:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e0:	f003 0310 	and.w	r3, r3, #16
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f040 8129 	bne.w	8001c3c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f040 8125 	bne.w	8001c3c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019fa:	f043 0202 	orr.w	r2, r3, #2
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ff4a 	bl	80018a0 <LL_ADC_IsEnabled>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d136      	bne.n	8001a80 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a65      	ldr	r2, [pc, #404]	@ (8001bac <HAL_ADC_Init+0x298>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d004      	beq.n	8001a26 <HAL_ADC_Init+0x112>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a63      	ldr	r2, [pc, #396]	@ (8001bb0 <HAL_ADC_Init+0x29c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d10e      	bne.n	8001a44 <HAL_ADC_Init+0x130>
 8001a26:	4861      	ldr	r0, [pc, #388]	@ (8001bac <HAL_ADC_Init+0x298>)
 8001a28:	f7ff ff3a 	bl	80018a0 <LL_ADC_IsEnabled>
 8001a2c:	4604      	mov	r4, r0
 8001a2e:	4860      	ldr	r0, [pc, #384]	@ (8001bb0 <HAL_ADC_Init+0x29c>)
 8001a30:	f7ff ff36 	bl	80018a0 <LL_ADC_IsEnabled>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4323      	orrs	r3, r4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf0c      	ite	eq
 8001a3c:	2301      	moveq	r3, #1
 8001a3e:	2300      	movne	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	e008      	b.n	8001a56 <HAL_ADC_Init+0x142>
 8001a44:	485b      	ldr	r0, [pc, #364]	@ (8001bb4 <HAL_ADC_Init+0x2a0>)
 8001a46:	f7ff ff2b 	bl	80018a0 <LL_ADC_IsEnabled>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf0c      	ite	eq
 8001a50:	2301      	moveq	r3, #1
 8001a52:	2300      	movne	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d012      	beq.n	8001a80 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a53      	ldr	r2, [pc, #332]	@ (8001bac <HAL_ADC_Init+0x298>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d004      	beq.n	8001a6e <HAL_ADC_Init+0x15a>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a51      	ldr	r2, [pc, #324]	@ (8001bb0 <HAL_ADC_Init+0x29c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_ADC_Init+0x15e>
 8001a6e:	4a52      	ldr	r2, [pc, #328]	@ (8001bb8 <HAL_ADC_Init+0x2a4>)
 8001a70:	e000      	b.n	8001a74 <HAL_ADC_Init+0x160>
 8001a72:	4a52      	ldr	r2, [pc, #328]	@ (8001bbc <HAL_ADC_Init+0x2a8>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	f7ff fdbe 	bl	80015fc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001a80:	f7ff fd9a 	bl	80015b8 <HAL_GetREVID>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d914      	bls.n	8001ab8 <HAL_ADC_Init+0x1a4>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b10      	cmp	r3, #16
 8001a94:	d110      	bne.n	8001ab8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7d5b      	ldrb	r3, [r3, #21]
 8001a9a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001aa0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001aa6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7f1b      	ldrb	r3, [r3, #28]
 8001aac:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001aae:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ab0:	f043 030c 	orr.w	r3, r3, #12
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	e00d      	b.n	8001ad4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	7d5b      	ldrb	r3, [r3, #21]
 8001abc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ac2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ac8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7f1b      	ldrb	r3, [r3, #28]
 8001ace:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7f1b      	ldrb	r3, [r3, #28]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d106      	bne.n	8001aea <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	045b      	lsls	r3, r3, #17
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d009      	beq.n	8001b06 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc0 <HAL_ADC_Init+0x2ac>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	69b9      	ldr	r1, [r7, #24]
 8001b16:	430b      	orrs	r3, r1
 8001b18:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fed1 	bl	80018c6 <LL_ADC_REG_IsConversionOngoing>
 8001b24:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fede 	bl	80018ec <LL_ADC_INJ_IsConversionOngoing>
 8001b30:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d15f      	bne.n	8001bf8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d15c      	bne.n	8001bf8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7d1b      	ldrb	r3, [r3, #20]
 8001b42:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc4 <HAL_ADC_Init+0x2b0>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	69b9      	ldr	r1, [r7, #24]
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d130      	bne.n	8001bcc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <HAL_ADC_Init+0x2b4>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b7e:	3a01      	subs	r2, #1
 8001b80:	0411      	lsls	r1, r2, #16
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b86:	4311      	orrs	r1, r2
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b8c:	4311      	orrs	r1, r2
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b92:	430a      	orrs	r2, r1
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0201 	orr.w	r2, r2, #1
 8001b9e:	611a      	str	r2, [r3, #16]
 8001ba0:	e01c      	b.n	8001bdc <HAL_ADC_Init+0x2c8>
 8001ba2:	bf00      	nop
 8001ba4:	24000004 	.word	0x24000004
 8001ba8:	053e2d63 	.word	0x053e2d63
 8001bac:	40022000 	.word	0x40022000
 8001bb0:	40022100 	.word	0x40022100
 8001bb4:	58026000 	.word	0x58026000
 8001bb8:	40022300 	.word	0x40022300
 8001bbc:	58026300 	.word	0x58026300
 8001bc0:	fff0c003 	.word	0xfff0c003
 8001bc4:	ffffbffc 	.word	0xffffbffc
 8001bc8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0201 	bic.w	r2, r2, #1
 8001bda:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 fb8c 	bl	8002310 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d10c      	bne.n	8001c1a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f023 010f 	bic.w	r1, r3, #15
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	1e5a      	subs	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c18:	e007      	b.n	8001c2a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 020f 	bic.w	r2, r2, #15
 8001c28:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2e:	f023 0303 	bic.w	r3, r3, #3
 8001c32:	f043 0201 	orr.w	r2, r3, #1
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c3a:	e007      	b.n	8001c4c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c40:	f043 0210 	orr.w	r2, r3, #16
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3724      	adds	r7, #36	@ 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd90      	pop	{r4, r7, pc}
 8001c56:	bf00      	nop

08001c58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b0a1      	sub	sp, #132	@ 0x84
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	4a65      	ldr	r2, [pc, #404]	@ (8001e08 <HAL_ADC_ConfigChannel+0x1b0>)
 8001c72:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x2a>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e32e      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x688>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fe19 	bl	80018c6 <LL_ADC_REG_IsConversionOngoing>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f040 8313 	bne.w	80022c2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db2c      	blt.n	8001cfe <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d108      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x6a>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0e9b      	lsrs	r3, r3, #26
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	2201      	movs	r2, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	e016      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x98>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cd2:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e003      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001cde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ce0:	fab3 f383 	clz	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	2201      	movs	r2, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	69d1      	ldr	r1, [r2, #28]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	430b      	orrs	r3, r1
 8001cfc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6859      	ldr	r1, [r3, #4]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f7ff fcfe 	bl	800170c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fdd6 	bl	80018c6 <LL_ADC_REG_IsConversionOngoing>
 8001d1a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fde3 	bl	80018ec <LL_ADC_INJ_IsConversionOngoing>
 8001d26:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f040 80b8 	bne.w	8001ea0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f040 80b4 	bne.w	8001ea0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6819      	ldr	r1, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	461a      	mov	r2, r3
 8001d46:	f7ff fd0d 	bl	8001764 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d4a:	4b30      	ldr	r3, [pc, #192]	@ (8001e0c <HAL_ADC_ConfigChannel+0x1b4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001d52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d56:	d10b      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x118>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	695a      	ldr	r2, [r3, #20]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	e01d      	b.n	8001dac <HAL_ADC_ConfigChannel+0x154>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10b      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x13e>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	e00a      	b.n	8001dac <HAL_ADC_ConfigChannel+0x154>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	089b      	lsrs	r3, r3, #2
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d02c      	beq.n	8001e10 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6919      	ldr	r1, [r3, #16]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001dc4:	f7ff fc4e 	bl	8001664 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6919      	ldr	r1, [r3, #16]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	7e5b      	ldrb	r3, [r3, #25]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d102      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x186>
 8001dd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001ddc:	e000      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x188>
 8001dde:	2300      	movs	r3, #0
 8001de0:	461a      	mov	r2, r3
 8001de2:	f7ff fc78 	bl	80016d6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6919      	ldr	r1, [r3, #16]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	7e1b      	ldrb	r3, [r3, #24]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d102      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1a4>
 8001df6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001dfa:	e000      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1a6>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f7ff fc50 	bl	80016a4 <LL_ADC_SetDataRightShift>
 8001e04:	e04c      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x248>
 8001e06:	bf00      	nop
 8001e08:	47ff0000 	.word	0x47ff0000
 8001e0c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	069b      	lsls	r3, r3, #26
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d107      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e32:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	069b      	lsls	r3, r3, #26
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d107      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e56:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	069b      	lsls	r3, r3, #26
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d107      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e7a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	069b      	lsls	r3, r3, #26
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d107      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e9e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fcfb 	bl	80018a0 <LL_ADC_IsEnabled>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f040 8211 	bne.w	80022d4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	6819      	ldr	r1, [r3, #0]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f7ff fc7c 	bl	80017bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4aa1      	ldr	r2, [pc, #644]	@ (8002150 <HAL_ADC_ConfigChannel+0x4f8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	f040 812e 	bne.w	800212c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10b      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x2a0>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	0e9b      	lsrs	r3, r3, #26
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	2b09      	cmp	r3, #9
 8001eee:	bf94      	ite	ls
 8001ef0:	2301      	movls	r3, #1
 8001ef2:	2300      	movhi	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	e019      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x2d4>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001f0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8001f10:	2320      	movs	r3, #32
 8001f12:	e003      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8001f14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	2b09      	cmp	r3, #9
 8001f24:	bf94      	ite	ls
 8001f26:	2301      	movls	r3, #1
 8001f28:	2300      	movhi	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d079      	beq.n	8002024 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d107      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x2f4>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	0e9b      	lsrs	r3, r3, #26
 8001f42:	3301      	adds	r3, #1
 8001f44:	069b      	lsls	r3, r3, #26
 8001f46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f4a:	e015      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x320>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001f5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f5c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001f5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8001f64:	2320      	movs	r3, #32
 8001f66:	e003      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8001f68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	069b      	lsls	r3, r3, #26
 8001f74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d109      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x340>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0e9b      	lsrs	r3, r3, #26
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	2101      	movs	r1, #1
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	e017      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x370>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fa0:	fa93 f3a3 	rbit	r3, r3
 8001fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fa8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001faa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	e003      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8001fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	ea42 0103 	orr.w	r1, r2, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10a      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x396>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0e9b      	lsrs	r3, r3, #26
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	051b      	lsls	r3, r3, #20
 8001fec:	e018      	b.n	8002020 <HAL_ADC_ConfigChannel+0x3c8>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002006:	2320      	movs	r3, #32
 8002008:	e003      	b.n	8002012 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800200a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800200c:	fab3 f383 	clz	r3, r3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	3301      	adds	r3, #1
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002020:	430b      	orrs	r3, r1
 8002022:	e07e      	b.n	8002122 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800202c:	2b00      	cmp	r3, #0
 800202e:	d107      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x3e8>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	0e9b      	lsrs	r3, r3, #26
 8002036:	3301      	adds	r3, #1
 8002038:	069b      	lsls	r3, r3, #26
 800203a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800203e:	e015      	b.n	800206c <HAL_ADC_ConfigChannel+0x414>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002058:	2320      	movs	r3, #32
 800205a:	e003      	b.n	8002064 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 800205c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	3301      	adds	r3, #1
 8002066:	069b      	lsls	r3, r3, #26
 8002068:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002074:	2b00      	cmp	r3, #0
 8002076:	d109      	bne.n	800208c <HAL_ADC_ConfigChannel+0x434>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	0e9b      	lsrs	r3, r3, #26
 800207e:	3301      	adds	r3, #1
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	2101      	movs	r1, #1
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	e017      	b.n	80020bc <HAL_ADC_ConfigChannel+0x464>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	61bb      	str	r3, [r7, #24]
  return result;
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80020a4:	2320      	movs	r3, #32
 80020a6:	e003      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	fab3 f383 	clz	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	3301      	adds	r3, #1
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	2101      	movs	r1, #1
 80020b8:	fa01 f303 	lsl.w	r3, r1, r3
 80020bc:	ea42 0103 	orr.w	r1, r2, r3
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10d      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x490>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0e9b      	lsrs	r3, r3, #26
 80020d2:	3301      	adds	r3, #1
 80020d4:	f003 021f 	and.w	r2, r3, #31
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	3b1e      	subs	r3, #30
 80020e0:	051b      	lsls	r3, r3, #20
 80020e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020e6:	e01b      	b.n	8002120 <HAL_ADC_ConfigChannel+0x4c8>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	60fb      	str	r3, [r7, #12]
  return result;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002100:	2320      	movs	r3, #32
 8002102:	e003      	b.n	800210c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fab3 f383 	clz	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	3301      	adds	r3, #1
 800210e:	f003 021f 	and.w	r2, r3, #31
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	3b1e      	subs	r3, #30
 800211a:	051b      	lsls	r3, r3, #20
 800211c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002120:	430b      	orrs	r3, r1
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	6892      	ldr	r2, [r2, #8]
 8002126:	4619      	mov	r1, r3
 8002128:	f7ff fb1c 	bl	8001764 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	f280 80cf 	bge.w	80022d4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a06      	ldr	r2, [pc, #24]	@ (8002154 <HAL_ADC_ConfigChannel+0x4fc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d004      	beq.n	800214a <HAL_ADC_ConfigChannel+0x4f2>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a04      	ldr	r2, [pc, #16]	@ (8002158 <HAL_ADC_ConfigChannel+0x500>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d10a      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x508>
 800214a:	4b04      	ldr	r3, [pc, #16]	@ (800215c <HAL_ADC_ConfigChannel+0x504>)
 800214c:	e009      	b.n	8002162 <HAL_ADC_ConfigChannel+0x50a>
 800214e:	bf00      	nop
 8002150:	47ff0000 	.word	0x47ff0000
 8002154:	40022000 	.word	0x40022000
 8002158:	40022100 	.word	0x40022100
 800215c:	40022300 	.word	0x40022300
 8002160:	4b61      	ldr	r3, [pc, #388]	@ (80022e8 <HAL_ADC_ConfigChannel+0x690>)
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fa70 	bl	8001648 <LL_ADC_GetCommonPathInternalCh>
 8002168:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a5f      	ldr	r2, [pc, #380]	@ (80022ec <HAL_ADC_ConfigChannel+0x694>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d004      	beq.n	800217e <HAL_ADC_ConfigChannel+0x526>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a5d      	ldr	r2, [pc, #372]	@ (80022f0 <HAL_ADC_ConfigChannel+0x698>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d10e      	bne.n	800219c <HAL_ADC_ConfigChannel+0x544>
 800217e:	485b      	ldr	r0, [pc, #364]	@ (80022ec <HAL_ADC_ConfigChannel+0x694>)
 8002180:	f7ff fb8e 	bl	80018a0 <LL_ADC_IsEnabled>
 8002184:	4604      	mov	r4, r0
 8002186:	485a      	ldr	r0, [pc, #360]	@ (80022f0 <HAL_ADC_ConfigChannel+0x698>)
 8002188:	f7ff fb8a 	bl	80018a0 <LL_ADC_IsEnabled>
 800218c:	4603      	mov	r3, r0
 800218e:	4323      	orrs	r3, r4
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	e008      	b.n	80021ae <HAL_ADC_ConfigChannel+0x556>
 800219c:	4855      	ldr	r0, [pc, #340]	@ (80022f4 <HAL_ADC_ConfigChannel+0x69c>)
 800219e:	f7ff fb7f 	bl	80018a0 <LL_ADC_IsEnabled>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d07d      	beq.n	80022ae <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a50      	ldr	r2, [pc, #320]	@ (80022f8 <HAL_ADC_ConfigChannel+0x6a0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d130      	bne.n	800221e <HAL_ADC_ConfigChannel+0x5c6>
 80021bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d12b      	bne.n	800221e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a4a      	ldr	r2, [pc, #296]	@ (80022f4 <HAL_ADC_ConfigChannel+0x69c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	f040 8081 	bne.w	80022d4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a45      	ldr	r2, [pc, #276]	@ (80022ec <HAL_ADC_ConfigChannel+0x694>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d004      	beq.n	80021e6 <HAL_ADC_ConfigChannel+0x58e>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a43      	ldr	r2, [pc, #268]	@ (80022f0 <HAL_ADC_ConfigChannel+0x698>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x592>
 80021e6:	4a45      	ldr	r2, [pc, #276]	@ (80022fc <HAL_ADC_ConfigChannel+0x6a4>)
 80021e8:	e000      	b.n	80021ec <HAL_ADC_ConfigChannel+0x594>
 80021ea:	4a3f      	ldr	r2, [pc, #252]	@ (80022e8 <HAL_ADC_ConfigChannel+0x690>)
 80021ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021f2:	4619      	mov	r1, r3
 80021f4:	4610      	mov	r0, r2
 80021f6:	f7ff fa14 	bl	8001622 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021fa:	4b41      	ldr	r3, [pc, #260]	@ (8002300 <HAL_ADC_ConfigChannel+0x6a8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	099b      	lsrs	r3, r3, #6
 8002200:	4a40      	ldr	r2, [pc, #256]	@ (8002304 <HAL_ADC_ConfigChannel+0x6ac>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	099b      	lsrs	r3, r3, #6
 8002208:	3301      	adds	r3, #1
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800220e:	e002      	b.n	8002216 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	3b01      	subs	r3, #1
 8002214:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f9      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800221c:	e05a      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a39      	ldr	r2, [pc, #228]	@ (8002308 <HAL_ADC_ConfigChannel+0x6b0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d11e      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x60e>
 8002228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800222a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d119      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a2f      	ldr	r2, [pc, #188]	@ (80022f4 <HAL_ADC_ConfigChannel+0x69c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d14b      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a2a      	ldr	r2, [pc, #168]	@ (80022ec <HAL_ADC_ConfigChannel+0x694>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d004      	beq.n	8002250 <HAL_ADC_ConfigChannel+0x5f8>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a29      	ldr	r2, [pc, #164]	@ (80022f0 <HAL_ADC_ConfigChannel+0x698>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d101      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x5fc>
 8002250:	4a2a      	ldr	r2, [pc, #168]	@ (80022fc <HAL_ADC_ConfigChannel+0x6a4>)
 8002252:	e000      	b.n	8002256 <HAL_ADC_ConfigChannel+0x5fe>
 8002254:	4a24      	ldr	r2, [pc, #144]	@ (80022e8 <HAL_ADC_ConfigChannel+0x690>)
 8002256:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002258:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800225c:	4619      	mov	r1, r3
 800225e:	4610      	mov	r0, r2
 8002260:	f7ff f9df 	bl	8001622 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002264:	e036      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a28      	ldr	r2, [pc, #160]	@ (800230c <HAL_ADC_ConfigChannel+0x6b4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d131      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x67c>
 8002270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d12c      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a1d      	ldr	r2, [pc, #116]	@ (80022f4 <HAL_ADC_ConfigChannel+0x69c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d127      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a18      	ldr	r2, [pc, #96]	@ (80022ec <HAL_ADC_ConfigChannel+0x694>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d004      	beq.n	8002298 <HAL_ADC_ConfigChannel+0x640>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a17      	ldr	r2, [pc, #92]	@ (80022f0 <HAL_ADC_ConfigChannel+0x698>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x644>
 8002298:	4a18      	ldr	r2, [pc, #96]	@ (80022fc <HAL_ADC_ConfigChannel+0x6a4>)
 800229a:	e000      	b.n	800229e <HAL_ADC_ConfigChannel+0x646>
 800229c:	4a12      	ldr	r2, [pc, #72]	@ (80022e8 <HAL_ADC_ConfigChannel+0x690>)
 800229e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022a4:	4619      	mov	r1, r3
 80022a6:	4610      	mov	r0, r2
 80022a8:	f7ff f9bb 	bl	8001622 <LL_ADC_SetCommonPathInternalCh>
 80022ac:	e012      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b2:	f043 0220 	orr.w	r2, r3, #32
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80022c0:	e008      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c6:	f043 0220 	orr.w	r2, r3, #32
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80022dc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3784      	adds	r7, #132	@ 0x84
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd90      	pop	{r4, r7, pc}
 80022e8:	58026300 	.word	0x58026300
 80022ec:	40022000 	.word	0x40022000
 80022f0:	40022100 	.word	0x40022100
 80022f4:	58026000 	.word	0x58026000
 80022f8:	cb840000 	.word	0xcb840000
 80022fc:	40022300 	.word	0x40022300
 8002300:	24000004 	.word	0x24000004
 8002304:	053e2d63 	.word	0x053e2d63
 8002308:	c7520000 	.word	0xc7520000
 800230c:	cfb80000 	.word	0xcfb80000

08002310 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a7a      	ldr	r2, [pc, #488]	@ (8002508 <ADC_ConfigureBoostMode+0x1f8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d004      	beq.n	800232c <ADC_ConfigureBoostMode+0x1c>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a79      	ldr	r2, [pc, #484]	@ (800250c <ADC_ConfigureBoostMode+0x1fc>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d109      	bne.n	8002340 <ADC_ConfigureBoostMode+0x30>
 800232c:	4b78      	ldr	r3, [pc, #480]	@ (8002510 <ADC_ConfigureBoostMode+0x200>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf14      	ite	ne
 8002338:	2301      	movne	r3, #1
 800233a:	2300      	moveq	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	e008      	b.n	8002352 <ADC_ConfigureBoostMode+0x42>
 8002340:	4b74      	ldr	r3, [pc, #464]	@ (8002514 <ADC_ConfigureBoostMode+0x204>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf14      	ite	ne
 800234c:	2301      	movne	r3, #1
 800234e:	2300      	moveq	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01c      	beq.n	8002390 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002356:	f002 f91d 	bl	8004594 <HAL_RCC_GetHCLKFreq>
 800235a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002364:	d010      	beq.n	8002388 <ADC_ConfigureBoostMode+0x78>
 8002366:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800236a:	d873      	bhi.n	8002454 <ADC_ConfigureBoostMode+0x144>
 800236c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002370:	d002      	beq.n	8002378 <ADC_ConfigureBoostMode+0x68>
 8002372:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002376:	d16d      	bne.n	8002454 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	fbb2 f3f3 	udiv	r3, r2, r3
 8002384:	60fb      	str	r3, [r7, #12]
        break;
 8002386:	e068      	b.n	800245a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	60fb      	str	r3, [r7, #12]
        break;
 800238e:	e064      	b.n	800245a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002390:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002394:	f04f 0100 	mov.w	r1, #0
 8002398:	f003 fb62 	bl	8005a60 <HAL_RCCEx_GetPeriphCLKFreq>
 800239c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80023a6:	d051      	beq.n	800244c <ADC_ConfigureBoostMode+0x13c>
 80023a8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80023ac:	d854      	bhi.n	8002458 <ADC_ConfigureBoostMode+0x148>
 80023ae:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80023b2:	d047      	beq.n	8002444 <ADC_ConfigureBoostMode+0x134>
 80023b4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80023b8:	d84e      	bhi.n	8002458 <ADC_ConfigureBoostMode+0x148>
 80023ba:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80023be:	d03d      	beq.n	800243c <ADC_ConfigureBoostMode+0x12c>
 80023c0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80023c4:	d848      	bhi.n	8002458 <ADC_ConfigureBoostMode+0x148>
 80023c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023ca:	d033      	beq.n	8002434 <ADC_ConfigureBoostMode+0x124>
 80023cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023d0:	d842      	bhi.n	8002458 <ADC_ConfigureBoostMode+0x148>
 80023d2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80023d6:	d029      	beq.n	800242c <ADC_ConfigureBoostMode+0x11c>
 80023d8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80023dc:	d83c      	bhi.n	8002458 <ADC_ConfigureBoostMode+0x148>
 80023de:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80023e2:	d01a      	beq.n	800241a <ADC_ConfigureBoostMode+0x10a>
 80023e4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80023e8:	d836      	bhi.n	8002458 <ADC_ConfigureBoostMode+0x148>
 80023ea:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80023ee:	d014      	beq.n	800241a <ADC_ConfigureBoostMode+0x10a>
 80023f0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80023f4:	d830      	bhi.n	8002458 <ADC_ConfigureBoostMode+0x148>
 80023f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023fa:	d00e      	beq.n	800241a <ADC_ConfigureBoostMode+0x10a>
 80023fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002400:	d82a      	bhi.n	8002458 <ADC_ConfigureBoostMode+0x148>
 8002402:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002406:	d008      	beq.n	800241a <ADC_ConfigureBoostMode+0x10a>
 8002408:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800240c:	d824      	bhi.n	8002458 <ADC_ConfigureBoostMode+0x148>
 800240e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002412:	d002      	beq.n	800241a <ADC_ConfigureBoostMode+0x10a>
 8002414:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002418:	d11e      	bne.n	8002458 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	0c9b      	lsrs	r3, r3, #18
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	fbb2 f3f3 	udiv	r3, r2, r3
 8002428:	60fb      	str	r3, [r7, #12]
        break;
 800242a:	e016      	b.n	800245a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	60fb      	str	r3, [r7, #12]
        break;
 8002432:	e012      	b.n	800245a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	60fb      	str	r3, [r7, #12]
        break;
 800243a:	e00e      	b.n	800245a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	099b      	lsrs	r3, r3, #6
 8002440:	60fb      	str	r3, [r7, #12]
        break;
 8002442:	e00a      	b.n	800245a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	09db      	lsrs	r3, r3, #7
 8002448:	60fb      	str	r3, [r7, #12]
        break;
 800244a:	e006      	b.n	800245a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	0a1b      	lsrs	r3, r3, #8
 8002450:	60fb      	str	r3, [r7, #12]
        break;
 8002452:	e002      	b.n	800245a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002454:	bf00      	nop
 8002456:	e000      	b.n	800245a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002458:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800245a:	f7ff f8ad 	bl	80015b8 <HAL_GetREVID>
 800245e:	4603      	mov	r3, r0
 8002460:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002464:	4293      	cmp	r3, r2
 8002466:	d815      	bhi.n	8002494 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4a2b      	ldr	r2, [pc, #172]	@ (8002518 <ADC_ConfigureBoostMode+0x208>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d908      	bls.n	8002482 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800247e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002480:	e03e      	b.n	8002500 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002490:	609a      	str	r2, [r3, #8]
}
 8002492:	e035      	b.n	8002500 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	085b      	lsrs	r3, r3, #1
 8002498:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4a1f      	ldr	r2, [pc, #124]	@ (800251c <ADC_ConfigureBoostMode+0x20c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d808      	bhi.n	80024b4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80024b0:	609a      	str	r2, [r3, #8]
}
 80024b2:	e025      	b.n	8002500 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002520 <ADC_ConfigureBoostMode+0x210>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d80a      	bhi.n	80024d2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024ce:	609a      	str	r2, [r3, #8]
}
 80024d0:	e016      	b.n	8002500 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4a13      	ldr	r2, [pc, #76]	@ (8002524 <ADC_ConfigureBoostMode+0x214>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d80a      	bhi.n	80024f0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ec:	609a      	str	r2, [r3, #8]
}
 80024ee:	e007      	b.n	8002500 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80024fe:	609a      	str	r2, [r3, #8]
}
 8002500:	bf00      	nop
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40022000 	.word	0x40022000
 800250c:	40022100 	.word	0x40022100
 8002510:	40022300 	.word	0x40022300
 8002514:	58026300 	.word	0x58026300
 8002518:	01312d00 	.word	0x01312d00
 800251c:	005f5e10 	.word	0x005f5e10
 8002520:	00bebc20 	.word	0x00bebc20
 8002524:	017d7840 	.word	0x017d7840

08002528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002538:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <__NVIC_SetPriorityGrouping+0x40>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002550:	4b06      	ldr	r3, [pc, #24]	@ (800256c <__NVIC_SetPriorityGrouping+0x44>)
 8002552:	4313      	orrs	r3, r2
 8002554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002556:	4a04      	ldr	r2, [pc, #16]	@ (8002568 <__NVIC_SetPriorityGrouping+0x40>)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	60d3      	str	r3, [r2, #12]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00
 800256c:	05fa0000 	.word	0x05fa0000

08002570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002574:	4b04      	ldr	r3, [pc, #16]	@ (8002588 <__NVIC_GetPriorityGrouping+0x18>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	f003 0307 	and.w	r3, r3, #7
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800259a:	2b00      	cmp	r3, #0
 800259c:	db0b      	blt.n	80025b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259e:	88fb      	ldrh	r3, [r7, #6]
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	4907      	ldr	r1, [pc, #28]	@ (80025c4 <__NVIC_EnableIRQ+0x38>)
 80025a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	2001      	movs	r0, #1
 80025ae:	fa00 f202 	lsl.w	r2, r0, r2
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000e100 	.word	0xe000e100

080025c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	6039      	str	r1, [r7, #0]
 80025d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	db0a      	blt.n	80025f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	490c      	ldr	r1, [pc, #48]	@ (8002614 <__NVIC_SetPriority+0x4c>)
 80025e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	440b      	add	r3, r1
 80025ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f0:	e00a      	b.n	8002608 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4908      	ldr	r1, [pc, #32]	@ (8002618 <__NVIC_SetPriority+0x50>)
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	3b04      	subs	r3, #4
 8002600:	0112      	lsls	r2, r2, #4
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	440b      	add	r3, r1
 8002606:	761a      	strb	r2, [r3, #24]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000e100 	.word	0xe000e100
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	@ 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f1c3 0307 	rsb	r3, r3, #7
 8002636:	2b04      	cmp	r3, #4
 8002638:	bf28      	it	cs
 800263a:	2304      	movcs	r3, #4
 800263c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3304      	adds	r3, #4
 8002642:	2b06      	cmp	r3, #6
 8002644:	d902      	bls.n	800264c <NVIC_EncodePriority+0x30>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3b03      	subs	r3, #3
 800264a:	e000      	b.n	800264e <NVIC_EncodePriority+0x32>
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	401a      	ands	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002664:	f04f 31ff 	mov.w	r1, #4294967295
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43d9      	mvns	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	4313      	orrs	r3, r2
         );
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	@ 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002694:	d301      	bcc.n	800269a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002696:	2301      	movs	r3, #1
 8002698:	e00f      	b.n	80026ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269a:	4a0a      	ldr	r2, [pc, #40]	@ (80026c4 <SysTick_Config+0x40>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a2:	210f      	movs	r1, #15
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295
 80026a8:	f7ff ff8e 	bl	80025c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ac:	4b05      	ldr	r3, [pc, #20]	@ (80026c4 <SysTick_Config+0x40>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b2:	4b04      	ldr	r3, [pc, #16]	@ (80026c4 <SysTick_Config+0x40>)
 80026b4:	2207      	movs	r2, #7
 80026b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	e000e010 	.word	0xe000e010

080026c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ff29 	bl	8002528 <__NVIC_SetPriorityGrouping>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b086      	sub	sp, #24
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4603      	mov	r3, r0
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026ec:	f7ff ff40 	bl	8002570 <__NVIC_GetPriorityGrouping>
 80026f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	6978      	ldr	r0, [r7, #20]
 80026f8:	f7ff ff90 	bl	800261c <NVIC_EncodePriority>
 80026fc:	4602      	mov	r2, r0
 80026fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff5f 	bl	80025c8 <__NVIC_SetPriority>
}
 800270a:	bf00      	nop
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800271c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff33 	bl	800258c <__NVIC_EnableIRQ>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff ffa4 	bl	8002684 <SysTick_Config>
 800273c:	4603      	mov	r3, r0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002750:	f7fe ff26 	bl	80015a0 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e316      	b.n	8002d8e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a66      	ldr	r2, [pc, #408]	@ (8002900 <HAL_DMA_Init+0x1b8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d04a      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a65      	ldr	r2, [pc, #404]	@ (8002904 <HAL_DMA_Init+0x1bc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d045      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a63      	ldr	r2, [pc, #396]	@ (8002908 <HAL_DMA_Init+0x1c0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d040      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a62      	ldr	r2, [pc, #392]	@ (800290c <HAL_DMA_Init+0x1c4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d03b      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a60      	ldr	r2, [pc, #384]	@ (8002910 <HAL_DMA_Init+0x1c8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d036      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a5f      	ldr	r2, [pc, #380]	@ (8002914 <HAL_DMA_Init+0x1cc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d031      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002918 <HAL_DMA_Init+0x1d0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d02c      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a5c      	ldr	r2, [pc, #368]	@ (800291c <HAL_DMA_Init+0x1d4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d027      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a5a      	ldr	r2, [pc, #360]	@ (8002920 <HAL_DMA_Init+0x1d8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d022      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a59      	ldr	r2, [pc, #356]	@ (8002924 <HAL_DMA_Init+0x1dc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d01d      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a57      	ldr	r2, [pc, #348]	@ (8002928 <HAL_DMA_Init+0x1e0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d018      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a56      	ldr	r2, [pc, #344]	@ (800292c <HAL_DMA_Init+0x1e4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d013      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a54      	ldr	r2, [pc, #336]	@ (8002930 <HAL_DMA_Init+0x1e8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00e      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a53      	ldr	r2, [pc, #332]	@ (8002934 <HAL_DMA_Init+0x1ec>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d009      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a51      	ldr	r2, [pc, #324]	@ (8002938 <HAL_DMA_Init+0x1f0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d004      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a50      	ldr	r2, [pc, #320]	@ (800293c <HAL_DMA_Init+0x1f4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d101      	bne.n	8002804 <HAL_DMA_Init+0xbc>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <HAL_DMA_Init+0xbe>
 8002804:	2300      	movs	r3, #0
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 813b 	beq.w	8002a82 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a37      	ldr	r2, [pc, #220]	@ (8002900 <HAL_DMA_Init+0x1b8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d04a      	beq.n	80028bc <HAL_DMA_Init+0x174>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a36      	ldr	r2, [pc, #216]	@ (8002904 <HAL_DMA_Init+0x1bc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d045      	beq.n	80028bc <HAL_DMA_Init+0x174>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a34      	ldr	r2, [pc, #208]	@ (8002908 <HAL_DMA_Init+0x1c0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d040      	beq.n	80028bc <HAL_DMA_Init+0x174>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a33      	ldr	r2, [pc, #204]	@ (800290c <HAL_DMA_Init+0x1c4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d03b      	beq.n	80028bc <HAL_DMA_Init+0x174>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a31      	ldr	r2, [pc, #196]	@ (8002910 <HAL_DMA_Init+0x1c8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d036      	beq.n	80028bc <HAL_DMA_Init+0x174>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a30      	ldr	r2, [pc, #192]	@ (8002914 <HAL_DMA_Init+0x1cc>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d031      	beq.n	80028bc <HAL_DMA_Init+0x174>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a2e      	ldr	r2, [pc, #184]	@ (8002918 <HAL_DMA_Init+0x1d0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d02c      	beq.n	80028bc <HAL_DMA_Init+0x174>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a2d      	ldr	r2, [pc, #180]	@ (800291c <HAL_DMA_Init+0x1d4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d027      	beq.n	80028bc <HAL_DMA_Init+0x174>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a2b      	ldr	r2, [pc, #172]	@ (8002920 <HAL_DMA_Init+0x1d8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d022      	beq.n	80028bc <HAL_DMA_Init+0x174>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a2a      	ldr	r2, [pc, #168]	@ (8002924 <HAL_DMA_Init+0x1dc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d01d      	beq.n	80028bc <HAL_DMA_Init+0x174>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a28      	ldr	r2, [pc, #160]	@ (8002928 <HAL_DMA_Init+0x1e0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d018      	beq.n	80028bc <HAL_DMA_Init+0x174>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a27      	ldr	r2, [pc, #156]	@ (800292c <HAL_DMA_Init+0x1e4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d013      	beq.n	80028bc <HAL_DMA_Init+0x174>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a25      	ldr	r2, [pc, #148]	@ (8002930 <HAL_DMA_Init+0x1e8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00e      	beq.n	80028bc <HAL_DMA_Init+0x174>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a24      	ldr	r2, [pc, #144]	@ (8002934 <HAL_DMA_Init+0x1ec>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d009      	beq.n	80028bc <HAL_DMA_Init+0x174>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a22      	ldr	r2, [pc, #136]	@ (8002938 <HAL_DMA_Init+0x1f0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d004      	beq.n	80028bc <HAL_DMA_Init+0x174>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a21      	ldr	r2, [pc, #132]	@ (800293c <HAL_DMA_Init+0x1f4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d108      	bne.n	80028ce <HAL_DMA_Init+0x186>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0201 	bic.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e007      	b.n	80028de <HAL_DMA_Init+0x196>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028de:	e02f      	b.n	8002940 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028e0:	f7fe fe5e 	bl	80015a0 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b05      	cmp	r3, #5
 80028ec:	d928      	bls.n	8002940 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2220      	movs	r2, #32
 80028f2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2203      	movs	r2, #3
 80028f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e246      	b.n	8002d8e <HAL_DMA_Init+0x646>
 8002900:	40020010 	.word	0x40020010
 8002904:	40020028 	.word	0x40020028
 8002908:	40020040 	.word	0x40020040
 800290c:	40020058 	.word	0x40020058
 8002910:	40020070 	.word	0x40020070
 8002914:	40020088 	.word	0x40020088
 8002918:	400200a0 	.word	0x400200a0
 800291c:	400200b8 	.word	0x400200b8
 8002920:	40020410 	.word	0x40020410
 8002924:	40020428 	.word	0x40020428
 8002928:	40020440 	.word	0x40020440
 800292c:	40020458 	.word	0x40020458
 8002930:	40020470 	.word	0x40020470
 8002934:	40020488 	.word	0x40020488
 8002938:	400204a0 	.word	0x400204a0
 800293c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1c8      	bne.n	80028e0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b83      	ldr	r3, [pc, #524]	@ (8002b68 <HAL_DMA_Init+0x420>)
 800295a:	4013      	ands	r3, r2
 800295c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002966:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002972:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800297e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	2b04      	cmp	r3, #4
 8002992:	d107      	bne.n	80029a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299c:	4313      	orrs	r3, r2
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80029a4:	4b71      	ldr	r3, [pc, #452]	@ (8002b6c <HAL_DMA_Init+0x424>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b71      	ldr	r3, [pc, #452]	@ (8002b70 <HAL_DMA_Init+0x428>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029b0:	d328      	bcc.n	8002a04 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b28      	cmp	r3, #40	@ 0x28
 80029b8:	d903      	bls.n	80029c2 <HAL_DMA_Init+0x27a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b2e      	cmp	r3, #46	@ 0x2e
 80029c0:	d917      	bls.n	80029f2 <HAL_DMA_Init+0x2aa>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80029c8:	d903      	bls.n	80029d2 <HAL_DMA_Init+0x28a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b42      	cmp	r3, #66	@ 0x42
 80029d0:	d90f      	bls.n	80029f2 <HAL_DMA_Init+0x2aa>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b46      	cmp	r3, #70	@ 0x46
 80029d8:	d903      	bls.n	80029e2 <HAL_DMA_Init+0x29a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b48      	cmp	r3, #72	@ 0x48
 80029e0:	d907      	bls.n	80029f2 <HAL_DMA_Init+0x2aa>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b4e      	cmp	r3, #78	@ 0x4e
 80029e8:	d905      	bls.n	80029f6 <HAL_DMA_Init+0x2ae>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b52      	cmp	r3, #82	@ 0x52
 80029f0:	d801      	bhi.n	80029f6 <HAL_DMA_Init+0x2ae>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <HAL_DMA_Init+0x2b0>
 80029f6:	2300      	movs	r3, #0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a02:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f023 0307 	bic.w	r3, r3, #7
 8002a1a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d117      	bne.n	8002a5e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00e      	beq.n	8002a5e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fa8f 	bl	8002f64 <DMA_CheckFifoParam>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2240      	movs	r2, #64	@ 0x40
 8002a50:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e197      	b.n	8002d8e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f9ca 	bl	8002e00 <DMA_CalcBaseAndBitshift>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	223f      	movs	r2, #63	@ 0x3f
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	e0cd      	b.n	8002c1e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a3b      	ldr	r2, [pc, #236]	@ (8002b74 <HAL_DMA_Init+0x42c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d022      	beq.n	8002ad2 <HAL_DMA_Init+0x38a>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a39      	ldr	r2, [pc, #228]	@ (8002b78 <HAL_DMA_Init+0x430>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d01d      	beq.n	8002ad2 <HAL_DMA_Init+0x38a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a38      	ldr	r2, [pc, #224]	@ (8002b7c <HAL_DMA_Init+0x434>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d018      	beq.n	8002ad2 <HAL_DMA_Init+0x38a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a36      	ldr	r2, [pc, #216]	@ (8002b80 <HAL_DMA_Init+0x438>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d013      	beq.n	8002ad2 <HAL_DMA_Init+0x38a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a35      	ldr	r2, [pc, #212]	@ (8002b84 <HAL_DMA_Init+0x43c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00e      	beq.n	8002ad2 <HAL_DMA_Init+0x38a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a33      	ldr	r2, [pc, #204]	@ (8002b88 <HAL_DMA_Init+0x440>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d009      	beq.n	8002ad2 <HAL_DMA_Init+0x38a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a32      	ldr	r2, [pc, #200]	@ (8002b8c <HAL_DMA_Init+0x444>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d004      	beq.n	8002ad2 <HAL_DMA_Init+0x38a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a30      	ldr	r2, [pc, #192]	@ (8002b90 <HAL_DMA_Init+0x448>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d101      	bne.n	8002ad6 <HAL_DMA_Init+0x38e>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_DMA_Init+0x390>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8097 	beq.w	8002c0c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a24      	ldr	r2, [pc, #144]	@ (8002b74 <HAL_DMA_Init+0x42c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d021      	beq.n	8002b2c <HAL_DMA_Init+0x3e4>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a22      	ldr	r2, [pc, #136]	@ (8002b78 <HAL_DMA_Init+0x430>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d01c      	beq.n	8002b2c <HAL_DMA_Init+0x3e4>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a21      	ldr	r2, [pc, #132]	@ (8002b7c <HAL_DMA_Init+0x434>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d017      	beq.n	8002b2c <HAL_DMA_Init+0x3e4>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a1f      	ldr	r2, [pc, #124]	@ (8002b80 <HAL_DMA_Init+0x438>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d012      	beq.n	8002b2c <HAL_DMA_Init+0x3e4>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8002b84 <HAL_DMA_Init+0x43c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00d      	beq.n	8002b2c <HAL_DMA_Init+0x3e4>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1c      	ldr	r2, [pc, #112]	@ (8002b88 <HAL_DMA_Init+0x440>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d008      	beq.n	8002b2c <HAL_DMA_Init+0x3e4>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8002b8c <HAL_DMA_Init+0x444>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d003      	beq.n	8002b2c <HAL_DMA_Init+0x3e4>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a19      	ldr	r2, [pc, #100]	@ (8002b90 <HAL_DMA_Init+0x448>)
 8002b2a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	4b13      	ldr	r3, [pc, #76]	@ (8002b94 <HAL_DMA_Init+0x44c>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b40      	cmp	r3, #64	@ 0x40
 8002b52:	d021      	beq.n	8002b98 <HAL_DMA_Init+0x450>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b80      	cmp	r3, #128	@ 0x80
 8002b5a:	d102      	bne.n	8002b62 <HAL_DMA_Init+0x41a>
 8002b5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b60:	e01b      	b.n	8002b9a <HAL_DMA_Init+0x452>
 8002b62:	2300      	movs	r3, #0
 8002b64:	e019      	b.n	8002b9a <HAL_DMA_Init+0x452>
 8002b66:	bf00      	nop
 8002b68:	fe10803f 	.word	0xfe10803f
 8002b6c:	5c001000 	.word	0x5c001000
 8002b70:	ffff0000 	.word	0xffff0000
 8002b74:	58025408 	.word	0x58025408
 8002b78:	5802541c 	.word	0x5802541c
 8002b7c:	58025430 	.word	0x58025430
 8002b80:	58025444 	.word	0x58025444
 8002b84:	58025458 	.word	0x58025458
 8002b88:	5802546c 	.word	0x5802546c
 8002b8c:	58025480 	.word	0x58025480
 8002b90:	58025494 	.word	0x58025494
 8002b94:	fffe000f 	.word	0xfffe000f
 8002b98:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68d2      	ldr	r2, [r2, #12]
 8002b9e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ba0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ba8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002bb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002bb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002bc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002bc8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4b6e      	ldr	r3, [pc, #440]	@ (8002d98 <HAL_DMA_Init+0x650>)
 8002be0:	4413      	add	r3, r2
 8002be2:	4a6e      	ldr	r2, [pc, #440]	@ (8002d9c <HAL_DMA_Init+0x654>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	009a      	lsls	r2, r3, #2
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f905 	bl	8002e00 <DMA_CalcBaseAndBitshift>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	2201      	movs	r2, #1
 8002c04:	409a      	lsls	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	e008      	b.n	8002c1e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2240      	movs	r2, #64	@ 0x40
 8002c10:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2203      	movs	r2, #3
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e0b7      	b.n	8002d8e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a5f      	ldr	r2, [pc, #380]	@ (8002da0 <HAL_DMA_Init+0x658>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d072      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a5d      	ldr	r2, [pc, #372]	@ (8002da4 <HAL_DMA_Init+0x65c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d06d      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a5c      	ldr	r2, [pc, #368]	@ (8002da8 <HAL_DMA_Init+0x660>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d068      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a5a      	ldr	r2, [pc, #360]	@ (8002dac <HAL_DMA_Init+0x664>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d063      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a59      	ldr	r2, [pc, #356]	@ (8002db0 <HAL_DMA_Init+0x668>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d05e      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a57      	ldr	r2, [pc, #348]	@ (8002db4 <HAL_DMA_Init+0x66c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d059      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a56      	ldr	r2, [pc, #344]	@ (8002db8 <HAL_DMA_Init+0x670>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d054      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a54      	ldr	r2, [pc, #336]	@ (8002dbc <HAL_DMA_Init+0x674>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d04f      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a53      	ldr	r2, [pc, #332]	@ (8002dc0 <HAL_DMA_Init+0x678>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d04a      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a51      	ldr	r2, [pc, #324]	@ (8002dc4 <HAL_DMA_Init+0x67c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d045      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a50      	ldr	r2, [pc, #320]	@ (8002dc8 <HAL_DMA_Init+0x680>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d040      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a4e      	ldr	r2, [pc, #312]	@ (8002dcc <HAL_DMA_Init+0x684>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d03b      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a4d      	ldr	r2, [pc, #308]	@ (8002dd0 <HAL_DMA_Init+0x688>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d036      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a4b      	ldr	r2, [pc, #300]	@ (8002dd4 <HAL_DMA_Init+0x68c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d031      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a4a      	ldr	r2, [pc, #296]	@ (8002dd8 <HAL_DMA_Init+0x690>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d02c      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a48      	ldr	r2, [pc, #288]	@ (8002ddc <HAL_DMA_Init+0x694>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d027      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a47      	ldr	r2, [pc, #284]	@ (8002de0 <HAL_DMA_Init+0x698>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d022      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a45      	ldr	r2, [pc, #276]	@ (8002de4 <HAL_DMA_Init+0x69c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01d      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a44      	ldr	r2, [pc, #272]	@ (8002de8 <HAL_DMA_Init+0x6a0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d018      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a42      	ldr	r2, [pc, #264]	@ (8002dec <HAL_DMA_Init+0x6a4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d013      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a41      	ldr	r2, [pc, #260]	@ (8002df0 <HAL_DMA_Init+0x6a8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00e      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a3f      	ldr	r2, [pc, #252]	@ (8002df4 <HAL_DMA_Init+0x6ac>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d009      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a3e      	ldr	r2, [pc, #248]	@ (8002df8 <HAL_DMA_Init+0x6b0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d004      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a3c      	ldr	r2, [pc, #240]	@ (8002dfc <HAL_DMA_Init+0x6b4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d101      	bne.n	8002d12 <HAL_DMA_Init+0x5ca>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <HAL_DMA_Init+0x5cc>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d032      	beq.n	8002d7e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f99f 	bl	800305c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b80      	cmp	r3, #128	@ 0x80
 8002d24:	d102      	bne.n	8002d2c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d40:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d010      	beq.n	8002d6c <HAL_DMA_Init+0x624>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d80c      	bhi.n	8002d6c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fa1c 	bl	8003190 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	e008      	b.n	8002d7e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	a7fdabf8 	.word	0xa7fdabf8
 8002d9c:	cccccccd 	.word	0xcccccccd
 8002da0:	40020010 	.word	0x40020010
 8002da4:	40020028 	.word	0x40020028
 8002da8:	40020040 	.word	0x40020040
 8002dac:	40020058 	.word	0x40020058
 8002db0:	40020070 	.word	0x40020070
 8002db4:	40020088 	.word	0x40020088
 8002db8:	400200a0 	.word	0x400200a0
 8002dbc:	400200b8 	.word	0x400200b8
 8002dc0:	40020410 	.word	0x40020410
 8002dc4:	40020428 	.word	0x40020428
 8002dc8:	40020440 	.word	0x40020440
 8002dcc:	40020458 	.word	0x40020458
 8002dd0:	40020470 	.word	0x40020470
 8002dd4:	40020488 	.word	0x40020488
 8002dd8:	400204a0 	.word	0x400204a0
 8002ddc:	400204b8 	.word	0x400204b8
 8002de0:	58025408 	.word	0x58025408
 8002de4:	5802541c 	.word	0x5802541c
 8002de8:	58025430 	.word	0x58025430
 8002dec:	58025444 	.word	0x58025444
 8002df0:	58025458 	.word	0x58025458
 8002df4:	5802546c 	.word	0x5802546c
 8002df8:	58025480 	.word	0x58025480
 8002dfc:	58025494 	.word	0x58025494

08002e00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a42      	ldr	r2, [pc, #264]	@ (8002f18 <DMA_CalcBaseAndBitshift+0x118>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d04a      	beq.n	8002ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a41      	ldr	r2, [pc, #260]	@ (8002f1c <DMA_CalcBaseAndBitshift+0x11c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d045      	beq.n	8002ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a3f      	ldr	r2, [pc, #252]	@ (8002f20 <DMA_CalcBaseAndBitshift+0x120>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d040      	beq.n	8002ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a3e      	ldr	r2, [pc, #248]	@ (8002f24 <DMA_CalcBaseAndBitshift+0x124>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d03b      	beq.n	8002ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a3c      	ldr	r2, [pc, #240]	@ (8002f28 <DMA_CalcBaseAndBitshift+0x128>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d036      	beq.n	8002ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a3b      	ldr	r2, [pc, #236]	@ (8002f2c <DMA_CalcBaseAndBitshift+0x12c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d031      	beq.n	8002ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a39      	ldr	r2, [pc, #228]	@ (8002f30 <DMA_CalcBaseAndBitshift+0x130>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d02c      	beq.n	8002ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a38      	ldr	r2, [pc, #224]	@ (8002f34 <DMA_CalcBaseAndBitshift+0x134>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d027      	beq.n	8002ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a36      	ldr	r2, [pc, #216]	@ (8002f38 <DMA_CalcBaseAndBitshift+0x138>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d022      	beq.n	8002ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a35      	ldr	r2, [pc, #212]	@ (8002f3c <DMA_CalcBaseAndBitshift+0x13c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d01d      	beq.n	8002ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a33      	ldr	r2, [pc, #204]	@ (8002f40 <DMA_CalcBaseAndBitshift+0x140>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d018      	beq.n	8002ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a32      	ldr	r2, [pc, #200]	@ (8002f44 <DMA_CalcBaseAndBitshift+0x144>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d013      	beq.n	8002ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a30      	ldr	r2, [pc, #192]	@ (8002f48 <DMA_CalcBaseAndBitshift+0x148>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00e      	beq.n	8002ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a2f      	ldr	r2, [pc, #188]	@ (8002f4c <DMA_CalcBaseAndBitshift+0x14c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d009      	beq.n	8002ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a2d      	ldr	r2, [pc, #180]	@ (8002f50 <DMA_CalcBaseAndBitshift+0x150>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d004      	beq.n	8002ea8 <DMA_CalcBaseAndBitshift+0xa8>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a2c      	ldr	r2, [pc, #176]	@ (8002f54 <DMA_CalcBaseAndBitshift+0x154>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d101      	bne.n	8002eac <DMA_CalcBaseAndBitshift+0xac>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <DMA_CalcBaseAndBitshift+0xae>
 8002eac:	2300      	movs	r3, #0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d024      	beq.n	8002efc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	3b10      	subs	r3, #16
 8002eba:	4a27      	ldr	r2, [pc, #156]	@ (8002f58 <DMA_CalcBaseAndBitshift+0x158>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	4a24      	ldr	r2, [pc, #144]	@ (8002f5c <DMA_CalcBaseAndBitshift+0x15c>)
 8002ecc:	5cd3      	ldrb	r3, [r2, r3]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	d908      	bls.n	8002eec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f60 <DMA_CalcBaseAndBitshift+0x160>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	1d1a      	adds	r2, r3, #4
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	659a      	str	r2, [r3, #88]	@ 0x58
 8002eea:	e00d      	b.n	8002f08 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f60 <DMA_CalcBaseAndBitshift+0x160>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002efa:	e005      	b.n	8002f08 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	40020010 	.word	0x40020010
 8002f1c:	40020028 	.word	0x40020028
 8002f20:	40020040 	.word	0x40020040
 8002f24:	40020058 	.word	0x40020058
 8002f28:	40020070 	.word	0x40020070
 8002f2c:	40020088 	.word	0x40020088
 8002f30:	400200a0 	.word	0x400200a0
 8002f34:	400200b8 	.word	0x400200b8
 8002f38:	40020410 	.word	0x40020410
 8002f3c:	40020428 	.word	0x40020428
 8002f40:	40020440 	.word	0x40020440
 8002f44:	40020458 	.word	0x40020458
 8002f48:	40020470 	.word	0x40020470
 8002f4c:	40020488 	.word	0x40020488
 8002f50:	400204a0 	.word	0x400204a0
 8002f54:	400204b8 	.word	0x400204b8
 8002f58:	aaaaaaab 	.word	0xaaaaaaab
 8002f5c:	08008598 	.word	0x08008598
 8002f60:	fffffc00 	.word	0xfffffc00

08002f64 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d120      	bne.n	8002fba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d858      	bhi.n	8003032 <DMA_CheckFifoParam+0xce>
 8002f80:	a201      	add	r2, pc, #4	@ (adr r2, 8002f88 <DMA_CheckFifoParam+0x24>)
 8002f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f86:	bf00      	nop
 8002f88:	08002f99 	.word	0x08002f99
 8002f8c:	08002fab 	.word	0x08002fab
 8002f90:	08002f99 	.word	0x08002f99
 8002f94:	08003033 	.word	0x08003033
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d048      	beq.n	8003036 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002fa8:	e045      	b.n	8003036 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fb2:	d142      	bne.n	800303a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002fb8:	e03f      	b.n	800303a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fc2:	d123      	bne.n	800300c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d838      	bhi.n	800303e <DMA_CheckFifoParam+0xda>
 8002fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd4 <DMA_CheckFifoParam+0x70>)
 8002fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd2:	bf00      	nop
 8002fd4:	08002fe5 	.word	0x08002fe5
 8002fd8:	08002feb 	.word	0x08002feb
 8002fdc:	08002fe5 	.word	0x08002fe5
 8002fe0:	08002ffd 	.word	0x08002ffd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
        break;
 8002fe8:	e030      	b.n	800304c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d025      	beq.n	8003042 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ffa:	e022      	b.n	8003042 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003000:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003004:	d11f      	bne.n	8003046 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800300a:	e01c      	b.n	8003046 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003010:	2b02      	cmp	r3, #2
 8003012:	d902      	bls.n	800301a <DMA_CheckFifoParam+0xb6>
 8003014:	2b03      	cmp	r3, #3
 8003016:	d003      	beq.n	8003020 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003018:	e018      	b.n	800304c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
        break;
 800301e:	e015      	b.n	800304c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003024:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00e      	beq.n	800304a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
    break;
 8003030:	e00b      	b.n	800304a <DMA_CheckFifoParam+0xe6>
        break;
 8003032:	bf00      	nop
 8003034:	e00a      	b.n	800304c <DMA_CheckFifoParam+0xe8>
        break;
 8003036:	bf00      	nop
 8003038:	e008      	b.n	800304c <DMA_CheckFifoParam+0xe8>
        break;
 800303a:	bf00      	nop
 800303c:	e006      	b.n	800304c <DMA_CheckFifoParam+0xe8>
        break;
 800303e:	bf00      	nop
 8003040:	e004      	b.n	800304c <DMA_CheckFifoParam+0xe8>
        break;
 8003042:	bf00      	nop
 8003044:	e002      	b.n	800304c <DMA_CheckFifoParam+0xe8>
        break;
 8003046:	bf00      	nop
 8003048:	e000      	b.n	800304c <DMA_CheckFifoParam+0xe8>
    break;
 800304a:	bf00      	nop
    }
  }

  return status;
 800304c:	7bfb      	ldrb	r3, [r7, #15]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop

0800305c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a38      	ldr	r2, [pc, #224]	@ (8003150 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d022      	beq.n	80030ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a36      	ldr	r2, [pc, #216]	@ (8003154 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d01d      	beq.n	80030ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a35      	ldr	r2, [pc, #212]	@ (8003158 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d018      	beq.n	80030ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a33      	ldr	r2, [pc, #204]	@ (800315c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a32      	ldr	r2, [pc, #200]	@ (8003160 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d00e      	beq.n	80030ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a30      	ldr	r2, [pc, #192]	@ (8003164 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d009      	beq.n	80030ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a2f      	ldr	r2, [pc, #188]	@ (8003168 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d004      	beq.n	80030ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a2d      	ldr	r2, [pc, #180]	@ (800316c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d101      	bne.n	80030be <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80030be:	2300      	movs	r3, #0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01a      	beq.n	80030fa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	3b08      	subs	r3, #8
 80030cc:	4a28      	ldr	r2, [pc, #160]	@ (8003170 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4b26      	ldr	r3, [pc, #152]	@ (8003174 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	461a      	mov	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a24      	ldr	r2, [pc, #144]	@ (8003178 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80030e8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	2201      	movs	r2, #1
 80030f2:	409a      	lsls	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80030f8:	e024      	b.n	8003144 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	3b10      	subs	r3, #16
 8003102:	4a1e      	ldr	r2, [pc, #120]	@ (800317c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003104:	fba2 2303 	umull	r2, r3, r2, r3
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4a1c      	ldr	r2, [pc, #112]	@ (8003180 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d806      	bhi.n	8003122 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	4a1b      	ldr	r2, [pc, #108]	@ (8003184 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d902      	bls.n	8003122 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3308      	adds	r3, #8
 8003120:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4b18      	ldr	r3, [pc, #96]	@ (8003188 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	461a      	mov	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a16      	ldr	r2, [pc, #88]	@ (800318c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003134:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	2201      	movs	r2, #1
 800313e:	409a      	lsls	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	58025408 	.word	0x58025408
 8003154:	5802541c 	.word	0x5802541c
 8003158:	58025430 	.word	0x58025430
 800315c:	58025444 	.word	0x58025444
 8003160:	58025458 	.word	0x58025458
 8003164:	5802546c 	.word	0x5802546c
 8003168:	58025480 	.word	0x58025480
 800316c:	58025494 	.word	0x58025494
 8003170:	cccccccd 	.word	0xcccccccd
 8003174:	16009600 	.word	0x16009600
 8003178:	58025880 	.word	0x58025880
 800317c:	aaaaaaab 	.word	0xaaaaaaab
 8003180:	400204b8 	.word	0x400204b8
 8003184:	4002040f 	.word	0x4002040f
 8003188:	10008200 	.word	0x10008200
 800318c:	40020880 	.word	0x40020880

08003190 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d04a      	beq.n	800323c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d847      	bhi.n	800323c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a25      	ldr	r2, [pc, #148]	@ (8003248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d022      	beq.n	80031fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a24      	ldr	r2, [pc, #144]	@ (800324c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d01d      	beq.n	80031fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a22      	ldr	r2, [pc, #136]	@ (8003250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d018      	beq.n	80031fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a21      	ldr	r2, [pc, #132]	@ (8003254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d013      	beq.n	80031fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00e      	beq.n	80031fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1e      	ldr	r2, [pc, #120]	@ (800325c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d009      	beq.n	80031fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d004      	beq.n	80031fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d101      	bne.n	8003200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003200:	2300      	movs	r3, #0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4b17      	ldr	r3, [pc, #92]	@ (8003268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	461a      	mov	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a15      	ldr	r2, [pc, #84]	@ (800326c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003218:	671a      	str	r2, [r3, #112]	@ 0x70
 800321a:	e009      	b.n	8003230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4b14      	ldr	r3, [pc, #80]	@ (8003270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	461a      	mov	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a11      	ldr	r2, [pc, #68]	@ (8003274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800322e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	3b01      	subs	r3, #1
 8003234:	2201      	movs	r2, #1
 8003236:	409a      	lsls	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	58025408 	.word	0x58025408
 800324c:	5802541c 	.word	0x5802541c
 8003250:	58025430 	.word	0x58025430
 8003254:	58025444 	.word	0x58025444
 8003258:	58025458 	.word	0x58025458
 800325c:	5802546c 	.word	0x5802546c
 8003260:	58025480 	.word	0x58025480
 8003264:	58025494 	.word	0x58025494
 8003268:	1600963f 	.word	0x1600963f
 800326c:	58025940 	.word	0x58025940
 8003270:	1000823f 	.word	0x1000823f
 8003274:	40020940 	.word	0x40020940

08003278 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003278:	b480      	push	{r7}
 800327a:	b089      	sub	sp, #36	@ 0x24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003286:	4b89      	ldr	r3, [pc, #548]	@ (80034ac <HAL_GPIO_Init+0x234>)
 8003288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800328a:	e194      	b.n	80035b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	2101      	movs	r1, #1
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	fa01 f303 	lsl.w	r3, r1, r3
 8003298:	4013      	ands	r3, r2
 800329a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 8186 	beq.w	80035b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d005      	beq.n	80032bc <HAL_GPIO_Init+0x44>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d130      	bne.n	800331e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	2203      	movs	r2, #3
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032f2:	2201      	movs	r2, #1
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	091b      	lsrs	r3, r3, #4
 8003308:	f003 0201 	and.w	r2, r3, #1
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4313      	orrs	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b03      	cmp	r3, #3
 8003328:	d017      	beq.n	800335a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	2203      	movs	r2, #3
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4013      	ands	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d123      	bne.n	80033ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	08da      	lsrs	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3208      	adds	r2, #8
 800336e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	220f      	movs	r2, #15
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	08da      	lsrs	r2, r3, #3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3208      	adds	r2, #8
 80033a8:	69b9      	ldr	r1, [r7, #24]
 80033aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	2203      	movs	r2, #3
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4013      	ands	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 0203 	and.w	r2, r3, #3
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80e0 	beq.w	80035b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f0:	4b2f      	ldr	r3, [pc, #188]	@ (80034b0 <HAL_GPIO_Init+0x238>)
 80033f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80033f6:	4a2e      	ldr	r2, [pc, #184]	@ (80034b0 <HAL_GPIO_Init+0x238>)
 80033f8:	f043 0302 	orr.w	r3, r3, #2
 80033fc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003400:	4b2b      	ldr	r3, [pc, #172]	@ (80034b0 <HAL_GPIO_Init+0x238>)
 8003402:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800340e:	4a29      	ldr	r2, [pc, #164]	@ (80034b4 <HAL_GPIO_Init+0x23c>)
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	089b      	lsrs	r3, r3, #2
 8003414:	3302      	adds	r3, #2
 8003416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	220f      	movs	r2, #15
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4013      	ands	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a20      	ldr	r2, [pc, #128]	@ (80034b8 <HAL_GPIO_Init+0x240>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d052      	beq.n	80034e0 <HAL_GPIO_Init+0x268>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a1f      	ldr	r2, [pc, #124]	@ (80034bc <HAL_GPIO_Init+0x244>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d031      	beq.n	80034a6 <HAL_GPIO_Init+0x22e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a1e      	ldr	r2, [pc, #120]	@ (80034c0 <HAL_GPIO_Init+0x248>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d02b      	beq.n	80034a2 <HAL_GPIO_Init+0x22a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a1d      	ldr	r2, [pc, #116]	@ (80034c4 <HAL_GPIO_Init+0x24c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d025      	beq.n	800349e <HAL_GPIO_Init+0x226>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a1c      	ldr	r2, [pc, #112]	@ (80034c8 <HAL_GPIO_Init+0x250>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d01f      	beq.n	800349a <HAL_GPIO_Init+0x222>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a1b      	ldr	r2, [pc, #108]	@ (80034cc <HAL_GPIO_Init+0x254>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d019      	beq.n	8003496 <HAL_GPIO_Init+0x21e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a1a      	ldr	r2, [pc, #104]	@ (80034d0 <HAL_GPIO_Init+0x258>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d013      	beq.n	8003492 <HAL_GPIO_Init+0x21a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a19      	ldr	r2, [pc, #100]	@ (80034d4 <HAL_GPIO_Init+0x25c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00d      	beq.n	800348e <HAL_GPIO_Init+0x216>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a18      	ldr	r2, [pc, #96]	@ (80034d8 <HAL_GPIO_Init+0x260>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d007      	beq.n	800348a <HAL_GPIO_Init+0x212>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a17      	ldr	r2, [pc, #92]	@ (80034dc <HAL_GPIO_Init+0x264>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <HAL_GPIO_Init+0x20e>
 8003482:	2309      	movs	r3, #9
 8003484:	e02d      	b.n	80034e2 <HAL_GPIO_Init+0x26a>
 8003486:	230a      	movs	r3, #10
 8003488:	e02b      	b.n	80034e2 <HAL_GPIO_Init+0x26a>
 800348a:	2308      	movs	r3, #8
 800348c:	e029      	b.n	80034e2 <HAL_GPIO_Init+0x26a>
 800348e:	2307      	movs	r3, #7
 8003490:	e027      	b.n	80034e2 <HAL_GPIO_Init+0x26a>
 8003492:	2306      	movs	r3, #6
 8003494:	e025      	b.n	80034e2 <HAL_GPIO_Init+0x26a>
 8003496:	2305      	movs	r3, #5
 8003498:	e023      	b.n	80034e2 <HAL_GPIO_Init+0x26a>
 800349a:	2304      	movs	r3, #4
 800349c:	e021      	b.n	80034e2 <HAL_GPIO_Init+0x26a>
 800349e:	2303      	movs	r3, #3
 80034a0:	e01f      	b.n	80034e2 <HAL_GPIO_Init+0x26a>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e01d      	b.n	80034e2 <HAL_GPIO_Init+0x26a>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e01b      	b.n	80034e2 <HAL_GPIO_Init+0x26a>
 80034aa:	bf00      	nop
 80034ac:	58000080 	.word	0x58000080
 80034b0:	58024400 	.word	0x58024400
 80034b4:	58000400 	.word	0x58000400
 80034b8:	58020000 	.word	0x58020000
 80034bc:	58020400 	.word	0x58020400
 80034c0:	58020800 	.word	0x58020800
 80034c4:	58020c00 	.word	0x58020c00
 80034c8:	58021000 	.word	0x58021000
 80034cc:	58021400 	.word	0x58021400
 80034d0:	58021800 	.word	0x58021800
 80034d4:	58021c00 	.word	0x58021c00
 80034d8:	58022000 	.word	0x58022000
 80034dc:	58022400 	.word	0x58022400
 80034e0:	2300      	movs	r3, #0
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	f002 0203 	and.w	r2, r2, #3
 80034e8:	0092      	lsls	r2, r2, #2
 80034ea:	4093      	lsls	r3, r2
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034f2:	4938      	ldr	r1, [pc, #224]	@ (80035d4 <HAL_GPIO_Init+0x35c>)
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	089b      	lsrs	r3, r3, #2
 80034f8:	3302      	adds	r3, #2
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	43db      	mvns	r3, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4013      	ands	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003526:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800352e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	43db      	mvns	r3, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4013      	ands	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003554:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	43db      	mvns	r3, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4013      	ands	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	3301      	adds	r3, #1
 80035b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	fa22 f303 	lsr.w	r3, r2, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f47f ae63 	bne.w	800328c <HAL_GPIO_Init+0x14>
  }
}
 80035c6:	bf00      	nop
 80035c8:	bf00      	nop
 80035ca:	3724      	adds	r7, #36	@ 0x24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	58000400 	.word	0x58000400

080035d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	807b      	strh	r3, [r7, #2]
 80035e4:	4613      	mov	r3, r2
 80035e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035e8:	787b      	ldrb	r3, [r7, #1]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035ee:	887a      	ldrh	r2, [r7, #2]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80035f4:	e003      	b.n	80035fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80035f6:	887b      	ldrh	r3, [r7, #2]
 80035f8:	041a      	lsls	r2, r3, #16
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	619a      	str	r2, [r3, #24]
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003614:	4b19      	ldr	r3, [pc, #100]	@ (800367c <HAL_PWREx_ConfigSupply+0x70>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b04      	cmp	r3, #4
 800361e:	d00a      	beq.n	8003636 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003620:	4b16      	ldr	r3, [pc, #88]	@ (800367c <HAL_PWREx_ConfigSupply+0x70>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	429a      	cmp	r2, r3
 800362c:	d001      	beq.n	8003632 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e01f      	b.n	8003672 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e01d      	b.n	8003672 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003636:	4b11      	ldr	r3, [pc, #68]	@ (800367c <HAL_PWREx_ConfigSupply+0x70>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f023 0207 	bic.w	r2, r3, #7
 800363e:	490f      	ldr	r1, [pc, #60]	@ (800367c <HAL_PWREx_ConfigSupply+0x70>)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4313      	orrs	r3, r2
 8003644:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003646:	f7fd ffab 	bl	80015a0 <HAL_GetTick>
 800364a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800364c:	e009      	b.n	8003662 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800364e:	f7fd ffa7 	bl	80015a0 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800365c:	d901      	bls.n	8003662 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e007      	b.n	8003672 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003662:	4b06      	ldr	r3, [pc, #24]	@ (800367c <HAL_PWREx_ConfigSupply+0x70>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800366a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800366e:	d1ee      	bne.n	800364e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	58024800 	.word	0x58024800

08003680 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08c      	sub	sp, #48	@ 0x30
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d102      	bne.n	8003694 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	f000 bc48 	b.w	8003f24 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 8088 	beq.w	80037b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036a2:	4b99      	ldr	r3, [pc, #612]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036ac:	4b96      	ldr	r3, [pc, #600]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 80036ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80036b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b4:	2b10      	cmp	r3, #16
 80036b6:	d007      	beq.n	80036c8 <HAL_RCC_OscConfig+0x48>
 80036b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ba:	2b18      	cmp	r3, #24
 80036bc:	d111      	bne.n	80036e2 <HAL_RCC_OscConfig+0x62>
 80036be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c0:	f003 0303 	and.w	r3, r3, #3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d10c      	bne.n	80036e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c8:	4b8f      	ldr	r3, [pc, #572]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d06d      	beq.n	80037b0 <HAL_RCC_OscConfig+0x130>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d169      	bne.n	80037b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	f000 bc21 	b.w	8003f24 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036ea:	d106      	bne.n	80036fa <HAL_RCC_OscConfig+0x7a>
 80036ec:	4b86      	ldr	r3, [pc, #536]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a85      	ldr	r2, [pc, #532]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 80036f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	e02e      	b.n	8003758 <HAL_RCC_OscConfig+0xd8>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10c      	bne.n	800371c <HAL_RCC_OscConfig+0x9c>
 8003702:	4b81      	ldr	r3, [pc, #516]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a80      	ldr	r2, [pc, #512]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 8003708:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	4b7e      	ldr	r3, [pc, #504]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a7d      	ldr	r2, [pc, #500]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 8003714:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e01d      	b.n	8003758 <HAL_RCC_OscConfig+0xd8>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003724:	d10c      	bne.n	8003740 <HAL_RCC_OscConfig+0xc0>
 8003726:	4b78      	ldr	r3, [pc, #480]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a77      	ldr	r2, [pc, #476]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 800372c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4b75      	ldr	r3, [pc, #468]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a74      	ldr	r2, [pc, #464]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 8003738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	e00b      	b.n	8003758 <HAL_RCC_OscConfig+0xd8>
 8003740:	4b71      	ldr	r3, [pc, #452]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a70      	ldr	r2, [pc, #448]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 8003746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	4b6e      	ldr	r3, [pc, #440]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a6d      	ldr	r2, [pc, #436]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 8003752:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d013      	beq.n	8003788 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7fd ff1e 	bl	80015a0 <HAL_GetTick>
 8003764:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003768:	f7fd ff1a 	bl	80015a0 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b64      	cmp	r3, #100	@ 0x64
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e3d4      	b.n	8003f24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800377a:	4b63      	ldr	r3, [pc, #396]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0xe8>
 8003786:	e014      	b.n	80037b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7fd ff0a 	bl	80015a0 <HAL_GetTick>
 800378c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003790:	f7fd ff06 	bl	80015a0 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b64      	cmp	r3, #100	@ 0x64
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e3c0      	b.n	8003f24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037a2:	4b59      	ldr	r3, [pc, #356]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x110>
 80037ae:	e000      	b.n	80037b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80ca 	beq.w	8003954 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c0:	4b51      	ldr	r3, [pc, #324]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037ca:	4b4f      	ldr	r3, [pc, #316]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 80037cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d007      	beq.n	80037e6 <HAL_RCC_OscConfig+0x166>
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	2b18      	cmp	r3, #24
 80037da:	d156      	bne.n	800388a <HAL_RCC_OscConfig+0x20a>
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d151      	bne.n	800388a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037e6:	4b48      	ldr	r3, [pc, #288]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <HAL_RCC_OscConfig+0x17e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e392      	b.n	8003f24 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037fe:	4b42      	ldr	r3, [pc, #264]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 0219 	bic.w	r2, r3, #25
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	493f      	ldr	r1, [pc, #252]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 800380c:	4313      	orrs	r3, r2
 800380e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003810:	f7fd fec6 	bl	80015a0 <HAL_GetTick>
 8003814:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003818:	f7fd fec2 	bl	80015a0 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e37c      	b.n	8003f24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800382a:	4b37      	ldr	r3, [pc, #220]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f0      	beq.n	8003818 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003836:	f7fd febf 	bl	80015b8 <HAL_GetREVID>
 800383a:	4603      	mov	r3, r0
 800383c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003840:	4293      	cmp	r3, r2
 8003842:	d817      	bhi.n	8003874 <HAL_RCC_OscConfig+0x1f4>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2b40      	cmp	r3, #64	@ 0x40
 800384a:	d108      	bne.n	800385e <HAL_RCC_OscConfig+0x1de>
 800384c:	4b2e      	ldr	r3, [pc, #184]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003854:	4a2c      	ldr	r2, [pc, #176]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 8003856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800385a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800385c:	e07a      	b.n	8003954 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385e:	4b2a      	ldr	r3, [pc, #168]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	031b      	lsls	r3, r3, #12
 800386c:	4926      	ldr	r1, [pc, #152]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 800386e:	4313      	orrs	r3, r2
 8003870:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003872:	e06f      	b.n	8003954 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003874:	4b24      	ldr	r3, [pc, #144]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	4921      	ldr	r1, [pc, #132]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003888:	e064      	b.n	8003954 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d047      	beq.n	8003922 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003892:	4b1d      	ldr	r3, [pc, #116]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 0219 	bic.w	r2, r3, #25
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	491a      	ldr	r1, [pc, #104]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fd fe7c 	bl	80015a0 <HAL_GetTick>
 80038a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ac:	f7fd fe78 	bl	80015a0 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e332      	b.n	8003f24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038be:	4b12      	ldr	r3, [pc, #72]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ca:	f7fd fe75 	bl	80015b8 <HAL_GetREVID>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d819      	bhi.n	800390c <HAL_RCC_OscConfig+0x28c>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	2b40      	cmp	r3, #64	@ 0x40
 80038de:	d108      	bne.n	80038f2 <HAL_RCC_OscConfig+0x272>
 80038e0:	4b09      	ldr	r3, [pc, #36]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80038e8:	4a07      	ldr	r2, [pc, #28]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 80038ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ee:	6053      	str	r3, [r2, #4]
 80038f0:	e030      	b.n	8003954 <HAL_RCC_OscConfig+0x2d4>
 80038f2:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	031b      	lsls	r3, r3, #12
 8003900:	4901      	ldr	r1, [pc, #4]	@ (8003908 <HAL_RCC_OscConfig+0x288>)
 8003902:	4313      	orrs	r3, r2
 8003904:	604b      	str	r3, [r1, #4]
 8003906:	e025      	b.n	8003954 <HAL_RCC_OscConfig+0x2d4>
 8003908:	58024400 	.word	0x58024400
 800390c:	4b9a      	ldr	r3, [pc, #616]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	061b      	lsls	r3, r3, #24
 800391a:	4997      	ldr	r1, [pc, #604]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 800391c:	4313      	orrs	r3, r2
 800391e:	604b      	str	r3, [r1, #4]
 8003920:	e018      	b.n	8003954 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003922:	4b95      	ldr	r3, [pc, #596]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a94      	ldr	r2, [pc, #592]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003928:	f023 0301 	bic.w	r3, r3, #1
 800392c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392e:	f7fd fe37 	bl	80015a0 <HAL_GetTick>
 8003932:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003936:	f7fd fe33 	bl	80015a0 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e2ed      	b.n	8003f24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003948:	4b8b      	ldr	r3, [pc, #556]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f0      	bne.n	8003936 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80a9 	beq.w	8003ab4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003962:	4b85      	ldr	r3, [pc, #532]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800396a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800396c:	4b82      	ldr	r3, [pc, #520]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 800396e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003970:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b08      	cmp	r3, #8
 8003976:	d007      	beq.n	8003988 <HAL_RCC_OscConfig+0x308>
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	2b18      	cmp	r3, #24
 800397c:	d13a      	bne.n	80039f4 <HAL_RCC_OscConfig+0x374>
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d135      	bne.n	80039f4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003988:	4b7b      	ldr	r3, [pc, #492]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_RCC_OscConfig+0x320>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	2b80      	cmp	r3, #128	@ 0x80
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e2c1      	b.n	8003f24 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039a0:	f7fd fe0a 	bl	80015b8 <HAL_GetREVID>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d817      	bhi.n	80039de <HAL_RCC_OscConfig+0x35e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d108      	bne.n	80039c8 <HAL_RCC_OscConfig+0x348>
 80039b6:	4b70      	ldr	r3, [pc, #448]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80039be:	4a6e      	ldr	r2, [pc, #440]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 80039c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80039c4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039c6:	e075      	b.n	8003ab4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039c8:	4b6b      	ldr	r3, [pc, #428]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	069b      	lsls	r3, r3, #26
 80039d6:	4968      	ldr	r1, [pc, #416]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039dc:	e06a      	b.n	8003ab4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039de:	4b66      	ldr	r3, [pc, #408]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	061b      	lsls	r3, r3, #24
 80039ec:	4962      	ldr	r1, [pc, #392]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039f2:	e05f      	b.n	8003ab4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d042      	beq.n	8003a82 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80039fc:	4b5e      	ldr	r3, [pc, #376]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a5d      	ldr	r2, [pc, #372]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fd fdca 	bl	80015a0 <HAL_GetTick>
 8003a0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a10:	f7fd fdc6 	bl	80015a0 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e280      	b.n	8003f24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a22:	4b55      	ldr	r3, [pc, #340]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a2e:	f7fd fdc3 	bl	80015b8 <HAL_GetREVID>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d817      	bhi.n	8003a6c <HAL_RCC_OscConfig+0x3ec>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d108      	bne.n	8003a56 <HAL_RCC_OscConfig+0x3d6>
 8003a44:	4b4c      	ldr	r3, [pc, #304]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003a4c:	4a4a      	ldr	r2, [pc, #296]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003a4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a52:	6053      	str	r3, [r2, #4]
 8003a54:	e02e      	b.n	8003ab4 <HAL_RCC_OscConfig+0x434>
 8003a56:	4b48      	ldr	r3, [pc, #288]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	069b      	lsls	r3, r3, #26
 8003a64:	4944      	ldr	r1, [pc, #272]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	604b      	str	r3, [r1, #4]
 8003a6a:	e023      	b.n	8003ab4 <HAL_RCC_OscConfig+0x434>
 8003a6c:	4b42      	ldr	r3, [pc, #264]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	061b      	lsls	r3, r3, #24
 8003a7a:	493f      	ldr	r1, [pc, #252]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60cb      	str	r3, [r1, #12]
 8003a80:	e018      	b.n	8003ab4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a82:	4b3d      	ldr	r3, [pc, #244]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a3c      	ldr	r2, [pc, #240]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003a88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8e:	f7fd fd87 	bl	80015a0 <HAL_GetTick>
 8003a92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a96:	f7fd fd83 	bl	80015a0 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e23d      	b.n	8003f24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003aa8:	4b33      	ldr	r3, [pc, #204]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1f0      	bne.n	8003a96 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d036      	beq.n	8003b2e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d019      	beq.n	8003afc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003acc:	4a2a      	ldr	r2, [pc, #168]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad4:	f7fd fd64 	bl	80015a0 <HAL_GetTick>
 8003ad8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003adc:	f7fd fd60 	bl	80015a0 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e21a      	b.n	8003f24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003aee:	4b22      	ldr	r3, [pc, #136]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0x45c>
 8003afa:	e018      	b.n	8003b2e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003afc:	4b1e      	ldr	r3, [pc, #120]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003afe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b00:	4a1d      	ldr	r2, [pc, #116]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003b02:	f023 0301 	bic.w	r3, r3, #1
 8003b06:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b08:	f7fd fd4a 	bl	80015a0 <HAL_GetTick>
 8003b0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b10:	f7fd fd46 	bl	80015a0 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e200      	b.n	8003f24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b22:	4b15      	ldr	r3, [pc, #84]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d039      	beq.n	8003bae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d01c      	beq.n	8003b7c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b42:	4b0d      	ldr	r3, [pc, #52]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a0c      	ldr	r2, [pc, #48]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003b48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b4e:	f7fd fd27 	bl	80015a0 <HAL_GetTick>
 8003b52:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b56:	f7fd fd23 	bl	80015a0 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e1dd      	b.n	8003f24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b68:	4b03      	ldr	r3, [pc, #12]	@ (8003b78 <HAL_RCC_OscConfig+0x4f8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x4d6>
 8003b74:	e01b      	b.n	8003bae <HAL_RCC_OscConfig+0x52e>
 8003b76:	bf00      	nop
 8003b78:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b7c:	4b9b      	ldr	r3, [pc, #620]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a9a      	ldr	r2, [pc, #616]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003b82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b86:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b88:	f7fd fd0a 	bl	80015a0 <HAL_GetTick>
 8003b8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b90:	f7fd fd06 	bl	80015a0 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e1c0      	b.n	8003f24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ba2:	4b92      	ldr	r3, [pc, #584]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 8081 	beq.w	8003cbe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bbc:	4b8c      	ldr	r3, [pc, #560]	@ (8003df0 <HAL_RCC_OscConfig+0x770>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a8b      	ldr	r2, [pc, #556]	@ (8003df0 <HAL_RCC_OscConfig+0x770>)
 8003bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bc8:	f7fd fcea 	bl	80015a0 <HAL_GetTick>
 8003bcc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd0:	f7fd fce6 	bl	80015a0 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	@ 0x64
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e1a0      	b.n	8003f24 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003be2:	4b83      	ldr	r3, [pc, #524]	@ (8003df0 <HAL_RCC_OscConfig+0x770>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d106      	bne.n	8003c04 <HAL_RCC_OscConfig+0x584>
 8003bf6:	4b7d      	ldr	r3, [pc, #500]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bfa:	4a7c      	ldr	r2, [pc, #496]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c02:	e02d      	b.n	8003c60 <HAL_RCC_OscConfig+0x5e0>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10c      	bne.n	8003c26 <HAL_RCC_OscConfig+0x5a6>
 8003c0c:	4b77      	ldr	r3, [pc, #476]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c10:	4a76      	ldr	r2, [pc, #472]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003c12:	f023 0301 	bic.w	r3, r3, #1
 8003c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c18:	4b74      	ldr	r3, [pc, #464]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1c:	4a73      	ldr	r2, [pc, #460]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003c1e:	f023 0304 	bic.w	r3, r3, #4
 8003c22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c24:	e01c      	b.n	8003c60 <HAL_RCC_OscConfig+0x5e0>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b05      	cmp	r3, #5
 8003c2c:	d10c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x5c8>
 8003c2e:	4b6f      	ldr	r3, [pc, #444]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c32:	4a6e      	ldr	r2, [pc, #440]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003c34:	f043 0304 	orr.w	r3, r3, #4
 8003c38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c3a:	4b6c      	ldr	r3, [pc, #432]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3e:	4a6b      	ldr	r2, [pc, #428]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c46:	e00b      	b.n	8003c60 <HAL_RCC_OscConfig+0x5e0>
 8003c48:	4b68      	ldr	r3, [pc, #416]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4c:	4a67      	ldr	r2, [pc, #412]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c54:	4b65      	ldr	r3, [pc, #404]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c58:	4a64      	ldr	r2, [pc, #400]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003c5a:	f023 0304 	bic.w	r3, r3, #4
 8003c5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d015      	beq.n	8003c94 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c68:	f7fd fc9a 	bl	80015a0 <HAL_GetTick>
 8003c6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c6e:	e00a      	b.n	8003c86 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c70:	f7fd fc96 	bl	80015a0 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e14e      	b.n	8003f24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c86:	4b59      	ldr	r3, [pc, #356]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0ee      	beq.n	8003c70 <HAL_RCC_OscConfig+0x5f0>
 8003c92:	e014      	b.n	8003cbe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c94:	f7fd fc84 	bl	80015a0 <HAL_GetTick>
 8003c98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9c:	f7fd fc80 	bl	80015a0 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e138      	b.n	8003f24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cb2:	4b4e      	ldr	r3, [pc, #312]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1ee      	bne.n	8003c9c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 812d 	beq.w	8003f22 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003cc8:	4b48      	ldr	r3, [pc, #288]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cd0:	2b18      	cmp	r3, #24
 8003cd2:	f000 80bd 	beq.w	8003e50 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	f040 809e 	bne.w	8003e1c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce0:	4b42      	ldr	r3, [pc, #264]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a41      	ldr	r2, [pc, #260]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003ce6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fd fc58 	bl	80015a0 <HAL_GetTick>
 8003cf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf4:	f7fd fc54 	bl	80015a0 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e10e      	b.n	8003f24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d06:	4b39      	ldr	r3, [pc, #228]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f0      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d12:	4b36      	ldr	r3, [pc, #216]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003d14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d16:	4b37      	ldr	r3, [pc, #220]	@ (8003df4 <HAL_RCC_OscConfig+0x774>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d22:	0112      	lsls	r2, r2, #4
 8003d24:	430a      	orrs	r2, r1
 8003d26:	4931      	ldr	r1, [pc, #196]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d30:	3b01      	subs	r3, #1
 8003d32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	025b      	lsls	r3, r3, #9
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d46:	3b01      	subs	r3, #1
 8003d48:	041b      	lsls	r3, r3, #16
 8003d4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d54:	3b01      	subs	r3, #1
 8003d56:	061b      	lsls	r3, r3, #24
 8003d58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003d5c:	4923      	ldr	r1, [pc, #140]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003d62:	4b22      	ldr	r3, [pc, #136]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d66:	4a21      	ldr	r2, [pc, #132]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003d68:	f023 0301 	bic.w	r3, r3, #1
 8003d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003d70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d72:	4b21      	ldr	r3, [pc, #132]	@ (8003df8 <HAL_RCC_OscConfig+0x778>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d7a:	00d2      	lsls	r2, r2, #3
 8003d7c:	491b      	ldr	r1, [pc, #108]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d82:	4b1a      	ldr	r3, [pc, #104]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d86:	f023 020c 	bic.w	r2, r3, #12
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8e:	4917      	ldr	r1, [pc, #92]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d94:	4b15      	ldr	r3, [pc, #84]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d98:	f023 0202 	bic.w	r2, r3, #2
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da0:	4912      	ldr	r1, [pc, #72]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003da6:	4b11      	ldr	r3, [pc, #68]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003daa:	4a10      	ldr	r2, [pc, #64]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	4a0d      	ldr	r2, [pc, #52]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003dc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003dca:	4b08      	ldr	r3, [pc, #32]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dce:	4a07      	ldr	r2, [pc, #28]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dd6:	4b05      	ldr	r3, [pc, #20]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a04      	ldr	r2, [pc, #16]	@ (8003dec <HAL_RCC_OscConfig+0x76c>)
 8003ddc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de2:	f7fd fbdd 	bl	80015a0 <HAL_GetTick>
 8003de6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003de8:	e011      	b.n	8003e0e <HAL_RCC_OscConfig+0x78e>
 8003dea:	bf00      	nop
 8003dec:	58024400 	.word	0x58024400
 8003df0:	58024800 	.word	0x58024800
 8003df4:	fffffc0c 	.word	0xfffffc0c
 8003df8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7fd fbd0 	bl	80015a0 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e08a      	b.n	8003f24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e0e:	4b47      	ldr	r3, [pc, #284]	@ (8003f2c <HAL_RCC_OscConfig+0x8ac>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0x77c>
 8003e1a:	e082      	b.n	8003f22 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1c:	4b43      	ldr	r3, [pc, #268]	@ (8003f2c <HAL_RCC_OscConfig+0x8ac>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a42      	ldr	r2, [pc, #264]	@ (8003f2c <HAL_RCC_OscConfig+0x8ac>)
 8003e22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fd fbba 	bl	80015a0 <HAL_GetTick>
 8003e2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e30:	f7fd fbb6 	bl	80015a0 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e070      	b.n	8003f24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e42:	4b3a      	ldr	r3, [pc, #232]	@ (8003f2c <HAL_RCC_OscConfig+0x8ac>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x7b0>
 8003e4e:	e068      	b.n	8003f22 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e50:	4b36      	ldr	r3, [pc, #216]	@ (8003f2c <HAL_RCC_OscConfig+0x8ac>)
 8003e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e54:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e56:	4b35      	ldr	r3, [pc, #212]	@ (8003f2c <HAL_RCC_OscConfig+0x8ac>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d031      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f003 0203 	and.w	r2, r3, #3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d12a      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	091b      	lsrs	r3, r3, #4
 8003e76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d122      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d11a      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	0a5b      	lsrs	r3, r3, #9
 8003e96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e9e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d111      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	0c1b      	lsrs	r3, r3, #16
 8003ea8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d108      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	0e1b      	lsrs	r3, r3, #24
 8003eba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e02b      	b.n	8003f24 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003ecc:	4b17      	ldr	r3, [pc, #92]	@ (8003f2c <HAL_RCC_OscConfig+0x8ac>)
 8003ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed0:	08db      	lsrs	r3, r3, #3
 8003ed2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ed6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d01f      	beq.n	8003f22 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003ee2:	4b12      	ldr	r3, [pc, #72]	@ (8003f2c <HAL_RCC_OscConfig+0x8ac>)
 8003ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee6:	4a11      	ldr	r2, [pc, #68]	@ (8003f2c <HAL_RCC_OscConfig+0x8ac>)
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003eee:	f7fd fb57 	bl	80015a0 <HAL_GetTick>
 8003ef2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003ef4:	bf00      	nop
 8003ef6:	f7fd fb53 	bl	80015a0 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d0f9      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f02:	4b0a      	ldr	r3, [pc, #40]	@ (8003f2c <HAL_RCC_OscConfig+0x8ac>)
 8003f04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f06:	4b0a      	ldr	r3, [pc, #40]	@ (8003f30 <HAL_RCC_OscConfig+0x8b0>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f0e:	00d2      	lsls	r2, r2, #3
 8003f10:	4906      	ldr	r1, [pc, #24]	@ (8003f2c <HAL_RCC_OscConfig+0x8ac>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003f16:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <HAL_RCC_OscConfig+0x8ac>)
 8003f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1a:	4a04      	ldr	r2, [pc, #16]	@ (8003f2c <HAL_RCC_OscConfig+0x8ac>)
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3730      	adds	r7, #48	@ 0x30
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	58024400 	.word	0x58024400
 8003f30:	ffff0007 	.word	0xffff0007

08003f34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e19c      	b.n	8004282 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f48:	4b8a      	ldr	r3, [pc, #552]	@ (8004174 <HAL_RCC_ClockConfig+0x240>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d910      	bls.n	8003f78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f56:	4b87      	ldr	r3, [pc, #540]	@ (8004174 <HAL_RCC_ClockConfig+0x240>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f023 020f 	bic.w	r2, r3, #15
 8003f5e:	4985      	ldr	r1, [pc, #532]	@ (8004174 <HAL_RCC_ClockConfig+0x240>)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f66:	4b83      	ldr	r3, [pc, #524]	@ (8004174 <HAL_RCC_ClockConfig+0x240>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d001      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e184      	b.n	8004282 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d010      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	4b7b      	ldr	r3, [pc, #492]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d908      	bls.n	8003fa6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f94:	4b78      	ldr	r3, [pc, #480]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	4975      	ldr	r1, [pc, #468]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d010      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	4b70      	ldr	r3, [pc, #448]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d908      	bls.n	8003fd4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003fc2:	4b6d      	ldr	r3, [pc, #436]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	496a      	ldr	r1, [pc, #424]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d010      	beq.n	8004002 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699a      	ldr	r2, [r3, #24]
 8003fe4:	4b64      	ldr	r3, [pc, #400]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d908      	bls.n	8004002 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ff0:	4b61      	ldr	r3, [pc, #388]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	495e      	ldr	r1, [pc, #376]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d010      	beq.n	8004030 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69da      	ldr	r2, [r3, #28]
 8004012:	4b59      	ldr	r3, [pc, #356]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800401a:	429a      	cmp	r2, r3
 800401c:	d908      	bls.n	8004030 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800401e:	4b56      	ldr	r3, [pc, #344]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	4953      	ldr	r1, [pc, #332]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 800402c:	4313      	orrs	r3, r2
 800402e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d010      	beq.n	800405e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	4b4d      	ldr	r3, [pc, #308]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	429a      	cmp	r2, r3
 800404a:	d908      	bls.n	800405e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800404c:	4b4a      	ldr	r3, [pc, #296]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	f023 020f 	bic.w	r2, r3, #15
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4947      	ldr	r1, [pc, #284]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 800405a:	4313      	orrs	r3, r2
 800405c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d055      	beq.n	8004116 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800406a:	4b43      	ldr	r3, [pc, #268]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	4940      	ldr	r1, [pc, #256]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 8004078:	4313      	orrs	r3, r2
 800407a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b02      	cmp	r3, #2
 8004082:	d107      	bne.n	8004094 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004084:	4b3c      	ldr	r3, [pc, #240]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d121      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0f6      	b.n	8004282 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b03      	cmp	r3, #3
 800409a:	d107      	bne.n	80040ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800409c:	4b36      	ldr	r3, [pc, #216]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d115      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0ea      	b.n	8004282 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d107      	bne.n	80040c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040b4:	4b30      	ldr	r3, [pc, #192]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d109      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0de      	b.n	8004282 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040c4:	4b2c      	ldr	r3, [pc, #176]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0d6      	b.n	8004282 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040d4:	4b28      	ldr	r3, [pc, #160]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	f023 0207 	bic.w	r2, r3, #7
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	4925      	ldr	r1, [pc, #148]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e6:	f7fd fa5b 	bl	80015a0 <HAL_GetTick>
 80040ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ec:	e00a      	b.n	8004104 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ee:	f7fd fa57 	bl	80015a0 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e0be      	b.n	8004282 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004104:	4b1c      	ldr	r3, [pc, #112]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	429a      	cmp	r2, r3
 8004114:	d1eb      	bne.n	80040ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d010      	beq.n	8004144 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	4b14      	ldr	r3, [pc, #80]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	429a      	cmp	r2, r3
 8004130:	d208      	bcs.n	8004144 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004132:	4b11      	ldr	r3, [pc, #68]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f023 020f 	bic.w	r2, r3, #15
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	490e      	ldr	r1, [pc, #56]	@ (8004178 <HAL_RCC_ClockConfig+0x244>)
 8004140:	4313      	orrs	r3, r2
 8004142:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004144:	4b0b      	ldr	r3, [pc, #44]	@ (8004174 <HAL_RCC_ClockConfig+0x240>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d214      	bcs.n	800417c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004152:	4b08      	ldr	r3, [pc, #32]	@ (8004174 <HAL_RCC_ClockConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 020f 	bic.w	r2, r3, #15
 800415a:	4906      	ldr	r1, [pc, #24]	@ (8004174 <HAL_RCC_ClockConfig+0x240>)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004162:	4b04      	ldr	r3, [pc, #16]	@ (8004174 <HAL_RCC_ClockConfig+0x240>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d005      	beq.n	800417c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e086      	b.n	8004282 <HAL_RCC_ClockConfig+0x34e>
 8004174:	52002000 	.word	0x52002000
 8004178:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d010      	beq.n	80041aa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	4b3f      	ldr	r3, [pc, #252]	@ (800428c <HAL_RCC_ClockConfig+0x358>)
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004194:	429a      	cmp	r2, r3
 8004196:	d208      	bcs.n	80041aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004198:	4b3c      	ldr	r3, [pc, #240]	@ (800428c <HAL_RCC_ClockConfig+0x358>)
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	4939      	ldr	r1, [pc, #228]	@ (800428c <HAL_RCC_ClockConfig+0x358>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d010      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	4b34      	ldr	r3, [pc, #208]	@ (800428c <HAL_RCC_ClockConfig+0x358>)
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d208      	bcs.n	80041d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041c6:	4b31      	ldr	r3, [pc, #196]	@ (800428c <HAL_RCC_ClockConfig+0x358>)
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	492e      	ldr	r1, [pc, #184]	@ (800428c <HAL_RCC_ClockConfig+0x358>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0310 	and.w	r3, r3, #16
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d010      	beq.n	8004206 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699a      	ldr	r2, [r3, #24]
 80041e8:	4b28      	ldr	r3, [pc, #160]	@ (800428c <HAL_RCC_ClockConfig+0x358>)
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d208      	bcs.n	8004206 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041f4:	4b25      	ldr	r3, [pc, #148]	@ (800428c <HAL_RCC_ClockConfig+0x358>)
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	4922      	ldr	r1, [pc, #136]	@ (800428c <HAL_RCC_ClockConfig+0x358>)
 8004202:	4313      	orrs	r3, r2
 8004204:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	2b00      	cmp	r3, #0
 8004210:	d010      	beq.n	8004234 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69da      	ldr	r2, [r3, #28]
 8004216:	4b1d      	ldr	r3, [pc, #116]	@ (800428c <HAL_RCC_ClockConfig+0x358>)
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800421e:	429a      	cmp	r2, r3
 8004220:	d208      	bcs.n	8004234 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004222:	4b1a      	ldr	r3, [pc, #104]	@ (800428c <HAL_RCC_ClockConfig+0x358>)
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	4917      	ldr	r1, [pc, #92]	@ (800428c <HAL_RCC_ClockConfig+0x358>)
 8004230:	4313      	orrs	r3, r2
 8004232:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004234:	f000 f834 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 8004238:	4602      	mov	r2, r0
 800423a:	4b14      	ldr	r3, [pc, #80]	@ (800428c <HAL_RCC_ClockConfig+0x358>)
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	0a1b      	lsrs	r3, r3, #8
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	4912      	ldr	r1, [pc, #72]	@ (8004290 <HAL_RCC_ClockConfig+0x35c>)
 8004246:	5ccb      	ldrb	r3, [r1, r3]
 8004248:	f003 031f 	and.w	r3, r3, #31
 800424c:	fa22 f303 	lsr.w	r3, r2, r3
 8004250:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004252:	4b0e      	ldr	r3, [pc, #56]	@ (800428c <HAL_RCC_ClockConfig+0x358>)
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	4a0d      	ldr	r2, [pc, #52]	@ (8004290 <HAL_RCC_ClockConfig+0x35c>)
 800425c:	5cd3      	ldrb	r3, [r2, r3]
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
 8004268:	4a0a      	ldr	r2, [pc, #40]	@ (8004294 <HAL_RCC_ClockConfig+0x360>)
 800426a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800426c:	4a0a      	ldr	r2, [pc, #40]	@ (8004298 <HAL_RCC_ClockConfig+0x364>)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004272:	4b0a      	ldr	r3, [pc, #40]	@ (800429c <HAL_RCC_ClockConfig+0x368>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f7fd f948 	bl	800150c <HAL_InitTick>
 800427c:	4603      	mov	r3, r0
 800427e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004280:	7bfb      	ldrb	r3, [r7, #15]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	58024400 	.word	0x58024400
 8004290:	08008588 	.word	0x08008588
 8004294:	24000008 	.word	0x24000008
 8004298:	24000004 	.word	0x24000004
 800429c:	2400000c 	.word	0x2400000c

080042a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b089      	sub	sp, #36	@ 0x24
 80042a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042a6:	4bb3      	ldr	r3, [pc, #716]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042ae:	2b18      	cmp	r3, #24
 80042b0:	f200 8155 	bhi.w	800455e <HAL_RCC_GetSysClockFreq+0x2be>
 80042b4:	a201      	add	r2, pc, #4	@ (adr r2, 80042bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80042b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ba:	bf00      	nop
 80042bc:	08004321 	.word	0x08004321
 80042c0:	0800455f 	.word	0x0800455f
 80042c4:	0800455f 	.word	0x0800455f
 80042c8:	0800455f 	.word	0x0800455f
 80042cc:	0800455f 	.word	0x0800455f
 80042d0:	0800455f 	.word	0x0800455f
 80042d4:	0800455f 	.word	0x0800455f
 80042d8:	0800455f 	.word	0x0800455f
 80042dc:	08004347 	.word	0x08004347
 80042e0:	0800455f 	.word	0x0800455f
 80042e4:	0800455f 	.word	0x0800455f
 80042e8:	0800455f 	.word	0x0800455f
 80042ec:	0800455f 	.word	0x0800455f
 80042f0:	0800455f 	.word	0x0800455f
 80042f4:	0800455f 	.word	0x0800455f
 80042f8:	0800455f 	.word	0x0800455f
 80042fc:	0800434d 	.word	0x0800434d
 8004300:	0800455f 	.word	0x0800455f
 8004304:	0800455f 	.word	0x0800455f
 8004308:	0800455f 	.word	0x0800455f
 800430c:	0800455f 	.word	0x0800455f
 8004310:	0800455f 	.word	0x0800455f
 8004314:	0800455f 	.word	0x0800455f
 8004318:	0800455f 	.word	0x0800455f
 800431c:	08004353 	.word	0x08004353
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004320:	4b94      	ldr	r3, [pc, #592]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0320 	and.w	r3, r3, #32
 8004328:	2b00      	cmp	r3, #0
 800432a:	d009      	beq.n	8004340 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800432c:	4b91      	ldr	r3, [pc, #580]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	08db      	lsrs	r3, r3, #3
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	4a90      	ldr	r2, [pc, #576]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
 800433c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800433e:	e111      	b.n	8004564 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004340:	4b8d      	ldr	r3, [pc, #564]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004342:	61bb      	str	r3, [r7, #24]
      break;
 8004344:	e10e      	b.n	8004564 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004346:	4b8d      	ldr	r3, [pc, #564]	@ (800457c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004348:	61bb      	str	r3, [r7, #24]
      break;
 800434a:	e10b      	b.n	8004564 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800434c:	4b8c      	ldr	r3, [pc, #560]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800434e:	61bb      	str	r3, [r7, #24]
      break;
 8004350:	e108      	b.n	8004564 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004352:	4b88      	ldr	r3, [pc, #544]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800435c:	4b85      	ldr	r3, [pc, #532]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800435e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004360:	091b      	lsrs	r3, r3, #4
 8004362:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004366:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004368:	4b82      	ldr	r3, [pc, #520]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800436a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004372:	4b80      	ldr	r3, [pc, #512]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004376:	08db      	lsrs	r3, r3, #3
 8004378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	fb02 f303 	mul.w	r3, r2, r3
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 80e1 	beq.w	8004558 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b02      	cmp	r3, #2
 800439a:	f000 8083 	beq.w	80044a4 <HAL_RCC_GetSysClockFreq+0x204>
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	f200 80a1 	bhi.w	80044e8 <HAL_RCC_GetSysClockFreq+0x248>
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0x114>
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d056      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0x1c0>
 80043b2:	e099      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d02d      	beq.n	800441c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043c0:	4b6c      	ldr	r3, [pc, #432]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	08db      	lsrs	r3, r3, #3
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	4a6b      	ldr	r2, [pc, #428]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043cc:	fa22 f303 	lsr.w	r3, r2, r3
 80043d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	ee07 3a90 	vmov	s15, r3
 80043d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ea:	4b62      	ldr	r3, [pc, #392]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f2:	ee07 3a90 	vmov	s15, r3
 80043f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80043fe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004584 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800440a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800440e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004416:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800441a:	e087      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004426:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004588 <HAL_RCC_GetSysClockFreq+0x2e8>
 800442a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800442e:	4b51      	ldr	r3, [pc, #324]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004442:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004584 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800444a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800444e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800445e:	e065      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800458c <HAL_RCC_GetSysClockFreq+0x2ec>
 800446e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004472:	4b40      	ldr	r3, [pc, #256]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004482:	ed97 6a02 	vldr	s12, [r7, #8]
 8004486:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004584 <HAL_RCC_GetSysClockFreq+0x2e4>
 800448a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800448e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800449a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044a2:	e043      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	ee07 3a90 	vmov	s15, r3
 80044aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004590 <HAL_RCC_GetSysClockFreq+0x2f0>
 80044b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044be:	ee07 3a90 	vmov	s15, r3
 80044c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80044ca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004584 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044e6:	e021      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	ee07 3a90 	vmov	s15, r3
 80044ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800458c <HAL_RCC_GetSysClockFreq+0x2ec>
 80044f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800450a:	ed97 6a02 	vldr	s12, [r7, #8]
 800450e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004584 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800451a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800451e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004526:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800452a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800452c:	4b11      	ldr	r3, [pc, #68]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800452e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004530:	0a5b      	lsrs	r3, r3, #9
 8004532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004536:	3301      	adds	r3, #1
 8004538:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	ee07 3a90 	vmov	s15, r3
 8004540:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004544:	edd7 6a07 	vldr	s13, [r7, #28]
 8004548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800454c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004550:	ee17 3a90 	vmov	r3, s15
 8004554:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004556:	e005      	b.n	8004564 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	61bb      	str	r3, [r7, #24]
      break;
 800455c:	e002      	b.n	8004564 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800455e:	4b07      	ldr	r3, [pc, #28]	@ (800457c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004560:	61bb      	str	r3, [r7, #24]
      break;
 8004562:	bf00      	nop
  }

  return sysclockfreq;
 8004564:	69bb      	ldr	r3, [r7, #24]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3724      	adds	r7, #36	@ 0x24
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	58024400 	.word	0x58024400
 8004578:	03d09000 	.word	0x03d09000
 800457c:	003d0900 	.word	0x003d0900
 8004580:	007a1200 	.word	0x007a1200
 8004584:	46000000 	.word	0x46000000
 8004588:	4c742400 	.word	0x4c742400
 800458c:	4a742400 	.word	0x4a742400
 8004590:	4af42400 	.word	0x4af42400

08004594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800459a:	f7ff fe81 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 800459e:	4602      	mov	r2, r0
 80045a0:	4b10      	ldr	r3, [pc, #64]	@ (80045e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	0a1b      	lsrs	r3, r3, #8
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	490f      	ldr	r1, [pc, #60]	@ (80045e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80045ac:	5ccb      	ldrb	r3, [r1, r3]
 80045ae:	f003 031f 	and.w	r3, r3, #31
 80045b2:	fa22 f303 	lsr.w	r3, r2, r3
 80045b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045b8:	4b0a      	ldr	r3, [pc, #40]	@ (80045e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	f003 030f 	and.w	r3, r3, #15
 80045c0:	4a09      	ldr	r2, [pc, #36]	@ (80045e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80045c2:	5cd3      	ldrb	r3, [r2, r3]
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	fa22 f303 	lsr.w	r3, r2, r3
 80045ce:	4a07      	ldr	r2, [pc, #28]	@ (80045ec <HAL_RCC_GetHCLKFreq+0x58>)
 80045d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045d2:	4a07      	ldr	r2, [pc, #28]	@ (80045f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80045d8:	4b04      	ldr	r3, [pc, #16]	@ (80045ec <HAL_RCC_GetHCLKFreq+0x58>)
 80045da:	681b      	ldr	r3, [r3, #0]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	58024400 	.word	0x58024400
 80045e8:	08008588 	.word	0x08008588
 80045ec:	24000008 	.word	0x24000008
 80045f0:	24000004 	.word	0x24000004

080045f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80045f8:	f7ff ffcc 	bl	8004594 <HAL_RCC_GetHCLKFreq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4b06      	ldr	r3, [pc, #24]	@ (8004618 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	091b      	lsrs	r3, r3, #4
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	4904      	ldr	r1, [pc, #16]	@ (800461c <HAL_RCC_GetPCLK1Freq+0x28>)
 800460a:	5ccb      	ldrb	r3, [r1, r3]
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004614:	4618      	mov	r0, r3
 8004616:	bd80      	pop	{r7, pc}
 8004618:	58024400 	.word	0x58024400
 800461c:	08008588 	.word	0x08008588

08004620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004624:	f7ff ffb6 	bl	8004594 <HAL_RCC_GetHCLKFreq>
 8004628:	4602      	mov	r2, r0
 800462a:	4b06      	ldr	r3, [pc, #24]	@ (8004644 <HAL_RCC_GetPCLK2Freq+0x24>)
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	0a1b      	lsrs	r3, r3, #8
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	4904      	ldr	r1, [pc, #16]	@ (8004648 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004636:	5ccb      	ldrb	r3, [r1, r3]
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004640:	4618      	mov	r0, r3
 8004642:	bd80      	pop	{r7, pc}
 8004644:	58024400 	.word	0x58024400
 8004648:	08008588 	.word	0x08008588

0800464c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800464c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004650:	b0ca      	sub	sp, #296	@ 0x128
 8004652:	af00      	add	r7, sp, #0
 8004654:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004658:	2300      	movs	r3, #0
 800465a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800465e:	2300      	movs	r3, #0
 8004660:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004670:	2500      	movs	r5, #0
 8004672:	ea54 0305 	orrs.w	r3, r4, r5
 8004676:	d049      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800467e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004682:	d02f      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004684:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004688:	d828      	bhi.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800468a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800468e:	d01a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004690:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004694:	d822      	bhi.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800469a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800469e:	d007      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046a0:	e01c      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046a2:	4bb8      	ldr	r3, [pc, #736]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a6:	4ab7      	ldr	r2, [pc, #732]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046ae:	e01a      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b4:	3308      	adds	r3, #8
 80046b6:	2102      	movs	r1, #2
 80046b8:	4618      	mov	r0, r3
 80046ba:	f002 fb61 	bl	8006d80 <RCCEx_PLL2_Config>
 80046be:	4603      	mov	r3, r0
 80046c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046c4:	e00f      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ca:	3328      	adds	r3, #40	@ 0x28
 80046cc:	2102      	movs	r1, #2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f002 fc08 	bl	8006ee4 <RCCEx_PLL3_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046da:	e004      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046e2:	e000      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80046e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80046ee:	4ba5      	ldr	r3, [pc, #660]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80046f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046fc:	4aa1      	ldr	r2, [pc, #644]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046fe:	430b      	orrs	r3, r1
 8004700:	6513      	str	r3, [r2, #80]	@ 0x50
 8004702:	e003      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004704:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004708:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800470c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004718:	f04f 0900 	mov.w	r9, #0
 800471c:	ea58 0309 	orrs.w	r3, r8, r9
 8004720:	d047      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004728:	2b04      	cmp	r3, #4
 800472a:	d82a      	bhi.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800472c:	a201      	add	r2, pc, #4	@ (adr r2, 8004734 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004732:	bf00      	nop
 8004734:	08004749 	.word	0x08004749
 8004738:	08004757 	.word	0x08004757
 800473c:	0800476d 	.word	0x0800476d
 8004740:	0800478b 	.word	0x0800478b
 8004744:	0800478b 	.word	0x0800478b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004748:	4b8e      	ldr	r3, [pc, #568]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800474a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474c:	4a8d      	ldr	r2, [pc, #564]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800474e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004754:	e01a      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475a:	3308      	adds	r3, #8
 800475c:	2100      	movs	r1, #0
 800475e:	4618      	mov	r0, r3
 8004760:	f002 fb0e 	bl	8006d80 <RCCEx_PLL2_Config>
 8004764:	4603      	mov	r3, r0
 8004766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800476a:	e00f      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800476c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004770:	3328      	adds	r3, #40	@ 0x28
 8004772:	2100      	movs	r1, #0
 8004774:	4618      	mov	r0, r3
 8004776:	f002 fbb5 	bl	8006ee4 <RCCEx_PLL3_Config>
 800477a:	4603      	mov	r3, r0
 800477c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004780:	e004      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004788:	e000      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800478a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800478c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10a      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004794:	4b7b      	ldr	r3, [pc, #492]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004798:	f023 0107 	bic.w	r1, r3, #7
 800479c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a2:	4a78      	ldr	r2, [pc, #480]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047a4:	430b      	orrs	r3, r1
 80047a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80047a8:	e003      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80047b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80047be:	f04f 0b00 	mov.w	fp, #0
 80047c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80047c6:	d04c      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80047c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047d2:	d030      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80047d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047d8:	d829      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047da:	2bc0      	cmp	r3, #192	@ 0xc0
 80047dc:	d02d      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80047de:	2bc0      	cmp	r3, #192	@ 0xc0
 80047e0:	d825      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047e2:	2b80      	cmp	r3, #128	@ 0x80
 80047e4:	d018      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80047e6:	2b80      	cmp	r3, #128	@ 0x80
 80047e8:	d821      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80047ee:	2b40      	cmp	r3, #64	@ 0x40
 80047f0:	d007      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80047f2:	e01c      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047f4:	4b63      	ldr	r3, [pc, #396]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f8:	4a62      	ldr	r2, [pc, #392]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004800:	e01c      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004806:	3308      	adds	r3, #8
 8004808:	2100      	movs	r1, #0
 800480a:	4618      	mov	r0, r3
 800480c:	f002 fab8 	bl	8006d80 <RCCEx_PLL2_Config>
 8004810:	4603      	mov	r3, r0
 8004812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004816:	e011      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481c:	3328      	adds	r3, #40	@ 0x28
 800481e:	2100      	movs	r1, #0
 8004820:	4618      	mov	r0, r3
 8004822:	f002 fb5f 	bl	8006ee4 <RCCEx_PLL3_Config>
 8004826:	4603      	mov	r3, r0
 8004828:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800482c:	e006      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004834:	e002      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004836:	bf00      	nop
 8004838:	e000      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800483a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800483c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004844:	4b4f      	ldr	r3, [pc, #316]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004848:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800484c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004852:	4a4c      	ldr	r2, [pc, #304]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004854:	430b      	orrs	r3, r1
 8004856:	6513      	str	r3, [r2, #80]	@ 0x50
 8004858:	e003      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800485e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800486e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004872:	2300      	movs	r3, #0
 8004874:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004878:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800487c:	460b      	mov	r3, r1
 800487e:	4313      	orrs	r3, r2
 8004880:	d053      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004886:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800488a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800488e:	d035      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004890:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004894:	d82e      	bhi.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004896:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800489a:	d031      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800489c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80048a0:	d828      	bhi.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80048a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048a6:	d01a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x292>
 80048a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048ac:	d822      	bhi.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80048b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048b6:	d007      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80048b8:	e01c      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ba:	4b32      	ldr	r3, [pc, #200]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048be:	4a31      	ldr	r2, [pc, #196]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048c6:	e01c      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048cc:	3308      	adds	r3, #8
 80048ce:	2100      	movs	r1, #0
 80048d0:	4618      	mov	r0, r3
 80048d2:	f002 fa55 	bl	8006d80 <RCCEx_PLL2_Config>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80048dc:	e011      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e2:	3328      	adds	r3, #40	@ 0x28
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f002 fafc 	bl	8006ee4 <RCCEx_PLL3_Config>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048f2:	e006      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048fa:	e002      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80048fc:	bf00      	nop
 80048fe:	e000      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10b      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800490a:	4b1e      	ldr	r3, [pc, #120]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800490c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004916:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800491a:	4a1a      	ldr	r2, [pc, #104]	@ (8004984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800491c:	430b      	orrs	r3, r1
 800491e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004920:	e003      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004926:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800492a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004932:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004936:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800493a:	2300      	movs	r3, #0
 800493c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004940:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004944:	460b      	mov	r3, r1
 8004946:	4313      	orrs	r3, r2
 8004948:	d056      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004952:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004956:	d038      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004958:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800495c:	d831      	bhi.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800495e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004962:	d034      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004964:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004968:	d82b      	bhi.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800496a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800496e:	d01d      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004970:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004974:	d825      	bhi.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d006      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800497a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800497e:	d00a      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004980:	e01f      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004982:	bf00      	nop
 8004984:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004988:	4ba2      	ldr	r3, [pc, #648]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800498a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498c:	4aa1      	ldr	r2, [pc, #644]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800498e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004992:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004994:	e01c      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499a:	3308      	adds	r3, #8
 800499c:	2100      	movs	r1, #0
 800499e:	4618      	mov	r0, r3
 80049a0:	f002 f9ee 	bl	8006d80 <RCCEx_PLL2_Config>
 80049a4:	4603      	mov	r3, r0
 80049a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80049aa:	e011      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b0:	3328      	adds	r3, #40	@ 0x28
 80049b2:	2100      	movs	r1, #0
 80049b4:	4618      	mov	r0, r3
 80049b6:	f002 fa95 	bl	8006ee4 <RCCEx_PLL3_Config>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049c0:	e006      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049c8:	e002      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80049ca:	bf00      	nop
 80049cc:	e000      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80049ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10b      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80049d8:	4b8e      	ldr	r3, [pc, #568]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049dc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80049e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80049e8:	4a8a      	ldr	r2, [pc, #552]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049ea:	430b      	orrs	r3, r1
 80049ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80049ee:	e003      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a00:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004a04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004a0e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004a12:	460b      	mov	r3, r1
 8004a14:	4313      	orrs	r3, r2
 8004a16:	d03a      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a1e:	2b30      	cmp	r3, #48	@ 0x30
 8004a20:	d01f      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004a22:	2b30      	cmp	r3, #48	@ 0x30
 8004a24:	d819      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	d00c      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004a2a:	2b20      	cmp	r3, #32
 8004a2c:	d815      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d019      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004a32:	2b10      	cmp	r3, #16
 8004a34:	d111      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a36:	4b77      	ldr	r3, [pc, #476]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3a:	4a76      	ldr	r2, [pc, #472]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a42:	e011      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a48:	3308      	adds	r3, #8
 8004a4a:	2102      	movs	r1, #2
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f002 f997 	bl	8006d80 <RCCEx_PLL2_Config>
 8004a52:	4603      	mov	r3, r0
 8004a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a58:	e006      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a60:	e002      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a62:	bf00      	nop
 8004a64:	e000      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a70:	4b68      	ldr	r3, [pc, #416]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a74:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a7e:	4a65      	ldr	r2, [pc, #404]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a80:	430b      	orrs	r3, r1
 8004a82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a84:	e003      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a96:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004a9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004aa4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	d051      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ab8:	d035      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004aba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004abe:	d82e      	bhi.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ac0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ac4:	d031      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004ac6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004aca:	d828      	bhi.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004acc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ad0:	d01a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ad6:	d822      	bhi.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ae0:	d007      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004ae2:	e01c      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae4:	4b4b      	ldr	r3, [pc, #300]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae8:	4a4a      	ldr	r2, [pc, #296]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004af0:	e01c      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af6:	3308      	adds	r3, #8
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f002 f940 	bl	8006d80 <RCCEx_PLL2_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b06:	e011      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0c:	3328      	adds	r3, #40	@ 0x28
 8004b0e:	2100      	movs	r1, #0
 8004b10:	4618      	mov	r0, r3
 8004b12:	f002 f9e7 	bl	8006ee4 <RCCEx_PLL3_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b1c:	e006      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b24:	e002      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004b26:	bf00      	nop
 8004b28:	e000      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10a      	bne.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004b34:	4b37      	ldr	r3, [pc, #220]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b38:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b42:	4a34      	ldr	r2, [pc, #208]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b44:	430b      	orrs	r3, r1
 8004b46:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b48:	e003      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004b5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b62:	2300      	movs	r3, #0
 8004b64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004b68:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	d056      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b7c:	d033      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004b7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b82:	d82c      	bhi.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b88:	d02f      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004b8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b8e:	d826      	bhi.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b94:	d02b      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004b96:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b9a:	d820      	bhi.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ba0:	d012      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004ba2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ba6:	d81a      	bhi.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d022      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb0:	d115      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	2101      	movs	r1, #1
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f002 f8e0 	bl	8006d80 <RCCEx_PLL2_Config>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004bc6:	e015      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bcc:	3328      	adds	r3, #40	@ 0x28
 8004bce:	2101      	movs	r1, #1
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f002 f987 	bl	8006ee4 <RCCEx_PLL3_Config>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004bdc:	e00a      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004be4:	e006      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004be6:	bf00      	nop
 8004be8:	e004      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bea:	bf00      	nop
 8004bec:	e002      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bee:	bf00      	nop
 8004bf0:	e000      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10d      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004bfc:	4b05      	ldr	r3, [pc, #20]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c00:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c0a:	4a02      	ldr	r2, [pc, #8]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c10:	e006      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004c12:	bf00      	nop
 8004c14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c28:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c30:	2300      	movs	r3, #0
 8004c32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c36:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	d055      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c4c:	d033      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004c4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c52:	d82c      	bhi.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c58:	d02f      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c5e:	d826      	bhi.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c64:	d02b      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004c66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c6a:	d820      	bhi.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c70:	d012      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004c72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c76:	d81a      	bhi.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d022      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004c7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c80:	d115      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c86:	3308      	adds	r3, #8
 8004c88:	2101      	movs	r1, #1
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f002 f878 	bl	8006d80 <RCCEx_PLL2_Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c96:	e015      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9c:	3328      	adds	r3, #40	@ 0x28
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f002 f91f 	bl	8006ee4 <RCCEx_PLL3_Config>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004cac:	e00a      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cb4:	e006      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cb6:	bf00      	nop
 8004cb8:	e004      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cba:	bf00      	nop
 8004cbc:	e002      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cbe:	bf00      	nop
 8004cc0:	e000      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10b      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ccc:	4ba3      	ldr	r3, [pc, #652]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004cdc:	4a9f      	ldr	r2, [pc, #636]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004cde:	430b      	orrs	r3, r1
 8004ce0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ce2:	e003      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ce8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004d02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d06:	460b      	mov	r3, r1
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	d037      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d16:	d00e      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004d18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d1c:	d816      	bhi.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d018      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004d22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d26:	d111      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d28:	4b8c      	ldr	r3, [pc, #560]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2c:	4a8b      	ldr	r2, [pc, #556]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d34:	e00f      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3a:	3308      	adds	r3, #8
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f002 f81e 	bl	8006d80 <RCCEx_PLL2_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d4a:	e004      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d52:	e000      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004d54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10a      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d5e:	4b7f      	ldr	r3, [pc, #508]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d62:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6c:	4a7b      	ldr	r2, [pc, #492]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d6e:	430b      	orrs	r3, r1
 8004d70:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d72:	e003      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d84:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004d88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004d92:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	d039      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d81c      	bhi.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004da6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dac:	08004de9 	.word	0x08004de9
 8004db0:	08004dbd 	.word	0x08004dbd
 8004db4:	08004dcb 	.word	0x08004dcb
 8004db8:	08004de9 	.word	0x08004de9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dbc:	4b67      	ldr	r3, [pc, #412]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc0:	4a66      	ldr	r2, [pc, #408]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004dc8:	e00f      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dce:	3308      	adds	r3, #8
 8004dd0:	2102      	movs	r1, #2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f001 ffd4 	bl	8006d80 <RCCEx_PLL2_Config>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004dde:	e004      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004de6:	e000      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10a      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004df2:	4b5a      	ldr	r3, [pc, #360]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004df6:	f023 0103 	bic.w	r1, r3, #3
 8004dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e00:	4a56      	ldr	r2, [pc, #344]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e02:	430b      	orrs	r3, r1
 8004e04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e06:	e003      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004e1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e20:	2300      	movs	r3, #0
 8004e22:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f000 809f 	beq.w	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e32:	4b4b      	ldr	r3, [pc, #300]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a4a      	ldr	r2, [pc, #296]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e3e:	f7fc fbaf 	bl	80015a0 <HAL_GetTick>
 8004e42:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e46:	e00b      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e48:	f7fc fbaa 	bl	80015a0 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b64      	cmp	r3, #100	@ 0x64
 8004e56:	d903      	bls.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e5e:	e005      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e60:	4b3f      	ldr	r3, [pc, #252]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0ed      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d179      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e74:	4b39      	ldr	r3, [pc, #228]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e80:	4053      	eors	r3, r2
 8004e82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d015      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e8a:	4b34      	ldr	r3, [pc, #208]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e96:	4b31      	ldr	r3, [pc, #196]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e9a:	4a30      	ldr	r2, [pc, #192]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ea0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ea2:	4b2e      	ldr	r3, [pc, #184]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea6:	4a2d      	ldr	r2, [pc, #180]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004eae:	4a2b      	ldr	r2, [pc, #172]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004eb4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ec2:	d118      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec4:	f7fc fb6c 	bl	80015a0 <HAL_GetTick>
 8004ec8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ecc:	e00d      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ece:	f7fc fb67 	bl	80015a0 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004ed8:	1ad2      	subs	r2, r2, r3
 8004eda:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d903      	bls.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004ee8:	e005      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eea:	4b1c      	ldr	r3, [pc, #112]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0eb      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d129      	bne.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f0e:	d10e      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004f10:	4b12      	ldr	r3, [pc, #72]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f20:	091a      	lsrs	r2, r3, #4
 8004f22:	4b10      	ldr	r3, [pc, #64]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	4a0d      	ldr	r2, [pc, #52]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	6113      	str	r3, [r2, #16]
 8004f2c:	e005      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	4a0a      	ldr	r2, [pc, #40]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f38:	6113      	str	r3, [r2, #16]
 8004f3a:	4b08      	ldr	r3, [pc, #32]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f3c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f4a:	4a04      	ldr	r2, [pc, #16]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f4c:	430b      	orrs	r3, r1
 8004f4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f50:	e00e      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004f5a:	e009      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004f5c:	58024400 	.word	0x58024400
 8004f60:	58024800 	.word	0x58024800
 8004f64:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	f002 0301 	and.w	r3, r2, #1
 8004f7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f80:	2300      	movs	r3, #0
 8004f82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f000 8089 	beq.w	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f98:	2b28      	cmp	r3, #40	@ 0x28
 8004f9a:	d86b      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	0800507d 	.word	0x0800507d
 8004fa8:	08005075 	.word	0x08005075
 8004fac:	08005075 	.word	0x08005075
 8004fb0:	08005075 	.word	0x08005075
 8004fb4:	08005075 	.word	0x08005075
 8004fb8:	08005075 	.word	0x08005075
 8004fbc:	08005075 	.word	0x08005075
 8004fc0:	08005075 	.word	0x08005075
 8004fc4:	08005049 	.word	0x08005049
 8004fc8:	08005075 	.word	0x08005075
 8004fcc:	08005075 	.word	0x08005075
 8004fd0:	08005075 	.word	0x08005075
 8004fd4:	08005075 	.word	0x08005075
 8004fd8:	08005075 	.word	0x08005075
 8004fdc:	08005075 	.word	0x08005075
 8004fe0:	08005075 	.word	0x08005075
 8004fe4:	0800505f 	.word	0x0800505f
 8004fe8:	08005075 	.word	0x08005075
 8004fec:	08005075 	.word	0x08005075
 8004ff0:	08005075 	.word	0x08005075
 8004ff4:	08005075 	.word	0x08005075
 8004ff8:	08005075 	.word	0x08005075
 8004ffc:	08005075 	.word	0x08005075
 8005000:	08005075 	.word	0x08005075
 8005004:	0800507d 	.word	0x0800507d
 8005008:	08005075 	.word	0x08005075
 800500c:	08005075 	.word	0x08005075
 8005010:	08005075 	.word	0x08005075
 8005014:	08005075 	.word	0x08005075
 8005018:	08005075 	.word	0x08005075
 800501c:	08005075 	.word	0x08005075
 8005020:	08005075 	.word	0x08005075
 8005024:	0800507d 	.word	0x0800507d
 8005028:	08005075 	.word	0x08005075
 800502c:	08005075 	.word	0x08005075
 8005030:	08005075 	.word	0x08005075
 8005034:	08005075 	.word	0x08005075
 8005038:	08005075 	.word	0x08005075
 800503c:	08005075 	.word	0x08005075
 8005040:	08005075 	.word	0x08005075
 8005044:	0800507d 	.word	0x0800507d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800504c:	3308      	adds	r3, #8
 800504e:	2101      	movs	r1, #1
 8005050:	4618      	mov	r0, r3
 8005052:	f001 fe95 	bl	8006d80 <RCCEx_PLL2_Config>
 8005056:	4603      	mov	r3, r0
 8005058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800505c:	e00f      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800505e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005062:	3328      	adds	r3, #40	@ 0x28
 8005064:	2101      	movs	r1, #1
 8005066:	4618      	mov	r0, r3
 8005068:	f001 ff3c 	bl	8006ee4 <RCCEx_PLL3_Config>
 800506c:	4603      	mov	r3, r0
 800506e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005072:	e004      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800507a:	e000      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800507c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800507e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10a      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005086:	4bbf      	ldr	r3, [pc, #764]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800508a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800508e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005092:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005094:	4abb      	ldr	r2, [pc, #748]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005096:	430b      	orrs	r3, r1
 8005098:	6553      	str	r3, [r2, #84]	@ 0x54
 800509a:	e003      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800509c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80050a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ac:	f002 0302 	and.w	r3, r2, #2
 80050b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050b4:	2300      	movs	r3, #0
 80050b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80050ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80050be:	460b      	mov	r3, r1
 80050c0:	4313      	orrs	r3, r2
 80050c2:	d041      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80050c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050ca:	2b05      	cmp	r3, #5
 80050cc:	d824      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80050ce:	a201      	add	r2, pc, #4	@ (adr r2, 80050d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80050d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d4:	08005121 	.word	0x08005121
 80050d8:	080050ed 	.word	0x080050ed
 80050dc:	08005103 	.word	0x08005103
 80050e0:	08005121 	.word	0x08005121
 80050e4:	08005121 	.word	0x08005121
 80050e8:	08005121 	.word	0x08005121
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f0:	3308      	adds	r3, #8
 80050f2:	2101      	movs	r1, #1
 80050f4:	4618      	mov	r0, r3
 80050f6:	f001 fe43 	bl	8006d80 <RCCEx_PLL2_Config>
 80050fa:	4603      	mov	r3, r0
 80050fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005100:	e00f      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005106:	3328      	adds	r3, #40	@ 0x28
 8005108:	2101      	movs	r1, #1
 800510a:	4618      	mov	r0, r3
 800510c:	f001 feea 	bl	8006ee4 <RCCEx_PLL3_Config>
 8005110:	4603      	mov	r3, r0
 8005112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005116:	e004      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800511e:	e000      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10a      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800512a:	4b96      	ldr	r3, [pc, #600]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800512c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800512e:	f023 0107 	bic.w	r1, r3, #7
 8005132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005136:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005138:	4a92      	ldr	r2, [pc, #584]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800513a:	430b      	orrs	r3, r1
 800513c:	6553      	str	r3, [r2, #84]	@ 0x54
 800513e:	e003      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005140:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005144:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	f002 0304 	and.w	r3, r2, #4
 8005154:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005158:	2300      	movs	r3, #0
 800515a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800515e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005162:	460b      	mov	r3, r1
 8005164:	4313      	orrs	r3, r2
 8005166:	d044      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800516c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005170:	2b05      	cmp	r3, #5
 8005172:	d825      	bhi.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005174:	a201      	add	r2, pc, #4	@ (adr r2, 800517c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517a:	bf00      	nop
 800517c:	080051c9 	.word	0x080051c9
 8005180:	08005195 	.word	0x08005195
 8005184:	080051ab 	.word	0x080051ab
 8005188:	080051c9 	.word	0x080051c9
 800518c:	080051c9 	.word	0x080051c9
 8005190:	080051c9 	.word	0x080051c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005198:	3308      	adds	r3, #8
 800519a:	2101      	movs	r1, #1
 800519c:	4618      	mov	r0, r3
 800519e:	f001 fdef 	bl	8006d80 <RCCEx_PLL2_Config>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80051a8:	e00f      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ae:	3328      	adds	r3, #40	@ 0x28
 80051b0:	2101      	movs	r1, #1
 80051b2:	4618      	mov	r0, r3
 80051b4:	f001 fe96 	bl	8006ee4 <RCCEx_PLL3_Config>
 80051b8:	4603      	mov	r3, r0
 80051ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80051be:	e004      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051c6:	e000      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80051c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10b      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051d2:	4b6c      	ldr	r3, [pc, #432]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d6:	f023 0107 	bic.w	r1, r3, #7
 80051da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051e2:	4a68      	ldr	r2, [pc, #416]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051e4:	430b      	orrs	r3, r1
 80051e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80051e8:	e003      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fa:	f002 0320 	and.w	r3, r2, #32
 80051fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005202:	2300      	movs	r3, #0
 8005204:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005208:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800520c:	460b      	mov	r3, r1
 800520e:	4313      	orrs	r3, r2
 8005210:	d055      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800521a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800521e:	d033      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005220:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005224:	d82c      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800522a:	d02f      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800522c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005230:	d826      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005232:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005236:	d02b      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005238:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800523c:	d820      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800523e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005242:	d012      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005244:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005248:	d81a      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800524a:	2b00      	cmp	r3, #0
 800524c:	d022      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800524e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005252:	d115      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005258:	3308      	adds	r3, #8
 800525a:	2100      	movs	r1, #0
 800525c:	4618      	mov	r0, r3
 800525e:	f001 fd8f 	bl	8006d80 <RCCEx_PLL2_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005268:	e015      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800526a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526e:	3328      	adds	r3, #40	@ 0x28
 8005270:	2102      	movs	r1, #2
 8005272:	4618      	mov	r0, r3
 8005274:	f001 fe36 	bl	8006ee4 <RCCEx_PLL3_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800527e:	e00a      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005286:	e006      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005288:	bf00      	nop
 800528a:	e004      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800528c:	bf00      	nop
 800528e:	e002      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005290:	bf00      	nop
 8005292:	e000      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10b      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800529e:	4b39      	ldr	r3, [pc, #228]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80052a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ae:	4a35      	ldr	r2, [pc, #212]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052b0:	430b      	orrs	r3, r1
 80052b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80052b4:	e003      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80052ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052ce:	2300      	movs	r3, #0
 80052d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80052d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80052d8:	460b      	mov	r3, r1
 80052da:	4313      	orrs	r3, r2
 80052dc:	d058      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80052de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052e6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052ea:	d033      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80052ec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052f0:	d82c      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052f6:	d02f      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80052f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052fc:	d826      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80052fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005302:	d02b      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005304:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005308:	d820      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800530a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800530e:	d012      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005314:	d81a      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005316:	2b00      	cmp	r3, #0
 8005318:	d022      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800531a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800531e:	d115      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005324:	3308      	adds	r3, #8
 8005326:	2100      	movs	r1, #0
 8005328:	4618      	mov	r0, r3
 800532a:	f001 fd29 	bl	8006d80 <RCCEx_PLL2_Config>
 800532e:	4603      	mov	r3, r0
 8005330:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005334:	e015      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533a:	3328      	adds	r3, #40	@ 0x28
 800533c:	2102      	movs	r1, #2
 800533e:	4618      	mov	r0, r3
 8005340:	f001 fdd0 	bl	8006ee4 <RCCEx_PLL3_Config>
 8005344:	4603      	mov	r3, r0
 8005346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800534a:	e00a      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005352:	e006      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005354:	bf00      	nop
 8005356:	e004      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005358:	bf00      	nop
 800535a:	e002      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800535c:	bf00      	nop
 800535e:	e000      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005360:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005362:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10e      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800536a:	4b06      	ldr	r3, [pc, #24]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800536c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800536e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005376:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800537a:	4a02      	ldr	r2, [pc, #8]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800537c:	430b      	orrs	r3, r1
 800537e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005380:	e006      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005382:	bf00      	nop
 8005384:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800538c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800539c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053a0:	2300      	movs	r3, #0
 80053a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80053a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80053aa:	460b      	mov	r3, r1
 80053ac:	4313      	orrs	r3, r2
 80053ae:	d055      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80053b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80053b8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80053bc:	d033      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80053be:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80053c2:	d82c      	bhi.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053c8:	d02f      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80053ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053ce:	d826      	bhi.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053d0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80053d4:	d02b      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80053d6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80053da:	d820      	bhi.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053e0:	d012      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80053e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053e6:	d81a      	bhi.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d022      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80053ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053f0:	d115      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f6:	3308      	adds	r3, #8
 80053f8:	2100      	movs	r1, #0
 80053fa:	4618      	mov	r0, r3
 80053fc:	f001 fcc0 	bl	8006d80 <RCCEx_PLL2_Config>
 8005400:	4603      	mov	r3, r0
 8005402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005406:	e015      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800540c:	3328      	adds	r3, #40	@ 0x28
 800540e:	2102      	movs	r1, #2
 8005410:	4618      	mov	r0, r3
 8005412:	f001 fd67 	bl	8006ee4 <RCCEx_PLL3_Config>
 8005416:	4603      	mov	r3, r0
 8005418:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800541c:	e00a      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005424:	e006      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005426:	bf00      	nop
 8005428:	e004      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800542a:	bf00      	nop
 800542c:	e002      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800542e:	bf00      	nop
 8005430:	e000      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005432:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005434:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10b      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800543c:	4ba1      	ldr	r3, [pc, #644]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800543e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005440:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005448:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800544c:	4a9d      	ldr	r2, [pc, #628]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800544e:	430b      	orrs	r3, r1
 8005450:	6593      	str	r3, [r2, #88]	@ 0x58
 8005452:	e003      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005454:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005458:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800545c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	f002 0308 	and.w	r3, r2, #8
 8005468:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800546c:	2300      	movs	r3, #0
 800546e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005472:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005476:	460b      	mov	r3, r1
 8005478:	4313      	orrs	r3, r2
 800547a:	d01e      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800547c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005480:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005484:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005488:	d10c      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800548a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548e:	3328      	adds	r3, #40	@ 0x28
 8005490:	2102      	movs	r1, #2
 8005492:	4618      	mov	r0, r3
 8005494:	f001 fd26 	bl	8006ee4 <RCCEx_PLL3_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80054a4:	4b87      	ldr	r3, [pc, #540]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054b4:	4a83      	ldr	r2, [pc, #524]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054b6:	430b      	orrs	r3, r1
 80054b8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	f002 0310 	and.w	r3, r2, #16
 80054c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054ca:	2300      	movs	r3, #0
 80054cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80054d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80054d4:	460b      	mov	r3, r1
 80054d6:	4313      	orrs	r3, r2
 80054d8:	d01e      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80054da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054e6:	d10c      	bne.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ec:	3328      	adds	r3, #40	@ 0x28
 80054ee:	2102      	movs	r1, #2
 80054f0:	4618      	mov	r0, r3
 80054f2:	f001 fcf7 	bl	8006ee4 <RCCEx_PLL3_Config>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005502:	4b70      	ldr	r3, [pc, #448]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005506:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800550a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800550e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005512:	4a6c      	ldr	r2, [pc, #432]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005514:	430b      	orrs	r3, r1
 8005516:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005524:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005528:	2300      	movs	r3, #0
 800552a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800552e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005532:	460b      	mov	r3, r1
 8005534:	4313      	orrs	r3, r2
 8005536:	d03e      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800553c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005540:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005544:	d022      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005546:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800554a:	d81b      	bhi.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005554:	d00b      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005556:	e015      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800555c:	3308      	adds	r3, #8
 800555e:	2100      	movs	r1, #0
 8005560:	4618      	mov	r0, r3
 8005562:	f001 fc0d 	bl	8006d80 <RCCEx_PLL2_Config>
 8005566:	4603      	mov	r3, r0
 8005568:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800556c:	e00f      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800556e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005572:	3328      	adds	r3, #40	@ 0x28
 8005574:	2102      	movs	r1, #2
 8005576:	4618      	mov	r0, r3
 8005578:	f001 fcb4 	bl	8006ee4 <RCCEx_PLL3_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005582:	e004      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800558a:	e000      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800558c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800558e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10b      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005596:	4b4b      	ldr	r3, [pc, #300]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800559a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800559e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80055a6:	4a47      	ldr	r2, [pc, #284]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055a8:	430b      	orrs	r3, r1
 80055aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80055ac:	e003      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055be:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80055c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055c4:	2300      	movs	r3, #0
 80055c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80055cc:	460b      	mov	r3, r1
 80055ce:	4313      	orrs	r3, r2
 80055d0:	d03b      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80055d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055de:	d01f      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80055e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055e4:	d818      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80055e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055ea:	d003      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80055ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055f0:	d007      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80055f2:	e011      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055f4:	4b33      	ldr	r3, [pc, #204]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f8:	4a32      	ldr	r2, [pc, #200]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005600:	e00f      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005606:	3328      	adds	r3, #40	@ 0x28
 8005608:	2101      	movs	r1, #1
 800560a:	4618      	mov	r0, r3
 800560c:	f001 fc6a 	bl	8006ee4 <RCCEx_PLL3_Config>
 8005610:	4603      	mov	r3, r0
 8005612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005616:	e004      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800561e:	e000      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10b      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800562a:	4b26      	ldr	r3, [pc, #152]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800562c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563a:	4a22      	ldr	r2, [pc, #136]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800563c:	430b      	orrs	r3, r1
 800563e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005640:	e003      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800564a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005652:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005656:	673b      	str	r3, [r7, #112]	@ 0x70
 8005658:	2300      	movs	r3, #0
 800565a:	677b      	str	r3, [r7, #116]	@ 0x74
 800565c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005660:	460b      	mov	r3, r1
 8005662:	4313      	orrs	r3, r2
 8005664:	d034      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005674:	d007      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005676:	e011      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005678:	4b12      	ldr	r3, [pc, #72]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800567a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567c:	4a11      	ldr	r2, [pc, #68]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800567e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005682:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005684:	e00e      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800568a:	3308      	adds	r3, #8
 800568c:	2102      	movs	r1, #2
 800568e:	4618      	mov	r0, r3
 8005690:	f001 fb76 	bl	8006d80 <RCCEx_PLL2_Config>
 8005694:	4603      	mov	r3, r0
 8005696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800569a:	e003      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10d      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80056ac:	4b05      	ldr	r3, [pc, #20]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80056b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ba:	4a02      	ldr	r2, [pc, #8]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056bc:	430b      	orrs	r3, r1
 80056be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80056c0:	e006      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80056c2:	bf00      	nop
 80056c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80056dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056de:	2300      	movs	r3, #0
 80056e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80056e6:	460b      	mov	r3, r1
 80056e8:	4313      	orrs	r3, r2
 80056ea:	d00c      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f0:	3328      	adds	r3, #40	@ 0x28
 80056f2:	2102      	movs	r1, #2
 80056f4:	4618      	mov	r0, r3
 80056f6:	f001 fbf5 	bl	8006ee4 <RCCEx_PLL3_Config>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005712:	663b      	str	r3, [r7, #96]	@ 0x60
 8005714:	2300      	movs	r3, #0
 8005716:	667b      	str	r3, [r7, #100]	@ 0x64
 8005718:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800571c:	460b      	mov	r3, r1
 800571e:	4313      	orrs	r3, r2
 8005720:	d038      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800572a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800572e:	d018      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005730:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005734:	d811      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005736:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800573a:	d014      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800573c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005740:	d80b      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005742:	2b00      	cmp	r3, #0
 8005744:	d011      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005746:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800574a:	d106      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800574c:	4bc3      	ldr	r3, [pc, #780]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800574e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005750:	4ac2      	ldr	r2, [pc, #776]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005756:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005758:	e008      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005760:	e004      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005762:	bf00      	nop
 8005764:	e002      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005766:	bf00      	nop
 8005768:	e000      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800576a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800576c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10b      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005774:	4bb9      	ldr	r3, [pc, #740]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005778:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800577c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005784:	4ab5      	ldr	r2, [pc, #724]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005786:	430b      	orrs	r3, r1
 8005788:	6553      	str	r3, [r2, #84]	@ 0x54
 800578a:	e003      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800578c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005790:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80057a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057a2:	2300      	movs	r3, #0
 80057a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80057aa:	460b      	mov	r3, r1
 80057ac:	4313      	orrs	r3, r2
 80057ae:	d009      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057b0:	4baa      	ldr	r3, [pc, #680]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80057b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057be:	4aa7      	ldr	r2, [pc, #668]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057c0:	430b      	orrs	r3, r1
 80057c2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80057c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057cc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80057d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80057d2:	2300      	movs	r3, #0
 80057d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80057d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80057da:	460b      	mov	r3, r1
 80057dc:	4313      	orrs	r3, r2
 80057de:	d00a      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80057e0:	4b9e      	ldr	r3, [pc, #632]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80057e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80057f0:	4a9a      	ldr	r2, [pc, #616]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057f2:	430b      	orrs	r3, r1
 80057f4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005802:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005804:	2300      	movs	r3, #0
 8005806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005808:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800580c:	460b      	mov	r3, r1
 800580e:	4313      	orrs	r3, r2
 8005810:	d009      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005812:	4b92      	ldr	r3, [pc, #584]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005816:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800581a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005820:	4a8e      	ldr	r2, [pc, #568]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005822:	430b      	orrs	r3, r1
 8005824:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005832:	643b      	str	r3, [r7, #64]	@ 0x40
 8005834:	2300      	movs	r3, #0
 8005836:	647b      	str	r3, [r7, #68]	@ 0x44
 8005838:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800583c:	460b      	mov	r3, r1
 800583e:	4313      	orrs	r3, r2
 8005840:	d00e      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005842:	4b86      	ldr	r3, [pc, #536]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	4a85      	ldr	r2, [pc, #532]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005848:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800584c:	6113      	str	r3, [r2, #16]
 800584e:	4b83      	ldr	r3, [pc, #524]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005850:	6919      	ldr	r1, [r3, #16]
 8005852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005856:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800585a:	4a80      	ldr	r2, [pc, #512]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800585c:	430b      	orrs	r3, r1
 800585e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005868:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800586c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800586e:	2300      	movs	r3, #0
 8005870:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005872:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005876:	460b      	mov	r3, r1
 8005878:	4313      	orrs	r3, r2
 800587a:	d009      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800587c:	4b77      	ldr	r3, [pc, #476]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800587e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005880:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800588a:	4a74      	ldr	r2, [pc, #464]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800588c:	430b      	orrs	r3, r1
 800588e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800589c:	633b      	str	r3, [r7, #48]	@ 0x30
 800589e:	2300      	movs	r3, #0
 80058a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80058a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80058a6:	460b      	mov	r3, r1
 80058a8:	4313      	orrs	r3, r2
 80058aa:	d00a      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80058ac:	4b6b      	ldr	r3, [pc, #428]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80058b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058bc:	4a67      	ldr	r2, [pc, #412]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058be:	430b      	orrs	r3, r1
 80058c0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80058c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	2100      	movs	r1, #0
 80058cc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80058d8:	460b      	mov	r3, r1
 80058da:	4313      	orrs	r3, r2
 80058dc:	d011      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e2:	3308      	adds	r3, #8
 80058e4:	2100      	movs	r1, #0
 80058e6:	4618      	mov	r0, r3
 80058e8:	f001 fa4a 	bl	8006d80 <RCCEx_PLL2_Config>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80058f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590a:	2100      	movs	r1, #0
 800590c:	6239      	str	r1, [r7, #32]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	627b      	str	r3, [r7, #36]	@ 0x24
 8005914:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005918:	460b      	mov	r3, r1
 800591a:	4313      	orrs	r3, r2
 800591c:	d011      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800591e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005922:	3308      	adds	r3, #8
 8005924:	2101      	movs	r1, #1
 8005926:	4618      	mov	r0, r3
 8005928:	f001 fa2a 	bl	8006d80 <RCCEx_PLL2_Config>
 800592c:	4603      	mov	r3, r0
 800592e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800593a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800593e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594a:	2100      	movs	r1, #0
 800594c:	61b9      	str	r1, [r7, #24]
 800594e:	f003 0304 	and.w	r3, r3, #4
 8005952:	61fb      	str	r3, [r7, #28]
 8005954:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005958:	460b      	mov	r3, r1
 800595a:	4313      	orrs	r3, r2
 800595c:	d011      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800595e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005962:	3308      	adds	r3, #8
 8005964:	2102      	movs	r1, #2
 8005966:	4618      	mov	r0, r3
 8005968:	f001 fa0a 	bl	8006d80 <RCCEx_PLL2_Config>
 800596c:	4603      	mov	r3, r0
 800596e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800597a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800597e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	2100      	movs	r1, #0
 800598c:	6139      	str	r1, [r7, #16]
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005998:	460b      	mov	r3, r1
 800599a:	4313      	orrs	r3, r2
 800599c:	d011      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800599e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a2:	3328      	adds	r3, #40	@ 0x28
 80059a4:	2100      	movs	r1, #0
 80059a6:	4618      	mov	r0, r3
 80059a8:	f001 fa9c 	bl	8006ee4 <RCCEx_PLL3_Config>
 80059ac:	4603      	mov	r3, r0
 80059ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80059b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80059c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ca:	2100      	movs	r1, #0
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	f003 0310 	and.w	r3, r3, #16
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80059d8:	460b      	mov	r3, r1
 80059da:	4313      	orrs	r3, r2
 80059dc:	d011      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e2:	3328      	adds	r3, #40	@ 0x28
 80059e4:	2101      	movs	r1, #1
 80059e6:	4618      	mov	r0, r3
 80059e8:	f001 fa7c 	bl	8006ee4 <RCCEx_PLL3_Config>
 80059ec:	4603      	mov	r3, r0
 80059ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80059f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	6039      	str	r1, [r7, #0]
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	607b      	str	r3, [r7, #4]
 8005a14:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	d011      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a22:	3328      	adds	r3, #40	@ 0x28
 8005a24:	2102      	movs	r1, #2
 8005a26:	4618      	mov	r0, r3
 8005a28:	f001 fa5c 	bl	8006ee4 <RCCEx_PLL3_Config>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005a42:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e000      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005a56:	46bd      	mov	sp, r7
 8005a58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a5c:	58024400 	.word	0x58024400

08005a60 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b090      	sub	sp, #64	@ 0x40
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005a6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a6e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005a72:	430b      	orrs	r3, r1
 8005a74:	f040 8094 	bne.w	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005a78:	4b9e      	ldr	r3, [pc, #632]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	f200 8087 	bhi.w	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a90:	08005aa5 	.word	0x08005aa5
 8005a94:	08005acd 	.word	0x08005acd
 8005a98:	08005af5 	.word	0x08005af5
 8005a9c:	08005b91 	.word	0x08005b91
 8005aa0:	08005b1d 	.word	0x08005b1d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005aa4:	4b93      	ldr	r3, [pc, #588]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ab0:	d108      	bne.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f001 f810 	bl	8006adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ac0:	f000 bd45 	b.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ac8:	f000 bd41 	b.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005acc:	4b89      	ldr	r3, [pc, #548]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ad4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ad8:	d108      	bne.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ada:	f107 0318 	add.w	r3, r7, #24
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fd54 	bl	800658c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ae8:	f000 bd31 	b.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005af0:	f000 bd2d 	b.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005af4:	4b7f      	ldr	r3, [pc, #508]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005afc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b00:	d108      	bne.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b02:	f107 030c 	add.w	r3, r7, #12
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fe94 	bl	8006834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b10:	f000 bd1d 	b.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b14:	2300      	movs	r3, #0
 8005b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b18:	f000 bd19 	b.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005b1c:	4b75      	ldr	r3, [pc, #468]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b24:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b26:	4b73      	ldr	r3, [pc, #460]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0304 	and.w	r3, r3, #4
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d10c      	bne.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d109      	bne.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b38:	4b6e      	ldr	r3, [pc, #440]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	08db      	lsrs	r3, r3, #3
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	4a6d      	ldr	r2, [pc, #436]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005b44:	fa22 f303 	lsr.w	r3, r2, r3
 8005b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b4a:	e01f      	b.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b4c:	4b69      	ldr	r3, [pc, #420]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b58:	d106      	bne.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b60:	d102      	bne.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005b62:	4b66      	ldr	r3, [pc, #408]	@ (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b66:	e011      	b.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b68:	4b62      	ldr	r3, [pc, #392]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b74:	d106      	bne.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b7c:	d102      	bne.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005b7e:	4b60      	ldr	r3, [pc, #384]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b82:	e003      	b.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005b84:	2300      	movs	r3, #0
 8005b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005b88:	f000 bce1 	b.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b8c:	f000 bcdf 	b.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b90:	4b5c      	ldr	r3, [pc, #368]	@ (8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b94:	f000 bcdb 	b.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b9c:	f000 bcd7 	b.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ba4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005ba8:	430b      	orrs	r3, r1
 8005baa:	f040 80ad 	bne.w	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005bae:	4b51      	ldr	r3, [pc, #324]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005bb6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bbe:	d056      	beq.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bc6:	f200 8090 	bhi.w	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bcc:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bce:	f000 8088 	beq.w	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd4:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bd6:	f200 8088 	bhi.w	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bdc:	2b80      	cmp	r3, #128	@ 0x80
 8005bde:	d032      	beq.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be2:	2b80      	cmp	r3, #128	@ 0x80
 8005be4:	f200 8081 	bhi.w	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf0:	2b40      	cmp	r3, #64	@ 0x40
 8005bf2:	d014      	beq.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005bf4:	e079      	b.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bf6:	4b3f      	ldr	r3, [pc, #252]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c02:	d108      	bne.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 ff67 	bl	8006adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c12:	f000 bc9c 	b.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c16:	2300      	movs	r3, #0
 8005c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c1a:	f000 bc98 	b.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c1e:	4b35      	ldr	r3, [pc, #212]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c2a:	d108      	bne.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c2c:	f107 0318 	add.w	r3, r7, #24
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 fcab 	bl	800658c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c3a:	f000 bc88 	b.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c42:	f000 bc84 	b.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c46:	4b2b      	ldr	r3, [pc, #172]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c52:	d108      	bne.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c54:	f107 030c 	add.w	r3, r7, #12
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 fdeb 	bl	8006834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c62:	f000 bc74 	b.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c66:	2300      	movs	r3, #0
 8005c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c6a:	f000 bc70 	b.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c6e:	4b21      	ldr	r3, [pc, #132]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c76:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c78:	4b1e      	ldr	r3, [pc, #120]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d10c      	bne.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d109      	bne.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	08db      	lsrs	r3, r3, #3
 8005c90:	f003 0303 	and.w	r3, r3, #3
 8005c94:	4a18      	ldr	r2, [pc, #96]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005c96:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c9c:	e01f      	b.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c9e:	4b15      	ldr	r3, [pc, #84]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005caa:	d106      	bne.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cb2:	d102      	bne.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005cb4:	4b11      	ldr	r3, [pc, #68]	@ (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cb8:	e011      	b.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005cba:	4b0e      	ldr	r3, [pc, #56]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cc6:	d106      	bne.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cce:	d102      	bne.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cd4:	e003      	b.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005cda:	f000 bc38 	b.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005cde:	f000 bc36 	b.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005ce2:	4b08      	ldr	r3, [pc, #32]	@ (8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ce6:	f000 bc32 	b.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cee:	f000 bc2e 	b.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005cf2:	bf00      	nop
 8005cf4:	58024400 	.word	0x58024400
 8005cf8:	03d09000 	.word	0x03d09000
 8005cfc:	003d0900 	.word	0x003d0900
 8005d00:	007a1200 	.word	0x007a1200
 8005d04:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d0c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005d10:	430b      	orrs	r3, r1
 8005d12:	f040 809c 	bne.w	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005d16:	4b9e      	ldr	r3, [pc, #632]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d1a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005d1e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d26:	d054      	beq.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d2e:	f200 808b 	bhi.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d34:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005d38:	f000 8083 	beq.w	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005d42:	f200 8081 	bhi.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d4c:	d02f      	beq.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d54:	d878      	bhi.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d004      	beq.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d62:	d012      	beq.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005d64:	e070      	b.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d66:	4b8a      	ldr	r3, [pc, #552]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d72:	d107      	bne.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 feaf 	bl	8006adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d82:	e3e4      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d84:	2300      	movs	r3, #0
 8005d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d88:	e3e1      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d8a:	4b81      	ldr	r3, [pc, #516]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d96:	d107      	bne.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d98:	f107 0318 	add.w	r3, r7, #24
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f000 fbf5 	bl	800658c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005da6:	e3d2      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005da8:	2300      	movs	r3, #0
 8005daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dac:	e3cf      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005dae:	4b78      	ldr	r3, [pc, #480]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005db6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dba:	d107      	bne.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dbc:	f107 030c 	add.w	r3, r7, #12
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 fd37 	bl	8006834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005dca:	e3c0      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dd0:	e3bd      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005dd2:	4b6f      	ldr	r3, [pc, #444]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005dda:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d10c      	bne.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d109      	bne.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dee:	4b68      	ldr	r3, [pc, #416]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	08db      	lsrs	r3, r3, #3
 8005df4:	f003 0303 	and.w	r3, r3, #3
 8005df8:	4a66      	ldr	r2, [pc, #408]	@ (8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8005dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e00:	e01e      	b.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e02:	4b63      	ldr	r3, [pc, #396]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e0e:	d106      	bne.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e16:	d102      	bne.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005e18:	4b5f      	ldr	r3, [pc, #380]	@ (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e1c:	e010      	b.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e1e:	4b5c      	ldr	r3, [pc, #368]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e2a:	d106      	bne.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e32:	d102      	bne.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005e34:	4b59      	ldr	r3, [pc, #356]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e38:	e002      	b.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005e3e:	e386      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005e40:	e385      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005e42:	4b57      	ldr	r3, [pc, #348]	@ (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e46:	e382      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e4c:	e37f      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e52:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005e56:	430b      	orrs	r3, r1
 8005e58:	f040 80a7 	bne.w	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005e5c:	4b4c      	ldr	r3, [pc, #304]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e60:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005e64:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e6c:	d055      	beq.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e74:	f200 8096 	bhi.w	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e7e:	f000 8084 	beq.w	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e88:	f200 808c 	bhi.w	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e92:	d030      	beq.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e9a:	f200 8083 	bhi.w	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d004      	beq.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005eaa:	d012      	beq.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005eac:	e07a      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005eae:	4b38      	ldr	r3, [pc, #224]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005eba:	d107      	bne.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ebc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f000 fe0b 	bl	8006adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005eca:	e340      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ed0:	e33d      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005eda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ede:	d107      	bne.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ee0:	f107 0318 	add.w	r3, r7, #24
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 fb51 	bl	800658c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005eee:	e32e      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ef4:	e32b      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ef6:	4b26      	ldr	r3, [pc, #152]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005efe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f02:	d107      	bne.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f04:	f107 030c 	add.w	r3, r7, #12
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 fc93 	bl	8006834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f12:	e31c      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f14:	2300      	movs	r3, #0
 8005f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f18:	e319      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f22:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f24:	4b1a      	ldr	r3, [pc, #104]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b04      	cmp	r3, #4
 8005f2e:	d10c      	bne.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d109      	bne.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f36:	4b16      	ldr	r3, [pc, #88]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	08db      	lsrs	r3, r3, #3
 8005f3c:	f003 0303 	and.w	r3, r3, #3
 8005f40:	4a14      	ldr	r2, [pc, #80]	@ (8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005f42:	fa22 f303 	lsr.w	r3, r2, r3
 8005f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f48:	e01e      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f4a:	4b11      	ldr	r3, [pc, #68]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f56:	d106      	bne.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f5e:	d102      	bne.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005f60:	4b0d      	ldr	r3, [pc, #52]	@ (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f64:	e010      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f66:	4b0a      	ldr	r3, [pc, #40]	@ (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f72:	d106      	bne.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f7a:	d102      	bne.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005f7c:	4b07      	ldr	r3, [pc, #28]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f80:	e002      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005f86:	e2e2      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f88:	e2e1      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005f8a:	4b05      	ldr	r3, [pc, #20]	@ (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f8e:	e2de      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f90:	58024400 	.word	0x58024400
 8005f94:	03d09000 	.word	0x03d09000
 8005f98:	003d0900 	.word	0x003d0900
 8005f9c:	007a1200 	.word	0x007a1200
 8005fa0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fa8:	e2d1      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fae:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005fb2:	430b      	orrs	r3, r1
 8005fb4:	f040 809c 	bne.w	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005fb8:	4b93      	ldr	r3, [pc, #588]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fbc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005fc0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fc8:	d054      	beq.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fd0:	f200 808b 	bhi.w	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fda:	f000 8083 	beq.w	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fe4:	f200 8081 	bhi.w	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fee:	d02f      	beq.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ff6:	d878      	bhi.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d004      	beq.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006000:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006004:	d012      	beq.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006006:	e070      	b.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006008:	4b7f      	ldr	r3, [pc, #508]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006010:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006014:	d107      	bne.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800601a:	4618      	mov	r0, r3
 800601c:	f000 fd5e 	bl	8006adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006024:	e293      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800602a:	e290      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800602c:	4b76      	ldr	r3, [pc, #472]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006034:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006038:	d107      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800603a:	f107 0318 	add.w	r3, r7, #24
 800603e:	4618      	mov	r0, r3
 8006040:	f000 faa4 	bl	800658c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006048:	e281      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800604e:	e27e      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006050:	4b6d      	ldr	r3, [pc, #436]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800605c:	d107      	bne.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800605e:	f107 030c 	add.w	r3, r7, #12
 8006062:	4618      	mov	r0, r3
 8006064:	f000 fbe6 	bl	8006834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800606c:	e26f      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800606e:	2300      	movs	r3, #0
 8006070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006072:	e26c      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006074:	4b64      	ldr	r3, [pc, #400]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006078:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800607c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800607e:	4b62      	ldr	r3, [pc, #392]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0304 	and.w	r3, r3, #4
 8006086:	2b04      	cmp	r3, #4
 8006088:	d10c      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800608a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800608c:	2b00      	cmp	r3, #0
 800608e:	d109      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006090:	4b5d      	ldr	r3, [pc, #372]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	08db      	lsrs	r3, r3, #3
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	4a5c      	ldr	r2, [pc, #368]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800609c:	fa22 f303 	lsr.w	r3, r2, r3
 80060a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060a2:	e01e      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80060a4:	4b58      	ldr	r3, [pc, #352]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060b0:	d106      	bne.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80060b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060b8:	d102      	bne.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80060ba:	4b55      	ldr	r3, [pc, #340]	@ (8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80060bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060be:	e010      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060c0:	4b51      	ldr	r3, [pc, #324]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060cc:	d106      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80060ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060d4:	d102      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80060d6:	4b4f      	ldr	r3, [pc, #316]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80060d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060da:	e002      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80060e0:	e235      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80060e2:	e234      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80060e4:	4b4c      	ldr	r3, [pc, #304]	@ (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80060e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060e8:	e231      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80060ea:	2300      	movs	r3, #0
 80060ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060ee:	e22e      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80060f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060f4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80060f8:	430b      	orrs	r3, r1
 80060fa:	f040 808f 	bne.w	800621c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80060fe:	4b42      	ldr	r3, [pc, #264]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006102:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006106:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800610e:	d06b      	beq.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006112:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006116:	d874      	bhi.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800611e:	d056      	beq.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006122:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006126:	d86c      	bhi.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800612a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800612e:	d03b      	beq.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006132:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006136:	d864      	bhi.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800613a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800613e:	d021      	beq.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006142:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006146:	d85c      	bhi.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614a:	2b00      	cmp	r3, #0
 800614c:	d004      	beq.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800614e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006154:	d004      	beq.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006156:	e054      	b.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006158:	f7fe fa4c 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
 800615c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800615e:	e1f6      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006160:	4b29      	ldr	r3, [pc, #164]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006168:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800616c:	d107      	bne.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800616e:	f107 0318 	add.w	r3, r7, #24
 8006172:	4618      	mov	r0, r3
 8006174:	f000 fa0a 	bl	800658c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800617c:	e1e7      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800617e:	2300      	movs	r3, #0
 8006180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006182:	e1e4      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006184:	4b20      	ldr	r3, [pc, #128]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800618c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006190:	d107      	bne.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006192:	f107 030c 	add.w	r3, r7, #12
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fb4c 	bl	8006834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061a0:	e1d5      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061a2:	2300      	movs	r3, #0
 80061a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061a6:	e1d2      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061a8:	4b17      	ldr	r3, [pc, #92]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0304 	and.w	r3, r3, #4
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d109      	bne.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061b4:	4b14      	ldr	r3, [pc, #80]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	08db      	lsrs	r3, r3, #3
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	4a13      	ldr	r2, [pc, #76]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80061c0:	fa22 f303 	lsr.w	r3, r2, r3
 80061c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061c6:	e1c2      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061c8:	2300      	movs	r3, #0
 80061ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061cc:	e1bf      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80061ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061da:	d102      	bne.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80061dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80061de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061e0:	e1b5      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061e6:	e1b2      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061e8:	4b07      	ldr	r3, [pc, #28]	@ (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061f4:	d102      	bne.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80061f6:	4b07      	ldr	r3, [pc, #28]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80061f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061fa:	e1a8      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061fc:	2300      	movs	r3, #0
 80061fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006200:	e1a5      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006202:	2300      	movs	r3, #0
 8006204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006206:	e1a2      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006208:	58024400 	.word	0x58024400
 800620c:	03d09000 	.word	0x03d09000
 8006210:	003d0900 	.word	0x003d0900
 8006214:	007a1200 	.word	0x007a1200
 8006218:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800621c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006220:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006224:	430b      	orrs	r3, r1
 8006226:	d173      	bne.n	8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006228:	4b9c      	ldr	r3, [pc, #624]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800622a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800622c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006230:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006234:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006238:	d02f      	beq.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800623a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006240:	d863      	bhi.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006244:	2b00      	cmp	r3, #0
 8006246:	d004      	beq.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800624e:	d012      	beq.n	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006250:	e05b      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006252:	4b92      	ldr	r3, [pc, #584]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800625a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800625e:	d107      	bne.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006260:	f107 0318 	add.w	r3, r7, #24
 8006264:	4618      	mov	r0, r3
 8006266:	f000 f991 	bl	800658c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800626e:	e16e      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006270:	2300      	movs	r3, #0
 8006272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006274:	e16b      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006276:	4b89      	ldr	r3, [pc, #548]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800627e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006282:	d107      	bne.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006284:	f107 030c 	add.w	r3, r7, #12
 8006288:	4618      	mov	r0, r3
 800628a:	f000 fad3 	bl	8006834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006292:	e15c      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006294:	2300      	movs	r3, #0
 8006296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006298:	e159      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800629a:	4b80      	ldr	r3, [pc, #512]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800629c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800629e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80062a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062a4:	4b7d      	ldr	r3, [pc, #500]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d10c      	bne.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80062b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d109      	bne.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062b6:	4b79      	ldr	r3, [pc, #484]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	08db      	lsrs	r3, r3, #3
 80062bc:	f003 0303 	and.w	r3, r3, #3
 80062c0:	4a77      	ldr	r2, [pc, #476]	@ (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80062c2:	fa22 f303 	lsr.w	r3, r2, r3
 80062c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062c8:	e01e      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062ca:	4b74      	ldr	r3, [pc, #464]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062d6:	d106      	bne.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80062d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062de:	d102      	bne.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80062e0:	4b70      	ldr	r3, [pc, #448]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80062e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062e4:	e010      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062e6:	4b6d      	ldr	r3, [pc, #436]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062f2:	d106      	bne.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80062f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062fa:	d102      	bne.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80062fc:	4b6a      	ldr	r3, [pc, #424]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80062fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006300:	e002      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006302:	2300      	movs	r3, #0
 8006304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006306:	e122      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006308:	e121      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800630a:	2300      	movs	r3, #0
 800630c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800630e:	e11e      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006314:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006318:	430b      	orrs	r3, r1
 800631a:	d133      	bne.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800631c:	4b5f      	ldr	r3, [pc, #380]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800631e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006324:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006328:	2b00      	cmp	r3, #0
 800632a:	d004      	beq.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800632c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006332:	d012      	beq.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006334:	e023      	b.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006336:	4b59      	ldr	r3, [pc, #356]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800633e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006342:	d107      	bne.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006344:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006348:	4618      	mov	r0, r3
 800634a:	f000 fbc7 	bl	8006adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800634e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006352:	e0fc      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006354:	2300      	movs	r3, #0
 8006356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006358:	e0f9      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800635a:	4b50      	ldr	r3, [pc, #320]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006362:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006366:	d107      	bne.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006368:	f107 0318 	add.w	r3, r7, #24
 800636c:	4618      	mov	r0, r3
 800636e:	f000 f90d 	bl	800658c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006376:	e0ea      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006378:	2300      	movs	r3, #0
 800637a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800637c:	e0e7      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800637e:	2300      	movs	r3, #0
 8006380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006382:	e0e4      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006384:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006388:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800638c:	430b      	orrs	r3, r1
 800638e:	f040 808d 	bne.w	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006392:	4b42      	ldr	r3, [pc, #264]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006396:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800639a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800639c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063a2:	d06b      	beq.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80063a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063aa:	d874      	bhi.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80063ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063b2:	d056      	beq.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80063b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ba:	d86c      	bhi.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80063bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063c2:	d03b      	beq.n	800643c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80063c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80063ca:	d864      	bhi.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80063cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063d2:	d021      	beq.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80063d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063da:	d85c      	bhi.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80063dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d004      	beq.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80063e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063e8:	d004      	beq.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80063ea:	e054      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80063ec:	f000 f8b8 	bl	8006560 <HAL_RCCEx_GetD3PCLK1Freq>
 80063f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063f2:	e0ac      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063f4:	4b29      	ldr	r3, [pc, #164]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006400:	d107      	bne.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006402:	f107 0318 	add.w	r3, r7, #24
 8006406:	4618      	mov	r0, r3
 8006408:	f000 f8c0 	bl	800658c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006410:	e09d      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006416:	e09a      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006418:	4b20      	ldr	r3, [pc, #128]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006420:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006424:	d107      	bne.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006426:	f107 030c 	add.w	r3, r7, #12
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fa02 	bl	8006834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006434:	e08b      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800643a:	e088      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800643c:	4b17      	ldr	r3, [pc, #92]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b04      	cmp	r3, #4
 8006446:	d109      	bne.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006448:	4b14      	ldr	r3, [pc, #80]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	08db      	lsrs	r3, r3, #3
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	4a13      	ldr	r2, [pc, #76]	@ (80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006454:	fa22 f303 	lsr.w	r3, r2, r3
 8006458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800645a:	e078      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800645c:	2300      	movs	r3, #0
 800645e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006460:	e075      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006462:	4b0e      	ldr	r3, [pc, #56]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800646a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800646e:	d102      	bne.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006470:	4b0c      	ldr	r3, [pc, #48]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006474:	e06b      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006476:	2300      	movs	r3, #0
 8006478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800647a:	e068      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800647c:	4b07      	ldr	r3, [pc, #28]	@ (800649c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006484:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006488:	d102      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800648a:	4b07      	ldr	r3, [pc, #28]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800648c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800648e:	e05e      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006490:	2300      	movs	r3, #0
 8006492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006494:	e05b      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006496:	2300      	movs	r3, #0
 8006498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800649a:	e058      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800649c:	58024400 	.word	0x58024400
 80064a0:	03d09000 	.word	0x03d09000
 80064a4:	003d0900 	.word	0x003d0900
 80064a8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80064ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064b0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80064b4:	430b      	orrs	r3, r1
 80064b6:	d148      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80064b8:	4b27      	ldr	r3, [pc, #156]	@ (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80064c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80064c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064c8:	d02a      	beq.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80064ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064d0:	d838      	bhi.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80064d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d004      	beq.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80064d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064de:	d00d      	beq.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80064e0:	e030      	b.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80064e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064ee:	d102      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80064f0:	4b1a      	ldr	r3, [pc, #104]	@ (800655c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80064f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064f4:	e02b      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064f6:	2300      	movs	r3, #0
 80064f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064fa:	e028      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064fc:	4b16      	ldr	r3, [pc, #88]	@ (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006504:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006508:	d107      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800650a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fae4 	bl	8006adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006518:	e019      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800651a:	2300      	movs	r3, #0
 800651c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800651e:	e016      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006520:	4b0d      	ldr	r3, [pc, #52]	@ (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006528:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800652c:	d107      	bne.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800652e:	f107 0318 	add.w	r3, r7, #24
 8006532:	4618      	mov	r0, r3
 8006534:	f000 f82a 	bl	800658c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800653c:	e007      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800653e:	2300      	movs	r3, #0
 8006540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006542:	e004      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006544:	2300      	movs	r3, #0
 8006546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006548:	e001      	b.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800654a:	2300      	movs	r3, #0
 800654c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800654e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006550:	4618      	mov	r0, r3
 8006552:	3740      	adds	r7, #64	@ 0x40
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	58024400 	.word	0x58024400
 800655c:	007a1200 	.word	0x007a1200

08006560 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006564:	f7fe f816 	bl	8004594 <HAL_RCC_GetHCLKFreq>
 8006568:	4602      	mov	r2, r0
 800656a:	4b06      	ldr	r3, [pc, #24]	@ (8006584 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	091b      	lsrs	r3, r3, #4
 8006570:	f003 0307 	and.w	r3, r3, #7
 8006574:	4904      	ldr	r1, [pc, #16]	@ (8006588 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006576:	5ccb      	ldrb	r3, [r1, r3]
 8006578:	f003 031f 	and.w	r3, r3, #31
 800657c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006580:	4618      	mov	r0, r3
 8006582:	bd80      	pop	{r7, pc}
 8006584:	58024400 	.word	0x58024400
 8006588:	08008588 	.word	0x08008588

0800658c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800658c:	b480      	push	{r7}
 800658e:	b089      	sub	sp, #36	@ 0x24
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006594:	4ba1      	ldr	r3, [pc, #644]	@ (800681c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006598:	f003 0303 	and.w	r3, r3, #3
 800659c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800659e:	4b9f      	ldr	r3, [pc, #636]	@ (800681c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a2:	0b1b      	lsrs	r3, r3, #12
 80065a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80065aa:	4b9c      	ldr	r3, [pc, #624]	@ (800681c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ae:	091b      	lsrs	r3, r3, #4
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80065b6:	4b99      	ldr	r3, [pc, #612]	@ (800681c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ba:	08db      	lsrs	r3, r3, #3
 80065bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	fb02 f303 	mul.w	r3, r2, r3
 80065c6:	ee07 3a90 	vmov	s15, r3
 80065ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8111 	beq.w	80067fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	2b02      	cmp	r3, #2
 80065de:	f000 8083 	beq.w	80066e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	f200 80a1 	bhi.w	800672c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d003      	beq.n	80065f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d056      	beq.n	80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80065f6:	e099      	b.n	800672c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065f8:	4b88      	ldr	r3, [pc, #544]	@ (800681c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0320 	and.w	r3, r3, #32
 8006600:	2b00      	cmp	r3, #0
 8006602:	d02d      	beq.n	8006660 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006604:	4b85      	ldr	r3, [pc, #532]	@ (800681c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	08db      	lsrs	r3, r3, #3
 800660a:	f003 0303 	and.w	r3, r3, #3
 800660e:	4a84      	ldr	r2, [pc, #528]	@ (8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006610:	fa22 f303 	lsr.w	r3, r2, r3
 8006614:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	ee07 3a90 	vmov	s15, r3
 800661c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	ee07 3a90 	vmov	s15, r3
 8006626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800662a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800662e:	4b7b      	ldr	r3, [pc, #492]	@ (800681c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006636:	ee07 3a90 	vmov	s15, r3
 800663a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800663e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006642:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800664a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800664e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800665a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800665e:	e087      	b.n	8006770 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	ee07 3a90 	vmov	s15, r3
 8006666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800666a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800666e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006672:	4b6a      	ldr	r3, [pc, #424]	@ (800681c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800667a:	ee07 3a90 	vmov	s15, r3
 800667e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006682:	ed97 6a03 	vldr	s12, [r7, #12]
 8006686:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800668a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800668e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800669a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800669e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066a2:	e065      	b.n	8006770 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800682c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80066b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066b6:	4b59      	ldr	r3, [pc, #356]	@ (800681c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066be:	ee07 3a90 	vmov	s15, r3
 80066c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066e6:	e043      	b.n	8006770 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	ee07 3a90 	vmov	s15, r3
 80066ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006830 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80066f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066fa:	4b48      	ldr	r3, [pc, #288]	@ (800681c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006702:	ee07 3a90 	vmov	s15, r3
 8006706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800670a:	ed97 6a03 	vldr	s12, [r7, #12]
 800670e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800671a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800671e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800672a:	e021      	b.n	8006770 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	ee07 3a90 	vmov	s15, r3
 8006732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006736:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800682c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800673a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800673e:	4b37      	ldr	r3, [pc, #220]	@ (800681c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006746:	ee07 3a90 	vmov	s15, r3
 800674a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800674e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006752:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800675a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800675e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800676a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800676e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006770:	4b2a      	ldr	r3, [pc, #168]	@ (800681c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006774:	0a5b      	lsrs	r3, r3, #9
 8006776:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800677a:	ee07 3a90 	vmov	s15, r3
 800677e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006782:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006786:	ee37 7a87 	vadd.f32	s14, s15, s14
 800678a:	edd7 6a07 	vldr	s13, [r7, #28]
 800678e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006796:	ee17 2a90 	vmov	r2, s15
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800679e:	4b1f      	ldr	r3, [pc, #124]	@ (800681c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a2:	0c1b      	lsrs	r3, r3, #16
 80067a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067a8:	ee07 3a90 	vmov	s15, r3
 80067ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80067bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067c4:	ee17 2a90 	vmov	r2, s15
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80067cc:	4b13      	ldr	r3, [pc, #76]	@ (800681c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d0:	0e1b      	lsrs	r3, r3, #24
 80067d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067d6:	ee07 3a90 	vmov	s15, r3
 80067da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80067ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067f2:	ee17 2a90 	vmov	r2, s15
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80067fa:	e008      	b.n	800680e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	609a      	str	r2, [r3, #8]
}
 800680e:	bf00      	nop
 8006810:	3724      	adds	r7, #36	@ 0x24
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	58024400 	.word	0x58024400
 8006820:	03d09000 	.word	0x03d09000
 8006824:	46000000 	.word	0x46000000
 8006828:	4c742400 	.word	0x4c742400
 800682c:	4a742400 	.word	0x4a742400
 8006830:	4af42400 	.word	0x4af42400

08006834 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006834:	b480      	push	{r7}
 8006836:	b089      	sub	sp, #36	@ 0x24
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800683c:	4ba1      	ldr	r3, [pc, #644]	@ (8006ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800683e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006840:	f003 0303 	and.w	r3, r3, #3
 8006844:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006846:	4b9f      	ldr	r3, [pc, #636]	@ (8006ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684a:	0d1b      	lsrs	r3, r3, #20
 800684c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006850:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006852:	4b9c      	ldr	r3, [pc, #624]	@ (8006ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006856:	0a1b      	lsrs	r3, r3, #8
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800685e:	4b99      	ldr	r3, [pc, #612]	@ (8006ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006862:	08db      	lsrs	r3, r3, #3
 8006864:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	fb02 f303 	mul.w	r3, r2, r3
 800686e:	ee07 3a90 	vmov	s15, r3
 8006872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006876:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 8111 	beq.w	8006aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	2b02      	cmp	r3, #2
 8006886:	f000 8083 	beq.w	8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	2b02      	cmp	r3, #2
 800688e:	f200 80a1 	bhi.w	80069d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d003      	beq.n	80068a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d056      	beq.n	800694c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800689e:	e099      	b.n	80069d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068a0:	4b88      	ldr	r3, [pc, #544]	@ (8006ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0320 	and.w	r3, r3, #32
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d02d      	beq.n	8006908 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068ac:	4b85      	ldr	r3, [pc, #532]	@ (8006ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	08db      	lsrs	r3, r3, #3
 80068b2:	f003 0303 	and.w	r3, r3, #3
 80068b6:	4a84      	ldr	r2, [pc, #528]	@ (8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80068b8:	fa22 f303 	lsr.w	r3, r2, r3
 80068bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	ee07 3a90 	vmov	s15, r3
 80068c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	ee07 3a90 	vmov	s15, r3
 80068ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068d6:	4b7b      	ldr	r3, [pc, #492]	@ (8006ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068de:	ee07 3a90 	vmov	s15, r3
 80068e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80068ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006acc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006902:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006906:	e087      	b.n	8006a18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	ee07 3a90 	vmov	s15, r3
 800690e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006912:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800691a:	4b6a      	ldr	r3, [pc, #424]	@ (8006ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800691c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800692a:	ed97 6a03 	vldr	s12, [r7, #12]
 800692e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006acc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800693a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800693e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800694a:	e065      	b.n	8006a18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	ee07 3a90 	vmov	s15, r3
 8006952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006956:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800695a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800695e:	4b59      	ldr	r3, [pc, #356]	@ (8006ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800696e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006972:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006acc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800697a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800697e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800698a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800698e:	e043      	b.n	8006a18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	ee07 3a90 	vmov	s15, r3
 8006996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800699e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069a2:	4b48      	ldr	r3, [pc, #288]	@ (8006ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069aa:	ee07 3a90 	vmov	s15, r3
 80069ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80069b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006acc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069d2:	e021      	b.n	8006a18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	ee07 3a90 	vmov	s15, r3
 80069da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80069e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069e6:	4b37      	ldr	r3, [pc, #220]	@ (8006ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ee:	ee07 3a90 	vmov	s15, r3
 80069f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006acc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006a18:	4b2a      	ldr	r3, [pc, #168]	@ (8006ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1c:	0a5b      	lsrs	r3, r3, #9
 8006a1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a22:	ee07 3a90 	vmov	s15, r3
 8006a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a32:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a3e:	ee17 2a90 	vmov	r2, s15
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006a46:	4b1f      	ldr	r3, [pc, #124]	@ (8006ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4a:	0c1b      	lsrs	r3, r3, #16
 8006a4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a50:	ee07 3a90 	vmov	s15, r3
 8006a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a60:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a6c:	ee17 2a90 	vmov	r2, s15
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006a74:	4b13      	ldr	r3, [pc, #76]	@ (8006ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a78:	0e1b      	lsrs	r3, r3, #24
 8006a7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a9a:	ee17 2a90 	vmov	r2, s15
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006aa2:	e008      	b.n	8006ab6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	609a      	str	r2, [r3, #8]
}
 8006ab6:	bf00      	nop
 8006ab8:	3724      	adds	r7, #36	@ 0x24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	58024400 	.word	0x58024400
 8006ac8:	03d09000 	.word	0x03d09000
 8006acc:	46000000 	.word	0x46000000
 8006ad0:	4c742400 	.word	0x4c742400
 8006ad4:	4a742400 	.word	0x4a742400
 8006ad8:	4af42400 	.word	0x4af42400

08006adc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b089      	sub	sp, #36	@ 0x24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ae4:	4ba0      	ldr	r3, [pc, #640]	@ (8006d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae8:	f003 0303 	and.w	r3, r3, #3
 8006aec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006aee:	4b9e      	ldr	r3, [pc, #632]	@ (8006d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af2:	091b      	lsrs	r3, r3, #4
 8006af4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006af8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006afa:	4b9b      	ldr	r3, [pc, #620]	@ (8006d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b04:	4b98      	ldr	r3, [pc, #608]	@ (8006d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b08:	08db      	lsrs	r3, r3, #3
 8006b0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	fb02 f303 	mul.w	r3, r2, r3
 8006b14:	ee07 3a90 	vmov	s15, r3
 8006b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 8111 	beq.w	8006d4a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	f000 8083 	beq.w	8006c36 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	f200 80a1 	bhi.w	8006c7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d056      	beq.n	8006bf2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006b44:	e099      	b.n	8006c7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b46:	4b88      	ldr	r3, [pc, #544]	@ (8006d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0320 	and.w	r3, r3, #32
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d02d      	beq.n	8006bae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b52:	4b85      	ldr	r3, [pc, #532]	@ (8006d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	08db      	lsrs	r3, r3, #3
 8006b58:	f003 0303 	and.w	r3, r3, #3
 8006b5c:	4a83      	ldr	r2, [pc, #524]	@ (8006d6c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b62:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	ee07 3a90 	vmov	s15, r3
 8006b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b7c:	4b7a      	ldr	r3, [pc, #488]	@ (8006d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b84:	ee07 3a90 	vmov	s15, r3
 8006b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b90:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006d70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006b94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006bac:	e087      	b.n	8006cbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	ee07 3a90 	vmov	s15, r3
 8006bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bc0:	4b69      	ldr	r3, [pc, #420]	@ (8006d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc8:	ee07 3a90 	vmov	s15, r3
 8006bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bd4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006d70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006bd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006be0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006be4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bf0:	e065      	b.n	8006cbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	ee07 3a90 	vmov	s15, r3
 8006bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006d78 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006c00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c04:	4b58      	ldr	r3, [pc, #352]	@ (8006d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0c:	ee07 3a90 	vmov	s15, r3
 8006c10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c14:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c18:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006d70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c34:	e043      	b.n	8006cbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	ee07 3a90 	vmov	s15, r3
 8006c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c40:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006d7c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006c44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c48:	4b47      	ldr	r3, [pc, #284]	@ (8006d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c50:	ee07 3a90 	vmov	s15, r3
 8006c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c58:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c5c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006d70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006c60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c78:	e021      	b.n	8006cbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	ee07 3a90 	vmov	s15, r3
 8006c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c84:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006d74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006c88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c8c:	4b36      	ldr	r3, [pc, #216]	@ (8006d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c94:	ee07 3a90 	vmov	s15, r3
 8006c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ca0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006d70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cbc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8006d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc2:	0a5b      	lsrs	r3, r3, #9
 8006cc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cc8:	ee07 3a90 	vmov	s15, r3
 8006ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ce4:	ee17 2a90 	vmov	r2, s15
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006cec:	4b1e      	ldr	r3, [pc, #120]	@ (8006d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf0:	0c1b      	lsrs	r3, r3, #16
 8006cf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cf6:	ee07 3a90 	vmov	s15, r3
 8006cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d06:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d12:	ee17 2a90 	vmov	r2, s15
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006d1a:	4b13      	ldr	r3, [pc, #76]	@ (8006d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1e:	0e1b      	lsrs	r3, r3, #24
 8006d20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d24:	ee07 3a90 	vmov	s15, r3
 8006d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d34:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d40:	ee17 2a90 	vmov	r2, s15
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006d48:	e008      	b.n	8006d5c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	609a      	str	r2, [r3, #8]
}
 8006d5c:	bf00      	nop
 8006d5e:	3724      	adds	r7, #36	@ 0x24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	58024400 	.word	0x58024400
 8006d6c:	03d09000 	.word	0x03d09000
 8006d70:	46000000 	.word	0x46000000
 8006d74:	4c742400 	.word	0x4c742400
 8006d78:	4a742400 	.word	0x4a742400
 8006d7c:	4af42400 	.word	0x4af42400

08006d80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d8e:	4b53      	ldr	r3, [pc, #332]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d101      	bne.n	8006d9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e099      	b.n	8006ed2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d9e:	4b4f      	ldr	r3, [pc, #316]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a4e      	ldr	r2, [pc, #312]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006da4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006da8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006daa:	f7fa fbf9 	bl	80015a0 <HAL_GetTick>
 8006dae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006db0:	e008      	b.n	8006dc4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006db2:	f7fa fbf5 	bl	80015a0 <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d901      	bls.n	8006dc4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e086      	b.n	8006ed2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dc4:	4b45      	ldr	r3, [pc, #276]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1f0      	bne.n	8006db2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006dd0:	4b42      	ldr	r3, [pc, #264]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	031b      	lsls	r3, r3, #12
 8006dde:	493f      	ldr	r1, [pc, #252]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	628b      	str	r3, [r1, #40]	@ 0x28
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	025b      	lsls	r3, r3, #9
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	041b      	lsls	r3, r3, #16
 8006e02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e06:	431a      	orrs	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	061b      	lsls	r3, r3, #24
 8006e10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e14:	4931      	ldr	r1, [pc, #196]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e1a:	4b30      	ldr	r3, [pc, #192]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	492d      	ldr	r1, [pc, #180]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e30:	f023 0220 	bic.w	r2, r3, #32
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	4928      	ldr	r1, [pc, #160]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006e3e:	4b27      	ldr	r3, [pc, #156]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e42:	4a26      	ldr	r2, [pc, #152]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006e44:	f023 0310 	bic.w	r3, r3, #16
 8006e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e4a:	4b24      	ldr	r3, [pc, #144]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006e4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e4e:	4b24      	ldr	r3, [pc, #144]	@ (8006ee0 <RCCEx_PLL2_Config+0x160>)
 8006e50:	4013      	ands	r3, r2
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	69d2      	ldr	r2, [r2, #28]
 8006e56:	00d2      	lsls	r2, r2, #3
 8006e58:	4920      	ldr	r1, [pc, #128]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e62:	4a1e      	ldr	r2, [pc, #120]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006e64:	f043 0310 	orr.w	r3, r3, #16
 8006e68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d106      	bne.n	8006e7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e70:	4b1a      	ldr	r3, [pc, #104]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e74:	4a19      	ldr	r2, [pc, #100]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006e76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e7c:	e00f      	b.n	8006e9e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d106      	bne.n	8006e92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e84:	4b15      	ldr	r3, [pc, #84]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e88:	4a14      	ldr	r2, [pc, #80]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006e8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e90:	e005      	b.n	8006e9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e92:	4b12      	ldr	r3, [pc, #72]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e96:	4a11      	ldr	r2, [pc, #68]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006e98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006e9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a0e      	ldr	r2, [pc, #56]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006ea4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ea8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eaa:	f7fa fb79 	bl	80015a0 <HAL_GetTick>
 8006eae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006eb0:	e008      	b.n	8006ec4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006eb2:	f7fa fb75 	bl	80015a0 <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d901      	bls.n	8006ec4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e006      	b.n	8006ed2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ec4:	4b05      	ldr	r3, [pc, #20]	@ (8006edc <RCCEx_PLL2_Config+0x15c>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0f0      	beq.n	8006eb2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	58024400 	.word	0x58024400
 8006ee0:	ffff0007 	.word	0xffff0007

08006ee4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ef2:	4b53      	ldr	r3, [pc, #332]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	d101      	bne.n	8006f02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e099      	b.n	8007036 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006f02:	4b4f      	ldr	r3, [pc, #316]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a4e      	ldr	r2, [pc, #312]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006f08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f0e:	f7fa fb47 	bl	80015a0 <HAL_GetTick>
 8006f12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f14:	e008      	b.n	8006f28 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f16:	f7fa fb43 	bl	80015a0 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d901      	bls.n	8006f28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e086      	b.n	8007036 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f28:	4b45      	ldr	r3, [pc, #276]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1f0      	bne.n	8006f16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f34:	4b42      	ldr	r3, [pc, #264]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f38:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	051b      	lsls	r3, r3, #20
 8006f42:	493f      	ldr	r1, [pc, #252]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	025b      	lsls	r3, r3, #9
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	041b      	lsls	r3, r3, #16
 8006f66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	3b01      	subs	r3, #1
 8006f72:	061b      	lsls	r3, r3, #24
 8006f74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f78:	4931      	ldr	r1, [pc, #196]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f7e:	4b30      	ldr	r3, [pc, #192]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	492d      	ldr	r1, [pc, #180]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f90:	4b2b      	ldr	r3, [pc, #172]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f94:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	4928      	ldr	r1, [pc, #160]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006fa2:	4b27      	ldr	r3, [pc, #156]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa6:	4a26      	ldr	r2, [pc, #152]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006fa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006fae:	4b24      	ldr	r3, [pc, #144]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006fb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fb2:	4b24      	ldr	r3, [pc, #144]	@ (8007044 <RCCEx_PLL3_Config+0x160>)
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	69d2      	ldr	r2, [r2, #28]
 8006fba:	00d2      	lsls	r2, r2, #3
 8006fbc:	4920      	ldr	r1, [pc, #128]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d106      	bne.n	8006fe2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd8:	4a19      	ldr	r2, [pc, #100]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006fda:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006fde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006fe0:	e00f      	b.n	8007002 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d106      	bne.n	8006ff6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006fe8:	4b15      	ldr	r3, [pc, #84]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fec:	4a14      	ldr	r2, [pc, #80]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006fee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ff4:	e005      	b.n	8007002 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006ff6:	4b12      	ldr	r3, [pc, #72]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffa:	4a11      	ldr	r2, [pc, #68]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8006ffc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007000:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007002:	4b0f      	ldr	r3, [pc, #60]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a0e      	ldr	r2, [pc, #56]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 8007008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800700c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800700e:	f7fa fac7 	bl	80015a0 <HAL_GetTick>
 8007012:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007014:	e008      	b.n	8007028 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007016:	f7fa fac3 	bl	80015a0 <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	2b02      	cmp	r3, #2
 8007022:	d901      	bls.n	8007028 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e006      	b.n	8007036 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007028:	4b05      	ldr	r3, [pc, #20]	@ (8007040 <RCCEx_PLL3_Config+0x15c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d0f0      	beq.n	8007016 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007034:	7bfb      	ldrb	r3, [r7, #15]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	58024400 	.word	0x58024400
 8007044:	ffff0007 	.word	0xffff0007

08007048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e049      	b.n	80070ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d106      	bne.n	8007074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fa f852 	bl	8001118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f000 f836 	bl	80070f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a46      	ldr	r2, [pc, #280]	@ (8007224 <TIM_Base_SetConfig+0x12c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d013      	beq.n	8007138 <TIM_Base_SetConfig+0x40>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007116:	d00f      	beq.n	8007138 <TIM_Base_SetConfig+0x40>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a43      	ldr	r2, [pc, #268]	@ (8007228 <TIM_Base_SetConfig+0x130>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d00b      	beq.n	8007138 <TIM_Base_SetConfig+0x40>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a42      	ldr	r2, [pc, #264]	@ (800722c <TIM_Base_SetConfig+0x134>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d007      	beq.n	8007138 <TIM_Base_SetConfig+0x40>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a41      	ldr	r2, [pc, #260]	@ (8007230 <TIM_Base_SetConfig+0x138>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d003      	beq.n	8007138 <TIM_Base_SetConfig+0x40>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a40      	ldr	r2, [pc, #256]	@ (8007234 <TIM_Base_SetConfig+0x13c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d108      	bne.n	800714a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800713e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	4313      	orrs	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a35      	ldr	r2, [pc, #212]	@ (8007224 <TIM_Base_SetConfig+0x12c>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d01f      	beq.n	8007192 <TIM_Base_SetConfig+0x9a>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007158:	d01b      	beq.n	8007192 <TIM_Base_SetConfig+0x9a>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a32      	ldr	r2, [pc, #200]	@ (8007228 <TIM_Base_SetConfig+0x130>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d017      	beq.n	8007192 <TIM_Base_SetConfig+0x9a>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a31      	ldr	r2, [pc, #196]	@ (800722c <TIM_Base_SetConfig+0x134>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d013      	beq.n	8007192 <TIM_Base_SetConfig+0x9a>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a30      	ldr	r2, [pc, #192]	@ (8007230 <TIM_Base_SetConfig+0x138>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d00f      	beq.n	8007192 <TIM_Base_SetConfig+0x9a>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a2f      	ldr	r2, [pc, #188]	@ (8007234 <TIM_Base_SetConfig+0x13c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00b      	beq.n	8007192 <TIM_Base_SetConfig+0x9a>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a2e      	ldr	r2, [pc, #184]	@ (8007238 <TIM_Base_SetConfig+0x140>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d007      	beq.n	8007192 <TIM_Base_SetConfig+0x9a>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a2d      	ldr	r2, [pc, #180]	@ (800723c <TIM_Base_SetConfig+0x144>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d003      	beq.n	8007192 <TIM_Base_SetConfig+0x9a>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a2c      	ldr	r2, [pc, #176]	@ (8007240 <TIM_Base_SetConfig+0x148>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d108      	bne.n	80071a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	689a      	ldr	r2, [r3, #8]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a16      	ldr	r2, [pc, #88]	@ (8007224 <TIM_Base_SetConfig+0x12c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d00f      	beq.n	80071f0 <TIM_Base_SetConfig+0xf8>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a18      	ldr	r2, [pc, #96]	@ (8007234 <TIM_Base_SetConfig+0x13c>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00b      	beq.n	80071f0 <TIM_Base_SetConfig+0xf8>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a17      	ldr	r2, [pc, #92]	@ (8007238 <TIM_Base_SetConfig+0x140>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d007      	beq.n	80071f0 <TIM_Base_SetConfig+0xf8>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a16      	ldr	r2, [pc, #88]	@ (800723c <TIM_Base_SetConfig+0x144>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d003      	beq.n	80071f0 <TIM_Base_SetConfig+0xf8>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a15      	ldr	r2, [pc, #84]	@ (8007240 <TIM_Base_SetConfig+0x148>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d103      	bne.n	80071f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	691a      	ldr	r2, [r3, #16]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b01      	cmp	r3, #1
 8007208:	d105      	bne.n	8007216 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	f023 0201 	bic.w	r2, r3, #1
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	611a      	str	r2, [r3, #16]
  }
}
 8007216:	bf00      	nop
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	40010000 	.word	0x40010000
 8007228:	40000400 	.word	0x40000400
 800722c:	40000800 	.word	0x40000800
 8007230:	40000c00 	.word	0x40000c00
 8007234:	40010400 	.word	0x40010400
 8007238:	40014000 	.word	0x40014000
 800723c:	40014400 	.word	0x40014400
 8007240:	40014800 	.word	0x40014800

08007244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007254:	2b01      	cmp	r3, #1
 8007256:	d101      	bne.n	800725c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007258:	2302      	movs	r3, #2
 800725a:	e06d      	b.n	8007338 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2202      	movs	r2, #2
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a30      	ldr	r2, [pc, #192]	@ (8007344 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d004      	beq.n	8007290 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a2f      	ldr	r2, [pc, #188]	@ (8007348 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d108      	bne.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007296:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a20      	ldr	r2, [pc, #128]	@ (8007344 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d022      	beq.n	800730c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ce:	d01d      	beq.n	800730c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a1d      	ldr	r2, [pc, #116]	@ (800734c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d018      	beq.n	800730c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a1c      	ldr	r2, [pc, #112]	@ (8007350 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d013      	beq.n	800730c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a1a      	ldr	r2, [pc, #104]	@ (8007354 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d00e      	beq.n	800730c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a15      	ldr	r2, [pc, #84]	@ (8007348 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d009      	beq.n	800730c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a16      	ldr	r2, [pc, #88]	@ (8007358 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d004      	beq.n	800730c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a15      	ldr	r2, [pc, #84]	@ (800735c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d10c      	bne.n	8007326 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007312:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	4313      	orrs	r3, r2
 800731c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	40010000 	.word	0x40010000
 8007348:	40010400 	.word	0x40010400
 800734c:	40000400 	.word	0x40000400
 8007350:	40000800 	.word	0x40000800
 8007354:	40000c00 	.word	0x40000c00
 8007358:	40001800 	.word	0x40001800
 800735c:	40014000 	.word	0x40014000

08007360 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e042      	b.n	80073f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007378:	2b00      	cmp	r3, #0
 800737a:	d106      	bne.n	800738a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7f9 fee9 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2224      	movs	r2, #36	@ 0x24
 800738e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0201 	bic.w	r2, r2, #1
 80073a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fd90 	bl	8007ed0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f825 	bl	8007400 <UART_SetConfig>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d101      	bne.n	80073c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e01b      	b.n	80073f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	689a      	ldr	r2, [r3, #8]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f042 0201 	orr.w	r2, r2, #1
 80073ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fe0f 	bl	8008014 <UART_CheckIdleState>
 80073f6:	4603      	mov	r3, r0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007404:	b092      	sub	sp, #72	@ 0x48
 8007406:	af00      	add	r7, sp, #0
 8007408:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	431a      	orrs	r2, r3
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	431a      	orrs	r2, r3
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	4313      	orrs	r3, r2
 8007426:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	4bbe      	ldr	r3, [pc, #760]	@ (8007728 <UART_SetConfig+0x328>)
 8007430:	4013      	ands	r3, r2
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	6812      	ldr	r2, [r2, #0]
 8007436:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007438:	430b      	orrs	r3, r1
 800743a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	68da      	ldr	r2, [r3, #12]
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4ab3      	ldr	r2, [pc, #716]	@ (800772c <UART_SetConfig+0x32c>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d004      	beq.n	800746c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007468:	4313      	orrs	r3, r2
 800746a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689a      	ldr	r2, [r3, #8]
 8007472:	4baf      	ldr	r3, [pc, #700]	@ (8007730 <UART_SetConfig+0x330>)
 8007474:	4013      	ands	r3, r2
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	6812      	ldr	r2, [r2, #0]
 800747a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800747c:	430b      	orrs	r3, r1
 800747e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007486:	f023 010f 	bic.w	r1, r3, #15
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4aa6      	ldr	r2, [pc, #664]	@ (8007734 <UART_SetConfig+0x334>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d177      	bne.n	8007590 <UART_SetConfig+0x190>
 80074a0:	4ba5      	ldr	r3, [pc, #660]	@ (8007738 <UART_SetConfig+0x338>)
 80074a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074a8:	2b28      	cmp	r3, #40	@ 0x28
 80074aa:	d86d      	bhi.n	8007588 <UART_SetConfig+0x188>
 80074ac:	a201      	add	r2, pc, #4	@ (adr r2, 80074b4 <UART_SetConfig+0xb4>)
 80074ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b2:	bf00      	nop
 80074b4:	08007559 	.word	0x08007559
 80074b8:	08007589 	.word	0x08007589
 80074bc:	08007589 	.word	0x08007589
 80074c0:	08007589 	.word	0x08007589
 80074c4:	08007589 	.word	0x08007589
 80074c8:	08007589 	.word	0x08007589
 80074cc:	08007589 	.word	0x08007589
 80074d0:	08007589 	.word	0x08007589
 80074d4:	08007561 	.word	0x08007561
 80074d8:	08007589 	.word	0x08007589
 80074dc:	08007589 	.word	0x08007589
 80074e0:	08007589 	.word	0x08007589
 80074e4:	08007589 	.word	0x08007589
 80074e8:	08007589 	.word	0x08007589
 80074ec:	08007589 	.word	0x08007589
 80074f0:	08007589 	.word	0x08007589
 80074f4:	08007569 	.word	0x08007569
 80074f8:	08007589 	.word	0x08007589
 80074fc:	08007589 	.word	0x08007589
 8007500:	08007589 	.word	0x08007589
 8007504:	08007589 	.word	0x08007589
 8007508:	08007589 	.word	0x08007589
 800750c:	08007589 	.word	0x08007589
 8007510:	08007589 	.word	0x08007589
 8007514:	08007571 	.word	0x08007571
 8007518:	08007589 	.word	0x08007589
 800751c:	08007589 	.word	0x08007589
 8007520:	08007589 	.word	0x08007589
 8007524:	08007589 	.word	0x08007589
 8007528:	08007589 	.word	0x08007589
 800752c:	08007589 	.word	0x08007589
 8007530:	08007589 	.word	0x08007589
 8007534:	08007579 	.word	0x08007579
 8007538:	08007589 	.word	0x08007589
 800753c:	08007589 	.word	0x08007589
 8007540:	08007589 	.word	0x08007589
 8007544:	08007589 	.word	0x08007589
 8007548:	08007589 	.word	0x08007589
 800754c:	08007589 	.word	0x08007589
 8007550:	08007589 	.word	0x08007589
 8007554:	08007581 	.word	0x08007581
 8007558:	2301      	movs	r3, #1
 800755a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800755e:	e222      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007560:	2304      	movs	r3, #4
 8007562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007566:	e21e      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007568:	2308      	movs	r3, #8
 800756a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800756e:	e21a      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007570:	2310      	movs	r3, #16
 8007572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007576:	e216      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007578:	2320      	movs	r3, #32
 800757a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800757e:	e212      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007580:	2340      	movs	r3, #64	@ 0x40
 8007582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007586:	e20e      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007588:	2380      	movs	r3, #128	@ 0x80
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800758e:	e20a      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a69      	ldr	r2, [pc, #420]	@ (800773c <UART_SetConfig+0x33c>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d130      	bne.n	80075fc <UART_SetConfig+0x1fc>
 800759a:	4b67      	ldr	r3, [pc, #412]	@ (8007738 <UART_SetConfig+0x338>)
 800759c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800759e:	f003 0307 	and.w	r3, r3, #7
 80075a2:	2b05      	cmp	r3, #5
 80075a4:	d826      	bhi.n	80075f4 <UART_SetConfig+0x1f4>
 80075a6:	a201      	add	r2, pc, #4	@ (adr r2, 80075ac <UART_SetConfig+0x1ac>)
 80075a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ac:	080075c5 	.word	0x080075c5
 80075b0:	080075cd 	.word	0x080075cd
 80075b4:	080075d5 	.word	0x080075d5
 80075b8:	080075dd 	.word	0x080075dd
 80075bc:	080075e5 	.word	0x080075e5
 80075c0:	080075ed 	.word	0x080075ed
 80075c4:	2300      	movs	r3, #0
 80075c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ca:	e1ec      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80075cc:	2304      	movs	r3, #4
 80075ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075d2:	e1e8      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80075d4:	2308      	movs	r3, #8
 80075d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075da:	e1e4      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80075dc:	2310      	movs	r3, #16
 80075de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075e2:	e1e0      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80075e4:	2320      	movs	r3, #32
 80075e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ea:	e1dc      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80075ec:	2340      	movs	r3, #64	@ 0x40
 80075ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075f2:	e1d8      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80075f4:	2380      	movs	r3, #128	@ 0x80
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075fa:	e1d4      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a4f      	ldr	r2, [pc, #316]	@ (8007740 <UART_SetConfig+0x340>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d130      	bne.n	8007668 <UART_SetConfig+0x268>
 8007606:	4b4c      	ldr	r3, [pc, #304]	@ (8007738 <UART_SetConfig+0x338>)
 8007608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800760a:	f003 0307 	and.w	r3, r3, #7
 800760e:	2b05      	cmp	r3, #5
 8007610:	d826      	bhi.n	8007660 <UART_SetConfig+0x260>
 8007612:	a201      	add	r2, pc, #4	@ (adr r2, 8007618 <UART_SetConfig+0x218>)
 8007614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007618:	08007631 	.word	0x08007631
 800761c:	08007639 	.word	0x08007639
 8007620:	08007641 	.word	0x08007641
 8007624:	08007649 	.word	0x08007649
 8007628:	08007651 	.word	0x08007651
 800762c:	08007659 	.word	0x08007659
 8007630:	2300      	movs	r3, #0
 8007632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007636:	e1b6      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007638:	2304      	movs	r3, #4
 800763a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800763e:	e1b2      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007640:	2308      	movs	r3, #8
 8007642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007646:	e1ae      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007648:	2310      	movs	r3, #16
 800764a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800764e:	e1aa      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007650:	2320      	movs	r3, #32
 8007652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007656:	e1a6      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007658:	2340      	movs	r3, #64	@ 0x40
 800765a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800765e:	e1a2      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007660:	2380      	movs	r3, #128	@ 0x80
 8007662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007666:	e19e      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a35      	ldr	r2, [pc, #212]	@ (8007744 <UART_SetConfig+0x344>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d130      	bne.n	80076d4 <UART_SetConfig+0x2d4>
 8007672:	4b31      	ldr	r3, [pc, #196]	@ (8007738 <UART_SetConfig+0x338>)
 8007674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007676:	f003 0307 	and.w	r3, r3, #7
 800767a:	2b05      	cmp	r3, #5
 800767c:	d826      	bhi.n	80076cc <UART_SetConfig+0x2cc>
 800767e:	a201      	add	r2, pc, #4	@ (adr r2, 8007684 <UART_SetConfig+0x284>)
 8007680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007684:	0800769d 	.word	0x0800769d
 8007688:	080076a5 	.word	0x080076a5
 800768c:	080076ad 	.word	0x080076ad
 8007690:	080076b5 	.word	0x080076b5
 8007694:	080076bd 	.word	0x080076bd
 8007698:	080076c5 	.word	0x080076c5
 800769c:	2300      	movs	r3, #0
 800769e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076a2:	e180      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80076a4:	2304      	movs	r3, #4
 80076a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076aa:	e17c      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80076ac:	2308      	movs	r3, #8
 80076ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076b2:	e178      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80076b4:	2310      	movs	r3, #16
 80076b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ba:	e174      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80076bc:	2320      	movs	r3, #32
 80076be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076c2:	e170      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80076c4:	2340      	movs	r3, #64	@ 0x40
 80076c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ca:	e16c      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80076cc:	2380      	movs	r3, #128	@ 0x80
 80076ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076d2:	e168      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a1b      	ldr	r2, [pc, #108]	@ (8007748 <UART_SetConfig+0x348>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d142      	bne.n	8007764 <UART_SetConfig+0x364>
 80076de:	4b16      	ldr	r3, [pc, #88]	@ (8007738 <UART_SetConfig+0x338>)
 80076e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076e2:	f003 0307 	and.w	r3, r3, #7
 80076e6:	2b05      	cmp	r3, #5
 80076e8:	d838      	bhi.n	800775c <UART_SetConfig+0x35c>
 80076ea:	a201      	add	r2, pc, #4	@ (adr r2, 80076f0 <UART_SetConfig+0x2f0>)
 80076ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f0:	08007709 	.word	0x08007709
 80076f4:	08007711 	.word	0x08007711
 80076f8:	08007719 	.word	0x08007719
 80076fc:	08007721 	.word	0x08007721
 8007700:	0800774d 	.word	0x0800774d
 8007704:	08007755 	.word	0x08007755
 8007708:	2300      	movs	r3, #0
 800770a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770e:	e14a      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007710:	2304      	movs	r3, #4
 8007712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007716:	e146      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007718:	2308      	movs	r3, #8
 800771a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800771e:	e142      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007720:	2310      	movs	r3, #16
 8007722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007726:	e13e      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007728:	cfff69f3 	.word	0xcfff69f3
 800772c:	58000c00 	.word	0x58000c00
 8007730:	11fff4ff 	.word	0x11fff4ff
 8007734:	40011000 	.word	0x40011000
 8007738:	58024400 	.word	0x58024400
 800773c:	40004400 	.word	0x40004400
 8007740:	40004800 	.word	0x40004800
 8007744:	40004c00 	.word	0x40004c00
 8007748:	40005000 	.word	0x40005000
 800774c:	2320      	movs	r3, #32
 800774e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007752:	e128      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007754:	2340      	movs	r3, #64	@ 0x40
 8007756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800775a:	e124      	b.n	80079a6 <UART_SetConfig+0x5a6>
 800775c:	2380      	movs	r3, #128	@ 0x80
 800775e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007762:	e120      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4acb      	ldr	r2, [pc, #812]	@ (8007a98 <UART_SetConfig+0x698>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d176      	bne.n	800785c <UART_SetConfig+0x45c>
 800776e:	4bcb      	ldr	r3, [pc, #812]	@ (8007a9c <UART_SetConfig+0x69c>)
 8007770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007772:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007776:	2b28      	cmp	r3, #40	@ 0x28
 8007778:	d86c      	bhi.n	8007854 <UART_SetConfig+0x454>
 800777a:	a201      	add	r2, pc, #4	@ (adr r2, 8007780 <UART_SetConfig+0x380>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	08007825 	.word	0x08007825
 8007784:	08007855 	.word	0x08007855
 8007788:	08007855 	.word	0x08007855
 800778c:	08007855 	.word	0x08007855
 8007790:	08007855 	.word	0x08007855
 8007794:	08007855 	.word	0x08007855
 8007798:	08007855 	.word	0x08007855
 800779c:	08007855 	.word	0x08007855
 80077a0:	0800782d 	.word	0x0800782d
 80077a4:	08007855 	.word	0x08007855
 80077a8:	08007855 	.word	0x08007855
 80077ac:	08007855 	.word	0x08007855
 80077b0:	08007855 	.word	0x08007855
 80077b4:	08007855 	.word	0x08007855
 80077b8:	08007855 	.word	0x08007855
 80077bc:	08007855 	.word	0x08007855
 80077c0:	08007835 	.word	0x08007835
 80077c4:	08007855 	.word	0x08007855
 80077c8:	08007855 	.word	0x08007855
 80077cc:	08007855 	.word	0x08007855
 80077d0:	08007855 	.word	0x08007855
 80077d4:	08007855 	.word	0x08007855
 80077d8:	08007855 	.word	0x08007855
 80077dc:	08007855 	.word	0x08007855
 80077e0:	0800783d 	.word	0x0800783d
 80077e4:	08007855 	.word	0x08007855
 80077e8:	08007855 	.word	0x08007855
 80077ec:	08007855 	.word	0x08007855
 80077f0:	08007855 	.word	0x08007855
 80077f4:	08007855 	.word	0x08007855
 80077f8:	08007855 	.word	0x08007855
 80077fc:	08007855 	.word	0x08007855
 8007800:	08007845 	.word	0x08007845
 8007804:	08007855 	.word	0x08007855
 8007808:	08007855 	.word	0x08007855
 800780c:	08007855 	.word	0x08007855
 8007810:	08007855 	.word	0x08007855
 8007814:	08007855 	.word	0x08007855
 8007818:	08007855 	.word	0x08007855
 800781c:	08007855 	.word	0x08007855
 8007820:	0800784d 	.word	0x0800784d
 8007824:	2301      	movs	r3, #1
 8007826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800782a:	e0bc      	b.n	80079a6 <UART_SetConfig+0x5a6>
 800782c:	2304      	movs	r3, #4
 800782e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007832:	e0b8      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007834:	2308      	movs	r3, #8
 8007836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783a:	e0b4      	b.n	80079a6 <UART_SetConfig+0x5a6>
 800783c:	2310      	movs	r3, #16
 800783e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007842:	e0b0      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007844:	2320      	movs	r3, #32
 8007846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800784a:	e0ac      	b.n	80079a6 <UART_SetConfig+0x5a6>
 800784c:	2340      	movs	r3, #64	@ 0x40
 800784e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007852:	e0a8      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007854:	2380      	movs	r3, #128	@ 0x80
 8007856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785a:	e0a4      	b.n	80079a6 <UART_SetConfig+0x5a6>
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a8f      	ldr	r2, [pc, #572]	@ (8007aa0 <UART_SetConfig+0x6a0>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d130      	bne.n	80078c8 <UART_SetConfig+0x4c8>
 8007866:	4b8d      	ldr	r3, [pc, #564]	@ (8007a9c <UART_SetConfig+0x69c>)
 8007868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800786a:	f003 0307 	and.w	r3, r3, #7
 800786e:	2b05      	cmp	r3, #5
 8007870:	d826      	bhi.n	80078c0 <UART_SetConfig+0x4c0>
 8007872:	a201      	add	r2, pc, #4	@ (adr r2, 8007878 <UART_SetConfig+0x478>)
 8007874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007878:	08007891 	.word	0x08007891
 800787c:	08007899 	.word	0x08007899
 8007880:	080078a1 	.word	0x080078a1
 8007884:	080078a9 	.word	0x080078a9
 8007888:	080078b1 	.word	0x080078b1
 800788c:	080078b9 	.word	0x080078b9
 8007890:	2300      	movs	r3, #0
 8007892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007896:	e086      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007898:	2304      	movs	r3, #4
 800789a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789e:	e082      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80078a0:	2308      	movs	r3, #8
 80078a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a6:	e07e      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80078a8:	2310      	movs	r3, #16
 80078aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ae:	e07a      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80078b0:	2320      	movs	r3, #32
 80078b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b6:	e076      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80078b8:	2340      	movs	r3, #64	@ 0x40
 80078ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078be:	e072      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80078c0:	2380      	movs	r3, #128	@ 0x80
 80078c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078c6:	e06e      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a75      	ldr	r2, [pc, #468]	@ (8007aa4 <UART_SetConfig+0x6a4>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d130      	bne.n	8007934 <UART_SetConfig+0x534>
 80078d2:	4b72      	ldr	r3, [pc, #456]	@ (8007a9c <UART_SetConfig+0x69c>)
 80078d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078d6:	f003 0307 	and.w	r3, r3, #7
 80078da:	2b05      	cmp	r3, #5
 80078dc:	d826      	bhi.n	800792c <UART_SetConfig+0x52c>
 80078de:	a201      	add	r2, pc, #4	@ (adr r2, 80078e4 <UART_SetConfig+0x4e4>)
 80078e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e4:	080078fd 	.word	0x080078fd
 80078e8:	08007905 	.word	0x08007905
 80078ec:	0800790d 	.word	0x0800790d
 80078f0:	08007915 	.word	0x08007915
 80078f4:	0800791d 	.word	0x0800791d
 80078f8:	08007925 	.word	0x08007925
 80078fc:	2300      	movs	r3, #0
 80078fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007902:	e050      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007904:	2304      	movs	r3, #4
 8007906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790a:	e04c      	b.n	80079a6 <UART_SetConfig+0x5a6>
 800790c:	2308      	movs	r3, #8
 800790e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007912:	e048      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007914:	2310      	movs	r3, #16
 8007916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791a:	e044      	b.n	80079a6 <UART_SetConfig+0x5a6>
 800791c:	2320      	movs	r3, #32
 800791e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007922:	e040      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007924:	2340      	movs	r3, #64	@ 0x40
 8007926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792a:	e03c      	b.n	80079a6 <UART_SetConfig+0x5a6>
 800792c:	2380      	movs	r3, #128	@ 0x80
 800792e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007932:	e038      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a5b      	ldr	r2, [pc, #364]	@ (8007aa8 <UART_SetConfig+0x6a8>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d130      	bne.n	80079a0 <UART_SetConfig+0x5a0>
 800793e:	4b57      	ldr	r3, [pc, #348]	@ (8007a9c <UART_SetConfig+0x69c>)
 8007940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007942:	f003 0307 	and.w	r3, r3, #7
 8007946:	2b05      	cmp	r3, #5
 8007948:	d826      	bhi.n	8007998 <UART_SetConfig+0x598>
 800794a:	a201      	add	r2, pc, #4	@ (adr r2, 8007950 <UART_SetConfig+0x550>)
 800794c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007950:	08007969 	.word	0x08007969
 8007954:	08007971 	.word	0x08007971
 8007958:	08007979 	.word	0x08007979
 800795c:	08007981 	.word	0x08007981
 8007960:	08007989 	.word	0x08007989
 8007964:	08007991 	.word	0x08007991
 8007968:	2302      	movs	r3, #2
 800796a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796e:	e01a      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007970:	2304      	movs	r3, #4
 8007972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007976:	e016      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007978:	2308      	movs	r3, #8
 800797a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797e:	e012      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007980:	2310      	movs	r3, #16
 8007982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007986:	e00e      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007988:	2320      	movs	r3, #32
 800798a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798e:	e00a      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007990:	2340      	movs	r3, #64	@ 0x40
 8007992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007996:	e006      	b.n	80079a6 <UART_SetConfig+0x5a6>
 8007998:	2380      	movs	r3, #128	@ 0x80
 800799a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799e:	e002      	b.n	80079a6 <UART_SetConfig+0x5a6>
 80079a0:	2380      	movs	r3, #128	@ 0x80
 80079a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a3f      	ldr	r2, [pc, #252]	@ (8007aa8 <UART_SetConfig+0x6a8>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	f040 80f8 	bne.w	8007ba2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80079b6:	2b20      	cmp	r3, #32
 80079b8:	dc46      	bgt.n	8007a48 <UART_SetConfig+0x648>
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	f2c0 8082 	blt.w	8007ac4 <UART_SetConfig+0x6c4>
 80079c0:	3b02      	subs	r3, #2
 80079c2:	2b1e      	cmp	r3, #30
 80079c4:	d87e      	bhi.n	8007ac4 <UART_SetConfig+0x6c4>
 80079c6:	a201      	add	r2, pc, #4	@ (adr r2, 80079cc <UART_SetConfig+0x5cc>)
 80079c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079cc:	08007a4f 	.word	0x08007a4f
 80079d0:	08007ac5 	.word	0x08007ac5
 80079d4:	08007a57 	.word	0x08007a57
 80079d8:	08007ac5 	.word	0x08007ac5
 80079dc:	08007ac5 	.word	0x08007ac5
 80079e0:	08007ac5 	.word	0x08007ac5
 80079e4:	08007a67 	.word	0x08007a67
 80079e8:	08007ac5 	.word	0x08007ac5
 80079ec:	08007ac5 	.word	0x08007ac5
 80079f0:	08007ac5 	.word	0x08007ac5
 80079f4:	08007ac5 	.word	0x08007ac5
 80079f8:	08007ac5 	.word	0x08007ac5
 80079fc:	08007ac5 	.word	0x08007ac5
 8007a00:	08007ac5 	.word	0x08007ac5
 8007a04:	08007a77 	.word	0x08007a77
 8007a08:	08007ac5 	.word	0x08007ac5
 8007a0c:	08007ac5 	.word	0x08007ac5
 8007a10:	08007ac5 	.word	0x08007ac5
 8007a14:	08007ac5 	.word	0x08007ac5
 8007a18:	08007ac5 	.word	0x08007ac5
 8007a1c:	08007ac5 	.word	0x08007ac5
 8007a20:	08007ac5 	.word	0x08007ac5
 8007a24:	08007ac5 	.word	0x08007ac5
 8007a28:	08007ac5 	.word	0x08007ac5
 8007a2c:	08007ac5 	.word	0x08007ac5
 8007a30:	08007ac5 	.word	0x08007ac5
 8007a34:	08007ac5 	.word	0x08007ac5
 8007a38:	08007ac5 	.word	0x08007ac5
 8007a3c:	08007ac5 	.word	0x08007ac5
 8007a40:	08007ac5 	.word	0x08007ac5
 8007a44:	08007ab7 	.word	0x08007ab7
 8007a48:	2b40      	cmp	r3, #64	@ 0x40
 8007a4a:	d037      	beq.n	8007abc <UART_SetConfig+0x6bc>
 8007a4c:	e03a      	b.n	8007ac4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a4e:	f7fe fd87 	bl	8006560 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a54:	e03c      	b.n	8007ad0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fe fd96 	bl	800658c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a64:	e034      	b.n	8007ad0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a66:	f107 0318 	add.w	r3, r7, #24
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fe fee2 	bl	8006834 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a74:	e02c      	b.n	8007ad0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a76:	4b09      	ldr	r3, [pc, #36]	@ (8007a9c <UART_SetConfig+0x69c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0320 	and.w	r3, r3, #32
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d016      	beq.n	8007ab0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a82:	4b06      	ldr	r3, [pc, #24]	@ (8007a9c <UART_SetConfig+0x69c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	08db      	lsrs	r3, r3, #3
 8007a88:	f003 0303 	and.w	r3, r3, #3
 8007a8c:	4a07      	ldr	r2, [pc, #28]	@ (8007aac <UART_SetConfig+0x6ac>)
 8007a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a94:	e01c      	b.n	8007ad0 <UART_SetConfig+0x6d0>
 8007a96:	bf00      	nop
 8007a98:	40011400 	.word	0x40011400
 8007a9c:	58024400 	.word	0x58024400
 8007aa0:	40007800 	.word	0x40007800
 8007aa4:	40007c00 	.word	0x40007c00
 8007aa8:	58000c00 	.word	0x58000c00
 8007aac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007ab0:	4b9d      	ldr	r3, [pc, #628]	@ (8007d28 <UART_SetConfig+0x928>)
 8007ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ab4:	e00c      	b.n	8007ad0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ab6:	4b9d      	ldr	r3, [pc, #628]	@ (8007d2c <UART_SetConfig+0x92c>)
 8007ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aba:	e009      	b.n	8007ad0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007abc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ac2:	e005      	b.n	8007ad0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ace:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 81de 	beq.w	8007e94 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007adc:	4a94      	ldr	r2, [pc, #592]	@ (8007d30 <UART_SetConfig+0x930>)
 8007ade:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ae6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007aea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	4613      	mov	r3, r2
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	4413      	add	r3, r2
 8007af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d305      	bcc.n	8007b08 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d903      	bls.n	8007b10 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b0e:	e1c1      	b.n	8007e94 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b12:	2200      	movs	r2, #0
 8007b14:	60bb      	str	r3, [r7, #8]
 8007b16:	60fa      	str	r2, [r7, #12]
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1c:	4a84      	ldr	r2, [pc, #528]	@ (8007d30 <UART_SetConfig+0x930>)
 8007b1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	2200      	movs	r2, #0
 8007b26:	603b      	str	r3, [r7, #0]
 8007b28:	607a      	str	r2, [r7, #4]
 8007b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b32:	f7f8 fbd1 	bl	80002d8 <__aeabi_uldivmod>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	f04f 0200 	mov.w	r2, #0
 8007b42:	f04f 0300 	mov.w	r3, #0
 8007b46:	020b      	lsls	r3, r1, #8
 8007b48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b4c:	0202      	lsls	r2, r0, #8
 8007b4e:	6979      	ldr	r1, [r7, #20]
 8007b50:	6849      	ldr	r1, [r1, #4]
 8007b52:	0849      	lsrs	r1, r1, #1
 8007b54:	2000      	movs	r0, #0
 8007b56:	460c      	mov	r4, r1
 8007b58:	4605      	mov	r5, r0
 8007b5a:	eb12 0804 	adds.w	r8, r2, r4
 8007b5e:	eb43 0905 	adc.w	r9, r3, r5
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	469a      	mov	sl, r3
 8007b6a:	4693      	mov	fp, r2
 8007b6c:	4652      	mov	r2, sl
 8007b6e:	465b      	mov	r3, fp
 8007b70:	4640      	mov	r0, r8
 8007b72:	4649      	mov	r1, r9
 8007b74:	f7f8 fbb0 	bl	80002d8 <__aeabi_uldivmod>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b86:	d308      	bcc.n	8007b9a <UART_SetConfig+0x79a>
 8007b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b8e:	d204      	bcs.n	8007b9a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b96:	60da      	str	r2, [r3, #12]
 8007b98:	e17c      	b.n	8007e94 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007ba0:	e178      	b.n	8007e94 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	69db      	ldr	r3, [r3, #28]
 8007ba6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007baa:	f040 80c5 	bne.w	8007d38 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007bae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007bb2:	2b20      	cmp	r3, #32
 8007bb4:	dc48      	bgt.n	8007c48 <UART_SetConfig+0x848>
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	db7b      	blt.n	8007cb2 <UART_SetConfig+0x8b2>
 8007bba:	2b20      	cmp	r3, #32
 8007bbc:	d879      	bhi.n	8007cb2 <UART_SetConfig+0x8b2>
 8007bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc4 <UART_SetConfig+0x7c4>)
 8007bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc4:	08007c4f 	.word	0x08007c4f
 8007bc8:	08007c57 	.word	0x08007c57
 8007bcc:	08007cb3 	.word	0x08007cb3
 8007bd0:	08007cb3 	.word	0x08007cb3
 8007bd4:	08007c5f 	.word	0x08007c5f
 8007bd8:	08007cb3 	.word	0x08007cb3
 8007bdc:	08007cb3 	.word	0x08007cb3
 8007be0:	08007cb3 	.word	0x08007cb3
 8007be4:	08007c6f 	.word	0x08007c6f
 8007be8:	08007cb3 	.word	0x08007cb3
 8007bec:	08007cb3 	.word	0x08007cb3
 8007bf0:	08007cb3 	.word	0x08007cb3
 8007bf4:	08007cb3 	.word	0x08007cb3
 8007bf8:	08007cb3 	.word	0x08007cb3
 8007bfc:	08007cb3 	.word	0x08007cb3
 8007c00:	08007cb3 	.word	0x08007cb3
 8007c04:	08007c7f 	.word	0x08007c7f
 8007c08:	08007cb3 	.word	0x08007cb3
 8007c0c:	08007cb3 	.word	0x08007cb3
 8007c10:	08007cb3 	.word	0x08007cb3
 8007c14:	08007cb3 	.word	0x08007cb3
 8007c18:	08007cb3 	.word	0x08007cb3
 8007c1c:	08007cb3 	.word	0x08007cb3
 8007c20:	08007cb3 	.word	0x08007cb3
 8007c24:	08007cb3 	.word	0x08007cb3
 8007c28:	08007cb3 	.word	0x08007cb3
 8007c2c:	08007cb3 	.word	0x08007cb3
 8007c30:	08007cb3 	.word	0x08007cb3
 8007c34:	08007cb3 	.word	0x08007cb3
 8007c38:	08007cb3 	.word	0x08007cb3
 8007c3c:	08007cb3 	.word	0x08007cb3
 8007c40:	08007cb3 	.word	0x08007cb3
 8007c44:	08007ca5 	.word	0x08007ca5
 8007c48:	2b40      	cmp	r3, #64	@ 0x40
 8007c4a:	d02e      	beq.n	8007caa <UART_SetConfig+0x8aa>
 8007c4c:	e031      	b.n	8007cb2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c4e:	f7fc fcd1 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
 8007c52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c54:	e033      	b.n	8007cbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c56:	f7fc fce3 	bl	8004620 <HAL_RCC_GetPCLK2Freq>
 8007c5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c5c:	e02f      	b.n	8007cbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fe fc92 	bl	800658c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c6c:	e027      	b.n	8007cbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c6e:	f107 0318 	add.w	r3, r7, #24
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe fdde 	bl	8006834 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c7c:	e01f      	b.n	8007cbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8007d34 <UART_SetConfig+0x934>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0320 	and.w	r3, r3, #32
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d009      	beq.n	8007c9e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8007d34 <UART_SetConfig+0x934>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	08db      	lsrs	r3, r3, #3
 8007c90:	f003 0303 	and.w	r3, r3, #3
 8007c94:	4a24      	ldr	r2, [pc, #144]	@ (8007d28 <UART_SetConfig+0x928>)
 8007c96:	fa22 f303 	lsr.w	r3, r2, r3
 8007c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c9c:	e00f      	b.n	8007cbe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007c9e:	4b22      	ldr	r3, [pc, #136]	@ (8007d28 <UART_SetConfig+0x928>)
 8007ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ca2:	e00c      	b.n	8007cbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ca4:	4b21      	ldr	r3, [pc, #132]	@ (8007d2c <UART_SetConfig+0x92c>)
 8007ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ca8:	e009      	b.n	8007cbe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cb0:	e005      	b.n	8007cbe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007cbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 80e7 	beq.w	8007e94 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cca:	4a19      	ldr	r2, [pc, #100]	@ (8007d30 <UART_SetConfig+0x930>)
 8007ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cd8:	005a      	lsls	r2, r3, #1
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	085b      	lsrs	r3, r3, #1
 8007ce0:	441a      	add	r2, r3
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cee:	2b0f      	cmp	r3, #15
 8007cf0:	d916      	bls.n	8007d20 <UART_SetConfig+0x920>
 8007cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cf8:	d212      	bcs.n	8007d20 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	f023 030f 	bic.w	r3, r3, #15
 8007d02:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d06:	085b      	lsrs	r3, r3, #1
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	f003 0307 	and.w	r3, r3, #7
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d12:	4313      	orrs	r3, r2
 8007d14:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007d1c:	60da      	str	r2, [r3, #12]
 8007d1e:	e0b9      	b.n	8007e94 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d26:	e0b5      	b.n	8007e94 <UART_SetConfig+0xa94>
 8007d28:	03d09000 	.word	0x03d09000
 8007d2c:	003d0900 	.word	0x003d0900
 8007d30:	080085a0 	.word	0x080085a0
 8007d34:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d38:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d3c:	2b20      	cmp	r3, #32
 8007d3e:	dc49      	bgt.n	8007dd4 <UART_SetConfig+0x9d4>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	db7c      	blt.n	8007e3e <UART_SetConfig+0xa3e>
 8007d44:	2b20      	cmp	r3, #32
 8007d46:	d87a      	bhi.n	8007e3e <UART_SetConfig+0xa3e>
 8007d48:	a201      	add	r2, pc, #4	@ (adr r2, 8007d50 <UART_SetConfig+0x950>)
 8007d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4e:	bf00      	nop
 8007d50:	08007ddb 	.word	0x08007ddb
 8007d54:	08007de3 	.word	0x08007de3
 8007d58:	08007e3f 	.word	0x08007e3f
 8007d5c:	08007e3f 	.word	0x08007e3f
 8007d60:	08007deb 	.word	0x08007deb
 8007d64:	08007e3f 	.word	0x08007e3f
 8007d68:	08007e3f 	.word	0x08007e3f
 8007d6c:	08007e3f 	.word	0x08007e3f
 8007d70:	08007dfb 	.word	0x08007dfb
 8007d74:	08007e3f 	.word	0x08007e3f
 8007d78:	08007e3f 	.word	0x08007e3f
 8007d7c:	08007e3f 	.word	0x08007e3f
 8007d80:	08007e3f 	.word	0x08007e3f
 8007d84:	08007e3f 	.word	0x08007e3f
 8007d88:	08007e3f 	.word	0x08007e3f
 8007d8c:	08007e3f 	.word	0x08007e3f
 8007d90:	08007e0b 	.word	0x08007e0b
 8007d94:	08007e3f 	.word	0x08007e3f
 8007d98:	08007e3f 	.word	0x08007e3f
 8007d9c:	08007e3f 	.word	0x08007e3f
 8007da0:	08007e3f 	.word	0x08007e3f
 8007da4:	08007e3f 	.word	0x08007e3f
 8007da8:	08007e3f 	.word	0x08007e3f
 8007dac:	08007e3f 	.word	0x08007e3f
 8007db0:	08007e3f 	.word	0x08007e3f
 8007db4:	08007e3f 	.word	0x08007e3f
 8007db8:	08007e3f 	.word	0x08007e3f
 8007dbc:	08007e3f 	.word	0x08007e3f
 8007dc0:	08007e3f 	.word	0x08007e3f
 8007dc4:	08007e3f 	.word	0x08007e3f
 8007dc8:	08007e3f 	.word	0x08007e3f
 8007dcc:	08007e3f 	.word	0x08007e3f
 8007dd0:	08007e31 	.word	0x08007e31
 8007dd4:	2b40      	cmp	r3, #64	@ 0x40
 8007dd6:	d02e      	beq.n	8007e36 <UART_SetConfig+0xa36>
 8007dd8:	e031      	b.n	8007e3e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dda:	f7fc fc0b 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
 8007dde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007de0:	e033      	b.n	8007e4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007de2:	f7fc fc1d 	bl	8004620 <HAL_RCC_GetPCLK2Freq>
 8007de6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007de8:	e02f      	b.n	8007e4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7fe fbcc 	bl	800658c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007df8:	e027      	b.n	8007e4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dfa:	f107 0318 	add.w	r3, r7, #24
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fe fd18 	bl	8006834 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e08:	e01f      	b.n	8007e4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8007ec0 <UART_SetConfig+0xac0>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0320 	and.w	r3, r3, #32
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d009      	beq.n	8007e2a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e16:	4b2a      	ldr	r3, [pc, #168]	@ (8007ec0 <UART_SetConfig+0xac0>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	08db      	lsrs	r3, r3, #3
 8007e1c:	f003 0303 	and.w	r3, r3, #3
 8007e20:	4a28      	ldr	r2, [pc, #160]	@ (8007ec4 <UART_SetConfig+0xac4>)
 8007e22:	fa22 f303 	lsr.w	r3, r2, r3
 8007e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e28:	e00f      	b.n	8007e4a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007e2a:	4b26      	ldr	r3, [pc, #152]	@ (8007ec4 <UART_SetConfig+0xac4>)
 8007e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e2e:	e00c      	b.n	8007e4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e30:	4b25      	ldr	r3, [pc, #148]	@ (8007ec8 <UART_SetConfig+0xac8>)
 8007e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e34:	e009      	b.n	8007e4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e3c:	e005      	b.n	8007e4a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007e48:	bf00      	nop
    }

    if (pclk != 0U)
 8007e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d021      	beq.n	8007e94 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e54:	4a1d      	ldr	r2, [pc, #116]	@ (8007ecc <UART_SetConfig+0xacc>)
 8007e56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	085b      	lsrs	r3, r3, #1
 8007e68:	441a      	add	r2, r3
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e72:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e76:	2b0f      	cmp	r3, #15
 8007e78:	d909      	bls.n	8007e8e <UART_SetConfig+0xa8e>
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e80:	d205      	bcs.n	8007e8e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	60da      	str	r2, [r3, #12]
 8007e8c:	e002      	b.n	8007e94 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2200      	movs	r2, #0
 8007eae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007eb0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3748      	adds	r7, #72	@ 0x48
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ebe:	bf00      	nop
 8007ec0:	58024400 	.word	0x58024400
 8007ec4:	03d09000 	.word	0x03d09000
 8007ec8:	003d0900 	.word	0x003d0900
 8007ecc:	080085a0 	.word	0x080085a0

08007ed0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007edc:	f003 0308 	and.w	r3, r3, #8
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00a      	beq.n	8007efa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00a      	beq.n	8007f1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00a      	beq.n	8007f3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f42:	f003 0304 	and.w	r3, r3, #4
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00a      	beq.n	8007f60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f64:	f003 0310 	and.w	r3, r3, #16
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00a      	beq.n	8007f82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f86:	f003 0320 	and.w	r3, r3, #32
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00a      	beq.n	8007fa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d01a      	beq.n	8007fe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fce:	d10a      	bne.n	8007fe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00a      	beq.n	8008008 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	430a      	orrs	r2, r1
 8008006:	605a      	str	r2, [r3, #4]
  }
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b098      	sub	sp, #96	@ 0x60
 8008018:	af02      	add	r7, sp, #8
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008024:	f7f9 fabc 	bl	80015a0 <HAL_GetTick>
 8008028:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0308 	and.w	r3, r3, #8
 8008034:	2b08      	cmp	r3, #8
 8008036:	d12f      	bne.n	8008098 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008038:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008040:	2200      	movs	r2, #0
 8008042:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f88e 	bl	8008168 <UART_WaitOnFlagUntilTimeout>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d022      	beq.n	8008098 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800805a:	e853 3f00 	ldrex	r3, [r3]
 800805e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008062:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008066:	653b      	str	r3, [r7, #80]	@ 0x50
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	461a      	mov	r2, r3
 800806e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008070:	647b      	str	r3, [r7, #68]	@ 0x44
 8008072:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008076:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800807e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e6      	bne.n	8008052 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2220      	movs	r2, #32
 8008088:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	e063      	b.n	8008160 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0304 	and.w	r3, r3, #4
 80080a2:	2b04      	cmp	r3, #4
 80080a4:	d149      	bne.n	800813a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080ae:	2200      	movs	r2, #0
 80080b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f857 	bl	8008168 <UART_WaitOnFlagUntilTimeout>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d03c      	beq.n	800813a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c8:	e853 3f00 	ldrex	r3, [r3]
 80080cc:	623b      	str	r3, [r7, #32]
   return(result);
 80080ce:	6a3b      	ldr	r3, [r7, #32]
 80080d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	461a      	mov	r2, r3
 80080dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080de:	633b      	str	r3, [r7, #48]	@ 0x30
 80080e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080e6:	e841 2300 	strex	r3, r2, [r1]
 80080ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1e6      	bne.n	80080c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	3308      	adds	r3, #8
 80080f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	60fb      	str	r3, [r7, #12]
   return(result);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f023 0301 	bic.w	r3, r3, #1
 8008108:	64bb      	str	r3, [r7, #72]	@ 0x48
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3308      	adds	r3, #8
 8008110:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008112:	61fa      	str	r2, [r7, #28]
 8008114:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008116:	69b9      	ldr	r1, [r7, #24]
 8008118:	69fa      	ldr	r2, [r7, #28]
 800811a:	e841 2300 	strex	r3, r2, [r1]
 800811e:	617b      	str	r3, [r7, #20]
   return(result);
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1e5      	bne.n	80080f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2220      	movs	r2, #32
 800812a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e012      	b.n	8008160 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2220      	movs	r2, #32
 800813e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2220      	movs	r2, #32
 8008146:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3758      	adds	r7, #88	@ 0x58
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	603b      	str	r3, [r7, #0]
 8008174:	4613      	mov	r3, r2
 8008176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008178:	e04f      	b.n	800821a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008180:	d04b      	beq.n	800821a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008182:	f7f9 fa0d 	bl	80015a0 <HAL_GetTick>
 8008186:	4602      	mov	r2, r0
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	69ba      	ldr	r2, [r7, #24]
 800818e:	429a      	cmp	r2, r3
 8008190:	d302      	bcc.n	8008198 <UART_WaitOnFlagUntilTimeout+0x30>
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e04e      	b.n	800823a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 0304 	and.w	r3, r3, #4
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d037      	beq.n	800821a <UART_WaitOnFlagUntilTimeout+0xb2>
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2b80      	cmp	r3, #128	@ 0x80
 80081ae:	d034      	beq.n	800821a <UART_WaitOnFlagUntilTimeout+0xb2>
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2b40      	cmp	r3, #64	@ 0x40
 80081b4:	d031      	beq.n	800821a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	69db      	ldr	r3, [r3, #28]
 80081bc:	f003 0308 	and.w	r3, r3, #8
 80081c0:	2b08      	cmp	r3, #8
 80081c2:	d110      	bne.n	80081e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2208      	movs	r2, #8
 80081ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 f839 	bl	8008244 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2208      	movs	r2, #8
 80081d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e029      	b.n	800823a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	69db      	ldr	r3, [r3, #28]
 80081ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081f4:	d111      	bne.n	800821a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 f81f 	bl	8008244 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2220      	movs	r2, #32
 800820a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	e00f      	b.n	800823a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	69da      	ldr	r2, [r3, #28]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	4013      	ands	r3, r2
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	429a      	cmp	r2, r3
 8008228:	bf0c      	ite	eq
 800822a:	2301      	moveq	r3, #1
 800822c:	2300      	movne	r3, #0
 800822e:	b2db      	uxtb	r3, r3
 8008230:	461a      	mov	r2, r3
 8008232:	79fb      	ldrb	r3, [r7, #7]
 8008234:	429a      	cmp	r2, r3
 8008236:	d0a0      	beq.n	800817a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
	...

08008244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008244:	b480      	push	{r7}
 8008246:	b095      	sub	sp, #84	@ 0x54
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008254:	e853 3f00 	ldrex	r3, [r3]
 8008258:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800825a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008260:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	461a      	mov	r2, r3
 8008268:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800826a:	643b      	str	r3, [r7, #64]	@ 0x40
 800826c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008270:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008272:	e841 2300 	strex	r3, r2, [r1]
 8008276:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1e6      	bne.n	800824c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3308      	adds	r3, #8
 8008284:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	e853 3f00 	ldrex	r3, [r3]
 800828c:	61fb      	str	r3, [r7, #28]
   return(result);
 800828e:	69fa      	ldr	r2, [r7, #28]
 8008290:	4b1e      	ldr	r3, [pc, #120]	@ (800830c <UART_EndRxTransfer+0xc8>)
 8008292:	4013      	ands	r3, r2
 8008294:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	3308      	adds	r3, #8
 800829c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800829e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082a6:	e841 2300 	strex	r3, r2, [r1]
 80082aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1e5      	bne.n	800827e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d118      	bne.n	80082ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	e853 3f00 	ldrex	r3, [r3]
 80082c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f023 0310 	bic.w	r3, r3, #16
 80082ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	461a      	mov	r2, r3
 80082d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082d8:	61bb      	str	r3, [r7, #24]
 80082da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082dc:	6979      	ldr	r1, [r7, #20]
 80082de:	69ba      	ldr	r2, [r7, #24]
 80082e0:	e841 2300 	strex	r3, r2, [r1]
 80082e4:	613b      	str	r3, [r7, #16]
   return(result);
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1e6      	bne.n	80082ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2220      	movs	r2, #32
 80082f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008300:	bf00      	nop
 8008302:	3754      	adds	r7, #84	@ 0x54
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	effffffe 	.word	0xeffffffe

08008310 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800831e:	2b01      	cmp	r3, #1
 8008320:	d101      	bne.n	8008326 <HAL_UARTEx_DisableFifoMode+0x16>
 8008322:	2302      	movs	r3, #2
 8008324:	e027      	b.n	8008376 <HAL_UARTEx_DisableFifoMode+0x66>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2224      	movs	r2, #36	@ 0x24
 8008332:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 0201 	bic.w	r2, r2, #1
 800834c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008354:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2220      	movs	r2, #32
 8008368:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b084      	sub	sp, #16
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008392:	2b01      	cmp	r3, #1
 8008394:	d101      	bne.n	800839a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008396:	2302      	movs	r3, #2
 8008398:	e02d      	b.n	80083f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2224      	movs	r2, #36	@ 0x24
 80083a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f022 0201 	bic.w	r2, r2, #1
 80083c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	430a      	orrs	r2, r1
 80083d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f850 	bl	800847c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2220      	movs	r2, #32
 80083e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b084      	sub	sp, #16
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800840e:	2b01      	cmp	r3, #1
 8008410:	d101      	bne.n	8008416 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008412:	2302      	movs	r3, #2
 8008414:	e02d      	b.n	8008472 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2224      	movs	r2, #36	@ 0x24
 8008422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f022 0201 	bic.w	r2, r2, #1
 800843c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f812 	bl	800847c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2220      	movs	r2, #32
 8008464:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
	...

0800847c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008488:	2b00      	cmp	r3, #0
 800848a:	d108      	bne.n	800849e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800849c:	e031      	b.n	8008502 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800849e:	2310      	movs	r3, #16
 80084a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80084a2:	2310      	movs	r3, #16
 80084a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	0e5b      	lsrs	r3, r3, #25
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	f003 0307 	and.w	r3, r3, #7
 80084b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	0f5b      	lsrs	r3, r3, #29
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	f003 0307 	and.w	r3, r3, #7
 80084c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084c6:	7bbb      	ldrb	r3, [r7, #14]
 80084c8:	7b3a      	ldrb	r2, [r7, #12]
 80084ca:	4911      	ldr	r1, [pc, #68]	@ (8008510 <UARTEx_SetNbDataToProcess+0x94>)
 80084cc:	5c8a      	ldrb	r2, [r1, r2]
 80084ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084d2:	7b3a      	ldrb	r2, [r7, #12]
 80084d4:	490f      	ldr	r1, [pc, #60]	@ (8008514 <UARTEx_SetNbDataToProcess+0x98>)
 80084d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80084dc:	b29a      	uxth	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	7b7a      	ldrb	r2, [r7, #13]
 80084e8:	4909      	ldr	r1, [pc, #36]	@ (8008510 <UARTEx_SetNbDataToProcess+0x94>)
 80084ea:	5c8a      	ldrb	r2, [r1, r2]
 80084ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084f0:	7b7a      	ldrb	r2, [r7, #13]
 80084f2:	4908      	ldr	r1, [pc, #32]	@ (8008514 <UARTEx_SetNbDataToProcess+0x98>)
 80084f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008502:	bf00      	nop
 8008504:	3714      	adds	r7, #20
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	080085b8 	.word	0x080085b8
 8008514:	080085c0 	.word	0x080085c0

08008518 <memset>:
 8008518:	4402      	add	r2, r0
 800851a:	4603      	mov	r3, r0
 800851c:	4293      	cmp	r3, r2
 800851e:	d100      	bne.n	8008522 <memset+0xa>
 8008520:	4770      	bx	lr
 8008522:	f803 1b01 	strb.w	r1, [r3], #1
 8008526:	e7f9      	b.n	800851c <memset+0x4>

08008528 <__libc_init_array>:
 8008528:	b570      	push	{r4, r5, r6, lr}
 800852a:	4d0d      	ldr	r5, [pc, #52]	@ (8008560 <__libc_init_array+0x38>)
 800852c:	4c0d      	ldr	r4, [pc, #52]	@ (8008564 <__libc_init_array+0x3c>)
 800852e:	1b64      	subs	r4, r4, r5
 8008530:	10a4      	asrs	r4, r4, #2
 8008532:	2600      	movs	r6, #0
 8008534:	42a6      	cmp	r6, r4
 8008536:	d109      	bne.n	800854c <__libc_init_array+0x24>
 8008538:	4d0b      	ldr	r5, [pc, #44]	@ (8008568 <__libc_init_array+0x40>)
 800853a:	4c0c      	ldr	r4, [pc, #48]	@ (800856c <__libc_init_array+0x44>)
 800853c:	f000 f818 	bl	8008570 <_init>
 8008540:	1b64      	subs	r4, r4, r5
 8008542:	10a4      	asrs	r4, r4, #2
 8008544:	2600      	movs	r6, #0
 8008546:	42a6      	cmp	r6, r4
 8008548:	d105      	bne.n	8008556 <__libc_init_array+0x2e>
 800854a:	bd70      	pop	{r4, r5, r6, pc}
 800854c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008550:	4798      	blx	r3
 8008552:	3601      	adds	r6, #1
 8008554:	e7ee      	b.n	8008534 <__libc_init_array+0xc>
 8008556:	f855 3b04 	ldr.w	r3, [r5], #4
 800855a:	4798      	blx	r3
 800855c:	3601      	adds	r6, #1
 800855e:	e7f2      	b.n	8008546 <__libc_init_array+0x1e>
 8008560:	080085d0 	.word	0x080085d0
 8008564:	080085d0 	.word	0x080085d0
 8008568:	080085d0 	.word	0x080085d0
 800856c:	080085d4 	.word	0x080085d4

08008570 <_init>:
 8008570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008572:	bf00      	nop
 8008574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008576:	bc08      	pop	{r3}
 8008578:	469e      	mov	lr, r3
 800857a:	4770      	bx	lr

0800857c <_fini>:
 800857c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857e:	bf00      	nop
 8008580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008582:	bc08      	pop	{r3}
 8008584:	469e      	mov	lr, r3
 8008586:	4770      	bx	lr
