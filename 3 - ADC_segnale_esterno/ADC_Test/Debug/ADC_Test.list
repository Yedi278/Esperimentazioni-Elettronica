
ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009608  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080098a0  080098a0  0000a8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080098d8  080098d8  0000a8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080098e0  080098e0  0000a8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080098e4  080098e4  0000a8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  080098e8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e24  24000014  080098fc  0000b014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000e38  080098fc  0000be38  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d278  00000000  00000000  0000b042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000037fe  00000000  00000000  000282ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001600  00000000  00000000  0002bab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001110  00000000  00000000  0002d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a730  00000000  00000000  0002e1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001edfe  00000000  00000000  000688f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178083  00000000  00000000  000876f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ff779  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d88  00000000  00000000  001ff7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000089  00000000  00000000  00205544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009888 	.word	0x08009888

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	08009888 	.word	0x08009888

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADC_custom_init>:

uint16_t data_buffer[1000] = {0};
uint16_t data_buffer_index = 0;
uint16_t data_buffer_size = 1000UL;

void ADC_custom_init(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

	ADC3->CR &= ~ADC_CR_ADSTART;
 80005cc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80005d0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80005d4:	689a      	ldr	r2, [r3, #8]
 80005d6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80005da:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80005de:	f022 0204 	bic.w	r2, r2, #4
 80005e2:	609a      	str	r2, [r3, #8]

	ADC3->SQR1 = 0; // per azzerare la configurazione dell'ide
 80005e4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80005e8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80005ec:	2200      	movs	r2, #0
 80005ee:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere 0=1
 80005f0:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 80005f4:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80005f8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80005fc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000600:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8000602:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_SQ1_Pos);
 8000604:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8000608:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 800060c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000610:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000614:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8000616:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->PCSEL = 0;
 8000618:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800061c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000620:	2200      	movs	r2, #0
 8000622:	61da      	str	r2, [r3, #28]
	ADC3->PCSEL |= (1 << (ADC_PCSEL_PCSEL_Pos + 0)); // Dichiaro quali canali leggere : 18 e 19
 8000624:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000628:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800062c:	69da      	ldr	r2, [r3, #28]
 800062e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000632:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000636:	f042 0201 	orr.w	r2, r2, #1
 800063a:	61da      	str	r2, [r3, #28]

	/* Calibrazione */
	ADC3->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 800063c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000640:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000644:	689a      	ldr	r2, [r3, #8]
 8000646:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800064a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800064e:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8000652:	609a      	str	r2, [r3, #8]
	ADC3->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 8000654:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000658:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800065c:	689a      	ldr	r2, [r3, #8]
 800065e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000662:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000666:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800066a:	609a      	str	r2, [r3, #8]
	ADC3->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 800066c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000670:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000674:	689a      	ldr	r2, [r3, #8]
 8000676:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800067a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800067e:	f022 0201 	bic.w	r2, r2, #1
 8000682:	609a      	str	r2, [r3, #8]
	ADC3->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 8000684:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000688:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800068c:	689a      	ldr	r2, [r3, #8]
 800068e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000692:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000696:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800069a:	609a      	str	r2, [r3, #8]


	while((ADC3->CR & ADC_CR_ADCAL) != 0){}
 800069c:	bf00      	nop
 800069e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006a2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	dbf8      	blt.n	800069e <ADC_custom_init+0xd6>
	// FIne calibrazione

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 80006ac:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006b0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006ba:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80006be:	f042 0201 	orr.w	r2, r2, #1
 80006c2:	601a      	str	r2, [r3, #0]
	ADC3->CR |= ADC_CR_ADEN;		// Accendo l' ADC
 80006c4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006c8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80006cc:	689a      	ldr	r2, [r3, #8]
 80006ce:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006d2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80006d6:	f042 0201 	orr.w	r2, r2, #1
 80006da:	609a      	str	r2, [r3, #8]

	while((ADC3->ISR & ADC_ISR_ADRDY) != 0){}
 80006dc:	bf00      	nop
 80006de:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006e2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1f6      	bne.n	80006de <ADC_custom_init+0x116>

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 80006f0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006f4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006fe:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000702:	f042 0201 	orr.w	r2, r2, #1
 8000706:	601a      	str	r2, [r3, #0]
	/* ADC INIZIALIZZATO */

	//ADC3->SMPR2 |= (7 << ADC_SMPR2_SMP18_Pos);	// Indico Il tempo prima della misura

	// Settaggio Timer
	TIM6->PSC = 48;
 8000708:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070c:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000710:	2230      	movs	r2, #48	@ 0x30
 8000712:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 100;
 8000714:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000718:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800071c:	2264      	movs	r2, #100	@ 0x64
 800071e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CNT = 0;
 8000720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000724:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->DIER &= ~TIM_DIER_UIE;
 800072c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000730:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000734:	68da      	ldr	r2, [r3, #12]
 8000736:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800073e:	f022 0201 	bic.w	r2, r2, #1
 8000742:	60da      	str	r2, [r3, #12]
	TIM6->CR1 |= TIM_CR1_CEN;
 8000744:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000748:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000752:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000756:	f042 0201 	orr.w	r2, r2, #1
 800075a:	601a      	str	r2, [r3, #0]

	ADC3->IER |= ADC_IER_EOCIE;					// Abilito l'interrupt di fine conversione
 800075c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000760:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800076a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800076e:	f042 0204 	orr.w	r2, r2, #4
 8000772:	605a      	str	r2, [r3, #4]
	ADC3->CR  |= ADC_CR_ADSTART;				// Inizio le misurazioni
 8000774:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000778:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800077c:	689a      	ldr	r2, [r3, #8]
 800077e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000782:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000786:	f042 0204 	orr.w	r2, r2, #4
 800078a:	609a      	str	r2, [r3, #8]
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <ADC_custom_interrupt>:



void ADC_custom_interrupt(){
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

	if(ADC3->ISR & ADC_ISR_EOC){
 800079a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800079e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d047      	beq.n	800083c <ADC_custom_interrupt+0xa6>
		if(data_buffer_index < data_buffer_size){
 80007ac:	f640 0300 	movw	r3, #2048	@ 0x800
 80007b0:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80007b4:	881a      	ldrh	r2, [r3, #0]
 80007b6:	f240 0300 	movw	r3, #0
 80007ba:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d21e      	bcs.n	8000802 <ADC_custom_interrupt+0x6c>

			data_buffer[data_buffer_index] = ADC3->DR;
 80007c4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80007c8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80007cc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80007ce:	f640 0300 	movw	r3, #2048	@ 0x800
 80007d2:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	b289      	uxth	r1, r1
 80007dc:	f240 0330 	movw	r3, #48	@ 0x30
 80007e0:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80007e4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			ADC3->ISR |= ADC_ISR_EOC;
 80007e8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80007ec:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80007f6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80007fa:	f042 0204 	orr.w	r2, r2, #4
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	e010      	b.n	8000824 <ADC_custom_interrupt+0x8e>
		}
		else{
			data_buffer_index=0;
 8000802:	f640 0300 	movw	r3, #2048	@ 0x800
 8000806:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800080a:	2200      	movs	r2, #0
 800080c:	801a      	strh	r2, [r3, #0]
			data_buffer[0] = ADC3->DR;
 800080e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000812:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000818:	b29a      	uxth	r2, r3
 800081a:	f240 0330 	movw	r3, #48	@ 0x30
 800081e:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000822:	801a      	strh	r2, [r3, #0]
		}
		++data_buffer_index;
 8000824:	f640 0300 	movw	r3, #2048	@ 0x800
 8000828:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	3301      	adds	r3, #1
 8000830:	b29a      	uxth	r2, r3
 8000832:	f640 0300 	movw	r3, #2048	@ 0x800
 8000836:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800083a:	801a      	strh	r2, [r3, #0]
	}
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <init_usart3>:
#include "Custom_usart.h"

unsigned char* data_buffer_char;
uint16_t tx_buffer_index=0;

void init_usart3(){
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

    USART3->CR1 |= USART_CR1_TE;
 800084a:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800084e:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000858:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800085c:	f042 0208 	orr.w	r2, r2, #8
 8000860:	601a      	str	r2, [r3, #0]
    USART3->CR1 |= USART_CR1_RE;
 8000862:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000866:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000870:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000874:	f042 0204 	orr.w	r2, r2, #4
 8000878:	601a      	str	r2, [r3, #0]

    USART3->CR1 &= ~USART_CR1_TXEIE;
 800087a:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800087e:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000888:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800088c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000890:	601a      	str	r2, [r3, #0]
    USART3->CR1 |= USART_CR1_RXNEIE;
 8000892:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000896:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80008a0:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80008a4:	f042 0220 	orr.w	r2, r2, #32
 80008a8:	601a      	str	r2, [r3, #0]

    USART3->CR1 |= USART_CR1_UE;
 80008aa:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80008ae:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80008b8:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80008bc:	f042 0201 	orr.w	r2, r2, #1
 80008c0:	601a      	str	r2, [r3, #0]
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <usart3_interrupt>:

void usart3_interrupt(){
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0

	if(USART3->ISR & USART_ISR_RXNE_RXFNE){
 80008d2:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80008d6:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80008da:	69db      	ldr	r3, [r3, #28]
 80008dc:	f003 0320 	and.w	r3, r3, #32
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d044      	beq.n	800096e <usart3_interrupt+0xa2>
		if(USART3->ISR & USART_ISR_TXE_TXFNF){
 80008e4:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80008e8:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d03b      	beq.n	800096e <usart3_interrupt+0xa2>

			char received_data = USART3->RDR;
 80008f6:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80008fa:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80008fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000900:	71fb      	strb	r3, [r7, #7]

			USART3->CR1 &= ~USART_CR1_TXEIE;
 8000902:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000906:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000910:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000914:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000918:	601a      	str	r2, [r3, #0]

			if(received_data=='e'){
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b65      	cmp	r3, #101	@ 0x65
 800091e:	d126      	bne.n	800096e <usart3_interrupt+0xa2>

				TIM6->CR1 &= ~TIM_CR1_CEN;
 8000920:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000924:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800092e:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000932:	f022 0201 	bic.w	r2, r2, #1
 8000936:	601a      	str	r2, [r3, #0]
				tx_buffer_index=0;
 8000938:	f640 0308 	movw	r3, #2056	@ 0x808
 800093c:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000940:	2200      	movs	r2, #0
 8000942:	801a      	strh	r2, [r3, #0]
				data_buffer_char = (unsigned char*)data_buffer;
 8000944:	f640 0304 	movw	r3, #2052	@ 0x804
 8000948:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800094c:	f240 0230 	movw	r2, #48	@ 0x30
 8000950:	f2c2 4200 	movt	r2, #9216	@ 0x2400
 8000954:	601a      	str	r2, [r3, #0]

				USART3->CR1 |= USART_CR1_TXEIE;	// abilito interrupt di fine trasmissione
 8000956:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800095a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000964:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000968:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800096c:	601a      	str	r2, [r3, #0]
			}
		}
	}

	if((USART3->ISR & USART_ISR_TXE_TXFNF) && (USART3->CR1 & USART_CR1_TXEIE) && !(USART3->ISR & USART_ISR_RXNE_RXFNE)){
 800096e:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000972:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000976:	69db      	ldr	r3, [r3, #28]
 8000978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800097c:	2b00      	cmp	r3, #0
 800097e:	d05b      	beq.n	8000a38 <usart3_interrupt+0x16c>
 8000980:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000984:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800098e:	2b00      	cmp	r3, #0
 8000990:	d052      	beq.n	8000a38 <usart3_interrupt+0x16c>
 8000992:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000996:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800099a:	69db      	ldr	r3, [r3, #28]
 800099c:	f003 0320 	and.w	r3, r3, #32
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d149      	bne.n	8000a38 <usart3_interrupt+0x16c>

		if( tx_buffer_index < data_buffer_size * sizeof(data_buffer[0])){
 80009a4:	f640 0308 	movw	r3, #2056	@ 0x808
 80009a8:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	f240 0300 	movw	r3, #0
 80009b4:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	429a      	cmp	r2, r3
 80009be:	d21d      	bcs.n	80009fc <usart3_interrupt+0x130>

			USART3->TDR = data_buffer_char[tx_buffer_index];
 80009c0:	f640 0304 	movw	r3, #2052	@ 0x804
 80009c4:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	f640 0308 	movw	r3, #2056	@ 0x808
 80009ce:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	4413      	add	r3, r2
 80009d6:	781a      	ldrb	r2, [r3, #0]
 80009d8:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80009dc:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80009e0:	629a      	str	r2, [r3, #40]	@ 0x28
			++tx_buffer_index;
 80009e2:	f640 0308 	movw	r3, #2056	@ 0x808
 80009e6:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	f640 0308 	movw	r3, #2056	@ 0x808
 80009f4:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80009f8:	801a      	strh	r2, [r3, #0]
 80009fa:	e01d      	b.n	8000a38 <usart3_interrupt+0x16c>
		}
		else{

			USART3->CR1 &= ~USART_CR1_TXEIE_TXFNFIE;
 80009fc:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000a00:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000a0a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000a0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000a12:	601a      	str	r2, [r3, #0]
			tx_buffer_index=0;
 8000a14:	f640 0308 	movw	r3, #2056	@ 0x808
 8000a18:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	801a      	strh	r2, [r3, #0]
			TIM6->CR1 |= TIM_CR1_CEN;
 8000a20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a24:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a2e:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000a32:	f042 0201 	orr.w	r2, r2, #1
 8000a36:	601a      	str	r2, [r3, #0]
		}
	}

	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 8000a38:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000a3c:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000a40:	6a1a      	ldr	r2, [r3, #32]
 8000a42:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000a46:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000a4a:	f042 0208 	orr.w	r2, r2, #8
 8000a4e:	621a      	str	r2, [r3, #32]
	USART3->ICR |= USART_ICR_TCCF;  //Azzeramento flag interrupt trasmissione
 8000a50:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000a54:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000a58:	6a1a      	ldr	r2, [r3, #32]
 8000a5a:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000a5e:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000a62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000a66:	621a      	str	r2, [r3, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 8000a68:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000a6c:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000a70:	699a      	ldr	r2, [r3, #24]
 8000a72:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8000a76:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000a7a:	f042 0208 	orr.w	r2, r2, #8
 8000a7e:	619a      	str	r2, [r3, #24]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
 8000aa0:	615a      	str	r2, [r3, #20]
 8000aa2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000aa4:	f640 020c 	movw	r2, #2060	@ 0x80c
 8000aa8:	f2c2 4200 	movt	r2, #9216	@ 0x2400
 8000aac:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000ab0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000ab4:	6013      	str	r3, [r2, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ab6:	f640 030c 	movw	r3, #2060	@ 0x80c
 8000aba:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ac2:	f640 030c 	movw	r3, #2060	@ 0x80c
 8000ac6:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ace:	f640 030c 	movw	r3, #2060	@ 0x80c
 8000ad2:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ada:	f640 030c 	movw	r3, #2060	@ 0x80c
 8000ade:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ae6:	f640 030c 	movw	r3, #2060	@ 0x80c
 8000aea:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000aee:	2200      	movs	r2, #0
 8000af0:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000af2:	f640 030c 	movw	r3, #2060	@ 0x80c
 8000af6:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000afa:	2201      	movs	r2, #1
 8000afc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000afe:	f640 030c 	movw	r3, #2060	@ 0x80c
 8000b02:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000b06:	2200      	movs	r2, #0
 8000b08:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000b0a:	f640 030c 	movw	r3, #2060	@ 0x80c
 8000b0e:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000b12:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000b16:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b18:	f640 030c 	movw	r3, #2060	@ 0x80c
 8000b1c:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000b20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b24:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b26:	f640 030c 	movw	r3, #2060	@ 0x80c
 8000b2a:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000b2e:	2200      	movs	r2, #0
 8000b30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b32:	f640 030c 	movw	r3, #2060	@ 0x80c
 8000b36:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b3e:	f640 030c 	movw	r3, #2060	@ 0x80c
 8000b42:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000b46:	2200      	movs	r2, #0
 8000b48:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000b4a:	f640 030c 	movw	r3, #2060	@ 0x80c
 8000b4e:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000b58:	f640 030c 	movw	r3, #2060	@ 0x80c
 8000b5c:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000b60:	2201      	movs	r2, #1
 8000b62:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b64:	f640 000c 	movw	r0, #2060	@ 0x80c
 8000b68:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 8000b6c:	f001 f961 	bl	8001e32 <HAL_ADC_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_ADC3_Init+0xee>
  {
    Error_Handler();
 8000b76:	f000 fb12 	bl	800119e <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000b7a:	f640 030c 	movw	r3, #2060	@ 0x80c
 8000b7e:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b86:	f640 000c 	movw	r0, #2060	@ 0x80c
 8000b8a:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 8000b8e:	f001 f950 	bl	8001e32 <HAL_ADC_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_ADC3_Init+0x110>
  {
    Error_Handler();
 8000b98:	f000 fb01 	bl	800119e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ba0:	2306      	movs	r3, #6
 8000ba2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ba8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000bac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f640 000c 	movw	r0, #2060	@ 0x80c
 8000bc2:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 8000bc6:	f001 faea 	bl	800219e <HAL_ADC_ConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_ADC3_Init+0x148>
  {
    Error_Handler();
 8000bd0:	f000 fae5 	bl	800119e <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	3720      	adds	r7, #32
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b0b4      	sub	sp, #208	@ 0xd0
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	22c0      	movs	r2, #192	@ 0xc0
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f008 fe1e 	bl	800982e <memset>
  if(adcHandle->Instance==ADC3)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000bfa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d163      	bne.n	8000cca <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c02:	f04f 0200 	mov.w	r2, #0
 8000c06:	f2c0 0208 	movt	r2, #8
 8000c0a:	f04f 0300 	mov.w	r3, #0
 8000c0e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000c16:	2312      	movs	r3, #18
 8000c18:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c22:	2302      	movs	r3, #2
 8000c24:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c26:	23c0      	movs	r3, #192	@ 0xc0
 8000c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000c2a:	2320      	movs	r3, #32
 8000c2c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000c2e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000c32:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f003 fe34 	bl	80048ac <HAL_RCCEx_PeriphCLKConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000c4a:	f000 faa8 	bl	800119e <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000c4e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000c52:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000c56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c5a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000c5e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000c62:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000c66:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000c6a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000c6e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000c82:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000c86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000c8a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000c8e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000c92:	f042 0204 	orr.w	r2, r2, #4
 8000c96:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000c9a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000c9e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000cae:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8000cb2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000cb6:	f000 ff14 	bl	8001ae2 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	207f      	movs	r0, #127	@ 0x7f
 8000cc0:	f002 f802 	bl	8002cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000cc4:	207f      	movs	r0, #127	@ 0x7f
 8000cc6:	f002 f819 	bl	8002cfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	37d0      	adds	r7, #208	@ 0xd0
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b08c      	sub	sp, #48	@ 0x30
 8000cd6:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000cec:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000cf0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000cf4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000cf8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000cfc:	f042 0204 	orr.w	r2, r2, #4
 8000d00:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000d04:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d08:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
 8000d16:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d18:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d1c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d20:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000d24:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d28:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d2c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d30:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000d34:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d38:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d4c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000d54:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d58:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d5c:	f042 0201 	orr.w	r2, r2, #1
 8000d60:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000d64:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d68:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d7c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d80:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000d84:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d88:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d8c:	f042 0202 	orr.w	r2, r2, #2
 8000d90:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000d94:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000d98:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000dac:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000db0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000db4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000db8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000dbc:	f042 0208 	orr.w	r2, r2, #8
 8000dc0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000dc4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000dc8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dd8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000ddc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000de0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000de4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000de8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000dec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000df0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000df4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000df8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e08:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000e0c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000e10:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000e14:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000e18:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000e1c:	f042 0210 	orr.w	r2, r2, #16
 8000e20:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000e24:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8000e28:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e30:	f003 0310 	and.w	r3, r3, #16
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000e3e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000e42:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000e46:	f002 f934 	bl	80030b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e50:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8000e54:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000e58:	f002 f92b 	bl	80030b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2102      	movs	r1, #2
 8000e60:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000e64:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000e68:	f002 f923 	bl	80030b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000e84:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000e88:	f001 ff52 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e8c:	2332      	movs	r3, #50	@ 0x32
 8000e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e9c:	230b      	movs	r3, #11
 8000e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000eaa:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000eae:	f001 ff3f 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000eb2:	2386      	movs	r3, #134	@ 0x86
 8000eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec2:	230b      	movs	r3, #11
 8000ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000ed2:	f001 ff2d 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ed6:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000ef2:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000ef6:	f001 ff1b 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000efa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f0c:	230b      	movs	r3, #11
 8000f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000f1a:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000f1e:	f001 ff07 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000f22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8000f3e:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000f42:	f001 fef5 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000f46:	2380      	movs	r3, #128	@ 0x80
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8000f5e:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000f62:	f001 fee5 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f66:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f78:	230b      	movs	r3, #11
 8000f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8000f86:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000f8a:	f001 fed1 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000fa8:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8000fac:	f001 fec0 	bl	8002d30 <HAL_GPIO_Init>

}
 8000fb0:	bf00      	nop
 8000fb2:	3730      	adds	r7, #48	@ 0x30
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbc:	f000 fcbb 	bl	8001936 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc0:	f000 f810 	bl	8000fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc4:	f7ff fe85 	bl	8000cd2 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000fc8:	f7ff fd60 	bl	8000a8c <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8000fcc:	f000 faac 	bl	8001528 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fd0:	f000 fba5 	bl	800171e <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8000fd4:	f000 fa2e 	bl	8001434 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */


  init_usart3();		// inizializzo l'usart
 8000fd8:	f7ff fc35 	bl	8000846 <init_usart3>

  ADC_custom_init();	// Inizializzo la periferica
 8000fdc:	f7ff faf4 	bl	80005c8 <ADC_custom_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <main+0x28>

08000fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b09e      	sub	sp, #120	@ 0x78
 8000fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fee:	224c      	movs	r2, #76	@ 0x4c
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f008 fc1b 	bl	800982e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f008 fc14 	bl	800982e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001006:	2002      	movs	r0, #2
 8001008:	f002 f99c 	bl	8003344 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001014:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8001018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800101a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800101e:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8001022:	f022 0201 	bic.w	r2, r2, #1
 8001026:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001028:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800102c:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8001030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800103c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001040:	699a      	ldr	r2, [r3, #24]
 8001042:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8001046:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800104a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800104e:	619a      	str	r2, [r3, #24]
 8001050:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8001054:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001062:	bf00      	nop
 8001064:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8001068:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001076:	d1f5      	bne.n	8001064 <SystemClock_Config+0x80>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001078:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800107c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001080:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8001084:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001088:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800108c:	f042 0202 	orr.w	r2, r2, #2
 8001090:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8001094:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001098:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800109c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80010a8:	2300      	movs	r3, #0
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80010b0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80010b4:	699a      	ldr	r2, [r3, #24]
 80010b6:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80010ba:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80010be:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80010c2:	619a      	str	r2, [r3, #24]
 80010c4:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80010c8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010d8:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 80010dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010e2:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 80010e6:	f042 0201 	orr.w	r2, r2, #1
 80010ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010f0:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 80010f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010fe:	bf00      	nop
 8001100:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8001104:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800110e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001112:	d1f5      	bne.n	8001100 <SystemClock_Config+0x11c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001114:	2321      	movs	r3, #33	@ 0x21
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001118:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800111c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800111e:	2301      	movs	r3, #1
 8001120:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001122:	2302      	movs	r3, #2
 8001124:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001126:	2302      	movs	r3, #2
 8001128:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 800112a:	2301      	movs	r3, #1
 800112c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 800112e:	2378      	movs	r3, #120	@ 0x78
 8001130:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001132:	2302      	movs	r3, #2
 8001134:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001136:	2303      	movs	r3, #3
 8001138:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800113a:	2302      	movs	r3, #2
 800113c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800113e:	230c      	movs	r3, #12
 8001140:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001142:	2300      	movs	r3, #0
 8001144:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800114e:	4618      	mov	r0, r3
 8001150:	f002 f951 	bl	80033f6 <HAL_RCC_OscConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x17a>
  {
    Error_Handler();
 800115a:	f000 f820 	bl	800119e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115e:	233f      	movs	r3, #63	@ 0x3f
 8001160:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001162:	2303      	movs	r3, #3
 8001164:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800116a:	2308      	movs	r3, #8
 800116c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800116e:	2340      	movs	r3, #64	@ 0x40
 8001170:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001172:	2340      	movs	r3, #64	@ 0x40
 8001174:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001176:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800117c:	2340      	movs	r3, #64	@ 0x40
 800117e:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	2104      	movs	r1, #4
 8001186:	4618      	mov	r0, r3
 8001188:	f002 ff1b 	bl	8003fc2 <HAL_RCC_ClockConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0x1b2>
  {
    Error_Handler();
 8001192:	f000 f804 	bl	800119e <Error_Handler>
  }
}
 8001196:	bf00      	nop
 8001198:	3778      	adds	r7, #120	@ 0x78
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a2:	b672      	cpsid	i
}
 80011a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a6:	bf00      	nop
 80011a8:	e7fd      	b.n	80011a6 <Error_Handler+0x8>

080011aa <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80011b4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80011b8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80011bc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80011c0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80011c4:	f042 0202 	orr.w	r2, r2, #2
 80011c8:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 80011cc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80011d0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80011d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <NMI_Handler+0x4>

080011f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <MemManage_Handler+0x4>

08001204 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <UsageFault_Handler+0x4>

08001214 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001242:	f000 fbf9 	bl	8001a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}

0800124a <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	usart3_interrupt();
 800124e:	f7ff fb3d 	bl	80008cc <usart3_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}

08001256 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800125a:	f640 0070 	movw	r0, #2160	@ 0x870
 800125e:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 8001262:	f006 fbf6 	bl	8007a52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}

0800126a <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	ADC_custom_interrupt();
 800126e:	f7ff fa92 	bl	8000796 <ADC_custom_interrupt>
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}
  /* USER CODE END ADC3_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}

08001276 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800127a:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 800127e:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8001282:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001286:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 800128a:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 800128e:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8001292:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001296:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800129a:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 030f 	and.w	r3, r3, #15
 80012a4:	2b06      	cmp	r3, #6
 80012a6:	d80d      	bhi.n	80012c4 <SystemInit+0x4e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012ac:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 020f 	bic.w	r2, r3, #15
 80012b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012ba:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 80012be:	f042 0207 	orr.w	r2, r2, #7
 80012c2:	601a      	str	r2, [r3, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012c4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80012c8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80012d2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80012d6:	f042 0201 	orr.w	r2, r2, #1
 80012da:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012dc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80012e0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012e8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80012ec:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80012f0:	6819      	ldr	r1, [r3, #0]
 80012f2:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80012f6:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80012fa:	f64e 537f 	movw	r3, #60799	@ 0xed7f
 80012fe:	f6ce 23f6 	movt	r3, #60150	@ 0xeaf6
 8001302:	400b      	ands	r3, r1
 8001304:	6013      	str	r3, [r2, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001306:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800130a:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0308 	and.w	r3, r3, #8
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00d      	beq.n	8001334 <SystemInit+0xbe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001318:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800131c:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f023 020f 	bic.w	r2, r3, #15
 8001326:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800132a:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 800132e:	f042 0207 	orr.w	r2, r2, #7
 8001332:	601a      	str	r2, [r3, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001334:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001338:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001340:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001344:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001348:	2200      	movs	r2, #0
 800134a:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800134c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001350:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001358:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800135c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001360:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001364:	f2c0 2202 	movt	r2, #514	@ 0x202
 8001368:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800136a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800136e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001372:	2200      	movs	r2, #0
 8001374:	f2c0 12ff 	movt	r2, #511	@ 0x1ff
 8001378:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800137a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800137e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001382:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8001386:	f2c0 1201 	movt	r2, #257	@ 0x101
 800138a:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800138c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001390:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001394:	2200      	movs	r2, #0
 8001396:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001398:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800139c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80013a0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80013a4:	f2c0 1201 	movt	r2, #257	@ 0x101
 80013a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013aa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80013ae:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80013b2:	2200      	movs	r2, #0
 80013b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013b6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80013ba:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80013be:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80013c2:	f2c0 1201 	movt	r2, #257	@ 0x101
 80013c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013c8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80013cc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80013d0:	2200      	movs	r2, #0
 80013d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013d4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80013d8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80013e2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80013e6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80013ea:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013ec:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80013f0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80013f4:	2200      	movs	r2, #0
 80013f6:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013fc:	f6c5 4300 	movt	r3, #23552	@ 0x5c00
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	2300      	movs	r3, #0
 8001404:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 8001408:	4013      	ands	r3, r2
 800140a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800140e:	d205      	bcs.n	800141c <SystemInit+0x1a6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001410:	f248 1308 	movw	r3, #33032	@ 0x8108
 8001414:	f2c5 1300 	movt	r3, #20736	@ 0x5100
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800141c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001420:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 8001424:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001428:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001444:	f640 0270 	movw	r2, #2160	@ 0x870
 8001448:	f2c2 4200 	movt	r2, #9216	@ 0x2400
 800144c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001450:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8001454:	6013      	str	r3, [r2, #0]
  htim6.Init.Prescaler = 0;
 8001456:	f640 0370 	movw	r3, #2160	@ 0x870
 800145a:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800145e:	2200      	movs	r2, #0
 8001460:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001462:	f640 0370 	movw	r3, #2160	@ 0x870
 8001466:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800146e:	f640 0370 	movw	r3, #2160	@ 0x870
 8001472:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001476:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800147a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147c:	f640 0370 	movw	r3, #2160	@ 0x870
 8001480:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001488:	f640 0070 	movw	r0, #2160	@ 0x870
 800148c:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 8001490:	f006 fa88 	bl	80079a4 <HAL_TIM_Base_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM6_Init+0x6a>
  {
    Error_Handler();
 800149a:	f7ff fe80 	bl	800119e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800149e:	2320      	movs	r3, #32
 80014a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	4619      	mov	r1, r3
 80014aa:	f640 0070 	movw	r0, #2160	@ 0x870
 80014ae:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 80014b2:	f006 fccf 	bl	8007e54 <HAL_TIMEx_MasterConfigSynchronization>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM6_Init+0x8c>
  {
    Error_Handler();
 80014bc:	f7ff fe6f 	bl	800119e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d8:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80014dc:	429a      	cmp	r2, r3
 80014de:	d11f      	bne.n	8001520 <HAL_TIM_Base_MspInit+0x58>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014e0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80014e4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80014e8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80014ec:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80014f0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80014f4:	f042 0210 	orr.w	r2, r2, #16
 80014f8:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80014fc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001500:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001504:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2036      	movs	r0, #54	@ 0x36
 8001516:	f001 fbd7 	bl	8002cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800151a:	2036      	movs	r0, #54	@ 0x36
 800151c:	f001 fbee 	bl	8002cfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800152c:	f640 02bc 	movw	r2, #2236	@ 0x8bc
 8001530:	f2c2 4200 	movt	r2, #9216	@ 0x2400
 8001534:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8001538:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800153c:	6013      	str	r3, [r2, #0]
  huart3.Init.BaudRate = 9600;
 800153e:	f640 03bc 	movw	r3, #2236	@ 0x8bc
 8001542:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001546:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800154a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800154c:	f640 03bc 	movw	r3, #2236	@ 0x8bc
 8001550:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001558:	f640 03bc 	movw	r3, #2236	@ 0x8bc
 800155c:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001564:	f640 03bc 	movw	r3, #2236	@ 0x8bc
 8001568:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001570:	f640 03bc 	movw	r3, #2236	@ 0x8bc
 8001574:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001578:	220c      	movs	r2, #12
 800157a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157c:	f640 03bc 	movw	r3, #2236	@ 0x8bc
 8001580:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001588:	f640 03bc 	movw	r3, #2236	@ 0x8bc
 800158c:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001590:	2200      	movs	r2, #0
 8001592:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001594:	f640 03bc 	movw	r3, #2236	@ 0x8bc
 8001598:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015a0:	f640 03bc 	movw	r3, #2236	@ 0x8bc
 80015a4:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80015a8:	2200      	movs	r2, #0
 80015aa:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ac:	f640 03bc 	movw	r3, #2236	@ 0x8bc
 80015b0:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80015b4:	2200      	movs	r2, #0
 80015b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015b8:	f640 00bc 	movw	r0, #2236	@ 0x8bc
 80015bc:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 80015c0:	f006 fcff 	bl	8007fc2 <HAL_UART_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_USART3_UART_Init+0xa6>
  {
    Error_Handler();
 80015ca:	f7ff fde8 	bl	800119e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ce:	2100      	movs	r1, #0
 80015d0:	f640 00bc 	movw	r0, #2236	@ 0x8bc
 80015d4:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 80015d8:	f007 fd51 	bl	800907e <HAL_UARTEx_SetTxFifoThreshold>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USART3_UART_Init+0xbe>
  {
    Error_Handler();
 80015e2:	f7ff fddc 	bl	800119e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e6:	2100      	movs	r1, #0
 80015e8:	f640 00bc 	movw	r0, #2236	@ 0x8bc
 80015ec:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 80015f0:	f007 fd83 	bl	80090fa <HAL_UARTEx_SetRxFifoThreshold>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_USART3_UART_Init+0xd6>
  {
    Error_Handler();
 80015fa:	f7ff fdd0 	bl	800119e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015fe:	f640 00bc 	movw	r0, #2236	@ 0x8bc
 8001602:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 8001606:	f007 fd01 	bl	800900c <HAL_UARTEx_DisableFifoMode>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_USART3_UART_Init+0xec>
  {
    Error_Handler();
 8001610:	f7ff fdc5 	bl	800119e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b0ba      	sub	sp, #232	@ 0xe8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	22c0      	movs	r2, #192	@ 0xc0
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f008 f8f8 	bl	800982e <memset>
  if(uartHandle->Instance==USART3)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8001646:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800164a:	429a      	cmp	r2, r3
 800164c:	d163      	bne.n	8001716 <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800164e:	f04f 0202 	mov.w	r2, #2
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	4618      	mov	r0, r3
 8001666:	f003 f921 	bl	80048ac <HAL_RCCEx_PeriphCLKConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <HAL_UART_MspInit+0x5c>
    {
      Error_Handler();
 8001670:	f7ff fd95 	bl	800119e <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001674:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001678:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800167c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001680:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001684:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001688:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800168c:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001690:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001694:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800169c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80016a8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80016ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80016b0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80016b4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80016b8:	f042 0208 	orr.w	r2, r2, #8
 80016bc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80016c0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80016c4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80016c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80016d4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016ee:	2307      	movs	r3, #7
 80016f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016f8:	4619      	mov	r1, r3
 80016fa:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80016fe:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8001702:	f001 fb15 	bl	8002d30 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2027      	movs	r0, #39	@ 0x27
 800170c:	f001 fadc 	bl	8002cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001710:	2027      	movs	r0, #39	@ 0x27
 8001712:	f001 faf3 	bl	8002cfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001716:	bf00      	nop
 8001718:	37e8      	adds	r7, #232	@ 0xe8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001722:	f640 1250 	movw	r2, #2384	@ 0x950
 8001726:	f2c2 4200 	movt	r2, #9216	@ 0x2400
 800172a:	2300      	movs	r3, #0
 800172c:	f2c4 0308 	movt	r3, #16392	@ 0x4008
 8001730:	6013      	str	r3, [r2, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001732:	f640 1350 	movw	r3, #2384	@ 0x950
 8001736:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800173a:	2209      	movs	r2, #9
 800173c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800173e:	f640 1350 	movw	r3, #2384	@ 0x950
 8001742:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001746:	2202      	movs	r2, #2
 8001748:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800174a:	f640 1350 	movw	r3, #2384	@ 0x950
 800174e:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001752:	2200      	movs	r2, #0
 8001754:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001756:	f640 1350 	movw	r3, #2384	@ 0x950
 800175a:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800175e:	2202      	movs	r2, #2
 8001760:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001762:	f640 1350 	movw	r3, #2384	@ 0x950
 8001766:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800176a:	2201      	movs	r2, #1
 800176c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800176e:	f640 1350 	movw	r3, #2384	@ 0x950
 8001772:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001776:	2200      	movs	r2, #0
 8001778:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800177a:	f640 1350 	movw	r3, #2384	@ 0x950
 800177e:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001782:	2200      	movs	r2, #0
 8001784:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001786:	f640 1350 	movw	r3, #2384	@ 0x950
 800178a:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800178e:	2201      	movs	r2, #1
 8001790:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001792:	f640 1350 	movw	r3, #2384	@ 0x950
 8001796:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800179a:	2201      	movs	r2, #1
 800179c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800179e:	f640 1350 	movw	r3, #2384	@ 0x950
 80017a2:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80017a6:	2200      	movs	r2, #0
 80017a8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80017aa:	f640 1050 	movw	r0, #2384	@ 0x950
 80017ae:	f2c2 4000 	movt	r0, #9216	@ 0x2400
 80017b2:	f001 fc97 	bl	80030e4 <HAL_PCD_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_USB_OTG_FS_PCD_Init+0xa2>
  {
    Error_Handler();
 80017bc:	f7ff fcef 	bl	800119e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b0ba      	sub	sp, #232	@ 0xe8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	22c0      	movs	r2, #192	@ 0xc0
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f008 f822 	bl	800982e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2300      	movs	r3, #0
 80017f0:	f2c4 0308 	movt	r3, #16392	@ 0x4008
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d171      	bne.n	80018dc <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f2c0 0204 	movt	r2, #4
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001808:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800180c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	4618      	mov	r0, r3
 8001816:	f003 f849 	bl	80048ac <HAL_RCCEx_PeriphCLKConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_PCD_MspInit+0x60>
    {
      Error_Handler();
 8001820:	f7ff fcbd 	bl	800119e <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001824:	f001 fdd4 	bl	80033d0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001828:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800182c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001830:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001834:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001838:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800183c:	f042 0201 	orr.w	r2, r2, #1
 8001840:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001844:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001848:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800184c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001858:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800185c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001872:	230a      	movs	r3, #10
 8001874:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800187c:	4619      	mov	r1, r3
 800187e:	2000      	movs	r0, #0
 8001880:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8001884:	f001 fa54 	bl	8002d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001888:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800188c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018a0:	4619      	mov	r1, r3
 80018a2:	2000      	movs	r0, #0
 80018a4:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 80018a8:	f001 fa42 	bl	8002d30 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018ac:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80018b0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80018b4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80018b8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80018bc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80018c0:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80018c4:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 80018c8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80018cc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80018d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80018dc:	bf00      	nop
 80018de:	37e8      	adds	r7, #232	@ 0xe8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800191c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018e8:	f7ff fcc5 	bl	8001276 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ec:	480c      	ldr	r0, [pc, #48]	@ (8001920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ee:	490d      	ldr	r1, [pc, #52]	@ (8001924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001904:	4c0a      	ldr	r4, [pc, #40]	@ (8001930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001912:	f007 ff95 	bl	8009840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001916:	f7ff fb4f 	bl	8000fb8 <main>
  bx  lr
 800191a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800191c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001920:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001924:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001928:	080098e8 	.word	0x080098e8
  ldr r2, =_sbss
 800192c:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001930:	24000e38 	.word	0x24000e38

08001934 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001934:	e7fe      	b.n	8001934 <ADC_IRQHandler>

08001936 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800193c:	2003      	movs	r0, #3
 800193e:	f001 f9b8 	bl	8002cb2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001942:	f002 fd87 	bl	8004454 <HAL_RCC_GetSysClockFreq>
 8001946:	4601      	mov	r1, r0
 8001948:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800194c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	0a1b      	lsrs	r3, r3, #8
 8001954:	f003 020f 	and.w	r2, r3, #15
 8001958:	f649 03a0 	movw	r3, #39072	@ 0x98a0
 800195c:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001960:	5c9b      	ldrb	r3, [r3, r2]
 8001962:	f003 031f 	and.w	r3, r3, #31
 8001966:	fa21 f303 	lsr.w	r3, r1, r3
 800196a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800196c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001970:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f003 020f 	and.w	r2, r3, #15
 800197a:	f649 03a0 	movw	r3, #39072	@ 0x98a0
 800197e:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001982:	5c9b      	ldrb	r3, [r3, r2]
 8001984:	f003 031f 	and.w	r3, r3, #31
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	40da      	lsrs	r2, r3
 800198c:	f240 0308 	movw	r3, #8
 8001990:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001994:	601a      	str	r2, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001996:	f240 0304 	movw	r3, #4
 800199a:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019a2:	2000      	movs	r0, #0
 80019a4:	f000 f80c 	bl	80019c0 <HAL_InitTick>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_Init+0x7c>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e002      	b.n	80019b8 <HAL_Init+0x82>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019b2:	f7ff fbfa 	bl	80011aa <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019c8:	f240 0310 	movw	r3, #16
 80019cc:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_InitTick+0x1a>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e02a      	b.n	8001a30 <HAL_InitTick+0x70>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019da:	f240 0304 	movw	r3, #4
 80019de:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	f240 0310 	movw	r3, #16
 80019e8:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	4619      	mov	r1, r3
 80019f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fc:	4618      	mov	r0, r3
 80019fe:	f001 f98b 	bl	8002d18 <HAL_SYSTICK_Config>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_InitTick+0x4c>
    {
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e011      	b.n	8001a30 <HAL_InitTick+0x70>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b0f      	cmp	r3, #15
 8001a10:	d80d      	bhi.n	8001a2e <HAL_InitTick+0x6e>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a12:	2200      	movs	r2, #0
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1a:	f001 f955 	bl	8002cc8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a1e:	f240 030c 	movw	r3, #12
 8001a22:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	e000      	b.n	8001a30 <HAL_InitTick+0x70>
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a3c:	f240 0310 	movw	r3, #16
 8001a40:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	f640 6334 	movw	r3, #3636	@ 0xe34
 8001a4c:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	441a      	add	r2, r3
 8001a54:	f640 6334 	movw	r3, #3636	@ 0xe34
 8001a58:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001a5c:	601a      	str	r2, [r3, #0]
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a6c:	f640 6334 	movw	r3, #3636	@ 0xe34
 8001a70:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001a74:	681b      	ldr	r3, [r3, #0]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff ffee 	bl	8001a68 <HAL_GetTick>
 8001a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a98:	d008      	beq.n	8001aac <HAL_Delay+0x2c>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a9a:	f240 0310 	movw	r3, #16
 8001a9e:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aac:	bf00      	nop
 8001aae:	f7ff ffdb 	bl	8001a68 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d8f7      	bhi.n	8001aae <HAL_Delay+0x2e>
  {
  }
}
 8001abe:	bf00      	nop
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad0:	f6c5 4300 	movt	r3, #23552	@ 0x5c00
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	0c1b      	lsrs	r3, r3, #16
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001aec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001af0:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	ea02 0103 	and.w	r1, r2, r3
 8001afe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b02:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	605a      	str	r2, [r3, #4]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	609a      	str	r2, [r3, #8]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	609a      	str	r2, [r3, #8]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	3360      	adds	r3, #96	@ 0x60
 8001b92:	461a      	mov	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	430b      	orrs	r3, r1
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	371c      	adds	r7, #28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001be0:	431a      	orrs	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	611a      	str	r2, [r3, #16]
}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b087      	sub	sp, #28
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3360      	adds	r3, #96	@ 0x60
 8001c02:	461a      	mov	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	601a      	str	r2, [r3, #0]
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3330      	adds	r3, #48	@ 0x30
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	4413      	add	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	211f      	movs	r1, #31
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	0e9b      	lsrs	r3, r3, #26
 8001c60:	f003 011f 	and.w	r1, r3, #31
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c74:	bf00      	nop
 8001c76:	371c      	adds	r7, #28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	3314      	adds	r3, #20
 8001c90:	461a      	mov	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	0e5b      	lsrs	r3, r3, #25
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	4413      	add	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	0d1b      	lsrs	r3, r3, #20
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	2107      	movs	r1, #7
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	0d1b      	lsrs	r3, r3, #20
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cca:	bf00      	nop
 8001ccc:	371c      	adds	r7, #28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b085      	sub	sp, #20
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	401a      	ands	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f003 0118 	and.w	r1, r3, #24
 8001cf8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cfc:	f2c0 030f 	movt	r3, #15
 8001d00:	fa23 f101 	lsr.w	r1, r3, r1
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	400b      	ands	r3, r1
 8001d08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	f64f 73c0 	movw	r3, #65472	@ 0xffc0
 8001d30:	f6c5 73ff 	movt	r3, #24575	@ 0x5fff
 8001d34:	4013      	ands	r3, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6093      	str	r3, [r2, #8]
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d5a:	d101      	bne.n	8001d60 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	f64f 73c0 	movw	r3, #65472	@ 0xffc0
 8001d7e:	f6c6 73ff 	movt	r3, #28671	@ 0x6fff
 8001d82:	4013      	ands	r3, r2
 8001d84:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001dac:	d101      	bne.n	8001db2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <LL_ADC_IsEnabled+0x18>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <LL_ADC_IsEnabled+0x1a>
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d101      	bne.n	8001dfe <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d101      	bne.n	8001e24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e32:	b590      	push	{r4, r7, lr}
 8001e34:	b089      	sub	sp, #36	@ 0x24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e1a4      	b.n	8002196 <HAL_ADC_Init+0x364>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d109      	bne.n	8001e6e <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7fe febe 	bl	8000bdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff67 	bl	8001d46 <LL_ADC_IsDeepPowerDownEnabled>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d004      	beq.n	8001e88 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff4c 	bl	8001d20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff83 	bl	8001d98 <LL_ADC_IsInternalRegulatorEnabled>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d11a      	bne.n	8001ece <HAL_ADC_Init+0x9c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff66 	bl	8001d6e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ea2:	f240 0304 	movw	r3, #4
 8001ea6:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	099a      	lsrs	r2, r3, #6
 8001eae:	f642 5363 	movw	r3, #11619	@ 0x2d63
 8001eb2:	f2c0 533e 	movt	r3, #1342	@ 0x53e
 8001eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8001eba:	099b      	lsrs	r3, r3, #6
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ec0:	e002      	b.n	8001ec8 <HAL_ADC_Init+0x96>
    {
      wait_loop_index--;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f9      	bne.n	8001ec2 <HAL_ADC_Init+0x90>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff ff60 	bl	8001d98 <LL_ADC_IsInternalRegulatorEnabled>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10d      	bne.n	8001efa <HAL_ADC_Init+0xc8>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee2:	f043 0210 	orr.w	r2, r3, #16
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eee:	f043 0201 	orr.w	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff ff71 	bl	8001de6 <LL_ADC_REG_IsConversionOngoing>
 8001f04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f040 8138 	bne.w	8002184 <HAL_ADC_Init+0x352>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 8134 	bne.w	8002184 <HAL_ADC_Init+0x352>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f20:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f24:	f043 0202 	orr.w	r2, r3, #2
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff45 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d151      	bne.n	8001fe0 <HAL_ADC_Init+0x1ae>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f44:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d007      	beq.n	8001f5c <HAL_ADC_Init+0x12a>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8001f54:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d114      	bne.n	8001f86 <HAL_ADC_Init+0x154>
 8001f5c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001f60:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8001f64:	f7ff ff2c 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001f68:	4604      	mov	r4, r0
 8001f6a:	f44f 5004 	mov.w	r0, #8448	@ 0x2100
 8001f6e:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 8001f72:	f7ff ff25 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4323      	orrs	r3, r4
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf0c      	ite	eq
 8001f7e:	2301      	moveq	r3, #1
 8001f80:	2300      	movne	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	e00b      	b.n	8001f9e <HAL_ADC_Init+0x16c>
 8001f86:	f44f 40c0 	mov.w	r0, #24576	@ 0x6000
 8001f8a:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 8001f8e:	f7ff ff17 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d01e      	beq.n	8001fe0 <HAL_ADC_Init+0x1ae>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001faa:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d007      	beq.n	8001fc2 <HAL_ADC_Init+0x190>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8001fba:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d104      	bne.n	8001fcc <HAL_ADC_Init+0x19a>
 8001fc2:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 8001fc6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001fca:	e003      	b.n	8001fd4 <HAL_ADC_Init+0x1a2>
 8001fcc:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 8001fd0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6852      	ldr	r2, [r2, #4]
 8001fd8:	4611      	mov	r1, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fd9c 	bl	8001b18 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001fe0:	f7ff fd72 	bl	8001ac8 <HAL_GetREVID>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d914      	bls.n	8002018 <HAL_ADC_Init+0x1e6>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b10      	cmp	r3, #16
 8001ff4:	d110      	bne.n	8002018 <HAL_ADC_Init+0x1e6>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	7d5b      	ldrb	r3, [r3, #21]
 8001ffa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002000:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002006:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7f1b      	ldrb	r3, [r3, #28]
 800200c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800200e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002010:	f043 030c 	orr.w	r3, r3, #12
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	e00d      	b.n	8002034 <HAL_ADC_Init+0x202>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	7d5b      	ldrb	r3, [r3, #21]
 800201c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002022:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002028:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7f1b      	ldrb	r3, [r3, #28]
 800202e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	7f1b      	ldrb	r3, [r3, #28]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d106      	bne.n	800204a <HAL_ADC_Init+0x218>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	3b01      	subs	r3, #1
 8002042:	045b      	lsls	r3, r3, #17
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204e:	2b00      	cmp	r3, #0
 8002050:	d009      	beq.n	8002066 <HAL_ADC_Init+0x234>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002056:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	f24c 0303 	movw	r3, #49155	@ 0xc003
 8002070:	f6cf 73f0 	movt	r3, #65520	@ 0xfff0
 8002074:	4013      	ands	r3, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	69b9      	ldr	r1, [r7, #24]
 800207c:	430b      	orrs	r3, r1
 800207e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff feae 	bl	8001de6 <LL_ADC_REG_IsConversionOngoing>
 800208a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff febb 	bl	8001e0c <LL_ADC_INJ_IsConversionOngoing>
 8002096:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d150      	bne.n	8002140 <HAL_ADC_Init+0x30e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d14d      	bne.n	8002140 <HAL_ADC_Init+0x30e>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7d1b      	ldrb	r3, [r3, #20]
 80020a8:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	f64b 73fc 	movw	r3, #49148	@ 0xbffc
 80020bc:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 80020c0:	4013      	ands	r3, r2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	69b9      	ldr	r1, [r7, #24]
 80020c8:	430b      	orrs	r3, r1
 80020ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d11e      	bne.n	8002114 <HAL_ADC_Init+0x2e2>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	f64f 031e 	movw	r3, #63518	@ 0xf81e
 80020e6:	f6cf 4300 	movt	r3, #64512	@ 0xfc00
 80020ea:	4013      	ands	r3, r2
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020f0:	3a01      	subs	r2, #1
 80020f2:	0411      	lsls	r1, r2, #16
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020f8:	4311      	orrs	r1, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80020fe:	4311      	orrs	r1, r2
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002104:	430a      	orrs	r2, r1
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0201 	orr.w	r2, r2, #1
 8002110:	611a      	str	r2, [r3, #16]
 8002112:	e007      	b.n	8002124 <HAL_ADC_Init+0x2f2>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0201 	bic.w	r2, r2, #1
 8002122:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fbc5 	bl	80028ca <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d10c      	bne.n	8002162 <HAL_ADC_Init+0x330>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	f023 010f 	bic.w	r1, r3, #15
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	1e5a      	subs	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002160:	e007      	b.n	8002172 <HAL_ADC_Init+0x340>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 020f 	bic.w	r2, r2, #15
 8002170:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002176:	f023 0303 	bic.w	r3, r3, #3
 800217a:	f043 0201 	orr.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	655a      	str	r2, [r3, #84]	@ 0x54
 8002182:	e007      	b.n	8002194 <HAL_ADC_Init+0x362>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002188:	f043 0210 	orr.w	r2, r3, #16
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002194:	7ffb      	ldrb	r3, [r7, #31]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3724      	adds	r7, #36	@ 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd90      	pop	{r4, r7, pc}

0800219e <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800219e:	b590      	push	{r4, r7, lr}
 80021a0:	b0a1      	sub	sp, #132	@ 0x84
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	2300      	movs	r3, #0
 80021b8:	f2c4 73ff 	movt	r3, #18431	@ 0x47ff
 80021bc:	429a      	cmp	r2, r3
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x2e>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e37a      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x724>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fe04 	bl	8001de6 <LL_ADC_REG_IsConversionOngoing>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f040 835f 	bne.w	80028a4 <HAL_ADC_ConfigChannel+0x706>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	db2c      	blt.n	8002248 <HAL_ADC_ConfigChannel+0xaa>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d108      	bne.n	800220c <HAL_ADC_ConfigChannel+0x6e>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	0e9b      	lsrs	r3, r3, #26
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	2201      	movs	r2, #1
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	e016      	b.n	800223a <HAL_ADC_ConfigChannel+0x9c>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800221a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800221c:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800221e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x8a>
  {
    return 32U;
 8002224:	2320      	movs	r3, #32
 8002226:	e003      	b.n	8002230 <HAL_ADC_ConfigChannel+0x92>
  }
  return __builtin_clz(value);
 8002228:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	2201      	movs	r2, #1
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	69d1      	ldr	r1, [r2, #28]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	430b      	orrs	r3, r1
 8002246:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	f7ff fce7 	bl	8001c28 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fdc1 	bl	8001de6 <LL_ADC_REG_IsConversionOngoing>
 8002264:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fdce 	bl	8001e0c <LL_ADC_INJ_IsConversionOngoing>
 8002270:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002272:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002274:	2b00      	cmp	r3, #0
 8002276:	f040 80b6 	bne.w	80023e6 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800227a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800227c:	2b00      	cmp	r3, #0
 800227e:	f040 80b2 	bne.w	80023e6 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6819      	ldr	r1, [r3, #0]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	461a      	mov	r2, r3
 8002290:	f7ff fcf6 	bl	8001c80 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002294:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002298:	f6c5 4300 	movt	r3, #23552	@ 0x5c00
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80022a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022a6:	d10b      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x122>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	089b      	lsrs	r3, r3, #2
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	e01d      	b.n	80022fc <HAL_ADC_ConfigChannel+0x15e>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10b      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x148>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	089b      	lsrs	r3, r3, #2
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	e00a      	b.n	80022fc <HAL_ADC_ConfigChannel+0x15e>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b04      	cmp	r3, #4
 8002304:	d027      	beq.n	8002356 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6919      	ldr	r1, [r3, #16]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002314:	f7ff fc34 	bl	8001b80 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	6919      	ldr	r1, [r3, #16]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	7e5b      	ldrb	r3, [r3, #25]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d102      	bne.n	800232e <HAL_ADC_ConfigChannel+0x190>
 8002328:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800232c:	e000      	b.n	8002330 <HAL_ADC_ConfigChannel+0x192>
 800232e:	2300      	movs	r3, #0
 8002330:	461a      	mov	r2, r3
 8002332:	f7ff fc5e 	bl	8001bf2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	6919      	ldr	r1, [r3, #16]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	7e1b      	ldrb	r3, [r3, #24]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d102      	bne.n	800234c <HAL_ADC_ConfigChannel+0x1ae>
 8002346:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800234a:	e000      	b.n	800234e <HAL_ADC_ConfigChannel+0x1b0>
 800234c:	2300      	movs	r3, #0
 800234e:	461a      	mov	r2, r3
 8002350:	f7ff fc36 	bl	8001bc0 <LL_ADC_SetDataRightShift>
 8002354:	e047      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x248>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800235c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	069b      	lsls	r3, r3, #26
 8002366:	429a      	cmp	r2, r3
 8002368:	d107      	bne.n	800237a <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002378:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002380:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	069b      	lsls	r3, r3, #26
 800238a:	429a      	cmp	r2, r3
 800238c:	d107      	bne.n	800239e <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800239c:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	069b      	lsls	r3, r3, #26
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d107      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023c0:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	069b      	lsls	r3, r3, #26
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d107      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023e4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fce8 	bl	8001dc0 <LL_ADC_IsEnabled>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f040 825f 	bne.w	80028b6 <HAL_ADC_ConfigChannel+0x718>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	6819      	ldr	r1, [r3, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	461a      	mov	r2, r3
 8002406:	f7ff fc66 	bl	8001cd6 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	2300      	movs	r3, #0
 8002410:	f2c4 73ff 	movt	r3, #18431	@ 0x47ff
 8002414:	429a      	cmp	r2, r3
 8002416:	f040 812e 	bne.w	8002676 <HAL_ADC_ConfigChannel+0x4d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10b      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x2a4>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	0e9b      	lsrs	r3, r3, #26
 8002430:	3301      	adds	r3, #1
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	2b09      	cmp	r3, #9
 8002438:	bf94      	ite	ls
 800243a:	2301      	movls	r3, #1
 800243c:	2300      	movhi	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	e019      	b.n	8002476 <HAL_ADC_ConfigChannel+0x2d8>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002452:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002454:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 800245a:	2320      	movs	r3, #32
 800245c:	e003      	b.n	8002466 <HAL_ADC_ConfigChannel+0x2c8>
  return __builtin_clz(value);
 800245e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	3301      	adds	r3, #1
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	2b09      	cmp	r3, #9
 800246e:	bf94      	ite	ls
 8002470:	2301      	movls	r3, #1
 8002472:	2300      	movhi	r3, #0
 8002474:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002476:	2b00      	cmp	r3, #0
 8002478:	d079      	beq.n	800256e <HAL_ADC_ConfigChannel+0x3d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002482:	2b00      	cmp	r3, #0
 8002484:	d107      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x2f8>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0e9b      	lsrs	r3, r3, #26
 800248c:	3301      	adds	r3, #1
 800248e:	069b      	lsls	r3, r3, #26
 8002490:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002494:	e015      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x324>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80024a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024a6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80024a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x314>
    return 32U;
 80024ae:	2320      	movs	r3, #32
 80024b0:	e003      	b.n	80024ba <HAL_ADC_ConfigChannel+0x31c>
  return __builtin_clz(value);
 80024b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	3301      	adds	r3, #1
 80024bc:	069b      	lsls	r3, r3, #26
 80024be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x344>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	0e9b      	lsrs	r3, r3, #26
 80024d4:	3301      	adds	r3, #1
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	2101      	movs	r1, #1
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	e017      	b.n	8002512 <HAL_ADC_ConfigChannel+0x374>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80024f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80024f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80024fa:	2320      	movs	r3, #32
 80024fc:	e003      	b.n	8002506 <HAL_ADC_ConfigChannel+0x368>
  return __builtin_clz(value);
 80024fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002500:	fab3 f383 	clz	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	3301      	adds	r3, #1
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	2101      	movs	r1, #1
 800250e:	fa01 f303 	lsl.w	r3, r1, r3
 8002512:	ea42 0103 	orr.w	r1, r2, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10a      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x39a>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	0e9b      	lsrs	r3, r3, #26
 8002528:	3301      	adds	r3, #1
 800252a:	f003 021f 	and.w	r2, r3, #31
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	051b      	lsls	r3, r3, #20
 8002536:	e018      	b.n	800256a <HAL_ADC_ConfigChannel+0x3cc>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002548:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800254a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x3b6>
    return 32U;
 8002550:	2320      	movs	r3, #32
 8002552:	e003      	b.n	800255c <HAL_ADC_ConfigChannel+0x3be>
  return __builtin_clz(value);
 8002554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	3301      	adds	r3, #1
 800255e:	f003 021f 	and.w	r2, r3, #31
 8002562:	4613      	mov	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4413      	add	r3, r2
 8002568:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800256a:	430b      	orrs	r3, r1
 800256c:	e07e      	b.n	800266c <HAL_ADC_ConfigChannel+0x4ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002576:	2b00      	cmp	r3, #0
 8002578:	d107      	bne.n	800258a <HAL_ADC_ConfigChannel+0x3ec>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	0e9b      	lsrs	r3, r3, #26
 8002580:	3301      	adds	r3, #1
 8002582:	069b      	lsls	r3, r3, #26
 8002584:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002588:	e015      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x418>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800259c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x408>
    return 32U;
 80025a2:	2320      	movs	r3, #32
 80025a4:	e003      	b.n	80025ae <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 80025a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	069b      	lsls	r3, r3, #26
 80025b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x438>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	0e9b      	lsrs	r3, r3, #26
 80025c8:	3301      	adds	r3, #1
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	2101      	movs	r1, #1
 80025d0:	fa01 f303 	lsl.w	r3, r1, r3
 80025d4:	e017      	b.n	8002606 <HAL_ADC_ConfigChannel+0x468>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	61bb      	str	r3, [r7, #24]
  return result;
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x454>
    return 32U;
 80025ee:	2320      	movs	r3, #32
 80025f0:	e003      	b.n	80025fa <HAL_ADC_ConfigChannel+0x45c>
  return __builtin_clz(value);
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	3301      	adds	r3, #1
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	2101      	movs	r1, #1
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	ea42 0103 	orr.w	r1, r2, r3
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10d      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x494>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	0e9b      	lsrs	r3, r3, #26
 800261c:	3301      	adds	r3, #1
 800261e:	f003 021f 	and.w	r2, r3, #31
 8002622:	4613      	mov	r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	4413      	add	r3, r2
 8002628:	3b1e      	subs	r3, #30
 800262a:	051b      	lsls	r3, r3, #20
 800262c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002630:	e01b      	b.n	800266a <HAL_ADC_ConfigChannel+0x4cc>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	60fb      	str	r3, [r7, #12]
  return result;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_ADC_ConfigChannel+0x4b0>
    return 32U;
 800264a:	2320      	movs	r3, #32
 800264c:	e003      	b.n	8002656 <HAL_ADC_ConfigChannel+0x4b8>
  return __builtin_clz(value);
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	3301      	adds	r3, #1
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	3b1e      	subs	r3, #30
 8002664:	051b      	lsls	r3, r3, #20
 8002666:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800266a:	430b      	orrs	r3, r1
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	6892      	ldr	r2, [r2, #8]
 8002670:	4619      	mov	r1, r3
 8002672:	f7ff fb05 	bl	8001c80 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f280 811b 	bge.w	80028b6 <HAL_ADC_ConfigChannel+0x718>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002688:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800268c:	429a      	cmp	r2, r3
 800268e:	d007      	beq.n	80026a0 <HAL_ADC_ConfigChannel+0x502>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8002698:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800269c:	429a      	cmp	r2, r3
 800269e:	d104      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x50c>
 80026a0:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 80026a4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80026a8:	e003      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x514>
 80026aa:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 80026ae:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fa56 	bl	8001b64 <LL_ADC_GetCommonPathInternalCh>
 80026b8:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026c2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d007      	beq.n	80026da <HAL_ADC_ConfigChannel+0x53c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 80026d2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d114      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x566>
 80026da:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80026de:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 80026e2:	f7ff fb6d 	bl	8001dc0 <LL_ADC_IsEnabled>
 80026e6:	4604      	mov	r4, r0
 80026e8:	f44f 5004 	mov.w	r0, #8448	@ 0x2100
 80026ec:	f2c4 0002 	movt	r0, #16386	@ 0x4002
 80026f0:	f7ff fb66 	bl	8001dc0 <LL_ADC_IsEnabled>
 80026f4:	4603      	mov	r3, r0
 80026f6:	4323      	orrs	r3, r4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bf0c      	ite	eq
 80026fc:	2301      	moveq	r3, #1
 80026fe:	2300      	movne	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	e00b      	b.n	800271c <HAL_ADC_ConfigChannel+0x57e>
 8002704:	f44f 40c0 	mov.w	r0, #24576	@ 0x6000
 8002708:	f6c5 0002 	movt	r0, #22530	@ 0x5802
 800270c:	f7ff fb58 	bl	8001dc0 <LL_ADC_IsEnabled>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	bf0c      	ite	eq
 8002716:	2301      	moveq	r3, #1
 8002718:	2300      	movne	r3, #0
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 80b7 	beq.w	8002890 <HAL_ADC_ConfigChannel+0x6f2>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	2300      	movs	r3, #0
 8002728:	f6cc 3384 	movt	r3, #52100	@ 0xcb84
 800272c:	429a      	cmp	r2, r3
 800272e:	d145      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x61e>
 8002730:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002732:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d140      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x61e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002742:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002746:	429a      	cmp	r2, r3
 8002748:	f040 80b5 	bne.w	80028b6 <HAL_ADC_ConfigChannel+0x718>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002754:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002758:	429a      	cmp	r2, r3
 800275a:	d007      	beq.n	800276c <HAL_ADC_ConfigChannel+0x5ce>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8002764:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002768:	429a      	cmp	r2, r3
 800276a:	d104      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x5d8>
 800276c:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 8002770:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002774:	e003      	b.n	800277e <HAL_ADC_ConfigChannel+0x5e0>
 8002776:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 800277a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800277e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002780:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002784:	4611      	mov	r1, r2
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff f9d9 	bl	8001b3e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800278c:	f240 0304 	movw	r3, #4
 8002790:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	099a      	lsrs	r2, r3, #6
 8002798:	f642 5363 	movw	r3, #11619	@ 0x2d63
 800279c:	f2c0 533e 	movt	r3, #1342	@ 0x53e
 80027a0:	fba3 2302 	umull	r2, r3, r3, r2
 80027a4:	099b      	lsrs	r3, r3, #6
 80027a6:	3301      	adds	r3, #1
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027ac:	e002      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x616>
              {
                wait_loop_index--;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f9      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x610>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027ba:	e07c      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x718>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	2300      	movs	r3, #0
 80027c2:	f2cc 7352 	movt	r3, #51026	@ 0xc752
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d12d      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x688>
 80027ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d128      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x688>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80027dc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d168      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x718>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027ec:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d007      	beq.n	8002804 <HAL_ADC_ConfigChannel+0x666>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 80027fc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002800:	429a      	cmp	r2, r3
 8002802:	d104      	bne.n	800280e <HAL_ADC_ConfigChannel+0x670>
 8002804:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 8002808:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800280c:	e003      	b.n	8002816 <HAL_ADC_ConfigChannel+0x678>
 800280e:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 8002812:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002816:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002818:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff f98d 	bl	8001b3e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002824:	e047      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x718>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	2300      	movs	r3, #0
 800282c:	f6cc 73b8 	movt	r3, #53176	@ 0xcfb8
 8002830:	429a      	cmp	r2, r3
 8002832:	d140      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x718>
 8002834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002836:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d13b      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x718>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002846:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800284a:	429a      	cmp	r2, r3
 800284c:	d133      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x718>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002856:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800285a:	429a      	cmp	r2, r3
 800285c:	d007      	beq.n	800286e <HAL_ADC_ConfigChannel+0x6d0>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8002866:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800286a:	429a      	cmp	r2, r3
 800286c:	d104      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x6da>
 800286e:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 8002872:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002876:	e003      	b.n	8002880 <HAL_ADC_ConfigChannel+0x6e2>
 8002878:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 800287c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002880:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002882:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002886:	4611      	mov	r1, r2
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff f958 	bl	8001b3e <LL_ADC_SetCommonPathInternalCh>
 800288e:	e012      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x718>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002894:	f043 0220 	orr.w	r2, r3, #32
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80028a2:	e008      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x718>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80028be:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3784      	adds	r7, #132	@ 0x84
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd90      	pop	{r4, r7, pc}

080028ca <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028da:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80028de:	429a      	cmp	r2, r3
 80028e0:	d007      	beq.n	80028f2 <ADC_ConfigureBoostMode+0x28>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 80028ea:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d10c      	bne.n	800290c <ADC_ConfigureBoostMode+0x42>
 80028f2:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 80028f6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002900:	2b00      	cmp	r3, #0
 8002902:	bf14      	ite	ne
 8002904:	2301      	movne	r3, #1
 8002906:	2300      	moveq	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	e00b      	b.n	8002924 <ADC_ConfigureBoostMode+0x5a>
 800290c:	f44f 43c6 	mov.w	r3, #25344	@ 0x6300
 8002910:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800291a:	2b00      	cmp	r3, #0
 800291c:	bf14      	ite	ne
 800291e:	2301      	movne	r3, #1
 8002920:	2300      	moveq	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01c      	beq.n	8002962 <ADC_ConfigureBoostMode+0x98>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002928:	f001 ff54 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 800292c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002936:	d010      	beq.n	800295a <ADC_ConfigureBoostMode+0x90>
 8002938:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800293c:	d875      	bhi.n	8002a2a <ADC_ConfigureBoostMode+0x160>
 800293e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002942:	d002      	beq.n	800294a <ADC_ConfigureBoostMode+0x80>
 8002944:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002948:	d16f      	bne.n	8002a2a <ADC_ConfigureBoostMode+0x160>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	0c1b      	lsrs	r3, r3, #16
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	fbb2 f3f3 	udiv	r3, r2, r3
 8002956:	60fb      	str	r3, [r7, #12]
        break;
 8002958:	e06a      	b.n	8002a30 <ADC_ConfigureBoostMode+0x166>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	089b      	lsrs	r3, r3, #2
 800295e:	60fb      	str	r3, [r7, #12]
        break;
 8002960:	e066      	b.n	8002a30 <ADC_ConfigureBoostMode+0x166>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002962:	f04f 0000 	mov.w	r0, #0
 8002966:	f2c0 0008 	movt	r0, #8
 800296a:	f04f 0100 	mov.w	r1, #0
 800296e:	f003 fac5 	bl	8005efc <HAL_RCCEx_GetPeriphCLKFreq>
 8002972:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800297c:	d051      	beq.n	8002a22 <ADC_ConfigureBoostMode+0x158>
 800297e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002982:	d854      	bhi.n	8002a2e <ADC_ConfigureBoostMode+0x164>
 8002984:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002988:	d047      	beq.n	8002a1a <ADC_ConfigureBoostMode+0x150>
 800298a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800298e:	d84e      	bhi.n	8002a2e <ADC_ConfigureBoostMode+0x164>
 8002990:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002994:	d03d      	beq.n	8002a12 <ADC_ConfigureBoostMode+0x148>
 8002996:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800299a:	d848      	bhi.n	8002a2e <ADC_ConfigureBoostMode+0x164>
 800299c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029a0:	d033      	beq.n	8002a0a <ADC_ConfigureBoostMode+0x140>
 80029a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029a6:	d842      	bhi.n	8002a2e <ADC_ConfigureBoostMode+0x164>
 80029a8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80029ac:	d029      	beq.n	8002a02 <ADC_ConfigureBoostMode+0x138>
 80029ae:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80029b2:	d83c      	bhi.n	8002a2e <ADC_ConfigureBoostMode+0x164>
 80029b4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80029b8:	d01a      	beq.n	80029f0 <ADC_ConfigureBoostMode+0x126>
 80029ba:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80029be:	d836      	bhi.n	8002a2e <ADC_ConfigureBoostMode+0x164>
 80029c0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80029c4:	d014      	beq.n	80029f0 <ADC_ConfigureBoostMode+0x126>
 80029c6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80029ca:	d830      	bhi.n	8002a2e <ADC_ConfigureBoostMode+0x164>
 80029cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029d0:	d00e      	beq.n	80029f0 <ADC_ConfigureBoostMode+0x126>
 80029d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029d6:	d82a      	bhi.n	8002a2e <ADC_ConfigureBoostMode+0x164>
 80029d8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80029dc:	d008      	beq.n	80029f0 <ADC_ConfigureBoostMode+0x126>
 80029de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80029e2:	d824      	bhi.n	8002a2e <ADC_ConfigureBoostMode+0x164>
 80029e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029e8:	d002      	beq.n	80029f0 <ADC_ConfigureBoostMode+0x126>
 80029ea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80029ee:	d11e      	bne.n	8002a2e <ADC_ConfigureBoostMode+0x164>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	0c9b      	lsrs	r3, r3, #18
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fe:	60fb      	str	r3, [r7, #12]
        break;
 8002a00:	e016      	b.n	8002a30 <ADC_ConfigureBoostMode+0x166>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	60fb      	str	r3, [r7, #12]
        break;
 8002a08:	e012      	b.n	8002a30 <ADC_ConfigureBoostMode+0x166>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	095b      	lsrs	r3, r3, #5
 8002a0e:	60fb      	str	r3, [r7, #12]
        break;
 8002a10:	e00e      	b.n	8002a30 <ADC_ConfigureBoostMode+0x166>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	099b      	lsrs	r3, r3, #6
 8002a16:	60fb      	str	r3, [r7, #12]
        break;
 8002a18:	e00a      	b.n	8002a30 <ADC_ConfigureBoostMode+0x166>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	09db      	lsrs	r3, r3, #7
 8002a1e:	60fb      	str	r3, [r7, #12]
        break;
 8002a20:	e006      	b.n	8002a30 <ADC_ConfigureBoostMode+0x166>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	0a1b      	lsrs	r3, r3, #8
 8002a26:	60fb      	str	r3, [r7, #12]
        break;
 8002a28:	e002      	b.n	8002a30 <ADC_ConfigureBoostMode+0x166>
        break;
 8002a2a:	bf00      	nop
 8002a2c:	e000      	b.n	8002a30 <ADC_ConfigureBoostMode+0x166>
      default:
        break;
 8002a2e:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002a30:	f7ff f84a 	bl	8001ac8 <HAL_GetREVID>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d818      	bhi.n	8002a70 <ADC_ConfigureBoostMode+0x1a6>
  {
    if (freq > 20000000UL)
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 8002a44:	f2c0 1331 	movt	r3, #305	@ 0x131
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d908      	bls.n	8002a5e <ADC_ConfigureBoostMode+0x194>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a5a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002a5c:	e047      	b.n	8002aee <ADC_ConfigureBoostMode+0x224>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a6c:	609a      	str	r2, [r3, #8]
}
 8002a6e:	e03e      	b.n	8002aee <ADC_ConfigureBoostMode+0x224>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	085b      	lsrs	r3, r3, #1
 8002a74:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	f645 6310 	movw	r3, #24080	@ 0x5e10
 8002a7c:	f2c0 035f 	movt	r3, #95	@ 0x5f
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d808      	bhi.n	8002a96 <ADC_ConfigureBoostMode+0x1cc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002a92:	609a      	str	r2, [r3, #8]
}
 8002a94:	e02b      	b.n	8002aee <ADC_ConfigureBoostMode+0x224>
    else if (freq <= 12500000UL)
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	f64b 4320 	movw	r3, #48160	@ 0xbc20
 8002a9c:	f2c0 03be 	movt	r3, #190	@ 0xbe
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d80a      	bhi.n	8002aba <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ab6:	609a      	str	r2, [r3, #8]
}
 8002ab8:	e019      	b.n	8002aee <ADC_ConfigureBoostMode+0x224>
    else if (freq <= 25000000UL)
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	f647 0340 	movw	r3, #30784	@ 0x7840
 8002ac0:	f2c0 137d 	movt	r3, #381	@ 0x17d
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d80a      	bhi.n	8002ade <ADC_ConfigureBoostMode+0x214>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ada:	609a      	str	r2, [r3, #8]
}
 8002adc:	e007      	b.n	8002aee <ADC_ConfigureBoostMode+0x224>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002aec:	609a      	str	r2, [r3, #8]
}
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b085      	sub	sp, #20
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b06:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8002b0a:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b24:	2300      	movs	r3, #0
 8002b26:	f2c0 53fa 	movt	r3, #1530	@ 0x5fa
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2e:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8002b32:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	60da      	str	r2, [r3, #12]
}
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b4a:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8002b4e:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 0307 	and.w	r3, r3, #7
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	db0e      	blt.n	8002b94 <__NVIC_EnableIRQ+0x30>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	f003 011f 	and.w	r1, r3, #31
 8002b7c:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8002b80:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002b84:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b88:	0952      	lsrs	r2, r2, #5
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	fa00 f101 	lsl.w	r1, r0, r1
 8002b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	6039      	str	r1, [r7, #0]
 8002baa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	db0e      	blt.n	8002bd2 <__NVIC_SetPriority+0x32>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	b2d9      	uxtb	r1, r3
 8002bb8:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8002bbc:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002bc0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002bc4:	0109      	lsls	r1, r1, #4
 8002bc6:	b2c9      	uxtb	r1, r1
 8002bc8:	4413      	add	r3, r2
 8002bca:	460a      	mov	r2, r1
 8002bcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd0:	e00e      	b.n	8002bf0 <__NVIC_SetPriority+0x50>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	b2d9      	uxtb	r1, r3
 8002bd6:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8002bda:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002bde:	88fa      	ldrh	r2, [r7, #6]
 8002be0:	f002 020f 	and.w	r2, r2, #15
 8002be4:	3a04      	subs	r2, #4
 8002be6:	0109      	lsls	r1, r1, #4
 8002be8:	b2c9      	uxtb	r1, r1
 8002bea:	4413      	add	r3, r2
 8002bec:	460a      	mov	r2, r1
 8002bee:	761a      	strb	r2, [r3, #24]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b089      	sub	sp, #36	@ 0x24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f1c3 0307 	rsb	r3, r3, #7
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	bf28      	it	cs
 8002c1a:	2304      	movcs	r3, #4
 8002c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3304      	adds	r3, #4
 8002c22:	2b06      	cmp	r3, #6
 8002c24:	d902      	bls.n	8002c2c <NVIC_EncodePriority+0x30>
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3b03      	subs	r3, #3
 8002c2a:	e000      	b.n	8002c2e <NVIC_EncodePriority+0x32>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c30:	f04f 32ff 	mov.w	r2, #4294967295
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43da      	mvns	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	401a      	ands	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c44:	f04f 31ff 	mov.w	r1, #4294967295
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4e:	43d9      	mvns	r1, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c54:	4313      	orrs	r3, r2
         );
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3724      	adds	r7, #36	@ 0x24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c72:	d301      	bcc.n	8002c78 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c74:	2301      	movs	r3, #1
 8002c76:	e018      	b.n	8002caa <SysTick_Config+0x48>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c78:	f24e 0310 	movw	r3, #57360	@ 0xe010
 8002c7c:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	3a01      	subs	r2, #1
 8002c84:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c86:	210f      	movs	r1, #15
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f7ff ff88 	bl	8002ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c90:	f24e 0310 	movw	r3, #57360	@ 0xe010
 8002c94:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c9c:	f24e 0310 	movw	r3, #57360	@ 0xe010
 8002ca0:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002ca4:	2207      	movs	r2, #7
 8002ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff ff1b 	bl	8002af6 <__NVIC_SetPriorityGrouping>
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd6:	f7ff ff36 	bl	8002b46 <__NVIC_GetPriorityGrouping>
 8002cda:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	6978      	ldr	r0, [r7, #20]
 8002ce2:	f7ff ff8b 	bl	8002bfc <NVIC_EncodePriority>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff ff56 	bl	8002ba0 <__NVIC_SetPriority>
}
 8002cf4:	bf00      	nop
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff ff2a 	bl	8002b64 <__NVIC_EnableIRQ>
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff ff9e 	bl	8002c62 <SysTick_Config>
 8002d26:	4603      	mov	r3, r0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	@ 0x24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d3e:	2380      	movs	r3, #128	@ 0x80
 8002d40:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8002d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d46:	e1a5      	b.n	8003094 <HAL_GPIO_Init+0x364>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa01 f303 	lsl.w	r3, r1, r3
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 8197 	beq.w	800308e <HAL_GPIO_Init+0x35e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d005      	beq.n	8002d78 <HAL_GPIO_Init+0x48>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d130      	bne.n	8002dda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	2203      	movs	r2, #3
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dae:	2201      	movs	r2, #1
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	091b      	lsrs	r3, r3, #4
 8002dc4:	f003 0201 	and.w	r2, r3, #1
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d017      	beq.n	8002e16 <HAL_GPIO_Init+0xe6>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	2203      	movs	r2, #3
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d123      	bne.n	8002e6a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	08da      	lsrs	r2, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3208      	adds	r2, #8
 8002e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	220f      	movs	r2, #15
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	691a      	ldr	r2, [r3, #16]
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	08da      	lsrs	r2, r3, #3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3208      	adds	r2, #8
 8002e64:	69b9      	ldr	r1, [r7, #24]
 8002e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	2203      	movs	r2, #3
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 0203 	and.w	r2, r3, #3
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80f1 	beq.w	800308e <HAL_GPIO_Init+0x35e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eac:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8002eb0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002eb4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8002eb8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8002ebc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002ec0:	f042 0202 	orr.w	r2, r2, #2
 8002ec4:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8002ec8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8002ecc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002ed0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002edc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ee0:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	0892      	lsrs	r2, r2, #2
 8002ee8:	3202      	adds	r2, #2
 8002eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	220f      	movs	r2, #15
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d052      	beq.n	8002fb8 <HAL_GPIO_Init+0x288>
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f18:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d049      	beq.n	8002fb4 <HAL_GPIO_Init+0x284>
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f26:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d040      	beq.n	8002fb0 <HAL_GPIO_Init+0x280>
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002f34:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d037      	beq.n	8002fac <HAL_GPIO_Init+0x27c>
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f42:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d02e      	beq.n	8002fa8 <HAL_GPIO_Init+0x278>
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f50:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d025      	beq.n	8002fa4 <HAL_GPIO_Init+0x274>
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002f5e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d01c      	beq.n	8002fa0 <HAL_GPIO_Init+0x270>
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002f6c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d013      	beq.n	8002f9c <HAL_GPIO_Init+0x26c>
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f7a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d00a      	beq.n	8002f98 <HAL_GPIO_Init+0x268>
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8002f88:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d101      	bne.n	8002f94 <HAL_GPIO_Init+0x264>
 8002f90:	2309      	movs	r3, #9
 8002f92:	e012      	b.n	8002fba <HAL_GPIO_Init+0x28a>
 8002f94:	230a      	movs	r3, #10
 8002f96:	e010      	b.n	8002fba <HAL_GPIO_Init+0x28a>
 8002f98:	2308      	movs	r3, #8
 8002f9a:	e00e      	b.n	8002fba <HAL_GPIO_Init+0x28a>
 8002f9c:	2307      	movs	r3, #7
 8002f9e:	e00c      	b.n	8002fba <HAL_GPIO_Init+0x28a>
 8002fa0:	2306      	movs	r3, #6
 8002fa2:	e00a      	b.n	8002fba <HAL_GPIO_Init+0x28a>
 8002fa4:	2305      	movs	r3, #5
 8002fa6:	e008      	b.n	8002fba <HAL_GPIO_Init+0x28a>
 8002fa8:	2304      	movs	r3, #4
 8002faa:	e006      	b.n	8002fba <HAL_GPIO_Init+0x28a>
 8002fac:	2303      	movs	r3, #3
 8002fae:	e004      	b.n	8002fba <HAL_GPIO_Init+0x28a>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e002      	b.n	8002fba <HAL_GPIO_Init+0x28a>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <HAL_GPIO_Init+0x28a>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	f002 0203 	and.w	r2, r2, #3
 8002fc0:	0092      	lsls	r2, r2, #2
 8002fc2:	4093      	lsls	r3, r2
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fce:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 8002fd2:	69fa      	ldr	r2, [r7, #28]
 8002fd4:	0892      	lsrs	r2, r2, #2
 8002fd6:	3202      	adds	r2, #2
 8002fd8:	69b9      	ldr	r1, [r7, #24]
 8002fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x2d4>
        {
          temp |= iocurrent;
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003004:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800300c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	43db      	mvns	r3, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4013      	ands	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003032:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_Init+0x32e>
        {
          temp |= iocurrent;
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x358>
        {
          temp |= iocurrent;
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3301      	adds	r3, #1
 8003092:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	fa22 f303 	lsr.w	r3, r2, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f47f ae52 	bne.w	8002d48 <HAL_GPIO_Init+0x18>
  }
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	3724      	adds	r7, #36	@ 0x24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	460b      	mov	r3, r1
 80030bc:	807b      	strh	r3, [r7, #2]
 80030be:	4613      	mov	r3, r2
 80030c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030c2:	787b      	ldrb	r3, [r7, #1]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030c8:	887a      	ldrh	r2, [r7, #2]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80030ce:	e003      	b.n	80030d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80030d0:	887b      	ldrh	r3, [r7, #2]
 80030d2:	041a      	lsls	r2, r3, #16
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	619a      	str	r2, [r3, #24]
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e0fe      	b.n	80032f4 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fe fb5a 	bl	80017c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2203      	movs	r2, #3
 8003114:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f006 f8f1 	bl	8009304 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	7c1a      	ldrb	r2, [r3, #16]
 800312a:	f88d 2000 	strb.w	r2, [sp]
 800312e:	3304      	adds	r3, #4
 8003130:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003132:	f006 f875 	bl	8009220 <USB_CoreInit>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0d5      	b.n	80032f4 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2100      	movs	r1, #0
 800314e:	4618      	mov	r0, r3
 8003150:	f006 f8e9 	bl	8009326 <USB_SetCurrentMode>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0c6      	b.n	80032f4 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003166:	2300      	movs	r3, #0
 8003168:	73fb      	strb	r3, [r7, #15]
 800316a:	e04a      	b.n	8003202 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800316c:	7bfa      	ldrb	r2, [r7, #15]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	3315      	adds	r3, #21
 800317c:	2201      	movs	r2, #1
 800317e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003180:	7bfa      	ldrb	r2, [r7, #15]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	3314      	adds	r3, #20
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003194:	7bfa      	ldrb	r2, [r7, #15]
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	b298      	uxth	r0, r3
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	332e      	adds	r3, #46	@ 0x2e
 80031a8:	4602      	mov	r2, r0
 80031aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	3318      	adds	r3, #24
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031c0:	7bfa      	ldrb	r2, [r7, #15]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	331c      	adds	r3, #28
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031d4:	7bfa      	ldrb	r2, [r7, #15]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	3320      	adds	r3, #32
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031e8:	7bfa      	ldrb	r2, [r7, #15]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	3324      	adds	r3, #36	@ 0x24
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	3301      	adds	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	791b      	ldrb	r3, [r3, #4]
 8003206:	7bfa      	ldrb	r2, [r7, #15]
 8003208:	429a      	cmp	r2, r3
 800320a:	d3af      	bcc.n	800316c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800320c:	2300      	movs	r3, #0
 800320e:	73fb      	strb	r3, [r7, #15]
 8003210:	e044      	b.n	800329c <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003212:	7bfa      	ldrb	r2, [r7, #15]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	4413      	add	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003228:	7bfa      	ldrb	r2, [r7, #15]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800323a:	7bfa      	ldrb	r2, [r7, #15]
 800323c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800323e:	7bfa      	ldrb	r2, [r7, #15]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800326a:	7bfa      	ldrb	r2, [r7, #15]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	3301      	adds	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	791b      	ldrb	r3, [r3, #4]
 80032a0:	7bfa      	ldrb	r2, [r7, #15]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d3b5      	bcc.n	8003212 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7c1a      	ldrb	r2, [r3, #16]
 80032ae:	f88d 2000 	strb.w	r2, [sp]
 80032b2:	3304      	adds	r3, #4
 80032b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032b6:	f006 f882 	bl	80093be <USB_DevInit>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e013      	b.n	80032f4 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	7b1b      	ldrb	r3, [r3, #12]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d102      	bne.n	80032e8 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f80a 	bl	80032fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f006 fa3e 	bl	800976e <USB_DevDisconnect>

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800332a:	2303      	movs	r3, #3
 800332c:	f2c1 0300 	movt	r3, #4096	@ 0x1000
 8003330:	4313      	orrs	r3, r2
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800334c:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8003350:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b04      	cmp	r3, #4
 800335c:	d00d      	beq.n	800337a <HAL_PWREx_ConfigSupply+0x36>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800335e:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8003362:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	429a      	cmp	r2, r3
 8003370:	d001      	beq.n	8003376 <HAL_PWREx_ConfigSupply+0x32>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e028      	b.n	80033c8 <HAL_PWREx_ConfigSupply+0x84>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	e026      	b.n	80033c8 <HAL_PWREx_ConfigSupply+0x84>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800337a:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800337e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f023 0107 	bic.w	r1, r3, #7
 8003388:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800338c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	430a      	orrs	r2, r1
 8003394:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003396:	f7fe fb67 	bl	8001a68 <HAL_GetTick>
 800339a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800339c:	e009      	b.n	80033b2 <HAL_PWREx_ConfigSupply+0x6e>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800339e:	f7fe fb63 	bl	8001a68 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033ac:	d901      	bls.n	80033b2 <HAL_PWREx_ConfigSupply+0x6e>
    {
      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e00a      	b.n	80033c8 <HAL_PWREx_ConfigSupply+0x84>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80033b2:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80033b6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033c4:	d1eb      	bne.n	800339e <HAL_PWREx_ConfigSupply+0x5a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80033d4:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80033d8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80033e2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80033e6:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80033ea:	60da      	str	r2, [r3, #12]
}
 80033ec:	bf00      	nop
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b08c      	sub	sp, #48	@ 0x30
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d102      	bne.n	800340a <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	f000 bdd8 	b.w	8003fba <HAL_RCC_OscConfig+0xbc4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 80c5 	beq.w	80035a2 <HAL_RCC_OscConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003418:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800341c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003426:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003428:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800342c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003432:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003436:	2b10      	cmp	r3, #16
 8003438:	d007      	beq.n	800344a <HAL_RCC_OscConfig+0x54>
 800343a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800343c:	2b18      	cmp	r3, #24
 800343e:	d116      	bne.n	800346e <HAL_RCC_OscConfig+0x78>
 8003440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d111      	bne.n	800346e <HAL_RCC_OscConfig+0x78>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800344e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80a1 	beq.w	80035a0 <HAL_RCC_OscConfig+0x1aa>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	f040 809c 	bne.w	80035a0 <HAL_RCC_OscConfig+0x1aa>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	f000 bda6 	b.w	8003fba <HAL_RCC_OscConfig+0xbc4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003476:	d10c      	bne.n	8003492 <HAL_RCC_OscConfig+0x9c>
 8003478:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800347c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003486:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800348a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	e052      	b.n	8003538 <HAL_RCC_OscConfig+0x142>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d118      	bne.n	80034cc <HAL_RCC_OscConfig+0xd6>
 800349a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800349e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80034a8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80034ac:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80034b6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80034c0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80034c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	e035      	b.n	8003538 <HAL_RCC_OscConfig+0x142>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034d4:	d118      	bne.n	8003508 <HAL_RCC_OscConfig+0x112>
 80034d6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80034da:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80034e4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80034e8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80034f2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80034fc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003500:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	e017      	b.n	8003538 <HAL_RCC_OscConfig+0x142>
 8003508:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800350c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003516:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800351a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003524:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800352e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003532:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003536:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d017      	beq.n	8003570 <HAL_RCC_OscConfig+0x17a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fe fa92 	bl	8001a68 <HAL_GetTick>
 8003544:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003546:	e009      	b.n	800355c <HAL_RCC_OscConfig+0x166>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003548:	f7fe fa8e 	bl	8001a68 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	@ 0x64
 8003554:	d902      	bls.n	800355c <HAL_RCC_OscConfig+0x166>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	f000 bd2f 	b.w	8003fba <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800355c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003560:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0ec      	beq.n	8003548 <HAL_RCC_OscConfig+0x152>
 800356e:	e018      	b.n	80035a2 <HAL_RCC_OscConfig+0x1ac>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fe fa7a 	bl	8001a68 <HAL_GetTick>
 8003574:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003576:	e009      	b.n	800358c <HAL_RCC_OscConfig+0x196>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003578:	f7fe fa76 	bl	8001a68 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b64      	cmp	r3, #100	@ 0x64
 8003584:	d902      	bls.n	800358c <HAL_RCC_OscConfig+0x196>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	f000 bd17 	b.w	8003fba <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800358c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003590:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1ec      	bne.n	8003578 <HAL_RCC_OscConfig+0x182>
 800359e:	e000      	b.n	80035a2 <HAL_RCC_OscConfig+0x1ac>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 8113 	beq.w	80037d6 <HAL_RCC_OscConfig+0x3e0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035b0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80035b4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035be:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035c0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80035c4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80035c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d007      	beq.n	80035e2 <HAL_RCC_OscConfig+0x1ec>
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	2b18      	cmp	r3, #24
 80035d6:	d176      	bne.n	80036c6 <HAL_RCC_OscConfig+0x2d0>
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d171      	bne.n	80036c6 <HAL_RCC_OscConfig+0x2d0>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035e2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80035e6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d006      	beq.n	8003602 <HAL_RCC_OscConfig+0x20c>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d102      	bne.n	8003602 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	f000 bcdc 	b.w	8003fba <HAL_RCC_OscConfig+0xbc4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003602:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003606:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f023 0119 	bic.w	r1, r3, #25
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003618:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800361c:	430a      	orrs	r2, r1
 800361e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fe fa22 	bl	8001a68 <HAL_GetTick>
 8003624:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003626:	e009      	b.n	800363c <HAL_RCC_OscConfig+0x246>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003628:	f7fe fa1e 	bl	8001a68 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d902      	bls.n	800363c <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	f000 bcbf 	b.w	8003fba <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800363c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003640:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0ec      	beq.n	8003628 <HAL_RCC_OscConfig+0x232>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364e:	f7fe fa3b 	bl	8001ac8 <HAL_GetREVID>
 8003652:	4603      	mov	r3, r0
 8003654:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003658:	4293      	cmp	r3, r2
 800365a:	d823      	bhi.n	80036a4 <HAL_RCC_OscConfig+0x2ae>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b40      	cmp	r3, #64	@ 0x40
 8003662:	d10e      	bne.n	8003682 <HAL_RCC_OscConfig+0x28c>
 8003664:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003668:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003672:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003676:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800367a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800367e:	605a      	str	r2, [r3, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003680:	e0a9      	b.n	80037d6 <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003682:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003686:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 317c 	bic.w	r1, r3, #258048	@ 0x3f000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	031a      	lsls	r2, r3, #12
 8003696:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800369a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800369e:	430a      	orrs	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036a2:	e098      	b.n	80037d6 <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80036a8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f023 41fe 	bic.w	r1, r3, #2130706432	@ 0x7f000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	061a      	lsls	r2, r3, #24
 80036b8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80036bc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80036c0:	430a      	orrs	r2, r1
 80036c2:	605a      	str	r2, [r3, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036c4:	e087      	b.n	80037d6 <HAL_RCC_OscConfig+0x3e0>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d061      	beq.n	8003792 <HAL_RCC_OscConfig+0x39c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80036ce:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80036d2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f023 0119 	bic.w	r1, r3, #25
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80036e4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80036e8:	430a      	orrs	r2, r1
 80036ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fe f9bc 	bl	8001a68 <HAL_GetTick>
 80036f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036f2:	e009      	b.n	8003708 <HAL_RCC_OscConfig+0x312>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f4:	f7fe f9b8 	bl	8001a68 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d902      	bls.n	8003708 <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	f000 bc59 	b.w	8003fba <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003708:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800370c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0ec      	beq.n	80036f4 <HAL_RCC_OscConfig+0x2fe>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371a:	f7fe f9d5 	bl	8001ac8 <HAL_GetREVID>
 800371e:	4603      	mov	r3, r0
 8003720:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003724:	4293      	cmp	r3, r2
 8003726:	d823      	bhi.n	8003770 <HAL_RCC_OscConfig+0x37a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	2b40      	cmp	r3, #64	@ 0x40
 800372e:	d10e      	bne.n	800374e <HAL_RCC_OscConfig+0x358>
 8003730:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003734:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800373e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003742:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003746:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800374a:	605a      	str	r2, [r3, #4]
 800374c:	e043      	b.n	80037d6 <HAL_RCC_OscConfig+0x3e0>
 800374e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003752:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f423 317c 	bic.w	r1, r3, #258048	@ 0x3f000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	031a      	lsls	r2, r3, #12
 8003762:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003766:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	e032      	b.n	80037d6 <HAL_RCC_OscConfig+0x3e0>
 8003770:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003774:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f023 41fe 	bic.w	r1, r3, #2130706432	@ 0x7f000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	061a      	lsls	r2, r3, #24
 8003784:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003788:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800378c:	430a      	orrs	r2, r1
 800378e:	605a      	str	r2, [r3, #4]
 8003790:	e021      	b.n	80037d6 <HAL_RCC_OscConfig+0x3e0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003792:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003796:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80037a0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80037a4:	f022 0201 	bic.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037aa:	f7fe f95d 	bl	8001a68 <HAL_GetTick>
 80037ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x3ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b2:	f7fe f959 	bl	8001a68 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e3fa      	b.n	8003fba <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037c4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80037c8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1ed      	bne.n	80037b2 <HAL_RCC_OscConfig+0x3bc>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80e8 	beq.w	80039b4 <HAL_RCC_OscConfig+0x5be>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80037e8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037f4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80037f8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80037fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fe:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2b08      	cmp	r3, #8
 8003804:	d007      	beq.n	8003816 <HAL_RCC_OscConfig+0x420>
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	2b18      	cmp	r3, #24
 800380a:	d14f      	bne.n	80038ac <HAL_RCC_OscConfig+0x4b6>
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d14a      	bne.n	80038ac <HAL_RCC_OscConfig+0x4b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003816:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800381a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_OscConfig+0x43e>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	2b80      	cmp	r3, #128	@ 0x80
 800382e:	d001      	beq.n	8003834 <HAL_RCC_OscConfig+0x43e>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e3c2      	b.n	8003fba <HAL_RCC_OscConfig+0xbc4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003834:	f7fe f948 	bl	8001ac8 <HAL_GetREVID>
 8003838:	4603      	mov	r3, r0
 800383a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800383e:	4293      	cmp	r3, r2
 8003840:	d823      	bhi.n	800388a <HAL_RCC_OscConfig+0x494>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	2b20      	cmp	r3, #32
 8003848:	d10e      	bne.n	8003868 <HAL_RCC_OscConfig+0x472>
 800384a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800384e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003858:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800385c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003860:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003864:	605a      	str	r2, [r3, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003866:	e0a5      	b.n	80039b4 <HAL_RCC_OscConfig+0x5be>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003868:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800386c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f023 41f8 	bic.w	r1, r3, #2080374784	@ 0x7c000000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	069a      	lsls	r2, r3, #26
 800387c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003880:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003884:	430a      	orrs	r2, r1
 8003886:	605a      	str	r2, [r3, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003888:	e094      	b.n	80039b4 <HAL_RCC_OscConfig+0x5be>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800388a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800388e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	061a      	lsls	r2, r3, #24
 800389e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80038a2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80038a6:	430a      	orrs	r2, r1
 80038a8:	60da      	str	r2, [r3, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038aa:	e083      	b.n	80039b4 <HAL_RCC_OscConfig+0x5be>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d05d      	beq.n	8003970 <HAL_RCC_OscConfig+0x57a>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80038b4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80038b8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80038c2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80038c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80038ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fe f8cc 	bl	8001a68 <HAL_GetTick>
 80038d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80038d4:	f7fe f8c8 	bl	8001a68 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e369      	b.n	8003fba <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038e6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80038ea:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0ed      	beq.n	80038d4 <HAL_RCC_OscConfig+0x4de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038f8:	f7fe f8e6 	bl	8001ac8 <HAL_GetREVID>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003902:	4293      	cmp	r3, r2
 8003904:	d823      	bhi.n	800394e <HAL_RCC_OscConfig+0x558>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	2b20      	cmp	r3, #32
 800390c:	d10e      	bne.n	800392c <HAL_RCC_OscConfig+0x536>
 800390e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003912:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800391c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003920:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003924:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	e043      	b.n	80039b4 <HAL_RCC_OscConfig+0x5be>
 800392c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003930:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f023 41f8 	bic.w	r1, r3, #2080374784	@ 0x7c000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	069a      	lsls	r2, r3, #26
 8003940:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003944:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]
 800394c:	e032      	b.n	80039b4 <HAL_RCC_OscConfig+0x5be>
 800394e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003952:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	061a      	lsls	r2, r3, #24
 8003962:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003966:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800396a:	430a      	orrs	r2, r1
 800396c:	60da      	str	r2, [r3, #12]
 800396e:	e021      	b.n	80039b4 <HAL_RCC_OscConfig+0x5be>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003970:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003974:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800397e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003982:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fe f86e 	bl	8001a68 <HAL_GetTick>
 800398c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003990:	f7fe f86a 	bl	8001a68 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e30b      	b.n	8003fba <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039a2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80039a6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ed      	bne.n	8003990 <HAL_RCC_OscConfig+0x59a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d048      	beq.n	8003a52 <HAL_RCC_OscConfig+0x65c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d022      	beq.n	8003a0e <HAL_RCC_OscConfig+0x618>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039c8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80039cc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80039d0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80039d2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80039d6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80039da:	f042 0201 	orr.w	r2, r2, #1
 80039de:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e0:	f7fe f842 	bl	8001a68 <HAL_GetTick>
 80039e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x604>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e8:	f7fe f83e 	bl	8001a68 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e2df      	b.n	8003fba <HAL_RCC_OscConfig+0xbc4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039fa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80039fe:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003a02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0ed      	beq.n	80039e8 <HAL_RCC_OscConfig+0x5f2>
 8003a0c:	e021      	b.n	8003a52 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a0e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003a12:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003a16:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8003a18:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003a1c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a26:	f7fe f81f 	bl	8001a68 <HAL_GetTick>
 8003a2a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x64a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a2e:	f7fe f81b 	bl	8001a68 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x64a>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e2bc      	b.n	8003fba <HAL_RCC_OscConfig+0xbc4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a40:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003a44:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1ed      	bne.n	8003a2e <HAL_RCC_OscConfig+0x638>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d048      	beq.n	8003af0 <HAL_RCC_OscConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d022      	beq.n	8003aac <HAL_RCC_OscConfig+0x6b6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a66:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003a6a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003a74:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003a78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a7c:	601a      	str	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a7e:	f7fd fff3 	bl	8001a68 <HAL_GetTick>
 8003a82:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x6a2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a86:	f7fd ffef 	bl	8001a68 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x6a2>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e290      	b.n	8003fba <HAL_RCC_OscConfig+0xbc4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a98:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003a9c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0ed      	beq.n	8003a86 <HAL_RCC_OscConfig+0x690>
 8003aaa:	e021      	b.n	8003af0 <HAL_RCC_OscConfig+0x6fa>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003aac:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003ab0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003aba:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003abe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ac2:	601a      	str	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ac4:	f7fd ffd0 	bl	8001a68 <HAL_GetTick>
 8003ac8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x6e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003acc:	f7fd ffcc 	bl	8001a68 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x6e8>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e26d      	b.n	8003fba <HAL_RCC_OscConfig+0xbc4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ade:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003ae2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1ed      	bne.n	8003acc <HAL_RCC_OscConfig+0x6d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80ba 	beq.w	8003c72 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003afe:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8003b02:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8003b0c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b14:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b16:	f7fd ffa7 	bl	8001a68 <HAL_GetTick>
 8003b1a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x73a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1e:	f7fd ffa3 	bl	8001a68 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b64      	cmp	r3, #100	@ 0x64
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x73a>
      {
        return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e244      	b.n	8003fba <HAL_RCC_OscConfig+0xbc4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b30:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8003b34:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0ed      	beq.n	8003b1e <HAL_RCC_OscConfig+0x728>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCC_OscConfig+0x76e>
 8003b4a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b4e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b54:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b58:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b5c:	f042 0201 	orr.w	r2, r2, #1
 8003b60:	671a      	str	r2, [r3, #112]	@ 0x70
 8003b62:	e051      	b.n	8003c08 <HAL_RCC_OscConfig+0x812>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d118      	bne.n	8003b9e <HAL_RCC_OscConfig+0x7a8>
 8003b6c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b70:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b74:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b76:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b7a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	671a      	str	r2, [r3, #112]	@ 0x70
 8003b84:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b88:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b8c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b8e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003b92:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003b96:	f022 0204 	bic.w	r2, r2, #4
 8003b9a:	671a      	str	r2, [r3, #112]	@ 0x70
 8003b9c:	e034      	b.n	8003c08 <HAL_RCC_OscConfig+0x812>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b05      	cmp	r3, #5
 8003ba4:	d118      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x7e2>
 8003ba6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003baa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003bae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003bb0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003bb4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003bb8:	f042 0204 	orr.w	r2, r2, #4
 8003bbc:	671a      	str	r2, [r3, #112]	@ 0x70
 8003bbe:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003bc2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003bc6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003bc8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003bcc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003bd0:	f042 0201 	orr.w	r2, r2, #1
 8003bd4:	671a      	str	r2, [r3, #112]	@ 0x70
 8003bd6:	e017      	b.n	8003c08 <HAL_RCC_OscConfig+0x812>
 8003bd8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003bdc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003be0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003be2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003be6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003bea:	f022 0201 	bic.w	r2, r2, #1
 8003bee:	671a      	str	r2, [r3, #112]	@ 0x70
 8003bf0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003bf4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003bf8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003bfa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003bfe:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003c02:	f022 0204 	bic.w	r2, r2, #4
 8003c06:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d018      	beq.n	8003c42 <HAL_RCC_OscConfig+0x84c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c10:	f7fd ff2a 	bl	8001a68 <HAL_GetTick>
 8003c14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c16:	e00a      	b.n	8003c2e <HAL_RCC_OscConfig+0x838>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c18:	f7fd ff26 	bl	8001a68 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x838>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e1c5      	b.n	8003fba <HAL_RCC_OscConfig+0xbc4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c2e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003c32:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0eb      	beq.n	8003c18 <HAL_RCC_OscConfig+0x822>
 8003c40:	e017      	b.n	8003c72 <HAL_RCC_OscConfig+0x87c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c42:	f7fd ff11 	bl	8001a68 <HAL_GetTick>
 8003c46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c48:	e00a      	b.n	8003c60 <HAL_RCC_OscConfig+0x86a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4a:	f7fd ff0d 	bl	8001a68 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x86a>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e1ac      	b.n	8003fba <HAL_RCC_OscConfig+0xbc4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c60:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003c64:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1eb      	bne.n	8003c4a <HAL_RCC_OscConfig+0x854>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 819e 	beq.w	8003fb8 <HAL_RCC_OscConfig+0xbc2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c7c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003c80:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c8a:	2b18      	cmp	r3, #24
 8003c8c:	f000 810e 	beq.w	8003eac <HAL_RCC_OscConfig+0xab6>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	f040 80e6 	bne.w	8003e66 <HAL_RCC_OscConfig+0xa70>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003c9e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003ca8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003cac:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8003cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb2:	f7fd fed9 	bl	8001a68 <HAL_GetTick>
 8003cb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x8d6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cba:	f7fd fed5 	bl	8001a68 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x8d6>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e176      	b.n	8003fba <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ccc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003cd0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1ed      	bne.n	8003cba <HAL_RCC_OscConfig+0x8c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cde:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003ce2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003ce6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ce8:	f64f 430c 	movw	r3, #64524	@ 0xfc0c
 8003cec:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003cfa:	0112      	lsls	r2, r2, #4
 8003cfc:	4311      	orrs	r1, r2
 8003cfe:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8003d02:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8003d06:	430b      	orrs	r3, r1
 8003d08:	6293      	str	r3, [r2, #40]	@ 0x28
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	025b      	lsls	r3, r3, #9
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d24:	3b01      	subs	r3, #1
 8003d26:	041b      	lsls	r3, r3, #16
 8003d28:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003d2c:	ea42 0103 	orr.w	r1, r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d34:	3b01      	subs	r3, #1
 8003d36:	061b      	lsls	r3, r3, #24
 8003d38:	f003 42fe 	and.w	r2, r3, #2130706432	@ 0x7f000000
 8003d3c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003d40:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003d44:	430a      	orrs	r2, r1
 8003d46:	631a      	str	r2, [r3, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003d48:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003d4c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d52:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003d56:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003d5a:	f022 0201 	bic.w	r2, r2, #1
 8003d5e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d60:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003d64:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003d68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d6a:	2307      	movs	r3, #7
 8003d6c:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 8003d70:	4013      	ands	r3, r2
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d76:	00d1      	lsls	r1, r2, #3
 8003d78:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8003d7c:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6353      	str	r3, [r2, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d84:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003d88:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8e:	f023 010c 	bic.w	r1, r3, #12
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d96:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003d9a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003da2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003da6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dac:	f023 0102 	bic.w	r1, r3, #2
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003db4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003db8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003dc0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003dc4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dca:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003dce:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003dd2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003dd6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003ddc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003de2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003de6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003dea:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003dee:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003df0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003df4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dfa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003dfe:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003e02:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003e06:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003e08:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003e0c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e12:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003e16:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e20:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003e24:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003e2e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003e32:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fd fe16 	bl	8001a68 <HAL_GetTick>
 8003e3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0xa5c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e40:	f7fd fe12 	bl	8001a68 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0xa5c>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e0b3      	b.n	8003fba <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e52:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003e56:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0ed      	beq.n	8003e40 <HAL_RCC_OscConfig+0xa4a>
 8003e64:	e0a8      	b.n	8003fb8 <HAL_RCC_OscConfig+0xbc2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e66:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003e6a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003e74:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003e78:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8003e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7e:	f7fd fdf3 	bl	8001a68 <HAL_GetTick>
 8003e82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0xaa2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e86:	f7fd fdef 	bl	8001a68 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0xaa2>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e090      	b.n	8003fba <HAL_RCC_OscConfig+0xbc4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e98:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003e9c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1ed      	bne.n	8003e86 <HAL_RCC_OscConfig+0xa90>
 8003eaa:	e085      	b.n	8003fb8 <HAL_RCC_OscConfig+0xbc2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003eac:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003eb0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003eb8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003ebc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d031      	beq.n	8003f30 <HAL_RCC_OscConfig+0xb3a>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f003 0203 	and.w	r2, r3, #3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d12a      	bne.n	8003f30 <HAL_RCC_OscConfig+0xb3a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d122      	bne.n	8003f30 <HAL_RCC_OscConfig+0xb3a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d11a      	bne.n	8003f30 <HAL_RCC_OscConfig+0xb3a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	0a5b      	lsrs	r3, r3, #9
 8003efe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f06:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d111      	bne.n	8003f30 <HAL_RCC_OscConfig+0xb3a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	0c1b      	lsrs	r3, r3, #16
 8003f10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f18:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d108      	bne.n	8003f30 <HAL_RCC_OscConfig+0xb3a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	0e1b      	lsrs	r3, r3, #24
 8003f22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f2a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCC_OscConfig+0xb3e>
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e042      	b.n	8003fba <HAL_RCC_OscConfig+0xbc4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003f34:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003f38:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3e:	08db      	lsrs	r3, r3, #3
 8003f40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f44:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d033      	beq.n	8003fb8 <HAL_RCC_OscConfig+0xbc2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003f50:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003f54:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f5a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003f5e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003f62:	f022 0201 	bic.w	r2, r2, #1
 8003f66:	62da      	str	r2, [r3, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f68:	f7fd fd7e 	bl	8001a68 <HAL_GetTick>
 8003f6c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003f6e:	bf00      	nop
 8003f70:	f7fd fd7a 	bl	8001a68 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d0f9      	beq.n	8003f70 <HAL_RCC_OscConfig+0xb7a>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f7c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003f80:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003f84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f86:	2307      	movs	r3, #7
 8003f88:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f92:	00d1      	lsls	r1, r2, #3
 8003f94:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8003f98:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	6353      	str	r3, [r2, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003fa0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003fa4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003faa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8003fae:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3730      	adds	r7, #48	@ 0x30
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b086      	sub	sp, #24
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e239      	b.n	800444a <HAL_RCC_ClockConfig+0x488>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003fda:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 030f 	and.w	r3, r3, #15
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d919      	bls.n	800401e <HAL_RCC_ClockConfig+0x5c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003fee:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f023 010f 	bic.w	r1, r3, #15
 8003ff8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ffc:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004006:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800400a:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d001      	beq.n	800401e <HAL_RCC_ClockConfig+0x5c>
    {
      return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e215      	b.n	800444a <HAL_RCC_ClockConfig+0x488>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b00      	cmp	r3, #0
 8004028:	d019      	beq.n	800405e <HAL_RCC_ClockConfig+0x9c>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004032:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800403c:	429a      	cmp	r2, r3
 800403e:	d90e      	bls.n	800405e <HAL_RCC_ClockConfig+0x9c>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004040:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004044:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691a      	ldr	r2, [r3, #16]
 8004052:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004056:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800405a:	430a      	orrs	r2, r1
 800405c:	619a      	str	r2, [r3, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d019      	beq.n	800409e <HAL_RCC_ClockConfig+0xdc>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004072:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800407c:	429a      	cmp	r2, r3
 800407e:	d90e      	bls.n	800409e <HAL_RCC_ClockConfig+0xdc>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004080:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004084:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695a      	ldr	r2, [r3, #20]
 8004092:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004096:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800409a:	430a      	orrs	r2, r1
 800409c:	61da      	str	r2, [r3, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0310 	and.w	r3, r3, #16
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d019      	beq.n	80040de <HAL_RCC_ClockConfig+0x11c>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80040b2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040bc:	429a      	cmp	r2, r3
 80040be:	d90e      	bls.n	80040de <HAL_RCC_ClockConfig+0x11c>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040c0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80040c4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699a      	ldr	r2, [r3, #24]
 80040d2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80040d6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80040da:	430a      	orrs	r2, r1
 80040dc:	61da      	str	r2, [r3, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d019      	beq.n	800411e <HAL_RCC_ClockConfig+0x15c>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69da      	ldr	r2, [r3, #28]
 80040ee:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80040f2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d90e      	bls.n	800411e <HAL_RCC_ClockConfig+0x15c>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004100:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004104:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69da      	ldr	r2, [r3, #28]
 8004112:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004116:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800411a:	430a      	orrs	r2, r1
 800411c:	621a      	str	r2, [r3, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d019      	beq.n	800415e <HAL_RCC_ClockConfig+0x19c>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004132:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	429a      	cmp	r2, r3
 800413e:	d90e      	bls.n	800415e <HAL_RCC_ClockConfig+0x19c>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004140:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004144:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f023 010f 	bic.w	r1, r3, #15
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004156:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800415a:	430a      	orrs	r2, r1
 800415c:	619a      	str	r2, [r3, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d070      	beq.n	800424c <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800416a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800416e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004180:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004184:	430a      	orrs	r2, r1
 8004186:	619a      	str	r2, [r3, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d10a      	bne.n	80041a6 <HAL_RCC_ClockConfig+0x1e4>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004190:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004194:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d12a      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x236>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e151      	b.n	800444a <HAL_RCC_ClockConfig+0x488>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d10a      	bne.n	80041c4 <HAL_RCC_ClockConfig+0x202>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041ae:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80041b2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d11b      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x236>
      {
        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e142      	b.n	800444a <HAL_RCC_ClockConfig+0x488>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d10a      	bne.n	80041e2 <HAL_RCC_ClockConfig+0x220>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041cc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80041d0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10c      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x236>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e133      	b.n	800444a <HAL_RCC_ClockConfig+0x488>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041e2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80041e6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x236>
      {
        return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e128      	b.n	800444a <HAL_RCC_ClockConfig+0x488>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041f8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80041fc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f023 0107 	bic.w	r1, r3, #7
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800420e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004212:	430a      	orrs	r2, r1
 8004214:	611a      	str	r2, [r3, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004216:	f7fd fc27 	bl	8001a68 <HAL_GetTick>
 800421a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421c:	e00a      	b.n	8004234 <HAL_RCC_ClockConfig+0x272>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800421e:	f7fd fc23 	bl	8001a68 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	f241 3288 	movw	r2, #5000	@ 0x1388
 800422c:	4293      	cmp	r3, r2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_ClockConfig+0x272>
      {
        return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e10a      	b.n	800444a <HAL_RCC_ClockConfig+0x488>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004234:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004238:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	429a      	cmp	r2, r3
 800424a:	d1e8      	bne.n	800421e <HAL_RCC_ClockConfig+0x25c>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d019      	beq.n	800428c <HAL_RCC_ClockConfig+0x2ca>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004260:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	429a      	cmp	r2, r3
 800426c:	d20e      	bcs.n	800428c <HAL_RCC_ClockConfig+0x2ca>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800426e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004272:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	f023 010f 	bic.w	r1, r3, #15
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004284:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004288:	430a      	orrs	r2, r1
 800428a:	619a      	str	r2, [r3, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800428c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004290:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	429a      	cmp	r2, r3
 800429e:	d219      	bcs.n	80042d4 <HAL_RCC_ClockConfig+0x312>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042a4:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f023 010f 	bic.w	r1, r3, #15
 80042ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042b2:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042c0:	f2c5 2300 	movt	r3, #20992	@ 0x5200
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x312>
    {
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0ba      	b.n	800444a <HAL_RCC_ClockConfig+0x488>
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d019      	beq.n	8004314 <HAL_RCC_ClockConfig+0x352>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80042e8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d20e      	bcs.n	8004314 <HAL_RCC_ClockConfig+0x352>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042f6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80042fa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800430c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004310:	430a      	orrs	r2, r1
 8004312:	619a      	str	r2, [r3, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d019      	beq.n	8004354 <HAL_RCC_ClockConfig+0x392>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	695a      	ldr	r2, [r3, #20]
 8004324:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004328:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004332:	429a      	cmp	r2, r3
 8004334:	d20e      	bcs.n	8004354 <HAL_RCC_ClockConfig+0x392>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004336:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800433a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	695a      	ldr	r2, [r3, #20]
 8004348:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800434c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004350:	430a      	orrs	r2, r1
 8004352:	61da      	str	r2, [r3, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	2b00      	cmp	r3, #0
 800435e:	d019      	beq.n	8004394 <HAL_RCC_ClockConfig+0x3d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699a      	ldr	r2, [r3, #24]
 8004364:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004368:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004372:	429a      	cmp	r2, r3
 8004374:	d20e      	bcs.n	8004394 <HAL_RCC_ClockConfig+0x3d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004376:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800437a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699a      	ldr	r2, [r3, #24]
 8004388:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800438c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004390:	430a      	orrs	r2, r1
 8004392:	61da      	str	r2, [r3, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d019      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x412>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69da      	ldr	r2, [r3, #28]
 80043a4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80043a8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d20e      	bcs.n	80043d4 <HAL_RCC_ClockConfig+0x412>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80043b6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80043ba:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	69da      	ldr	r2, [r3, #28]
 80043c8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80043cc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80043d0:	430a      	orrs	r2, r1
 80043d2:	621a      	str	r2, [r3, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043d4:	f000 f83e 	bl	8004454 <HAL_RCC_GetSysClockFreq>
 80043d8:	4601      	mov	r1, r0
 80043da:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80043de:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	0a1b      	lsrs	r3, r3, #8
 80043e6:	f003 020f 	and.w	r2, r3, #15
 80043ea:	f649 03a0 	movw	r3, #39072	@ 0x98a0
 80043ee:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80043f2:	5c9b      	ldrb	r3, [r3, r2]
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	fa21 f303 	lsr.w	r3, r1, r3
 80043fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043fe:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004402:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	f003 020f 	and.w	r2, r3, #15
 800440c:	f649 03a0 	movw	r3, #39072	@ 0x98a0
 8004410:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8004414:	5c9b      	ldrb	r3, [r3, r2]
 8004416:	f003 031f 	and.w	r3, r3, #31
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	40da      	lsrs	r2, r3
 800441e:	f240 0308 	movw	r3, #8
 8004422:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8004426:	601a      	str	r2, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004428:	f240 0304 	movw	r3, #4
 800442c:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004434:	f240 030c 	movw	r3, #12
 8004438:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fd fabe 	bl	80019c0 <HAL_InitTick>
 8004444:	4603      	mov	r3, r0
 8004446:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004448:	7bfb      	ldrb	r3, [r7, #15]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004454:	b480      	push	{r7}
 8004456:	b089      	sub	sp, #36	@ 0x24
 8004458:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800445a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800445e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004468:	2b18      	cmp	r3, #24
 800446a:	f200 81a5 	bhi.w	80047b8 <HAL_RCC_GetSysClockFreq+0x364>
 800446e:	a201      	add	r2, pc, #4	@ (adr r2, 8004474 <HAL_RCC_GetSysClockFreq+0x20>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	080044d9 	.word	0x080044d9
 8004478:	080047b9 	.word	0x080047b9
 800447c:	080047b9 	.word	0x080047b9
 8004480:	080047b9 	.word	0x080047b9
 8004484:	080047b9 	.word	0x080047b9
 8004488:	080047b9 	.word	0x080047b9
 800448c:	080047b9 	.word	0x080047b9
 8004490:	080047b9 	.word	0x080047b9
 8004494:	08004515 	.word	0x08004515
 8004498:	080047b9 	.word	0x080047b9
 800449c:	080047b9 	.word	0x080047b9
 80044a0:	080047b9 	.word	0x080047b9
 80044a4:	080047b9 	.word	0x080047b9
 80044a8:	080047b9 	.word	0x080047b9
 80044ac:	080047b9 	.word	0x080047b9
 80044b0:	080047b9 	.word	0x080047b9
 80044b4:	08004521 	.word	0x08004521
 80044b8:	080047b9 	.word	0x080047b9
 80044bc:	080047b9 	.word	0x080047b9
 80044c0:	080047b9 	.word	0x080047b9
 80044c4:	080047b9 	.word	0x080047b9
 80044c8:	080047b9 	.word	0x080047b9
 80044cc:	080047b9 	.word	0x080047b9
 80044d0:	080047b9 	.word	0x080047b9
 80044d4:	0800452d 	.word	0x0800452d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044d8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80044dc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00e      	beq.n	8004508 <HAL_RCC_GetSysClockFreq+0xb4>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044ea:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80044ee:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	08db      	lsrs	r3, r3, #3
 80044f6:	f003 0203 	and.w	r2, r3, #3
 80044fa:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80044fe:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8004502:	40d3      	lsrs	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004506:	e15d      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0x370>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004508:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800450c:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8004510:	61bb      	str	r3, [r7, #24]
      break;
 8004512:	e157      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0x370>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004514:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8004518:	f2c0 033d 	movt	r3, #61	@ 0x3d
 800451c:	61bb      	str	r3, [r7, #24]
      break;
 800451e:	e151      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0x370>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004520:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8004524:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8004528:	61bb      	str	r3, [r7, #24]
      break;
 800452a:	e14b      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0x370>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800452c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004530:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800453c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004540:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004546:	091b      	lsrs	r3, r3, #4
 8004548:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800454c:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800454e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004552:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800455e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004562:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004568:	08db      	lsrs	r3, r3, #3
 800456a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	fb02 f303 	mul.w	r3, r2, r3
 8004574:	ee07 3a90 	vmov	s15, r3
 8004578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457c:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 8115 	beq.w	80047b2 <HAL_RCC_GetSysClockFreq+0x35e>
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2b02      	cmp	r3, #2
 800458c:	f000 80a2 	beq.w	80046d4 <HAL_RCC_GetSysClockFreq+0x280>
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2b02      	cmp	r3, #2
 8004594:	f200 80c9 	bhi.w	800472a <HAL_RCC_GetSysClockFreq+0x2d6>
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_RCC_GetSysClockFreq+0x152>
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d06c      	beq.n	800467e <HAL_RCC_GetSysClockFreq+0x22a>
 80045a4:	e0c1      	b.n	800472a <HAL_RCC_GetSysClockFreq+0x2d6>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045a6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80045aa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d037      	beq.n	8004628 <HAL_RCC_GetSysClockFreq+0x1d4>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045b8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80045bc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	08db      	lsrs	r3, r3, #3
 80045c4:	f003 0203 	and.w	r2, r3, #3
 80045c8:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80045cc:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 80045d0:	40d3      	lsrs	r3, r2
 80045d2:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	ee07 3a90 	vmov	s15, r3
 80045e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ec:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80045f0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80045f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045fa:	ee07 3a90 	vmov	s15, r3
 80045fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004602:	ed97 6a02 	vldr	s12, [r7, #8]
 8004606:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 800460a:	ee05 3a90 	vmov	s11, r3
 800460e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800461a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800461e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004622:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004626:	e0ab      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x32c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004632:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8004636:	f6c4 4374 	movt	r3, #19572	@ 0x4c74
 800463a:	ee06 3a90 	vmov	s13, r3
 800463e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004642:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004646:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800464a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004650:	ee07 3a90 	vmov	s15, r3
 8004654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004658:	ed97 6a02 	vldr	s12, [r7, #8]
 800465c:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8004660:	ee05 3a90 	vmov	s11, r3
 8004664:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004668:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004678:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800467c:	e080      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x32c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	ee07 3a90 	vmov	s15, r3
 8004684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004688:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800468c:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 8004690:	ee06 3a90 	vmov	s13, r3
 8004694:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004698:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800469c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80046a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a6:	ee07 3a90 	vmov	s15, r3
 80046aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80046b2:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 80046b6:	ee05 3a90 	vmov	s11, r3
 80046ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046d2:	e055      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x32c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046de:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80046e2:	f6c4 23f4 	movt	r3, #19188	@ 0x4af4
 80046e6:	ee06 3a90 	vmov	s13, r3
 80046ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ee:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80046f2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80046f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fc:	ee07 3a90 	vmov	s15, r3
 8004700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004704:	ed97 6a02 	vldr	s12, [r7, #8]
 8004708:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 800470c:	ee05 3a90 	vmov	s11, r3
 8004710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004718:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800471c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004724:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004728:	e02a      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x32c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	ee07 3a90 	vmov	s15, r3
 8004730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004734:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8004738:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 800473c:	ee06 3a90 	vmov	s13, r3
 8004740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004744:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004748:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800474c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800475a:	ed97 6a02 	vldr	s12, [r7, #8]
 800475e:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8004762:	ee05 3a90 	vmov	s11, r3
 8004766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800476a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800476e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800477e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004780:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004784:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478a:	0a5b      	lsrs	r3, r3, #9
 800478c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004790:	3301      	adds	r3, #1
 8004792:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800479e:	edd7 6a07 	vldr	s13, [r7, #28]
 80047a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047aa:	ee17 3a90 	vmov	r3, s15
 80047ae:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0x370>
        sysclockfreq = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	61bb      	str	r3, [r7, #24]
      break;
 80047b6:	e005      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0x370>

    default:
      sysclockfreq = CSI_VALUE;
 80047b8:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80047bc:	f2c0 033d 	movt	r3, #61	@ 0x3d
 80047c0:	61bb      	str	r3, [r7, #24]
      break;
 80047c2:	bf00      	nop
  }

  return sysclockfreq;
 80047c4:	69bb      	ldr	r3, [r7, #24]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3724      	adds	r7, #36	@ 0x24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop

080047d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80047da:	f7ff fe3b 	bl	8004454 <HAL_RCC_GetSysClockFreq>
 80047de:	4601      	mov	r1, r0
 80047e0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80047e4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	0a1b      	lsrs	r3, r3, #8
 80047ec:	f003 020f 	and.w	r2, r3, #15
 80047f0:	f649 03a0 	movw	r3, #39072	@ 0x98a0
 80047f4:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80047f8:	5c9b      	ldrb	r3, [r3, r2]
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	fa21 f303 	lsr.w	r3, r1, r3
 8004802:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004804:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004808:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	f003 020f 	and.w	r2, r3, #15
 8004812:	f649 03a0 	movw	r3, #39072	@ 0x98a0
 8004816:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800481a:	5c9b      	ldrb	r3, [r3, r2]
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	40da      	lsrs	r2, r3
 8004824:	f240 0308 	movw	r3, #8
 8004828:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 800482c:	601a      	str	r2, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800482e:	f240 0304 	movw	r3, #4
 8004832:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800483a:	f240 0308 	movw	r3, #8
 800483e:	f2c2 4300 	movt	r3, #9216	@ 0x2400
 8004842:	681b      	ldr	r3, [r3, #0]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004850:	f7ff ffc0 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 8004854:	4601      	mov	r1, r0
 8004856:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800485a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f003 0207 	and.w	r2, r3, #7
 8004866:	f649 03a0 	movw	r3, #39072	@ 0x98a0
 800486a:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800486e:	5c9b      	ldrb	r3, [r3, r2]
 8004870:	f003 031f 	and.w	r3, r3, #31
 8004874:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004878:	4618      	mov	r0, r3
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004880:	f7ff ffa8 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 8004884:	4601      	mov	r1, r0
 8004886:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800488a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	0a1b      	lsrs	r3, r3, #8
 8004892:	f003 0207 	and.w	r2, r3, #7
 8004896:	f649 03a0 	movw	r3, #39072	@ 0x98a0
 800489a:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800489e:	5c9b      	ldrb	r3, [r3, r2]
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048b0:	b0ca      	sub	sp, #296	@ 0x128
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048b8:	2300      	movs	r3, #0
 80048ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048be:	2300      	movs	r3, #0
 80048c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048cc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80048d0:	2500      	movs	r5, #0
 80048d2:	ea54 0305 	orrs.w	r3, r4, r5
 80048d6:	d055      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80048d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048e2:	d035      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80048e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048e8:	d82e      	bhi.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80048ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048ee:	d020      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x86>
 80048f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048f4:	d828      	bhi.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80048fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048fe:	d00d      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004900:	e022      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004902:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004906:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800490a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004910:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004918:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800491a:	e01a      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xa6>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800491c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004920:	3308      	adds	r3, #8
 8004922:	2102      	movs	r1, #2
 8004924:	4618      	mov	r0, r3
 8004926:	f002 fe41 	bl	80075ac <RCCEx_PLL2_Config>
 800492a:	4603      	mov	r3, r0
 800492c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004930:	e00f      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xa6>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004936:	3328      	adds	r3, #40	@ 0x28
 8004938:	2102      	movs	r1, #2
 800493a:	4618      	mov	r0, r3
 800493c:	f002 ff34 	bl	80077a8 <RCCEx_PLL3_Config>
 8004940:	4603      	mov	r3, r0
 8004942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004946:	e004      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xa6>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800494e:	e000      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xa6>
        break;
 8004950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004952:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004956:	2b00      	cmp	r3, #0
 8004958:	d110      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xd0>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800495a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800495e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004964:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800496e:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004972:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004976:	430b      	orrs	r3, r1
 8004978:	6513      	str	r3, [r2, #80]	@ 0x50
 800497a:	e003      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004980:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004990:	f04f 0900 	mov.w	r9, #0
 8004994:	ea58 0309 	orrs.w	r3, r8, r9
 8004998:	d053      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800499a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d830      	bhi.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80049a4:	a201      	add	r2, pc, #4	@ (adr r2, 80049ac <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80049a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049aa:	bf00      	nop
 80049ac:	080049c1 	.word	0x080049c1
 80049b0:	080049db 	.word	0x080049db
 80049b4:	080049f1 	.word	0x080049f1
 80049b8:	08004a0f 	.word	0x08004a0f
 80049bc:	08004a0f 	.word	0x08004a0f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80049c4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80049c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ca:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80049ce:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80049d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049d8:	e01a      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x164>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049de:	3308      	adds	r3, #8
 80049e0:	2100      	movs	r1, #0
 80049e2:	4618      	mov	r0, r3
 80049e4:	f002 fde2 	bl	80075ac <RCCEx_PLL2_Config>
 80049e8:	4603      	mov	r3, r0
 80049ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049ee:	e00f      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x164>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f4:	3328      	adds	r3, #40	@ 0x28
 80049f6:	2100      	movs	r1, #0
 80049f8:	4618      	mov	r0, r3
 80049fa:	f002 fed5 	bl	80077a8 <RCCEx_PLL3_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a04:	e004      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x164>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a0c:	e000      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x164>
        break;
 8004a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d110      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x18e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a18:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004a1c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a22:	f023 0107 	bic.w	r1, r3, #7
 8004a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004a30:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004a34:	430b      	orrs	r3, r1
 8004a36:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a38:	e003      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x196>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004a4e:	f04f 0b00 	mov.w	fp, #0
 8004a52:	ea5a 030b 	orrs.w	r3, sl, fp
 8004a56:	d058      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a62:	d036      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x226>
 8004a64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a68:	d82f      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004a6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a6c:	d033      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a70:	d82b      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004a72:	2b80      	cmp	r3, #128	@ 0x80
 8004a74:	d01e      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004a76:	2b80      	cmp	r3, #128	@ 0x80
 8004a78:	d827      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004a7e:	2b40      	cmp	r3, #64	@ 0x40
 8004a80:	d00d      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8004a82:	e022      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a84:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004a88:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8e:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004a92:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004a96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a9c:	e01c      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x22c>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa2:	3308      	adds	r3, #8
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f002 fd80 	bl	80075ac <RCCEx_PLL2_Config>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004ab2:	e011      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x22c>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab8:	3328      	adds	r3, #40	@ 0x28
 8004aba:	2100      	movs	r1, #0
 8004abc:	4618      	mov	r0, r3
 8004abe:	f002 fe73 	bl	80077a8 <RCCEx_PLL3_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004ac8:	e006      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ad0:	e002      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        break;
 8004ad2:	bf00      	nop
 8004ad4:	e000      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        break;
 8004ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d110      	bne.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x256>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004ae0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004ae4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aea:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af4:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004af8:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004afc:	430b      	orrs	r3, r1
 8004afe:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b00:	e003      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004b16:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004b20:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004b24:	460b      	mov	r3, r1
 8004b26:	4313      	orrs	r3, r2
 8004b28:	d05f      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b36:	d03b      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004b38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b3c:	d834      	bhi.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004b3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004b42:	d037      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004b44:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004b48:	d82e      	bhi.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004b4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b4e:	d020      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8004b50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b54:	d828      	bhi.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8004b5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b5e:	d00d      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004b60:	e022      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b62:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004b66:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004b70:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b7a:	e01c      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x30a>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b80:	3308      	adds	r3, #8
 8004b82:	2100      	movs	r1, #0
 8004b84:	4618      	mov	r0, r3
 8004b86:	f002 fd11 	bl	80075ac <RCCEx_PLL2_Config>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004b90:	e011      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x30a>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b96:	3328      	adds	r3, #40	@ 0x28
 8004b98:	2100      	movs	r1, #0
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f002 fe04 	bl	80077a8 <RCCEx_PLL3_Config>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ba6:	e006      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bae:	e002      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
        break;
 8004bb0:	bf00      	nop
 8004bb2:	e000      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
        break;
 8004bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d111      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004bbe:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004bc2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004bd4:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004bd8:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	6593      	str	r3, [r2, #88]	@ 0x58
 8004be0:	e003      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x33e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004be6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004bf6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004c00:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004c04:	460b      	mov	r3, r1
 8004c06:	4313      	orrs	r3, r2
 8004c08:	d05f      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004c12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c16:	d03b      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004c18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c1c:	d834      	bhi.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8004c1e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c22:	d037      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004c24:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c28:	d82e      	bhi.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8004c2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c2e:	d020      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8004c30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c34:	d828      	bhi.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8004c3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c3e:	d00d      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8004c40:	e022      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c42:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004c46:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004c50:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c5a:	e01c      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c60:	3308      	adds	r3, #8
 8004c62:	2100      	movs	r1, #0
 8004c64:	4618      	mov	r0, r3
 8004c66:	f002 fca1 	bl	80075ac <RCCEx_PLL2_Config>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004c70:	e011      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c76:	3328      	adds	r3, #40	@ 0x28
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f002 fd94 	bl	80077a8 <RCCEx_PLL3_Config>
 8004c80:	4603      	mov	r3, r0
 8004c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c86:	e006      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c8e:	e002      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        break;
 8004c90:	bf00      	nop
 8004c92:	e000      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        break;
 8004c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d111      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004c9e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004ca2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004cb4:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004cb8:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cc0:	e003      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x41e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004cd6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004cda:	2300      	movs	r3, #0
 8004cdc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004ce0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	d046      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cf0:	2b30      	cmp	r3, #48	@ 0x30
 8004cf2:	d025      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004cf4:	2b30      	cmp	r3, #48	@ 0x30
 8004cf6:	d81f      	bhi.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	d012      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d81b      	bhi.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01f      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004d04:	2b10      	cmp	r3, #16
 8004d06:	d117      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d08:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004d0c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d12:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004d16:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004d20:	e011      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x49a>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d26:	3308      	adds	r3, #8
 8004d28:	2102      	movs	r1, #2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f002 fc3e 	bl	80075ac <RCCEx_PLL2_Config>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004d36:	e006      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x49a>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d3e:	e002      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x49a>
        break;
 8004d40:	bf00      	nop
 8004d42:	e000      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x49a>
        break;
 8004d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d110      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d4e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004d52:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d58:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d62:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004d66:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004d6a:	430b      	orrs	r3, r1
 8004d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d6e:	e003      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004d84:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004d8e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4313      	orrs	r3, r2
 8004d96:	d05d      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004da2:	d03b      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004da4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004da8:	d834      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x568>
 8004daa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004dae:	d037      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8004db0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004db4:	d82e      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x568>
 8004db6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dba:	d020      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x552>
 8004dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dc0:	d828      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x568>
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dca:	d00d      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8004dcc:	e022      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x568>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dce:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004dd2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd8:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004ddc:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004de4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004de6:	e01c      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x576>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dec:	3308      	adds	r3, #8
 8004dee:	2100      	movs	r1, #0
 8004df0:	4618      	mov	r0, r3
 8004df2:	f002 fbdb 	bl	80075ac <RCCEx_PLL2_Config>
 8004df6:	4603      	mov	r3, r0
 8004df8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004dfc:	e011      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x576>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e02:	3328      	adds	r3, #40	@ 0x28
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f002 fcce 	bl	80077a8 <RCCEx_PLL3_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e12:	e006      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x576>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e1a:	e002      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x576>
        break;
 8004e1c:	bf00      	nop
 8004e1e:	e000      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x576>
        break;
 8004e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d110      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e2a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004e2e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e34:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e3e:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004e42:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004e46:	430b      	orrs	r3, r1
 8004e48:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e4a:	e003      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004e60:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e64:	2300      	movs	r3, #0
 8004e66:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004e6a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4313      	orrs	r3, r2
 8004e72:	d059      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e7e:	d033      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8004e80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e84:	d82c      	bhi.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004e86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e8a:	d02f      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x640>
 8004e8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e90:	d826      	bhi.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004e92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e96:	d02b      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x644>
 8004e98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e9c:	d820      	bhi.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004e9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ea2:	d012      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x61e>
 8004ea4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ea8:	d81a      	bhi.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d022      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb2:	d115      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x634>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb8:	3308      	adds	r3, #8
 8004eba:	2101      	movs	r1, #1
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f002 fb75 	bl	80075ac <RCCEx_PLL2_Config>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ec8:	e015      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ece:	3328      	adds	r3, #40	@ 0x28
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f002 fc68 	bl	80077a8 <RCCEx_PLL3_Config>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ede:	e00a      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x64a>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ee6:	e006      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x64a>
        break;
 8004ee8:	bf00      	nop
 8004eea:	e004      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x64a>
        break;
 8004eec:	bf00      	nop
 8004eee:	e002      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x64a>
        break;
 8004ef0:	bf00      	nop
 8004ef2:	e000      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x64a>
        break;
 8004ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d110      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004efe:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004f02:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f08:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f12:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004f16:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004f1a:	430b      	orrs	r3, r1
 8004f1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f1e:	e003      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f30:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004f34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f3e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4313      	orrs	r3, r2
 8004f46:	d05b      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x754>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f54:	d033      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x712>
 8004f56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f5a:	d82c      	bhi.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8004f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f60:	d02f      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x716>
 8004f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f66:	d826      	bhi.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8004f68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f6c:	d02b      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x71a>
 8004f6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f72:	d820      	bhi.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8004f74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f78:	d012      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8004f7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f7e:	d81a      	bhi.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d022      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8004f84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f88:	d115      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8e:	3308      	adds	r3, #8
 8004f90:	2101      	movs	r1, #1
 8004f92:	4618      	mov	r0, r3
 8004f94:	f002 fb0a 	bl	80075ac <RCCEx_PLL2_Config>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f9e:	e015      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x720>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa4:	3328      	adds	r3, #40	@ 0x28
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f002 fbfd 	bl	80077a8 <RCCEx_PLL3_Config>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004fb4:	e00a      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x720>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fbc:	e006      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x720>
        break;
 8004fbe:	bf00      	nop
 8004fc0:	e004      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x720>
        break;
 8004fc2:	bf00      	nop
 8004fc4:	e002      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x720>
        break;
 8004fc6:	bf00      	nop
 8004fc8:	e000      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x720>
        break;
 8004fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d111      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004fd4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8004fd8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fde:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004fea:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8004fee:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ff6:	e003      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x754>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ffc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800500c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005010:	2300      	movs	r3, #0
 8005012:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005016:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800501a:	460b      	mov	r3, r1
 800501c:	4313      	orrs	r3, r2
 800501e:	d043      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800502a:	d014      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800502c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005030:	d81c      	bhi.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8005032:	2b00      	cmp	r3, #0
 8005034:	d01e      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8005036:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800503a:	d117      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800503c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005040:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005046:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 800504a:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 800504e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005052:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005054:	e00f      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x7ca>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800505a:	3308      	adds	r3, #8
 800505c:	2101      	movs	r1, #1
 800505e:	4618      	mov	r0, r3
 8005060:	f002 faa4 	bl	80075ac <RCCEx_PLL2_Config>
 8005064:	4603      	mov	r3, r0
 8005066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800506a:	e004      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005072:	e000      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
        break;
 8005074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800507a:	2b00      	cmp	r3, #0
 800507c:	d110      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800507e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005082:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005088:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800508c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005092:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005096:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 800509a:	430b      	orrs	r3, r1
 800509c:	6513      	str	r3, [r2, #80]	@ 0x50
 800509e:	e003      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80050a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80050b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050b8:	2300      	movs	r3, #0
 80050ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80050be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4313      	orrs	r3, r2
 80050c6:	d045      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80050c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d822      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 80050d2:	a201      	add	r2, pc, #4	@ (adr r2, 80050d8 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80050d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d8:	08005121 	.word	0x08005121
 80050dc:	080050e9 	.word	0x080050e9
 80050e0:	08005103 	.word	0x08005103
 80050e4:	08005121 	.word	0x08005121
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050e8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80050ec:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80050f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f2:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80050f6:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80050fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005100:	e00f      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x876>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005106:	3308      	adds	r3, #8
 8005108:	2102      	movs	r1, #2
 800510a:	4618      	mov	r0, r3
 800510c:	f002 fa4e 	bl	80075ac <RCCEx_PLL2_Config>
 8005110:	4603      	mov	r3, r0
 8005112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005116:	e004      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x876>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800511e:	e000      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x876>
        break;
 8005120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005126:	2b00      	cmp	r3, #0
 8005128:	d110      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800512a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800512e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005134:	f023 0103 	bic.w	r1, r3, #3
 8005138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800513e:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005142:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005146:	430b      	orrs	r3, r1
 8005148:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800514a:	e003      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005160:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005164:	2300      	movs	r3, #0
 8005166:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800516a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800516e:	460b      	mov	r3, r1
 8005170:	4313      	orrs	r3, r2
 8005172:	f000 80d0 	beq.w	8005316 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005176:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 800517a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f44f 4290 	mov.w	r2, #18432	@ 0x4800
 8005184:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800518c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800518e:	f7fc fc6b 	bl	8001a68 <HAL_GetTick>
 8005192:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005196:	e00b      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x904>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005198:	f7fc fc66 	bl	8001a68 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b64      	cmp	r3, #100	@ 0x64
 80051a6:	d903      	bls.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x904>
      {
        ret = HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051ae:	e008      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x916>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051b0:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80051b4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0ea      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      }
    }

    if (ret == HAL_OK)
 80051c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f040 80a1 	bne.w	800530e <HAL_RCCEx_PeriphCLKConfig+0xa62>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80051cc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80051d0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80051d4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80051d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051de:	4053      	eors	r3, r2
 80051e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d027      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051e8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80051ec:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80051f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051fa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80051fe:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005204:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005208:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 800520c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005210:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005212:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005216:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800521a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800521c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005220:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005228:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800522a:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 800522e:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005232:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005236:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800523c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005240:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005244:	d11b      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005246:	f7fc fc0f 	bl	8001a68 <HAL_GetTick>
 800524a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800524e:	e00d      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x9c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005250:	f7fc fc0a 	bl	8001a68 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800525a:	1ad2      	subs	r2, r2, r3
 800525c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005260:	429a      	cmp	r2, r3
 8005262:	d903      	bls.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x9c0>
          {
            ret = HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800526a:	e008      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800526c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005270:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0e8      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
          }
        }
      }

      if (ret == HAL_OK)
 800527e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005282:	2b00      	cmp	r3, #0
 8005284:	d13e      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xa58>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800528a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800528e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005292:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005296:	d117      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8005298:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800529c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80052a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052ae:	091a      	lsrs	r2, r3, #4
 80052b0:	f64f 73cf 	movw	r3, #65487	@ 0xffcf
 80052b4:	f2c0 03ff 	movt	r3, #255	@ 0xff
 80052b8:	4013      	ands	r3, r2
 80052ba:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80052be:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80052c2:	430b      	orrs	r3, r1
 80052c4:	6113      	str	r3, [r2, #16]
 80052c6:	e00b      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80052c8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80052cc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80052d6:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80052da:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80052de:	6113      	str	r3, [r2, #16]
 80052e0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80052e4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80052e8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80052ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052f6:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80052fa:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80052fe:	430b      	orrs	r3, r1
 8005300:	6713      	str	r3, [r2, #112]	@ 0x70
 8005302:	e008      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005308:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800530c:	e003      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005312:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531e:	f002 0301 	and.w	r3, r2, #1
 8005322:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005326:	2300      	movs	r3, #0
 8005328:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800532c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005330:	460b      	mov	r3, r1
 8005332:	4313      	orrs	r3, r2
 8005334:	f000 808e 	beq.w	8005454 <HAL_RCCEx_PeriphCLKConfig+0xba8>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800533e:	2b28      	cmp	r3, #40	@ 0x28
 8005340:	d86a      	bhi.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xb6c>
 8005342:	a201      	add	r2, pc, #4	@ (adr r2, 8005348 <HAL_RCCEx_PeriphCLKConfig+0xa9c>)
 8005344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005348:	08005421 	.word	0x08005421
 800534c:	08005419 	.word	0x08005419
 8005350:	08005419 	.word	0x08005419
 8005354:	08005419 	.word	0x08005419
 8005358:	08005419 	.word	0x08005419
 800535c:	08005419 	.word	0x08005419
 8005360:	08005419 	.word	0x08005419
 8005364:	08005419 	.word	0x08005419
 8005368:	080053ed 	.word	0x080053ed
 800536c:	08005419 	.word	0x08005419
 8005370:	08005419 	.word	0x08005419
 8005374:	08005419 	.word	0x08005419
 8005378:	08005419 	.word	0x08005419
 800537c:	08005419 	.word	0x08005419
 8005380:	08005419 	.word	0x08005419
 8005384:	08005419 	.word	0x08005419
 8005388:	08005403 	.word	0x08005403
 800538c:	08005419 	.word	0x08005419
 8005390:	08005419 	.word	0x08005419
 8005394:	08005419 	.word	0x08005419
 8005398:	08005419 	.word	0x08005419
 800539c:	08005419 	.word	0x08005419
 80053a0:	08005419 	.word	0x08005419
 80053a4:	08005419 	.word	0x08005419
 80053a8:	08005421 	.word	0x08005421
 80053ac:	08005419 	.word	0x08005419
 80053b0:	08005419 	.word	0x08005419
 80053b4:	08005419 	.word	0x08005419
 80053b8:	08005419 	.word	0x08005419
 80053bc:	08005419 	.word	0x08005419
 80053c0:	08005419 	.word	0x08005419
 80053c4:	08005419 	.word	0x08005419
 80053c8:	08005421 	.word	0x08005421
 80053cc:	08005419 	.word	0x08005419
 80053d0:	08005419 	.word	0x08005419
 80053d4:	08005419 	.word	0x08005419
 80053d8:	08005419 	.word	0x08005419
 80053dc:	08005419 	.word	0x08005419
 80053e0:	08005419 	.word	0x08005419
 80053e4:	08005419 	.word	0x08005419
 80053e8:	08005421 	.word	0x08005421
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f0:	3308      	adds	r3, #8
 80053f2:	2101      	movs	r1, #1
 80053f4:	4618      	mov	r0, r3
 80053f6:	f002 f8d9 	bl	80075ac <RCCEx_PLL2_Config>
 80053fa:	4603      	mov	r3, r0
 80053fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005400:	e00f      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xb76>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005406:	3328      	adds	r3, #40	@ 0x28
 8005408:	2101      	movs	r1, #1
 800540a:	4618      	mov	r0, r3
 800540c:	f002 f9cc 	bl	80077a8 <RCCEx_PLL3_Config>
 8005410:	4603      	mov	r3, r0
 8005412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005416:	e004      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800541e:	e000      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        break;
 8005420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005426:	2b00      	cmp	r3, #0
 8005428:	d110      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800542a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800542e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005434:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800543c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800543e:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005442:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005446:	430b      	orrs	r3, r1
 8005448:	6553      	str	r3, [r2, #84]	@ 0x54
 800544a:	e003      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xba8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005450:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545c:	f002 0302 	and.w	r3, r2, #2
 8005460:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005464:	2300      	movs	r3, #0
 8005466:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800546a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800546e:	460b      	mov	r3, r1
 8005470:	4313      	orrs	r3, r2
 8005472:	d047      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xc58>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005478:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800547a:	2b05      	cmp	r3, #5
 800547c:	d824      	bhi.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
 800547e:	a201      	add	r2, pc, #4	@ (adr r2, 8005484 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005484:	080054d1 	.word	0x080054d1
 8005488:	0800549d 	.word	0x0800549d
 800548c:	080054b3 	.word	0x080054b3
 8005490:	080054d1 	.word	0x080054d1
 8005494:	080054d1 	.word	0x080054d1
 8005498:	080054d1 	.word	0x080054d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800549c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a0:	3308      	adds	r3, #8
 80054a2:	2101      	movs	r1, #1
 80054a4:	4618      	mov	r0, r3
 80054a6:	f002 f881 	bl	80075ac <RCCEx_PLL2_Config>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80054b0:	e00f      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b6:	3328      	adds	r3, #40	@ 0x28
 80054b8:	2101      	movs	r1, #1
 80054ba:	4618      	mov	r0, r3
 80054bc:	f002 f974 	bl	80077a8 <RCCEx_PLL3_Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80054c6:	e004      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054ce:	e000      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
        break;
 80054d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d110      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xc50>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80054da:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80054de:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80054e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e4:	f023 0107 	bic.w	r1, r3, #7
 80054e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054ee:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80054f2:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80054f6:	430b      	orrs	r3, r1
 80054f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80054fa:	e003      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xc58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005500:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	f002 0304 	and.w	r3, r2, #4
 8005510:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005514:	2300      	movs	r3, #0
 8005516:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800551a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800551e:	460b      	mov	r3, r1
 8005520:	4313      	orrs	r3, r2
 8005522:	d04a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800552c:	2b05      	cmp	r3, #5
 800552e:	d825      	bhi.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8005530:	a201      	add	r2, pc, #4	@ (adr r2, 8005538 <HAL_RCCEx_PeriphCLKConfig+0xc8c>)
 8005532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005536:	bf00      	nop
 8005538:	08005585 	.word	0x08005585
 800553c:	08005551 	.word	0x08005551
 8005540:	08005567 	.word	0x08005567
 8005544:	08005585 	.word	0x08005585
 8005548:	08005585 	.word	0x08005585
 800554c:	08005585 	.word	0x08005585
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005554:	3308      	adds	r3, #8
 8005556:	2101      	movs	r1, #1
 8005558:	4618      	mov	r0, r3
 800555a:	f002 f827 	bl	80075ac <RCCEx_PLL2_Config>
 800555e:	4603      	mov	r3, r0
 8005560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005564:	e00f      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xcda>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800556a:	3328      	adds	r3, #40	@ 0x28
 800556c:	2101      	movs	r1, #1
 800556e:	4618      	mov	r0, r3
 8005570:	f002 f91a 	bl	80077a8 <RCCEx_PLL3_Config>
 8005574:	4603      	mov	r3, r0
 8005576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800557a:	e004      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xcda>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005582:	e000      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xcda>
        break;
 8005584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800558a:	2b00      	cmp	r3, #0
 800558c:	d111      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800558e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005592:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005598:	f023 0107 	bic.w	r1, r3, #7
 800559c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055a4:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80055a8:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80055ac:	430b      	orrs	r3, r1
 80055ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80055b0:	e003      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	f002 0320 	and.w	r3, r2, #32
 80055c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055ca:	2300      	movs	r3, #0
 80055cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80055d4:	460b      	mov	r3, r1
 80055d6:	4313      	orrs	r3, r2
 80055d8:	d05b      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055e6:	d033      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 80055e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055ec:	d82c      	bhi.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
 80055ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f2:	d02f      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xda8>
 80055f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f8:	d826      	bhi.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
 80055fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80055fe:	d02b      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8005600:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005604:	d820      	bhi.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
 8005606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800560a:	d012      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800560c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005610:	d81a      	bhi.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
 8005612:	2b00      	cmp	r3, #0
 8005614:	d022      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8005616:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800561a:	d115      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800561c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005620:	3308      	adds	r3, #8
 8005622:	2100      	movs	r1, #0
 8005624:	4618      	mov	r0, r3
 8005626:	f001 ffc1 	bl	80075ac <RCCEx_PLL2_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005630:	e015      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xdb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005636:	3328      	adds	r3, #40	@ 0x28
 8005638:	2102      	movs	r1, #2
 800563a:	4618      	mov	r0, r3
 800563c:	f002 f8b4 	bl	80077a8 <RCCEx_PLL3_Config>
 8005640:	4603      	mov	r3, r0
 8005642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005646:	e00a      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800564e:	e006      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 8005650:	bf00      	nop
 8005652:	e004      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 8005654:	bf00      	nop
 8005656:	e002      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 8005658:	bf00      	nop
 800565a:	e000      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 800565c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800565e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005662:	2b00      	cmp	r3, #0
 8005664:	d111      	bne.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xdde>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005666:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800566a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800566e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005670:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800567c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005680:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005684:	430b      	orrs	r3, r1
 8005686:	6553      	str	r3, [r2, #84]	@ 0x54
 8005688:	e003      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xde6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800568e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800569e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80056a2:	2300      	movs	r3, #0
 80056a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80056a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80056ac:	460b      	mov	r3, r1
 80056ae:	4313      	orrs	r3, r2
 80056b0:	d05b      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xebe>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80056b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056ba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80056be:	d033      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
 80056c0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80056c4:	d82c      	bhi.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80056c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ca:	d02f      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xe80>
 80056cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056d0:	d826      	bhi.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80056d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056d6:	d02b      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xe84>
 80056d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056dc:	d820      	bhi.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80056de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056e2:	d012      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xe5e>
 80056e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056e8:	d81a      	bhi.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d022      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xe88>
 80056ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056f2:	d115      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xe74>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f8:	3308      	adds	r3, #8
 80056fa:	2100      	movs	r1, #0
 80056fc:	4618      	mov	r0, r3
 80056fe:	f001 ff55 	bl	80075ac <RCCEx_PLL2_Config>
 8005702:	4603      	mov	r3, r0
 8005704:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005708:	e015      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xe8a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800570a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570e:	3328      	adds	r3, #40	@ 0x28
 8005710:	2102      	movs	r1, #2
 8005712:	4618      	mov	r0, r3
 8005714:	f002 f848 	bl	80077a8 <RCCEx_PLL3_Config>
 8005718:	4603      	mov	r3, r0
 800571a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800571e:	e00a      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005726:	e006      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
        break;
 8005728:	bf00      	nop
 800572a:	e004      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
        break;
 800572c:	bf00      	nop
 800572e:	e002      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
        break;
 8005730:	bf00      	nop
 8005732:	e000      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
        break;
 8005734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800573a:	2b00      	cmp	r3, #0
 800573c:	d111      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800573e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005742:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005748:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800574c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005750:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005754:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005758:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 800575c:	430b      	orrs	r3, r1
 800575e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005760:	e003      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xebe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005766:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800576a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005772:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005776:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800577a:	2300      	movs	r3, #0
 800577c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005780:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005784:	460b      	mov	r3, r1
 8005786:	4313      	orrs	r3, r2
 8005788:	d05b      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xf96>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800578a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800578e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005792:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005796:	d033      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xf54>
 8005798:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800579c:	d82c      	bhi.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xf4c>
 800579e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057a2:	d02f      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xf58>
 80057a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057a8:	d826      	bhi.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xf4c>
 80057aa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80057ae:	d02b      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xf5c>
 80057b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80057b4:	d820      	bhi.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xf4c>
 80057b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057ba:	d012      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
 80057bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057c0:	d81a      	bhi.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xf4c>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d022      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xf60>
 80057c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ca:	d115      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xf4c>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d0:	3308      	adds	r3, #8
 80057d2:	2100      	movs	r1, #0
 80057d4:	4618      	mov	r0, r3
 80057d6:	f001 fee9 	bl	80075ac <RCCEx_PLL2_Config>
 80057da:	4603      	mov	r3, r0
 80057dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80057e0:	e015      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xf62>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e6:	3328      	adds	r3, #40	@ 0x28
 80057e8:	2102      	movs	r1, #2
 80057ea:	4618      	mov	r0, r3
 80057ec:	f001 ffdc 	bl	80077a8 <RCCEx_PLL3_Config>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80057f6:	e00a      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xf62>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057fe:	e006      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xf62>
        break;
 8005800:	bf00      	nop
 8005802:	e004      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xf62>
        break;
 8005804:	bf00      	nop
 8005806:	e002      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xf62>
        break;
 8005808:	bf00      	nop
 800580a:	e000      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xf62>
        break;
 800580c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800580e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005812:	2b00      	cmp	r3, #0
 8005814:	d111      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xf8e>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005816:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800581a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800581e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005820:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005828:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800582c:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005830:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005834:	430b      	orrs	r3, r1
 8005836:	6593      	str	r3, [r2, #88]	@ 0x58
 8005838:	e003      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xf96>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800583e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584a:	f002 0308 	and.w	r3, r2, #8
 800584e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005852:	2300      	movs	r3, #0
 8005854:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005858:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800585c:	460b      	mov	r3, r1
 800585e:	4313      	orrs	r3, r2
 8005860:	d024      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x1000>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800586a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800586e:	d10c      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xfde>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005874:	3328      	adds	r3, #40	@ 0x28
 8005876:	2102      	movs	r1, #2
 8005878:	4618      	mov	r0, r3
 800587a:	f001 ff95 	bl	80077a8 <RCCEx_PLL3_Config>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xfde>
      {
        status = HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800588a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800588e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005894:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800589c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058a0:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80058a4:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80058a8:	430b      	orrs	r3, r1
 80058aa:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b4:	f002 0310 	and.w	r3, r2, #16
 80058b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058bc:	2300      	movs	r3, #0
 80058be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80058c2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80058c6:	460b      	mov	r3, r1
 80058c8:	4313      	orrs	r3, r2
 80058ca:	d024      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x106a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80058cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058d8:	d10c      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1048>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058de:	3328      	adds	r3, #40	@ 0x28
 80058e0:	2102      	movs	r1, #2
 80058e2:	4618      	mov	r0, r3
 80058e4:	f001 ff60 	bl	80077a8 <RCCEx_PLL3_Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1048>
      {
        status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058f4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80058f8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80058fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005906:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800590a:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 800590e:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005912:	430b      	orrs	r3, r1
 8005914:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005922:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005926:	2300      	movs	r3, #0
 8005928:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800592c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005930:	460b      	mov	r3, r1
 8005932:	4313      	orrs	r3, r2
 8005934:	d044      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1114>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800593e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005942:	d022      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x10de>
 8005944:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005948:	d81b      	bhi.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x10d6>
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x10aa>
 800594e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005952:	d00b      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8005954:	e015      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x10d6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595a:	3308      	adds	r3, #8
 800595c:	2100      	movs	r1, #0
 800595e:	4618      	mov	r0, r3
 8005960:	f001 fe24 	bl	80075ac <RCCEx_PLL2_Config>
 8005964:	4603      	mov	r3, r0
 8005966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800596a:	e00f      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x10e0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800596c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005970:	3328      	adds	r3, #40	@ 0x28
 8005972:	2102      	movs	r1, #2
 8005974:	4618      	mov	r0, r3
 8005976:	f001 ff17 	bl	80077a8 <RCCEx_PLL3_Config>
 800597a:	4603      	mov	r3, r0
 800597c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005980:	e004      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005988:	e000      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
        break;
 800598a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005990:	2b00      	cmp	r3, #0
 8005992:	d111      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x110c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005994:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005998:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800599c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800599e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80059a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059aa:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80059ae:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80059b2:	430b      	orrs	r3, r1
 80059b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80059b6:	e003      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1114>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80059cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059ce:	2300      	movs	r3, #0
 80059d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80059d2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80059d6:	460b      	mov	r3, r1
 80059d8:	4313      	orrs	r3, r2
 80059da:	d047      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80059dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059e8:	d025      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80059ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059ee:	d81e      	bhi.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x1182>
 80059f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059f4:	d003      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x1152>
 80059f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059fa:	d00d      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80059fc:	e017      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x1182>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059fe:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005a02:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a08:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005a0c:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a16:	e00f      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x118c>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1c:	3328      	adds	r3, #40	@ 0x28
 8005a1e:	2101      	movs	r1, #1
 8005a20:	4618      	mov	r0, r3
 8005a22:	f001 fec1 	bl	80077a8 <RCCEx_PLL3_Config>
 8005a26:	4603      	mov	r3, r0
 8005a28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a2c:	e004      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x118c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a34:	e000      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x118c>
        break;
 8005a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d111      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x11b8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a40:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005a44:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a4a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a56:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005a5a:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005a5e:	430b      	orrs	r3, r1
 8005a60:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a62:	e003      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005a78:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	677b      	str	r3, [r7, #116]	@ 0x74
 8005a7e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005a82:	460b      	mov	r3, r1
 8005a84:	4313      	orrs	r3, r2
 8005a86:	d03d      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x11ee>
 8005a92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a96:	d00d      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1208>
 8005a98:	e017      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x121e>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a9a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005a9e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa4:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005aa8:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ab0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005ab2:	e00e      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x1226>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab8:	3308      	adds	r3, #8
 8005aba:	2102      	movs	r1, #2
 8005abc:	4618      	mov	r0, r3
 8005abe:	f001 fd75 	bl	80075ac <RCCEx_PLL2_Config>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005ac8:	e003      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x1226>

      default:
        ret = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d110      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x1250>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005ada:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005ade:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ae4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aee:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005af2:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005af6:	430b      	orrs	r3, r1
 8005af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005afa:	e003      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1258>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005b10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b12:	2300      	movs	r3, #0
 8005b14:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b16:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	d00c      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b24:	3328      	adds	r3, #40	@ 0x28
 8005b26:	2102      	movs	r1, #2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f001 fe3d 	bl	80077a8 <RCCEx_PLL3_Config>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x128e>
    {
      status = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b42:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005b46:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b48:	2300      	movs	r3, #0
 8005b4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b4c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005b50:	460b      	mov	r3, r1
 8005b52:	4313      	orrs	r3, r2
 8005b54:	d044      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1334>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b62:	d01e      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
 8005b64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b68:	d817      	bhi.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8005b6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b6e:	d01a      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x12fa>
 8005b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b74:	d811      	bhi.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d017      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x12fe>
 8005b7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b7e:	d10c      	bne.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x12ee>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b80:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005b84:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8a:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005b8e:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005b92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005b98:	e008      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x1300>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ba0:	e004      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x1300>
        break;
 8005ba2:	bf00      	nop
 8005ba4:	e002      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x1300>
        break;
 8005ba6:	bf00      	nop
 8005ba8:	e000      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x1300>
        break;
 8005baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d111      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bb4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005bb8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bbe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bca:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005bce:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005bd2:	430b      	orrs	r3, r1
 8005bd4:	6553      	str	r3, [r2, #84]	@ 0x54
 8005bd6:	e003      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1334>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005bec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bee:	2300      	movs	r3, #0
 8005bf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bf2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	d00f      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005bfc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005c00:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005c04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c06:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c10:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005c14:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c24:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005c28:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c2e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005c32:	460b      	mov	r3, r1
 8005c34:	4313      	orrs	r3, r2
 8005c36:	d010      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x13ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005c38:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005c3c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005c4e:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005c52:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005c56:	430b      	orrs	r3, r1
 8005c58:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c62:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005c66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c68:	2300      	movs	r3, #0
 8005c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c6c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005c70:	460b      	mov	r3, r1
 8005c72:	4313      	orrs	r3, r2
 8005c74:	d00f      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x13ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c76:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005c7a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c80:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c8a:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005c8e:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005c92:	430b      	orrs	r3, r1
 8005c94:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005ca2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ca8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005cac:	460b      	mov	r3, r1
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	d01a      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x143c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005cb2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005cb6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005cc0:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005cc4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005cc8:	6113      	str	r3, [r2, #16]
 8005cca:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005cce:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005cd2:	6919      	ldr	r1, [r3, #16]
 8005cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005cdc:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005ce0:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005ce4:	430b      	orrs	r3, r1
 8005ce6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cfa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005cfe:	460b      	mov	r3, r1
 8005d00:	4313      	orrs	r3, r2
 8005d02:	d00f      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1478>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005d04:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005d08:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d0e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d18:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005d1c:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005d20:	430b      	orrs	r3, r1
 8005d22:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005d30:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d32:	2300      	movs	r3, #0
 8005d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d36:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	d010      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x14b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d40:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005d44:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d4a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d56:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 8005d5a:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 8005d5e:	430b      	orrs	r3, r1
 8005d60:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d74:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	d011      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x14f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d82:	3308      	adds	r3, #8
 8005d84:	2100      	movs	r1, #0
 8005d86:	4618      	mov	r0, r3
 8005d88:	f001 fc10 	bl	80075ac <RCCEx_PLL2_Config>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x14f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	2100      	movs	r1, #0
 8005dac:	6239      	str	r1, [r7, #32]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005db4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005db8:	460b      	mov	r3, r1
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	d011      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1536>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc2:	3308      	adds	r3, #8
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 fbf0 	bl	80075ac <RCCEx_PLL2_Config>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1536>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dea:	2100      	movs	r1, #0
 8005dec:	61b9      	str	r1, [r7, #24]
 8005dee:	f003 0304 	and.w	r3, r3, #4
 8005df2:	61fb      	str	r3, [r7, #28]
 8005df4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	d011      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x1576>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e02:	3308      	adds	r3, #8
 8005e04:	2102      	movs	r1, #2
 8005e06:	4618      	mov	r0, r3
 8005e08:	f001 fbd0 	bl	80075ac <RCCEx_PLL2_Config>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x1576>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	6139      	str	r1, [r7, #16]
 8005e2e:	f003 0308 	and.w	r3, r3, #8
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	d011      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x15b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e42:	3328      	adds	r3, #40	@ 0x28
 8005e44:	2100      	movs	r1, #0
 8005e46:	4618      	mov	r0, r3
 8005e48:	f001 fcae 	bl	80077a8 <RCCEx_PLL3_Config>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x15b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	f003 0310 	and.w	r3, r3, #16
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	d011      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x15f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e82:	3328      	adds	r3, #40	@ 0x28
 8005e84:	2101      	movs	r1, #1
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 fc8e 	bl	80077a8 <RCCEx_PLL3_Config>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x15f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eaa:	2100      	movs	r1, #0
 8005eac:	6039      	str	r1, [r7, #0]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	607b      	str	r3, [r7, #4]
 8005eb4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	d011      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x1636>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec2:	3328      	adds	r3, #40	@ 0x28
 8005ec4:	2102      	movs	r1, #2
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f001 fc6e 	bl	80077a8 <RCCEx_PLL3_Config>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x1636>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ede:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005ee2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x1642>
  {
    return HAL_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	e000      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1644>
  }
  return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005efc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b090      	sub	sp, #64	@ 0x40
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005f06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f0a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005f0e:	430b      	orrs	r3, r1
 8005f10:	f040 80bb 	bne.w	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005f14:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005f18:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	f200 80ab 	bhi.w	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8005f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x38>)
 8005f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f32:	bf00      	nop
 8005f34:	08005f49 	.word	0x08005f49
 8005f38:	08005f77 	.word	0x08005f77
 8005f3c:	08005fa5 	.word	0x08005fa5
 8005f40:	08006075 	.word	0x08006075
 8005f44:	08005fd3 	.word	0x08005fd3
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f48:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005f4c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f5a:	d108      	bne.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f60:	4618      	mov	r0, r3
 8005f62:	f001 f997 	bl	8007294 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f6a:	f000 be5c 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f72:	f000 be58 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f76:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005f7a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f88:	d108      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f8a:	f107 0318 	add.w	r3, r7, #24
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 fe66 	bl	8006c60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f98:	f000 be45 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fa0:	f000 be41 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005fa4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005fa8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fb6:	d108      	bne.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fb8:	f107 030c 	add.w	r3, r7, #12
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 ffdc 	bl	8006f7a <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fc6:	f000 be2e 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fce:	f000 be2a 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005fd2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005fd6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fdc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005fe0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005fe2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005fe6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d111      	bne.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8005ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10e      	bne.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ffa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8005ffe:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	08db      	lsrs	r3, r3, #3
 8006006:	f003 0203 	and.w	r2, r3, #3
 800600a:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800600e:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8006012:	40d3      	lsrs	r3, r2
 8006014:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006016:	e02b      	b.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006018:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800601c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800602a:	d109      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800602c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800602e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006032:	d105      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006034:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8006038:	f2c0 033d 	movt	r3, #61	@ 0x3d
 800603c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800603e:	e017      	b.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006040:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006044:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800604e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006052:	d109      	bne.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8006054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006056:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800605a:	d105      	bne.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800605c:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8006060:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8006064:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006066:	e003      	b.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006068:	2300      	movs	r3, #0
 800606a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800606c:	f000 bddb 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 8006070:	f000 bdd9 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006074:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006078:	f2c0 03bb 	movt	r3, #187	@ 0xbb
 800607c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800607e:	f000 bdd2 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      default :
      {
        frequency = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006086:	f000 bdce 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800608a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800608e:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006092:	430b      	orrs	r3, r1
 8006094:	f040 80c8 	bne.w	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006098:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800609c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80060a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060a2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80060a6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80060a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060ae:	d05f      	beq.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80060b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060b6:	f200 80b3 	bhi.w	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80060ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060bc:	2bc0      	cmp	r3, #192	@ 0xc0
 80060be:	f000 80a8 	beq.w	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
 80060c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80060c6:	f200 80ab 	bhi.w	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80060ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060cc:	2b80      	cmp	r3, #128	@ 0x80
 80060ce:	d038      	beq.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 80060d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d2:	2b80      	cmp	r3, #128	@ 0x80
 80060d4:	f200 80a4 	bhi.w	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80060d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	2b40      	cmp	r3, #64	@ 0x40
 80060e2:	d017      	beq.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 80060e4:	e09c      	b.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80060e6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80060ea:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060f8:	d108      	bne.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060fe:	4618      	mov	r0, r3
 8006100:	f001 f8c8 	bl	8007294 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006108:	f000 bd8d 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 800610c:	2300      	movs	r3, #0
 800610e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006110:	f000 bd89 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006114:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006118:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006122:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006126:	d108      	bne.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006128:	f107 0318 	add.w	r3, r7, #24
 800612c:	4618      	mov	r0, r3
 800612e:	f000 fd97 	bl	8006c60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006136:	f000 bd76 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 800613a:	2300      	movs	r3, #0
 800613c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800613e:	f000 bd72 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006142:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006146:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006150:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006154:	d108      	bne.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006156:	f107 030c 	add.w	r3, r7, #12
 800615a:	4618      	mov	r0, r3
 800615c:	f000 ff0d 	bl	8006f7a <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006164:	f000 bd5f 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006168:	2300      	movs	r3, #0
 800616a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800616c:	f000 bd5b 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006170:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006174:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800617a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800617e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006180:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006184:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0304 	and.w	r3, r3, #4
 800618e:	2b04      	cmp	r3, #4
 8006190:	d111      	bne.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
 8006192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10e      	bne.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006198:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800619c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	08db      	lsrs	r3, r3, #3
 80061a4:	f003 0203 	and.w	r2, r3, #3
 80061a8:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80061ac:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 80061b0:	40d3      	lsrs	r3, r2
 80061b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061b4:	e02b      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80061b6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80061ba:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061c8:	d109      	bne.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 80061ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061d0:	d105      	bne.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80061d2:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80061d6:	f2c0 033d 	movt	r3, #61	@ 0x3d
 80061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061dc:	e017      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80061de:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80061e2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061f0:	d109      	bne.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
 80061f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061f8:	d105      	bne.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80061fa:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 80061fe:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8006202:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006204:	e003      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006206:	2300      	movs	r3, #0
 8006208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800620a:	f000 bd0c 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 800620e:	f000 bd0a 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006216:	f2c0 03bb 	movt	r3, #187	@ 0xbb
 800621a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800621c:	f000 bd03 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      default :
      {
        frequency = 0;
 8006220:	2300      	movs	r3, #0
 8006222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006224:	f000 bcff 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800622c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006230:	430b      	orrs	r3, r1
 8006232:	f040 80cd 	bne.w	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006236:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800623a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800623e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006240:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006244:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006248:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800624c:	d064      	beq.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 800624e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006250:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006254:	f200 80b8 	bhi.w	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8006258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800625e:	f000 80ac 	beq.w	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006268:	f200 80ae 	bhi.w	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 800626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006272:	d03a      	beq.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 8006274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006276:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800627a:	f200 80a5 	bhi.w	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 800627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006280:	2b00      	cmp	r3, #0
 8006282:	d004      	beq.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x392>
 8006284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006286:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800628a:	d017      	beq.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800628c:	e09c      	b.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800628e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006292:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800629c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062a0:	d108      	bne.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 fff4 	bl	8007294 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80062ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062b0:	f000 bcb9 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062b8:	f000 bcb5 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80062bc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80062c0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062ce:	d108      	bne.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062d0:	f107 0318 	add.w	r3, r7, #24
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 fcc3 	bl	8006c60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062de:	f000 bca2 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80062e2:	2300      	movs	r3, #0
 80062e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062e6:	f000 bc9e 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80062ea:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80062ee:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062fc:	d108      	bne.n	8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062fe:	f107 030c 	add.w	r3, r7, #12
 8006302:	4618      	mov	r0, r3
 8006304:	f000 fe39 	bl	8006f7a <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800630c:	f000 bc8b 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006310:	2300      	movs	r3, #0
 8006312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006314:	f000 bc87 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006318:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800631c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006322:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006326:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006328:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800632c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0304 	and.w	r3, r3, #4
 8006336:	2b04      	cmp	r3, #4
 8006338:	d111      	bne.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800633a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10e      	bne.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006340:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006344:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	08db      	lsrs	r3, r3, #3
 800634c:	f003 0203 	and.w	r2, r3, #3
 8006350:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8006354:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8006358:	40d3      	lsrs	r3, r2
 800635a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800635c:	e02b      	b.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800635e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006362:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800636c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006370:	d109      	bne.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006374:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006378:	d105      	bne.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800637a:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800637e:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8006382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006384:	e017      	b.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006386:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800638a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006394:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006398:	d109      	bne.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800639a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800639c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063a0:	d105      	bne.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80063a2:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 80063a6:	f2c0 037a 	movt	r3, #122	@ 0x7a
 80063aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063ac:	e003      	b.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80063ae:	2300      	movs	r3, #0
 80063b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80063b2:	f000 bc38 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 80063b6:	f000 bc36 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80063ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063be:	f2c0 03bb 	movt	r3, #187	@ 0xbb
 80063c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063c4:	f000 bc2f 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      default :
      {
        frequency = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063cc:	f000 bc2b 	b.w	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80063d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063d4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80063d8:	430b      	orrs	r3, r1
 80063da:	f040 80c3 	bne.w	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80063de:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80063e2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80063e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063e8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80063ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80063ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063f4:	d05e      	beq.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063fc:	f200 80af 	bhi.w	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 8006400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006402:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006406:	f000 80a4 	beq.w	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
 800640a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006410:	f200 80a5 	bhi.w	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 8006414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006416:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800641a:	d036      	beq.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800641c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006422:	f200 809c 	bhi.w	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 8006426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006428:	2b00      	cmp	r3, #0
 800642a:	d004      	beq.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
 800642c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006432:	d015      	beq.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8006434:	e093      	b.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x662>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006436:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800643a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006444:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006448:	d107      	bne.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800644a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800644e:	4618      	mov	r0, r3
 8006450:	f000 ff20 	bl	8007294 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006458:	e3e5      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800645e:	e3e2      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006460:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006464:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800646e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006472:	d107      	bne.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006474:	f107 0318 	add.w	r3, r7, #24
 8006478:	4618      	mov	r0, r3
 800647a:	f000 fbf1 	bl	8006c60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006482:	e3d0      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006484:	2300      	movs	r3, #0
 8006486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006488:	e3cd      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800648a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800648e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006498:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800649c:	d107      	bne.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800649e:	f107 030c 	add.w	r3, r7, #12
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 fd69 	bl	8006f7a <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064ac:	e3bb      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80064ae:	2300      	movs	r3, #0
 80064b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064b2:	e3b8      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064b4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80064b8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80064bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80064c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064c4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80064c8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0304 	and.w	r3, r3, #4
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	d111      	bne.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80064d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10e      	bne.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064dc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80064e0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	08db      	lsrs	r3, r3, #3
 80064e8:	f003 0203 	and.w	r2, r3, #3
 80064ec:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80064f0:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 80064f4:	40d3      	lsrs	r3, r2
 80064f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064f8:	e02a      	b.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064fa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80064fe:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800650c:	d109      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800650e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006510:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006514:	d105      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006516:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800651a:	f2c0 033d 	movt	r3, #61	@ 0x3d
 800651e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006520:	e016      	b.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006522:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006526:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006530:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006534:	d109      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x64e>
 8006536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006538:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800653c:	d105      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x64e>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800653e:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8006542:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8006546:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006548:	e002      	b.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800654a:	2300      	movs	r3, #0
 800654c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800654e:	e36a      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 8006550:	e369      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006556:	f2c0 03bb 	movt	r3, #187	@ 0xbb
 800655a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800655c:	e363      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      default :
      {
        frequency = 0;
 800655e:	2300      	movs	r3, #0
 8006560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006562:	e360      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006564:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006568:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800656c:	430b      	orrs	r3, r1
 800656e:	f040 80c3 	bne.w	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006572:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006576:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800657a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800657c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006580:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006584:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006588:	d05e      	beq.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800658a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006590:	f200 80af 	bhi.w	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
 8006594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006596:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800659a:	f000 80a4 	beq.w	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 800659e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065a4:	f200 80a5 	bhi.w	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
 80065a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065ae:	d036      	beq.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
 80065b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065b6:	f200 809c 	bhi.w	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
 80065ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d004      	beq.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 80065c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065c6:	d015      	beq.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80065c8:	e093      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065ca:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80065ce:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065dc:	d107      	bne.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 fe56 	bl	8007294 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065ec:	e31b      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80065ee:	2300      	movs	r3, #0
 80065f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065f2:	e318      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065f4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80065f8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006602:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006606:	d107      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006608:	f107 0318 	add.w	r3, r7, #24
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fb27 	bl	8006c60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006616:	e306      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800661c:	e303      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800661e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006622:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800662c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006630:	d107      	bne.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006632:	f107 030c 	add.w	r3, r7, #12
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fc9f 	bl	8006f7a <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006640:	e2f1      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006642:	2300      	movs	r3, #0
 8006644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006646:	e2ee      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006648:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800664c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006652:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006656:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006658:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800665c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0304 	and.w	r3, r3, #4
 8006666:	2b04      	cmp	r3, #4
 8006668:	d111      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
 800666a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10e      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006670:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006674:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	08db      	lsrs	r3, r3, #3
 800667c:	f003 0203 	and.w	r2, r3, #3
 8006680:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8006684:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8006688:	40d3      	lsrs	r3, r2
 800668a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800668c:	e02a      	b.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800668e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006692:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800669c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066a0:	d109      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
 80066a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066a8:	d105      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80066aa:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80066ae:	f2c0 033d 	movt	r3, #61	@ 0x3d
 80066b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066b4:	e016      	b.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066b6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80066ba:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066c8:	d109      	bne.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80066ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066d0:	d105      	bne.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80066d2:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 80066d6:	f2c0 037a 	movt	r3, #122	@ 0x7a
 80066da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066dc:	e002      	b.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80066de:	2300      	movs	r3, #0
 80066e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80066e2:	e2a0      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 80066e4:	e29f      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80066e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066ea:	f2c0 03bb 	movt	r3, #187	@ 0xbb
 80066ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066f0:	e299      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      default :
      {
        frequency = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066f6:	e296      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80066f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066fc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006700:	430b      	orrs	r3, r1
 8006702:	f040 80a5 	bne.w	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006706:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800670a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800670e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006710:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006714:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006718:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800671c:	f000 8082 	beq.w	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x928>
 8006720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006722:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006726:	f200 8090 	bhi.w	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
 800672a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006730:	d065      	beq.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x902>
 8006732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006734:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006738:	f200 8087 	bhi.w	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
 800673c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006742:	d041      	beq.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8006744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006746:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800674a:	d87e      	bhi.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
 800674c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006752:	d024      	beq.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006756:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800675a:	d876      	bhi.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
 800675c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800675e:	2b00      	cmp	r3, #0
 8006760:	d004      	beq.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8006762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006768:	d004      	beq.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 800676a:	e06e      	b.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800676c:	f7fe f86e 	bl	800484c <HAL_RCC_GetPCLK1Freq>
 8006770:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006772:	e258      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006774:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006778:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006782:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006786:	d107      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006788:	f107 0318 	add.w	r3, r7, #24
 800678c:	4618      	mov	r0, r3
 800678e:	f000 fa67 	bl	8006c60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006796:	e246      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006798:	2300      	movs	r3, #0
 800679a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800679c:	e243      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800679e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80067a2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067b0:	d107      	bne.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067b2:	f107 030c 	add.w	r3, r7, #12
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fbdf 	bl	8006f7a <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067c0:	e231      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80067c2:	2300      	movs	r3, #0
 80067c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067c6:	e22e      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067c8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80067cc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0304 	and.w	r3, r3, #4
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	d10e      	bne.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067da:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80067de:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	08db      	lsrs	r3, r3, #3
 80067e6:	f003 0203 	and.w	r2, r3, #3
 80067ea:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80067ee:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 80067f2:	40d3      	lsrs	r3, r2
 80067f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067f6:	e216      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067fc:	e213      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80067fe:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006802:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800680c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006810:	d105      	bne.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x922>
        {
          frequency = CSI_VALUE;
 8006812:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8006816:	f2c0 033d 	movt	r3, #61	@ 0x3d
 800681a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800681c:	e203      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 800681e:	2300      	movs	r3, #0
 8006820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006822:	e200      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006824:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006828:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006832:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006836:	d105      	bne.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
        {
          frequency = HSE_VALUE;
 8006838:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800683c:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8006840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006842:	e1f0      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006844:	2300      	movs	r3, #0
 8006846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006848:	e1ed      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      default :
      {
        frequency = 0;
 800684a:	2300      	movs	r3, #0
 800684c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800684e:	e1ea      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006854:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006858:	430b      	orrs	r3, r1
 800685a:	f040 8095 	bne.w	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800685e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006862:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006868:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800686c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800686e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006870:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006874:	d036      	beq.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9e8>
 8006876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006878:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800687c:	f200 8081 	bhi.w	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8006880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006882:	2b00      	cmp	r3, #0
 8006884:	d004      	beq.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800688c:	d015      	beq.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800688e:	e078      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006890:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006894:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800689e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068a2:	d107      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068a4:	f107 0318 	add.w	r3, r7, #24
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 f9d9 	bl	8006c60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068b2:	e1b8      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068b8:	e1b5      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068ba:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80068be:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068cc:	d107      	bne.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068ce:	f107 030c 	add.w	r3, r7, #12
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fb51 	bl	8006f7a <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068dc:	e1a3      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80068de:	2300      	movs	r3, #0
 80068e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068e2:	e1a0      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068e4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80068e8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80068ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80068f2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068f4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80068f8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0304 	and.w	r3, r3, #4
 8006902:	2b04      	cmp	r3, #4
 8006904:	d111      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
 8006906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10e      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800690c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006910:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	08db      	lsrs	r3, r3, #3
 8006918:	f003 0203 	and.w	r2, r3, #3
 800691c:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8006920:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8006924:	40d3      	lsrs	r3, r2
 8006926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006928:	e02a      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800692a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800692e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006938:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800693c:	d109      	bne.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800693e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006940:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006944:	d105      	bne.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006946:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800694a:	f2c0 033d 	movt	r3, #61	@ 0x3d
 800694e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006950:	e016      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006952:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006956:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006960:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006964:	d109      	bne.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
 8006966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006968:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800696c:	d105      	bne.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800696e:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8006972:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8006976:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006978:	e002      	b.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800697a:	2300      	movs	r3, #0
 800697c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800697e:	e152      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 8006980:	e151      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      default :
      {
        frequency = 0;
 8006982:	2300      	movs	r3, #0
 8006984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006986:	e14e      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800698c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006990:	430b      	orrs	r3, r1
 8006992:	d13c      	bne.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006994:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006998:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800699c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800699e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069a2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80069a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d004      	beq.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 80069aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069b0:	d015      	beq.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 80069b2:	e029      	b.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069b4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80069b8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069c6:	d107      	bne.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 fc61 	bl	8007294 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069d6:	e126      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 80069d8:	2300      	movs	r3, #0
 80069da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069dc:	e123      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069de:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80069e2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069f0:	d107      	bne.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0xb06>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069f2:	f107 0318 	add.w	r3, r7, #24
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 f932 	bl	8006c60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a00:	e111      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006a02:	2300      	movs	r3, #0
 8006a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a06:	e10e      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }

      default :
      {
        frequency = 0;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a0c:	e10b      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a12:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006a16:	430b      	orrs	r3, r1
 8006a18:	f040 80a5 	bne.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006a1c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006a20:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a26:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006a2a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a32:	f000 8082 	beq.w	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a3c:	f200 8090 	bhi.w	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a46:	d065      	beq.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xc18>
 8006a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a4e:	f200 8087 	bhi.w	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a58:	d041      	beq.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8006a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a60:	d87e      	bhi.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a68:	d024      	beq.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8006a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a70:	d876      	bhi.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d004      	beq.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8006a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a7e:	d004      	beq.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 8006a80:	e06e      	b.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006a82:	f000 f8d5 	bl	8006c30 <HAL_RCCEx_GetD3PCLK1Freq>
 8006a86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a88:	e0cd      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a8a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006a8e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a9c:	d107      	bne.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a9e:	f107 0318 	add.w	r3, r7, #24
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 f8dc 	bl	8006c60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aac:	e0bb      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ab2:	e0b8      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ab4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006ab8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ac2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ac6:	d107      	bne.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xbdc>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ac8:	f107 030c 	add.w	r3, r7, #12
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 fa54 	bl	8006f7a <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ad6:	e0a6      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006adc:	e0a3      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ade:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006ae2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d10e      	bne.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006af0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006af4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	08db      	lsrs	r3, r3, #3
 8006afc:	f003 0203 	and.w	r2, r3, #3
 8006b00:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8006b04:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8006b08:	40d3      	lsrs	r3, r2
 8006b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b0c:	e08b      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b12:	e088      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006b14:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006b18:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b26:	d105      	bne.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
        {
          frequency = CSI_VALUE;
 8006b28:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8006b2c:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8006b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b32:	e078      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b38:	e075      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b3a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006b3e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b4c:	d105      	bne.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
        {
          frequency = HSE_VALUE;
 8006b4e:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8006b52:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8006b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b58:	e065      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b5e:	e062      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006b60:	2300      	movs	r3, #0
 8006b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b64:	e05f      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006b66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b6a:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006b6e:	430b      	orrs	r3, r1
 8006b70:	d157      	bne.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006b72:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006b76:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006b80:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b88:	d033      	beq.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xcf6>
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b90:	d844      	bhi.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8006b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d004      	beq.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8006b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b9e:	d013      	beq.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8006ba0:	e03c      	b.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ba2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006ba6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bb4:	d105      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
        {
          frequency = HSE_VALUE;
 8006bb6:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8006bba:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8006bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bc0:	e031      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bc6:	e02e      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bc8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006bcc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bda:	d107      	bne.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 fb57 	bl	8007294 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bea:	e01c      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bf0:	e019      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bf2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006bf6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c04:	d107      	bne.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0xd1a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c06:	f107 0318 	add.w	r3, r7, #24
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 f828 	bl	8006c60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c14:	e007      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c1a:	e004      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
      default :
      {
        frequency = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c20:	e001      	b.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
      }
    }
  }
  else
  {
    frequency = 0;
 8006c22:	2300      	movs	r3, #0
 8006c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3740      	adds	r7, #64	@ 0x40
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006c34:	f7fd fdce 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 8006c38:	4601      	mov	r1, r0
 8006c3a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006c3e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	091b      	lsrs	r3, r3, #4
 8006c46:	f003 0207 	and.w	r2, r3, #7
 8006c4a:	f649 03a0 	movw	r3, #39072	@ 0x98a0
 8006c4e:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8006c52:	5c9b      	ldrb	r3, [r3, r2]
 8006c54:	f003 031f 	and.w	r3, r3, #31
 8006c58:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b089      	sub	sp, #36	@ 0x24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c68:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006c6c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c72:	f003 0303 	and.w	r3, r3, #3
 8006c76:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006c78:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006c7c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c82:	0b1b      	lsrs	r3, r3, #12
 8006c84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c88:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006c8a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006c8e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c94:	091b      	lsrs	r3, r3, #4
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006c9c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006ca0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca6:	08db      	lsrs	r3, r3, #3
 8006ca8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	fb02 f303 	mul.w	r3, r2, r3
 8006cb2:	ee07 3a90 	vmov	s15, r3
 8006cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 814b 	beq.w	8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2fc>
  {
    switch (pllsource)
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	f000 80a2 	beq.w	8006e12 <HAL_RCCEx_GetPLL2ClockFreq+0x1b2>
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	f200 80c9 	bhi.w	8006e68 <HAL_RCCEx_GetPLL2ClockFreq+0x208>
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x84>
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d06c      	beq.n	8006dbc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ce2:	e0c1      	b.n	8006e68 <HAL_RCCEx_GetPLL2ClockFreq+0x208>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ce4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006ce8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d037      	beq.n	8006d66 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cf6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006cfa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	08db      	lsrs	r3, r3, #3
 8006d02:	f003 0203 	and.w	r2, r3, #3
 8006d06:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8006d0a:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8006d0e:	40d3      	lsrs	r3, r2
 8006d10:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	ee07 3a90 	vmov	s15, r3
 8006d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	ee07 3a90 	vmov	s15, r3
 8006d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d2a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006d2e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d38:	ee07 3a90 	vmov	s15, r3
 8006d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d40:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d44:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8006d48:	ee05 3a90 	vmov	s11, r3
 8006d4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d60:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d64:	e0ab      	b.n	8006ebe <HAL_RCCEx_GetPLL2ClockFreq+0x25e>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	ee07 3a90 	vmov	s15, r3
 8006d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d70:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8006d74:	f6c4 4374 	movt	r3, #19572	@ 0x4c74
 8006d78:	ee06 3a90 	vmov	s13, r3
 8006d7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d80:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006d84:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8e:	ee07 3a90 	vmov	s15, r3
 8006d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d9a:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8006d9e:	ee05 3a90 	vmov	s11, r3
 8006da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006daa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dba:	e080      	b.n	8006ebe <HAL_RCCEx_GetPLL2ClockFreq+0x25e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	ee07 3a90 	vmov	s15, r3
 8006dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc6:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8006dca:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 8006dce:	ee06 3a90 	vmov	s13, r3
 8006dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dd6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006dda:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de4:	ee07 3a90 	vmov	s15, r3
 8006de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dec:	ed97 6a03 	vldr	s12, [r7, #12]
 8006df0:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8006df4:	ee05 3a90 	vmov	s11, r3
 8006df8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e10:	e055      	b.n	8006ebe <HAL_RCCEx_GetPLL2ClockFreq+0x25e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	ee07 3a90 	vmov	s15, r3
 8006e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1c:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8006e20:	f6c4 23f4 	movt	r3, #19188	@ 0x4af4
 8006e24:	ee06 3a90 	vmov	s13, r3
 8006e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e2c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006e30:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e3a:	ee07 3a90 	vmov	s15, r3
 8006e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e46:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8006e4a:	ee05 3a90 	vmov	s11, r3
 8006e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e66:	e02a      	b.n	8006ebe <HAL_RCCEx_GetPLL2ClockFreq+0x25e>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	ee07 3a90 	vmov	s15, r3
 8006e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e72:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8006e76:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 8006e7a:	ee06 3a90 	vmov	s13, r3
 8006e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e82:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006e86:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e90:	ee07 3a90 	vmov	s15, r3
 8006e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e98:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e9c:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8006ea0:	ee05 3a90 	vmov	s11, r3
 8006ea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ebc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006ebe:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006ec2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec8:	0a5b      	lsrs	r3, r3, #9
 8006eca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ece:	ee07 3a90 	vmov	s15, r3
 8006ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006eda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ede:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eea:	ee17 2a90 	vmov	r2, s15
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006ef2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006ef6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efc:	0c1b      	lsrs	r3, r3, #16
 8006efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f12:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f1e:	ee17 2a90 	vmov	r2, s15
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006f26:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006f2a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f30:	0e1b      	lsrs	r3, r3, #24
 8006f32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f52:	ee17 2a90 	vmov	r2, s15
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006f5a:	e008      	b.n	8006f6e <HAL_RCCEx_GetPLL2ClockFreq+0x30e>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	609a      	str	r2, [r3, #8]
}
 8006f6e:	bf00      	nop
 8006f70:	3724      	adds	r7, #36	@ 0x24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b089      	sub	sp, #36	@ 0x24
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f82:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006f86:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8c:	f003 0303 	and.w	r3, r3, #3
 8006f90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006f92:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006f96:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9c:	0d1b      	lsrs	r3, r3, #20
 8006f9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fa2:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006fa4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006fa8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fae:	0a1b      	lsrs	r3, r3, #8
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006fb6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8006fba:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8006fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fc0:	08db      	lsrs	r3, r3, #3
 8006fc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	fb02 f303 	mul.w	r3, r2, r3
 8006fcc:	ee07 3a90 	vmov	s15, r3
 8006fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 814b 	beq.w	8007276 <HAL_RCCEx_GetPLL3ClockFreq+0x2fc>
  {
    switch (pllsource)
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	f000 80a2 	beq.w	800712c <HAL_RCCEx_GetPLL3ClockFreq+0x1b2>
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	f200 80c9 	bhi.w	8007182 <HAL_RCCEx_GetPLL3ClockFreq+0x208>
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <HAL_RCCEx_GetPLL3ClockFreq+0x84>
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d06c      	beq.n	80070d6 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006ffc:	e0c1      	b.n	8007182 <HAL_RCCEx_GetPLL3ClockFreq+0x208>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ffe:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007002:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0320 	and.w	r3, r3, #32
 800700c:	2b00      	cmp	r3, #0
 800700e:	d037      	beq.n	8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007010:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007014:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	08db      	lsrs	r3, r3, #3
 800701c:	f003 0203 	and.w	r2, r3, #3
 8007020:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8007024:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8007028:	40d3      	lsrs	r3, r2
 800702a:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	ee07 3a90 	vmov	s15, r3
 800703c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007044:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007048:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800704c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007052:	ee07 3a90 	vmov	s15, r3
 8007056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800705a:	ed97 6a03 	vldr	s12, [r7, #12]
 800705e:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8007062:	ee05 3a90 	vmov	s11, r3
 8007066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800706a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800706e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800707a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800707e:	e0ab      	b.n	80071d8 <HAL_RCCEx_GetPLL3ClockFreq+0x25e>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	ee07 3a90 	vmov	s15, r3
 8007086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708a:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800708e:	f6c4 4374 	movt	r3, #19572	@ 0x4c74
 8007092:	ee06 3a90 	vmov	s13, r3
 8007096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800709a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800709e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80070a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a8:	ee07 3a90 	vmov	s15, r3
 80070ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80070b4:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 80070b8:	ee05 3a90 	vmov	s11, r3
 80070bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070d4:	e080      	b.n	80071d8 <HAL_RCCEx_GetPLL3ClockFreq+0x25e>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	ee07 3a90 	vmov	s15, r3
 80070dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e0:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80070e4:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 80070e8:	ee06 3a90 	vmov	s13, r3
 80070ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070f0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80070f4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80070f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070fe:	ee07 3a90 	vmov	s15, r3
 8007102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007106:	ed97 6a03 	vldr	s12, [r7, #12]
 800710a:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 800710e:	ee05 3a90 	vmov	s11, r3
 8007112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800711a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800711e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800712a:	e055      	b.n	80071d8 <HAL_RCCEx_GetPLL3ClockFreq+0x25e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007136:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800713a:	f6c4 23f4 	movt	r3, #19188	@ 0x4af4
 800713e:	ee06 3a90 	vmov	s13, r3
 8007142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007146:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800714a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800714e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007154:	ee07 3a90 	vmov	s15, r3
 8007158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007160:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8007164:	ee05 3a90 	vmov	s11, r3
 8007168:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800716c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007170:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007174:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007180:	e02a      	b.n	80071d8 <HAL_RCCEx_GetPLL3ClockFreq+0x25e>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	ee07 3a90 	vmov	s15, r3
 8007188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718c:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8007190:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 8007194:	ee06 3a90 	vmov	s13, r3
 8007198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80071a0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80071a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b6:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 80071ba:	ee05 3a90 	vmov	s11, r3
 80071be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80071d8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80071dc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80071e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e2:	0a5b      	lsrs	r3, r3, #9
 80071e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071e8:	ee07 3a90 	vmov	s15, r3
 80071ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80071fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007204:	ee17 2a90 	vmov	r2, s15
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800720c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007210:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007216:	0c1b      	lsrs	r3, r3, #16
 8007218:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800721c:	ee07 3a90 	vmov	s15, r3
 8007220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007224:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007228:	ee37 7a87 	vadd.f32	s14, s15, s14
 800722c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007238:	ee17 2a90 	vmov	r2, s15
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007240:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007244:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800724a:	0e1b      	lsrs	r3, r3, #24
 800724c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007250:	ee07 3a90 	vmov	s15, r3
 8007254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007258:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800725c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007260:	edd7 6a07 	vldr	s13, [r7, #28]
 8007264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800726c:	ee17 2a90 	vmov	r2, s15
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007274:	e008      	b.n	8007288 <HAL_RCCEx_GetPLL3ClockFreq+0x30e>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	609a      	str	r2, [r3, #8]
}
 8007288:	bf00      	nop
 800728a:	3724      	adds	r7, #36	@ 0x24
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007294:	b480      	push	{r7}
 8007296:	b089      	sub	sp, #36	@ 0x24
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800729c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80072a0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80072a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80072ac:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80072b0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80072b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b6:	091b      	lsrs	r3, r3, #4
 80072b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072bc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80072be:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80072c2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80072c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80072ce:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80072d2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80072d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072d8:	08db      	lsrs	r3, r3, #3
 80072da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	fb02 f303 	mul.w	r3, r2, r3
 80072e4:	ee07 3a90 	vmov	s15, r3
 80072e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 814b 	beq.w	800758e <HAL_RCCEx_GetPLL1ClockFreq+0x2fa>
  {
    switch (pllsource)
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	f000 80a2 	beq.w	8007444 <HAL_RCCEx_GetPLL1ClockFreq+0x1b0>
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	2b02      	cmp	r3, #2
 8007304:	f200 80c9 	bhi.w	800749a <HAL_RCCEx_GetPLL1ClockFreq+0x206>
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <HAL_RCCEx_GetPLL1ClockFreq+0x82>
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d06c      	beq.n	80073ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007314:	e0c1      	b.n	800749a <HAL_RCCEx_GetPLL1ClockFreq+0x206>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007316:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800731a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0320 	and.w	r3, r3, #32
 8007324:	2b00      	cmp	r3, #0
 8007326:	d037      	beq.n	8007398 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007328:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800732c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	08db      	lsrs	r3, r3, #3
 8007334:	f003 0203 	and.w	r2, r3, #3
 8007338:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800733c:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8007340:	40d3      	lsrs	r3, r2
 8007342:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	ee07 3a90 	vmov	s15, r3
 800734a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	ee07 3a90 	vmov	s15, r3
 8007354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007358:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800735c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007360:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007372:	ed97 6a03 	vldr	s12, [r7, #12]
 8007376:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 800737a:	ee05 3a90 	vmov	s11, r3
 800737e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800738a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007392:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007396:	e0ab      	b.n	80074f0 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a2:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80073a6:	f6c4 4374 	movt	r3, #19572	@ 0x4c74
 80073aa:	ee06 3a90 	vmov	s13, r3
 80073ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073b2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80073b6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80073ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c0:	ee07 3a90 	vmov	s15, r3
 80073c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80073cc:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 80073d0:	ee05 3a90 	vmov	s11, r3
 80073d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073ec:	e080      	b.n	80074f0 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	ee07 3a90 	vmov	s15, r3
 80073f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f8:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80073fc:	f6c4 2374 	movt	r3, #19060	@ 0x4a74
 8007400:	ee06 3a90 	vmov	s13, r3
 8007404:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007408:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800740c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007416:	ee07 3a90 	vmov	s15, r3
 800741a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007422:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 8007426:	ee05 3a90 	vmov	s11, r3
 800742a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800742e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800743a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800743e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007442:	e055      	b.n	80074f0 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744e:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8007452:	f6c4 23f4 	movt	r3, #19188	@ 0x4af4
 8007456:	ee06 3a90 	vmov	s13, r3
 800745a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800745e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007462:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800746c:	ee07 3a90 	vmov	s15, r3
 8007470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007474:	ed97 6a03 	vldr	s12, [r7, #12]
 8007478:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 800747c:	ee05 3a90 	vmov	s11, r3
 8007480:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007484:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007488:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800748c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007494:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007498:	e02a      	b.n	80074f0 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	ee07 3a90 	vmov	s15, r3
 80074a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a4:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80074a8:	f6c4 4374 	movt	r3, #19572	@ 0x4c74
 80074ac:	ee06 3a90 	vmov	s13, r3
 80074b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80074b8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80074bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ce:	f04f 438c 	mov.w	r3, #1174405120	@ 0x46000000
 80074d2:	ee05 3a90 	vmov	s11, r3
 80074d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074ee:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80074f0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80074f4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80074f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074fa:	0a5b      	lsrs	r3, r3, #9
 80074fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007500:	ee07 3a90 	vmov	s15, r3
 8007504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007508:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800750c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007510:	edd7 6a07 	vldr	s13, [r7, #28]
 8007514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800751c:	ee17 2a90 	vmov	r2, s15
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007524:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007528:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800752c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800752e:	0c1b      	lsrs	r3, r3, #16
 8007530:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007534:	ee07 3a90 	vmov	s15, r3
 8007538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007540:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007544:	edd7 6a07 	vldr	s13, [r7, #28]
 8007548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800754c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007550:	ee17 2a90 	vmov	r2, s15
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007558:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800755c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007562:	0e1b      	lsrs	r3, r3, #24
 8007564:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007568:	ee07 3a90 	vmov	s15, r3
 800756c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007570:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007574:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007578:	edd7 6a07 	vldr	s13, [r7, #28]
 800757c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007584:	ee17 2a90 	vmov	r2, s15
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800758c:	e008      	b.n	80075a0 <HAL_RCCEx_GetPLL1ClockFreq+0x30c>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	609a      	str	r2, [r3, #8]
}
 80075a0:	bf00      	nop
 80075a2:	3724      	adds	r7, #36	@ 0x24
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075ba:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80075be:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80075c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c4:	f003 0303 	and.w	r3, r3, #3
 80075c8:	2b03      	cmp	r3, #3
 80075ca:	d101      	bne.n	80075d0 <RCCEx_PLL2_Config+0x24>
  {
    return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e0e7      	b.n	80077a0 <RCCEx_PLL2_Config+0x1f4>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80075d0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80075d4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80075de:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80075e2:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80075e6:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075e8:	f7fa fa3e 	bl	8001a68 <HAL_GetTick>
 80075ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075ee:	e008      	b.n	8007602 <RCCEx_PLL2_Config+0x56>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075f0:	f7fa fa3a 	bl	8001a68 <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d901      	bls.n	8007602 <RCCEx_PLL2_Config+0x56>
      {
        return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e0ce      	b.n	80077a0 <RCCEx_PLL2_Config+0x1f4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007602:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007606:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1ed      	bne.n	80075f0 <RCCEx_PLL2_Config+0x44>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007614:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007618:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800761c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761e:	f423 317c 	bic.w	r1, r3, #258048	@ 0x3f000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	031a      	lsls	r2, r3, #12
 8007628:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800762c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007630:	430a      	orrs	r2, r1
 8007632:	629a      	str	r2, [r3, #40]	@ 0x28
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	3b01      	subs	r3, #1
 800763a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	3b01      	subs	r3, #1
 8007644:	025b      	lsls	r3, r3, #9
 8007646:	b29b      	uxth	r3, r3
 8007648:	431a      	orrs	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	3b01      	subs	r3, #1
 8007650:	041b      	lsls	r3, r3, #16
 8007652:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007656:	ea42 0103 	orr.w	r1, r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	3b01      	subs	r3, #1
 8007660:	061b      	lsls	r3, r3, #24
 8007662:	f003 42fe 	and.w	r2, r3, #2130706432	@ 0x7f000000
 8007666:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800766a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800766e:	430a      	orrs	r2, r1
 8007670:	639a      	str	r2, [r3, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007672:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007676:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800767a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767c:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	695a      	ldr	r2, [r3, #20]
 8007684:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007688:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800768c:	430a      	orrs	r2, r1
 800768e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007690:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007694:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769a:	f023 0120 	bic.w	r1, r3, #32
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	699a      	ldr	r2, [r3, #24]
 80076a2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80076a6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80076aa:	430a      	orrs	r2, r1
 80076ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80076ae:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80076b2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80076b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b8:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80076bc:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80076c0:	f022 0210 	bic.w	r2, r2, #16
 80076c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80076c6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80076ca:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80076ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076d0:	2307      	movs	r3, #7
 80076d2:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 80076d6:	4013      	ands	r3, r2
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	69d2      	ldr	r2, [r2, #28]
 80076dc:	00d1      	lsls	r1, r2, #3
 80076de:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80076e2:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80076e6:	430b      	orrs	r3, r1
 80076e8:	63d3      	str	r3, [r2, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80076ea:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80076ee:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80076f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80076f8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80076fc:	f042 0210 	orr.w	r2, r2, #16
 8007700:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10c      	bne.n	8007722 <RCCEx_PLL2_Config+0x176>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007708:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800770c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007712:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007716:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800771a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800771e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007720:	e01b      	b.n	800775a <RCCEx_PLL2_Config+0x1ae>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d10c      	bne.n	8007742 <RCCEx_PLL2_Config+0x196>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007728:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800772c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007732:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007736:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800773a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800773e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007740:	e00b      	b.n	800775a <RCCEx_PLL2_Config+0x1ae>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007742:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007746:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800774a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800774c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007750:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007754:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8007758:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800775a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800775e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007768:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800776c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8007770:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007772:	f7fa f979 	bl	8001a68 <HAL_GetTick>
 8007776:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007778:	e008      	b.n	800778c <RCCEx_PLL2_Config+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800777a:	f7fa f975 	bl	8001a68 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d901      	bls.n	800778c <RCCEx_PLL2_Config+0x1e0>
      {
        return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e009      	b.n	80077a0 <RCCEx_PLL2_Config+0x1f4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800778c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007790:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0ed      	beq.n	800777a <RCCEx_PLL2_Config+0x1ce>
    }

  }


  return status;
 800779e:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077b6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80077ba:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80077be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c0:	f003 0303 	and.w	r3, r3, #3
 80077c4:	2b03      	cmp	r3, #3
 80077c6:	d101      	bne.n	80077cc <RCCEx_PLL3_Config+0x24>
  {
    return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e0e7      	b.n	800799c <RCCEx_PLL3_Config+0x1f4>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80077cc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80077d0:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80077da:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80077de:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80077e2:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077e4:	f7fa f940 	bl	8001a68 <HAL_GetTick>
 80077e8:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077ea:	e008      	b.n	80077fe <RCCEx_PLL3_Config+0x56>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80077ec:	f7fa f93c 	bl	8001a68 <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d901      	bls.n	80077fe <RCCEx_PLL3_Config+0x56>
      {
        return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e0ce      	b.n	800799c <RCCEx_PLL3_Config+0x1f4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077fe:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007802:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1ed      	bne.n	80077ec <RCCEx_PLL3_Config+0x44>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007810:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007814:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781a:	f023 717c 	bic.w	r1, r3, #66060288	@ 0x3f00000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	051a      	lsls	r2, r3, #20
 8007824:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007828:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800782c:	430a      	orrs	r2, r1
 800782e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	3b01      	subs	r3, #1
 8007836:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	3b01      	subs	r3, #1
 8007840:	025b      	lsls	r3, r3, #9
 8007842:	b29b      	uxth	r3, r3
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	3b01      	subs	r3, #1
 800784c:	041b      	lsls	r3, r3, #16
 800784e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007852:	ea42 0103 	orr.w	r1, r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	3b01      	subs	r3, #1
 800785c:	061b      	lsls	r3, r3, #24
 800785e:	f003 42fe 	and.w	r2, r3, #2130706432	@ 0x7f000000
 8007862:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007866:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800786a:	430a      	orrs	r2, r1
 800786c:	641a      	str	r2, [r3, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800786e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007872:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007878:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	695a      	ldr	r2, [r3, #20]
 8007880:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007884:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007888:	430a      	orrs	r2, r1
 800788a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800788c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007890:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007896:	f423 7100 	bic.w	r1, r3, #512	@ 0x200
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	699a      	ldr	r2, [r3, #24]
 800789e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80078a2:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80078a6:	430a      	orrs	r2, r1
 80078a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80078aa:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80078ae:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80078b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80078b8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80078bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80078c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80078c2:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80078c6:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80078ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078cc:	2307      	movs	r3, #7
 80078ce:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 80078d2:	4013      	ands	r3, r2
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	69d2      	ldr	r2, [r2, #28]
 80078d8:	00d1      	lsls	r1, r2, #3
 80078da:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80078de:	f6c5 0202 	movt	r2, #22530	@ 0x5802
 80078e2:	430b      	orrs	r3, r1
 80078e4:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80078e6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80078ea:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80078ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f0:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80078f4:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80078f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10c      	bne.n	800791e <RCCEx_PLL3_Config+0x176>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007904:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007908:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800790c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800790e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007912:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007916:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800791a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800791c:	e01b      	b.n	8007956 <RCCEx_PLL3_Config+0x1ae>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d10c      	bne.n	800793e <RCCEx_PLL3_Config+0x196>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007924:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007928:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800792c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800792e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007932:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007936:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800793a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800793c:	e00b      	b.n	8007956 <RCCEx_PLL3_Config+0x1ae>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800793e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007942:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007948:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800794c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007950:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007954:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007956:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800795a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007964:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007968:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800796c:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800796e:	f7fa f87b 	bl	8001a68 <HAL_GetTick>
 8007972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007974:	e008      	b.n	8007988 <RCCEx_PLL3_Config+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007976:	f7fa f877 	bl	8001a68 <HAL_GetTick>
 800797a:	4602      	mov	r2, r0
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	2b02      	cmp	r3, #2
 8007982:	d901      	bls.n	8007988 <RCCEx_PLL3_Config+0x1e0>
      {
        return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e009      	b.n	800799c <RCCEx_PLL3_Config+0x1f4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007988:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800798c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007996:	2b00      	cmp	r3, #0
 8007998:	d0ed      	beq.n	8007976 <RCCEx_PLL3_Config+0x1ce>
    }

  }


  return status;
 800799a:	7bfb      	ldrb	r3, [r7, #15]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e049      	b.n	8007a4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d106      	bne.n	80079d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7f9 fd7c 	bl	80014c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	3304      	adds	r3, #4
 80079e0:	4619      	mov	r1, r3
 80079e2:	4610      	mov	r0, r2
 80079e4:	f000 f96e 	bl	8007cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d020      	beq.n	8007ab6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f003 0302 	and.w	r3, r3, #2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d01b      	beq.n	8007ab6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f06f 0202 	mvn.w	r2, #2
 8007a86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	f003 0303 	and.w	r3, r3, #3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d003      	beq.n	8007aa4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f8f3 	bl	8007c88 <HAL_TIM_IC_CaptureCallback>
 8007aa2:	e005      	b.n	8007ab0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f8e5 	bl	8007c74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f8f6 	bl	8007c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d020      	beq.n	8007b02 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f003 0304 	and.w	r3, r3, #4
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d01b      	beq.n	8007b02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f06f 0204 	mvn.w	r2, #4
 8007ad2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d003      	beq.n	8007af0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f8cd 	bl	8007c88 <HAL_TIM_IC_CaptureCallback>
 8007aee:	e005      	b.n	8007afc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f8bf 	bl	8007c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f8d0 	bl	8007c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	f003 0308 	and.w	r3, r3, #8
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d020      	beq.n	8007b4e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f003 0308 	and.w	r3, r3, #8
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d01b      	beq.n	8007b4e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f06f 0208 	mvn.w	r2, #8
 8007b1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2204      	movs	r2, #4
 8007b24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	69db      	ldr	r3, [r3, #28]
 8007b2c:	f003 0303 	and.w	r3, r3, #3
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d003      	beq.n	8007b3c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f8a7 	bl	8007c88 <HAL_TIM_IC_CaptureCallback>
 8007b3a:	e005      	b.n	8007b48 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f899 	bl	8007c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f8aa 	bl	8007c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f003 0310 	and.w	r3, r3, #16
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d020      	beq.n	8007b9a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f003 0310 	and.w	r3, r3, #16
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d01b      	beq.n	8007b9a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f06f 0210 	mvn.w	r2, #16
 8007b6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2208      	movs	r2, #8
 8007b70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d003      	beq.n	8007b88 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f881 	bl	8007c88 <HAL_TIM_IC_CaptureCallback>
 8007b86:	e005      	b.n	8007b94 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f873 	bl	8007c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f884 	bl	8007c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00c      	beq.n	8007bbe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d007      	beq.n	8007bbe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f06f 0201 	mvn.w	r2, #1
 8007bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f851 	bl	8007c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d104      	bne.n	8007bd2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00c      	beq.n	8007bec <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d007      	beq.n	8007bec <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f9d7 	bl	8007f9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00c      	beq.n	8007c10 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d007      	beq.n	8007c10 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f9cf 	bl	8007fae <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00c      	beq.n	8007c34 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d007      	beq.n	8007c34 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f83e 	bl	8007cb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	f003 0320 	and.w	r3, r3, #32
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00c      	beq.n	8007c58 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f003 0320 	and.w	r3, r3, #32
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d007      	beq.n	8007c58 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f06f 0220 	mvn.w	r2, #32
 8007c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f997 	bl	8007f86 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c58:	bf00      	nop
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d01f      	beq.n	8007d20 <TIM_Base_SetConfig+0x5c>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ce6:	d01b      	beq.n	8007d20 <TIM_Base_SetConfig+0x5c>
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007cee:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d014      	beq.n	8007d20 <TIM_Base_SetConfig+0x5c>
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007cfc:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d00d      	beq.n	8007d20 <TIM_Base_SetConfig+0x5c>
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007d0a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d006      	beq.n	8007d20 <TIM_Base_SetConfig+0x5c>
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d18:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d108      	bne.n	8007d32 <TIM_Base_SetConfig+0x6e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	2300      	movs	r3, #0
 8007d36:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d034      	beq.n	8007da8 <TIM_Base_SetConfig+0xe4>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d44:	d030      	beq.n	8007da8 <TIM_Base_SetConfig+0xe4>
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d4c:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d029      	beq.n	8007da8 <TIM_Base_SetConfig+0xe4>
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007d5a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d022      	beq.n	8007da8 <TIM_Base_SetConfig+0xe4>
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007d68:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d01b      	beq.n	8007da8 <TIM_Base_SetConfig+0xe4>
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d76:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d014      	beq.n	8007da8 <TIM_Base_SetConfig+0xe4>
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007d84:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d00d      	beq.n	8007da8 <TIM_Base_SetConfig+0xe4>
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007d92:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d006      	beq.n	8007da8 <TIM_Base_SetConfig+0xe4>
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8007da0:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d108      	bne.n	8007dba <TIM_Base_SetConfig+0xf6>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	689a      	ldr	r2, [r3, #8]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	2300      	movs	r3, #0
 8007de2:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d01b      	beq.n	8007e22 <TIM_Base_SetConfig+0x15e>
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007df0:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d014      	beq.n	8007e22 <TIM_Base_SetConfig+0x15e>
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007dfe:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d00d      	beq.n	8007e22 <TIM_Base_SetConfig+0x15e>
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8007e0c:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d006      	beq.n	8007e22 <TIM_Base_SetConfig+0x15e>
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8007e1a:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d103      	bne.n	8007e2a <TIM_Base_SetConfig+0x166>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	691a      	ldr	r2, [r3, #16]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d105      	bne.n	8007e48 <TIM_Base_SetConfig+0x184>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	f023 0201 	bic.w	r2, r3, #1
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	611a      	str	r2, [r3, #16]
  }
}
 8007e48:	bf00      	nop
 8007e4a:	3714      	adds	r7, #20
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d101      	bne.n	8007e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e68:	2302      	movs	r3, #2
 8007e6a:	e086      	b.n	8007f7a <HAL_TIMEx_MasterConfigSynchronization+0x126>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2202      	movs	r2, #2
 8007e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	2300      	movs	r3, #0
 8007e92:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d007      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ea2:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d108      	bne.n	8007ebc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007eb0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	2300      	movs	r3, #0
 8007edc:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d034      	beq.n	8007f4e <HAL_TIMEx_MasterConfigSynchronization+0xfa>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eec:	d02f      	beq.n	8007f4e <HAL_TIMEx_MasterConfigSynchronization+0xfa>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ef6:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d027      	beq.n	8007f4e <HAL_TIMEx_MasterConfigSynchronization+0xfa>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007f06:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d01f      	beq.n	8007f4e <HAL_TIMEx_MasterConfigSynchronization+0xfa>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007f16:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d017      	beq.n	8007f4e <HAL_TIMEx_MasterConfigSynchronization+0xfa>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f26:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d00f      	beq.n	8007f4e <HAL_TIMEx_MasterConfigSynchronization+0xfa>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007f36:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d007      	beq.n	8007f4e <HAL_TIMEx_MasterConfigSynchronization+0xfa>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007f46:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d10c      	bne.n	8007f68 <HAL_TIMEx_MasterConfigSynchronization+0x114>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b083      	sub	sp, #12
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f8e:	bf00      	nop
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b083      	sub	sp, #12
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fa2:	bf00      	nop
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007fb6:	bf00      	nop
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b082      	sub	sp, #8
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e042      	b.n	800805a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d106      	bne.n	8007fec <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7f9 fb16 	bl	8001618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2224      	movs	r2, #36	@ 0x24
 8007ff0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f022 0201 	bic.w	r2, r2, #1
 8008002:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fddd 	bl	8008bcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f826 	bl	8008064 <UART_SetConfig>
 8008018:	4603      	mov	r3, r0
 800801a:	2b01      	cmp	r3, #1
 800801c:	d101      	bne.n	8008022 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e01b      	b.n	800805a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	685a      	ldr	r2, [r3, #4]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008030:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689a      	ldr	r2, [r3, #8]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008040:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f042 0201 	orr.w	r2, r2, #1
 8008050:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fe5c 	bl	8008d10 <UART_CheckIdleState>
 8008058:	4603      	mov	r3, r0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
	...

08008064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008068:	b092      	sub	sp, #72	@ 0x48
 800806a:	af00      	add	r7, sp, #0
 800806c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	689a      	ldr	r2, [r3, #8]
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	431a      	orrs	r2, r3
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	431a      	orrs	r2, r3
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	69db      	ldr	r3, [r3, #28]
 8008088:	4313      	orrs	r3, r2
 800808a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	f646 13f3 	movw	r3, #27123	@ 0x69f3
 8008096:	f6cc 73ff 	movt	r3, #53247	@ 0xcfff
 800809a:	4013      	ands	r3, r2
 800809c:	697a      	ldr	r2, [r7, #20]
 800809e:	6812      	ldr	r2, [r2, #0]
 80080a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80080a2:	430b      	orrs	r3, r1
 80080a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	68da      	ldr	r2, [r3, #12]
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	430a      	orrs	r2, r1
 80080ba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80080ca:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d004      	beq.n	80080dc <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080d8:	4313      	orrs	r3, r2
 80080da:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689a      	ldr	r2, [r3, #8]
 80080e2:	f24f 43ff 	movw	r3, #62719	@ 0xf4ff
 80080e6:	f2c1 13ff 	movt	r3, #4607	@ 0x11ff
 80080ea:	4013      	ands	r3, r2
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	6812      	ldr	r2, [r2, #0]
 80080f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80080f2:	430b      	orrs	r3, r1
 80080f4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fc:	f023 010f 	bic.w	r1, r3, #15
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008114:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8008118:	429a      	cmp	r2, r3
 800811a:	d179      	bne.n	8008210 <UART_SetConfig+0x1ac>
 800811c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8008120:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8008124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008126:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800812a:	2b28      	cmp	r3, #40	@ 0x28
 800812c:	d86c      	bhi.n	8008208 <UART_SetConfig+0x1a4>
 800812e:	a201      	add	r2, pc, #4	@ (adr r2, 8008134 <UART_SetConfig+0xd0>)
 8008130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008134:	080081d9 	.word	0x080081d9
 8008138:	08008209 	.word	0x08008209
 800813c:	08008209 	.word	0x08008209
 8008140:	08008209 	.word	0x08008209
 8008144:	08008209 	.word	0x08008209
 8008148:	08008209 	.word	0x08008209
 800814c:	08008209 	.word	0x08008209
 8008150:	08008209 	.word	0x08008209
 8008154:	080081e1 	.word	0x080081e1
 8008158:	08008209 	.word	0x08008209
 800815c:	08008209 	.word	0x08008209
 8008160:	08008209 	.word	0x08008209
 8008164:	08008209 	.word	0x08008209
 8008168:	08008209 	.word	0x08008209
 800816c:	08008209 	.word	0x08008209
 8008170:	08008209 	.word	0x08008209
 8008174:	080081e9 	.word	0x080081e9
 8008178:	08008209 	.word	0x08008209
 800817c:	08008209 	.word	0x08008209
 8008180:	08008209 	.word	0x08008209
 8008184:	08008209 	.word	0x08008209
 8008188:	08008209 	.word	0x08008209
 800818c:	08008209 	.word	0x08008209
 8008190:	08008209 	.word	0x08008209
 8008194:	080081f1 	.word	0x080081f1
 8008198:	08008209 	.word	0x08008209
 800819c:	08008209 	.word	0x08008209
 80081a0:	08008209 	.word	0x08008209
 80081a4:	08008209 	.word	0x08008209
 80081a8:	08008209 	.word	0x08008209
 80081ac:	08008209 	.word	0x08008209
 80081b0:	08008209 	.word	0x08008209
 80081b4:	080081f9 	.word	0x080081f9
 80081b8:	08008209 	.word	0x08008209
 80081bc:	08008209 	.word	0x08008209
 80081c0:	08008209 	.word	0x08008209
 80081c4:	08008209 	.word	0x08008209
 80081c8:	08008209 	.word	0x08008209
 80081cc:	08008209 	.word	0x08008209
 80081d0:	08008209 	.word	0x08008209
 80081d4:	08008201 	.word	0x08008201
 80081d8:	2301      	movs	r3, #1
 80081da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081de:	e240      	b.n	8008662 <UART_SetConfig+0x5fe>
 80081e0:	2304      	movs	r3, #4
 80081e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081e6:	e23c      	b.n	8008662 <UART_SetConfig+0x5fe>
 80081e8:	2308      	movs	r3, #8
 80081ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ee:	e238      	b.n	8008662 <UART_SetConfig+0x5fe>
 80081f0:	2310      	movs	r3, #16
 80081f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081f6:	e234      	b.n	8008662 <UART_SetConfig+0x5fe>
 80081f8:	2320      	movs	r3, #32
 80081fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081fe:	e230      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008200:	2340      	movs	r3, #64	@ 0x40
 8008202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008206:	e22c      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008208:	2380      	movs	r3, #128	@ 0x80
 800820a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800820e:	e228      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8008218:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800821c:	429a      	cmp	r2, r3
 800821e:	d133      	bne.n	8008288 <UART_SetConfig+0x224>
 8008220:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8008224:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8008228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800822a:	f003 0307 	and.w	r3, r3, #7
 800822e:	2b05      	cmp	r3, #5
 8008230:	d826      	bhi.n	8008280 <UART_SetConfig+0x21c>
 8008232:	a201      	add	r2, pc, #4	@ (adr r2, 8008238 <UART_SetConfig+0x1d4>)
 8008234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008238:	08008251 	.word	0x08008251
 800823c:	08008259 	.word	0x08008259
 8008240:	08008261 	.word	0x08008261
 8008244:	08008269 	.word	0x08008269
 8008248:	08008271 	.word	0x08008271
 800824c:	08008279 	.word	0x08008279
 8008250:	2300      	movs	r3, #0
 8008252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008256:	e204      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008258:	2304      	movs	r3, #4
 800825a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800825e:	e200      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008260:	2308      	movs	r3, #8
 8008262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008266:	e1fc      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008268:	2310      	movs	r3, #16
 800826a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800826e:	e1f8      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008270:	2320      	movs	r3, #32
 8008272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008276:	e1f4      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008278:	2340      	movs	r3, #64	@ 0x40
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800827e:	e1f0      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008280:	2380      	movs	r3, #128	@ 0x80
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008286:	e1ec      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8008290:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8008294:	429a      	cmp	r2, r3
 8008296:	d133      	bne.n	8008300 <UART_SetConfig+0x29c>
 8008298:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800829c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80082a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082a2:	f003 0307 	and.w	r3, r3, #7
 80082a6:	2b05      	cmp	r3, #5
 80082a8:	d826      	bhi.n	80082f8 <UART_SetConfig+0x294>
 80082aa:	a201      	add	r2, pc, #4	@ (adr r2, 80082b0 <UART_SetConfig+0x24c>)
 80082ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b0:	080082c9 	.word	0x080082c9
 80082b4:	080082d1 	.word	0x080082d1
 80082b8:	080082d9 	.word	0x080082d9
 80082bc:	080082e1 	.word	0x080082e1
 80082c0:	080082e9 	.word	0x080082e9
 80082c4:	080082f1 	.word	0x080082f1
 80082c8:	2300      	movs	r3, #0
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ce:	e1c8      	b.n	8008662 <UART_SetConfig+0x5fe>
 80082d0:	2304      	movs	r3, #4
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d6:	e1c4      	b.n	8008662 <UART_SetConfig+0x5fe>
 80082d8:	2308      	movs	r3, #8
 80082da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082de:	e1c0      	b.n	8008662 <UART_SetConfig+0x5fe>
 80082e0:	2310      	movs	r3, #16
 80082e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082e6:	e1bc      	b.n	8008662 <UART_SetConfig+0x5fe>
 80082e8:	2320      	movs	r3, #32
 80082ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ee:	e1b8      	b.n	8008662 <UART_SetConfig+0x5fe>
 80082f0:	2340      	movs	r3, #64	@ 0x40
 80082f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082f6:	e1b4      	b.n	8008662 <UART_SetConfig+0x5fe>
 80082f8:	2380      	movs	r3, #128	@ 0x80
 80082fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082fe:	e1b0      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	f44f 4398 	mov.w	r3, #19456	@ 0x4c00
 8008308:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800830c:	429a      	cmp	r2, r3
 800830e:	d133      	bne.n	8008378 <UART_SetConfig+0x314>
 8008310:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8008314:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8008318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800831a:	f003 0307 	and.w	r3, r3, #7
 800831e:	2b05      	cmp	r3, #5
 8008320:	d826      	bhi.n	8008370 <UART_SetConfig+0x30c>
 8008322:	a201      	add	r2, pc, #4	@ (adr r2, 8008328 <UART_SetConfig+0x2c4>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	08008341 	.word	0x08008341
 800832c:	08008349 	.word	0x08008349
 8008330:	08008351 	.word	0x08008351
 8008334:	08008359 	.word	0x08008359
 8008338:	08008361 	.word	0x08008361
 800833c:	08008369 	.word	0x08008369
 8008340:	2300      	movs	r3, #0
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008346:	e18c      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008348:	2304      	movs	r3, #4
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800834e:	e188      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008350:	2308      	movs	r3, #8
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008356:	e184      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008358:	2310      	movs	r3, #16
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800835e:	e180      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008360:	2320      	movs	r3, #32
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008366:	e17c      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008368:	2340      	movs	r3, #64	@ 0x40
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800836e:	e178      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008370:	2380      	movs	r3, #128	@ 0x80
 8008372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008376:	e174      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8008380:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8008384:	429a      	cmp	r2, r3
 8008386:	d133      	bne.n	80083f0 <UART_SetConfig+0x38c>
 8008388:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800838c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8008390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008392:	f003 0307 	and.w	r3, r3, #7
 8008396:	2b05      	cmp	r3, #5
 8008398:	d826      	bhi.n	80083e8 <UART_SetConfig+0x384>
 800839a:	a201      	add	r2, pc, #4	@ (adr r2, 80083a0 <UART_SetConfig+0x33c>)
 800839c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a0:	080083b9 	.word	0x080083b9
 80083a4:	080083c1 	.word	0x080083c1
 80083a8:	080083c9 	.word	0x080083c9
 80083ac:	080083d1 	.word	0x080083d1
 80083b0:	080083d9 	.word	0x080083d9
 80083b4:	080083e1 	.word	0x080083e1
 80083b8:	2300      	movs	r3, #0
 80083ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083be:	e150      	b.n	8008662 <UART_SetConfig+0x5fe>
 80083c0:	2304      	movs	r3, #4
 80083c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083c6:	e14c      	b.n	8008662 <UART_SetConfig+0x5fe>
 80083c8:	2308      	movs	r3, #8
 80083ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ce:	e148      	b.n	8008662 <UART_SetConfig+0x5fe>
 80083d0:	2310      	movs	r3, #16
 80083d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083d6:	e144      	b.n	8008662 <UART_SetConfig+0x5fe>
 80083d8:	2320      	movs	r3, #32
 80083da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083de:	e140      	b.n	8008662 <UART_SetConfig+0x5fe>
 80083e0:	2340      	movs	r3, #64	@ 0x40
 80083e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083e6:	e13c      	b.n	8008662 <UART_SetConfig+0x5fe>
 80083e8:	2380      	movs	r3, #128	@ 0x80
 80083ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ee:	e138      	b.n	8008662 <UART_SetConfig+0x5fe>
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80083f8:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d179      	bne.n	80084f4 <UART_SetConfig+0x490>
 8008400:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8008404:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8008408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800840a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800840e:	2b28      	cmp	r3, #40	@ 0x28
 8008410:	d86c      	bhi.n	80084ec <UART_SetConfig+0x488>
 8008412:	a201      	add	r2, pc, #4	@ (adr r2, 8008418 <UART_SetConfig+0x3b4>)
 8008414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008418:	080084bd 	.word	0x080084bd
 800841c:	080084ed 	.word	0x080084ed
 8008420:	080084ed 	.word	0x080084ed
 8008424:	080084ed 	.word	0x080084ed
 8008428:	080084ed 	.word	0x080084ed
 800842c:	080084ed 	.word	0x080084ed
 8008430:	080084ed 	.word	0x080084ed
 8008434:	080084ed 	.word	0x080084ed
 8008438:	080084c5 	.word	0x080084c5
 800843c:	080084ed 	.word	0x080084ed
 8008440:	080084ed 	.word	0x080084ed
 8008444:	080084ed 	.word	0x080084ed
 8008448:	080084ed 	.word	0x080084ed
 800844c:	080084ed 	.word	0x080084ed
 8008450:	080084ed 	.word	0x080084ed
 8008454:	080084ed 	.word	0x080084ed
 8008458:	080084cd 	.word	0x080084cd
 800845c:	080084ed 	.word	0x080084ed
 8008460:	080084ed 	.word	0x080084ed
 8008464:	080084ed 	.word	0x080084ed
 8008468:	080084ed 	.word	0x080084ed
 800846c:	080084ed 	.word	0x080084ed
 8008470:	080084ed 	.word	0x080084ed
 8008474:	080084ed 	.word	0x080084ed
 8008478:	080084d5 	.word	0x080084d5
 800847c:	080084ed 	.word	0x080084ed
 8008480:	080084ed 	.word	0x080084ed
 8008484:	080084ed 	.word	0x080084ed
 8008488:	080084ed 	.word	0x080084ed
 800848c:	080084ed 	.word	0x080084ed
 8008490:	080084ed 	.word	0x080084ed
 8008494:	080084ed 	.word	0x080084ed
 8008498:	080084dd 	.word	0x080084dd
 800849c:	080084ed 	.word	0x080084ed
 80084a0:	080084ed 	.word	0x080084ed
 80084a4:	080084ed 	.word	0x080084ed
 80084a8:	080084ed 	.word	0x080084ed
 80084ac:	080084ed 	.word	0x080084ed
 80084b0:	080084ed 	.word	0x080084ed
 80084b4:	080084ed 	.word	0x080084ed
 80084b8:	080084e5 	.word	0x080084e5
 80084bc:	2301      	movs	r3, #1
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084c2:	e0ce      	b.n	8008662 <UART_SetConfig+0x5fe>
 80084c4:	2304      	movs	r3, #4
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ca:	e0ca      	b.n	8008662 <UART_SetConfig+0x5fe>
 80084cc:	2308      	movs	r3, #8
 80084ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084d2:	e0c6      	b.n	8008662 <UART_SetConfig+0x5fe>
 80084d4:	2310      	movs	r3, #16
 80084d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084da:	e0c2      	b.n	8008662 <UART_SetConfig+0x5fe>
 80084dc:	2320      	movs	r3, #32
 80084de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084e2:	e0be      	b.n	8008662 <UART_SetConfig+0x5fe>
 80084e4:	2340      	movs	r3, #64	@ 0x40
 80084e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ea:	e0ba      	b.n	8008662 <UART_SetConfig+0x5fe>
 80084ec:	2380      	movs	r3, #128	@ 0x80
 80084ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084f2:	e0b6      	b.n	8008662 <UART_SetConfig+0x5fe>
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80084fc:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8008500:	429a      	cmp	r2, r3
 8008502:	d133      	bne.n	800856c <UART_SetConfig+0x508>
 8008504:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8008508:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800850c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	2b05      	cmp	r3, #5
 8008514:	d826      	bhi.n	8008564 <UART_SetConfig+0x500>
 8008516:	a201      	add	r2, pc, #4	@ (adr r2, 800851c <UART_SetConfig+0x4b8>)
 8008518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851c:	08008535 	.word	0x08008535
 8008520:	0800853d 	.word	0x0800853d
 8008524:	08008545 	.word	0x08008545
 8008528:	0800854d 	.word	0x0800854d
 800852c:	08008555 	.word	0x08008555
 8008530:	0800855d 	.word	0x0800855d
 8008534:	2300      	movs	r3, #0
 8008536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800853a:	e092      	b.n	8008662 <UART_SetConfig+0x5fe>
 800853c:	2304      	movs	r3, #4
 800853e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008542:	e08e      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008544:	2308      	movs	r3, #8
 8008546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800854a:	e08a      	b.n	8008662 <UART_SetConfig+0x5fe>
 800854c:	2310      	movs	r3, #16
 800854e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008552:	e086      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008554:	2320      	movs	r3, #32
 8008556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800855a:	e082      	b.n	8008662 <UART_SetConfig+0x5fe>
 800855c:	2340      	movs	r3, #64	@ 0x40
 800855e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008562:	e07e      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008564:	2380      	movs	r3, #128	@ 0x80
 8008566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800856a:	e07a      	b.n	8008662 <UART_SetConfig+0x5fe>
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 8008574:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8008578:	429a      	cmp	r2, r3
 800857a:	d133      	bne.n	80085e4 <UART_SetConfig+0x580>
 800857c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8008580:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8008584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008586:	f003 0307 	and.w	r3, r3, #7
 800858a:	2b05      	cmp	r3, #5
 800858c:	d826      	bhi.n	80085dc <UART_SetConfig+0x578>
 800858e:	a201      	add	r2, pc, #4	@ (adr r2, 8008594 <UART_SetConfig+0x530>)
 8008590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008594:	080085ad 	.word	0x080085ad
 8008598:	080085b5 	.word	0x080085b5
 800859c:	080085bd 	.word	0x080085bd
 80085a0:	080085c5 	.word	0x080085c5
 80085a4:	080085cd 	.word	0x080085cd
 80085a8:	080085d5 	.word	0x080085d5
 80085ac:	2300      	movs	r3, #0
 80085ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b2:	e056      	b.n	8008662 <UART_SetConfig+0x5fe>
 80085b4:	2304      	movs	r3, #4
 80085b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ba:	e052      	b.n	8008662 <UART_SetConfig+0x5fe>
 80085bc:	2308      	movs	r3, #8
 80085be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085c2:	e04e      	b.n	8008662 <UART_SetConfig+0x5fe>
 80085c4:	2310      	movs	r3, #16
 80085c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ca:	e04a      	b.n	8008662 <UART_SetConfig+0x5fe>
 80085cc:	2320      	movs	r3, #32
 80085ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085d2:	e046      	b.n	8008662 <UART_SetConfig+0x5fe>
 80085d4:	2340      	movs	r3, #64	@ 0x40
 80085d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085da:	e042      	b.n	8008662 <UART_SetConfig+0x5fe>
 80085dc:	2380      	movs	r3, #128	@ 0x80
 80085de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085e2:	e03e      	b.n	8008662 <UART_SetConfig+0x5fe>
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80085ec:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d133      	bne.n	800865c <UART_SetConfig+0x5f8>
 80085f4:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80085f8:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 80085fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085fe:	f003 0307 	and.w	r3, r3, #7
 8008602:	2b05      	cmp	r3, #5
 8008604:	d826      	bhi.n	8008654 <UART_SetConfig+0x5f0>
 8008606:	a201      	add	r2, pc, #4	@ (adr r2, 800860c <UART_SetConfig+0x5a8>)
 8008608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860c:	08008625 	.word	0x08008625
 8008610:	0800862d 	.word	0x0800862d
 8008614:	08008635 	.word	0x08008635
 8008618:	0800863d 	.word	0x0800863d
 800861c:	08008645 	.word	0x08008645
 8008620:	0800864d 	.word	0x0800864d
 8008624:	2302      	movs	r3, #2
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800862a:	e01a      	b.n	8008662 <UART_SetConfig+0x5fe>
 800862c:	2304      	movs	r3, #4
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008632:	e016      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008634:	2308      	movs	r3, #8
 8008636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800863a:	e012      	b.n	8008662 <UART_SetConfig+0x5fe>
 800863c:	2310      	movs	r3, #16
 800863e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008642:	e00e      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008644:	2320      	movs	r3, #32
 8008646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800864a:	e00a      	b.n	8008662 <UART_SetConfig+0x5fe>
 800864c:	2340      	movs	r3, #64	@ 0x40
 800864e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008652:	e006      	b.n	8008662 <UART_SetConfig+0x5fe>
 8008654:	2380      	movs	r3, #128	@ 0x80
 8008656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800865a:	e002      	b.n	8008662 <UART_SetConfig+0x5fe>
 800865c:	2380      	movs	r3, #128	@ 0x80
 800865e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800866a:	f6c5 0300 	movt	r3, #22528	@ 0x5800
 800866e:	429a      	cmp	r2, r3
 8008670:	f040 8100 	bne.w	8008874 <UART_SetConfig+0x810>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008674:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008678:	2b20      	cmp	r3, #32
 800867a:	dc47      	bgt.n	800870c <UART_SetConfig+0x6a8>
 800867c:	2b02      	cmp	r3, #2
 800867e:	f2c0 8084 	blt.w	800878a <UART_SetConfig+0x726>
 8008682:	3b02      	subs	r3, #2
 8008684:	2b1e      	cmp	r3, #30
 8008686:	f200 8080 	bhi.w	800878a <UART_SetConfig+0x726>
 800868a:	a201      	add	r2, pc, #4	@ (adr r2, 8008690 <UART_SetConfig+0x62c>)
 800868c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008690:	08008713 	.word	0x08008713
 8008694:	0800878b 	.word	0x0800878b
 8008698:	0800871b 	.word	0x0800871b
 800869c:	0800878b 	.word	0x0800878b
 80086a0:	0800878b 	.word	0x0800878b
 80086a4:	0800878b 	.word	0x0800878b
 80086a8:	0800872b 	.word	0x0800872b
 80086ac:	0800878b 	.word	0x0800878b
 80086b0:	0800878b 	.word	0x0800878b
 80086b4:	0800878b 	.word	0x0800878b
 80086b8:	0800878b 	.word	0x0800878b
 80086bc:	0800878b 	.word	0x0800878b
 80086c0:	0800878b 	.word	0x0800878b
 80086c4:	0800878b 	.word	0x0800878b
 80086c8:	0800873b 	.word	0x0800873b
 80086cc:	0800878b 	.word	0x0800878b
 80086d0:	0800878b 	.word	0x0800878b
 80086d4:	0800878b 	.word	0x0800878b
 80086d8:	0800878b 	.word	0x0800878b
 80086dc:	0800878b 	.word	0x0800878b
 80086e0:	0800878b 	.word	0x0800878b
 80086e4:	0800878b 	.word	0x0800878b
 80086e8:	0800878b 	.word	0x0800878b
 80086ec:	0800878b 	.word	0x0800878b
 80086f0:	0800878b 	.word	0x0800878b
 80086f4:	0800878b 	.word	0x0800878b
 80086f8:	0800878b 	.word	0x0800878b
 80086fc:	0800878b 	.word	0x0800878b
 8008700:	0800878b 	.word	0x0800878b
 8008704:	0800878b 	.word	0x0800878b
 8008708:	08008777 	.word	0x08008777
 800870c:	2b40      	cmp	r3, #64	@ 0x40
 800870e:	d038      	beq.n	8008782 <UART_SetConfig+0x71e>
 8008710:	e03b      	b.n	800878a <UART_SetConfig+0x726>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008712:	f7fe fa8d 	bl	8006c30 <HAL_RCCEx_GetD3PCLK1Freq>
 8008716:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008718:	e03d      	b.n	8008796 <UART_SetConfig+0x732>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800871a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800871e:	4618      	mov	r0, r3
 8008720:	f7fe fa9e 	bl	8006c60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008728:	e035      	b.n	8008796 <UART_SetConfig+0x732>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800872a:	f107 0318 	add.w	r3, r7, #24
 800872e:	4618      	mov	r0, r3
 8008730:	f7fe fc23 	bl	8006f7a <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008738:	e02d      	b.n	8008796 <UART_SetConfig+0x732>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800873a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800873e:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00e      	beq.n	800876a <UART_SetConfig+0x706>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800874c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8008750:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	08db      	lsrs	r3, r3, #3
 8008758:	f003 0203 	and.w	r2, r3, #3
 800875c:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8008760:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8008764:	40d3      	lsrs	r3, r2
 8008766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008768:	e015      	b.n	8008796 <UART_SetConfig+0x732>
          pclk = (uint32_t) HSI_VALUE;
 800876a:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800876e:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8008772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008774:	e00f      	b.n	8008796 <UART_SetConfig+0x732>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008776:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800877a:	f2c0 033d 	movt	r3, #61	@ 0x3d
 800877e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008780:	e009      	b.n	8008796 <UART_SetConfig+0x732>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008788:	e005      	b.n	8008796 <UART_SetConfig+0x732>
      default:
        pclk = 0U;
 800878a:	2300      	movs	r3, #0
 800878c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008794:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008798:	2b00      	cmp	r3, #0
 800879a:	f000 8202 	beq.w	8008ba2 <UART_SetConfig+0xb3e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087a2:	f649 03b0 	movw	r3, #39088	@ 0x98b0
 80087a6:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80087aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80087ae:	461a      	mov	r2, r3
 80087b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80087b6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	4613      	mov	r3, r2
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	4413      	add	r3, r2
 80087c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d305      	bcc.n	80087d4 <UART_SetConfig+0x770>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d903      	bls.n	80087dc <UART_SetConfig+0x778>
      {
        ret = HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80087da:	e1e2      	b.n	8008ba2 <UART_SetConfig+0xb3e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087de:	2200      	movs	r2, #0
 80087e0:	60bb      	str	r3, [r7, #8]
 80087e2:	60fa      	str	r2, [r7, #12]
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087e8:	f649 03b0 	movw	r3, #39088	@ 0x98b0
 80087ec:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80087f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	2200      	movs	r2, #0
 80087f8:	603b      	str	r3, [r7, #0]
 80087fa:	607a      	str	r2, [r7, #4]
 80087fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008800:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008804:	f7f7 fd68 	bl	80002d8 <__aeabi_uldivmod>
 8008808:	4602      	mov	r2, r0
 800880a:	460b      	mov	r3, r1
 800880c:	4610      	mov	r0, r2
 800880e:	4619      	mov	r1, r3
 8008810:	f04f 0200 	mov.w	r2, #0
 8008814:	f04f 0300 	mov.w	r3, #0
 8008818:	020b      	lsls	r3, r1, #8
 800881a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800881e:	0202      	lsls	r2, r0, #8
 8008820:	6979      	ldr	r1, [r7, #20]
 8008822:	6849      	ldr	r1, [r1, #4]
 8008824:	0849      	lsrs	r1, r1, #1
 8008826:	2000      	movs	r0, #0
 8008828:	460c      	mov	r4, r1
 800882a:	4605      	mov	r5, r0
 800882c:	eb12 0804 	adds.w	r8, r2, r4
 8008830:	eb43 0905 	adc.w	r9, r3, r5
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	469a      	mov	sl, r3
 800883c:	4693      	mov	fp, r2
 800883e:	4652      	mov	r2, sl
 8008840:	465b      	mov	r3, fp
 8008842:	4640      	mov	r0, r8
 8008844:	4649      	mov	r1, r9
 8008846:	f7f7 fd47 	bl	80002d8 <__aeabi_uldivmod>
 800884a:	4602      	mov	r2, r0
 800884c:	460b      	mov	r3, r1
 800884e:	4613      	mov	r3, r2
 8008850:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008854:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008858:	d308      	bcc.n	800886c <UART_SetConfig+0x808>
 800885a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800885c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008860:	d204      	bcs.n	800886c <UART_SetConfig+0x808>
        {
          huart->Instance->BRR = usartdiv;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008868:	60da      	str	r2, [r3, #12]
 800886a:	e19a      	b.n	8008ba2 <UART_SetConfig+0xb3e>
        }
        else
        {
          ret = HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008872:	e196      	b.n	8008ba2 <UART_SetConfig+0xb3e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	69db      	ldr	r3, [r3, #28]
 8008878:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800887c:	f040 80d1 	bne.w	8008a22 <UART_SetConfig+0x9be>
  {
    switch (clocksource)
 8008880:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008884:	2b20      	cmp	r3, #32
 8008886:	dc4b      	bgt.n	8008920 <UART_SetConfig+0x8bc>
 8008888:	2b00      	cmp	r3, #0
 800888a:	f2c0 808c 	blt.w	80089a6 <UART_SetConfig+0x942>
 800888e:	2b20      	cmp	r3, #32
 8008890:	f200 8089 	bhi.w	80089a6 <UART_SetConfig+0x942>
 8008894:	a201      	add	r2, pc, #4	@ (adr r2, 800889c <UART_SetConfig+0x838>)
 8008896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889a:	bf00      	nop
 800889c:	08008927 	.word	0x08008927
 80088a0:	0800892f 	.word	0x0800892f
 80088a4:	080089a7 	.word	0x080089a7
 80088a8:	080089a7 	.word	0x080089a7
 80088ac:	08008937 	.word	0x08008937
 80088b0:	080089a7 	.word	0x080089a7
 80088b4:	080089a7 	.word	0x080089a7
 80088b8:	080089a7 	.word	0x080089a7
 80088bc:	08008947 	.word	0x08008947
 80088c0:	080089a7 	.word	0x080089a7
 80088c4:	080089a7 	.word	0x080089a7
 80088c8:	080089a7 	.word	0x080089a7
 80088cc:	080089a7 	.word	0x080089a7
 80088d0:	080089a7 	.word	0x080089a7
 80088d4:	080089a7 	.word	0x080089a7
 80088d8:	080089a7 	.word	0x080089a7
 80088dc:	08008957 	.word	0x08008957
 80088e0:	080089a7 	.word	0x080089a7
 80088e4:	080089a7 	.word	0x080089a7
 80088e8:	080089a7 	.word	0x080089a7
 80088ec:	080089a7 	.word	0x080089a7
 80088f0:	080089a7 	.word	0x080089a7
 80088f4:	080089a7 	.word	0x080089a7
 80088f8:	080089a7 	.word	0x080089a7
 80088fc:	080089a7 	.word	0x080089a7
 8008900:	080089a7 	.word	0x080089a7
 8008904:	080089a7 	.word	0x080089a7
 8008908:	080089a7 	.word	0x080089a7
 800890c:	080089a7 	.word	0x080089a7
 8008910:	080089a7 	.word	0x080089a7
 8008914:	080089a7 	.word	0x080089a7
 8008918:	080089a7 	.word	0x080089a7
 800891c:	08008993 	.word	0x08008993
 8008920:	2b40      	cmp	r3, #64	@ 0x40
 8008922:	d03c      	beq.n	800899e <UART_SetConfig+0x93a>
 8008924:	e03f      	b.n	80089a6 <UART_SetConfig+0x942>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008926:	f7fb ff91 	bl	800484c <HAL_RCC_GetPCLK1Freq>
 800892a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800892c:	e041      	b.n	80089b2 <UART_SetConfig+0x94e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800892e:	f7fb ffa5 	bl	800487c <HAL_RCC_GetPCLK2Freq>
 8008932:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008934:	e03d      	b.n	80089b2 <UART_SetConfig+0x94e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008936:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe f990 	bl	8006c60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008944:	e035      	b.n	80089b2 <UART_SetConfig+0x94e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008946:	f107 0318 	add.w	r3, r7, #24
 800894a:	4618      	mov	r0, r3
 800894c:	f7fe fb15 	bl	8006f7a <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008954:	e02d      	b.n	80089b2 <UART_SetConfig+0x94e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008956:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800895a:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0320 	and.w	r3, r3, #32
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00e      	beq.n	8008986 <UART_SetConfig+0x922>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008968:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800896c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	08db      	lsrs	r3, r3, #3
 8008974:	f003 0203 	and.w	r2, r3, #3
 8008978:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800897c:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8008980:	40d3      	lsrs	r3, r2
 8008982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008984:	e015      	b.n	80089b2 <UART_SetConfig+0x94e>
          pclk = (uint32_t) HSI_VALUE;
 8008986:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800898a:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 800898e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008990:	e00f      	b.n	80089b2 <UART_SetConfig+0x94e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008992:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8008996:	f2c0 033d 	movt	r3, #61	@ 0x3d
 800899a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800899c:	e009      	b.n	80089b2 <UART_SetConfig+0x94e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800899e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089a4:	e005      	b.n	80089b2 <UART_SetConfig+0x94e>
      default:
        pclk = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80089b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f000 80f4 	beq.w	8008ba2 <UART_SetConfig+0xb3e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80089be:	f649 03b0 	movw	r3, #39088	@ 0x98b0
 80089c2:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80089c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80089ca:	461a      	mov	r2, r3
 80089cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80089d2:	005a      	lsls	r2, r3, #1
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	085b      	lsrs	r3, r3, #1
 80089da:	441a      	add	r2, r3
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e8:	2b0f      	cmp	r3, #15
 80089ea:	d916      	bls.n	8008a1a <UART_SetConfig+0x9b6>
 80089ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089f2:	d212      	bcs.n	8008a1a <UART_SetConfig+0x9b6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	f023 030f 	bic.w	r3, r3, #15
 80089fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a00:	085b      	lsrs	r3, r3, #1
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	f003 0307 	and.w	r3, r3, #7
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008a16:	60da      	str	r2, [r3, #12]
 8008a18:	e0c3      	b.n	8008ba2 <UART_SetConfig+0xb3e>
      }
      else
      {
        ret = HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008a20:	e0bf      	b.n	8008ba2 <UART_SetConfig+0xb3e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008a26:	2b20      	cmp	r3, #32
 8008a28:	dc4a      	bgt.n	8008ac0 <UART_SetConfig+0xa5c>
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f2c0 808b 	blt.w	8008b46 <UART_SetConfig+0xae2>
 8008a30:	2b20      	cmp	r3, #32
 8008a32:	f200 8088 	bhi.w	8008b46 <UART_SetConfig+0xae2>
 8008a36:	a201      	add	r2, pc, #4	@ (adr r2, 8008a3c <UART_SetConfig+0x9d8>)
 8008a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3c:	08008ac7 	.word	0x08008ac7
 8008a40:	08008acf 	.word	0x08008acf
 8008a44:	08008b47 	.word	0x08008b47
 8008a48:	08008b47 	.word	0x08008b47
 8008a4c:	08008ad7 	.word	0x08008ad7
 8008a50:	08008b47 	.word	0x08008b47
 8008a54:	08008b47 	.word	0x08008b47
 8008a58:	08008b47 	.word	0x08008b47
 8008a5c:	08008ae7 	.word	0x08008ae7
 8008a60:	08008b47 	.word	0x08008b47
 8008a64:	08008b47 	.word	0x08008b47
 8008a68:	08008b47 	.word	0x08008b47
 8008a6c:	08008b47 	.word	0x08008b47
 8008a70:	08008b47 	.word	0x08008b47
 8008a74:	08008b47 	.word	0x08008b47
 8008a78:	08008b47 	.word	0x08008b47
 8008a7c:	08008af7 	.word	0x08008af7
 8008a80:	08008b47 	.word	0x08008b47
 8008a84:	08008b47 	.word	0x08008b47
 8008a88:	08008b47 	.word	0x08008b47
 8008a8c:	08008b47 	.word	0x08008b47
 8008a90:	08008b47 	.word	0x08008b47
 8008a94:	08008b47 	.word	0x08008b47
 8008a98:	08008b47 	.word	0x08008b47
 8008a9c:	08008b47 	.word	0x08008b47
 8008aa0:	08008b47 	.word	0x08008b47
 8008aa4:	08008b47 	.word	0x08008b47
 8008aa8:	08008b47 	.word	0x08008b47
 8008aac:	08008b47 	.word	0x08008b47
 8008ab0:	08008b47 	.word	0x08008b47
 8008ab4:	08008b47 	.word	0x08008b47
 8008ab8:	08008b47 	.word	0x08008b47
 8008abc:	08008b33 	.word	0x08008b33
 8008ac0:	2b40      	cmp	r3, #64	@ 0x40
 8008ac2:	d03c      	beq.n	8008b3e <UART_SetConfig+0xada>
 8008ac4:	e03f      	b.n	8008b46 <UART_SetConfig+0xae2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ac6:	f7fb fec1 	bl	800484c <HAL_RCC_GetPCLK1Freq>
 8008aca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008acc:	e041      	b.n	8008b52 <UART_SetConfig+0xaee>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ace:	f7fb fed5 	bl	800487c <HAL_RCC_GetPCLK2Freq>
 8008ad2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ad4:	e03d      	b.n	8008b52 <UART_SetConfig+0xaee>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ad6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe f8c0 	bl	8006c60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ae4:	e035      	b.n	8008b52 <UART_SetConfig+0xaee>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ae6:	f107 0318 	add.w	r3, r7, #24
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fe fa45 	bl	8006f7a <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af4:	e02d      	b.n	8008b52 <UART_SetConfig+0xaee>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008af6:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8008afa:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0320 	and.w	r3, r3, #32
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00e      	beq.n	8008b26 <UART_SetConfig+0xac2>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b08:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8008b0c:	f6c5 0302 	movt	r3, #22530	@ 0x5802
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	08db      	lsrs	r3, r3, #3
 8008b14:	f003 0203 	and.w	r2, r3, #3
 8008b18:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8008b1c:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8008b20:	40d3      	lsrs	r3, r2
 8008b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b24:	e015      	b.n	8008b52 <UART_SetConfig+0xaee>
          pclk = (uint32_t) HSI_VALUE;
 8008b26:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8008b2a:	f2c0 33d0 	movt	r3, #976	@ 0x3d0
 8008b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b30:	e00f      	b.n	8008b52 <UART_SetConfig+0xaee>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b32:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8008b36:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8008b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b3c:	e009      	b.n	8008b52 <UART_SetConfig+0xaee>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b44:	e005      	b.n	8008b52 <UART_SetConfig+0xaee>
      default:
        pclk = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008b50:	bf00      	nop
    }

    if (pclk != 0U)
 8008b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d024      	beq.n	8008ba2 <UART_SetConfig+0xb3e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b5c:	f649 03b0 	movw	r3, #39088	@ 0x98b0
 8008b60:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8008b64:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008b68:	461a      	mov	r2, r3
 8008b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	085b      	lsrs	r3, r3, #1
 8008b76:	441a      	add	r2, r3
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b80:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b84:	2b0f      	cmp	r3, #15
 8008b86:	d909      	bls.n	8008b9c <UART_SetConfig+0xb38>
 8008b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b8e:	d205      	bcs.n	8008b9c <UART_SetConfig+0xb38>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	60da      	str	r2, [r3, #12]
 8008b9a:	e002      	b.n	8008ba2 <UART_SetConfig+0xb3e>
      }
      else
      {
        ret = HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008bbe:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3748      	adds	r7, #72	@ 0x48
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008bcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd8:	f003 0308 	and.w	r3, r3, #8
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00a      	beq.n	8008bf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00a      	beq.n	8008c18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	430a      	orrs	r2, r1
 8008c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c1c:	f003 0302 	and.w	r3, r3, #2
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00a      	beq.n	8008c3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	430a      	orrs	r2, r1
 8008c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c3e:	f003 0304 	and.w	r3, r3, #4
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00a      	beq.n	8008c5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c60:	f003 0310 	and.w	r3, r3, #16
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00a      	beq.n	8008c7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c82:	f003 0320 	and.w	r3, r3, #32
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00a      	beq.n	8008ca0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	430a      	orrs	r2, r1
 8008c9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d01a      	beq.n	8008ce2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	430a      	orrs	r2, r1
 8008cc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cca:	d10a      	bne.n	8008ce2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	430a      	orrs	r2, r1
 8008ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00a      	beq.n	8008d04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	430a      	orrs	r2, r1
 8008d02:	605a      	str	r2, [r3, #4]
  }
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b098      	sub	sp, #96	@ 0x60
 8008d14:	af02      	add	r7, sp, #8
 8008d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d20:	f7f8 fea2 	bl	8001a68 <HAL_GetTick>
 8008d24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0308 	and.w	r3, r3, #8
 8008d30:	2b08      	cmp	r3, #8
 8008d32:	d12f      	bne.n	8008d94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d38:	9300      	str	r3, [sp, #0]
 8008d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f88e 	bl	8008e64 <UART_WaitOnFlagUntilTimeout>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d022      	beq.n	8008d94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d56:	e853 3f00 	ldrex	r3, [r3]
 8008d5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d62:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d6e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d74:	e841 2300 	strex	r3, r2, [r1]
 8008d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1e6      	bne.n	8008d4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2220      	movs	r2, #32
 8008d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e063      	b.n	8008e5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0304 	and.w	r3, r3, #4
 8008d9e:	2b04      	cmp	r3, #4
 8008da0:	d149      	bne.n	8008e36 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008da2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008daa:	2200      	movs	r2, #0
 8008dac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f857 	bl	8008e64 <UART_WaitOnFlagUntilTimeout>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d03c      	beq.n	8008e36 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc4:	e853 3f00 	ldrex	r3, [r3]
 8008dc8:	623b      	str	r3, [r7, #32]
   return(result);
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dda:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ddc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008de0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008de2:	e841 2300 	strex	r3, r2, [r1]
 8008de6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1e6      	bne.n	8008dbc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	3308      	adds	r3, #8
 8008df4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	e853 3f00 	ldrex	r3, [r3]
 8008dfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f023 0301 	bic.w	r3, r3, #1
 8008e04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	3308      	adds	r3, #8
 8008e0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e0e:	61fa      	str	r2, [r7, #28]
 8008e10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e12:	69b9      	ldr	r1, [r7, #24]
 8008e14:	69fa      	ldr	r2, [r7, #28]
 8008e16:	e841 2300 	strex	r3, r2, [r1]
 8008e1a:	617b      	str	r3, [r7, #20]
   return(result);
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1e5      	bne.n	8008dee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2220      	movs	r2, #32
 8008e26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e32:	2303      	movs	r3, #3
 8008e34:	e012      	b.n	8008e5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2220      	movs	r2, #32
 8008e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2220      	movs	r2, #32
 8008e42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3758      	adds	r7, #88	@ 0x58
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	603b      	str	r3, [r7, #0]
 8008e70:	4613      	mov	r3, r2
 8008e72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e74:	e04f      	b.n	8008f16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7c:	d04b      	beq.n	8008f16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e7e:	f7f8 fdf3 	bl	8001a68 <HAL_GetTick>
 8008e82:	4602      	mov	r2, r0
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	69ba      	ldr	r2, [r7, #24]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d302      	bcc.n	8008e94 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d101      	bne.n	8008e98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e04e      	b.n	8008f36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0304 	and.w	r3, r3, #4
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d037      	beq.n	8008f16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	2b80      	cmp	r3, #128	@ 0x80
 8008eaa:	d034      	beq.n	8008f16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	2b40      	cmp	r3, #64	@ 0x40
 8008eb0:	d031      	beq.n	8008f16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	69db      	ldr	r3, [r3, #28]
 8008eb8:	f003 0308 	and.w	r3, r3, #8
 8008ebc:	2b08      	cmp	r3, #8
 8008ebe:	d110      	bne.n	8008ee2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2208      	movs	r2, #8
 8008ec6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f000 f838 	bl	8008f3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2208      	movs	r2, #8
 8008ed2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e029      	b.n	8008f36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008eec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ef0:	d111      	bne.n	8008f16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008efa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f000 f81e 	bl	8008f3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2220      	movs	r2, #32
 8008f06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e00f      	b.n	8008f36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	69da      	ldr	r2, [r3, #28]
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	4013      	ands	r3, r2
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	bf0c      	ite	eq
 8008f26:	2301      	moveq	r3, #1
 8008f28:	2300      	movne	r3, #0
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	79fb      	ldrb	r3, [r7, #7]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d0a0      	beq.n	8008e76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f3e:	b480      	push	{r7}
 8008f40:	b095      	sub	sp, #84	@ 0x54
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f4e:	e853 3f00 	ldrex	r3, [r3]
 8008f52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	461a      	mov	r2, r3
 8008f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f64:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f6c:	e841 2300 	strex	r3, r2, [r1]
 8008f70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1e6      	bne.n	8008f46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3308      	adds	r3, #8
 8008f7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f80:	6a3b      	ldr	r3, [r7, #32]
 8008f82:	e853 3f00 	ldrex	r3, [r3]
 8008f86:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f88:	69fa      	ldr	r2, [r7, #28]
 8008f8a:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8008f8e:	f6ce 73ff 	movt	r3, #61439	@ 0xefff
 8008f92:	4013      	ands	r3, r2
 8008f94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	3308      	adds	r3, #8
 8008f9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fa6:	e841 2300 	strex	r3, r2, [r1]
 8008faa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1e2      	bne.n	8008f78 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d118      	bne.n	8008fec <UART_EndRxTransfer+0xae>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	e853 3f00 	ldrex	r3, [r3]
 8008fc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	f023 0310 	bic.w	r3, r3, #16
 8008fce:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fd8:	61bb      	str	r3, [r7, #24]
 8008fda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fdc:	6979      	ldr	r1, [r7, #20]
 8008fde:	69ba      	ldr	r2, [r7, #24]
 8008fe0:	e841 2300 	strex	r3, r2, [r1]
 8008fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1e6      	bne.n	8008fba <UART_EndRxTransfer+0x7c>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2220      	movs	r2, #32
 8008ff0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009000:	bf00      	nop
 8009002:	3754      	adds	r7, #84	@ 0x54
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800901a:	2b01      	cmp	r3, #1
 800901c:	d101      	bne.n	8009022 <HAL_UARTEx_DisableFifoMode+0x16>
 800901e:	2302      	movs	r3, #2
 8009020:	e027      	b.n	8009072 <HAL_UARTEx_DisableFifoMode+0x66>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2224      	movs	r2, #36	@ 0x24
 800902e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f022 0201 	bic.w	r2, r2, #1
 8009048:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009050:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2220      	movs	r2, #32
 8009064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b084      	sub	sp, #16
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
 8009086:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800908e:	2b01      	cmp	r3, #1
 8009090:	d101      	bne.n	8009096 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009092:	2302      	movs	r3, #2
 8009094:	e02d      	b.n	80090f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2224      	movs	r2, #36	@ 0x24
 80090a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f022 0201 	bic.w	r2, r2, #1
 80090bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	430a      	orrs	r2, r1
 80090d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f84f 	bl	8009176 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2220      	movs	r2, #32
 80090e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b084      	sub	sp, #16
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800910a:	2b01      	cmp	r3, #1
 800910c:	d101      	bne.n	8009112 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800910e:	2302      	movs	r3, #2
 8009110:	e02d      	b.n	800916e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2201      	movs	r2, #1
 8009116:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2224      	movs	r2, #36	@ 0x24
 800911e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f022 0201 	bic.w	r2, r2, #1
 8009138:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	683a      	ldr	r2, [r7, #0]
 800914a:	430a      	orrs	r2, r1
 800914c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f811 	bl	8009176 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2220      	movs	r2, #32
 8009160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009176:	b480      	push	{r7}
 8009178:	b085      	sub	sp, #20
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009182:	2b00      	cmp	r3, #0
 8009184:	d108      	bne.n	8009198 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2201      	movs	r2, #1
 8009192:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009196:	e03d      	b.n	8009214 <UARTEx_SetNbDataToProcess+0x9e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009198:	2310      	movs	r3, #16
 800919a:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800919c:	2310      	movs	r3, #16
 800919e:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	0e5b      	lsrs	r3, r3, #25
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	f003 0307 	and.w	r3, r3, #7
 80091ae:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	0f5b      	lsrs	r3, r3, #29
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	f003 0307 	and.w	r3, r3, #7
 80091be:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091c0:	7bba      	ldrb	r2, [r7, #14]
 80091c2:	7b39      	ldrb	r1, [r7, #12]
 80091c4:	f649 03c8 	movw	r3, #39112	@ 0x98c8
 80091c8:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80091cc:	5c5b      	ldrb	r3, [r3, r1]
 80091ce:	fb03 f202 	mul.w	r2, r3, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80091d2:	7b39      	ldrb	r1, [r7, #12]
 80091d4:	f649 03d0 	movw	r3, #39120	@ 0x98d0
 80091d8:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80091dc:	5c5b      	ldrb	r3, [r3, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091de:	fb92 f3f3 	sdiv	r3, r2, r3
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091ea:	7bfa      	ldrb	r2, [r7, #15]
 80091ec:	7b79      	ldrb	r1, [r7, #13]
 80091ee:	f649 03c8 	movw	r3, #39112	@ 0x98c8
 80091f2:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80091f6:	5c5b      	ldrb	r3, [r3, r1]
 80091f8:	fb03 f202 	mul.w	r2, r3, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80091fc:	7b79      	ldrb	r1, [r7, #13]
 80091fe:	f649 03d0 	movw	r3, #39120	@ 0x98d0
 8009202:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8009206:	5c5b      	ldrb	r3, [r3, r1]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009208:	fb92 f3f3 	sdiv	r3, r2, r3
 800920c:	b29a      	uxth	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009214:	bf00      	nop
 8009216:	3714      	adds	r7, #20
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009220:	b084      	sub	sp, #16
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	f107 001c 	add.w	r0, r7, #28
 800922e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009232:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009236:	2b01      	cmp	r3, #1
 8009238:	d124      	bne.n	8009284 <USB_CoreInit+0x64>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800923e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68da      	ldr	r2, [r3, #12]
 800924a:	f64f 73bf 	movw	r3, #65471	@ 0xffbf
 800924e:	f6cf 73bd 	movt	r3, #65469	@ 0xffbd
 8009252:	4013      	ands	r3, r2
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009264:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009268:	2b01      	cmp	r3, #1
 800926a:	d105      	bne.n	8009278 <USB_CoreInit+0x58>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 faa7 	bl	80097cc <USB_CoreReset>
 800927e:	4603      	mov	r3, r0
 8009280:	73fb      	strb	r3, [r7, #15]
 8009282:	e01b      	b.n	80092bc <USB_CoreInit+0x9c>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fa9b 	bl	80097cc <USB_CoreReset>
 8009296:	4603      	mov	r3, r0
 8009298:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800929a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d106      	bne.n	80092b0 <USB_CoreInit+0x90>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80092ae:	e005      	b.n	80092bc <USB_CoreInit+0x9c>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80092bc:	7fbb      	ldrb	r3, [r7, #30]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d118      	bne.n	80092f4 <USB_CoreInit+0xd4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80092d0:	2300      	movs	r3, #0
 80092d2:	f2c0 33ee 	movt	r3, #1006	@ 0x3ee
 80092d6:	4313      	orrs	r3, r2
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	f043 0206 	orr.w	r2, r3, #6
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	f043 0220 	orr.w	r2, r3, #32
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80092f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009300:	b004      	add	sp, #16
 8009302:	4770      	bx	lr

08009304 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	f023 0201 	bic.w	r2, r3, #1
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	370c      	adds	r7, #12
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr

08009326 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b084      	sub	sp, #16
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
 800932e:	460b      	mov	r3, r1
 8009330:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009332:	2300      	movs	r3, #0
 8009334:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009342:	78fb      	ldrb	r3, [r7, #3]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d115      	bne.n	8009374 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009354:	200a      	movs	r0, #10
 8009356:	f7f8 fb93 	bl	8001a80 <HAL_Delay>
      ms += 10U;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	330a      	adds	r3, #10
 800935e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fa25 	bl	80097b0 <USB_GetMode>
 8009366:	4603      	mov	r3, r0
 8009368:	2b01      	cmp	r3, #1
 800936a:	d01e      	beq.n	80093aa <USB_SetCurrentMode+0x84>
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009370:	d9f0      	bls.n	8009354 <USB_SetCurrentMode+0x2e>
 8009372:	e01a      	b.n	80093aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009374:	78fb      	ldrb	r3, [r7, #3]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d115      	bne.n	80093a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009386:	200a      	movs	r0, #10
 8009388:	f7f8 fb7a 	bl	8001a80 <HAL_Delay>
      ms += 10U;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	330a      	adds	r3, #10
 8009390:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fa0c 	bl	80097b0 <USB_GetMode>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d005      	beq.n	80093aa <USB_SetCurrentMode+0x84>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80093a2:	d9f0      	bls.n	8009386 <USB_SetCurrentMode+0x60>
 80093a4:	e001      	b.n	80093aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e005      	b.n	80093b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2bc8      	cmp	r3, #200	@ 0xc8
 80093ae:	d101      	bne.n	80093b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e000      	b.n	80093b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80093be:	b084      	sub	sp, #16
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80093cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80093d0:	2300      	movs	r3, #0
 80093d2:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80093d8:	2300      	movs	r3, #0
 80093da:	613b      	str	r3, [r7, #16]
 80093dc:	e009      	b.n	80093f2 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	3340      	adds	r3, #64	@ 0x40
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	2200      	movs	r2, #0
 80093ea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	3301      	adds	r3, #1
 80093f0:	613b      	str	r3, [r7, #16]
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	2b0e      	cmp	r3, #14
 80093f6:	d9f2      	bls.n	80093de <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80093f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d11c      	bne.n	800943a <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800940e:	f043 0302 	orr.w	r3, r3, #2
 8009412:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009418:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	e005      	b.n	8009446 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800943e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800944c:	461a      	mov	r2, r3
 800944e:	2300      	movs	r3, #0
 8009450:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009452:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009456:	2b01      	cmp	r3, #1
 8009458:	d10d      	bne.n	8009476 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800945a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800945e:	2b00      	cmp	r3, #0
 8009460:	d104      	bne.n	800946c <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009462:	2100      	movs	r1, #0
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f969 	bl	800973c <USB_SetDevSpeed>
 800946a:	e008      	b.n	800947e <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800946c:	2101      	movs	r1, #1
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f964 	bl	800973c <USB_SetDevSpeed>
 8009474:	e003      	b.n	800947e <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009476:	2103      	movs	r1, #3
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 f95f 	bl	800973c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800947e:	2110      	movs	r1, #16
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f8fb 	bl	800967c <USB_FlushTxFifo>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d001      	beq.n	8009490 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f925 	bl	80096e0 <USB_FlushRxFifo>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094a6:	461a      	mov	r2, r3
 80094a8:	2300      	movs	r3, #0
 80094aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094b2:	461a      	mov	r2, r3
 80094b4:	2300      	movs	r3, #0
 80094b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094be:	461a      	mov	r2, r3
 80094c0:	2300      	movs	r3, #0
 80094c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094c4:	2300      	movs	r3, #0
 80094c6:	613b      	str	r3, [r7, #16]
 80094c8:	e043      	b.n	8009552 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	015a      	lsls	r2, r3, #5
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094e0:	d118      	bne.n	8009514 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d10a      	bne.n	80094fe <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	015a      	lsls	r2, r3, #5
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	4413      	add	r3, r2
 80094f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094f4:	461a      	mov	r2, r3
 80094f6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80094fa:	6013      	str	r3, [r2, #0]
 80094fc:	e013      	b.n	8009526 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	015a      	lsls	r2, r3, #5
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	4413      	add	r3, r2
 8009506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800950a:	461a      	mov	r2, r3
 800950c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009510:	6013      	str	r3, [r2, #0]
 8009512:	e008      	b.n	8009526 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	4413      	add	r3, r2
 800951c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009520:	461a      	mov	r2, r3
 8009522:	2300      	movs	r3, #0
 8009524:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	015a      	lsls	r2, r3, #5
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	4413      	add	r3, r2
 800952e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009532:	461a      	mov	r2, r3
 8009534:	2300      	movs	r3, #0
 8009536:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	015a      	lsls	r2, r3, #5
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	4413      	add	r3, r2
 8009540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009544:	461a      	mov	r2, r3
 8009546:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800954a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	3301      	adds	r3, #1
 8009550:	613b      	str	r3, [r7, #16]
 8009552:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009556:	461a      	mov	r2, r3
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	4293      	cmp	r3, r2
 800955c:	d3b5      	bcc.n	80094ca <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800955e:	2300      	movs	r3, #0
 8009560:	613b      	str	r3, [r7, #16]
 8009562:	e043      	b.n	80095ec <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	015a      	lsls	r2, r3, #5
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	4413      	add	r3, r2
 800956c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009576:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800957a:	d118      	bne.n	80095ae <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d10a      	bne.n	8009598 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	015a      	lsls	r2, r3, #5
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	4413      	add	r3, r2
 800958a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800958e:	461a      	mov	r2, r3
 8009590:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009594:	6013      	str	r3, [r2, #0]
 8009596:	e013      	b.n	80095c0 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	015a      	lsls	r2, r3, #5
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4413      	add	r3, r2
 80095a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095a4:	461a      	mov	r2, r3
 80095a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80095aa:	6013      	str	r3, [r2, #0]
 80095ac:	e008      	b.n	80095c0 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095ba:	461a      	mov	r2, r3
 80095bc:	2300      	movs	r3, #0
 80095be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	015a      	lsls	r2, r3, #5
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	4413      	add	r3, r2
 80095c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095cc:	461a      	mov	r2, r3
 80095ce:	2300      	movs	r3, #0
 80095d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	015a      	lsls	r2, r3, #5
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	4413      	add	r3, r2
 80095da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095de:	461a      	mov	r2, r3
 80095e0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80095e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	3301      	adds	r3, #1
 80095ea:	613b      	str	r3, [r7, #16]
 80095ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80095f0:	461a      	mov	r2, r3
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d3b5      	bcc.n	8009564 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009606:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800960a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009618:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800961a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800961e:	2b00      	cmp	r3, #0
 8009620:	d105      	bne.n	800962e <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	699b      	ldr	r3, [r3, #24]
 8009626:	f043 0210 	orr.w	r2, r3, #16
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	699a      	ldr	r2, [r3, #24]
 8009632:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8009636:	f2c8 033c 	movt	r3, #32828	@ 0x803c
 800963a:	4313      	orrs	r3, r2
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009640:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009644:	2b00      	cmp	r3, #0
 8009646:	d005      	beq.n	8009654 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	f043 0208 	orr.w	r2, r3, #8
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009654:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009658:	2b01      	cmp	r3, #1
 800965a:	d107      	bne.n	800966c <USB_DevInit+0x2ae>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	699a      	ldr	r2, [r3, #24]
 8009660:	2304      	movs	r3, #4
 8009662:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8009666:	4313      	orrs	r3, r2
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800966c:	7dfb      	ldrb	r3, [r7, #23]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009678:	b004      	add	sp, #16
 800967a:	4770      	bx	lr

0800967c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800967c:	b480      	push	{r7}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009686:	2300      	movs	r3, #0
 8009688:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	3301      	adds	r3, #1
 800968e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009696:	d901      	bls.n	800969c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009698:	2303      	movs	r3, #3
 800969a:	e01b      	b.n	80096d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	daf2      	bge.n	800968a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80096a4:	2300      	movs	r3, #0
 80096a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	019b      	lsls	r3, r3, #6
 80096ac:	f043 0220 	orr.w	r2, r3, #32
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	3301      	adds	r3, #1
 80096b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80096c0:	d901      	bls.n	80096c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80096c2:	2303      	movs	r3, #3
 80096c4:	e006      	b.n	80096d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	f003 0320 	and.w	r3, r3, #32
 80096ce:	2b20      	cmp	r3, #32
 80096d0:	d0f0      	beq.n	80096b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3714      	adds	r7, #20
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096e8:	2300      	movs	r3, #0
 80096ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	3301      	adds	r3, #1
 80096f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80096f8:	d901      	bls.n	80096fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80096fa:	2303      	movs	r3, #3
 80096fc:	e018      	b.n	8009730 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	2b00      	cmp	r3, #0
 8009704:	daf2      	bge.n	80096ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009706:	2300      	movs	r3, #0
 8009708:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2210      	movs	r2, #16
 800970e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	3301      	adds	r3, #1
 8009714:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800971c:	d901      	bls.n	8009722 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800971e:	2303      	movs	r3, #3
 8009720:	e006      	b.n	8009730 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	f003 0310 	and.w	r3, r3, #16
 800972a:	2b10      	cmp	r3, #16
 800972c:	d0f0      	beq.n	8009710 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3714      	adds	r7, #20
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	460b      	mov	r3, r1
 8009746:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	78fb      	ldrb	r3, [r7, #3]
 8009756:	68f9      	ldr	r1, [r7, #12]
 8009758:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800975c:	4313      	orrs	r3, r2
 800975e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3714      	adds	r7, #20
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800976e:	b480      	push	{r7}
 8009770:	b085      	sub	sp, #20
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009788:	f023 0303 	bic.w	r3, r3, #3
 800978c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800979c:	f043 0302 	orr.w	r3, r3, #2
 80097a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	f003 0301 	and.w	r3, r3, #1
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097d4:	2300      	movs	r3, #0
 80097d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	3301      	adds	r3, #1
 80097dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80097e4:	d901      	bls.n	80097ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e01b      	b.n	8009822 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	daf2      	bge.n	80097d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80097f2:	2300      	movs	r3, #0
 80097f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	f043 0201 	orr.w	r2, r3, #1
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3301      	adds	r3, #1
 8009806:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800980e:	d901      	bls.n	8009814 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009810:	2303      	movs	r3, #3
 8009812:	e006      	b.n	8009822 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	691b      	ldr	r3, [r3, #16]
 8009818:	f003 0301 	and.w	r3, r3, #1
 800981c:	2b01      	cmp	r3, #1
 800981e:	d0f0      	beq.n	8009802 <USB_CoreReset+0x36>

  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3714      	adds	r7, #20
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <memset>:
 800982e:	4402      	add	r2, r0
 8009830:	4603      	mov	r3, r0
 8009832:	4293      	cmp	r3, r2
 8009834:	d100      	bne.n	8009838 <memset+0xa>
 8009836:	4770      	bx	lr
 8009838:	f803 1b01 	strb.w	r1, [r3], #1
 800983c:	e7f9      	b.n	8009832 <memset+0x4>
	...

08009840 <__libc_init_array>:
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	4d0d      	ldr	r5, [pc, #52]	@ (8009878 <__libc_init_array+0x38>)
 8009844:	4c0d      	ldr	r4, [pc, #52]	@ (800987c <__libc_init_array+0x3c>)
 8009846:	1b64      	subs	r4, r4, r5
 8009848:	10a4      	asrs	r4, r4, #2
 800984a:	2600      	movs	r6, #0
 800984c:	42a6      	cmp	r6, r4
 800984e:	d109      	bne.n	8009864 <__libc_init_array+0x24>
 8009850:	4d0b      	ldr	r5, [pc, #44]	@ (8009880 <__libc_init_array+0x40>)
 8009852:	4c0c      	ldr	r4, [pc, #48]	@ (8009884 <__libc_init_array+0x44>)
 8009854:	f000 f818 	bl	8009888 <_init>
 8009858:	1b64      	subs	r4, r4, r5
 800985a:	10a4      	asrs	r4, r4, #2
 800985c:	2600      	movs	r6, #0
 800985e:	42a6      	cmp	r6, r4
 8009860:	d105      	bne.n	800986e <__libc_init_array+0x2e>
 8009862:	bd70      	pop	{r4, r5, r6, pc}
 8009864:	f855 3b04 	ldr.w	r3, [r5], #4
 8009868:	4798      	blx	r3
 800986a:	3601      	adds	r6, #1
 800986c:	e7ee      	b.n	800984c <__libc_init_array+0xc>
 800986e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009872:	4798      	blx	r3
 8009874:	3601      	adds	r6, #1
 8009876:	e7f2      	b.n	800985e <__libc_init_array+0x1e>
 8009878:	080098e0 	.word	0x080098e0
 800987c:	080098e0 	.word	0x080098e0
 8009880:	080098e0 	.word	0x080098e0
 8009884:	080098e4 	.word	0x080098e4

08009888 <_init>:
 8009888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988a:	bf00      	nop
 800988c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800988e:	bc08      	pop	{r3}
 8009890:	469e      	mov	lr, r3
 8009892:	4770      	bx	lr

08009894 <_fini>:
 8009894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009896:	bf00      	nop
 8009898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800989a:	bc08      	pop	{r3}
 800989c:	469e      	mov	lr, r3
 800989e:	4770      	bx	lr
