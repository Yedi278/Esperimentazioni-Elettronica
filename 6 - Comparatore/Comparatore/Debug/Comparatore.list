
Comparatore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009908  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009ba0  08009ba0  0000aba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009be0  08009be0  0000abe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009be8  08009be8  0000abe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009bec  08009bec  0000abec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08009bf0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a68  24000010  08009c00  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000a78  08009c00  0000ba78  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a837  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003007  00000000  00000000  00025875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014a0  00000000  00000000  00028880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000100c  00000000  00000000  00029d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a04a  00000000  00000000  0002ad2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d552  00000000  00000000  00064d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017aaa3  00000000  00000000  000822c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fcd6b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000057b8  00000000  00000000  001fcdb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000084  00000000  00000000  00202568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009b88 	.word	0x08009b88

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08009b88 	.word	0x08009b88

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADC_custom_init>:
bool triggd = false;
bool pre_triggd = false;
uint16_t trig_indx = 0;


void ADC_custom_init(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

	ADC3->SQR1=0; // Resetto il registro per cancellare modifice dell'IDE
 80005cc:	4b33      	ldr	r3, [pc, #204]	@ (800069c <ADC_custom_init+0xd4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere (0 = 1 canale)
 80005d2:	4b32      	ldr	r3, [pc, #200]	@ (800069c <ADC_custom_init+0xd4>)
 80005d4:	4a31      	ldr	r2, [pc, #196]	@ (800069c <ADC_custom_init+0xd4>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_SQ1_Pos);	// Inidco i canali da accendere
 80005da:	4b30      	ldr	r3, [pc, #192]	@ (800069c <ADC_custom_init+0xd4>)
 80005dc:	4a2f      	ldr	r2, [pc, #188]	@ (800069c <ADC_custom_init+0xd4>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->PCSEL |= ADC_PCSEL_PCSEL_0;		// Selezioni i canali da leggere
 80005e2:	4b2e      	ldr	r3, [pc, #184]	@ (800069c <ADC_custom_init+0xd4>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a2d      	ldr	r2, [pc, #180]	@ (800069c <ADC_custom_init+0xd4>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	61d3      	str	r3, [r2, #28]

	/* Fase di calibrazione */
	ADC3->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 80005ee:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <ADC_custom_init+0xd4>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	4a2a      	ldr	r2, [pc, #168]	@ (800069c <ADC_custom_init+0xd4>)
 80005f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80005f8:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 80005fa:	4b28      	ldr	r3, [pc, #160]	@ (800069c <ADC_custom_init+0xd4>)
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	4a27      	ldr	r2, [pc, #156]	@ (800069c <ADC_custom_init+0xd4>)
 8000600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000604:	6093      	str	r3, [r2, #8]
	ADC3->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 8000606:	4b25      	ldr	r3, [pc, #148]	@ (800069c <ADC_custom_init+0xd4>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	4a24      	ldr	r2, [pc, #144]	@ (800069c <ADC_custom_init+0xd4>)
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 8000612:	4b22      	ldr	r3, [pc, #136]	@ (800069c <ADC_custom_init+0xd4>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	4a21      	ldr	r2, [pc, #132]	@ (800069c <ADC_custom_init+0xd4>)
 8000618:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800061c:	6093      	str	r3, [r2, #8]

	while((ADC3->CR & ADC_CR_ADCAL) != 0){};
 800061e:	bf00      	nop
 8000620:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <ADC_custom_init+0xd4>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	2b00      	cmp	r3, #0
 8000626:	dbfb      	blt.n	8000620 <ADC_custom_init+0x58>
	/* Fine fase di calibrazione */

	/* Accensione ADC */
	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000628:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <ADC_custom_init+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1b      	ldr	r2, [pc, #108]	@ (800069c <ADC_custom_init+0xd4>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]
	ADC3->CR |= ADC_CR_ADEN;		// Abilito l'ADC
 8000634:	4b19      	ldr	r3, [pc, #100]	@ (800069c <ADC_custom_init+0xd4>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	4a18      	ldr	r2, [pc, #96]	@ (800069c <ADC_custom_init+0xd4>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6093      	str	r3, [r2, #8]

	while((ADC3->ISR & ADC_ISR_ADRDY) != 0){}	// Aspetto che il flag cambi
 8000640:	bf00      	nop
 8000642:	4b16      	ldr	r3, [pc, #88]	@ (800069c <ADC_custom_init+0xd4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f9      	bne.n	8000642 <ADC_custom_init+0x7a>

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 800064e:	4b13      	ldr	r3, [pc, #76]	@ (800069c <ADC_custom_init+0xd4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a12      	ldr	r2, [pc, #72]	@ (800069c <ADC_custom_init+0xd4>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6013      	str	r3, [r2, #0]
	/* Fine istruzioni per l'accensione */

	/* Impostazioni TIMER per triggerare l'nizio della misura */
	TIM6->PSC = 12;	// 240/12 = 20Mhz
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <ADC_custom_init+0xd8>)
 800065c:	220c      	movs	r2, #12
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 12;	// 20Mhz / 10 = 2Mhz
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <ADC_custom_init+0xd8>)
 8000662:	220c      	movs	r2, #12
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CNT = 0;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <ADC_custom_init+0xd8>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->DIER &= ~TIM_DIER_UIE;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <ADC_custom_init+0xd8>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	4a0b      	ldr	r2, [pc, #44]	@ (80006a0 <ADC_custom_init+0xd8>)
 8000672:	f023 0301 	bic.w	r3, r3, #1
 8000676:	60d3      	str	r3, [r2, #12]
	TIM6->CR1 &= ~TIM_CR1_CEN;
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <ADC_custom_init+0xd8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a08      	ldr	r2, [pc, #32]	@ (80006a0 <ADC_custom_init+0xd8>)
 800067e:	f023 0301 	bic.w	r3, r3, #1
 8000682:	6013      	str	r3, [r2, #0]
	/* Fine sett. TImer */

	ADC3->IER |= ADC_IER_EOCIE;		// Abilito l'interrupt di fine conversione
 8000684:	4b05      	ldr	r3, [pc, #20]	@ (800069c <ADC_custom_init+0xd4>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	4a04      	ldr	r2, [pc, #16]	@ (800069c <ADC_custom_init+0xd4>)
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	6053      	str	r3, [r2, #4]
//	ADC3->CR  |= ADC_CR_ADSTART;	// Inizio le misurazioni
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	58026000 	.word	0x58026000
 80006a0:	40001000 	.word	0x40001000

080006a4 <ADC_custom_interrupt>:

void ADC_custom_interrupt(){
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

	if(triggd && (DMA1_Stream0->NDTR == trig_indx)){
 80006a8:	4b30      	ldr	r3, [pc, #192]	@ (800076c <ADC_custom_interrupt+0xc8>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d018      	beq.n	80006e2 <ADC_custom_interrupt+0x3e>
 80006b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000770 <ADC_custom_interrupt+0xcc>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	4a2f      	ldr	r2, [pc, #188]	@ (8000774 <ADC_custom_interrupt+0xd0>)
 80006b6:	8812      	ldrh	r2, [r2, #0]
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d112      	bne.n	80006e2 <ADC_custom_interrupt+0x3e>

		TIM6->CR1 &= ~TIM_CR1_CEN;
 80006bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000778 <ADC_custom_interrupt+0xd4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a2d      	ldr	r2, [pc, #180]	@ (8000778 <ADC_custom_interrupt+0xd4>)
 80006c2:	f023 0301 	bic.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

		triggd = 0;
 80006c8:	4b28      	ldr	r3, [pc, #160]	@ (800076c <ADC_custom_interrupt+0xc8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
		pre_triggd = 0;
 80006ce:	4b2b      	ldr	r3, [pc, #172]	@ (800077c <ADC_custom_interrupt+0xd8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]

		USART3->CR3 |= USART_CR3_DMAT;
 80006d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000780 <ADC_custom_interrupt+0xdc>)
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	4a29      	ldr	r2, [pc, #164]	@ (8000780 <ADC_custom_interrupt+0xdc>)
 80006da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006de:	6093      	str	r3, [r2, #8]
		return;
 80006e0:	e040      	b.n	8000764 <ADC_custom_interrupt+0xc0>
	}

	else if(!triggd && !(COMP12->SR & COMP_SR_C2VAL) ){
 80006e2:	4b22      	ldr	r3, [pc, #136]	@ (800076c <ADC_custom_interrupt+0xc8>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	f083 0301 	eor.w	r3, r3, #1
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d009      	beq.n	8000704 <ADC_custom_interrupt+0x60>
 80006f0:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <ADC_custom_interrupt+0xe0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f003 0302 	and.w	r3, r3, #2
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d103      	bne.n	8000704 <ADC_custom_interrupt+0x60>
		pre_triggd = 1;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <ADC_custom_interrupt+0xd8>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
		return;
 8000702:	e02f      	b.n	8000764 <ADC_custom_interrupt+0xc0>
	}

	else if(pre_triggd && !triggd && (COMP12->SR & COMP_SR_C2VAL)){
 8000704:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <ADC_custom_interrupt+0xd8>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d025      	beq.n	8000758 <ADC_custom_interrupt+0xb4>
 800070c:	4b17      	ldr	r3, [pc, #92]	@ (800076c <ADC_custom_interrupt+0xc8>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f083 0301 	eor.w	r3, r3, #1
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d01e      	beq.n	8000758 <ADC_custom_interrupt+0xb4>
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <ADC_custom_interrupt+0xe0>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	2b00      	cmp	r3, #0
 8000724:	d018      	beq.n	8000758 <ADC_custom_interrupt+0xb4>
		triggd = 1;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <ADC_custom_interrupt+0xc8>)
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
		pre_triggd = 0;
 800072c:	4b13      	ldr	r3, [pc, #76]	@ (800077c <ADC_custom_interrupt+0xd8>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
//		trig_indx = DMA1_Stream0->NDTR;
		trig_indx = (DMA1_Stream0->NDTR + 10UL)%1000UL + 1UL;	// conservo 100 dati prima del trigger
 8000732:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <ADC_custom_interrupt+0xcc>)
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	f103 020a 	add.w	r2, r3, #10
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <ADC_custom_interrupt+0xe4>)
 800073c:	fba3 1302 	umull	r1, r3, r3, r2
 8000740:	099b      	lsrs	r3, r3, #6
 8000742:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000746:	fb01 f303 	mul.w	r3, r1, r3
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	b29b      	uxth	r3, r3
 800074e:	3301      	adds	r3, #1
 8000750:	b29a      	uxth	r2, r3
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <ADC_custom_interrupt+0xd0>)
 8000754:	801a      	strh	r2, [r3, #0]
		return;
 8000756:	e005      	b.n	8000764 <ADC_custom_interrupt+0xc0>
	}

	ADC3->ISR |= ADC_ISR_EOC;
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <ADC_custom_interrupt+0xe8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a0b      	ldr	r2, [pc, #44]	@ (800078c <ADC_custom_interrupt+0xe8>)
 800075e:	f043 0304 	orr.w	r3, r3, #4
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	2400002c 	.word	0x2400002c
 8000770:	40020010 	.word	0x40020010
 8000774:	2400002e 	.word	0x2400002e
 8000778:	40001000 	.word	0x40001000
 800077c:	2400002d 	.word	0x2400002d
 8000780:	40004800 	.word	0x40004800
 8000784:	58003800 	.word	0x58003800
 8000788:	10624dd3 	.word	0x10624dd3
 800078c:	58026000 	.word	0x58026000

08000790 <COMP_custom_init>:
 *      Author: yehan
 */

#include "Custom_COMP.h"

void COMP_custom_init(){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0

	DAC1->CR |= DAC_CR_EN1;			// attivo DAC
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <COMP_custom_init+0x38>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a0b      	ldr	r2, [pc, #44]	@ (80007c8 <COMP_custom_init+0x38>)
 800079a:	f043 0301 	orr.w	r3, r3, #1
 800079e:	6013      	str	r3, [r2, #0]

	DAC1->DHR12R1 = 100;			// imposto soglia del comparatore IN 12 BIT NON 16
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <COMP_custom_init+0x38>)
 80007a2:	2264      	movs	r2, #100	@ 0x64
 80007a4:	609a      	str	r2, [r3, #8]

	DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <COMP_custom_init+0x38>)
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	4a07      	ldr	r2, [pc, #28]	@ (80007c8 <COMP_custom_init+0x38>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6053      	str	r3, [r2, #4]

	COMP2->CFGR |= COMP_CFGRx_EN;	// attivo il comparatore
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <COMP_custom_init+0x3c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <COMP_custom_init+0x3c>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6013      	str	r3, [r2, #0]
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	40007400 	.word	0x40007400
 80007cc:	58003810 	.word	0x58003810

080007d0 <DMA_custom_init>:

#define DMA_DATA_BUFF_SIZE 1000

uint16_t DMA_data_buffer[DMA_DATA_BUFF_SIZE];

void DMA_custom_init(){
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0

	DMA1_Stream0->M0AR = (uint32_t) (&DMA_data_buffer);	// inidico l'indirizzo dello storarge di dati
 80007d6:	4b20      	ldr	r3, [pc, #128]	@ (8000858 <DMA_custom_init+0x88>)
 80007d8:	4a20      	ldr	r2, [pc, #128]	@ (800085c <DMA_custom_init+0x8c>)
 80007da:	60da      	str	r2, [r3, #12]
	DMA1_Stream1->M0AR = (uint32_t) (&DMA_data_buffer);
 80007dc:	4b20      	ldr	r3, [pc, #128]	@ (8000860 <DMA_custom_init+0x90>)
 80007de:	4a1f      	ldr	r2, [pc, #124]	@ (800085c <DMA_custom_init+0x8c>)
 80007e0:	60da      	str	r2, [r3, #12]

	DMA1_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
 80007e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000858 <DMA_custom_init+0x88>)
 80007e4:	4a1f      	ldr	r2, [pc, #124]	@ (8000864 <DMA_custom_init+0x94>)
 80007e6:	609a      	str	r2, [r3, #8]
	DMA1_Stream1->PAR = (uint32_t) (&USART3->TDR);
 80007e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000860 <DMA_custom_init+0x90>)
 80007ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000868 <DMA_custom_init+0x98>)
 80007ec:	609a      	str	r2, [r3, #8]

	uint32_t n_misure = DMA_DATA_BUFF_SIZE;
 80007ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007f2:	607b      	str	r3, [r7, #4]

	DMA1_Stream0->NDTR = n_misure;			// numero elementi da prendere da ADC3
 80007f4:	4a18      	ldr	r2, [pc, #96]	@ (8000858 <DMA_custom_init+0x88>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6053      	str	r3, [r2, #4]
	DMA1_Stream1->NDTR = n_misure*2;			// numero elementi da mandare a USART3
 80007fa:	4a19      	ldr	r2, [pc, #100]	@ (8000860 <DMA_custom_init+0x90>)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	6053      	str	r3, [r2, #4]

	DMA1_Stream0->CR &= ~DMA_SxCR_TCIE;		// disablilito interrupt di fine ricezione
 8000802:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <DMA_custom_init+0x88>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a14      	ldr	r2, [pc, #80]	@ (8000858 <DMA_custom_init+0x88>)
 8000808:	f023 0310 	bic.w	r3, r3, #16
 800080c:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine trasmissione
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <DMA_custom_init+0x90>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a13      	ldr	r2, [pc, #76]	@ (8000860 <DMA_custom_init+0x90>)
 8000814:	f043 0310 	orr.w	r3, r3, #16
 8000818:	6013      	str	r3, [r2, #0]

	ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);	// DMA in cont mode
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <DMA_custom_init+0x9c>)
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	4a13      	ldr	r2, [pc, #76]	@ (800086c <DMA_custom_init+0x9c>)
 8000820:	f043 0303 	orr.w	r3, r3, #3
 8000824:	60d3      	str	r3, [r2, #12]

	DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <DMA_custom_init+0x88>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a0b      	ldr	r2, [pc, #44]	@ (8000858 <DMA_custom_init+0x88>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <DMA_custom_init+0x90>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a0a      	ldr	r2, [pc, #40]	@ (8000860 <DMA_custom_init+0x90>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6013      	str	r3, [r2, #0]

	ADC3->CR  |= ADC_CR_ADSTART;
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <DMA_custom_init+0x9c>)
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	4a0a      	ldr	r2, [pc, #40]	@ (800086c <DMA_custom_init+0x9c>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6093      	str	r3, [r2, #8]
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40020010 	.word	0x40020010
 800085c:	24000030 	.word	0x24000030
 8000860:	40020028 	.word	0x40020028
 8000864:	58026040 	.word	0x58026040
 8000868:	40004828 	.word	0x40004828
 800086c:	58026000 	.word	0x58026000

08000870 <DMA_custom_interrupt_tx>:


void DMA_custom_interrupt_tx(){
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 8000874:	4b1e      	ldr	r3, [pc, #120]	@ (80008f0 <DMA_custom_interrupt_tx+0x80>)
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	4a1d      	ldr	r2, [pc, #116]	@ (80008f0 <DMA_custom_interrupt_tx+0x80>)
 800087a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800087e:	6093      	str	r3, [r2, #8]

	DMA1->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 8000880:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <DMA_custom_interrupt_tx+0x84>)
 8000882:	f04f 32ff 	mov.w	r2, #4294967295
 8000886:	609a      	str	r2, [r3, #8]
	DMA1->HIFCR = 0xffffffff;
 8000888:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <DMA_custom_interrupt_tx+0x84>)
 800088a:	f04f 32ff 	mov.w	r2, #4294967295
 800088e:	60da      	str	r2, [r3, #12]

	DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000890:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <DMA_custom_interrupt_tx+0x88>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a18      	ldr	r2, [pc, #96]	@ (80008f8 <DMA_custom_interrupt_tx+0x88>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 800089c:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <DMA_custom_interrupt_tx+0x8c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a16      	ldr	r2, [pc, #88]	@ (80008fc <DMA_custom_interrupt_tx+0x8c>)
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	6013      	str	r3, [r2, #0]

	// invio come ultimo elemento l'indice di trigger
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 80008a8:	bf00      	nop
 80008aa:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <DMA_custom_interrupt_tx+0x80>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d0f9      	beq.n	80008aa <DMA_custom_interrupt_tx+0x3a>
	USART3->TDR = (unsigned char)(trig_indx & 0xFF );
 80008b6:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <DMA_custom_interrupt_tx+0x90>)
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <DMA_custom_interrupt_tx+0x80>)
 80008be:	629a      	str	r2, [r3, #40]	@ 0x28
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 80008c0:	bf00      	nop
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <DMA_custom_interrupt_tx+0x80>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d0f9      	beq.n	80008c2 <DMA_custom_interrupt_tx+0x52>
	USART3->TDR = *((unsigned char*)&trig_indx + 1);
 80008ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000904 <DMA_custom_interrupt_tx+0x94>)
 80008d0:	781a      	ldrb	r2, [r3, #0]
 80008d2:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <DMA_custom_interrupt_tx+0x80>)
 80008d4:	629a      	str	r2, [r3, #40]	@ 0x28
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 80008d6:	bf00      	nop
 80008d8:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <DMA_custom_interrupt_tx+0x80>)
 80008da:	69db      	ldr	r3, [r3, #28]
 80008dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d0f9      	beq.n	80008d8 <DMA_custom_interrupt_tx+0x68>
}
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	40004800 	.word	0x40004800
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40020010 	.word	0x40020010
 80008fc:	40020028 	.word	0x40020028
 8000900:	2400002e 	.word	0x2400002e
 8000904:	2400002f 	.word	0x2400002f

08000908 <USART_custom_init>:
 *      Author: yehan
 */

#include "Custom_USART.h"

void USART_custom_init(){
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

	USART3->CR1 |= USART_CR1_TE;
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <USART_custom_init+0x4c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a10      	ldr	r2, [pc, #64]	@ (8000954 <USART_custom_init+0x4c>)
 8000912:	f043 0308 	orr.w	r3, r3, #8
 8000916:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_RE;
 8000918:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <USART_custom_init+0x4c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0d      	ldr	r2, [pc, #52]	@ (8000954 <USART_custom_init+0x4c>)
 800091e:	f043 0304 	orr.w	r3, r3, #4
 8000922:	6013      	str	r3, [r2, #0]

	USART3->CR1 &= ~USART_CR1_TXEIE;
 8000924:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <USART_custom_init+0x4c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0a      	ldr	r2, [pc, #40]	@ (8000954 <USART_custom_init+0x4c>)
 800092a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800092e:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_RXNEIE;
 8000930:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <USART_custom_init+0x4c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a07      	ldr	r2, [pc, #28]	@ (8000954 <USART_custom_init+0x4c>)
 8000936:	f043 0320 	orr.w	r3, r3, #32
 800093a:	6013      	str	r3, [r2, #0]

	USART3->CR1 |= USART_CR1_UE;
 800093c:	4b05      	ldr	r3, [pc, #20]	@ (8000954 <USART_custom_init+0x4c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a04      	ldr	r2, [pc, #16]	@ (8000954 <USART_custom_init+0x4c>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40004800 	.word	0x40004800

08000958 <USART_custom_interrupt>:

void USART_custom_interrupt(){
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0

	char data = USART3->RDR;
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <USART_custom_interrupt+0x5c>)
 8000960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000962:	71fb      	strb	r3, [r7, #7]

	if(data == '?'){
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	2b3f      	cmp	r3, #63	@ 0x3f
 8000968:	d10b      	bne.n	8000982 <USART_custom_interrupt+0x2a>

		USART3->CR3 &= ~USART_CR3_DMAT;	// spengo l'usart
 800096a:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <USART_custom_interrupt+0x5c>)
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	4a11      	ldr	r2, [pc, #68]	@ (80009b4 <USART_custom_interrupt+0x5c>)
 8000970:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000974:	6093      	str	r3, [r2, #8]
		TIM6->CR1 |= TIM_CR1_CEN;		// accendo l'adc
 8000976:	4b10      	ldr	r3, [pc, #64]	@ (80009b8 <USART_custom_interrupt+0x60>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a0f      	ldr	r2, [pc, #60]	@ (80009b8 <USART_custom_interrupt+0x60>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6013      	str	r3, [r2, #0]
	}

	USART3->ICR |= USART_ICR_ORECF;  //Cancella l'overrun. Capita quando si entra in debug
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <USART_custom_interrupt+0x5c>)
 8000984:	6a1b      	ldr	r3, [r3, #32]
 8000986:	4a0b      	ldr	r2, [pc, #44]	@ (80009b4 <USART_custom_interrupt+0x5c>)
 8000988:	f043 0308 	orr.w	r3, r3, #8
 800098c:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF;   //Azzeramento flag interrupt trasmissione
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <USART_custom_interrupt+0x5c>)
 8000990:	6a1b      	ldr	r3, [r3, #32]
 8000992:	4a08      	ldr	r2, [pc, #32]	@ (80009b4 <USART_custom_interrupt+0x5c>)
 8000994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000998:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <USART_custom_interrupt+0x5c>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	4a05      	ldr	r2, [pc, #20]	@ (80009b4 <USART_custom_interrupt+0x5c>)
 80009a0:	f043 0308 	orr.w	r3, r3, #8
 80009a4:	6193      	str	r3, [r2, #24]
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40004800 	.word	0x40004800
 80009b8:	40001000 	.word	0x40001000

080009bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c0:	f000 fe70 	bl	80016a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c4:	f000 f818 	bl	80009f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c8:	f000 fa40 	bl	8000e4c <MX_GPIO_Init>
  MX_DMA_Init();
 80009cc:	f000 fa16 	bl	8000dfc <MX_DMA_Init>
  MX_ADC3_Init();
 80009d0:	f000 f8c0 	bl	8000b54 <MX_ADC3_Init>
  MX_COMP2_Init();
 80009d4:	f000 f92e 	bl	8000c34 <MX_COMP2_Init>
  MX_DAC1_Init();
 80009d8:	f000 f95a 	bl	8000c90 <MX_DAC1_Init>
  MX_TIM6_Init();
 80009dc:	f000 f98a 	bl	8000cf4 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 80009e0:	f000 f9be 	bl	8000d60 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  COMP_custom_init();
 80009e4:	f7ff fed4 	bl	8000790 <COMP_custom_init>
  ADC_custom_init();
 80009e8:	f7ff fdee 	bl	80005c8 <ADC_custom_init>
  USART_custom_init();
 80009ec:	f7ff ff8c 	bl	8000908 <USART_custom_init>
  DMA_custom_init();
 80009f0:	f7ff feee 	bl	80007d0 <DMA_custom_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <main+0x38>

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b09e      	sub	sp, #120	@ 0x78
 80009fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a02:	224c      	movs	r2, #76	@ 0x4c
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f009 f892 	bl	8009b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	2220      	movs	r2, #32
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f009 f88b 	bl	8009b30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f004 f902 	bl	8004c24 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	4b48      	ldr	r3, [pc, #288]	@ (8000b48 <SystemClock_Config+0x150>)
 8000a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a28:	4a47      	ldr	r2, [pc, #284]	@ (8000b48 <SystemClock_Config+0x150>)
 8000a2a:	f023 0301 	bic.w	r3, r3, #1
 8000a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a30:	4b45      	ldr	r3, [pc, #276]	@ (8000b48 <SystemClock_Config+0x150>)
 8000a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	4b44      	ldr	r3, [pc, #272]	@ (8000b4c <SystemClock_Config+0x154>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	4a43      	ldr	r2, [pc, #268]	@ (8000b4c <SystemClock_Config+0x154>)
 8000a40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a44:	6193      	str	r3, [r2, #24]
 8000a46:	4b41      	ldr	r3, [pc, #260]	@ (8000b4c <SystemClock_Config+0x154>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a52:	bf00      	nop
 8000a54:	4b3d      	ldr	r3, [pc, #244]	@ (8000b4c <SystemClock_Config+0x154>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a60:	d1f8      	bne.n	8000a54 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4b3b      	ldr	r3, [pc, #236]	@ (8000b50 <SystemClock_Config+0x158>)
 8000a64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a68:	4a39      	ldr	r2, [pc, #228]	@ (8000b50 <SystemClock_Config+0x158>)
 8000a6a:	f043 0302 	orr.w	r3, r3, #2
 8000a6e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a72:	4b37      	ldr	r3, [pc, #220]	@ (8000b50 <SystemClock_Config+0x158>)
 8000a74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a78:	f003 0302 	and.w	r3, r3, #2
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a80:	2300      	movs	r3, #0
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	4b31      	ldr	r3, [pc, #196]	@ (8000b4c <SystemClock_Config+0x154>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a30      	ldr	r2, [pc, #192]	@ (8000b4c <SystemClock_Config+0x154>)
 8000a8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b2e      	ldr	r3, [pc, #184]	@ (8000b4c <SystemClock_Config+0x154>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b48 <SystemClock_Config+0x150>)
 8000a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8000b48 <SystemClock_Config+0x150>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000aa6:	4b28      	ldr	r3, [pc, #160]	@ (8000b48 <SystemClock_Config+0x150>)
 8000aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ab2:	bf00      	nop
 8000ab4:	4b25      	ldr	r3, [pc, #148]	@ (8000b4c <SystemClock_Config+0x154>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000abc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ac0:	d1f8      	bne.n	8000ab4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ac6:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000aca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000acc:	2302      	movs	r3, #2
 8000ace:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000ad8:	2378      	movs	r3, #120	@ 0x78
 8000ada:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ae8:	230c      	movs	r3, #12
 8000aea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000af8:	4618      	mov	r0, r3
 8000afa:	f004 f8cd 	bl	8004c98 <HAL_RCC_OscConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000b04:	f000 fad2 	bl	80010ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b08:	233f      	movs	r3, #63	@ 0x3f
 8000b0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b14:	2308      	movs	r3, #8
 8000b16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b18:	2340      	movs	r3, #64	@ 0x40
 8000b1a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b1c:	2340      	movs	r3, #64	@ 0x40
 8000b1e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b26:	2340      	movs	r3, #64	@ 0x40
 8000b28:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	2104      	movs	r1, #4
 8000b30:	4618      	mov	r0, r3
 8000b32:	f004 fd0b 	bl	800554c <HAL_RCC_ClockConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000b3c:	f000 fab6 	bl	80010ac <Error_Handler>
  }
}
 8000b40:	bf00      	nop
 8000b42:	3778      	adds	r7, #120	@ 0x78
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	58000400 	.word	0x58000400
 8000b4c:	58024800 	.word	0x58024800
 8000b50:	58024400 	.word	0x58024400

08000b54 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
 8000b68:	615a      	str	r2, [r3, #20]
 8000b6a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c2c <MX_ADC3_Init+0xd8>)
 8000b6e:	4a30      	ldr	r2, [pc, #192]	@ (8000c30 <MX_ADC3_Init+0xdc>)
 8000b70:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b72:	4b2e      	ldr	r3, [pc, #184]	@ (8000c2c <MX_ADC3_Init+0xd8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b78:	4b2c      	ldr	r3, [pc, #176]	@ (8000c2c <MX_ADC3_Init+0xd8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c2c <MX_ADC3_Init+0xd8>)
 8000b80:	2204      	movs	r2, #4
 8000b82:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b84:	4b29      	ldr	r3, [pc, #164]	@ (8000c2c <MX_ADC3_Init+0xd8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b8a:	4b28      	ldr	r3, [pc, #160]	@ (8000c2c <MX_ADC3_Init+0xd8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000b90:	4b26      	ldr	r3, [pc, #152]	@ (8000c2c <MX_ADC3_Init+0xd8>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b96:	4b25      	ldr	r3, [pc, #148]	@ (8000c2c <MX_ADC3_Init+0xd8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000b9c:	4b23      	ldr	r3, [pc, #140]	@ (8000c2c <MX_ADC3_Init+0xd8>)
 8000b9e:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000ba2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ba4:	4b21      	ldr	r3, [pc, #132]	@ (8000c2c <MX_ADC3_Init+0xd8>)
 8000ba6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000baa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bac:	4b1f      	ldr	r3, [pc, #124]	@ (8000c2c <MX_ADC3_Init+0xd8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <MX_ADC3_Init+0xd8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <MX_ADC3_Init+0xd8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <MX_ADC3_Init+0xd8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	@ (8000c2c <MX_ADC3_Init+0xd8>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bcc:	4817      	ldr	r0, [pc, #92]	@ (8000c2c <MX_ADC3_Init+0xd8>)
 8000bce:	f000 fff5 	bl	8001bbc <HAL_ADC_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000bd8:	f000 fa68 	bl	80010ac <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000bdc:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <MX_ADC3_Init+0xd8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000be2:	4812      	ldr	r0, [pc, #72]	@ (8000c2c <MX_ADC3_Init+0xd8>)
 8000be4:	f000 ffea 	bl	8001bbc <HAL_ADC_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000bee:	f000 fa5d 	bl	80010ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bf6:	2306      	movs	r3, #6
 8000bf8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bfe:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c02:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c04:	2304      	movs	r3, #4
 8000c06:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <MX_ADC3_Init+0xd8>)
 8000c16:	f001 f973 	bl	8001f00 <HAL_ADC_ConfigChannel>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000c20:	f000 fa44 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	3720      	adds	r7, #32
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	24000800 	.word	0x24000800
 8000c30:	58026000 	.word	0x58026000

08000c34 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000c38:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <MX_COMP2_Init+0x54>)
 8000c3a:	4a14      	ldr	r2, [pc, #80]	@ (8000c8c <MX_COMP2_Init+0x58>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000c3e:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <MX_COMP2_Init+0x54>)
 8000c40:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c44:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8000c46:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <MX_COMP2_Init+0x54>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <MX_COMP2_Init+0x54>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_MEDIUM;
 8000c52:	4b0d      	ldr	r3, [pc, #52]	@ (8000c88 <MX_COMP2_Init+0x54>)
 8000c54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c58:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <MX_COMP2_Init+0x54>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000c60:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <MX_COMP2_Init+0x54>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <MX_COMP2_Init+0x54>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <MX_COMP2_Init+0x54>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <MX_COMP2_Init+0x54>)
 8000c74:	f001 fdac 	bl	80027d0 <HAL_COMP_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_COMP2_Init+0x4e>
  {
    Error_Handler();
 8000c7e:	f000 fa15 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	240008dc 	.word	0x240008dc
 8000c8c:	58003810 	.word	0x58003810

08000c90 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	@ 0x28
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2224      	movs	r2, #36	@ 0x24
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f008 ff47 	bl	8009b30 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000ca2:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <MX_DAC1_Init+0x5c>)
 8000ca4:	4a12      	ldr	r2, [pc, #72]	@ (8000cf0 <MX_DAC1_Init+0x60>)
 8000ca6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ca8:	4810      	ldr	r0, [pc, #64]	@ (8000cec <MX_DAC1_Init+0x5c>)
 8000caa:	f001 ffca 	bl	8002c42 <HAL_DAC_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000cb4:	f000 f9fa 	bl	80010ac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4806      	ldr	r0, [pc, #24]	@ (8000cec <MX_DAC1_Init+0x5c>)
 8000cd4:	f001 ffd8 	bl	8002c88 <HAL_DAC_ConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000cde:	f000 f9e5 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	@ 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	24000908 	.word	0x24000908
 8000cf0:	40007400 	.word	0x40007400

08000cf4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d04:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <MX_TIM6_Init+0x64>)
 8000d06:	4a15      	ldr	r2, [pc, #84]	@ (8000d5c <MX_TIM6_Init+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <MX_TIM6_Init+0x64>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <MX_TIM6_Init+0x64>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000d16:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <MX_TIM6_Init+0x64>)
 8000d18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d1c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <MX_TIM6_Init+0x64>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d24:	480c      	ldr	r0, [pc, #48]	@ (8000d58 <MX_TIM6_Init+0x64>)
 8000d26:	f007 fc9b 	bl	8008660 <HAL_TIM_Base_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d30:	f000 f9bc 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d34:	2320      	movs	r3, #32
 8000d36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <MX_TIM6_Init+0x64>)
 8000d42:	f007 fd8b 	bl	800885c <HAL_TIMEx_MasterConfigSynchronization>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d4c:	f000 f9ae 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2400091c 	.word	0x2400091c
 8000d5c:	40001000 	.word	0x40001000

08000d60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d64:	4b22      	ldr	r3, [pc, #136]	@ (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d66:	4a23      	ldr	r2, [pc, #140]	@ (8000df4 <MX_USART3_UART_Init+0x94>)
 8000d68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8000d6a:	4b21      	ldr	r3, [pc, #132]	@ (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d6c:	4a22      	ldr	r2, [pc, #136]	@ (8000df8 <MX_USART3_UART_Init+0x98>)
 8000d6e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d70:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d76:	4b1e      	ldr	r3, [pc, #120]	@ (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d82:	4b1b      	ldr	r3, [pc, #108]	@ (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d84:	220c      	movs	r2, #12
 8000d86:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d88:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8e:	4b18      	ldr	r3, [pc, #96]	@ (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d94:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d9a:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <MX_USART3_UART_Init+0x90>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da0:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <MX_USART3_UART_Init+0x90>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000da6:	4812      	ldr	r0, [pc, #72]	@ (8000df0 <MX_USART3_UART_Init+0x90>)
 8000da8:	f007 fde6 	bl	8008978 <HAL_UART_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000db2:	f000 f97b 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db6:	2100      	movs	r1, #0
 8000db8:	480d      	ldr	r0, [pc, #52]	@ (8000df0 <MX_USART3_UART_Init+0x90>)
 8000dba:	f008 fdee 	bl	800999a <HAL_UARTEx_SetTxFifoThreshold>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000dc4:	f000 f972 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4809      	ldr	r0, [pc, #36]	@ (8000df0 <MX_USART3_UART_Init+0x90>)
 8000dcc:	f008 fe23 	bl	8009a16 <HAL_UARTEx_SetRxFifoThreshold>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000dd6:	f000 f969 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dda:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <MX_USART3_UART_Init+0x90>)
 8000ddc:	f008 fda4 	bl	8009928 <HAL_UARTEx_DisableFifoMode>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000de6:	f000 f961 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	24000968 	.word	0x24000968
 8000df4:	40004800 	.word	0x40004800
 8000df8:	000f4240 	.word	0x000f4240

08000dfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <MX_DMA_Init+0x4c>)
 8000e04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e08:	4a0f      	ldr	r2, [pc, #60]	@ (8000e48 <MX_DMA_Init+0x4c>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e12:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <MX_DMA_Init+0x4c>)
 8000e14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	200b      	movs	r0, #11
 8000e26:	f001 fed8 	bl	8002bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e2a:	200b      	movs	r0, #11
 8000e2c:	f001 feef 	bl	8002c0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2100      	movs	r1, #0
 8000e34:	200c      	movs	r0, #12
 8000e36:	f001 fed0 	bl	8002bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e3a:	200c      	movs	r0, #12
 8000e3c:	f001 fee7 	bl	8002c0e <HAL_NVIC_EnableIRQ>

}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	58024400 	.word	0x58024400

08000e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	@ 0x30
 8000e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e62:	4b8b      	ldr	r3, [pc, #556]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e68:	4a89      	ldr	r2, [pc, #548]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000e6a:	f043 0304 	orr.w	r3, r3, #4
 8000e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e72:	4b87      	ldr	r3, [pc, #540]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e80:	4b83      	ldr	r3, [pc, #524]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e86:	4a82      	ldr	r2, [pc, #520]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e90:	4b7f      	ldr	r3, [pc, #508]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	4b7c      	ldr	r3, [pc, #496]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea4:	4a7a      	ldr	r2, [pc, #488]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eae:	4b78      	ldr	r3, [pc, #480]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebc:	4b74      	ldr	r3, [pc, #464]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec2:	4a73      	ldr	r2, [pc, #460]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ecc:	4b70      	ldr	r3, [pc, #448]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eda:	4b6d      	ldr	r3, [pc, #436]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee0:	4a6b      	ldr	r2, [pc, #428]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eea:	4b69      	ldr	r3, [pc, #420]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef0:	f003 0310 	and.w	r3, r3, #16
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef8:	4b65      	ldr	r3, [pc, #404]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efe:	4a64      	ldr	r2, [pc, #400]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000f00:	f043 0308 	orr.w	r3, r3, #8
 8000f04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f08:	4b61      	ldr	r3, [pc, #388]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0e:	f003 0308 	and.w	r3, r3, #8
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f16:	4b5e      	ldr	r3, [pc, #376]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1c:	4a5c      	ldr	r2, [pc, #368]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000f1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f26:	4b5a      	ldr	r3, [pc, #360]	@ (8001090 <MX_GPIO_Init+0x244>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000f3a:	4856      	ldr	r0, [pc, #344]	@ (8001094 <MX_GPIO_Init+0x248>)
 8000f3c:	f003 fe58 	bl	8004bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f46:	4854      	ldr	r0, [pc, #336]	@ (8001098 <MX_GPIO_Init+0x24c>)
 8000f48:	f003 fe52 	bl	8004bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2102      	movs	r1, #2
 8000f50:	4852      	ldr	r0, [pc, #328]	@ (800109c <MX_GPIO_Init+0x250>)
 8000f52:	f003 fe4d 	bl	8004bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	484d      	ldr	r0, [pc, #308]	@ (80010a0 <MX_GPIO_Init+0x254>)
 8000f6c:	f003 fc90 	bl	8004890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f70:	2332      	movs	r3, #50	@ 0x32
 8000f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f80:	230b      	movs	r3, #11
 8000f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4845      	ldr	r0, [pc, #276]	@ (80010a0 <MX_GPIO_Init+0x254>)
 8000f8c:	f003 fc80 	bl	8004890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f90:	2386      	movs	r3, #134	@ 0x86
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fa0:	230b      	movs	r3, #11
 8000fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	483e      	ldr	r0, [pc, #248]	@ (80010a4 <MX_GPIO_Init+0x258>)
 8000fac:	f003 fc70 	bl	8004890 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000fb0:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4832      	ldr	r0, [pc, #200]	@ (8001094 <MX_GPIO_Init+0x248>)
 8000fca:	f003 fc61 	bl	8004890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe0:	230b      	movs	r3, #11
 8000fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	482a      	ldr	r0, [pc, #168]	@ (8001094 <MX_GPIO_Init+0x248>)
 8000fec:	f003 fc50 	bl	8004890 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ff0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	4823      	ldr	r0, [pc, #140]	@ (8001098 <MX_GPIO_Init+0x24c>)
 800100a:	f003 fc41 	bl	8004890 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800100e:	2380      	movs	r3, #128	@ 0x80
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001012:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	4821      	ldr	r0, [pc, #132]	@ (80010a8 <MX_GPIO_Init+0x25c>)
 8001024:	f003 fc34 	bl	8004890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001028:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800102c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800103a:	230a      	movs	r3, #10
 800103c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	4619      	mov	r1, r3
 8001044:	4817      	ldr	r0, [pc, #92]	@ (80010a4 <MX_GPIO_Init+0x258>)
 8001046:	f003 fc23 	bl	8004890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800104a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800105c:	230b      	movs	r3, #11
 800105e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	4619      	mov	r1, r3
 8001066:	4810      	ldr	r0, [pc, #64]	@ (80010a8 <MX_GPIO_Init+0x25c>)
 8001068:	f003 fc12 	bl	8004890 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800106c:	2302      	movs	r3, #2
 800106e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	4619      	mov	r1, r3
 8001082:	4806      	ldr	r0, [pc, #24]	@ (800109c <MX_GPIO_Init+0x250>)
 8001084:	f003 fc04 	bl	8004890 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001088:	bf00      	nop
 800108a:	3730      	adds	r7, #48	@ 0x30
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	58024400 	.word	0x58024400
 8001094:	58020400 	.word	0x58020400
 8001098:	58020c00 	.word	0x58020c00
 800109c:	58021000 	.word	0x58021000
 80010a0:	58020800 	.word	0x58020800
 80010a4:	58020000 	.word	0x58020000
 80010a8:	58021800 	.word	0x58021800

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <Error_Handler+0x8>

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <HAL_MspInit+0x5c>)
 80010c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010c4:	4a13      	ldr	r2, [pc, #76]	@ (8001114 <HAL_MspInit+0x5c>)
 80010c6:	f043 0302 	orr.w	r3, r3, #2
 80010ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010ce:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <HAL_MspInit+0x5c>)
 80010d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80010dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001114 <HAL_MspInit+0x5c>)
 80010de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001114 <HAL_MspInit+0x5c>)
 80010e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010ec:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <HAL_MspInit+0x5c>)
 80010ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 fb70 	bl	80017e0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001100:	f000 fb96 	bl	8001830 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001104:	2000      	movs	r0, #0
 8001106:	f000 fb7f 	bl	8001808 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	58024400 	.word	0x58024400

08001118 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b0b4      	sub	sp, #208	@ 0xd0
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	22c0      	movs	r2, #192	@ 0xc0
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f008 fd01 	bl	8009b30 <memset>
  if(hadc->Instance==ADC3)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a43      	ldr	r2, [pc, #268]	@ (8001240 <HAL_ADC_MspInit+0x128>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d17e      	bne.n	8001236 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001138:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001144:	2302      	movs	r3, #2
 8001146:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 50;
 8001148:	2332      	movs	r3, #50	@ 0x32
 800114a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800114c:	2302      	movs	r3, #2
 800114e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001150:	2302      	movs	r3, #2
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001154:	2302      	movs	r3, #2
 8001156:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001158:	2380      	movs	r3, #128	@ 0x80
 800115a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800115c:	2300      	movs	r3, #0
 800115e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	4618      	mov	r0, r3
 8001170:	f004 fd78 	bl	8005c64 <HAL_RCCEx_PeriphCLKConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 800117a:	f7ff ff97 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800117e:	4b31      	ldr	r3, [pc, #196]	@ (8001244 <HAL_ADC_MspInit+0x12c>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001184:	4a2f      	ldr	r2, [pc, #188]	@ (8001244 <HAL_ADC_MspInit+0x12c>)
 8001186:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800118a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800118e:	4b2d      	ldr	r3, [pc, #180]	@ (8001244 <HAL_ADC_MspInit+0x12c>)
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001194:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800119c:	4b29      	ldr	r3, [pc, #164]	@ (8001244 <HAL_ADC_MspInit+0x12c>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a2:	4a28      	ldr	r2, [pc, #160]	@ (8001244 <HAL_ADC_MspInit+0x12c>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ac:	4b25      	ldr	r3, [pc, #148]	@ (8001244 <HAL_ADC_MspInit+0x12c>)
 80011ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80011ba:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80011be:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80011c2:	f000 fb59 	bl	8001878 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 80011c6:	4b20      	ldr	r3, [pc, #128]	@ (8001248 <HAL_ADC_MspInit+0x130>)
 80011c8:	4a20      	ldr	r2, [pc, #128]	@ (800124c <HAL_ADC_MspInit+0x134>)
 80011ca:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80011cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001248 <HAL_ADC_MspInit+0x130>)
 80011ce:	2273      	movs	r2, #115	@ 0x73
 80011d0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001248 <HAL_ADC_MspInit+0x130>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <HAL_ADC_MspInit+0x130>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80011de:	4b1a      	ldr	r3, [pc, #104]	@ (8001248 <HAL_ADC_MspInit+0x130>)
 80011e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011e4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011e6:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <HAL_ADC_MspInit+0x130>)
 80011e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011ec:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011ee:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <HAL_ADC_MspInit+0x130>)
 80011f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011f4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80011f6:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <HAL_ADC_MspInit+0x130>)
 80011f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011fc:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80011fe:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <HAL_ADC_MspInit+0x130>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001204:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <HAL_ADC_MspInit+0x130>)
 8001206:	2200      	movs	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800120a:	480f      	ldr	r0, [pc, #60]	@ (8001248 <HAL_ADC_MspInit+0x130>)
 800120c:	f001 fe7e 	bl	8002f0c <HAL_DMA_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001216:	f7ff ff49 	bl	80010ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a0a      	ldr	r2, [pc, #40]	@ (8001248 <HAL_ADC_MspInit+0x130>)
 800121e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001220:	4a09      	ldr	r2, [pc, #36]	@ (8001248 <HAL_ADC_MspInit+0x130>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	207f      	movs	r0, #127	@ 0x7f
 800122c:	f001 fcd5 	bl	8002bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001230:	207f      	movs	r0, #127	@ 0x7f
 8001232:	f001 fcec 	bl	8002c0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8001236:	bf00      	nop
 8001238:	37d0      	adds	r7, #208	@ 0xd0
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	58026000 	.word	0x58026000
 8001244:	58024400 	.word	0x58024400
 8001248:	24000864 	.word	0x24000864
 800124c:	40020010 	.word	0x40020010

08001250 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	@ 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a18      	ldr	r2, [pc, #96]	@ (80012d0 <HAL_COMP_MspInit+0x80>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d12a      	bne.n	80012c8 <HAL_COMP_MspInit+0x78>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 8001272:	4b18      	ldr	r3, [pc, #96]	@ (80012d4 <HAL_COMP_MspInit+0x84>)
 8001274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001278:	4a16      	ldr	r2, [pc, #88]	@ (80012d4 <HAL_COMP_MspInit+0x84>)
 800127a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800127e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001282:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <HAL_COMP_MspInit+0x84>)
 8001284:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001288:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001290:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <HAL_COMP_MspInit+0x84>)
 8001292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001296:	4a0f      	ldr	r2, [pc, #60]	@ (80012d4 <HAL_COMP_MspInit+0x84>)
 8001298:	f043 0310 	orr.w	r3, r3, #16
 800129c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012a0:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <HAL_COMP_MspInit+0x84>)
 80012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b4:	2303      	movs	r3, #3
 80012b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <HAL_COMP_MspInit+0x88>)
 80012c4:	f003 fae4 	bl	8004890 <HAL_GPIO_Init>

  /* USER CODE END COMP2_MspInit 1 */

  }

}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	@ 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	58003810 	.word	0x58003810
 80012d4:	58024400 	.word	0x58024400
 80012d8:	58021000 	.word	0x58021000

080012dc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001318 <HAL_DAC_MspInit+0x3c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d10e      	bne.n	800130c <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80012ee:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <HAL_DAC_MspInit+0x40>)
 80012f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012f4:	4a09      	ldr	r2, [pc, #36]	@ (800131c <HAL_DAC_MspInit+0x40>)
 80012f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80012fa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012fe:	4b07      	ldr	r3, [pc, #28]	@ (800131c <HAL_DAC_MspInit+0x40>)
 8001300:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001304:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	40007400 	.word	0x40007400
 800131c:	58024400 	.word	0x58024400

08001320 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0b      	ldr	r2, [pc, #44]	@ (800135c <HAL_TIM_Base_MspInit+0x3c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d10e      	bne.n	8001350 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001332:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <HAL_TIM_Base_MspInit+0x40>)
 8001334:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <HAL_TIM_Base_MspInit+0x40>)
 800133a:	f043 0310 	orr.w	r3, r3, #16
 800133e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001342:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <HAL_TIM_Base_MspInit+0x40>)
 8001344:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001348:	f003 0310 	and.w	r3, r3, #16
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	40001000 	.word	0x40001000
 8001360:	58024400 	.word	0x58024400

08001364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b0ba      	sub	sp, #232	@ 0xe8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	22c0      	movs	r2, #192	@ 0xc0
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f008 fbd3 	bl	8009b30 <memset>
  if(huart->Instance==USART3)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a41      	ldr	r2, [pc, #260]	@ (8001494 <HAL_UART_MspInit+0x130>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d17b      	bne.n	800148c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001394:	f04f 0202 	mov.w	r2, #2
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	4618      	mov	r0, r3
 80013ac:	f004 fc5a 	bl	8005c64 <HAL_RCCEx_PeriphCLKConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013b6:	f7ff fe79 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ba:	4b37      	ldr	r3, [pc, #220]	@ (8001498 <HAL_UART_MspInit+0x134>)
 80013bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013c0:	4a35      	ldr	r2, [pc, #212]	@ (8001498 <HAL_UART_MspInit+0x134>)
 80013c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013ca:	4b33      	ldr	r3, [pc, #204]	@ (8001498 <HAL_UART_MspInit+0x134>)
 80013cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001498 <HAL_UART_MspInit+0x134>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013de:	4a2e      	ldr	r2, [pc, #184]	@ (8001498 <HAL_UART_MspInit+0x134>)
 80013e0:	f043 0308 	orr.w	r3, r3, #8
 80013e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001498 <HAL_UART_MspInit+0x134>)
 80013ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001410:	2307      	movs	r3, #7
 8001412:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001416:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800141a:	4619      	mov	r1, r3
 800141c:	481f      	ldr	r0, [pc, #124]	@ (800149c <HAL_UART_MspInit+0x138>)
 800141e:	f003 fa37 	bl	8004890 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001422:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <HAL_UART_MspInit+0x13c>)
 8001424:	4a1f      	ldr	r2, [pc, #124]	@ (80014a4 <HAL_UART_MspInit+0x140>)
 8001426:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001428:	4b1d      	ldr	r3, [pc, #116]	@ (80014a0 <HAL_UART_MspInit+0x13c>)
 800142a:	222e      	movs	r2, #46	@ 0x2e
 800142c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800142e:	4b1c      	ldr	r3, [pc, #112]	@ (80014a0 <HAL_UART_MspInit+0x13c>)
 8001430:	2240      	movs	r2, #64	@ 0x40
 8001432:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001434:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <HAL_UART_MspInit+0x13c>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800143a:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <HAL_UART_MspInit+0x13c>)
 800143c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001440:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001442:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <HAL_UART_MspInit+0x13c>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001448:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <HAL_UART_MspInit+0x13c>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800144e:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <HAL_UART_MspInit+0x13c>)
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_UART_MspInit+0x13c>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800145a:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <HAL_UART_MspInit+0x13c>)
 800145c:	2200      	movs	r2, #0
 800145e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001460:	480f      	ldr	r0, [pc, #60]	@ (80014a0 <HAL_UART_MspInit+0x13c>)
 8001462:	f001 fd53 	bl	8002f0c <HAL_DMA_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800146c:	f7ff fe1e 	bl	80010ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a0b      	ldr	r2, [pc, #44]	@ (80014a0 <HAL_UART_MspInit+0x13c>)
 8001474:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001476:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <HAL_UART_MspInit+0x13c>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	2100      	movs	r1, #0
 8001480:	2027      	movs	r0, #39	@ 0x27
 8001482:	f001 fbaa 	bl	8002bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001486:	2027      	movs	r0, #39	@ 0x27
 8001488:	f001 fbc1 	bl	8002c0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800148c:	bf00      	nop
 800148e:	37e8      	adds	r7, #232	@ 0xe8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40004800 	.word	0x40004800
 8001498:	58024400 	.word	0x58024400
 800149c:	58020c00 	.word	0x58020c00
 80014a0:	240009fc 	.word	0x240009fc
 80014a4:	40020028 	.word	0x40020028

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <NMI_Handler+0x4>

080014b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <MemManage_Handler+0x4>

080014c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <UsageFault_Handler+0x4>

080014d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fe:	f000 f943 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */


  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800150c:	4802      	ldr	r0, [pc, #8]	@ (8001518 <DMA1_Stream0_IRQHandler+0x10>)
 800150e:	f002 f859 	bl	80035c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	24000864 	.word	0x24000864

0800151c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
	DMA_custom_interrupt_tx();
 8001520:	f7ff f9a6 	bl	8000870 <DMA_custom_interrupt_tx>
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
	}
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	USART_custom_interrupt();
 800152c:	f7ff fa14 	bl	8000958 <USART_custom_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	ADC_custom_interrupt();
 8001538:	f7ff f8b4 	bl	80006a4 <ADC_custom_interrupt>
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}
  /* USER CODE END ADC3_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}

08001540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001544:	4b37      	ldr	r3, [pc, #220]	@ (8001624 <SystemInit+0xe4>)
 8001546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800154a:	4a36      	ldr	r2, [pc, #216]	@ (8001624 <SystemInit+0xe4>)
 800154c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001550:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001554:	4b34      	ldr	r3, [pc, #208]	@ (8001628 <SystemInit+0xe8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 030f 	and.w	r3, r3, #15
 800155c:	2b06      	cmp	r3, #6
 800155e:	d807      	bhi.n	8001570 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001560:	4b31      	ldr	r3, [pc, #196]	@ (8001628 <SystemInit+0xe8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 030f 	bic.w	r3, r3, #15
 8001568:	4a2f      	ldr	r2, [pc, #188]	@ (8001628 <SystemInit+0xe8>)
 800156a:	f043 0307 	orr.w	r3, r3, #7
 800156e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001570:	4b2e      	ldr	r3, [pc, #184]	@ (800162c <SystemInit+0xec>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a2d      	ldr	r2, [pc, #180]	@ (800162c <SystemInit+0xec>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800157c:	4b2b      	ldr	r3, [pc, #172]	@ (800162c <SystemInit+0xec>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001582:	4b2a      	ldr	r3, [pc, #168]	@ (800162c <SystemInit+0xec>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4929      	ldr	r1, [pc, #164]	@ (800162c <SystemInit+0xec>)
 8001588:	4b29      	ldr	r3, [pc, #164]	@ (8001630 <SystemInit+0xf0>)
 800158a:	4013      	ands	r3, r2
 800158c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800158e:	4b26      	ldr	r3, [pc, #152]	@ (8001628 <SystemInit+0xe8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d007      	beq.n	80015aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800159a:	4b23      	ldr	r3, [pc, #140]	@ (8001628 <SystemInit+0xe8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f023 030f 	bic.w	r3, r3, #15
 80015a2:	4a21      	ldr	r2, [pc, #132]	@ (8001628 <SystemInit+0xe8>)
 80015a4:	f043 0307 	orr.w	r3, r3, #7
 80015a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015aa:	4b20      	ldr	r3, [pc, #128]	@ (800162c <SystemInit+0xec>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015b0:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <SystemInit+0xec>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015b6:	4b1d      	ldr	r3, [pc, #116]	@ (800162c <SystemInit+0xec>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <SystemInit+0xec>)
 80015be:	4a1d      	ldr	r2, [pc, #116]	@ (8001634 <SystemInit+0xf4>)
 80015c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <SystemInit+0xec>)
 80015c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001638 <SystemInit+0xf8>)
 80015c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015c8:	4b18      	ldr	r3, [pc, #96]	@ (800162c <SystemInit+0xec>)
 80015ca:	4a1c      	ldr	r2, [pc, #112]	@ (800163c <SystemInit+0xfc>)
 80015cc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015ce:	4b17      	ldr	r3, [pc, #92]	@ (800162c <SystemInit+0xec>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015d4:	4b15      	ldr	r3, [pc, #84]	@ (800162c <SystemInit+0xec>)
 80015d6:	4a19      	ldr	r2, [pc, #100]	@ (800163c <SystemInit+0xfc>)
 80015d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015da:	4b14      	ldr	r3, [pc, #80]	@ (800162c <SystemInit+0xec>)
 80015dc:	2200      	movs	r2, #0
 80015de:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015e0:	4b12      	ldr	r3, [pc, #72]	@ (800162c <SystemInit+0xec>)
 80015e2:	4a16      	ldr	r2, [pc, #88]	@ (800163c <SystemInit+0xfc>)
 80015e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015e6:	4b11      	ldr	r3, [pc, #68]	@ (800162c <SystemInit+0xec>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <SystemInit+0xec>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0e      	ldr	r2, [pc, #56]	@ (800162c <SystemInit+0xec>)
 80015f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <SystemInit+0xec>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <SystemInit+0x100>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <SystemInit+0x104>)
 8001604:	4013      	ands	r3, r2
 8001606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800160a:	d202      	bcs.n	8001612 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800160c:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <SystemInit+0x108>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <SystemInit+0x10c>)
 8001614:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001618:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00
 8001628:	52002000 	.word	0x52002000
 800162c:	58024400 	.word	0x58024400
 8001630:	eaf6ed7f 	.word	0xeaf6ed7f
 8001634:	02020200 	.word	0x02020200
 8001638:	01ff0000 	.word	0x01ff0000
 800163c:	01010280 	.word	0x01010280
 8001640:	5c001000 	.word	0x5c001000
 8001644:	ffff0000 	.word	0xffff0000
 8001648:	51008108 	.word	0x51008108
 800164c:	52004000 	.word	0x52004000

08001650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001688 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001654:	f7ff ff74 	bl	8001540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001658:	480c      	ldr	r0, [pc, #48]	@ (800168c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800165a:	490d      	ldr	r1, [pc, #52]	@ (8001690 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800165c:	4a0d      	ldr	r2, [pc, #52]	@ (8001694 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001670:	4c0a      	ldr	r4, [pc, #40]	@ (800169c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167e:	f008 fa5f 	bl	8009b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001682:	f7ff f99b 	bl	80009bc <main>
  bx  lr
 8001686:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001688:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800168c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001690:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001694:	08009bf0 	.word	0x08009bf0
  ldr r2, =_sbss
 8001698:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800169c:	24000a78 	.word	0x24000a78

080016a0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC_IRQHandler>
	...

080016a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016aa:	2003      	movs	r0, #3
 80016ac:	f001 fa8a 	bl	8002bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016b0:	f004 f902 	bl	80058b8 <HAL_RCC_GetSysClockFreq>
 80016b4:	4602      	mov	r2, r0
 80016b6:	4b15      	ldr	r3, [pc, #84]	@ (800170c <HAL_Init+0x68>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	4913      	ldr	r1, [pc, #76]	@ (8001710 <HAL_Init+0x6c>)
 80016c2:	5ccb      	ldrb	r3, [r1, r3]
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	fa22 f303 	lsr.w	r3, r2, r3
 80016cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016ce:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <HAL_Init+0x68>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001710 <HAL_Init+0x6c>)
 80016d8:	5cd3      	ldrb	r3, [r2, r3]
 80016da:	f003 031f 	and.w	r3, r3, #31
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	fa22 f303 	lsr.w	r3, r2, r3
 80016e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001714 <HAL_Init+0x70>)
 80016e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001718 <HAL_Init+0x74>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ee:	2000      	movs	r0, #0
 80016f0:	f000 f814 	bl	800171c <HAL_InitTick>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e002      	b.n	8001704 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016fe:	f7ff fcdb 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	58024400 	.word	0x58024400
 8001710:	08009ba0 	.word	0x08009ba0
 8001714:	24000004 	.word	0x24000004
 8001718:	24000000 	.word	0x24000000

0800171c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001724:	4b15      	ldr	r3, [pc, #84]	@ (800177c <HAL_InitTick+0x60>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e021      	b.n	8001774 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001730:	4b13      	ldr	r3, [pc, #76]	@ (8001780 <HAL_InitTick+0x64>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b11      	ldr	r3, [pc, #68]	@ (800177c <HAL_InitTick+0x60>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800173e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f001 fa6f 	bl	8002c2a <HAL_SYSTICK_Config>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00e      	b.n	8001774 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d80a      	bhi.n	8001772 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f001 fa39 	bl	8002bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001768:	4a06      	ldr	r2, [pc, #24]	@ (8001784 <HAL_InitTick+0x68>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2400000c 	.word	0x2400000c
 8001780:	24000000 	.word	0x24000000
 8001784:	24000008 	.word	0x24000008

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	@ (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	2400000c 	.word	0x2400000c
 80017ac:	24000a74 	.word	0x24000a74

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	@ (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	24000a74 	.word	0x24000a74

080017c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017cc:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <HAL_GetREVID+0x14>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	0c1b      	lsrs	r3, r3, #16
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	5c001000 	.word	0x5c001000

080017e0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80017f0:	4904      	ldr	r1, [pc, #16]	@ (8001804 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	58003c00 	.word	0x58003c00

08001808 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 0202 	bic.w	r2, r3, #2
 8001818:	4904      	ldr	r1, [pc, #16]	@ (800182c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4313      	orrs	r3, r2
 800181e:	600b      	str	r3, [r1, #0]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	58003c00 	.word	0x58003c00

08001830 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001836:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a0e      	ldr	r2, [pc, #56]	@ (8001874 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001842:	f7ff ffb5 	bl	80017b0 <HAL_GetTick>
 8001846:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001848:	e008      	b.n	800185c <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800184a:	f7ff ffb1 	bl	80017b0 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b0a      	cmp	r3, #10
 8001856:	d901      	bls.n	800185c <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e006      	b.n	800186a <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 800185c:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	58003c00 	.word	0x58003c00

08001878 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001882:	4b07      	ldr	r3, [pc, #28]	@ (80018a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	43db      	mvns	r3, r3
 800188a:	401a      	ands	r2, r3
 800188c:	4904      	ldr	r1, [pc, #16]	@ (80018a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	58000400 	.word	0x58000400

080018a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	609a      	str	r2, [r3, #8]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	609a      	str	r2, [r3, #8]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800190c:	b480      	push	{r7}
 800190e:	b087      	sub	sp, #28
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	3360      	adds	r3, #96	@ 0x60
 800191e:	461a      	mov	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	430b      	orrs	r3, r1
 800193a:	431a      	orrs	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001940:	bf00      	nop
 8001942:	371c      	adds	r7, #28
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f003 031f 	and.w	r3, r3, #31
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	431a      	orrs	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	611a      	str	r2, [r3, #16]
}
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800197e:	b480      	push	{r7}
 8001980:	b087      	sub	sp, #28
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	3360      	adds	r3, #96	@ 0x60
 800198e:	461a      	mov	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	601a      	str	r2, [r3, #0]
  }
}
 80019a8:	bf00      	nop
 80019aa:	371c      	adds	r7, #28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	3330      	adds	r3, #48	@ 0x30
 80019c4:	461a      	mov	r2, r3
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	4413      	add	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	211f      	movs	r1, #31
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	401a      	ands	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	0e9b      	lsrs	r3, r3, #26
 80019ec:	f003 011f 	and.w	r1, r3, #31
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	431a      	orrs	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a00:	bf00      	nop
 8001a02:	371c      	adds	r7, #28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3314      	adds	r3, #20
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	0e5b      	lsrs	r3, r3, #25
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	4413      	add	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	0d1b      	lsrs	r3, r3, #20
 8001a34:	f003 031f 	and.w	r3, r3, #31
 8001a38:	2107      	movs	r1, #7
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	401a      	ands	r2, r3
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	0d1b      	lsrs	r3, r3, #20
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	431a      	orrs	r2, r3
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a56:	bf00      	nop
 8001a58:	371c      	adds	r7, #28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	401a      	ands	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f003 0318 	and.w	r3, r3, #24
 8001a86:	4908      	ldr	r1, [pc, #32]	@ (8001aa8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a88:	40d9      	lsrs	r1, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	400b      	ands	r3, r1
 8001a8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a92:	431a      	orrs	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a9a:	bf00      	nop
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	000fffff 	.word	0x000fffff

08001aac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <LL_ADC_DisableDeepPowerDown+0x20>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6093      	str	r3, [r2, #8]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	5fffffc0 	.word	0x5fffffc0

08001ad0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ae0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ae4:	d101      	bne.n	8001aea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <LL_ADC_EnableInternalRegulator+0x24>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	6fffffc0 	.word	0x6fffffc0

08001b20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b34:	d101      	bne.n	8001b3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <LL_ADC_IsEnabled+0x18>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <LL_ADC_IsEnabled+0x1a>
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d101      	bne.n	8001b86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d101      	bne.n	8001bac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bbc:	b590      	push	{r4, r7, lr}
 8001bbe:	b089      	sub	sp, #36	@ 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e18f      	b.n	8001ef6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d109      	bne.n	8001bf8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff fa97 	bl	8001118 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff67 	bl	8001ad0 <LL_ADC_IsDeepPowerDownEnabled>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d004      	beq.n	8001c12 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff4d 	bl	8001aac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff82 	bl	8001b20 <LL_ADC_IsInternalRegulatorEnabled>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d114      	bne.n	8001c4c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ff66 	bl	8001af8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c2c:	4b87      	ldr	r3, [pc, #540]	@ (8001e4c <HAL_ADC_Init+0x290>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	099b      	lsrs	r3, r3, #6
 8001c32:	4a87      	ldr	r2, [pc, #540]	@ (8001e50 <HAL_ADC_Init+0x294>)
 8001c34:	fba2 2303 	umull	r2, r3, r2, r3
 8001c38:	099b      	lsrs	r3, r3, #6
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c3e:	e002      	b.n	8001c46 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f9      	bne.n	8001c40 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff65 	bl	8001b20 <LL_ADC_IsInternalRegulatorEnabled>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10d      	bne.n	8001c78 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c60:	f043 0210 	orr.w	r2, r3, #16
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6c:	f043 0201 	orr.w	r2, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff76 	bl	8001b6e <LL_ADC_REG_IsConversionOngoing>
 8001c82:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c88:	f003 0310 	and.w	r3, r3, #16
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f040 8129 	bne.w	8001ee4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f040 8125 	bne.w	8001ee4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c9e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ca2:	f043 0202 	orr.w	r2, r3, #2
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ff4a 	bl	8001b48 <LL_ADC_IsEnabled>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d136      	bne.n	8001d28 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a65      	ldr	r2, [pc, #404]	@ (8001e54 <HAL_ADC_Init+0x298>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d004      	beq.n	8001cce <HAL_ADC_Init+0x112>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a63      	ldr	r2, [pc, #396]	@ (8001e58 <HAL_ADC_Init+0x29c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d10e      	bne.n	8001cec <HAL_ADC_Init+0x130>
 8001cce:	4861      	ldr	r0, [pc, #388]	@ (8001e54 <HAL_ADC_Init+0x298>)
 8001cd0:	f7ff ff3a 	bl	8001b48 <LL_ADC_IsEnabled>
 8001cd4:	4604      	mov	r4, r0
 8001cd6:	4860      	ldr	r0, [pc, #384]	@ (8001e58 <HAL_ADC_Init+0x29c>)
 8001cd8:	f7ff ff36 	bl	8001b48 <LL_ADC_IsEnabled>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4323      	orrs	r3, r4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf0c      	ite	eq
 8001ce4:	2301      	moveq	r3, #1
 8001ce6:	2300      	movne	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	e008      	b.n	8001cfe <HAL_ADC_Init+0x142>
 8001cec:	485b      	ldr	r0, [pc, #364]	@ (8001e5c <HAL_ADC_Init+0x2a0>)
 8001cee:	f7ff ff2b 	bl	8001b48 <LL_ADC_IsEnabled>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bf0c      	ite	eq
 8001cf8:	2301      	moveq	r3, #1
 8001cfa:	2300      	movne	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d012      	beq.n	8001d28 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a53      	ldr	r2, [pc, #332]	@ (8001e54 <HAL_ADC_Init+0x298>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d004      	beq.n	8001d16 <HAL_ADC_Init+0x15a>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a51      	ldr	r2, [pc, #324]	@ (8001e58 <HAL_ADC_Init+0x29c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d101      	bne.n	8001d1a <HAL_ADC_Init+0x15e>
 8001d16:	4a52      	ldr	r2, [pc, #328]	@ (8001e60 <HAL_ADC_Init+0x2a4>)
 8001d18:	e000      	b.n	8001d1c <HAL_ADC_Init+0x160>
 8001d1a:	4a52      	ldr	r2, [pc, #328]	@ (8001e64 <HAL_ADC_Init+0x2a8>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	4619      	mov	r1, r3
 8001d22:	4610      	mov	r0, r2
 8001d24:	f7ff fdbe 	bl	80018a4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001d28:	f7ff fd4e 	bl	80017c8 <HAL_GetREVID>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d914      	bls.n	8001d60 <HAL_ADC_Init+0x1a4>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b10      	cmp	r3, #16
 8001d3c:	d110      	bne.n	8001d60 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7d5b      	ldrb	r3, [r3, #21]
 8001d42:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d48:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d4e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	7f1b      	ldrb	r3, [r3, #28]
 8001d54:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d56:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d58:	f043 030c 	orr.w	r3, r3, #12
 8001d5c:	61bb      	str	r3, [r7, #24]
 8001d5e:	e00d      	b.n	8001d7c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	7d5b      	ldrb	r3, [r3, #21]
 8001d64:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d6a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d70:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7f1b      	ldrb	r3, [r3, #28]
 8001d76:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7f1b      	ldrb	r3, [r3, #28]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d106      	bne.n	8001d92 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	045b      	lsls	r3, r3, #17
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d009      	beq.n	8001dae <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e68 <HAL_ADC_Init+0x2ac>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	69b9      	ldr	r1, [r7, #24]
 8001dbe:	430b      	orrs	r3, r1
 8001dc0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fed1 	bl	8001b6e <LL_ADC_REG_IsConversionOngoing>
 8001dcc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fede 	bl	8001b94 <LL_ADC_INJ_IsConversionOngoing>
 8001dd8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d15f      	bne.n	8001ea0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d15c      	bne.n	8001ea0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	7d1b      	ldrb	r3, [r3, #20]
 8001dea:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001e6c <HAL_ADC_Init+0x2b0>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	69b9      	ldr	r1, [r7, #24]
 8001e04:	430b      	orrs	r3, r1
 8001e06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d130      	bne.n	8001e74 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691a      	ldr	r2, [r3, #16]
 8001e1e:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <HAL_ADC_Init+0x2b4>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e26:	3a01      	subs	r2, #1
 8001e28:	0411      	lsls	r1, r2, #16
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e2e:	4311      	orrs	r1, r2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e34:	4311      	orrs	r1, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	611a      	str	r2, [r3, #16]
 8001e48:	e01c      	b.n	8001e84 <HAL_ADC_Init+0x2c8>
 8001e4a:	bf00      	nop
 8001e4c:	24000000 	.word	0x24000000
 8001e50:	053e2d63 	.word	0x053e2d63
 8001e54:	40022000 	.word	0x40022000
 8001e58:	40022100 	.word	0x40022100
 8001e5c:	58026000 	.word	0x58026000
 8001e60:	40022300 	.word	0x40022300
 8001e64:	58026300 	.word	0x58026300
 8001e68:	fff0c003 	.word	0xfff0c003
 8001e6c:	ffffbffc 	.word	0xffffbffc
 8001e70:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fb8c 	bl	80025b8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d10c      	bne.n	8001ec2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	f023 010f 	bic.w	r1, r3, #15
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	1e5a      	subs	r2, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ec0:	e007      	b.n	8001ed2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 020f 	bic.w	r2, r2, #15
 8001ed0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed6:	f023 0303 	bic.w	r3, r3, #3
 8001eda:	f043 0201 	orr.w	r2, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ee2:	e007      	b.n	8001ef4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee8:	f043 0210 	orr.w	r2, r3, #16
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ef4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3724      	adds	r7, #36	@ 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd90      	pop	{r4, r7, pc}
 8001efe:	bf00      	nop

08001f00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b0a1      	sub	sp, #132	@ 0x84
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4a65      	ldr	r2, [pc, #404]	@ (80020b0 <HAL_ADC_ConfigChannel+0x1b0>)
 8001f1a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x2a>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e32e      	b.n	8002588 <HAL_ADC_ConfigChannel+0x688>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fe19 	bl	8001b6e <LL_ADC_REG_IsConversionOngoing>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f040 8313 	bne.w	800256a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db2c      	blt.n	8001fa6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d108      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x6a>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	0e9b      	lsrs	r3, r3, #26
 8001f5e:	f003 031f 	and.w	r3, r3, #31
 8001f62:	2201      	movs	r2, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	e016      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x98>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f7a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001f82:	2320      	movs	r3, #32
 8001f84:	e003      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001f86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f88:	fab3 f383 	clz	r3, r3
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	f003 031f 	and.w	r3, r3, #31
 8001f92:	2201      	movs	r2, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	69d1      	ldr	r1, [r2, #28]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	430b      	orrs	r3, r1
 8001fa4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6859      	ldr	r1, [r3, #4]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f7ff fcfe 	bl	80019b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fdd6 	bl	8001b6e <LL_ADC_REG_IsConversionOngoing>
 8001fc2:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fde3 	bl	8001b94 <LL_ADC_INJ_IsConversionOngoing>
 8001fce:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f040 80b8 	bne.w	8002148 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f040 80b4 	bne.w	8002148 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	6819      	ldr	r1, [r3, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	461a      	mov	r2, r3
 8001fee:	f7ff fd0d 	bl	8001a0c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ff2:	4b30      	ldr	r3, [pc, #192]	@ (80020b4 <HAL_ADC_ConfigChannel+0x1b4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001ffa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ffe:	d10b      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x118>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	695a      	ldr	r2, [r3, #20]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	e01d      	b.n	8002054 <HAL_ADC_ConfigChannel+0x154>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10b      	bne.n	800203e <HAL_ADC_ConfigChannel+0x13e>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	695a      	ldr	r2, [r3, #20]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	e00a      	b.n	8002054 <HAL_ADC_ConfigChannel+0x154>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	695a      	ldr	r2, [r3, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	2b04      	cmp	r3, #4
 800205c:	d02c      	beq.n	80020b8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6919      	ldr	r1, [r3, #16]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800206c:	f7ff fc4e 	bl	800190c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6919      	ldr	r1, [r3, #16]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	7e5b      	ldrb	r3, [r3, #25]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d102      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x186>
 8002080:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002084:	e000      	b.n	8002088 <HAL_ADC_ConfigChannel+0x188>
 8002086:	2300      	movs	r3, #0
 8002088:	461a      	mov	r2, r3
 800208a:	f7ff fc78 	bl	800197e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	6919      	ldr	r1, [r3, #16]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	7e1b      	ldrb	r3, [r3, #24]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d102      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x1a4>
 800209e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020a2:	e000      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x1a6>
 80020a4:	2300      	movs	r3, #0
 80020a6:	461a      	mov	r2, r3
 80020a8:	f7ff fc50 	bl	800194c <LL_ADC_SetDataRightShift>
 80020ac:	e04c      	b.n	8002148 <HAL_ADC_ConfigChannel+0x248>
 80020ae:	bf00      	nop
 80020b0:	47ff0000 	.word	0x47ff0000
 80020b4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	069b      	lsls	r3, r3, #26
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d107      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020da:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	069b      	lsls	r3, r3, #26
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d107      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020fe:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002106:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	069b      	lsls	r3, r3, #26
 8002110:	429a      	cmp	r2, r3
 8002112:	d107      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002122:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800212a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	069b      	lsls	r3, r3, #26
 8002134:	429a      	cmp	r2, r3
 8002136:	d107      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002146:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fcfb 	bl	8001b48 <LL_ADC_IsEnabled>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	f040 8211 	bne.w	800257c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	6819      	ldr	r1, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	461a      	mov	r2, r3
 8002168:	f7ff fc7c 	bl	8001a64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4aa1      	ldr	r2, [pc, #644]	@ (80023f8 <HAL_ADC_ConfigChannel+0x4f8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	f040 812e 	bne.w	80023d4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10b      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x2a0>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0e9b      	lsrs	r3, r3, #26
 800218e:	3301      	adds	r3, #1
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	2b09      	cmp	r3, #9
 8002196:	bf94      	ite	ls
 8002198:	2301      	movls	r3, #1
 800219a:	2300      	movhi	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	e019      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x2d4>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021a8:	fa93 f3a3 	rbit	r3, r3
 80021ac:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80021ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80021b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80021b8:	2320      	movs	r3, #32
 80021ba:	e003      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80021bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	3301      	adds	r3, #1
 80021c6:	f003 031f 	and.w	r3, r3, #31
 80021ca:	2b09      	cmp	r3, #9
 80021cc:	bf94      	ite	ls
 80021ce:	2301      	movls	r3, #1
 80021d0:	2300      	movhi	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d079      	beq.n	80022cc <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d107      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x2f4>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0e9b      	lsrs	r3, r3, #26
 80021ea:	3301      	adds	r3, #1
 80021ec:	069b      	lsls	r3, r3, #26
 80021ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021f2:	e015      	b.n	8002220 <HAL_ADC_ConfigChannel+0x320>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002204:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800220c:	2320      	movs	r3, #32
 800220e:	e003      	b.n	8002218 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002210:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	3301      	adds	r3, #1
 800221a:	069b      	lsls	r3, r3, #26
 800221c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002228:	2b00      	cmp	r3, #0
 800222a:	d109      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x340>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	0e9b      	lsrs	r3, r3, #26
 8002232:	3301      	adds	r3, #1
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	2101      	movs	r1, #1
 800223a:	fa01 f303 	lsl.w	r3, r1, r3
 800223e:	e017      	b.n	8002270 <HAL_ADC_ConfigChannel+0x370>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002248:	fa93 f3a3 	rbit	r3, r3
 800224c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800224e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002250:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002252:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002258:	2320      	movs	r3, #32
 800225a:	e003      	b.n	8002264 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800225c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	3301      	adds	r3, #1
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	2101      	movs	r1, #1
 800226c:	fa01 f303 	lsl.w	r3, r1, r3
 8002270:	ea42 0103 	orr.w	r1, r2, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10a      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x396>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	0e9b      	lsrs	r3, r3, #26
 8002286:	3301      	adds	r3, #1
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	051b      	lsls	r3, r3, #20
 8002294:	e018      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x3c8>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80022a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80022a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80022ae:	2320      	movs	r3, #32
 80022b0:	e003      	b.n	80022ba <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80022b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b4:	fab3 f383 	clz	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	3301      	adds	r3, #1
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	4613      	mov	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4413      	add	r3, r2
 80022c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022c8:	430b      	orrs	r3, r1
 80022ca:	e07e      	b.n	80023ca <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d107      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x3e8>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	0e9b      	lsrs	r3, r3, #26
 80022de:	3301      	adds	r3, #1
 80022e0:	069b      	lsls	r3, r3, #26
 80022e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022e6:	e015      	b.n	8002314 <HAL_ADC_ConfigChannel+0x414>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80022fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002300:	2320      	movs	r3, #32
 8002302:	e003      	b.n	800230c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	3301      	adds	r3, #1
 800230e:	069b      	lsls	r3, r3, #26
 8002310:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800231c:	2b00      	cmp	r3, #0
 800231e:	d109      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x434>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	0e9b      	lsrs	r3, r3, #26
 8002326:	3301      	adds	r3, #1
 8002328:	f003 031f 	and.w	r3, r3, #31
 800232c:	2101      	movs	r1, #1
 800232e:	fa01 f303 	lsl.w	r3, r1, r3
 8002332:	e017      	b.n	8002364 <HAL_ADC_ConfigChannel+0x464>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa93 f3a3 	rbit	r3, r3
 8002340:	61bb      	str	r3, [r7, #24]
  return result;
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800234c:	2320      	movs	r3, #32
 800234e:	e003      	b.n	8002358 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	fab3 f383 	clz	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	3301      	adds	r3, #1
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	2101      	movs	r1, #1
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	ea42 0103 	orr.w	r1, r2, r3
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10d      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x490>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	0e9b      	lsrs	r3, r3, #26
 800237a:	3301      	adds	r3, #1
 800237c:	f003 021f 	and.w	r2, r3, #31
 8002380:	4613      	mov	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	3b1e      	subs	r3, #30
 8002388:	051b      	lsls	r3, r3, #20
 800238a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800238e:	e01b      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x4c8>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	fa93 f3a3 	rbit	r3, r3
 800239c:	60fb      	str	r3, [r7, #12]
  return result;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80023a8:	2320      	movs	r3, #32
 80023aa:	e003      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	3301      	adds	r3, #1
 80023b6:	f003 021f 	and.w	r2, r3, #31
 80023ba:	4613      	mov	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4413      	add	r3, r2
 80023c0:	3b1e      	subs	r3, #30
 80023c2:	051b      	lsls	r3, r3, #20
 80023c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c8:	430b      	orrs	r3, r1
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	6892      	ldr	r2, [r2, #8]
 80023ce:	4619      	mov	r1, r3
 80023d0:	f7ff fb1c 	bl	8001a0c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f280 80cf 	bge.w	800257c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a06      	ldr	r2, [pc, #24]	@ (80023fc <HAL_ADC_ConfigChannel+0x4fc>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d004      	beq.n	80023f2 <HAL_ADC_ConfigChannel+0x4f2>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a04      	ldr	r2, [pc, #16]	@ (8002400 <HAL_ADC_ConfigChannel+0x500>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10a      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x508>
 80023f2:	4b04      	ldr	r3, [pc, #16]	@ (8002404 <HAL_ADC_ConfigChannel+0x504>)
 80023f4:	e009      	b.n	800240a <HAL_ADC_ConfigChannel+0x50a>
 80023f6:	bf00      	nop
 80023f8:	47ff0000 	.word	0x47ff0000
 80023fc:	40022000 	.word	0x40022000
 8002400:	40022100 	.word	0x40022100
 8002404:	40022300 	.word	0x40022300
 8002408:	4b61      	ldr	r3, [pc, #388]	@ (8002590 <HAL_ADC_ConfigChannel+0x690>)
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fa70 	bl	80018f0 <LL_ADC_GetCommonPathInternalCh>
 8002410:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a5f      	ldr	r2, [pc, #380]	@ (8002594 <HAL_ADC_ConfigChannel+0x694>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d004      	beq.n	8002426 <HAL_ADC_ConfigChannel+0x526>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a5d      	ldr	r2, [pc, #372]	@ (8002598 <HAL_ADC_ConfigChannel+0x698>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d10e      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x544>
 8002426:	485b      	ldr	r0, [pc, #364]	@ (8002594 <HAL_ADC_ConfigChannel+0x694>)
 8002428:	f7ff fb8e 	bl	8001b48 <LL_ADC_IsEnabled>
 800242c:	4604      	mov	r4, r0
 800242e:	485a      	ldr	r0, [pc, #360]	@ (8002598 <HAL_ADC_ConfigChannel+0x698>)
 8002430:	f7ff fb8a 	bl	8001b48 <LL_ADC_IsEnabled>
 8002434:	4603      	mov	r3, r0
 8002436:	4323      	orrs	r3, r4
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	e008      	b.n	8002456 <HAL_ADC_ConfigChannel+0x556>
 8002444:	4855      	ldr	r0, [pc, #340]	@ (800259c <HAL_ADC_ConfigChannel+0x69c>)
 8002446:	f7ff fb7f 	bl	8001b48 <LL_ADC_IsEnabled>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf0c      	ite	eq
 8002450:	2301      	moveq	r3, #1
 8002452:	2300      	movne	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d07d      	beq.n	8002556 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a50      	ldr	r2, [pc, #320]	@ (80025a0 <HAL_ADC_ConfigChannel+0x6a0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d130      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x5c6>
 8002464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002466:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d12b      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a4a      	ldr	r2, [pc, #296]	@ (800259c <HAL_ADC_ConfigChannel+0x69c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	f040 8081 	bne.w	800257c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a45      	ldr	r2, [pc, #276]	@ (8002594 <HAL_ADC_ConfigChannel+0x694>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d004      	beq.n	800248e <HAL_ADC_ConfigChannel+0x58e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a43      	ldr	r2, [pc, #268]	@ (8002598 <HAL_ADC_ConfigChannel+0x698>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d101      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x592>
 800248e:	4a45      	ldr	r2, [pc, #276]	@ (80025a4 <HAL_ADC_ConfigChannel+0x6a4>)
 8002490:	e000      	b.n	8002494 <HAL_ADC_ConfigChannel+0x594>
 8002492:	4a3f      	ldr	r2, [pc, #252]	@ (8002590 <HAL_ADC_ConfigChannel+0x690>)
 8002494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002496:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800249a:	4619      	mov	r1, r3
 800249c:	4610      	mov	r0, r2
 800249e:	f7ff fa14 	bl	80018ca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024a2:	4b41      	ldr	r3, [pc, #260]	@ (80025a8 <HAL_ADC_ConfigChannel+0x6a8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	099b      	lsrs	r3, r3, #6
 80024a8:	4a40      	ldr	r2, [pc, #256]	@ (80025ac <HAL_ADC_ConfigChannel+0x6ac>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	099b      	lsrs	r3, r3, #6
 80024b0:	3301      	adds	r3, #1
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024b6:	e002      	b.n	80024be <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f9      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024c4:	e05a      	b.n	800257c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a39      	ldr	r2, [pc, #228]	@ (80025b0 <HAL_ADC_ConfigChannel+0x6b0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d11e      	bne.n	800250e <HAL_ADC_ConfigChannel+0x60e>
 80024d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d119      	bne.n	800250e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a2f      	ldr	r2, [pc, #188]	@ (800259c <HAL_ADC_ConfigChannel+0x69c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d14b      	bne.n	800257c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002594 <HAL_ADC_ConfigChannel+0x694>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d004      	beq.n	80024f8 <HAL_ADC_ConfigChannel+0x5f8>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a29      	ldr	r2, [pc, #164]	@ (8002598 <HAL_ADC_ConfigChannel+0x698>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d101      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x5fc>
 80024f8:	4a2a      	ldr	r2, [pc, #168]	@ (80025a4 <HAL_ADC_ConfigChannel+0x6a4>)
 80024fa:	e000      	b.n	80024fe <HAL_ADC_ConfigChannel+0x5fe>
 80024fc:	4a24      	ldr	r2, [pc, #144]	@ (8002590 <HAL_ADC_ConfigChannel+0x690>)
 80024fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002500:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002504:	4619      	mov	r1, r3
 8002506:	4610      	mov	r0, r2
 8002508:	f7ff f9df 	bl	80018ca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800250c:	e036      	b.n	800257c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a28      	ldr	r2, [pc, #160]	@ (80025b4 <HAL_ADC_ConfigChannel+0x6b4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d131      	bne.n	800257c <HAL_ADC_ConfigChannel+0x67c>
 8002518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800251a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d12c      	bne.n	800257c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1d      	ldr	r2, [pc, #116]	@ (800259c <HAL_ADC_ConfigChannel+0x69c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d127      	bne.n	800257c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a18      	ldr	r2, [pc, #96]	@ (8002594 <HAL_ADC_ConfigChannel+0x694>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d004      	beq.n	8002540 <HAL_ADC_ConfigChannel+0x640>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a17      	ldr	r2, [pc, #92]	@ (8002598 <HAL_ADC_ConfigChannel+0x698>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d101      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x644>
 8002540:	4a18      	ldr	r2, [pc, #96]	@ (80025a4 <HAL_ADC_ConfigChannel+0x6a4>)
 8002542:	e000      	b.n	8002546 <HAL_ADC_ConfigChannel+0x646>
 8002544:	4a12      	ldr	r2, [pc, #72]	@ (8002590 <HAL_ADC_ConfigChannel+0x690>)
 8002546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002548:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800254c:	4619      	mov	r1, r3
 800254e:	4610      	mov	r0, r2
 8002550:	f7ff f9bb 	bl	80018ca <LL_ADC_SetCommonPathInternalCh>
 8002554:	e012      	b.n	800257c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255a:	f043 0220 	orr.w	r2, r3, #32
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002568:	e008      	b.n	800257c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256e:	f043 0220 	orr.w	r2, r3, #32
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002584:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002588:	4618      	mov	r0, r3
 800258a:	3784      	adds	r7, #132	@ 0x84
 800258c:	46bd      	mov	sp, r7
 800258e:	bd90      	pop	{r4, r7, pc}
 8002590:	58026300 	.word	0x58026300
 8002594:	40022000 	.word	0x40022000
 8002598:	40022100 	.word	0x40022100
 800259c:	58026000 	.word	0x58026000
 80025a0:	cb840000 	.word	0xcb840000
 80025a4:	40022300 	.word	0x40022300
 80025a8:	24000000 	.word	0x24000000
 80025ac:	053e2d63 	.word	0x053e2d63
 80025b0:	c7520000 	.word	0xc7520000
 80025b4:	cfb80000 	.word	0xcfb80000

080025b8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a7a      	ldr	r2, [pc, #488]	@ (80027b0 <ADC_ConfigureBoostMode+0x1f8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d004      	beq.n	80025d4 <ADC_ConfigureBoostMode+0x1c>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a79      	ldr	r2, [pc, #484]	@ (80027b4 <ADC_ConfigureBoostMode+0x1fc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d109      	bne.n	80025e8 <ADC_ConfigureBoostMode+0x30>
 80025d4:	4b78      	ldr	r3, [pc, #480]	@ (80027b8 <ADC_ConfigureBoostMode+0x200>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf14      	ite	ne
 80025e0:	2301      	movne	r3, #1
 80025e2:	2300      	moveq	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	e008      	b.n	80025fa <ADC_ConfigureBoostMode+0x42>
 80025e8:	4b74      	ldr	r3, [pc, #464]	@ (80027bc <ADC_ConfigureBoostMode+0x204>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf14      	ite	ne
 80025f4:	2301      	movne	r3, #1
 80025f6:	2300      	moveq	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d01c      	beq.n	8002638 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80025fe:	f003 fad5 	bl	8005bac <HAL_RCC_GetHCLKFreq>
 8002602:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800260c:	d010      	beq.n	8002630 <ADC_ConfigureBoostMode+0x78>
 800260e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002612:	d873      	bhi.n	80026fc <ADC_ConfigureBoostMode+0x144>
 8002614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002618:	d002      	beq.n	8002620 <ADC_ConfigureBoostMode+0x68>
 800261a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800261e:	d16d      	bne.n	80026fc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	0c1b      	lsrs	r3, r3, #16
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	fbb2 f3f3 	udiv	r3, r2, r3
 800262c:	60fb      	str	r3, [r7, #12]
        break;
 800262e:	e068      	b.n	8002702 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	60fb      	str	r3, [r7, #12]
        break;
 8002636:	e064      	b.n	8002702 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002638:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800263c:	f04f 0100 	mov.w	r1, #0
 8002640:	f004 fd1a 	bl	8007078 <HAL_RCCEx_GetPeriphCLKFreq>
 8002644:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800264e:	d051      	beq.n	80026f4 <ADC_ConfigureBoostMode+0x13c>
 8002650:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002654:	d854      	bhi.n	8002700 <ADC_ConfigureBoostMode+0x148>
 8002656:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800265a:	d047      	beq.n	80026ec <ADC_ConfigureBoostMode+0x134>
 800265c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002660:	d84e      	bhi.n	8002700 <ADC_ConfigureBoostMode+0x148>
 8002662:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002666:	d03d      	beq.n	80026e4 <ADC_ConfigureBoostMode+0x12c>
 8002668:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800266c:	d848      	bhi.n	8002700 <ADC_ConfigureBoostMode+0x148>
 800266e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002672:	d033      	beq.n	80026dc <ADC_ConfigureBoostMode+0x124>
 8002674:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002678:	d842      	bhi.n	8002700 <ADC_ConfigureBoostMode+0x148>
 800267a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800267e:	d029      	beq.n	80026d4 <ADC_ConfigureBoostMode+0x11c>
 8002680:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002684:	d83c      	bhi.n	8002700 <ADC_ConfigureBoostMode+0x148>
 8002686:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800268a:	d01a      	beq.n	80026c2 <ADC_ConfigureBoostMode+0x10a>
 800268c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002690:	d836      	bhi.n	8002700 <ADC_ConfigureBoostMode+0x148>
 8002692:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002696:	d014      	beq.n	80026c2 <ADC_ConfigureBoostMode+0x10a>
 8002698:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800269c:	d830      	bhi.n	8002700 <ADC_ConfigureBoostMode+0x148>
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026a2:	d00e      	beq.n	80026c2 <ADC_ConfigureBoostMode+0x10a>
 80026a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026a8:	d82a      	bhi.n	8002700 <ADC_ConfigureBoostMode+0x148>
 80026aa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80026ae:	d008      	beq.n	80026c2 <ADC_ConfigureBoostMode+0x10a>
 80026b0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80026b4:	d824      	bhi.n	8002700 <ADC_ConfigureBoostMode+0x148>
 80026b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80026ba:	d002      	beq.n	80026c2 <ADC_ConfigureBoostMode+0x10a>
 80026bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80026c0:	d11e      	bne.n	8002700 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	0c9b      	lsrs	r3, r3, #18
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d0:	60fb      	str	r3, [r7, #12]
        break;
 80026d2:	e016      	b.n	8002702 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	091b      	lsrs	r3, r3, #4
 80026d8:	60fb      	str	r3, [r7, #12]
        break;
 80026da:	e012      	b.n	8002702 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	60fb      	str	r3, [r7, #12]
        break;
 80026e2:	e00e      	b.n	8002702 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	099b      	lsrs	r3, r3, #6
 80026e8:	60fb      	str	r3, [r7, #12]
        break;
 80026ea:	e00a      	b.n	8002702 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	09db      	lsrs	r3, r3, #7
 80026f0:	60fb      	str	r3, [r7, #12]
        break;
 80026f2:	e006      	b.n	8002702 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	0a1b      	lsrs	r3, r3, #8
 80026f8:	60fb      	str	r3, [r7, #12]
        break;
 80026fa:	e002      	b.n	8002702 <ADC_ConfigureBoostMode+0x14a>
        break;
 80026fc:	bf00      	nop
 80026fe:	e000      	b.n	8002702 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002700:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002702:	f7ff f861 	bl	80017c8 <HAL_GetREVID>
 8002706:	4603      	mov	r3, r0
 8002708:	f241 0203 	movw	r2, #4099	@ 0x1003
 800270c:	4293      	cmp	r3, r2
 800270e:	d815      	bhi.n	800273c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4a2b      	ldr	r2, [pc, #172]	@ (80027c0 <ADC_ConfigureBoostMode+0x208>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d908      	bls.n	800272a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002726:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002728:	e03e      	b.n	80027a8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002738:	609a      	str	r2, [r3, #8]
}
 800273a:	e035      	b.n	80027a8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	085b      	lsrs	r3, r3, #1
 8002740:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4a1f      	ldr	r2, [pc, #124]	@ (80027c4 <ADC_ConfigureBoostMode+0x20c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d808      	bhi.n	800275c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002758:	609a      	str	r2, [r3, #8]
}
 800275a:	e025      	b.n	80027a8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4a1a      	ldr	r2, [pc, #104]	@ (80027c8 <ADC_ConfigureBoostMode+0x210>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d80a      	bhi.n	800277a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002776:	609a      	str	r2, [r3, #8]
}
 8002778:	e016      	b.n	80027a8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4a13      	ldr	r2, [pc, #76]	@ (80027cc <ADC_ConfigureBoostMode+0x214>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d80a      	bhi.n	8002798 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002794:	609a      	str	r2, [r3, #8]
}
 8002796:	e007      	b.n	80027a8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80027a6:	609a      	str	r2, [r3, #8]
}
 80027a8:	bf00      	nop
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40022000 	.word	0x40022000
 80027b4:	40022100 	.word	0x40022100
 80027b8:	40022300 	.word	0x40022300
 80027bc:	58026300 	.word	0x58026300
 80027c0:	01312d00 	.word	0x01312d00
 80027c4:	005f5e10 	.word	0x005f5e10
 80027c8:	00bebc20 	.word	0x00bebc20
 80027cc:	017d7840 	.word	0x017d7840

080027d0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	77fb      	strb	r3, [r7, #31]
 80027ea:	e10e      	b.n	8002a0a <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80027f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027fa:	d102      	bne.n	8002802 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	77fb      	strb	r3, [r7, #31]
 8002800:	e103      	b.n	8002a0a <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7fe fd17 	bl	8001250 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8002836:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 800283c:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 8002842:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8002848:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800284e:	4313      	orrs	r3, r2
 8002850:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b6e      	ldr	r3, [pc, #440]	@ (8002a14 <HAL_COMP_Init+0x244>)
 800285a:	4013      	ands	r3, r2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	6979      	ldr	r1, [r7, #20]
 8002862:	430b      	orrs	r3, r1
 8002864:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b10      	cmp	r3, #16
 800286c:	d108      	bne.n	8002880 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0210 	orr.w	r2, r2, #16
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	e007      	b.n	8002890 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0210 	bic.w	r2, r2, #16
 800288e:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b00      	cmp	r3, #0
 800289c:	d016      	beq.n	80028cc <HAL_COMP_Init+0xfc>
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d013      	beq.n	80028cc <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028a4:	4b5c      	ldr	r3, [pc, #368]	@ (8002a18 <HAL_COMP_Init+0x248>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	099b      	lsrs	r3, r3, #6
 80028aa:	4a5c      	ldr	r2, [pc, #368]	@ (8002a1c <HAL_COMP_Init+0x24c>)
 80028ac:	fba2 2303 	umull	r2, r3, r2, r3
 80028b0:	099b      	lsrs	r3, r3, #6
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 80028be:	e002      	b.n	80028c6 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f9      	bne.n	80028c0 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a53      	ldr	r2, [pc, #332]	@ (8002a20 <HAL_COMP_Init+0x250>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d102      	bne.n	80028dc <HAL_COMP_Init+0x10c>
 80028d6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80028da:	e001      	b.n	80028e0 <HAL_COMP_Init+0x110>
 80028dc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80028e0:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d06d      	beq.n	80029ca <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d008      	beq.n	800290c <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 80028fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
 800290a:	e008      	b.n	800291e <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 800290c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	43db      	mvns	r3, r3
 8002916:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800291a:	4013      	ands	r3, r2
 800291c:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d008      	beq.n	800293c <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 800292a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	604b      	str	r3, [r1, #4]
 800293a:	e008      	b.n	800294e <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 800293c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	43db      	mvns	r3, r3
 8002946:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800294a:	4013      	ands	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 800294e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8002964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002968:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800296c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8002978:	e00a      	b.n	8002990 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 800297a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	43db      	mvns	r3, r3
 8002986:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800298a:	4013      	ands	r3, r2
 800298c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 800299c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80029a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 80029b0:	e021      	b.n	80029f6 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 80029b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	43db      	mvns	r3, r3
 80029be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029c2:	4013      	ands	r3, r2
 80029c4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 80029c8:	e015      	b.n	80029f6 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ce:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029da:	4013      	ands	r3, r2
 80029dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 80029e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029f0:	4013      	ands	r3, r2
 80029f2:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d103      	bne.n	8002a0a <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 8002a0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3720      	adds	r7, #32
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	f0e8cce1 	.word	0xf0e8cce1
 8002a18:	24000000 	.word	0x24000000
 8002a1c:	053e2d63 	.word	0x053e2d63
 8002a20:	5800380c 	.word	0x5800380c

08002a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a34:	4b0b      	ldr	r3, [pc, #44]	@ (8002a64 <__NVIC_SetPriorityGrouping+0x40>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a40:	4013      	ands	r3, r2
 8002a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a4c:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <__NVIC_SetPriorityGrouping+0x44>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a52:	4a04      	ldr	r2, [pc, #16]	@ (8002a64 <__NVIC_SetPriorityGrouping+0x40>)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	60d3      	str	r3, [r2, #12]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000ed00 	.word	0xe000ed00
 8002a68:	05fa0000 	.word	0x05fa0000

08002a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a70:	4b04      	ldr	r3, [pc, #16]	@ (8002a84 <__NVIC_GetPriorityGrouping+0x18>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	0a1b      	lsrs	r3, r3, #8
 8002a76:	f003 0307 	and.w	r3, r3, #7
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	db0b      	blt.n	8002ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	f003 021f 	and.w	r2, r3, #31
 8002aa0:	4907      	ldr	r1, [pc, #28]	@ (8002ac0 <__NVIC_EnableIRQ+0x38>)
 8002aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8002aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	e000e100 	.word	0xe000e100

08002ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	6039      	str	r1, [r7, #0]
 8002ace:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ad0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	db0a      	blt.n	8002aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	490c      	ldr	r1, [pc, #48]	@ (8002b10 <__NVIC_SetPriority+0x4c>)
 8002ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ae2:	0112      	lsls	r2, r2, #4
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aec:	e00a      	b.n	8002b04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	4908      	ldr	r1, [pc, #32]	@ (8002b14 <__NVIC_SetPriority+0x50>)
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	3b04      	subs	r3, #4
 8002afc:	0112      	lsls	r2, r2, #4
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	440b      	add	r3, r1
 8002b02:	761a      	strb	r2, [r3, #24]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000e100 	.word	0xe000e100
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b089      	sub	sp, #36	@ 0x24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f1c3 0307 	rsb	r3, r3, #7
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	bf28      	it	cs
 8002b36:	2304      	movcs	r3, #4
 8002b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	2b06      	cmp	r3, #6
 8002b40:	d902      	bls.n	8002b48 <NVIC_EncodePriority+0x30>
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3b03      	subs	r3, #3
 8002b46:	e000      	b.n	8002b4a <NVIC_EncodePriority+0x32>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43da      	mvns	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b60:	f04f 31ff 	mov.w	r1, #4294967295
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6a:	43d9      	mvns	r1, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	4313      	orrs	r3, r2
         );
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3724      	adds	r7, #36	@ 0x24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b90:	d301      	bcc.n	8002b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b92:	2301      	movs	r3, #1
 8002b94:	e00f      	b.n	8002bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b96:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc0 <SysTick_Config+0x40>)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b9e:	210f      	movs	r1, #15
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba4:	f7ff ff8e 	bl	8002ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba8:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <SysTick_Config+0x40>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bae:	4b04      	ldr	r3, [pc, #16]	@ (8002bc0 <SysTick_Config+0x40>)
 8002bb0:	2207      	movs	r2, #7
 8002bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	e000e010 	.word	0xe000e010

08002bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff ff29 	bl	8002a24 <__NVIC_SetPriorityGrouping>
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b086      	sub	sp, #24
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	4603      	mov	r3, r0
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002be8:	f7ff ff40 	bl	8002a6c <__NVIC_GetPriorityGrouping>
 8002bec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	6978      	ldr	r0, [r7, #20]
 8002bf4:	f7ff ff90 	bl	8002b18 <NVIC_EncodePriority>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ff5f 	bl	8002ac4 <__NVIC_SetPriority>
}
 8002c06:	bf00      	nop
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	4603      	mov	r3, r0
 8002c16:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff33 	bl	8002a88 <__NVIC_EnableIRQ>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ffa4 	bl	8002b80 <SysTick_Config>
 8002c38:	4603      	mov	r3, r0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e014      	b.n	8002c7e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	791b      	ldrb	r3, [r3, #4]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d105      	bne.n	8002c6a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7fe fb39 	bl	80012dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08a      	sub	sp, #40	@ 0x28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <HAL_DAC_ConfigChannel+0x1e>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e12a      	b.n	8002f00 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	795b      	ldrb	r3, [r3, #5]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <HAL_DAC_ConfigChannel+0x2e>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e124      	b.n	8002f00 <HAL_DAC_ConfigChannel+0x278>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d17a      	bne.n	8002dc0 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002cca:	f7fe fd71 	bl	80017b0 <HAL_GetTick>
 8002cce:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d13d      	bne.n	8002d52 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002cd6:	e018      	b.n	8002d0a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002cd8:	f7fe fd6a 	bl	80017b0 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d911      	bls.n	8002d0a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cec:	4b86      	ldr	r3, [pc, #536]	@ (8002f08 <HAL_DAC_ConfigChannel+0x280>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f043 0208 	orr.w	r2, r3, #8
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2203      	movs	r2, #3
 8002d04:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e0fa      	b.n	8002f00 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d10:	4b7d      	ldr	r3, [pc, #500]	@ (8002f08 <HAL_DAC_ConfigChannel+0x280>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1df      	bne.n	8002cd8 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	6992      	ldr	r2, [r2, #24]
 8002d20:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d22:	e020      	b.n	8002d66 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d24:	f7fe fd44 	bl	80017b0 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d90f      	bls.n	8002d52 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	da0a      	bge.n	8002d52 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	f043 0208 	orr.w	r2, r3, #8
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e0d6      	b.n	8002f00 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	dbe3      	blt.n	8002d24 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	6992      	ldr	r2, [r2, #24]
 8002d64:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	ea02 0103 	and.w	r1, r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	69da      	ldr	r2, [r3, #28]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	21ff      	movs	r1, #255	@ 0xff
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	ea02 0103 	and.w	r1, r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	6a1a      	ldr	r2, [r3, #32]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	409a      	lsls	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d11d      	bne.n	8002e04 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dce:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	221f      	movs	r2, #31
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	2207      	movs	r2, #7
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d102      	bne.n	8002e2e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e2c:	e00f      	b.n	8002e4e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d102      	bne.n	8002e3c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002e36:	2301      	movs	r3, #1
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e3a:	e008      	b.n	8002e4e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d102      	bne.n	8002e4a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002e44:	2301      	movs	r3, #1
 8002e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e48:	e001      	b.n	8002e4e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6819      	ldr	r1, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43da      	mvns	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	400a      	ands	r2, r1
 8002e94:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6819      	ldr	r1, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	22c0      	movs	r2, #192	@ 0xc0
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	400a      	ands	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002efc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3728      	adds	r7, #40	@ 0x28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20008000 	.word	0x20008000

08002f0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002f14:	f7fe fc4c 	bl	80017b0 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e316      	b.n	8003552 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a66      	ldr	r2, [pc, #408]	@ (80030c4 <HAL_DMA_Init+0x1b8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d04a      	beq.n	8002fc4 <HAL_DMA_Init+0xb8>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a65      	ldr	r2, [pc, #404]	@ (80030c8 <HAL_DMA_Init+0x1bc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d045      	beq.n	8002fc4 <HAL_DMA_Init+0xb8>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a63      	ldr	r2, [pc, #396]	@ (80030cc <HAL_DMA_Init+0x1c0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d040      	beq.n	8002fc4 <HAL_DMA_Init+0xb8>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a62      	ldr	r2, [pc, #392]	@ (80030d0 <HAL_DMA_Init+0x1c4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d03b      	beq.n	8002fc4 <HAL_DMA_Init+0xb8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a60      	ldr	r2, [pc, #384]	@ (80030d4 <HAL_DMA_Init+0x1c8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d036      	beq.n	8002fc4 <HAL_DMA_Init+0xb8>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a5f      	ldr	r2, [pc, #380]	@ (80030d8 <HAL_DMA_Init+0x1cc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d031      	beq.n	8002fc4 <HAL_DMA_Init+0xb8>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a5d      	ldr	r2, [pc, #372]	@ (80030dc <HAL_DMA_Init+0x1d0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d02c      	beq.n	8002fc4 <HAL_DMA_Init+0xb8>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a5c      	ldr	r2, [pc, #368]	@ (80030e0 <HAL_DMA_Init+0x1d4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d027      	beq.n	8002fc4 <HAL_DMA_Init+0xb8>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a5a      	ldr	r2, [pc, #360]	@ (80030e4 <HAL_DMA_Init+0x1d8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d022      	beq.n	8002fc4 <HAL_DMA_Init+0xb8>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a59      	ldr	r2, [pc, #356]	@ (80030e8 <HAL_DMA_Init+0x1dc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d01d      	beq.n	8002fc4 <HAL_DMA_Init+0xb8>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a57      	ldr	r2, [pc, #348]	@ (80030ec <HAL_DMA_Init+0x1e0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d018      	beq.n	8002fc4 <HAL_DMA_Init+0xb8>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a56      	ldr	r2, [pc, #344]	@ (80030f0 <HAL_DMA_Init+0x1e4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d013      	beq.n	8002fc4 <HAL_DMA_Init+0xb8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a54      	ldr	r2, [pc, #336]	@ (80030f4 <HAL_DMA_Init+0x1e8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00e      	beq.n	8002fc4 <HAL_DMA_Init+0xb8>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a53      	ldr	r2, [pc, #332]	@ (80030f8 <HAL_DMA_Init+0x1ec>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d009      	beq.n	8002fc4 <HAL_DMA_Init+0xb8>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a51      	ldr	r2, [pc, #324]	@ (80030fc <HAL_DMA_Init+0x1f0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <HAL_DMA_Init+0xb8>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a50      	ldr	r2, [pc, #320]	@ (8003100 <HAL_DMA_Init+0x1f4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d101      	bne.n	8002fc8 <HAL_DMA_Init+0xbc>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <HAL_DMA_Init+0xbe>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 813b 	beq.w	8003246 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a37      	ldr	r2, [pc, #220]	@ (80030c4 <HAL_DMA_Init+0x1b8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d04a      	beq.n	8003080 <HAL_DMA_Init+0x174>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a36      	ldr	r2, [pc, #216]	@ (80030c8 <HAL_DMA_Init+0x1bc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d045      	beq.n	8003080 <HAL_DMA_Init+0x174>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a34      	ldr	r2, [pc, #208]	@ (80030cc <HAL_DMA_Init+0x1c0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d040      	beq.n	8003080 <HAL_DMA_Init+0x174>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a33      	ldr	r2, [pc, #204]	@ (80030d0 <HAL_DMA_Init+0x1c4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d03b      	beq.n	8003080 <HAL_DMA_Init+0x174>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a31      	ldr	r2, [pc, #196]	@ (80030d4 <HAL_DMA_Init+0x1c8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d036      	beq.n	8003080 <HAL_DMA_Init+0x174>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a30      	ldr	r2, [pc, #192]	@ (80030d8 <HAL_DMA_Init+0x1cc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d031      	beq.n	8003080 <HAL_DMA_Init+0x174>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a2e      	ldr	r2, [pc, #184]	@ (80030dc <HAL_DMA_Init+0x1d0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d02c      	beq.n	8003080 <HAL_DMA_Init+0x174>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a2d      	ldr	r2, [pc, #180]	@ (80030e0 <HAL_DMA_Init+0x1d4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d027      	beq.n	8003080 <HAL_DMA_Init+0x174>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a2b      	ldr	r2, [pc, #172]	@ (80030e4 <HAL_DMA_Init+0x1d8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d022      	beq.n	8003080 <HAL_DMA_Init+0x174>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a2a      	ldr	r2, [pc, #168]	@ (80030e8 <HAL_DMA_Init+0x1dc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d01d      	beq.n	8003080 <HAL_DMA_Init+0x174>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a28      	ldr	r2, [pc, #160]	@ (80030ec <HAL_DMA_Init+0x1e0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d018      	beq.n	8003080 <HAL_DMA_Init+0x174>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a27      	ldr	r2, [pc, #156]	@ (80030f0 <HAL_DMA_Init+0x1e4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d013      	beq.n	8003080 <HAL_DMA_Init+0x174>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a25      	ldr	r2, [pc, #148]	@ (80030f4 <HAL_DMA_Init+0x1e8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00e      	beq.n	8003080 <HAL_DMA_Init+0x174>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a24      	ldr	r2, [pc, #144]	@ (80030f8 <HAL_DMA_Init+0x1ec>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d009      	beq.n	8003080 <HAL_DMA_Init+0x174>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a22      	ldr	r2, [pc, #136]	@ (80030fc <HAL_DMA_Init+0x1f0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d004      	beq.n	8003080 <HAL_DMA_Init+0x174>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a21      	ldr	r2, [pc, #132]	@ (8003100 <HAL_DMA_Init+0x1f4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d108      	bne.n	8003092 <HAL_DMA_Init+0x186>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0201 	bic.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	e007      	b.n	80030a2 <HAL_DMA_Init+0x196>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0201 	bic.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80030a2:	e02f      	b.n	8003104 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030a4:	f7fe fb84 	bl	80017b0 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b05      	cmp	r3, #5
 80030b0:	d928      	bls.n	8003104 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2203      	movs	r2, #3
 80030bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e246      	b.n	8003552 <HAL_DMA_Init+0x646>
 80030c4:	40020010 	.word	0x40020010
 80030c8:	40020028 	.word	0x40020028
 80030cc:	40020040 	.word	0x40020040
 80030d0:	40020058 	.word	0x40020058
 80030d4:	40020070 	.word	0x40020070
 80030d8:	40020088 	.word	0x40020088
 80030dc:	400200a0 	.word	0x400200a0
 80030e0:	400200b8 	.word	0x400200b8
 80030e4:	40020410 	.word	0x40020410
 80030e8:	40020428 	.word	0x40020428
 80030ec:	40020440 	.word	0x40020440
 80030f0:	40020458 	.word	0x40020458
 80030f4:	40020470 	.word	0x40020470
 80030f8:	40020488 	.word	0x40020488
 80030fc:	400204a0 	.word	0x400204a0
 8003100:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1c8      	bne.n	80030a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4b83      	ldr	r3, [pc, #524]	@ (800332c <HAL_DMA_Init+0x420>)
 800311e:	4013      	ands	r3, r2
 8003120:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800312a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003136:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003142:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	4313      	orrs	r3, r2
 800314e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003154:	2b04      	cmp	r3, #4
 8003156:	d107      	bne.n	8003168 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003160:	4313      	orrs	r3, r2
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003168:	4b71      	ldr	r3, [pc, #452]	@ (8003330 <HAL_DMA_Init+0x424>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4b71      	ldr	r3, [pc, #452]	@ (8003334 <HAL_DMA_Init+0x428>)
 800316e:	4013      	ands	r3, r2
 8003170:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003174:	d328      	bcc.n	80031c8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b28      	cmp	r3, #40	@ 0x28
 800317c:	d903      	bls.n	8003186 <HAL_DMA_Init+0x27a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b2e      	cmp	r3, #46	@ 0x2e
 8003184:	d917      	bls.n	80031b6 <HAL_DMA_Init+0x2aa>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b3e      	cmp	r3, #62	@ 0x3e
 800318c:	d903      	bls.n	8003196 <HAL_DMA_Init+0x28a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b42      	cmp	r3, #66	@ 0x42
 8003194:	d90f      	bls.n	80031b6 <HAL_DMA_Init+0x2aa>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b46      	cmp	r3, #70	@ 0x46
 800319c:	d903      	bls.n	80031a6 <HAL_DMA_Init+0x29a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b48      	cmp	r3, #72	@ 0x48
 80031a4:	d907      	bls.n	80031b6 <HAL_DMA_Init+0x2aa>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b4e      	cmp	r3, #78	@ 0x4e
 80031ac:	d905      	bls.n	80031ba <HAL_DMA_Init+0x2ae>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b52      	cmp	r3, #82	@ 0x52
 80031b4:	d801      	bhi.n	80031ba <HAL_DMA_Init+0x2ae>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <HAL_DMA_Init+0x2b0>
 80031ba:	2300      	movs	r3, #0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031c6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f023 0307 	bic.w	r3, r3, #7
 80031de:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d117      	bne.n	8003222 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00e      	beq.n	8003222 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f001 f9b9 	bl	800457c <DMA_CheckFifoParam>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2240      	movs	r2, #64	@ 0x40
 8003214:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e197      	b.n	8003552 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f001 f8f4 	bl	8004418 <DMA_CalcBaseAndBitshift>
 8003230:	4603      	mov	r3, r0
 8003232:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	223f      	movs	r2, #63	@ 0x3f
 800323e:	409a      	lsls	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	e0cd      	b.n	80033e2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a3b      	ldr	r2, [pc, #236]	@ (8003338 <HAL_DMA_Init+0x42c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d022      	beq.n	8003296 <HAL_DMA_Init+0x38a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a39      	ldr	r2, [pc, #228]	@ (800333c <HAL_DMA_Init+0x430>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d01d      	beq.n	8003296 <HAL_DMA_Init+0x38a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a38      	ldr	r2, [pc, #224]	@ (8003340 <HAL_DMA_Init+0x434>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d018      	beq.n	8003296 <HAL_DMA_Init+0x38a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a36      	ldr	r2, [pc, #216]	@ (8003344 <HAL_DMA_Init+0x438>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <HAL_DMA_Init+0x38a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a35      	ldr	r2, [pc, #212]	@ (8003348 <HAL_DMA_Init+0x43c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00e      	beq.n	8003296 <HAL_DMA_Init+0x38a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a33      	ldr	r2, [pc, #204]	@ (800334c <HAL_DMA_Init+0x440>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d009      	beq.n	8003296 <HAL_DMA_Init+0x38a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a32      	ldr	r2, [pc, #200]	@ (8003350 <HAL_DMA_Init+0x444>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d004      	beq.n	8003296 <HAL_DMA_Init+0x38a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a30      	ldr	r2, [pc, #192]	@ (8003354 <HAL_DMA_Init+0x448>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d101      	bne.n	800329a <HAL_DMA_Init+0x38e>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <HAL_DMA_Init+0x390>
 800329a:	2300      	movs	r3, #0
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 8097 	beq.w	80033d0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a24      	ldr	r2, [pc, #144]	@ (8003338 <HAL_DMA_Init+0x42c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d021      	beq.n	80032f0 <HAL_DMA_Init+0x3e4>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a22      	ldr	r2, [pc, #136]	@ (800333c <HAL_DMA_Init+0x430>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d01c      	beq.n	80032f0 <HAL_DMA_Init+0x3e4>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a21      	ldr	r2, [pc, #132]	@ (8003340 <HAL_DMA_Init+0x434>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d017      	beq.n	80032f0 <HAL_DMA_Init+0x3e4>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003344 <HAL_DMA_Init+0x438>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d012      	beq.n	80032f0 <HAL_DMA_Init+0x3e4>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003348 <HAL_DMA_Init+0x43c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00d      	beq.n	80032f0 <HAL_DMA_Init+0x3e4>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a1c      	ldr	r2, [pc, #112]	@ (800334c <HAL_DMA_Init+0x440>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d008      	beq.n	80032f0 <HAL_DMA_Init+0x3e4>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003350 <HAL_DMA_Init+0x444>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d003      	beq.n	80032f0 <HAL_DMA_Init+0x3e4>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a19      	ldr	r2, [pc, #100]	@ (8003354 <HAL_DMA_Init+0x448>)
 80032ee:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4b13      	ldr	r3, [pc, #76]	@ (8003358 <HAL_DMA_Init+0x44c>)
 800330c:	4013      	ands	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b40      	cmp	r3, #64	@ 0x40
 8003316:	d021      	beq.n	800335c <HAL_DMA_Init+0x450>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b80      	cmp	r3, #128	@ 0x80
 800331e:	d102      	bne.n	8003326 <HAL_DMA_Init+0x41a>
 8003320:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003324:	e01b      	b.n	800335e <HAL_DMA_Init+0x452>
 8003326:	2300      	movs	r3, #0
 8003328:	e019      	b.n	800335e <HAL_DMA_Init+0x452>
 800332a:	bf00      	nop
 800332c:	fe10803f 	.word	0xfe10803f
 8003330:	5c001000 	.word	0x5c001000
 8003334:	ffff0000 	.word	0xffff0000
 8003338:	58025408 	.word	0x58025408
 800333c:	5802541c 	.word	0x5802541c
 8003340:	58025430 	.word	0x58025430
 8003344:	58025444 	.word	0x58025444
 8003348:	58025458 	.word	0x58025458
 800334c:	5802546c 	.word	0x5802546c
 8003350:	58025480 	.word	0x58025480
 8003354:	58025494 	.word	0x58025494
 8003358:	fffe000f 	.word	0xfffe000f
 800335c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	68d2      	ldr	r2, [r2, #12]
 8003362:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003364:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800336c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003374:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800337c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003384:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800338c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	4b6e      	ldr	r3, [pc, #440]	@ (800355c <HAL_DMA_Init+0x650>)
 80033a4:	4413      	add	r3, r2
 80033a6:	4a6e      	ldr	r2, [pc, #440]	@ (8003560 <HAL_DMA_Init+0x654>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	009a      	lsls	r2, r3, #2
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f001 f82f 	bl	8004418 <DMA_CalcBaseAndBitshift>
 80033ba:	4603      	mov	r3, r0
 80033bc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c2:	f003 031f 	and.w	r3, r3, #31
 80033c6:	2201      	movs	r2, #1
 80033c8:	409a      	lsls	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	e008      	b.n	80033e2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2240      	movs	r2, #64	@ 0x40
 80033d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2203      	movs	r2, #3
 80033da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e0b7      	b.n	8003552 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a5f      	ldr	r2, [pc, #380]	@ (8003564 <HAL_DMA_Init+0x658>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d072      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a5d      	ldr	r2, [pc, #372]	@ (8003568 <HAL_DMA_Init+0x65c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d06d      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a5c      	ldr	r2, [pc, #368]	@ (800356c <HAL_DMA_Init+0x660>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d068      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a5a      	ldr	r2, [pc, #360]	@ (8003570 <HAL_DMA_Init+0x664>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d063      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a59      	ldr	r2, [pc, #356]	@ (8003574 <HAL_DMA_Init+0x668>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d05e      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a57      	ldr	r2, [pc, #348]	@ (8003578 <HAL_DMA_Init+0x66c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d059      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a56      	ldr	r2, [pc, #344]	@ (800357c <HAL_DMA_Init+0x670>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d054      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a54      	ldr	r2, [pc, #336]	@ (8003580 <HAL_DMA_Init+0x674>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d04f      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a53      	ldr	r2, [pc, #332]	@ (8003584 <HAL_DMA_Init+0x678>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d04a      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a51      	ldr	r2, [pc, #324]	@ (8003588 <HAL_DMA_Init+0x67c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d045      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a50      	ldr	r2, [pc, #320]	@ (800358c <HAL_DMA_Init+0x680>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d040      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a4e      	ldr	r2, [pc, #312]	@ (8003590 <HAL_DMA_Init+0x684>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d03b      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a4d      	ldr	r2, [pc, #308]	@ (8003594 <HAL_DMA_Init+0x688>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d036      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a4b      	ldr	r2, [pc, #300]	@ (8003598 <HAL_DMA_Init+0x68c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d031      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a4a      	ldr	r2, [pc, #296]	@ (800359c <HAL_DMA_Init+0x690>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d02c      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a48      	ldr	r2, [pc, #288]	@ (80035a0 <HAL_DMA_Init+0x694>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d027      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a47      	ldr	r2, [pc, #284]	@ (80035a4 <HAL_DMA_Init+0x698>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d022      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a45      	ldr	r2, [pc, #276]	@ (80035a8 <HAL_DMA_Init+0x69c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d01d      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a44      	ldr	r2, [pc, #272]	@ (80035ac <HAL_DMA_Init+0x6a0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d018      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a42      	ldr	r2, [pc, #264]	@ (80035b0 <HAL_DMA_Init+0x6a4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d013      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a41      	ldr	r2, [pc, #260]	@ (80035b4 <HAL_DMA_Init+0x6a8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00e      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a3f      	ldr	r2, [pc, #252]	@ (80035b8 <HAL_DMA_Init+0x6ac>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d009      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a3e      	ldr	r2, [pc, #248]	@ (80035bc <HAL_DMA_Init+0x6b0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d004      	beq.n	80034d2 <HAL_DMA_Init+0x5c6>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a3c      	ldr	r2, [pc, #240]	@ (80035c0 <HAL_DMA_Init+0x6b4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d101      	bne.n	80034d6 <HAL_DMA_Init+0x5ca>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <HAL_DMA_Init+0x5cc>
 80034d6:	2300      	movs	r3, #0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d032      	beq.n	8003542 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f001 f8c9 	bl	8004674 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b80      	cmp	r3, #128	@ 0x80
 80034e8:	d102      	bne.n	80034f0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003504:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d010      	beq.n	8003530 <HAL_DMA_Init+0x624>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b08      	cmp	r3, #8
 8003514:	d80c      	bhi.n	8003530 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f001 f946 	bl	80047a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	e008      	b.n	8003542 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	a7fdabf8 	.word	0xa7fdabf8
 8003560:	cccccccd 	.word	0xcccccccd
 8003564:	40020010 	.word	0x40020010
 8003568:	40020028 	.word	0x40020028
 800356c:	40020040 	.word	0x40020040
 8003570:	40020058 	.word	0x40020058
 8003574:	40020070 	.word	0x40020070
 8003578:	40020088 	.word	0x40020088
 800357c:	400200a0 	.word	0x400200a0
 8003580:	400200b8 	.word	0x400200b8
 8003584:	40020410 	.word	0x40020410
 8003588:	40020428 	.word	0x40020428
 800358c:	40020440 	.word	0x40020440
 8003590:	40020458 	.word	0x40020458
 8003594:	40020470 	.word	0x40020470
 8003598:	40020488 	.word	0x40020488
 800359c:	400204a0 	.word	0x400204a0
 80035a0:	400204b8 	.word	0x400204b8
 80035a4:	58025408 	.word	0x58025408
 80035a8:	5802541c 	.word	0x5802541c
 80035ac:	58025430 	.word	0x58025430
 80035b0:	58025444 	.word	0x58025444
 80035b4:	58025458 	.word	0x58025458
 80035b8:	5802546c 	.word	0x5802546c
 80035bc:	58025480 	.word	0x58025480
 80035c0:	58025494 	.word	0x58025494

080035c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08a      	sub	sp, #40	@ 0x28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035d0:	4b67      	ldr	r3, [pc, #412]	@ (8003770 <HAL_DMA_IRQHandler+0x1ac>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a67      	ldr	r2, [pc, #412]	@ (8003774 <HAL_DMA_IRQHandler+0x1b0>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	0a9b      	lsrs	r3, r3, #10
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003778 <HAL_DMA_IRQHandler+0x1b4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d04a      	beq.n	8003696 <HAL_DMA_IRQHandler+0xd2>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a5d      	ldr	r2, [pc, #372]	@ (800377c <HAL_DMA_IRQHandler+0x1b8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d045      	beq.n	8003696 <HAL_DMA_IRQHandler+0xd2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a5c      	ldr	r2, [pc, #368]	@ (8003780 <HAL_DMA_IRQHandler+0x1bc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d040      	beq.n	8003696 <HAL_DMA_IRQHandler+0xd2>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a5a      	ldr	r2, [pc, #360]	@ (8003784 <HAL_DMA_IRQHandler+0x1c0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d03b      	beq.n	8003696 <HAL_DMA_IRQHandler+0xd2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a59      	ldr	r2, [pc, #356]	@ (8003788 <HAL_DMA_IRQHandler+0x1c4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d036      	beq.n	8003696 <HAL_DMA_IRQHandler+0xd2>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a57      	ldr	r2, [pc, #348]	@ (800378c <HAL_DMA_IRQHandler+0x1c8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d031      	beq.n	8003696 <HAL_DMA_IRQHandler+0xd2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a56      	ldr	r2, [pc, #344]	@ (8003790 <HAL_DMA_IRQHandler+0x1cc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d02c      	beq.n	8003696 <HAL_DMA_IRQHandler+0xd2>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a54      	ldr	r2, [pc, #336]	@ (8003794 <HAL_DMA_IRQHandler+0x1d0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d027      	beq.n	8003696 <HAL_DMA_IRQHandler+0xd2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a53      	ldr	r2, [pc, #332]	@ (8003798 <HAL_DMA_IRQHandler+0x1d4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d022      	beq.n	8003696 <HAL_DMA_IRQHandler+0xd2>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a51      	ldr	r2, [pc, #324]	@ (800379c <HAL_DMA_IRQHandler+0x1d8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d01d      	beq.n	8003696 <HAL_DMA_IRQHandler+0xd2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a50      	ldr	r2, [pc, #320]	@ (80037a0 <HAL_DMA_IRQHandler+0x1dc>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d018      	beq.n	8003696 <HAL_DMA_IRQHandler+0xd2>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a4e      	ldr	r2, [pc, #312]	@ (80037a4 <HAL_DMA_IRQHandler+0x1e0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d013      	beq.n	8003696 <HAL_DMA_IRQHandler+0xd2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a4d      	ldr	r2, [pc, #308]	@ (80037a8 <HAL_DMA_IRQHandler+0x1e4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00e      	beq.n	8003696 <HAL_DMA_IRQHandler+0xd2>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a4b      	ldr	r2, [pc, #300]	@ (80037ac <HAL_DMA_IRQHandler+0x1e8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d009      	beq.n	8003696 <HAL_DMA_IRQHandler+0xd2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a4a      	ldr	r2, [pc, #296]	@ (80037b0 <HAL_DMA_IRQHandler+0x1ec>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d004      	beq.n	8003696 <HAL_DMA_IRQHandler+0xd2>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a48      	ldr	r2, [pc, #288]	@ (80037b4 <HAL_DMA_IRQHandler+0x1f0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d101      	bne.n	800369a <HAL_DMA_IRQHandler+0xd6>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <HAL_DMA_IRQHandler+0xd8>
 800369a:	2300      	movs	r3, #0
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 842b 	beq.w	8003ef8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a6:	f003 031f 	and.w	r3, r3, #31
 80036aa:	2208      	movs	r2, #8
 80036ac:	409a      	lsls	r2, r3
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	4013      	ands	r3, r2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80a2 	beq.w	80037fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a2e      	ldr	r2, [pc, #184]	@ (8003778 <HAL_DMA_IRQHandler+0x1b4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d04a      	beq.n	8003758 <HAL_DMA_IRQHandler+0x194>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a2d      	ldr	r2, [pc, #180]	@ (800377c <HAL_DMA_IRQHandler+0x1b8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d045      	beq.n	8003758 <HAL_DMA_IRQHandler+0x194>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003780 <HAL_DMA_IRQHandler+0x1bc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d040      	beq.n	8003758 <HAL_DMA_IRQHandler+0x194>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a2a      	ldr	r2, [pc, #168]	@ (8003784 <HAL_DMA_IRQHandler+0x1c0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d03b      	beq.n	8003758 <HAL_DMA_IRQHandler+0x194>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a28      	ldr	r2, [pc, #160]	@ (8003788 <HAL_DMA_IRQHandler+0x1c4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d036      	beq.n	8003758 <HAL_DMA_IRQHandler+0x194>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a27      	ldr	r2, [pc, #156]	@ (800378c <HAL_DMA_IRQHandler+0x1c8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d031      	beq.n	8003758 <HAL_DMA_IRQHandler+0x194>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a25      	ldr	r2, [pc, #148]	@ (8003790 <HAL_DMA_IRQHandler+0x1cc>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d02c      	beq.n	8003758 <HAL_DMA_IRQHandler+0x194>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a24      	ldr	r2, [pc, #144]	@ (8003794 <HAL_DMA_IRQHandler+0x1d0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d027      	beq.n	8003758 <HAL_DMA_IRQHandler+0x194>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a22      	ldr	r2, [pc, #136]	@ (8003798 <HAL_DMA_IRQHandler+0x1d4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d022      	beq.n	8003758 <HAL_DMA_IRQHandler+0x194>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a21      	ldr	r2, [pc, #132]	@ (800379c <HAL_DMA_IRQHandler+0x1d8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d01d      	beq.n	8003758 <HAL_DMA_IRQHandler+0x194>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a1f      	ldr	r2, [pc, #124]	@ (80037a0 <HAL_DMA_IRQHandler+0x1dc>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d018      	beq.n	8003758 <HAL_DMA_IRQHandler+0x194>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1e      	ldr	r2, [pc, #120]	@ (80037a4 <HAL_DMA_IRQHandler+0x1e0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d013      	beq.n	8003758 <HAL_DMA_IRQHandler+0x194>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1c      	ldr	r2, [pc, #112]	@ (80037a8 <HAL_DMA_IRQHandler+0x1e4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00e      	beq.n	8003758 <HAL_DMA_IRQHandler+0x194>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a1b      	ldr	r2, [pc, #108]	@ (80037ac <HAL_DMA_IRQHandler+0x1e8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d009      	beq.n	8003758 <HAL_DMA_IRQHandler+0x194>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a19      	ldr	r2, [pc, #100]	@ (80037b0 <HAL_DMA_IRQHandler+0x1ec>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d004      	beq.n	8003758 <HAL_DMA_IRQHandler+0x194>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a18      	ldr	r2, [pc, #96]	@ (80037b4 <HAL_DMA_IRQHandler+0x1f0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d12f      	bne.n	80037b8 <HAL_DMA_IRQHandler+0x1f4>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	bf14      	ite	ne
 8003766:	2301      	movne	r3, #1
 8003768:	2300      	moveq	r3, #0
 800376a:	b2db      	uxtb	r3, r3
 800376c:	e02e      	b.n	80037cc <HAL_DMA_IRQHandler+0x208>
 800376e:	bf00      	nop
 8003770:	24000000 	.word	0x24000000
 8003774:	1b4e81b5 	.word	0x1b4e81b5
 8003778:	40020010 	.word	0x40020010
 800377c:	40020028 	.word	0x40020028
 8003780:	40020040 	.word	0x40020040
 8003784:	40020058 	.word	0x40020058
 8003788:	40020070 	.word	0x40020070
 800378c:	40020088 	.word	0x40020088
 8003790:	400200a0 	.word	0x400200a0
 8003794:	400200b8 	.word	0x400200b8
 8003798:	40020410 	.word	0x40020410
 800379c:	40020428 	.word	0x40020428
 80037a0:	40020440 	.word	0x40020440
 80037a4:	40020458 	.word	0x40020458
 80037a8:	40020470 	.word	0x40020470
 80037ac:	40020488 	.word	0x40020488
 80037b0:	400204a0 	.word	0x400204a0
 80037b4:	400204b8 	.word	0x400204b8
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	bf14      	ite	ne
 80037c6:	2301      	movne	r3, #1
 80037c8:	2300      	moveq	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d015      	beq.n	80037fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0204 	bic.w	r2, r2, #4
 80037de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	2208      	movs	r2, #8
 80037ea:	409a      	lsls	r2, r3
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f4:	f043 0201 	orr.w	r2, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003800:	f003 031f 	and.w	r3, r3, #31
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	fa22 f303 	lsr.w	r3, r2, r3
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d06e      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a69      	ldr	r2, [pc, #420]	@ (80039bc <HAL_DMA_IRQHandler+0x3f8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d04a      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x2ee>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a67      	ldr	r2, [pc, #412]	@ (80039c0 <HAL_DMA_IRQHandler+0x3fc>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d045      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x2ee>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a66      	ldr	r2, [pc, #408]	@ (80039c4 <HAL_DMA_IRQHandler+0x400>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d040      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x2ee>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a64      	ldr	r2, [pc, #400]	@ (80039c8 <HAL_DMA_IRQHandler+0x404>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d03b      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x2ee>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a63      	ldr	r2, [pc, #396]	@ (80039cc <HAL_DMA_IRQHandler+0x408>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d036      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x2ee>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a61      	ldr	r2, [pc, #388]	@ (80039d0 <HAL_DMA_IRQHandler+0x40c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d031      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x2ee>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a60      	ldr	r2, [pc, #384]	@ (80039d4 <HAL_DMA_IRQHandler+0x410>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d02c      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x2ee>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a5e      	ldr	r2, [pc, #376]	@ (80039d8 <HAL_DMA_IRQHandler+0x414>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d027      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x2ee>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a5d      	ldr	r2, [pc, #372]	@ (80039dc <HAL_DMA_IRQHandler+0x418>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d022      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x2ee>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a5b      	ldr	r2, [pc, #364]	@ (80039e0 <HAL_DMA_IRQHandler+0x41c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d01d      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x2ee>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a5a      	ldr	r2, [pc, #360]	@ (80039e4 <HAL_DMA_IRQHandler+0x420>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d018      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x2ee>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a58      	ldr	r2, [pc, #352]	@ (80039e8 <HAL_DMA_IRQHandler+0x424>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x2ee>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a57      	ldr	r2, [pc, #348]	@ (80039ec <HAL_DMA_IRQHandler+0x428>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00e      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x2ee>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a55      	ldr	r2, [pc, #340]	@ (80039f0 <HAL_DMA_IRQHandler+0x42c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d009      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x2ee>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a54      	ldr	r2, [pc, #336]	@ (80039f4 <HAL_DMA_IRQHandler+0x430>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x2ee>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a52      	ldr	r2, [pc, #328]	@ (80039f8 <HAL_DMA_IRQHandler+0x434>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d10a      	bne.n	80038c8 <HAL_DMA_IRQHandler+0x304>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf14      	ite	ne
 80038c0:	2301      	movne	r3, #1
 80038c2:	2300      	moveq	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	e003      	b.n	80038d0 <HAL_DMA_IRQHandler+0x30c>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2300      	movs	r3, #0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00d      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	2201      	movs	r2, #1
 80038de:	409a      	lsls	r2, r3
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e8:	f043 0202 	orr.w	r2, r3, #2
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	2204      	movs	r2, #4
 80038fa:	409a      	lsls	r2, r3
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 808f 	beq.w	8003a24 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a2c      	ldr	r2, [pc, #176]	@ (80039bc <HAL_DMA_IRQHandler+0x3f8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d04a      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x3e2>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a2a      	ldr	r2, [pc, #168]	@ (80039c0 <HAL_DMA_IRQHandler+0x3fc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d045      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x3e2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a29      	ldr	r2, [pc, #164]	@ (80039c4 <HAL_DMA_IRQHandler+0x400>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d040      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x3e2>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a27      	ldr	r2, [pc, #156]	@ (80039c8 <HAL_DMA_IRQHandler+0x404>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d03b      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x3e2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a26      	ldr	r2, [pc, #152]	@ (80039cc <HAL_DMA_IRQHandler+0x408>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d036      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x3e2>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a24      	ldr	r2, [pc, #144]	@ (80039d0 <HAL_DMA_IRQHandler+0x40c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d031      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x3e2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a23      	ldr	r2, [pc, #140]	@ (80039d4 <HAL_DMA_IRQHandler+0x410>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d02c      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x3e2>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a21      	ldr	r2, [pc, #132]	@ (80039d8 <HAL_DMA_IRQHandler+0x414>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d027      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x3e2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a20      	ldr	r2, [pc, #128]	@ (80039dc <HAL_DMA_IRQHandler+0x418>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d022      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x3e2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a1e      	ldr	r2, [pc, #120]	@ (80039e0 <HAL_DMA_IRQHandler+0x41c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d01d      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x3e2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a1d      	ldr	r2, [pc, #116]	@ (80039e4 <HAL_DMA_IRQHandler+0x420>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d018      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x3e2>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a1b      	ldr	r2, [pc, #108]	@ (80039e8 <HAL_DMA_IRQHandler+0x424>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d013      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x3e2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1a      	ldr	r2, [pc, #104]	@ (80039ec <HAL_DMA_IRQHandler+0x428>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00e      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x3e2>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a18      	ldr	r2, [pc, #96]	@ (80039f0 <HAL_DMA_IRQHandler+0x42c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d009      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x3e2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a17      	ldr	r2, [pc, #92]	@ (80039f4 <HAL_DMA_IRQHandler+0x430>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d004      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x3e2>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a15      	ldr	r2, [pc, #84]	@ (80039f8 <HAL_DMA_IRQHandler+0x434>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d12a      	bne.n	80039fc <HAL_DMA_IRQHandler+0x438>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf14      	ite	ne
 80039b4:	2301      	movne	r3, #1
 80039b6:	2300      	moveq	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	e023      	b.n	8003a04 <HAL_DMA_IRQHandler+0x440>
 80039bc:	40020010 	.word	0x40020010
 80039c0:	40020028 	.word	0x40020028
 80039c4:	40020040 	.word	0x40020040
 80039c8:	40020058 	.word	0x40020058
 80039cc:	40020070 	.word	0x40020070
 80039d0:	40020088 	.word	0x40020088
 80039d4:	400200a0 	.word	0x400200a0
 80039d8:	400200b8 	.word	0x400200b8
 80039dc:	40020410 	.word	0x40020410
 80039e0:	40020428 	.word	0x40020428
 80039e4:	40020440 	.word	0x40020440
 80039e8:	40020458 	.word	0x40020458
 80039ec:	40020470 	.word	0x40020470
 80039f0:	40020488 	.word	0x40020488
 80039f4:	400204a0 	.word	0x400204a0
 80039f8:	400204b8 	.word	0x400204b8
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2300      	movs	r3, #0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00d      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	2204      	movs	r2, #4
 8003a12:	409a      	lsls	r2, r3
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a1c:	f043 0204 	orr.w	r2, r3, #4
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	2210      	movs	r2, #16
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80a6 	beq.w	8003b86 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a85      	ldr	r2, [pc, #532]	@ (8003c54 <HAL_DMA_IRQHandler+0x690>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d04a      	beq.n	8003ada <HAL_DMA_IRQHandler+0x516>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a83      	ldr	r2, [pc, #524]	@ (8003c58 <HAL_DMA_IRQHandler+0x694>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d045      	beq.n	8003ada <HAL_DMA_IRQHandler+0x516>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a82      	ldr	r2, [pc, #520]	@ (8003c5c <HAL_DMA_IRQHandler+0x698>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d040      	beq.n	8003ada <HAL_DMA_IRQHandler+0x516>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a80      	ldr	r2, [pc, #512]	@ (8003c60 <HAL_DMA_IRQHandler+0x69c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d03b      	beq.n	8003ada <HAL_DMA_IRQHandler+0x516>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a7f      	ldr	r2, [pc, #508]	@ (8003c64 <HAL_DMA_IRQHandler+0x6a0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d036      	beq.n	8003ada <HAL_DMA_IRQHandler+0x516>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a7d      	ldr	r2, [pc, #500]	@ (8003c68 <HAL_DMA_IRQHandler+0x6a4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d031      	beq.n	8003ada <HAL_DMA_IRQHandler+0x516>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a7c      	ldr	r2, [pc, #496]	@ (8003c6c <HAL_DMA_IRQHandler+0x6a8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d02c      	beq.n	8003ada <HAL_DMA_IRQHandler+0x516>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a7a      	ldr	r2, [pc, #488]	@ (8003c70 <HAL_DMA_IRQHandler+0x6ac>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d027      	beq.n	8003ada <HAL_DMA_IRQHandler+0x516>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a79      	ldr	r2, [pc, #484]	@ (8003c74 <HAL_DMA_IRQHandler+0x6b0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d022      	beq.n	8003ada <HAL_DMA_IRQHandler+0x516>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a77      	ldr	r2, [pc, #476]	@ (8003c78 <HAL_DMA_IRQHandler+0x6b4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d01d      	beq.n	8003ada <HAL_DMA_IRQHandler+0x516>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a76      	ldr	r2, [pc, #472]	@ (8003c7c <HAL_DMA_IRQHandler+0x6b8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d018      	beq.n	8003ada <HAL_DMA_IRQHandler+0x516>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a74      	ldr	r2, [pc, #464]	@ (8003c80 <HAL_DMA_IRQHandler+0x6bc>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <HAL_DMA_IRQHandler+0x516>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a73      	ldr	r2, [pc, #460]	@ (8003c84 <HAL_DMA_IRQHandler+0x6c0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00e      	beq.n	8003ada <HAL_DMA_IRQHandler+0x516>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a71      	ldr	r2, [pc, #452]	@ (8003c88 <HAL_DMA_IRQHandler+0x6c4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d009      	beq.n	8003ada <HAL_DMA_IRQHandler+0x516>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a70      	ldr	r2, [pc, #448]	@ (8003c8c <HAL_DMA_IRQHandler+0x6c8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d004      	beq.n	8003ada <HAL_DMA_IRQHandler+0x516>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a6e      	ldr	r2, [pc, #440]	@ (8003c90 <HAL_DMA_IRQHandler+0x6cc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d10a      	bne.n	8003af0 <HAL_DMA_IRQHandler+0x52c>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	bf14      	ite	ne
 8003ae8:	2301      	movne	r3, #1
 8003aea:	2300      	moveq	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	e009      	b.n	8003b04 <HAL_DMA_IRQHandler+0x540>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bf14      	ite	ne
 8003afe:	2301      	movne	r3, #1
 8003b00:	2300      	moveq	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d03e      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	2210      	movs	r2, #16
 8003b12:	409a      	lsls	r2, r3
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d018      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d108      	bne.n	8003b46 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d024      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	4798      	blx	r3
 8003b44:	e01f      	b.n	8003b86 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01b      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	4798      	blx	r3
 8003b56:	e016      	b.n	8003b86 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d107      	bne.n	8003b76 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0208 	bic.w	r2, r2, #8
 8003b74:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	2220      	movs	r2, #32
 8003b90:	409a      	lsls	r2, r3
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 8110 	beq.w	8003dbc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2c      	ldr	r2, [pc, #176]	@ (8003c54 <HAL_DMA_IRQHandler+0x690>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d04a      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x678>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a2b      	ldr	r2, [pc, #172]	@ (8003c58 <HAL_DMA_IRQHandler+0x694>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d045      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x678>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a29      	ldr	r2, [pc, #164]	@ (8003c5c <HAL_DMA_IRQHandler+0x698>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d040      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x678>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a28      	ldr	r2, [pc, #160]	@ (8003c60 <HAL_DMA_IRQHandler+0x69c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d03b      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x678>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a26      	ldr	r2, [pc, #152]	@ (8003c64 <HAL_DMA_IRQHandler+0x6a0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d036      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x678>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a25      	ldr	r2, [pc, #148]	@ (8003c68 <HAL_DMA_IRQHandler+0x6a4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d031      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x678>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a23      	ldr	r2, [pc, #140]	@ (8003c6c <HAL_DMA_IRQHandler+0x6a8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d02c      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x678>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a22      	ldr	r2, [pc, #136]	@ (8003c70 <HAL_DMA_IRQHandler+0x6ac>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d027      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x678>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a20      	ldr	r2, [pc, #128]	@ (8003c74 <HAL_DMA_IRQHandler+0x6b0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d022      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x678>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8003c78 <HAL_DMA_IRQHandler+0x6b4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d01d      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x678>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1d      	ldr	r2, [pc, #116]	@ (8003c7c <HAL_DMA_IRQHandler+0x6b8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d018      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x678>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8003c80 <HAL_DMA_IRQHandler+0x6bc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d013      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x678>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1a      	ldr	r2, [pc, #104]	@ (8003c84 <HAL_DMA_IRQHandler+0x6c0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d00e      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x678>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a19      	ldr	r2, [pc, #100]	@ (8003c88 <HAL_DMA_IRQHandler+0x6c4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d009      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x678>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a17      	ldr	r2, [pc, #92]	@ (8003c8c <HAL_DMA_IRQHandler+0x6c8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d004      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x678>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a16      	ldr	r2, [pc, #88]	@ (8003c90 <HAL_DMA_IRQHandler+0x6cc>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d12b      	bne.n	8003c94 <HAL_DMA_IRQHandler+0x6d0>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0310 	and.w	r3, r3, #16
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	bf14      	ite	ne
 8003c4a:	2301      	movne	r3, #1
 8003c4c:	2300      	moveq	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	e02a      	b.n	8003ca8 <HAL_DMA_IRQHandler+0x6e4>
 8003c52:	bf00      	nop
 8003c54:	40020010 	.word	0x40020010
 8003c58:	40020028 	.word	0x40020028
 8003c5c:	40020040 	.word	0x40020040
 8003c60:	40020058 	.word	0x40020058
 8003c64:	40020070 	.word	0x40020070
 8003c68:	40020088 	.word	0x40020088
 8003c6c:	400200a0 	.word	0x400200a0
 8003c70:	400200b8 	.word	0x400200b8
 8003c74:	40020410 	.word	0x40020410
 8003c78:	40020428 	.word	0x40020428
 8003c7c:	40020440 	.word	0x40020440
 8003c80:	40020458 	.word	0x40020458
 8003c84:	40020470 	.word	0x40020470
 8003c88:	40020488 	.word	0x40020488
 8003c8c:	400204a0 	.word	0x400204a0
 8003c90:	400204b8 	.word	0x400204b8
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	bf14      	ite	ne
 8003ca2:	2301      	movne	r3, #1
 8003ca4:	2300      	moveq	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8087 	beq.w	8003dbc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb2:	f003 031f 	and.w	r3, r3, #31
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d139      	bne.n	8003d3e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0216 	bic.w	r2, r2, #22
 8003cd8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695a      	ldr	r2, [r3, #20]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ce8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d103      	bne.n	8003cfa <HAL_DMA_IRQHandler+0x736>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d007      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0208 	bic.w	r2, r2, #8
 8003d08:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d0e:	f003 031f 	and.w	r3, r3, #31
 8003d12:	223f      	movs	r2, #63	@ 0x3f
 8003d14:	409a      	lsls	r2, r3
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 834a 	beq.w	80043c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	4798      	blx	r3
          }
          return;
 8003d3c:	e344      	b.n	80043c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d018      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d108      	bne.n	8003d6c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d02c      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	4798      	blx	r3
 8003d6a:	e027      	b.n	8003dbc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d023      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	4798      	blx	r3
 8003d7c:	e01e      	b.n	8003dbc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10f      	bne.n	8003dac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0210 	bic.w	r2, r2, #16
 8003d9a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8306 	beq.w	80043d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 8088 	beq.w	8003ee4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a7a      	ldr	r2, [pc, #488]	@ (8003fcc <HAL_DMA_IRQHandler+0xa08>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d04a      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x8b8>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a79      	ldr	r2, [pc, #484]	@ (8003fd0 <HAL_DMA_IRQHandler+0xa0c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d045      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x8b8>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a77      	ldr	r2, [pc, #476]	@ (8003fd4 <HAL_DMA_IRQHandler+0xa10>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d040      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x8b8>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a76      	ldr	r2, [pc, #472]	@ (8003fd8 <HAL_DMA_IRQHandler+0xa14>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d03b      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x8b8>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a74      	ldr	r2, [pc, #464]	@ (8003fdc <HAL_DMA_IRQHandler+0xa18>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d036      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x8b8>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a73      	ldr	r2, [pc, #460]	@ (8003fe0 <HAL_DMA_IRQHandler+0xa1c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d031      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x8b8>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a71      	ldr	r2, [pc, #452]	@ (8003fe4 <HAL_DMA_IRQHandler+0xa20>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d02c      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x8b8>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a70      	ldr	r2, [pc, #448]	@ (8003fe8 <HAL_DMA_IRQHandler+0xa24>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d027      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x8b8>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a6e      	ldr	r2, [pc, #440]	@ (8003fec <HAL_DMA_IRQHandler+0xa28>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d022      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x8b8>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a6d      	ldr	r2, [pc, #436]	@ (8003ff0 <HAL_DMA_IRQHandler+0xa2c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d01d      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x8b8>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a6b      	ldr	r2, [pc, #428]	@ (8003ff4 <HAL_DMA_IRQHandler+0xa30>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d018      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x8b8>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a6a      	ldr	r2, [pc, #424]	@ (8003ff8 <HAL_DMA_IRQHandler+0xa34>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d013      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x8b8>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a68      	ldr	r2, [pc, #416]	@ (8003ffc <HAL_DMA_IRQHandler+0xa38>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00e      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x8b8>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a67      	ldr	r2, [pc, #412]	@ (8004000 <HAL_DMA_IRQHandler+0xa3c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d009      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x8b8>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a65      	ldr	r2, [pc, #404]	@ (8004004 <HAL_DMA_IRQHandler+0xa40>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d004      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x8b8>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a64      	ldr	r2, [pc, #400]	@ (8004008 <HAL_DMA_IRQHandler+0xa44>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d108      	bne.n	8003e8e <HAL_DMA_IRQHandler+0x8ca>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0201 	bic.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e007      	b.n	8003e9e <HAL_DMA_IRQHandler+0x8da>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0201 	bic.w	r2, r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d307      	bcc.n	8003eba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f2      	bne.n	8003e9e <HAL_DMA_IRQHandler+0x8da>
 8003eb8:	e000      	b.n	8003ebc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003eba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d004      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2203      	movs	r2, #3
 8003ece:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003ed2:	e003      	b.n	8003edc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 8272 	beq.w	80043d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	4798      	blx	r3
 8003ef6:	e26c      	b.n	80043d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a43      	ldr	r2, [pc, #268]	@ (800400c <HAL_DMA_IRQHandler+0xa48>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d022      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x984>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a42      	ldr	r2, [pc, #264]	@ (8004010 <HAL_DMA_IRQHandler+0xa4c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d01d      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x984>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a40      	ldr	r2, [pc, #256]	@ (8004014 <HAL_DMA_IRQHandler+0xa50>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d018      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x984>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a3f      	ldr	r2, [pc, #252]	@ (8004018 <HAL_DMA_IRQHandler+0xa54>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d013      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x984>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a3d      	ldr	r2, [pc, #244]	@ (800401c <HAL_DMA_IRQHandler+0xa58>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00e      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x984>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a3c      	ldr	r2, [pc, #240]	@ (8004020 <HAL_DMA_IRQHandler+0xa5c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d009      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x984>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a3a      	ldr	r2, [pc, #232]	@ (8004024 <HAL_DMA_IRQHandler+0xa60>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d004      	beq.n	8003f48 <HAL_DMA_IRQHandler+0x984>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a39      	ldr	r2, [pc, #228]	@ (8004028 <HAL_DMA_IRQHandler+0xa64>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d101      	bne.n	8003f4c <HAL_DMA_IRQHandler+0x988>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <HAL_DMA_IRQHandler+0x98a>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 823f 	beq.w	80043d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	2204      	movs	r2, #4
 8003f66:	409a      	lsls	r2, r3
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80cd 	beq.w	800410c <HAL_DMA_IRQHandler+0xb48>
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 80c7 	beq.w	800410c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	2204      	movs	r2, #4
 8003f88:	409a      	lsls	r2, r3
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d049      	beq.n	800402c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d109      	bne.n	8003fb6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8210 	beq.w	80043cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fb4:	e20a      	b.n	80043cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 8206 	beq.w	80043cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fc8:	e200      	b.n	80043cc <HAL_DMA_IRQHandler+0xe08>
 8003fca:	bf00      	nop
 8003fcc:	40020010 	.word	0x40020010
 8003fd0:	40020028 	.word	0x40020028
 8003fd4:	40020040 	.word	0x40020040
 8003fd8:	40020058 	.word	0x40020058
 8003fdc:	40020070 	.word	0x40020070
 8003fe0:	40020088 	.word	0x40020088
 8003fe4:	400200a0 	.word	0x400200a0
 8003fe8:	400200b8 	.word	0x400200b8
 8003fec:	40020410 	.word	0x40020410
 8003ff0:	40020428 	.word	0x40020428
 8003ff4:	40020440 	.word	0x40020440
 8003ff8:	40020458 	.word	0x40020458
 8003ffc:	40020470 	.word	0x40020470
 8004000:	40020488 	.word	0x40020488
 8004004:	400204a0 	.word	0x400204a0
 8004008:	400204b8 	.word	0x400204b8
 800400c:	58025408 	.word	0x58025408
 8004010:	5802541c 	.word	0x5802541c
 8004014:	58025430 	.word	0x58025430
 8004018:	58025444 	.word	0x58025444
 800401c:	58025458 	.word	0x58025458
 8004020:	5802546c 	.word	0x5802546c
 8004024:	58025480 	.word	0x58025480
 8004028:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d160      	bne.n	80040f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a7f      	ldr	r2, [pc, #508]	@ (8004238 <HAL_DMA_IRQHandler+0xc74>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d04a      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xb12>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a7d      	ldr	r2, [pc, #500]	@ (800423c <HAL_DMA_IRQHandler+0xc78>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d045      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xb12>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a7c      	ldr	r2, [pc, #496]	@ (8004240 <HAL_DMA_IRQHandler+0xc7c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d040      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xb12>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a7a      	ldr	r2, [pc, #488]	@ (8004244 <HAL_DMA_IRQHandler+0xc80>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d03b      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xb12>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a79      	ldr	r2, [pc, #484]	@ (8004248 <HAL_DMA_IRQHandler+0xc84>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d036      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xb12>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a77      	ldr	r2, [pc, #476]	@ (800424c <HAL_DMA_IRQHandler+0xc88>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d031      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xb12>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a76      	ldr	r2, [pc, #472]	@ (8004250 <HAL_DMA_IRQHandler+0xc8c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d02c      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xb12>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a74      	ldr	r2, [pc, #464]	@ (8004254 <HAL_DMA_IRQHandler+0xc90>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d027      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xb12>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a73      	ldr	r2, [pc, #460]	@ (8004258 <HAL_DMA_IRQHandler+0xc94>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d022      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xb12>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a71      	ldr	r2, [pc, #452]	@ (800425c <HAL_DMA_IRQHandler+0xc98>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d01d      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xb12>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a70      	ldr	r2, [pc, #448]	@ (8004260 <HAL_DMA_IRQHandler+0xc9c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d018      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xb12>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a6e      	ldr	r2, [pc, #440]	@ (8004264 <HAL_DMA_IRQHandler+0xca0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d013      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xb12>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a6d      	ldr	r2, [pc, #436]	@ (8004268 <HAL_DMA_IRQHandler+0xca4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00e      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xb12>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a6b      	ldr	r2, [pc, #428]	@ (800426c <HAL_DMA_IRQHandler+0xca8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d009      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xb12>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a6a      	ldr	r2, [pc, #424]	@ (8004270 <HAL_DMA_IRQHandler+0xcac>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d004      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xb12>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a68      	ldr	r2, [pc, #416]	@ (8004274 <HAL_DMA_IRQHandler+0xcb0>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d108      	bne.n	80040e8 <HAL_DMA_IRQHandler+0xb24>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0208 	bic.w	r2, r2, #8
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	e007      	b.n	80040f8 <HAL_DMA_IRQHandler+0xb34>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0204 	bic.w	r2, r2, #4
 80040f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 8165 	beq.w	80043cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800410a:	e15f      	b.n	80043cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	2202      	movs	r2, #2
 8004116:	409a      	lsls	r2, r3
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	4013      	ands	r3, r2
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 80c5 	beq.w	80042ac <HAL_DMA_IRQHandler+0xce8>
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 80bf 	beq.w	80042ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004132:	f003 031f 	and.w	r3, r3, #31
 8004136:	2202      	movs	r2, #2
 8004138:	409a      	lsls	r2, r3
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d018      	beq.n	800417a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 813a 	beq.w	80043d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004164:	e134      	b.n	80043d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 8130 	beq.w	80043d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004178:	e12a      	b.n	80043d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f003 0320 	and.w	r3, r3, #32
 8004180:	2b00      	cmp	r3, #0
 8004182:	f040 8089 	bne.w	8004298 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a2b      	ldr	r2, [pc, #172]	@ (8004238 <HAL_DMA_IRQHandler+0xc74>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d04a      	beq.n	8004226 <HAL_DMA_IRQHandler+0xc62>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a29      	ldr	r2, [pc, #164]	@ (800423c <HAL_DMA_IRQHandler+0xc78>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d045      	beq.n	8004226 <HAL_DMA_IRQHandler+0xc62>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a28      	ldr	r2, [pc, #160]	@ (8004240 <HAL_DMA_IRQHandler+0xc7c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d040      	beq.n	8004226 <HAL_DMA_IRQHandler+0xc62>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a26      	ldr	r2, [pc, #152]	@ (8004244 <HAL_DMA_IRQHandler+0xc80>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d03b      	beq.n	8004226 <HAL_DMA_IRQHandler+0xc62>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a25      	ldr	r2, [pc, #148]	@ (8004248 <HAL_DMA_IRQHandler+0xc84>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d036      	beq.n	8004226 <HAL_DMA_IRQHandler+0xc62>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a23      	ldr	r2, [pc, #140]	@ (800424c <HAL_DMA_IRQHandler+0xc88>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d031      	beq.n	8004226 <HAL_DMA_IRQHandler+0xc62>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a22      	ldr	r2, [pc, #136]	@ (8004250 <HAL_DMA_IRQHandler+0xc8c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d02c      	beq.n	8004226 <HAL_DMA_IRQHandler+0xc62>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a20      	ldr	r2, [pc, #128]	@ (8004254 <HAL_DMA_IRQHandler+0xc90>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d027      	beq.n	8004226 <HAL_DMA_IRQHandler+0xc62>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1f      	ldr	r2, [pc, #124]	@ (8004258 <HAL_DMA_IRQHandler+0xc94>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d022      	beq.n	8004226 <HAL_DMA_IRQHandler+0xc62>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1d      	ldr	r2, [pc, #116]	@ (800425c <HAL_DMA_IRQHandler+0xc98>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01d      	beq.n	8004226 <HAL_DMA_IRQHandler+0xc62>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004260 <HAL_DMA_IRQHandler+0xc9c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d018      	beq.n	8004226 <HAL_DMA_IRQHandler+0xc62>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1a      	ldr	r2, [pc, #104]	@ (8004264 <HAL_DMA_IRQHandler+0xca0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <HAL_DMA_IRQHandler+0xc62>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a19      	ldr	r2, [pc, #100]	@ (8004268 <HAL_DMA_IRQHandler+0xca4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00e      	beq.n	8004226 <HAL_DMA_IRQHandler+0xc62>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a17      	ldr	r2, [pc, #92]	@ (800426c <HAL_DMA_IRQHandler+0xca8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d009      	beq.n	8004226 <HAL_DMA_IRQHandler+0xc62>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a16      	ldr	r2, [pc, #88]	@ (8004270 <HAL_DMA_IRQHandler+0xcac>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_DMA_IRQHandler+0xc62>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a14      	ldr	r2, [pc, #80]	@ (8004274 <HAL_DMA_IRQHandler+0xcb0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d128      	bne.n	8004278 <HAL_DMA_IRQHandler+0xcb4>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0214 	bic.w	r2, r2, #20
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	e027      	b.n	8004288 <HAL_DMA_IRQHandler+0xcc4>
 8004238:	40020010 	.word	0x40020010
 800423c:	40020028 	.word	0x40020028
 8004240:	40020040 	.word	0x40020040
 8004244:	40020058 	.word	0x40020058
 8004248:	40020070 	.word	0x40020070
 800424c:	40020088 	.word	0x40020088
 8004250:	400200a0 	.word	0x400200a0
 8004254:	400200b8 	.word	0x400200b8
 8004258:	40020410 	.word	0x40020410
 800425c:	40020428 	.word	0x40020428
 8004260:	40020440 	.word	0x40020440
 8004264:	40020458 	.word	0x40020458
 8004268:	40020470 	.word	0x40020470
 800426c:	40020488 	.word	0x40020488
 8004270:	400204a0 	.word	0x400204a0
 8004274:	400204b8 	.word	0x400204b8
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 020a 	bic.w	r2, r2, #10
 8004286:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8097 	beq.w	80043d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042aa:	e091      	b.n	80043d0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	2208      	movs	r2, #8
 80042b6:	409a      	lsls	r2, r3
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 8088 	beq.w	80043d2 <HAL_DMA_IRQHandler+0xe0e>
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 8082 	beq.w	80043d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a41      	ldr	r2, [pc, #260]	@ (80043d8 <HAL_DMA_IRQHandler+0xe14>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d04a      	beq.n	800436e <HAL_DMA_IRQHandler+0xdaa>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a3f      	ldr	r2, [pc, #252]	@ (80043dc <HAL_DMA_IRQHandler+0xe18>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d045      	beq.n	800436e <HAL_DMA_IRQHandler+0xdaa>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a3e      	ldr	r2, [pc, #248]	@ (80043e0 <HAL_DMA_IRQHandler+0xe1c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d040      	beq.n	800436e <HAL_DMA_IRQHandler+0xdaa>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a3c      	ldr	r2, [pc, #240]	@ (80043e4 <HAL_DMA_IRQHandler+0xe20>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d03b      	beq.n	800436e <HAL_DMA_IRQHandler+0xdaa>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a3b      	ldr	r2, [pc, #236]	@ (80043e8 <HAL_DMA_IRQHandler+0xe24>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d036      	beq.n	800436e <HAL_DMA_IRQHandler+0xdaa>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a39      	ldr	r2, [pc, #228]	@ (80043ec <HAL_DMA_IRQHandler+0xe28>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d031      	beq.n	800436e <HAL_DMA_IRQHandler+0xdaa>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a38      	ldr	r2, [pc, #224]	@ (80043f0 <HAL_DMA_IRQHandler+0xe2c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d02c      	beq.n	800436e <HAL_DMA_IRQHandler+0xdaa>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a36      	ldr	r2, [pc, #216]	@ (80043f4 <HAL_DMA_IRQHandler+0xe30>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d027      	beq.n	800436e <HAL_DMA_IRQHandler+0xdaa>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a35      	ldr	r2, [pc, #212]	@ (80043f8 <HAL_DMA_IRQHandler+0xe34>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d022      	beq.n	800436e <HAL_DMA_IRQHandler+0xdaa>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a33      	ldr	r2, [pc, #204]	@ (80043fc <HAL_DMA_IRQHandler+0xe38>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d01d      	beq.n	800436e <HAL_DMA_IRQHandler+0xdaa>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a32      	ldr	r2, [pc, #200]	@ (8004400 <HAL_DMA_IRQHandler+0xe3c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d018      	beq.n	800436e <HAL_DMA_IRQHandler+0xdaa>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a30      	ldr	r2, [pc, #192]	@ (8004404 <HAL_DMA_IRQHandler+0xe40>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d013      	beq.n	800436e <HAL_DMA_IRQHandler+0xdaa>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a2f      	ldr	r2, [pc, #188]	@ (8004408 <HAL_DMA_IRQHandler+0xe44>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00e      	beq.n	800436e <HAL_DMA_IRQHandler+0xdaa>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a2d      	ldr	r2, [pc, #180]	@ (800440c <HAL_DMA_IRQHandler+0xe48>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d009      	beq.n	800436e <HAL_DMA_IRQHandler+0xdaa>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a2c      	ldr	r2, [pc, #176]	@ (8004410 <HAL_DMA_IRQHandler+0xe4c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d004      	beq.n	800436e <HAL_DMA_IRQHandler+0xdaa>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a2a      	ldr	r2, [pc, #168]	@ (8004414 <HAL_DMA_IRQHandler+0xe50>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d108      	bne.n	8004380 <HAL_DMA_IRQHandler+0xdbc>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 021c 	bic.w	r2, r2, #28
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	e007      	b.n	8004390 <HAL_DMA_IRQHandler+0xdcc>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 020e 	bic.w	r2, r2, #14
 800438e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004394:	f003 031f 	and.w	r3, r3, #31
 8004398:	2201      	movs	r2, #1
 800439a:	409a      	lsls	r2, r3
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d009      	beq.n	80043d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	4798      	blx	r3
 80043c6:	e004      	b.n	80043d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80043c8:	bf00      	nop
 80043ca:	e002      	b.n	80043d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043cc:	bf00      	nop
 80043ce:	e000      	b.n	80043d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80043d2:	3728      	adds	r7, #40	@ 0x28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40020010 	.word	0x40020010
 80043dc:	40020028 	.word	0x40020028
 80043e0:	40020040 	.word	0x40020040
 80043e4:	40020058 	.word	0x40020058
 80043e8:	40020070 	.word	0x40020070
 80043ec:	40020088 	.word	0x40020088
 80043f0:	400200a0 	.word	0x400200a0
 80043f4:	400200b8 	.word	0x400200b8
 80043f8:	40020410 	.word	0x40020410
 80043fc:	40020428 	.word	0x40020428
 8004400:	40020440 	.word	0x40020440
 8004404:	40020458 	.word	0x40020458
 8004408:	40020470 	.word	0x40020470
 800440c:	40020488 	.word	0x40020488
 8004410:	400204a0 	.word	0x400204a0
 8004414:	400204b8 	.word	0x400204b8

08004418 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a42      	ldr	r2, [pc, #264]	@ (8004530 <DMA_CalcBaseAndBitshift+0x118>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d04a      	beq.n	80044c0 <DMA_CalcBaseAndBitshift+0xa8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a41      	ldr	r2, [pc, #260]	@ (8004534 <DMA_CalcBaseAndBitshift+0x11c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d045      	beq.n	80044c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a3f      	ldr	r2, [pc, #252]	@ (8004538 <DMA_CalcBaseAndBitshift+0x120>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d040      	beq.n	80044c0 <DMA_CalcBaseAndBitshift+0xa8>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a3e      	ldr	r2, [pc, #248]	@ (800453c <DMA_CalcBaseAndBitshift+0x124>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d03b      	beq.n	80044c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a3c      	ldr	r2, [pc, #240]	@ (8004540 <DMA_CalcBaseAndBitshift+0x128>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d036      	beq.n	80044c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a3b      	ldr	r2, [pc, #236]	@ (8004544 <DMA_CalcBaseAndBitshift+0x12c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d031      	beq.n	80044c0 <DMA_CalcBaseAndBitshift+0xa8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a39      	ldr	r2, [pc, #228]	@ (8004548 <DMA_CalcBaseAndBitshift+0x130>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d02c      	beq.n	80044c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a38      	ldr	r2, [pc, #224]	@ (800454c <DMA_CalcBaseAndBitshift+0x134>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d027      	beq.n	80044c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a36      	ldr	r2, [pc, #216]	@ (8004550 <DMA_CalcBaseAndBitshift+0x138>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d022      	beq.n	80044c0 <DMA_CalcBaseAndBitshift+0xa8>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a35      	ldr	r2, [pc, #212]	@ (8004554 <DMA_CalcBaseAndBitshift+0x13c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d01d      	beq.n	80044c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a33      	ldr	r2, [pc, #204]	@ (8004558 <DMA_CalcBaseAndBitshift+0x140>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d018      	beq.n	80044c0 <DMA_CalcBaseAndBitshift+0xa8>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a32      	ldr	r2, [pc, #200]	@ (800455c <DMA_CalcBaseAndBitshift+0x144>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d013      	beq.n	80044c0 <DMA_CalcBaseAndBitshift+0xa8>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a30      	ldr	r2, [pc, #192]	@ (8004560 <DMA_CalcBaseAndBitshift+0x148>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00e      	beq.n	80044c0 <DMA_CalcBaseAndBitshift+0xa8>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a2f      	ldr	r2, [pc, #188]	@ (8004564 <DMA_CalcBaseAndBitshift+0x14c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d009      	beq.n	80044c0 <DMA_CalcBaseAndBitshift+0xa8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004568 <DMA_CalcBaseAndBitshift+0x150>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d004      	beq.n	80044c0 <DMA_CalcBaseAndBitshift+0xa8>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a2c      	ldr	r2, [pc, #176]	@ (800456c <DMA_CalcBaseAndBitshift+0x154>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d101      	bne.n	80044c4 <DMA_CalcBaseAndBitshift+0xac>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <DMA_CalcBaseAndBitshift+0xae>
 80044c4:	2300      	movs	r3, #0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d024      	beq.n	8004514 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	3b10      	subs	r3, #16
 80044d2:	4a27      	ldr	r2, [pc, #156]	@ (8004570 <DMA_CalcBaseAndBitshift+0x158>)
 80044d4:	fba2 2303 	umull	r2, r3, r2, r3
 80044d8:	091b      	lsrs	r3, r3, #4
 80044da:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	4a24      	ldr	r2, [pc, #144]	@ (8004574 <DMA_CalcBaseAndBitshift+0x15c>)
 80044e4:	5cd3      	ldrb	r3, [r2, r3]
 80044e6:	461a      	mov	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d908      	bls.n	8004504 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004578 <DMA_CalcBaseAndBitshift+0x160>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	1d1a      	adds	r2, r3, #4
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	659a      	str	r2, [r3, #88]	@ 0x58
 8004502:	e00d      	b.n	8004520 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	461a      	mov	r2, r3
 800450a:	4b1b      	ldr	r3, [pc, #108]	@ (8004578 <DMA_CalcBaseAndBitshift+0x160>)
 800450c:	4013      	ands	r3, r2
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6593      	str	r3, [r2, #88]	@ 0x58
 8004512:	e005      	b.n	8004520 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	40020010 	.word	0x40020010
 8004534:	40020028 	.word	0x40020028
 8004538:	40020040 	.word	0x40020040
 800453c:	40020058 	.word	0x40020058
 8004540:	40020070 	.word	0x40020070
 8004544:	40020088 	.word	0x40020088
 8004548:	400200a0 	.word	0x400200a0
 800454c:	400200b8 	.word	0x400200b8
 8004550:	40020410 	.word	0x40020410
 8004554:	40020428 	.word	0x40020428
 8004558:	40020440 	.word	0x40020440
 800455c:	40020458 	.word	0x40020458
 8004560:	40020470 	.word	0x40020470
 8004564:	40020488 	.word	0x40020488
 8004568:	400204a0 	.word	0x400204a0
 800456c:	400204b8 	.word	0x400204b8
 8004570:	aaaaaaab 	.word	0xaaaaaaab
 8004574:	08009bb0 	.word	0x08009bb0
 8004578:	fffffc00 	.word	0xfffffc00

0800457c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d120      	bne.n	80045d2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004594:	2b03      	cmp	r3, #3
 8004596:	d858      	bhi.n	800464a <DMA_CheckFifoParam+0xce>
 8004598:	a201      	add	r2, pc, #4	@ (adr r2, 80045a0 <DMA_CheckFifoParam+0x24>)
 800459a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459e:	bf00      	nop
 80045a0:	080045b1 	.word	0x080045b1
 80045a4:	080045c3 	.word	0x080045c3
 80045a8:	080045b1 	.word	0x080045b1
 80045ac:	0800464b 	.word	0x0800464b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d048      	beq.n	800464e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045c0:	e045      	b.n	800464e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045ca:	d142      	bne.n	8004652 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045d0:	e03f      	b.n	8004652 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045da:	d123      	bne.n	8004624 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d838      	bhi.n	8004656 <DMA_CheckFifoParam+0xda>
 80045e4:	a201      	add	r2, pc, #4	@ (adr r2, 80045ec <DMA_CheckFifoParam+0x70>)
 80045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ea:	bf00      	nop
 80045ec:	080045fd 	.word	0x080045fd
 80045f0:	08004603 	.word	0x08004603
 80045f4:	080045fd 	.word	0x080045fd
 80045f8:	08004615 	.word	0x08004615
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	73fb      	strb	r3, [r7, #15]
        break;
 8004600:	e030      	b.n	8004664 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004606:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d025      	beq.n	800465a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004612:	e022      	b.n	800465a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004618:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800461c:	d11f      	bne.n	800465e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004622:	e01c      	b.n	800465e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004628:	2b02      	cmp	r3, #2
 800462a:	d902      	bls.n	8004632 <DMA_CheckFifoParam+0xb6>
 800462c:	2b03      	cmp	r3, #3
 800462e:	d003      	beq.n	8004638 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004630:	e018      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
        break;
 8004636:	e015      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00e      	beq.n	8004662 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	73fb      	strb	r3, [r7, #15]
    break;
 8004648:	e00b      	b.n	8004662 <DMA_CheckFifoParam+0xe6>
        break;
 800464a:	bf00      	nop
 800464c:	e00a      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
        break;
 800464e:	bf00      	nop
 8004650:	e008      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
        break;
 8004652:	bf00      	nop
 8004654:	e006      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
        break;
 8004656:	bf00      	nop
 8004658:	e004      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
        break;
 800465a:	bf00      	nop
 800465c:	e002      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
        break;
 800465e:	bf00      	nop
 8004660:	e000      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
    break;
 8004662:	bf00      	nop
    }
  }

  return status;
 8004664:	7bfb      	ldrb	r3, [r7, #15]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop

08004674 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a38      	ldr	r2, [pc, #224]	@ (8004768 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d022      	beq.n	80046d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a36      	ldr	r2, [pc, #216]	@ (800476c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d01d      	beq.n	80046d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a35      	ldr	r2, [pc, #212]	@ (8004770 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d018      	beq.n	80046d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a33      	ldr	r2, [pc, #204]	@ (8004774 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d013      	beq.n	80046d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a32      	ldr	r2, [pc, #200]	@ (8004778 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00e      	beq.n	80046d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a30      	ldr	r2, [pc, #192]	@ (800477c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d009      	beq.n	80046d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a2f      	ldr	r2, [pc, #188]	@ (8004780 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a2d      	ldr	r2, [pc, #180]	@ (8004784 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d101      	bne.n	80046d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80046d6:	2300      	movs	r3, #0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d01a      	beq.n	8004712 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	3b08      	subs	r3, #8
 80046e4:	4a28      	ldr	r2, [pc, #160]	@ (8004788 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	091b      	lsrs	r3, r3, #4
 80046ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	4b26      	ldr	r3, [pc, #152]	@ (800478c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	461a      	mov	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a24      	ldr	r2, [pc, #144]	@ (8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004700:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f003 031f 	and.w	r3, r3, #31
 8004708:	2201      	movs	r2, #1
 800470a:	409a      	lsls	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004710:	e024      	b.n	800475c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	3b10      	subs	r3, #16
 800471a:	4a1e      	ldr	r2, [pc, #120]	@ (8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800471c:	fba2 2303 	umull	r2, r3, r2, r3
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4a1c      	ldr	r2, [pc, #112]	@ (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d806      	bhi.n	800473a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4a1b      	ldr	r2, [pc, #108]	@ (800479c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d902      	bls.n	800473a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3308      	adds	r3, #8
 8004738:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4b18      	ldr	r3, [pc, #96]	@ (80047a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	461a      	mov	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a16      	ldr	r2, [pc, #88]	@ (80047a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800474c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	2201      	movs	r2, #1
 8004756:	409a      	lsls	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800475c:	bf00      	nop
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	58025408 	.word	0x58025408
 800476c:	5802541c 	.word	0x5802541c
 8004770:	58025430 	.word	0x58025430
 8004774:	58025444 	.word	0x58025444
 8004778:	58025458 	.word	0x58025458
 800477c:	5802546c 	.word	0x5802546c
 8004780:	58025480 	.word	0x58025480
 8004784:	58025494 	.word	0x58025494
 8004788:	cccccccd 	.word	0xcccccccd
 800478c:	16009600 	.word	0x16009600
 8004790:	58025880 	.word	0x58025880
 8004794:	aaaaaaab 	.word	0xaaaaaaab
 8004798:	400204b8 	.word	0x400204b8
 800479c:	4002040f 	.word	0x4002040f
 80047a0:	10008200 	.word	0x10008200
 80047a4:	40020880 	.word	0x40020880

080047a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d04a      	beq.n	8004854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d847      	bhi.n	8004854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a25      	ldr	r2, [pc, #148]	@ (8004860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d022      	beq.n	8004814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a24      	ldr	r2, [pc, #144]	@ (8004864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d01d      	beq.n	8004814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a22      	ldr	r2, [pc, #136]	@ (8004868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d018      	beq.n	8004814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a21      	ldr	r2, [pc, #132]	@ (800486c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d013      	beq.n	8004814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00e      	beq.n	8004814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d009      	beq.n	8004814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1c      	ldr	r2, [pc, #112]	@ (8004878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d004      	beq.n	8004814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a1b      	ldr	r2, [pc, #108]	@ (800487c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d101      	bne.n	8004818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004818:	2300      	movs	r3, #0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4b17      	ldr	r3, [pc, #92]	@ (8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	461a      	mov	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a15      	ldr	r2, [pc, #84]	@ (8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004830:	671a      	str	r2, [r3, #112]	@ 0x70
 8004832:	e009      	b.n	8004848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4b14      	ldr	r3, [pc, #80]	@ (8004888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004838:	4413      	add	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	461a      	mov	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a11      	ldr	r2, [pc, #68]	@ (800488c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004846:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	3b01      	subs	r3, #1
 800484c:	2201      	movs	r2, #1
 800484e:	409a      	lsls	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	58025408 	.word	0x58025408
 8004864:	5802541c 	.word	0x5802541c
 8004868:	58025430 	.word	0x58025430
 800486c:	58025444 	.word	0x58025444
 8004870:	58025458 	.word	0x58025458
 8004874:	5802546c 	.word	0x5802546c
 8004878:	58025480 	.word	0x58025480
 800487c:	58025494 	.word	0x58025494
 8004880:	1600963f 	.word	0x1600963f
 8004884:	58025940 	.word	0x58025940
 8004888:	1000823f 	.word	0x1000823f
 800488c:	40020940 	.word	0x40020940

08004890 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004890:	b480      	push	{r7}
 8004892:	b089      	sub	sp, #36	@ 0x24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800489e:	4b89      	ldr	r3, [pc, #548]	@ (8004ac4 <HAL_GPIO_Init+0x234>)
 80048a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048a2:	e194      	b.n	8004bce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	2101      	movs	r1, #1
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	fa01 f303 	lsl.w	r3, r1, r3
 80048b0:	4013      	ands	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 8186 	beq.w	8004bc8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d005      	beq.n	80048d4 <HAL_GPIO_Init+0x44>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d130      	bne.n	8004936 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	2203      	movs	r2, #3
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	43db      	mvns	r3, r3
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4013      	ands	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800490a:	2201      	movs	r2, #1
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	43db      	mvns	r3, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4013      	ands	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	091b      	lsrs	r3, r3, #4
 8004920:	f003 0201 	and.w	r2, r3, #1
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4313      	orrs	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	2b03      	cmp	r3, #3
 8004940:	d017      	beq.n	8004972 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	2203      	movs	r2, #3
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	43db      	mvns	r3, r3
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4013      	ands	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	4313      	orrs	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d123      	bne.n	80049c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	08da      	lsrs	r2, r3, #3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3208      	adds	r2, #8
 8004986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800498a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	220f      	movs	r2, #15
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	43db      	mvns	r3, r3
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	4013      	ands	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	691a      	ldr	r2, [r3, #16]
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	08da      	lsrs	r2, r3, #3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3208      	adds	r2, #8
 80049c0:	69b9      	ldr	r1, [r7, #24]
 80049c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	2203      	movs	r2, #3
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	43db      	mvns	r3, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	4013      	ands	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f003 0203 	and.w	r2, r3, #3
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 80e0 	beq.w	8004bc8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a08:	4b2f      	ldr	r3, [pc, #188]	@ (8004ac8 <HAL_GPIO_Init+0x238>)
 8004a0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a0e:	4a2e      	ldr	r2, [pc, #184]	@ (8004ac8 <HAL_GPIO_Init+0x238>)
 8004a10:	f043 0302 	orr.w	r3, r3, #2
 8004a14:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004a18:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac8 <HAL_GPIO_Init+0x238>)
 8004a1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a26:	4a29      	ldr	r2, [pc, #164]	@ (8004acc <HAL_GPIO_Init+0x23c>)
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	089b      	lsrs	r3, r3, #2
 8004a2c:	3302      	adds	r3, #2
 8004a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	220f      	movs	r2, #15
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	43db      	mvns	r3, r3
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4013      	ands	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a20      	ldr	r2, [pc, #128]	@ (8004ad0 <HAL_GPIO_Init+0x240>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d052      	beq.n	8004af8 <HAL_GPIO_Init+0x268>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad4 <HAL_GPIO_Init+0x244>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d031      	beq.n	8004abe <HAL_GPIO_Init+0x22e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ad8 <HAL_GPIO_Init+0x248>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d02b      	beq.n	8004aba <HAL_GPIO_Init+0x22a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1d      	ldr	r2, [pc, #116]	@ (8004adc <HAL_GPIO_Init+0x24c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d025      	beq.n	8004ab6 <HAL_GPIO_Init+0x226>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ae0 <HAL_GPIO_Init+0x250>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d01f      	beq.n	8004ab2 <HAL_GPIO_Init+0x222>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae4 <HAL_GPIO_Init+0x254>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d019      	beq.n	8004aae <HAL_GPIO_Init+0x21e>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ae8 <HAL_GPIO_Init+0x258>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d013      	beq.n	8004aaa <HAL_GPIO_Init+0x21a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a19      	ldr	r2, [pc, #100]	@ (8004aec <HAL_GPIO_Init+0x25c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00d      	beq.n	8004aa6 <HAL_GPIO_Init+0x216>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a18      	ldr	r2, [pc, #96]	@ (8004af0 <HAL_GPIO_Init+0x260>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d007      	beq.n	8004aa2 <HAL_GPIO_Init+0x212>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a17      	ldr	r2, [pc, #92]	@ (8004af4 <HAL_GPIO_Init+0x264>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d101      	bne.n	8004a9e <HAL_GPIO_Init+0x20e>
 8004a9a:	2309      	movs	r3, #9
 8004a9c:	e02d      	b.n	8004afa <HAL_GPIO_Init+0x26a>
 8004a9e:	230a      	movs	r3, #10
 8004aa0:	e02b      	b.n	8004afa <HAL_GPIO_Init+0x26a>
 8004aa2:	2308      	movs	r3, #8
 8004aa4:	e029      	b.n	8004afa <HAL_GPIO_Init+0x26a>
 8004aa6:	2307      	movs	r3, #7
 8004aa8:	e027      	b.n	8004afa <HAL_GPIO_Init+0x26a>
 8004aaa:	2306      	movs	r3, #6
 8004aac:	e025      	b.n	8004afa <HAL_GPIO_Init+0x26a>
 8004aae:	2305      	movs	r3, #5
 8004ab0:	e023      	b.n	8004afa <HAL_GPIO_Init+0x26a>
 8004ab2:	2304      	movs	r3, #4
 8004ab4:	e021      	b.n	8004afa <HAL_GPIO_Init+0x26a>
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e01f      	b.n	8004afa <HAL_GPIO_Init+0x26a>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e01d      	b.n	8004afa <HAL_GPIO_Init+0x26a>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e01b      	b.n	8004afa <HAL_GPIO_Init+0x26a>
 8004ac2:	bf00      	nop
 8004ac4:	58000080 	.word	0x58000080
 8004ac8:	58024400 	.word	0x58024400
 8004acc:	58000400 	.word	0x58000400
 8004ad0:	58020000 	.word	0x58020000
 8004ad4:	58020400 	.word	0x58020400
 8004ad8:	58020800 	.word	0x58020800
 8004adc:	58020c00 	.word	0x58020c00
 8004ae0:	58021000 	.word	0x58021000
 8004ae4:	58021400 	.word	0x58021400
 8004ae8:	58021800 	.word	0x58021800
 8004aec:	58021c00 	.word	0x58021c00
 8004af0:	58022000 	.word	0x58022000
 8004af4:	58022400 	.word	0x58022400
 8004af8:	2300      	movs	r3, #0
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	f002 0203 	and.w	r2, r2, #3
 8004b00:	0092      	lsls	r2, r2, #2
 8004b02:	4093      	lsls	r3, r2
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b0a:	4938      	ldr	r1, [pc, #224]	@ (8004bec <HAL_GPIO_Init+0x35c>)
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	089b      	lsrs	r3, r3, #2
 8004b10:	3302      	adds	r3, #2
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	43db      	mvns	r3, r3
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	4013      	ands	r3, r2
 8004b28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	43db      	mvns	r3, r3
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4013      	ands	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	4013      	ands	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	4013      	ands	r3, r2
 8004bac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f47f ae63 	bne.w	80048a4 <HAL_GPIO_Init+0x14>
  }
}
 8004bde:	bf00      	nop
 8004be0:	bf00      	nop
 8004be2:	3724      	adds	r7, #36	@ 0x24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	58000400 	.word	0x58000400

08004bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	807b      	strh	r3, [r7, #2]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c00:	787b      	ldrb	r3, [r7, #1]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c06:	887a      	ldrh	r2, [r7, #2]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004c0c:	e003      	b.n	8004c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c0e:	887b      	ldrh	r3, [r7, #2]
 8004c10:	041a      	lsls	r2, r3, #16
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	619a      	str	r2, [r3, #24]
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004c2c:	4b19      	ldr	r3, [pc, #100]	@ (8004c94 <HAL_PWREx_ConfigSupply+0x70>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d00a      	beq.n	8004c4e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c38:	4b16      	ldr	r3, [pc, #88]	@ (8004c94 <HAL_PWREx_ConfigSupply+0x70>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d001      	beq.n	8004c4a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e01f      	b.n	8004c8a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e01d      	b.n	8004c8a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c4e:	4b11      	ldr	r3, [pc, #68]	@ (8004c94 <HAL_PWREx_ConfigSupply+0x70>)
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f023 0207 	bic.w	r2, r3, #7
 8004c56:	490f      	ldr	r1, [pc, #60]	@ (8004c94 <HAL_PWREx_ConfigSupply+0x70>)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c5e:	f7fc fda7 	bl	80017b0 <HAL_GetTick>
 8004c62:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c64:	e009      	b.n	8004c7a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c66:	f7fc fda3 	bl	80017b0 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c74:	d901      	bls.n	8004c7a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e007      	b.n	8004c8a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c7a:	4b06      	ldr	r3, [pc, #24]	@ (8004c94 <HAL_PWREx_ConfigSupply+0x70>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c86:	d1ee      	bne.n	8004c66 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	58024800 	.word	0x58024800

08004c98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08c      	sub	sp, #48	@ 0x30
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d102      	bne.n	8004cac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f000 bc48 	b.w	800553c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 8088 	beq.w	8004dca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cba:	4b99      	ldr	r3, [pc, #612]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cc4:	4b96      	ldr	r3, [pc, #600]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ccc:	2b10      	cmp	r3, #16
 8004cce:	d007      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x48>
 8004cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd2:	2b18      	cmp	r3, #24
 8004cd4:	d111      	bne.n	8004cfa <HAL_RCC_OscConfig+0x62>
 8004cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d10c      	bne.n	8004cfa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce0:	4b8f      	ldr	r3, [pc, #572]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d06d      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x130>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d169      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	f000 bc21 	b.w	800553c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d02:	d106      	bne.n	8004d12 <HAL_RCC_OscConfig+0x7a>
 8004d04:	4b86      	ldr	r3, [pc, #536]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a85      	ldr	r2, [pc, #532]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	e02e      	b.n	8004d70 <HAL_RCC_OscConfig+0xd8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10c      	bne.n	8004d34 <HAL_RCC_OscConfig+0x9c>
 8004d1a:	4b81      	ldr	r3, [pc, #516]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a80      	ldr	r2, [pc, #512]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	4b7e      	ldr	r3, [pc, #504]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a7d      	ldr	r2, [pc, #500]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	e01d      	b.n	8004d70 <HAL_RCC_OscConfig+0xd8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d3c:	d10c      	bne.n	8004d58 <HAL_RCC_OscConfig+0xc0>
 8004d3e:	4b78      	ldr	r3, [pc, #480]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a77      	ldr	r2, [pc, #476]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	4b75      	ldr	r3, [pc, #468]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a74      	ldr	r2, [pc, #464]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	e00b      	b.n	8004d70 <HAL_RCC_OscConfig+0xd8>
 8004d58:	4b71      	ldr	r3, [pc, #452]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a70      	ldr	r2, [pc, #448]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	4b6e      	ldr	r3, [pc, #440]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a6d      	ldr	r2, [pc, #436]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d013      	beq.n	8004da0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d78:	f7fc fd1a 	bl	80017b0 <HAL_GetTick>
 8004d7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d80:	f7fc fd16 	bl	80017b0 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b64      	cmp	r3, #100	@ 0x64
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e3d4      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d92:	4b63      	ldr	r3, [pc, #396]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0f0      	beq.n	8004d80 <HAL_RCC_OscConfig+0xe8>
 8004d9e:	e014      	b.n	8004dca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da0:	f7fc fd06 	bl	80017b0 <HAL_GetTick>
 8004da4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da8:	f7fc fd02 	bl	80017b0 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b64      	cmp	r3, #100	@ 0x64
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e3c0      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dba:	4b59      	ldr	r3, [pc, #356]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f0      	bne.n	8004da8 <HAL_RCC_OscConfig+0x110>
 8004dc6:	e000      	b.n	8004dca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 80ca 	beq.w	8004f6c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dd8:	4b51      	ldr	r3, [pc, #324]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004de0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004de2:	4b4f      	ldr	r3, [pc, #316]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <HAL_RCC_OscConfig+0x166>
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	2b18      	cmp	r3, #24
 8004df2:	d156      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x20a>
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d151      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dfe:	4b48      	ldr	r3, [pc, #288]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_RCC_OscConfig+0x17e>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e392      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e16:	4b42      	ldr	r3, [pc, #264]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f023 0219 	bic.w	r2, r3, #25
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	493f      	ldr	r1, [pc, #252]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e28:	f7fc fcc2 	bl	80017b0 <HAL_GetTick>
 8004e2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e30:	f7fc fcbe 	bl	80017b0 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e37c      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e42:	4b37      	ldr	r3, [pc, #220]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0f0      	beq.n	8004e30 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e4e:	f7fc fcbb 	bl	80017c8 <HAL_GetREVID>
 8004e52:	4603      	mov	r3, r0
 8004e54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d817      	bhi.n	8004e8c <HAL_RCC_OscConfig+0x1f4>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	2b40      	cmp	r3, #64	@ 0x40
 8004e62:	d108      	bne.n	8004e76 <HAL_RCC_OscConfig+0x1de>
 8004e64:	4b2e      	ldr	r3, [pc, #184]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004e6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e72:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e74:	e07a      	b.n	8004f6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e76:	4b2a      	ldr	r3, [pc, #168]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	031b      	lsls	r3, r3, #12
 8004e84:	4926      	ldr	r1, [pc, #152]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e8a:	e06f      	b.n	8004f6c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e8c:	4b24      	ldr	r3, [pc, #144]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	061b      	lsls	r3, r3, #24
 8004e9a:	4921      	ldr	r1, [pc, #132]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ea0:	e064      	b.n	8004f6c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d047      	beq.n	8004f3a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f023 0219 	bic.w	r2, r3, #25
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	491a      	ldr	r1, [pc, #104]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebc:	f7fc fc78 	bl	80017b0 <HAL_GetTick>
 8004ec0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ec4:	f7fc fc74 	bl	80017b0 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e332      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ed6:	4b12      	ldr	r3, [pc, #72]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0f0      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee2:	f7fc fc71 	bl	80017c8 <HAL_GetREVID>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d819      	bhi.n	8004f24 <HAL_RCC_OscConfig+0x28c>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	2b40      	cmp	r3, #64	@ 0x40
 8004ef6:	d108      	bne.n	8004f0a <HAL_RCC_OscConfig+0x272>
 8004ef8:	4b09      	ldr	r3, [pc, #36]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004f00:	4a07      	ldr	r2, [pc, #28]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004f02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f06:	6053      	str	r3, [r2, #4]
 8004f08:	e030      	b.n	8004f6c <HAL_RCC_OscConfig+0x2d4>
 8004f0a:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	031b      	lsls	r3, r3, #12
 8004f18:	4901      	ldr	r1, [pc, #4]	@ (8004f20 <HAL_RCC_OscConfig+0x288>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	604b      	str	r3, [r1, #4]
 8004f1e:	e025      	b.n	8004f6c <HAL_RCC_OscConfig+0x2d4>
 8004f20:	58024400 	.word	0x58024400
 8004f24:	4b9a      	ldr	r3, [pc, #616]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	061b      	lsls	r3, r3, #24
 8004f32:	4997      	ldr	r1, [pc, #604]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	604b      	str	r3, [r1, #4]
 8004f38:	e018      	b.n	8004f6c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f3a:	4b95      	ldr	r3, [pc, #596]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a94      	ldr	r2, [pc, #592]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004f40:	f023 0301 	bic.w	r3, r3, #1
 8004f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f46:	f7fc fc33 	bl	80017b0 <HAL_GetTick>
 8004f4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f4e:	f7fc fc2f 	bl	80017b0 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e2ed      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f60:	4b8b      	ldr	r3, [pc, #556]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f0      	bne.n	8004f4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0310 	and.w	r3, r3, #16
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80a9 	beq.w	80050cc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f7a:	4b85      	ldr	r3, [pc, #532]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f82:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f84:	4b82      	ldr	r3, [pc, #520]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f88:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d007      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x308>
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	2b18      	cmp	r3, #24
 8004f94:	d13a      	bne.n	800500c <HAL_RCC_OscConfig+0x374>
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f003 0303 	and.w	r3, r3, #3
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d135      	bne.n	800500c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fa0:	4b7b      	ldr	r3, [pc, #492]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x320>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	2b80      	cmp	r3, #128	@ 0x80
 8004fb2:	d001      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e2c1      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fb8:	f7fc fc06 	bl	80017c8 <HAL_GetREVID>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d817      	bhi.n	8004ff6 <HAL_RCC_OscConfig+0x35e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d108      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x348>
 8004fce:	4b70      	ldr	r3, [pc, #448]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004fd6:	4a6e      	ldr	r2, [pc, #440]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004fd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fdc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fde:	e075      	b.n	80050cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fe0:	4b6b      	ldr	r3, [pc, #428]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	069b      	lsls	r3, r3, #26
 8004fee:	4968      	ldr	r1, [pc, #416]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ff4:	e06a      	b.n	80050cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ff6:	4b66      	ldr	r3, [pc, #408]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	061b      	lsls	r3, r3, #24
 8005004:	4962      	ldr	r1, [pc, #392]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8005006:	4313      	orrs	r3, r2
 8005008:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800500a:	e05f      	b.n	80050cc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d042      	beq.n	800509a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005014:	4b5e      	ldr	r3, [pc, #376]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a5d      	ldr	r2, [pc, #372]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 800501a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800501e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005020:	f7fc fbc6 	bl	80017b0 <HAL_GetTick>
 8005024:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005028:	f7fc fbc2 	bl	80017b0 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e280      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800503a:	4b55      	ldr	r3, [pc, #340]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f0      	beq.n	8005028 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005046:	f7fc fbbf 	bl	80017c8 <HAL_GetREVID>
 800504a:	4603      	mov	r3, r0
 800504c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005050:	4293      	cmp	r3, r2
 8005052:	d817      	bhi.n	8005084 <HAL_RCC_OscConfig+0x3ec>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	2b20      	cmp	r3, #32
 800505a:	d108      	bne.n	800506e <HAL_RCC_OscConfig+0x3d6>
 800505c:	4b4c      	ldr	r3, [pc, #304]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005064:	4a4a      	ldr	r2, [pc, #296]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8005066:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800506a:	6053      	str	r3, [r2, #4]
 800506c:	e02e      	b.n	80050cc <HAL_RCC_OscConfig+0x434>
 800506e:	4b48      	ldr	r3, [pc, #288]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	069b      	lsls	r3, r3, #26
 800507c:	4944      	ldr	r1, [pc, #272]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 800507e:	4313      	orrs	r3, r2
 8005080:	604b      	str	r3, [r1, #4]
 8005082:	e023      	b.n	80050cc <HAL_RCC_OscConfig+0x434>
 8005084:	4b42      	ldr	r3, [pc, #264]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	061b      	lsls	r3, r3, #24
 8005092:	493f      	ldr	r1, [pc, #252]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8005094:	4313      	orrs	r3, r2
 8005096:	60cb      	str	r3, [r1, #12]
 8005098:	e018      	b.n	80050cc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800509a:	4b3d      	ldr	r3, [pc, #244]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a3c      	ldr	r2, [pc, #240]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 80050a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a6:	f7fc fb83 	bl	80017b0 <HAL_GetTick>
 80050aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80050ae:	f7fc fb7f 	bl	80017b0 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e23d      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050c0:	4b33      	ldr	r3, [pc, #204]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1f0      	bne.n	80050ae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d036      	beq.n	8005146 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d019      	beq.n	8005114 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 80050e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050e4:	4a2a      	ldr	r2, [pc, #168]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 80050e6:	f043 0301 	orr.w	r3, r3, #1
 80050ea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ec:	f7fc fb60 	bl	80017b0 <HAL_GetTick>
 80050f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050f4:	f7fc fb5c 	bl	80017b0 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e21a      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005106:	4b22      	ldr	r3, [pc, #136]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8005108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0f0      	beq.n	80050f4 <HAL_RCC_OscConfig+0x45c>
 8005112:	e018      	b.n	8005146 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005114:	4b1e      	ldr	r3, [pc, #120]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8005116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005118:	4a1d      	ldr	r2, [pc, #116]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 800511a:	f023 0301 	bic.w	r3, r3, #1
 800511e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005120:	f7fc fb46 	bl	80017b0 <HAL_GetTick>
 8005124:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005128:	f7fc fb42 	bl	80017b0 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e200      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800513a:	4b15      	ldr	r3, [pc, #84]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 800513c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1f0      	bne.n	8005128 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b00      	cmp	r3, #0
 8005150:	d039      	beq.n	80051c6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01c      	beq.n	8005194 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800515a:	4b0d      	ldr	r3, [pc, #52]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a0c      	ldr	r2, [pc, #48]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8005160:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005164:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005166:	f7fc fb23 	bl	80017b0 <HAL_GetTick>
 800516a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800516c:	e008      	b.n	8005180 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800516e:	f7fc fb1f 	bl	80017b0 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e1dd      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005180:	4b03      	ldr	r3, [pc, #12]	@ (8005190 <HAL_RCC_OscConfig+0x4f8>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0f0      	beq.n	800516e <HAL_RCC_OscConfig+0x4d6>
 800518c:	e01b      	b.n	80051c6 <HAL_RCC_OscConfig+0x52e>
 800518e:	bf00      	nop
 8005190:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005194:	4b9b      	ldr	r3, [pc, #620]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a9a      	ldr	r2, [pc, #616]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 800519a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800519e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80051a0:	f7fc fb06 	bl	80017b0 <HAL_GetTick>
 80051a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051a8:	f7fc fb02 	bl	80017b0 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e1c0      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051ba:	4b92      	ldr	r3, [pc, #584]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f0      	bne.n	80051a8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0304 	and.w	r3, r3, #4
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 8081 	beq.w	80052d6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051d4:	4b8c      	ldr	r3, [pc, #560]	@ (8005408 <HAL_RCC_OscConfig+0x770>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a8b      	ldr	r2, [pc, #556]	@ (8005408 <HAL_RCC_OscConfig+0x770>)
 80051da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051e0:	f7fc fae6 	bl	80017b0 <HAL_GetTick>
 80051e4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e8:	f7fc fae2 	bl	80017b0 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b64      	cmp	r3, #100	@ 0x64
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e1a0      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051fa:	4b83      	ldr	r3, [pc, #524]	@ (8005408 <HAL_RCC_OscConfig+0x770>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0f0      	beq.n	80051e8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d106      	bne.n	800521c <HAL_RCC_OscConfig+0x584>
 800520e:	4b7d      	ldr	r3, [pc, #500]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005212:	4a7c      	ldr	r2, [pc, #496]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	6713      	str	r3, [r2, #112]	@ 0x70
 800521a:	e02d      	b.n	8005278 <HAL_RCC_OscConfig+0x5e0>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10c      	bne.n	800523e <HAL_RCC_OscConfig+0x5a6>
 8005224:	4b77      	ldr	r3, [pc, #476]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005228:	4a76      	ldr	r2, [pc, #472]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 800522a:	f023 0301 	bic.w	r3, r3, #1
 800522e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005230:	4b74      	ldr	r3, [pc, #464]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005234:	4a73      	ldr	r2, [pc, #460]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005236:	f023 0304 	bic.w	r3, r3, #4
 800523a:	6713      	str	r3, [r2, #112]	@ 0x70
 800523c:	e01c      	b.n	8005278 <HAL_RCC_OscConfig+0x5e0>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	2b05      	cmp	r3, #5
 8005244:	d10c      	bne.n	8005260 <HAL_RCC_OscConfig+0x5c8>
 8005246:	4b6f      	ldr	r3, [pc, #444]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800524a:	4a6e      	ldr	r2, [pc, #440]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 800524c:	f043 0304 	orr.w	r3, r3, #4
 8005250:	6713      	str	r3, [r2, #112]	@ 0x70
 8005252:	4b6c      	ldr	r3, [pc, #432]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005256:	4a6b      	ldr	r2, [pc, #428]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	6713      	str	r3, [r2, #112]	@ 0x70
 800525e:	e00b      	b.n	8005278 <HAL_RCC_OscConfig+0x5e0>
 8005260:	4b68      	ldr	r3, [pc, #416]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005264:	4a67      	ldr	r2, [pc, #412]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005266:	f023 0301 	bic.w	r3, r3, #1
 800526a:	6713      	str	r3, [r2, #112]	@ 0x70
 800526c:	4b65      	ldr	r3, [pc, #404]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 800526e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005270:	4a64      	ldr	r2, [pc, #400]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005272:	f023 0304 	bic.w	r3, r3, #4
 8005276:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d015      	beq.n	80052ac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005280:	f7fc fa96 	bl	80017b0 <HAL_GetTick>
 8005284:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005286:	e00a      	b.n	800529e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005288:	f7fc fa92 	bl	80017b0 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005296:	4293      	cmp	r3, r2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e14e      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800529e:	4b59      	ldr	r3, [pc, #356]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80052a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0ee      	beq.n	8005288 <HAL_RCC_OscConfig+0x5f0>
 80052aa:	e014      	b.n	80052d6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ac:	f7fc fa80 	bl	80017b0 <HAL_GetTick>
 80052b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052b2:	e00a      	b.n	80052ca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b4:	f7fc fa7c 	bl	80017b0 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e138      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052ca:	4b4e      	ldr	r3, [pc, #312]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1ee      	bne.n	80052b4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 812d 	beq.w	800553a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80052e0:	4b48      	ldr	r3, [pc, #288]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052e8:	2b18      	cmp	r3, #24
 80052ea:	f000 80bd 	beq.w	8005468 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	f040 809e 	bne.w	8005434 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f8:	4b42      	ldr	r3, [pc, #264]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a41      	ldr	r2, [pc, #260]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80052fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005304:	f7fc fa54 	bl	80017b0 <HAL_GetTick>
 8005308:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800530c:	f7fc fa50 	bl	80017b0 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e10e      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800531e:	4b39      	ldr	r3, [pc, #228]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1f0      	bne.n	800530c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800532a:	4b36      	ldr	r3, [pc, #216]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 800532c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800532e:	4b37      	ldr	r3, [pc, #220]	@ (800540c <HAL_RCC_OscConfig+0x774>)
 8005330:	4013      	ands	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800533a:	0112      	lsls	r2, r2, #4
 800533c:	430a      	orrs	r2, r1
 800533e:	4931      	ldr	r1, [pc, #196]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005340:	4313      	orrs	r3, r2
 8005342:	628b      	str	r3, [r1, #40]	@ 0x28
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005348:	3b01      	subs	r3, #1
 800534a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005352:	3b01      	subs	r3, #1
 8005354:	025b      	lsls	r3, r3, #9
 8005356:	b29b      	uxth	r3, r3
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535e:	3b01      	subs	r3, #1
 8005360:	041b      	lsls	r3, r3, #16
 8005362:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800536c:	3b01      	subs	r3, #1
 800536e:	061b      	lsls	r3, r3, #24
 8005370:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005374:	4923      	ldr	r1, [pc, #140]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005376:	4313      	orrs	r3, r2
 8005378:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800537a:	4b22      	ldr	r3, [pc, #136]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 800537c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537e:	4a21      	ldr	r2, [pc, #132]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005380:	f023 0301 	bic.w	r3, r3, #1
 8005384:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005386:	4b1f      	ldr	r3, [pc, #124]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800538a:	4b21      	ldr	r3, [pc, #132]	@ (8005410 <HAL_RCC_OscConfig+0x778>)
 800538c:	4013      	ands	r3, r2
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005392:	00d2      	lsls	r2, r2, #3
 8005394:	491b      	ldr	r1, [pc, #108]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 8005396:	4313      	orrs	r3, r2
 8005398:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800539a:	4b1a      	ldr	r3, [pc, #104]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 800539c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539e:	f023 020c 	bic.w	r2, r3, #12
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a6:	4917      	ldr	r1, [pc, #92]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80053ac:	4b15      	ldr	r3, [pc, #84]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b0:	f023 0202 	bic.w	r2, r3, #2
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b8:	4912      	ldr	r1, [pc, #72]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053be:	4b11      	ldr	r3, [pc, #68]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c2:	4a10      	ldr	r2, [pc, #64]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ce:	4a0d      	ldr	r2, [pc, #52]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80053d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053da:	4a0a      	ldr	r2, [pc, #40]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80053e2:	4b08      	ldr	r3, [pc, #32]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e6:	4a07      	ldr	r2, [pc, #28]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053e8:	f043 0301 	orr.w	r3, r3, #1
 80053ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053ee:	4b05      	ldr	r3, [pc, #20]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a04      	ldr	r2, [pc, #16]	@ (8005404 <HAL_RCC_OscConfig+0x76c>)
 80053f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fa:	f7fc f9d9 	bl	80017b0 <HAL_GetTick>
 80053fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005400:	e011      	b.n	8005426 <HAL_RCC_OscConfig+0x78e>
 8005402:	bf00      	nop
 8005404:	58024400 	.word	0x58024400
 8005408:	58024800 	.word	0x58024800
 800540c:	fffffc0c 	.word	0xfffffc0c
 8005410:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005414:	f7fc f9cc 	bl	80017b0 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e08a      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005426:	4b47      	ldr	r3, [pc, #284]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f0      	beq.n	8005414 <HAL_RCC_OscConfig+0x77c>
 8005432:	e082      	b.n	800553a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005434:	4b43      	ldr	r3, [pc, #268]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a42      	ldr	r2, [pc, #264]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 800543a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800543e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005440:	f7fc f9b6 	bl	80017b0 <HAL_GetTick>
 8005444:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005448:	f7fc f9b2 	bl	80017b0 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e070      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800545a:	4b3a      	ldr	r3, [pc, #232]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x7b0>
 8005466:	e068      	b.n	800553a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005468:	4b36      	ldr	r3, [pc, #216]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 800546a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800546e:	4b35      	ldr	r3, [pc, #212]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 8005470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005472:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005478:	2b01      	cmp	r3, #1
 800547a:	d031      	beq.n	80054e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f003 0203 	and.w	r2, r3, #3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005486:	429a      	cmp	r2, r3
 8005488:	d12a      	bne.n	80054e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	091b      	lsrs	r3, r3, #4
 800548e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005496:	429a      	cmp	r2, r3
 8005498:	d122      	bne.n	80054e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d11a      	bne.n	80054e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	0a5b      	lsrs	r3, r3, #9
 80054ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d111      	bne.n	80054e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	0c1b      	lsrs	r3, r3, #16
 80054c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d108      	bne.n	80054e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	0e1b      	lsrs	r3, r3, #24
 80054d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054dc:	429a      	cmp	r2, r3
 80054de:	d001      	beq.n	80054e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e02b      	b.n	800553c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80054e4:	4b17      	ldr	r3, [pc, #92]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 80054e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054e8:	08db      	lsrs	r3, r3, #3
 80054ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d01f      	beq.n	800553a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80054fa:	4b12      	ldr	r3, [pc, #72]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 80054fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fe:	4a11      	ldr	r2, [pc, #68]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 8005500:	f023 0301 	bic.w	r3, r3, #1
 8005504:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005506:	f7fc f953 	bl	80017b0 <HAL_GetTick>
 800550a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800550c:	bf00      	nop
 800550e:	f7fc f94f 	bl	80017b0 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	4293      	cmp	r3, r2
 8005518:	d0f9      	beq.n	800550e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800551a:	4b0a      	ldr	r3, [pc, #40]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 800551c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800551e:	4b0a      	ldr	r3, [pc, #40]	@ (8005548 <HAL_RCC_OscConfig+0x8b0>)
 8005520:	4013      	ands	r3, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005526:	00d2      	lsls	r2, r2, #3
 8005528:	4906      	ldr	r1, [pc, #24]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 800552a:	4313      	orrs	r3, r2
 800552c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800552e:	4b05      	ldr	r3, [pc, #20]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 8005530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005532:	4a04      	ldr	r2, [pc, #16]	@ (8005544 <HAL_RCC_OscConfig+0x8ac>)
 8005534:	f043 0301 	orr.w	r3, r3, #1
 8005538:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3730      	adds	r7, #48	@ 0x30
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	58024400 	.word	0x58024400
 8005548:	ffff0007 	.word	0xffff0007

0800554c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e19c      	b.n	800589a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005560:	4b8a      	ldr	r3, [pc, #552]	@ (800578c <HAL_RCC_ClockConfig+0x240>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	d910      	bls.n	8005590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800556e:	4b87      	ldr	r3, [pc, #540]	@ (800578c <HAL_RCC_ClockConfig+0x240>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f023 020f 	bic.w	r2, r3, #15
 8005576:	4985      	ldr	r1, [pc, #532]	@ (800578c <HAL_RCC_ClockConfig+0x240>)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	4313      	orrs	r3, r2
 800557c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800557e:	4b83      	ldr	r3, [pc, #524]	@ (800578c <HAL_RCC_ClockConfig+0x240>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	d001      	beq.n	8005590 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e184      	b.n	800589a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	d010      	beq.n	80055be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	4b7b      	ldr	r3, [pc, #492]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d908      	bls.n	80055be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055ac:	4b78      	ldr	r3, [pc, #480]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	4975      	ldr	r1, [pc, #468]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d010      	beq.n	80055ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	695a      	ldr	r2, [r3, #20]
 80055ce:	4b70      	ldr	r3, [pc, #448]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d908      	bls.n	80055ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055da:	4b6d      	ldr	r3, [pc, #436]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	496a      	ldr	r1, [pc, #424]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0310 	and.w	r3, r3, #16
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d010      	beq.n	800561a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699a      	ldr	r2, [r3, #24]
 80055fc:	4b64      	ldr	r3, [pc, #400]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005604:	429a      	cmp	r2, r3
 8005606:	d908      	bls.n	800561a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005608:	4b61      	ldr	r3, [pc, #388]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	495e      	ldr	r1, [pc, #376]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 8005616:	4313      	orrs	r3, r2
 8005618:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d010      	beq.n	8005648 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69da      	ldr	r2, [r3, #28]
 800562a:	4b59      	ldr	r3, [pc, #356]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005632:	429a      	cmp	r2, r3
 8005634:	d908      	bls.n	8005648 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005636:	4b56      	ldr	r3, [pc, #344]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	4953      	ldr	r1, [pc, #332]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 8005644:	4313      	orrs	r3, r2
 8005646:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d010      	beq.n	8005676 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	4b4d      	ldr	r3, [pc, #308]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	429a      	cmp	r2, r3
 8005662:	d908      	bls.n	8005676 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005664:	4b4a      	ldr	r3, [pc, #296]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	f023 020f 	bic.w	r2, r3, #15
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	4947      	ldr	r1, [pc, #284]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 8005672:	4313      	orrs	r3, r2
 8005674:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d055      	beq.n	800572e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005682:	4b43      	ldr	r3, [pc, #268]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	4940      	ldr	r1, [pc, #256]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 8005690:	4313      	orrs	r3, r2
 8005692:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d107      	bne.n	80056ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800569c:	4b3c      	ldr	r3, [pc, #240]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d121      	bne.n	80056ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0f6      	b.n	800589a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d107      	bne.n	80056c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056b4:	4b36      	ldr	r3, [pc, #216]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d115      	bne.n	80056ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0ea      	b.n	800589a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d107      	bne.n	80056dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056cc:	4b30      	ldr	r3, [pc, #192]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d109      	bne.n	80056ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e0de      	b.n	800589a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056dc:	4b2c      	ldr	r3, [pc, #176]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e0d6      	b.n	800589a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056ec:	4b28      	ldr	r3, [pc, #160]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	f023 0207 	bic.w	r2, r3, #7
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	4925      	ldr	r1, [pc, #148]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056fe:	f7fc f857 	bl	80017b0 <HAL_GetTick>
 8005702:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005704:	e00a      	b.n	800571c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005706:	f7fc f853 	bl	80017b0 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005714:	4293      	cmp	r3, r2
 8005716:	d901      	bls.n	800571c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e0be      	b.n	800589a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800571c:	4b1c      	ldr	r3, [pc, #112]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	429a      	cmp	r2, r3
 800572c:	d1eb      	bne.n	8005706 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d010      	beq.n	800575c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	4b14      	ldr	r3, [pc, #80]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	429a      	cmp	r2, r3
 8005748:	d208      	bcs.n	800575c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800574a:	4b11      	ldr	r3, [pc, #68]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	f023 020f 	bic.w	r2, r3, #15
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	490e      	ldr	r1, [pc, #56]	@ (8005790 <HAL_RCC_ClockConfig+0x244>)
 8005758:	4313      	orrs	r3, r2
 800575a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800575c:	4b0b      	ldr	r3, [pc, #44]	@ (800578c <HAL_RCC_ClockConfig+0x240>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 030f 	and.w	r3, r3, #15
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d214      	bcs.n	8005794 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576a:	4b08      	ldr	r3, [pc, #32]	@ (800578c <HAL_RCC_ClockConfig+0x240>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f023 020f 	bic.w	r2, r3, #15
 8005772:	4906      	ldr	r1, [pc, #24]	@ (800578c <HAL_RCC_ClockConfig+0x240>)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	4313      	orrs	r3, r2
 8005778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800577a:	4b04      	ldr	r3, [pc, #16]	@ (800578c <HAL_RCC_ClockConfig+0x240>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	429a      	cmp	r2, r3
 8005786:	d005      	beq.n	8005794 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e086      	b.n	800589a <HAL_RCC_ClockConfig+0x34e>
 800578c:	52002000 	.word	0x52002000
 8005790:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d010      	beq.n	80057c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	4b3f      	ldr	r3, [pc, #252]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d208      	bcs.n	80057c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057b0:	4b3c      	ldr	r3, [pc, #240]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	4939      	ldr	r1, [pc, #228]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d010      	beq.n	80057f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695a      	ldr	r2, [r3, #20]
 80057d2:	4b34      	ldr	r3, [pc, #208]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057da:	429a      	cmp	r2, r3
 80057dc:	d208      	bcs.n	80057f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057de:	4b31      	ldr	r3, [pc, #196]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	492e      	ldr	r1, [pc, #184]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0310 	and.w	r3, r3, #16
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d010      	beq.n	800581e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699a      	ldr	r2, [r3, #24]
 8005800:	4b28      	ldr	r3, [pc, #160]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005808:	429a      	cmp	r2, r3
 800580a:	d208      	bcs.n	800581e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800580c:	4b25      	ldr	r3, [pc, #148]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	4922      	ldr	r1, [pc, #136]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 800581a:	4313      	orrs	r3, r2
 800581c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b00      	cmp	r3, #0
 8005828:	d010      	beq.n	800584c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69da      	ldr	r2, [r3, #28]
 800582e:	4b1d      	ldr	r3, [pc, #116]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005836:	429a      	cmp	r2, r3
 8005838:	d208      	bcs.n	800584c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800583a:	4b1a      	ldr	r3, [pc, #104]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	4917      	ldr	r1, [pc, #92]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 8005848:	4313      	orrs	r3, r2
 800584a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800584c:	f000 f834 	bl	80058b8 <HAL_RCC_GetSysClockFreq>
 8005850:	4602      	mov	r2, r0
 8005852:	4b14      	ldr	r3, [pc, #80]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	0a1b      	lsrs	r3, r3, #8
 8005858:	f003 030f 	and.w	r3, r3, #15
 800585c:	4912      	ldr	r1, [pc, #72]	@ (80058a8 <HAL_RCC_ClockConfig+0x35c>)
 800585e:	5ccb      	ldrb	r3, [r1, r3]
 8005860:	f003 031f 	and.w	r3, r3, #31
 8005864:	fa22 f303 	lsr.w	r3, r2, r3
 8005868:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800586a:	4b0e      	ldr	r3, [pc, #56]	@ (80058a4 <HAL_RCC_ClockConfig+0x358>)
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	4a0d      	ldr	r2, [pc, #52]	@ (80058a8 <HAL_RCC_ClockConfig+0x35c>)
 8005874:	5cd3      	ldrb	r3, [r2, r3]
 8005876:	f003 031f 	and.w	r3, r3, #31
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	fa22 f303 	lsr.w	r3, r2, r3
 8005880:	4a0a      	ldr	r2, [pc, #40]	@ (80058ac <HAL_RCC_ClockConfig+0x360>)
 8005882:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005884:	4a0a      	ldr	r2, [pc, #40]	@ (80058b0 <HAL_RCC_ClockConfig+0x364>)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800588a:	4b0a      	ldr	r3, [pc, #40]	@ (80058b4 <HAL_RCC_ClockConfig+0x368>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4618      	mov	r0, r3
 8005890:	f7fb ff44 	bl	800171c <HAL_InitTick>
 8005894:	4603      	mov	r3, r0
 8005896:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005898:	7bfb      	ldrb	r3, [r7, #15]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	58024400 	.word	0x58024400
 80058a8:	08009ba0 	.word	0x08009ba0
 80058ac:	24000004 	.word	0x24000004
 80058b0:	24000000 	.word	0x24000000
 80058b4:	24000008 	.word	0x24000008

080058b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b089      	sub	sp, #36	@ 0x24
 80058bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058be:	4bb3      	ldr	r3, [pc, #716]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058c6:	2b18      	cmp	r3, #24
 80058c8:	f200 8155 	bhi.w	8005b76 <HAL_RCC_GetSysClockFreq+0x2be>
 80058cc:	a201      	add	r2, pc, #4	@ (adr r2, 80058d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80058ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d2:	bf00      	nop
 80058d4:	08005939 	.word	0x08005939
 80058d8:	08005b77 	.word	0x08005b77
 80058dc:	08005b77 	.word	0x08005b77
 80058e0:	08005b77 	.word	0x08005b77
 80058e4:	08005b77 	.word	0x08005b77
 80058e8:	08005b77 	.word	0x08005b77
 80058ec:	08005b77 	.word	0x08005b77
 80058f0:	08005b77 	.word	0x08005b77
 80058f4:	0800595f 	.word	0x0800595f
 80058f8:	08005b77 	.word	0x08005b77
 80058fc:	08005b77 	.word	0x08005b77
 8005900:	08005b77 	.word	0x08005b77
 8005904:	08005b77 	.word	0x08005b77
 8005908:	08005b77 	.word	0x08005b77
 800590c:	08005b77 	.word	0x08005b77
 8005910:	08005b77 	.word	0x08005b77
 8005914:	08005965 	.word	0x08005965
 8005918:	08005b77 	.word	0x08005b77
 800591c:	08005b77 	.word	0x08005b77
 8005920:	08005b77 	.word	0x08005b77
 8005924:	08005b77 	.word	0x08005b77
 8005928:	08005b77 	.word	0x08005b77
 800592c:	08005b77 	.word	0x08005b77
 8005930:	08005b77 	.word	0x08005b77
 8005934:	0800596b 	.word	0x0800596b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005938:	4b94      	ldr	r3, [pc, #592]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0320 	and.w	r3, r3, #32
 8005940:	2b00      	cmp	r3, #0
 8005942:	d009      	beq.n	8005958 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005944:	4b91      	ldr	r3, [pc, #580]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	08db      	lsrs	r3, r3, #3
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	4a90      	ldr	r2, [pc, #576]	@ (8005b90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005950:	fa22 f303 	lsr.w	r3, r2, r3
 8005954:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005956:	e111      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005958:	4b8d      	ldr	r3, [pc, #564]	@ (8005b90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800595a:	61bb      	str	r3, [r7, #24]
      break;
 800595c:	e10e      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800595e:	4b8d      	ldr	r3, [pc, #564]	@ (8005b94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005960:	61bb      	str	r3, [r7, #24]
      break;
 8005962:	e10b      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005964:	4b8c      	ldr	r3, [pc, #560]	@ (8005b98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005966:	61bb      	str	r3, [r7, #24]
      break;
 8005968:	e108      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800596a:	4b88      	ldr	r3, [pc, #544]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800596c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596e:	f003 0303 	and.w	r3, r3, #3
 8005972:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005974:	4b85      	ldr	r3, [pc, #532]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005978:	091b      	lsrs	r3, r3, #4
 800597a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800597e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005980:	4b82      	ldr	r3, [pc, #520]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800598a:	4b80      	ldr	r3, [pc, #512]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800598c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800598e:	08db      	lsrs	r3, r3, #3
 8005990:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	fb02 f303 	mul.w	r3, r2, r3
 800599a:	ee07 3a90 	vmov	s15, r3
 800599e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 80e1 	beq.w	8005b70 <HAL_RCC_GetSysClockFreq+0x2b8>
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	f000 8083 	beq.w	8005abc <HAL_RCC_GetSysClockFreq+0x204>
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	f200 80a1 	bhi.w	8005b00 <HAL_RCC_GetSysClockFreq+0x248>
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <HAL_RCC_GetSysClockFreq+0x114>
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d056      	beq.n	8005a78 <HAL_RCC_GetSysClockFreq+0x1c0>
 80059ca:	e099      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059cc:	4b6f      	ldr	r3, [pc, #444]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0320 	and.w	r3, r3, #32
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d02d      	beq.n	8005a34 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059d8:	4b6c      	ldr	r3, [pc, #432]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	08db      	lsrs	r3, r3, #3
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	4a6b      	ldr	r2, [pc, #428]	@ (8005b90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059e4:	fa22 f303 	lsr.w	r3, r2, r3
 80059e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	ee07 3a90 	vmov	s15, r3
 80059f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	ee07 3a90 	vmov	s15, r3
 80059fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a02:	4b62      	ldr	r3, [pc, #392]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a12:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a16:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005b9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005a32:	e087      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	ee07 3a90 	vmov	s15, r3
 8005a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005ba0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a46:	4b51      	ldr	r3, [pc, #324]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4e:	ee07 3a90 	vmov	s15, r3
 8005a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a56:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a5a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005b9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a76:	e065      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a82:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005ba4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a8a:	4b40      	ldr	r3, [pc, #256]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a9e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005b9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005aba:	e043      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005ba8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ace:	4b2f      	ldr	r3, [pc, #188]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ade:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ae2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005b9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005afe:	e021      	b.n	8005b44 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005ba4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b12:	4b1e      	ldr	r3, [pc, #120]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b26:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005b9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b42:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005b44:	4b11      	ldr	r3, [pc, #68]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b48:	0a5b      	lsrs	r3, r3, #9
 8005b4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b4e:	3301      	adds	r3, #1
 8005b50:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	ee07 3a90 	vmov	s15, r3
 8005b58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b68:	ee17 3a90 	vmov	r3, s15
 8005b6c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005b6e:	e005      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	61bb      	str	r3, [r7, #24]
      break;
 8005b74:	e002      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005b76:	4b07      	ldr	r3, [pc, #28]	@ (8005b94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b78:	61bb      	str	r3, [r7, #24]
      break;
 8005b7a:	bf00      	nop
  }

  return sysclockfreq;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3724      	adds	r7, #36	@ 0x24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	58024400 	.word	0x58024400
 8005b90:	03d09000 	.word	0x03d09000
 8005b94:	003d0900 	.word	0x003d0900
 8005b98:	007a1200 	.word	0x007a1200
 8005b9c:	46000000 	.word	0x46000000
 8005ba0:	4c742400 	.word	0x4c742400
 8005ba4:	4a742400 	.word	0x4a742400
 8005ba8:	4af42400 	.word	0x4af42400

08005bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005bb2:	f7ff fe81 	bl	80058b8 <HAL_RCC_GetSysClockFreq>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	4b10      	ldr	r3, [pc, #64]	@ (8005bfc <HAL_RCC_GetHCLKFreq+0x50>)
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	0a1b      	lsrs	r3, r3, #8
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	490f      	ldr	r1, [pc, #60]	@ (8005c00 <HAL_RCC_GetHCLKFreq+0x54>)
 8005bc4:	5ccb      	ldrb	r3, [r1, r3]
 8005bc6:	f003 031f 	and.w	r3, r3, #31
 8005bca:	fa22 f303 	lsr.w	r3, r2, r3
 8005bce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8005bfc <HAL_RCC_GetHCLKFreq+0x50>)
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	f003 030f 	and.w	r3, r3, #15
 8005bd8:	4a09      	ldr	r2, [pc, #36]	@ (8005c00 <HAL_RCC_GetHCLKFreq+0x54>)
 8005bda:	5cd3      	ldrb	r3, [r2, r3]
 8005bdc:	f003 031f 	and.w	r3, r3, #31
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	fa22 f303 	lsr.w	r3, r2, r3
 8005be6:	4a07      	ldr	r2, [pc, #28]	@ (8005c04 <HAL_RCC_GetHCLKFreq+0x58>)
 8005be8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005bea:	4a07      	ldr	r2, [pc, #28]	@ (8005c08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005bf0:	4b04      	ldr	r3, [pc, #16]	@ (8005c04 <HAL_RCC_GetHCLKFreq+0x58>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	58024400 	.word	0x58024400
 8005c00:	08009ba0 	.word	0x08009ba0
 8005c04:	24000004 	.word	0x24000004
 8005c08:	24000000 	.word	0x24000000

08005c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005c10:	f7ff ffcc 	bl	8005bac <HAL_RCC_GetHCLKFreq>
 8005c14:	4602      	mov	r2, r0
 8005c16:	4b06      	ldr	r3, [pc, #24]	@ (8005c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	091b      	lsrs	r3, r3, #4
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	4904      	ldr	r1, [pc, #16]	@ (8005c34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c22:	5ccb      	ldrb	r3, [r1, r3]
 8005c24:	f003 031f 	and.w	r3, r3, #31
 8005c28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	58024400 	.word	0x58024400
 8005c34:	08009ba0 	.word	0x08009ba0

08005c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005c3c:	f7ff ffb6 	bl	8005bac <HAL_RCC_GetHCLKFreq>
 8005c40:	4602      	mov	r2, r0
 8005c42:	4b06      	ldr	r3, [pc, #24]	@ (8005c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	0a1b      	lsrs	r3, r3, #8
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	4904      	ldr	r1, [pc, #16]	@ (8005c60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c4e:	5ccb      	ldrb	r3, [r1, r3]
 8005c50:	f003 031f 	and.w	r3, r3, #31
 8005c54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	58024400 	.word	0x58024400
 8005c60:	08009ba0 	.word	0x08009ba0

08005c64 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c68:	b0ca      	sub	sp, #296	@ 0x128
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c70:	2300      	movs	r3, #0
 8005c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c76:	2300      	movs	r3, #0
 8005c78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c84:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005c88:	2500      	movs	r5, #0
 8005c8a:	ea54 0305 	orrs.w	r3, r4, r5
 8005c8e:	d049      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c9a:	d02f      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ca0:	d828      	bhi.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ca2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ca6:	d01a      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ca8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cac:	d822      	bhi.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005cb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cb6:	d007      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005cb8:	e01c      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cba:	4bb8      	ldr	r3, [pc, #736]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbe:	4ab7      	ldr	r2, [pc, #732]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cc6:	e01a      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ccc:	3308      	adds	r3, #8
 8005cce:	2102      	movs	r1, #2
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f002 fb61 	bl	8008398 <RCCEx_PLL2_Config>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cdc:	e00f      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce2:	3328      	adds	r3, #40	@ 0x28
 8005ce4:	2102      	movs	r1, #2
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f002 fc08 	bl	80084fc <RCCEx_PLL3_Config>
 8005cec:	4603      	mov	r3, r0
 8005cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cf2:	e004      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cfa:	e000      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10a      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005d06:	4ba5      	ldr	r3, [pc, #660]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d14:	4aa1      	ldr	r2, [pc, #644]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d16:	430b      	orrs	r3, r1
 8005d18:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d1a:	e003      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005d30:	f04f 0900 	mov.w	r9, #0
 8005d34:	ea58 0309 	orrs.w	r3, r8, r9
 8005d38:	d047      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	d82a      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005d44:	a201      	add	r2, pc, #4	@ (adr r2, 8005d4c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005d61 	.word	0x08005d61
 8005d50:	08005d6f 	.word	0x08005d6f
 8005d54:	08005d85 	.word	0x08005d85
 8005d58:	08005da3 	.word	0x08005da3
 8005d5c:	08005da3 	.word	0x08005da3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d60:	4b8e      	ldr	r3, [pc, #568]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d64:	4a8d      	ldr	r2, [pc, #564]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d6c:	e01a      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d72:	3308      	adds	r3, #8
 8005d74:	2100      	movs	r1, #0
 8005d76:	4618      	mov	r0, r3
 8005d78:	f002 fb0e 	bl	8008398 <RCCEx_PLL2_Config>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d82:	e00f      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d88:	3328      	adds	r3, #40	@ 0x28
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f002 fbb5 	bl	80084fc <RCCEx_PLL3_Config>
 8005d92:	4603      	mov	r3, r0
 8005d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d98:	e004      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005da0:	e000      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dac:	4b7b      	ldr	r3, [pc, #492]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db0:	f023 0107 	bic.w	r1, r3, #7
 8005db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dba:	4a78      	ldr	r2, [pc, #480]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8005dc0:	e003      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005dd6:	f04f 0b00 	mov.w	fp, #0
 8005dda:	ea5a 030b 	orrs.w	r3, sl, fp
 8005dde:	d04c      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dea:	d030      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005dec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005df0:	d829      	bhi.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005df2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005df4:	d02d      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005df6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005df8:	d825      	bhi.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005dfa:	2b80      	cmp	r3, #128	@ 0x80
 8005dfc:	d018      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005dfe:	2b80      	cmp	r3, #128	@ 0x80
 8005e00:	d821      	bhi.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005e06:	2b40      	cmp	r3, #64	@ 0x40
 8005e08:	d007      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005e0a:	e01c      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e0c:	4b63      	ldr	r3, [pc, #396]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e10:	4a62      	ldr	r2, [pc, #392]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e18:	e01c      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1e:	3308      	adds	r3, #8
 8005e20:	2100      	movs	r1, #0
 8005e22:	4618      	mov	r0, r3
 8005e24:	f002 fab8 	bl	8008398 <RCCEx_PLL2_Config>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e2e:	e011      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e34:	3328      	adds	r3, #40	@ 0x28
 8005e36:	2100      	movs	r1, #0
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f002 fb5f 	bl	80084fc <RCCEx_PLL3_Config>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e44:	e006      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e4c:	e002      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005e4e:	bf00      	nop
 8005e50:	e000      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10a      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005e5c:	4b4f      	ldr	r3, [pc, #316]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e60:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e6a:	4a4c      	ldr	r2, [pc, #304]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e70:	e003      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e82:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005e86:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005e90:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005e94:	460b      	mov	r3, r1
 8005e96:	4313      	orrs	r3, r2
 8005e98:	d053      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ea2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ea6:	d035      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005ea8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005eac:	d82e      	bhi.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005eae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005eb2:	d031      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005eb4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005eb8:	d828      	bhi.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005eba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ebe:	d01a      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005ec0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ec4:	d822      	bhi.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005eca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ece:	d007      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005ed0:	e01c      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed2:	4b32      	ldr	r3, [pc, #200]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed6:	4a31      	ldr	r2, [pc, #196]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005edc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ede:	e01c      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee4:	3308      	adds	r3, #8
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f002 fa55 	bl	8008398 <RCCEx_PLL2_Config>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005ef4:	e011      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efa:	3328      	adds	r3, #40	@ 0x28
 8005efc:	2100      	movs	r1, #0
 8005efe:	4618      	mov	r0, r3
 8005f00:	f002 fafc 	bl	80084fc <RCCEx_PLL3_Config>
 8005f04:	4603      	mov	r3, r0
 8005f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f0a:	e006      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f12:	e002      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005f14:	bf00      	nop
 8005f16:	e000      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10b      	bne.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005f22:	4b1e      	ldr	r3, [pc, #120]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f26:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f32:	4a1a      	ldr	r2, [pc, #104]	@ (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f34:	430b      	orrs	r3, r1
 8005f36:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f38:	e003      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005f4e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005f52:	2300      	movs	r3, #0
 8005f54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005f58:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	d056      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f6e:	d038      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005f70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f74:	d831      	bhi.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f7a:	d034      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005f7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f80:	d82b      	bhi.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f86:	d01d      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005f88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f8c:	d825      	bhi.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d006      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005f92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f96:	d00a      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005f98:	e01f      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f9a:	bf00      	nop
 8005f9c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fa0:	4ba2      	ldr	r3, [pc, #648]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa4:	4aa1      	ldr	r2, [pc, #644]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005faa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fac:	e01c      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f002 f9ee 	bl	8008398 <RCCEx_PLL2_Config>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005fc2:	e011      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc8:	3328      	adds	r3, #40	@ 0x28
 8005fca:	2100      	movs	r1, #0
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f002 fa95 	bl	80084fc <RCCEx_PLL3_Config>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fd8:	e006      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fe0:	e002      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005fe2:	bf00      	nop
 8005fe4:	e000      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10b      	bne.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005ff0:	4b8e      	ldr	r3, [pc, #568]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006000:	4a8a      	ldr	r2, [pc, #552]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006002:	430b      	orrs	r3, r1
 8006004:	6593      	str	r3, [r2, #88]	@ 0x58
 8006006:	e003      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800600c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006018:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800601c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006020:	2300      	movs	r3, #0
 8006022:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006026:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800602a:	460b      	mov	r3, r1
 800602c:	4313      	orrs	r3, r2
 800602e:	d03a      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006036:	2b30      	cmp	r3, #48	@ 0x30
 8006038:	d01f      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800603a:	2b30      	cmp	r3, #48	@ 0x30
 800603c:	d819      	bhi.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800603e:	2b20      	cmp	r3, #32
 8006040:	d00c      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006042:	2b20      	cmp	r3, #32
 8006044:	d815      	bhi.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006046:	2b00      	cmp	r3, #0
 8006048:	d019      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800604a:	2b10      	cmp	r3, #16
 800604c:	d111      	bne.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800604e:	4b77      	ldr	r3, [pc, #476]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006052:	4a76      	ldr	r2, [pc, #472]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006058:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800605a:	e011      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800605c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006060:	3308      	adds	r3, #8
 8006062:	2102      	movs	r1, #2
 8006064:	4618      	mov	r0, r3
 8006066:	f002 f997 	bl	8008398 <RCCEx_PLL2_Config>
 800606a:	4603      	mov	r3, r0
 800606c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006070:	e006      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006078:	e002      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800607a:	bf00      	nop
 800607c:	e000      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800607e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10a      	bne.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006088:	4b68      	ldr	r3, [pc, #416]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800608a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800608c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006096:	4a65      	ldr	r2, [pc, #404]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006098:	430b      	orrs	r3, r1
 800609a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800609c:	e003      	b.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80060a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80060b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80060b6:	2300      	movs	r3, #0
 80060b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80060bc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4313      	orrs	r3, r2
 80060c4:	d051      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80060c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060d0:	d035      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80060d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060d6:	d82e      	bhi.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80060d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80060dc:	d031      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80060de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80060e2:	d828      	bhi.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80060e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060e8:	d01a      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80060ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060ee:	d822      	bhi.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80060f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060f8:	d007      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80060fa:	e01c      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060fc:	4b4b      	ldr	r3, [pc, #300]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006100:	4a4a      	ldr	r2, [pc, #296]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006102:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006106:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006108:	e01c      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800610a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610e:	3308      	adds	r3, #8
 8006110:	2100      	movs	r1, #0
 8006112:	4618      	mov	r0, r3
 8006114:	f002 f940 	bl	8008398 <RCCEx_PLL2_Config>
 8006118:	4603      	mov	r3, r0
 800611a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800611e:	e011      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006124:	3328      	adds	r3, #40	@ 0x28
 8006126:	2100      	movs	r1, #0
 8006128:	4618      	mov	r0, r3
 800612a:	f002 f9e7 	bl	80084fc <RCCEx_PLL3_Config>
 800612e:	4603      	mov	r3, r0
 8006130:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006134:	e006      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800613c:	e002      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800613e:	bf00      	nop
 8006140:	e000      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006144:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800614c:	4b37      	ldr	r3, [pc, #220]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800614e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006150:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800615a:	4a34      	ldr	r2, [pc, #208]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800615c:	430b      	orrs	r3, r1
 800615e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006160:	e003      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800616a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006172:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006176:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800617a:	2300      	movs	r3, #0
 800617c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006180:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006184:	460b      	mov	r3, r1
 8006186:	4313      	orrs	r3, r2
 8006188:	d056      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800618a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006190:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006194:	d033      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006196:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800619a:	d82c      	bhi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800619c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061a0:	d02f      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80061a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061a6:	d826      	bhi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80061a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80061ac:	d02b      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80061ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80061b2:	d820      	bhi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80061b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061b8:	d012      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80061ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061be:	d81a      	bhi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d022      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80061c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061c8:	d115      	bne.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ce:	3308      	adds	r3, #8
 80061d0:	2101      	movs	r1, #1
 80061d2:	4618      	mov	r0, r3
 80061d4:	f002 f8e0 	bl	8008398 <RCCEx_PLL2_Config>
 80061d8:	4603      	mov	r3, r0
 80061da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80061de:	e015      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e4:	3328      	adds	r3, #40	@ 0x28
 80061e6:	2101      	movs	r1, #1
 80061e8:	4618      	mov	r0, r3
 80061ea:	f002 f987 	bl	80084fc <RCCEx_PLL3_Config>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80061f4:	e00a      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061fc:	e006      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061fe:	bf00      	nop
 8006200:	e004      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006202:	bf00      	nop
 8006204:	e002      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006206:	bf00      	nop
 8006208:	e000      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800620a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800620c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10d      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006214:	4b05      	ldr	r3, [pc, #20]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006218:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800621c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006220:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006222:	4a02      	ldr	r2, [pc, #8]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006224:	430b      	orrs	r3, r1
 8006226:	6513      	str	r3, [r2, #80]	@ 0x50
 8006228:	e006      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800622a:	bf00      	nop
 800622c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006230:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006234:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006248:	2300      	movs	r3, #0
 800624a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800624e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006252:	460b      	mov	r3, r1
 8006254:	4313      	orrs	r3, r2
 8006256:	d055      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800625c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006260:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006264:	d033      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006266:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800626a:	d82c      	bhi.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800626c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006270:	d02f      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006276:	d826      	bhi.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006278:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800627c:	d02b      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800627e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006282:	d820      	bhi.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006284:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006288:	d012      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800628a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800628e:	d81a      	bhi.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006290:	2b00      	cmp	r3, #0
 8006292:	d022      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006294:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006298:	d115      	bne.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800629a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629e:	3308      	adds	r3, #8
 80062a0:	2101      	movs	r1, #1
 80062a2:	4618      	mov	r0, r3
 80062a4:	f002 f878 	bl	8008398 <RCCEx_PLL2_Config>
 80062a8:	4603      	mov	r3, r0
 80062aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80062ae:	e015      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b4:	3328      	adds	r3, #40	@ 0x28
 80062b6:	2101      	movs	r1, #1
 80062b8:	4618      	mov	r0, r3
 80062ba:	f002 f91f 	bl	80084fc <RCCEx_PLL3_Config>
 80062be:	4603      	mov	r3, r0
 80062c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80062c4:	e00a      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062cc:	e006      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80062ce:	bf00      	nop
 80062d0:	e004      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80062d2:	bf00      	nop
 80062d4:	e002      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80062d6:	bf00      	nop
 80062d8:	e000      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80062da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10b      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80062e4:	4ba3      	ldr	r3, [pc, #652]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80062ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062f4:	4a9f      	ldr	r2, [pc, #636]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062f6:	430b      	orrs	r3, r1
 80062f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80062fa:	e003      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006300:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006310:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006314:	2300      	movs	r3, #0
 8006316:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800631a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800631e:	460b      	mov	r3, r1
 8006320:	4313      	orrs	r3, r2
 8006322:	d037      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800632a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800632e:	d00e      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006330:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006334:	d816      	bhi.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006336:	2b00      	cmp	r3, #0
 8006338:	d018      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800633a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800633e:	d111      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006340:	4b8c      	ldr	r3, [pc, #560]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006344:	4a8b      	ldr	r2, [pc, #556]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800634a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800634c:	e00f      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800634e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006352:	3308      	adds	r3, #8
 8006354:	2101      	movs	r1, #1
 8006356:	4618      	mov	r0, r3
 8006358:	f002 f81e 	bl	8008398 <RCCEx_PLL2_Config>
 800635c:	4603      	mov	r3, r0
 800635e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006362:	e004      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800636a:	e000      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800636c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800636e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10a      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006376:	4b7f      	ldr	r3, [pc, #508]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800637a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800637e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006384:	4a7b      	ldr	r2, [pc, #492]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006386:	430b      	orrs	r3, r1
 8006388:	6513      	str	r3, [r2, #80]	@ 0x50
 800638a:	e003      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80063a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063a4:	2300      	movs	r3, #0
 80063a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80063aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80063ae:	460b      	mov	r3, r1
 80063b0:	4313      	orrs	r3, r2
 80063b2:	d039      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80063b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d81c      	bhi.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80063be:	a201      	add	r2, pc, #4	@ (adr r2, 80063c4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80063c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c4:	08006401 	.word	0x08006401
 80063c8:	080063d5 	.word	0x080063d5
 80063cc:	080063e3 	.word	0x080063e3
 80063d0:	08006401 	.word	0x08006401
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063d4:	4b67      	ldr	r3, [pc, #412]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d8:	4a66      	ldr	r2, [pc, #408]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80063e0:	e00f      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e6:	3308      	adds	r3, #8
 80063e8:	2102      	movs	r1, #2
 80063ea:	4618      	mov	r0, r3
 80063ec:	f001 ffd4 	bl	8008398 <RCCEx_PLL2_Config>
 80063f0:	4603      	mov	r3, r0
 80063f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80063f6:	e004      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063fe:	e000      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10a      	bne.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800640a:	4b5a      	ldr	r3, [pc, #360]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800640c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800640e:	f023 0103 	bic.w	r1, r3, #3
 8006412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006418:	4a56      	ldr	r2, [pc, #344]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800641a:	430b      	orrs	r3, r1
 800641c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800641e:	e003      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006420:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006424:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006434:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006438:	2300      	movs	r3, #0
 800643a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800643e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006442:	460b      	mov	r3, r1
 8006444:	4313      	orrs	r3, r2
 8006446:	f000 809f 	beq.w	8006588 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800644a:	4b4b      	ldr	r3, [pc, #300]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a4a      	ldr	r2, [pc, #296]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006454:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006456:	f7fb f9ab 	bl	80017b0 <HAL_GetTick>
 800645a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800645e:	e00b      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006460:	f7fb f9a6 	bl	80017b0 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b64      	cmp	r3, #100	@ 0x64
 800646e:	d903      	bls.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006476:	e005      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006478:	4b3f      	ldr	r3, [pc, #252]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0ed      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006484:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006488:	2b00      	cmp	r3, #0
 800648a:	d179      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800648c:	4b39      	ldr	r3, [pc, #228]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800648e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006494:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006498:	4053      	eors	r3, r2
 800649a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d015      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064a2:	4b34      	ldr	r3, [pc, #208]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064ae:	4b31      	ldr	r3, [pc, #196]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b2:	4a30      	ldr	r2, [pc, #192]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064b8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064ba:	4b2e      	ldr	r3, [pc, #184]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064be:	4a2d      	ldr	r2, [pc, #180]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064c4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80064c6:	4a2b      	ldr	r2, [pc, #172]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064cc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80064ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80064d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064da:	d118      	bne.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064dc:	f7fb f968 	bl	80017b0 <HAL_GetTick>
 80064e0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064e4:	e00d      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064e6:	f7fb f963 	bl	80017b0 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80064f0:	1ad2      	subs	r2, r2, r3
 80064f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d903      	bls.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006500:	e005      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006502:	4b1c      	ldr	r3, [pc, #112]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0eb      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800650e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006512:	2b00      	cmp	r3, #0
 8006514:	d129      	bne.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800651e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006522:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006526:	d10e      	bne.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006528:	4b12      	ldr	r3, [pc, #72]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006534:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006538:	091a      	lsrs	r2, r3, #4
 800653a:	4b10      	ldr	r3, [pc, #64]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800653c:	4013      	ands	r3, r2
 800653e:	4a0d      	ldr	r2, [pc, #52]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006540:	430b      	orrs	r3, r1
 8006542:	6113      	str	r3, [r2, #16]
 8006544:	e005      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006546:	4b0b      	ldr	r3, [pc, #44]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	4a0a      	ldr	r2, [pc, #40]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800654c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006550:	6113      	str	r3, [r2, #16]
 8006552:	4b08      	ldr	r3, [pc, #32]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006554:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800655a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800655e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006562:	4a04      	ldr	r2, [pc, #16]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006564:	430b      	orrs	r3, r1
 8006566:	6713      	str	r3, [r2, #112]	@ 0x70
 8006568:	e00e      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800656a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800656e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006572:	e009      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006574:	58024400 	.word	0x58024400
 8006578:	58024800 	.word	0x58024800
 800657c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006584:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006590:	f002 0301 	and.w	r3, r2, #1
 8006594:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006598:	2300      	movs	r3, #0
 800659a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800659e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4313      	orrs	r3, r2
 80065a6:	f000 8089 	beq.w	80066bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80065aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065b0:	2b28      	cmp	r3, #40	@ 0x28
 80065b2:	d86b      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80065b4:	a201      	add	r2, pc, #4	@ (adr r2, 80065bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80065b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ba:	bf00      	nop
 80065bc:	08006695 	.word	0x08006695
 80065c0:	0800668d 	.word	0x0800668d
 80065c4:	0800668d 	.word	0x0800668d
 80065c8:	0800668d 	.word	0x0800668d
 80065cc:	0800668d 	.word	0x0800668d
 80065d0:	0800668d 	.word	0x0800668d
 80065d4:	0800668d 	.word	0x0800668d
 80065d8:	0800668d 	.word	0x0800668d
 80065dc:	08006661 	.word	0x08006661
 80065e0:	0800668d 	.word	0x0800668d
 80065e4:	0800668d 	.word	0x0800668d
 80065e8:	0800668d 	.word	0x0800668d
 80065ec:	0800668d 	.word	0x0800668d
 80065f0:	0800668d 	.word	0x0800668d
 80065f4:	0800668d 	.word	0x0800668d
 80065f8:	0800668d 	.word	0x0800668d
 80065fc:	08006677 	.word	0x08006677
 8006600:	0800668d 	.word	0x0800668d
 8006604:	0800668d 	.word	0x0800668d
 8006608:	0800668d 	.word	0x0800668d
 800660c:	0800668d 	.word	0x0800668d
 8006610:	0800668d 	.word	0x0800668d
 8006614:	0800668d 	.word	0x0800668d
 8006618:	0800668d 	.word	0x0800668d
 800661c:	08006695 	.word	0x08006695
 8006620:	0800668d 	.word	0x0800668d
 8006624:	0800668d 	.word	0x0800668d
 8006628:	0800668d 	.word	0x0800668d
 800662c:	0800668d 	.word	0x0800668d
 8006630:	0800668d 	.word	0x0800668d
 8006634:	0800668d 	.word	0x0800668d
 8006638:	0800668d 	.word	0x0800668d
 800663c:	08006695 	.word	0x08006695
 8006640:	0800668d 	.word	0x0800668d
 8006644:	0800668d 	.word	0x0800668d
 8006648:	0800668d 	.word	0x0800668d
 800664c:	0800668d 	.word	0x0800668d
 8006650:	0800668d 	.word	0x0800668d
 8006654:	0800668d 	.word	0x0800668d
 8006658:	0800668d 	.word	0x0800668d
 800665c:	08006695 	.word	0x08006695
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006664:	3308      	adds	r3, #8
 8006666:	2101      	movs	r1, #1
 8006668:	4618      	mov	r0, r3
 800666a:	f001 fe95 	bl	8008398 <RCCEx_PLL2_Config>
 800666e:	4603      	mov	r3, r0
 8006670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006674:	e00f      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667a:	3328      	adds	r3, #40	@ 0x28
 800667c:	2101      	movs	r1, #1
 800667e:	4618      	mov	r0, r3
 8006680:	f001 ff3c 	bl	80084fc <RCCEx_PLL3_Config>
 8006684:	4603      	mov	r3, r0
 8006686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800668a:	e004      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006692:	e000      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006694:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10a      	bne.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800669e:	4bbf      	ldr	r3, [pc, #764]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80066a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066ac:	4abb      	ldr	r2, [pc, #748]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066ae:	430b      	orrs	r3, r1
 80066b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80066b2:	e003      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80066bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	f002 0302 	and.w	r3, r2, #2
 80066c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066cc:	2300      	movs	r3, #0
 80066ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80066d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80066d6:	460b      	mov	r3, r1
 80066d8:	4313      	orrs	r3, r2
 80066da:	d041      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80066dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066e2:	2b05      	cmp	r3, #5
 80066e4:	d824      	bhi.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80066e6:	a201      	add	r2, pc, #4	@ (adr r2, 80066ec <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80066e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ec:	08006739 	.word	0x08006739
 80066f0:	08006705 	.word	0x08006705
 80066f4:	0800671b 	.word	0x0800671b
 80066f8:	08006739 	.word	0x08006739
 80066fc:	08006739 	.word	0x08006739
 8006700:	08006739 	.word	0x08006739
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006708:	3308      	adds	r3, #8
 800670a:	2101      	movs	r1, #1
 800670c:	4618      	mov	r0, r3
 800670e:	f001 fe43 	bl	8008398 <RCCEx_PLL2_Config>
 8006712:	4603      	mov	r3, r0
 8006714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006718:	e00f      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800671a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671e:	3328      	adds	r3, #40	@ 0x28
 8006720:	2101      	movs	r1, #1
 8006722:	4618      	mov	r0, r3
 8006724:	f001 feea 	bl	80084fc <RCCEx_PLL3_Config>
 8006728:	4603      	mov	r3, r0
 800672a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800672e:	e004      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006736:	e000      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800673a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10a      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006742:	4b96      	ldr	r3, [pc, #600]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006746:	f023 0107 	bic.w	r1, r3, #7
 800674a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006750:	4a92      	ldr	r2, [pc, #584]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006752:	430b      	orrs	r3, r1
 8006754:	6553      	str	r3, [r2, #84]	@ 0x54
 8006756:	e003      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006758:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800675c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	f002 0304 	and.w	r3, r2, #4
 800676c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006770:	2300      	movs	r3, #0
 8006772:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006776:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800677a:	460b      	mov	r3, r1
 800677c:	4313      	orrs	r3, r2
 800677e:	d044      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006784:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006788:	2b05      	cmp	r3, #5
 800678a:	d825      	bhi.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800678c:	a201      	add	r2, pc, #4	@ (adr r2, 8006794 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800678e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006792:	bf00      	nop
 8006794:	080067e1 	.word	0x080067e1
 8006798:	080067ad 	.word	0x080067ad
 800679c:	080067c3 	.word	0x080067c3
 80067a0:	080067e1 	.word	0x080067e1
 80067a4:	080067e1 	.word	0x080067e1
 80067a8:	080067e1 	.word	0x080067e1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b0:	3308      	adds	r3, #8
 80067b2:	2101      	movs	r1, #1
 80067b4:	4618      	mov	r0, r3
 80067b6:	f001 fdef 	bl	8008398 <RCCEx_PLL2_Config>
 80067ba:	4603      	mov	r3, r0
 80067bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80067c0:	e00f      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c6:	3328      	adds	r3, #40	@ 0x28
 80067c8:	2101      	movs	r1, #1
 80067ca:	4618      	mov	r0, r3
 80067cc:	f001 fe96 	bl	80084fc <RCCEx_PLL3_Config>
 80067d0:	4603      	mov	r3, r0
 80067d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80067d6:	e004      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067de:	e000      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80067e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10b      	bne.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067ea:	4b6c      	ldr	r3, [pc, #432]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ee:	f023 0107 	bic.w	r1, r3, #7
 80067f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067fa:	4a68      	ldr	r2, [pc, #416]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067fc:	430b      	orrs	r3, r1
 80067fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006800:	e003      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006806:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800680a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006812:	f002 0320 	and.w	r3, r2, #32
 8006816:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800681a:	2300      	movs	r3, #0
 800681c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006820:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006824:	460b      	mov	r3, r1
 8006826:	4313      	orrs	r3, r2
 8006828:	d055      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800682a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006832:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006836:	d033      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006838:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800683c:	d82c      	bhi.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800683e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006842:	d02f      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006848:	d826      	bhi.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800684a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800684e:	d02b      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006850:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006854:	d820      	bhi.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006856:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800685a:	d012      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800685c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006860:	d81a      	bhi.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006862:	2b00      	cmp	r3, #0
 8006864:	d022      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006866:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800686a:	d115      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800686c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006870:	3308      	adds	r3, #8
 8006872:	2100      	movs	r1, #0
 8006874:	4618      	mov	r0, r3
 8006876:	f001 fd8f 	bl	8008398 <RCCEx_PLL2_Config>
 800687a:	4603      	mov	r3, r0
 800687c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006880:	e015      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006886:	3328      	adds	r3, #40	@ 0x28
 8006888:	2102      	movs	r1, #2
 800688a:	4618      	mov	r0, r3
 800688c:	f001 fe36 	bl	80084fc <RCCEx_PLL3_Config>
 8006890:	4603      	mov	r3, r0
 8006892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006896:	e00a      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800689e:	e006      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80068a0:	bf00      	nop
 80068a2:	e004      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80068a4:	bf00      	nop
 80068a6:	e002      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80068a8:	bf00      	nop
 80068aa:	e000      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80068ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10b      	bne.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068b6:	4b39      	ldr	r3, [pc, #228]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80068be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068c6:	4a35      	ldr	r2, [pc, #212]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068c8:	430b      	orrs	r3, r1
 80068ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80068cc:	e003      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80068d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80068e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068e6:	2300      	movs	r3, #0
 80068e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80068ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80068f0:	460b      	mov	r3, r1
 80068f2:	4313      	orrs	r3, r2
 80068f4:	d058      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80068f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068fe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006902:	d033      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006904:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006908:	d82c      	bhi.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800690a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800690e:	d02f      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006914:	d826      	bhi.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006916:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800691a:	d02b      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800691c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006920:	d820      	bhi.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006922:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006926:	d012      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006928:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800692c:	d81a      	bhi.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800692e:	2b00      	cmp	r3, #0
 8006930:	d022      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006936:	d115      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693c:	3308      	adds	r3, #8
 800693e:	2100      	movs	r1, #0
 8006940:	4618      	mov	r0, r3
 8006942:	f001 fd29 	bl	8008398 <RCCEx_PLL2_Config>
 8006946:	4603      	mov	r3, r0
 8006948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800694c:	e015      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800694e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006952:	3328      	adds	r3, #40	@ 0x28
 8006954:	2102      	movs	r1, #2
 8006956:	4618      	mov	r0, r3
 8006958:	f001 fdd0 	bl	80084fc <RCCEx_PLL3_Config>
 800695c:	4603      	mov	r3, r0
 800695e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006962:	e00a      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800696a:	e006      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800696c:	bf00      	nop
 800696e:	e004      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006970:	bf00      	nop
 8006972:	e002      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006974:	bf00      	nop
 8006976:	e000      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800697a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10e      	bne.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006982:	4b06      	ldr	r3, [pc, #24]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006986:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800698a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006992:	4a02      	ldr	r2, [pc, #8]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006994:	430b      	orrs	r3, r1
 8006996:	6593      	str	r3, [r2, #88]	@ 0x58
 8006998:	e006      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800699a:	bf00      	nop
 800699c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80069a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80069b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069b8:	2300      	movs	r3, #0
 80069ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80069be:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80069c2:	460b      	mov	r3, r1
 80069c4:	4313      	orrs	r3, r2
 80069c6:	d055      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80069c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069d0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80069d4:	d033      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80069d6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80069da:	d82c      	bhi.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069e0:	d02f      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80069e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069e6:	d826      	bhi.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069e8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80069ec:	d02b      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80069ee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80069f2:	d820      	bhi.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069f8:	d012      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80069fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069fe:	d81a      	bhi.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d022      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006a04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a08:	d115      	bne.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a0e:	3308      	adds	r3, #8
 8006a10:	2100      	movs	r1, #0
 8006a12:	4618      	mov	r0, r3
 8006a14:	f001 fcc0 	bl	8008398 <RCCEx_PLL2_Config>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a1e:	e015      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a24:	3328      	adds	r3, #40	@ 0x28
 8006a26:	2102      	movs	r1, #2
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f001 fd67 	bl	80084fc <RCCEx_PLL3_Config>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a34:	e00a      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a3c:	e006      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a3e:	bf00      	nop
 8006a40:	e004      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a42:	bf00      	nop
 8006a44:	e002      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a46:	bf00      	nop
 8006a48:	e000      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10b      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006a54:	4ba1      	ldr	r3, [pc, #644]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a58:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a64:	4a9d      	ldr	r2, [pc, #628]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a66:	430b      	orrs	r3, r1
 8006a68:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a6a:	e003      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7c:	f002 0308 	and.w	r3, r2, #8
 8006a80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a84:	2300      	movs	r3, #0
 8006a86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a8a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4313      	orrs	r3, r2
 8006a92:	d01e      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aa0:	d10c      	bne.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa6:	3328      	adds	r3, #40	@ 0x28
 8006aa8:	2102      	movs	r1, #2
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f001 fd26 	bl	80084fc <RCCEx_PLL3_Config>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006abc:	4b87      	ldr	r3, [pc, #540]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006acc:	4a83      	ldr	r2, [pc, #524]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ace:	430b      	orrs	r3, r1
 8006ad0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ada:	f002 0310 	and.w	r3, r2, #16
 8006ade:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006ae8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006aec:	460b      	mov	r3, r1
 8006aee:	4313      	orrs	r3, r2
 8006af0:	d01e      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006afe:	d10c      	bne.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b04:	3328      	adds	r3, #40	@ 0x28
 8006b06:	2102      	movs	r1, #2
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f001 fcf7 	bl	80084fc <RCCEx_PLL3_Config>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b1a:	4b70      	ldr	r3, [pc, #448]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b2a:	4a6c      	ldr	r2, [pc, #432]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b38:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006b3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b40:	2300      	movs	r3, #0
 8006b42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b46:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	d03e      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b5c:	d022      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006b5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b62:	d81b      	bhi.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d003      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b6c:	d00b      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006b6e:	e015      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b74:	3308      	adds	r3, #8
 8006b76:	2100      	movs	r1, #0
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f001 fc0d 	bl	8008398 <RCCEx_PLL2_Config>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b84:	e00f      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8a:	3328      	adds	r3, #40	@ 0x28
 8006b8c:	2102      	movs	r1, #2
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f001 fcb4 	bl	80084fc <RCCEx_PLL3_Config>
 8006b94:	4603      	mov	r3, r0
 8006b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b9a:	e004      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ba2:	e000      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10b      	bne.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006bae:	4b4b      	ldr	r3, [pc, #300]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bb2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006bbe:	4a47      	ldr	r2, [pc, #284]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bc4:	e003      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006bda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006bdc:	2300      	movs	r3, #0
 8006bde:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006be0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006be4:	460b      	mov	r3, r1
 8006be6:	4313      	orrs	r3, r2
 8006be8:	d03b      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bf2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006bf6:	d01f      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006bf8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006bfc:	d818      	bhi.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006bfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c02:	d003      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006c04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c08:	d007      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006c0a:	e011      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c0c:	4b33      	ldr	r3, [pc, #204]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c10:	4a32      	ldr	r2, [pc, #200]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c18:	e00f      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c1e:	3328      	adds	r3, #40	@ 0x28
 8006c20:	2101      	movs	r1, #1
 8006c22:	4618      	mov	r0, r3
 8006c24:	f001 fc6a 	bl	80084fc <RCCEx_PLL3_Config>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c2e:	e004      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c36:	e000      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10b      	bne.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c42:	4b26      	ldr	r3, [pc, #152]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c46:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c52:	4a22      	ldr	r2, [pc, #136]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c54:	430b      	orrs	r3, r1
 8006c56:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c58:	e003      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006c6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c70:	2300      	movs	r3, #0
 8006c72:	677b      	str	r3, [r7, #116]	@ 0x74
 8006c74:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006c78:	460b      	mov	r3, r1
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	d034      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c8c:	d007      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006c8e:	e011      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c90:	4b12      	ldr	r3, [pc, #72]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c94:	4a11      	ldr	r2, [pc, #68]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c9c:	e00e      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	2102      	movs	r1, #2
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f001 fb76 	bl	8008398 <RCCEx_PLL2_Config>
 8006cac:	4603      	mov	r3, r0
 8006cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006cb2:	e003      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10d      	bne.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006cc4:	4b05      	ldr	r3, [pc, #20]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cc8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cd2:	4a02      	ldr	r2, [pc, #8]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cd4:	430b      	orrs	r3, r1
 8006cd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006cd8:	e006      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006cda:	bf00      	nop
 8006cdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ce4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006cf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006cfa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4313      	orrs	r3, r2
 8006d02:	d00c      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d08:	3328      	adds	r3, #40	@ 0x28
 8006d0a:	2102      	movs	r1, #2
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f001 fbf5 	bl	80084fc <RCCEx_PLL3_Config>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d26:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006d2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d30:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006d34:	460b      	mov	r3, r1
 8006d36:	4313      	orrs	r3, r2
 8006d38:	d038      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d46:	d018      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006d48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d4c:	d811      	bhi.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006d4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d52:	d014      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006d54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d58:	d80b      	bhi.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d011      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006d5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d62:	d106      	bne.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d64:	4bc3      	ldr	r3, [pc, #780]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d68:	4ac2      	ldr	r2, [pc, #776]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006d70:	e008      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d78:	e004      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d7a:	bf00      	nop
 8006d7c:	e002      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d7e:	bf00      	nop
 8006d80:	e000      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10b      	bne.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d8c:	4bb9      	ldr	r3, [pc, #740]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d90:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d9c:	4ab5      	ldr	r2, [pc, #724]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d9e:	430b      	orrs	r3, r1
 8006da0:	6553      	str	r3, [r2, #84]	@ 0x54
 8006da2:	e003      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006da8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006db8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006dba:	2300      	movs	r3, #0
 8006dbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006dbe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	d009      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006dc8:	4baa      	ldr	r3, [pc, #680]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dcc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dd6:	4aa7      	ldr	r2, [pc, #668]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dd8:	430b      	orrs	r3, r1
 8006dda:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006de8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dea:	2300      	movs	r3, #0
 8006dec:	657b      	str	r3, [r7, #84]	@ 0x54
 8006dee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006df2:	460b      	mov	r3, r1
 8006df4:	4313      	orrs	r3, r2
 8006df6:	d00a      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006df8:	4b9e      	ldr	r3, [pc, #632]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006e08:	4a9a      	ldr	r2, [pc, #616]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e0a:	430b      	orrs	r3, r1
 8006e0c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e16:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e20:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006e24:	460b      	mov	r3, r1
 8006e26:	4313      	orrs	r3, r2
 8006e28:	d009      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e2a:	4b92      	ldr	r3, [pc, #584]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e2e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e38:	4a8e      	ldr	r2, [pc, #568]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e3a:	430b      	orrs	r3, r1
 8006e3c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e46:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006e4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e50:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006e54:	460b      	mov	r3, r1
 8006e56:	4313      	orrs	r3, r2
 8006e58:	d00e      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e5a:	4b86      	ldr	r3, [pc, #536]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	4a85      	ldr	r2, [pc, #532]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e60:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e64:	6113      	str	r3, [r2, #16]
 8006e66:	4b83      	ldr	r3, [pc, #524]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e68:	6919      	ldr	r1, [r3, #16]
 8006e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006e72:	4a80      	ldr	r2, [pc, #512]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e74:	430b      	orrs	r3, r1
 8006e76:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006e84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e86:	2300      	movs	r3, #0
 8006e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e8a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006e8e:	460b      	mov	r3, r1
 8006e90:	4313      	orrs	r3, r2
 8006e92:	d009      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006e94:	4b77      	ldr	r3, [pc, #476]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e98:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ea2:	4a74      	ldr	r2, [pc, #464]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006eb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	d00a      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ec4:	4b6b      	ldr	r3, [pc, #428]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ec8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ed4:	4a67      	ldr	r2, [pc, #412]	@ (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ed6:	430b      	orrs	r3, r1
 8006ed8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006eec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	d011      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efa:	3308      	adds	r3, #8
 8006efc:	2100      	movs	r1, #0
 8006efe:	4618      	mov	r0, r3
 8006f00:	f001 fa4a 	bl	8008398 <RCCEx_PLL2_Config>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	2100      	movs	r1, #0
 8006f24:	6239      	str	r1, [r7, #32]
 8006f26:	f003 0302 	and.w	r3, r3, #2
 8006f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f2c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006f30:	460b      	mov	r3, r1
 8006f32:	4313      	orrs	r3, r2
 8006f34:	d011      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f3a:	3308      	adds	r3, #8
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f001 fa2a 	bl	8008398 <RCCEx_PLL2_Config>
 8006f44:	4603      	mov	r3, r0
 8006f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f62:	2100      	movs	r1, #0
 8006f64:	61b9      	str	r1, [r7, #24]
 8006f66:	f003 0304 	and.w	r3, r3, #4
 8006f6a:	61fb      	str	r3, [r7, #28]
 8006f6c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006f70:	460b      	mov	r3, r1
 8006f72:	4313      	orrs	r3, r2
 8006f74:	d011      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	2102      	movs	r1, #2
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f001 fa0a 	bl	8008398 <RCCEx_PLL2_Config>
 8006f84:	4603      	mov	r3, r0
 8006f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	6139      	str	r1, [r7, #16]
 8006fa6:	f003 0308 	and.w	r3, r3, #8
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	d011      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fba:	3328      	adds	r3, #40	@ 0x28
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f001 fa9c 	bl	80084fc <RCCEx_PLL3_Config>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	f003 0310 	and.w	r3, r3, #16
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	d011      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffa:	3328      	adds	r3, #40	@ 0x28
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	4618      	mov	r0, r3
 8007000:	f001 fa7c 	bl	80084fc <RCCEx_PLL3_Config>
 8007004:	4603      	mov	r3, r0
 8007006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800700a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800701a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	2100      	movs	r1, #0
 8007024:	6039      	str	r1, [r7, #0]
 8007026:	f003 0320 	and.w	r3, r3, #32
 800702a:	607b      	str	r3, [r7, #4]
 800702c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007030:	460b      	mov	r3, r1
 8007032:	4313      	orrs	r3, r2
 8007034:	d011      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800703a:	3328      	adds	r3, #40	@ 0x28
 800703c:	2102      	movs	r1, #2
 800703e:	4618      	mov	r0, r3
 8007040:	f001 fa5c 	bl	80084fc <RCCEx_PLL3_Config>
 8007044:	4603      	mov	r3, r0
 8007046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800704a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007056:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800705a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	e000      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
}
 8007068:	4618      	mov	r0, r3
 800706a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800706e:	46bd      	mov	sp, r7
 8007070:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007074:	58024400 	.word	0x58024400

08007078 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b090      	sub	sp, #64	@ 0x40
 800707c:	af00      	add	r7, sp, #0
 800707e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007086:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800708a:	430b      	orrs	r3, r1
 800708c:	f040 8094 	bne.w	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007090:	4b9e      	ldr	r3, [pc, #632]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007094:	f003 0307 	and.w	r3, r3, #7
 8007098:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800709a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709c:	2b04      	cmp	r3, #4
 800709e:	f200 8087 	bhi.w	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80070a2:	a201      	add	r2, pc, #4	@ (adr r2, 80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80070a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a8:	080070bd 	.word	0x080070bd
 80070ac:	080070e5 	.word	0x080070e5
 80070b0:	0800710d 	.word	0x0800710d
 80070b4:	080071a9 	.word	0x080071a9
 80070b8:	08007135 	.word	0x08007135
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070bc:	4b93      	ldr	r3, [pc, #588]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070c8:	d108      	bne.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070ce:	4618      	mov	r0, r3
 80070d0:	f001 f810 	bl	80080f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070d8:	f000 bd45 	b.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070e0:	f000 bd41 	b.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070e4:	4b89      	ldr	r3, [pc, #548]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070f0:	d108      	bne.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070f2:	f107 0318 	add.w	r3, r7, #24
 80070f6:	4618      	mov	r0, r3
 80070f8:	f000 fd54 	bl	8007ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007100:	f000 bd31 	b.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007104:	2300      	movs	r3, #0
 8007106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007108:	f000 bd2d 	b.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800710c:	4b7f      	ldr	r3, [pc, #508]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007118:	d108      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800711a:	f107 030c 	add.w	r3, r7, #12
 800711e:	4618      	mov	r0, r3
 8007120:	f000 fe94 	bl	8007e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007128:	f000 bd1d 	b.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800712c:	2300      	movs	r3, #0
 800712e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007130:	f000 bd19 	b.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007134:	4b75      	ldr	r3, [pc, #468]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007138:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800713c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800713e:	4b73      	ldr	r3, [pc, #460]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0304 	and.w	r3, r3, #4
 8007146:	2b04      	cmp	r3, #4
 8007148:	d10c      	bne.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800714a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800714c:	2b00      	cmp	r3, #0
 800714e:	d109      	bne.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007150:	4b6e      	ldr	r3, [pc, #440]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	08db      	lsrs	r3, r3, #3
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	4a6d      	ldr	r2, [pc, #436]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800715c:	fa22 f303 	lsr.w	r3, r2, r3
 8007160:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007162:	e01f      	b.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007164:	4b69      	ldr	r3, [pc, #420]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800716c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007170:	d106      	bne.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007174:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007178:	d102      	bne.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800717a:	4b66      	ldr	r3, [pc, #408]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800717c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800717e:	e011      	b.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007180:	4b62      	ldr	r3, [pc, #392]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007188:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800718c:	d106      	bne.n	800719c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800718e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007194:	d102      	bne.n	800719c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007196:	4b60      	ldr	r3, [pc, #384]	@ (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007198:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800719a:	e003      	b.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800719c:	2300      	movs	r3, #0
 800719e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80071a0:	f000 bce1 	b.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071a4:	f000 bcdf 	b.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80071a8:	4b5c      	ldr	r3, [pc, #368]	@ (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80071aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071ac:	f000 bcdb 	b.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071b4:	f000 bcd7 	b.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80071b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071bc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80071c0:	430b      	orrs	r3, r1
 80071c2:	f040 80ad 	bne.w	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80071c6:	4b51      	ldr	r3, [pc, #324]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80071c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071ca:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80071ce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80071d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071d6:	d056      	beq.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80071d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071de:	f200 8090 	bhi.w	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80071e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e4:	2bc0      	cmp	r3, #192	@ 0xc0
 80071e6:	f000 8088 	beq.w	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80071ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ec:	2bc0      	cmp	r3, #192	@ 0xc0
 80071ee:	f200 8088 	bhi.w	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80071f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f4:	2b80      	cmp	r3, #128	@ 0x80
 80071f6:	d032      	beq.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80071f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fa:	2b80      	cmp	r3, #128	@ 0x80
 80071fc:	f200 8081 	bhi.w	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007208:	2b40      	cmp	r3, #64	@ 0x40
 800720a:	d014      	beq.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800720c:	e079      	b.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800720e:	4b3f      	ldr	r3, [pc, #252]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007216:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800721a:	d108      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800721c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007220:	4618      	mov	r0, r3
 8007222:	f000 ff67 	bl	80080f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800722a:	f000 bc9c 	b.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007232:	f000 bc98 	b.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007236:	4b35      	ldr	r3, [pc, #212]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800723e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007242:	d108      	bne.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007244:	f107 0318 	add.w	r3, r7, #24
 8007248:	4618      	mov	r0, r3
 800724a:	f000 fcab 	bl	8007ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007252:	f000 bc88 	b.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007256:	2300      	movs	r3, #0
 8007258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800725a:	f000 bc84 	b.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800725e:	4b2b      	ldr	r3, [pc, #172]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007266:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800726a:	d108      	bne.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800726c:	f107 030c 	add.w	r3, r7, #12
 8007270:	4618      	mov	r0, r3
 8007272:	f000 fdeb 	bl	8007e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800727a:	f000 bc74 	b.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800727e:	2300      	movs	r3, #0
 8007280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007282:	f000 bc70 	b.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007286:	4b21      	ldr	r3, [pc, #132]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800728a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800728e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007290:	4b1e      	ldr	r3, [pc, #120]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0304 	and.w	r3, r3, #4
 8007298:	2b04      	cmp	r3, #4
 800729a:	d10c      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800729c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d109      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072a2:	4b1a      	ldr	r3, [pc, #104]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	08db      	lsrs	r3, r3, #3
 80072a8:	f003 0303 	and.w	r3, r3, #3
 80072ac:	4a18      	ldr	r2, [pc, #96]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80072ae:	fa22 f303 	lsr.w	r3, r2, r3
 80072b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072b4:	e01f      	b.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072b6:	4b15      	ldr	r3, [pc, #84]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072c2:	d106      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80072c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072ca:	d102      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80072cc:	4b11      	ldr	r3, [pc, #68]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80072ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072d0:	e011      	b.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072d2:	4b0e      	ldr	r3, [pc, #56]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072de:	d106      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80072e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072e6:	d102      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80072e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80072ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072ec:	e003      	b.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80072ee:	2300      	movs	r3, #0
 80072f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80072f2:	f000 bc38 	b.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072f6:	f000 bc36 	b.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80072fa:	4b08      	ldr	r3, [pc, #32]	@ (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80072fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072fe:	f000 bc32 	b.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007306:	f000 bc2e 	b.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800730a:	bf00      	nop
 800730c:	58024400 	.word	0x58024400
 8007310:	03d09000 	.word	0x03d09000
 8007314:	003d0900 	.word	0x003d0900
 8007318:	007a1200 	.word	0x007a1200
 800731c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007320:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007324:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007328:	430b      	orrs	r3, r1
 800732a:	f040 809c 	bne.w	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800732e:	4b9e      	ldr	r3, [pc, #632]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007332:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007336:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800733e:	d054      	beq.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007342:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007346:	f200 808b 	bhi.w	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800734a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007350:	f000 8083 	beq.w	800745a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007356:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800735a:	f200 8081 	bhi.w	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800735e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007360:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007364:	d02f      	beq.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007368:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800736c:	d878      	bhi.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800736e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007370:	2b00      	cmp	r3, #0
 8007372:	d004      	beq.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007376:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800737a:	d012      	beq.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800737c:	e070      	b.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800737e:	4b8a      	ldr	r3, [pc, #552]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007386:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800738a:	d107      	bne.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800738c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007390:	4618      	mov	r0, r3
 8007392:	f000 feaf 	bl	80080f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800739a:	e3e4      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073a0:	e3e1      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073a2:	4b81      	ldr	r3, [pc, #516]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073ae:	d107      	bne.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073b0:	f107 0318 	add.w	r3, r7, #24
 80073b4:	4618      	mov	r0, r3
 80073b6:	f000 fbf5 	bl	8007ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073be:	e3d2      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073c0:	2300      	movs	r3, #0
 80073c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073c4:	e3cf      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073c6:	4b78      	ldr	r3, [pc, #480]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073d2:	d107      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073d4:	f107 030c 	add.w	r3, r7, #12
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 fd37 	bl	8007e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073e2:	e3c0      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073e4:	2300      	movs	r3, #0
 80073e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073e8:	e3bd      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073ea:	4b6f      	ldr	r3, [pc, #444]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80073f2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073f4:	4b6c      	ldr	r3, [pc, #432]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0304 	and.w	r3, r3, #4
 80073fc:	2b04      	cmp	r3, #4
 80073fe:	d10c      	bne.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007402:	2b00      	cmp	r3, #0
 8007404:	d109      	bne.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007406:	4b68      	ldr	r3, [pc, #416]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	08db      	lsrs	r3, r3, #3
 800740c:	f003 0303 	and.w	r3, r3, #3
 8007410:	4a66      	ldr	r2, [pc, #408]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007412:	fa22 f303 	lsr.w	r3, r2, r3
 8007416:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007418:	e01e      	b.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800741a:	4b63      	ldr	r3, [pc, #396]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007426:	d106      	bne.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800742a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800742e:	d102      	bne.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007430:	4b5f      	ldr	r3, [pc, #380]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007434:	e010      	b.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007436:	4b5c      	ldr	r3, [pc, #368]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800743e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007442:	d106      	bne.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007446:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800744a:	d102      	bne.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800744c:	4b59      	ldr	r3, [pc, #356]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800744e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007450:	e002      	b.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007452:	2300      	movs	r3, #0
 8007454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007456:	e386      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007458:	e385      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800745a:	4b57      	ldr	r3, [pc, #348]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800745c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800745e:	e382      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007460:	2300      	movs	r3, #0
 8007462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007464:	e37f      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007466:	e9d7 2300 	ldrd	r2, r3, [r7]
 800746a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800746e:	430b      	orrs	r3, r1
 8007470:	f040 80a7 	bne.w	80075c2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007474:	4b4c      	ldr	r3, [pc, #304]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007478:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800747c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800747e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007480:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007484:	d055      	beq.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007488:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800748c:	f200 8096 	bhi.w	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007492:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007496:	f000 8084 	beq.w	80075a2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800749a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80074a0:	f200 808c 	bhi.w	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80074a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074aa:	d030      	beq.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80074ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074b2:	f200 8083 	bhi.w	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80074b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d004      	beq.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80074bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074c2:	d012      	beq.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80074c4:	e07a      	b.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80074c6:	4b38      	ldr	r3, [pc, #224]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074d2:	d107      	bne.n	80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074d8:	4618      	mov	r0, r3
 80074da:	f000 fe0b 	bl	80080f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074e2:	e340      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074e4:	2300      	movs	r3, #0
 80074e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074e8:	e33d      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074ea:	4b2f      	ldr	r3, [pc, #188]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074f6:	d107      	bne.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074f8:	f107 0318 	add.w	r3, r7, #24
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 fb51 	bl	8007ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007506:	e32e      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007508:	2300      	movs	r3, #0
 800750a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800750c:	e32b      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800750e:	4b26      	ldr	r3, [pc, #152]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007516:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800751a:	d107      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800751c:	f107 030c 	add.w	r3, r7, #12
 8007520:	4618      	mov	r0, r3
 8007522:	f000 fc93 	bl	8007e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800752a:	e31c      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007530:	e319      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007532:	4b1d      	ldr	r3, [pc, #116]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007536:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800753a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800753c:	4b1a      	ldr	r3, [pc, #104]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	2b04      	cmp	r3, #4
 8007546:	d10c      	bne.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800754a:	2b00      	cmp	r3, #0
 800754c:	d109      	bne.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800754e:	4b16      	ldr	r3, [pc, #88]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	08db      	lsrs	r3, r3, #3
 8007554:	f003 0303 	and.w	r3, r3, #3
 8007558:	4a14      	ldr	r2, [pc, #80]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800755a:	fa22 f303 	lsr.w	r3, r2, r3
 800755e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007560:	e01e      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007562:	4b11      	ldr	r3, [pc, #68]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800756a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800756e:	d106      	bne.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007572:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007576:	d102      	bne.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007578:	4b0d      	ldr	r3, [pc, #52]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800757a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800757c:	e010      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800757e:	4b0a      	ldr	r3, [pc, #40]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007586:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800758a:	d106      	bne.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800758c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800758e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007592:	d102      	bne.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007594:	4b07      	ldr	r3, [pc, #28]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007598:	e002      	b.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800759a:	2300      	movs	r3, #0
 800759c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800759e:	e2e2      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80075a0:	e2e1      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80075a2:	4b05      	ldr	r3, [pc, #20]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80075a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075a6:	e2de      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80075a8:	58024400 	.word	0x58024400
 80075ac:	03d09000 	.word	0x03d09000
 80075b0:	003d0900 	.word	0x003d0900
 80075b4:	007a1200 	.word	0x007a1200
 80075b8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80075bc:	2300      	movs	r3, #0
 80075be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075c0:	e2d1      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80075c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80075ca:	430b      	orrs	r3, r1
 80075cc:	f040 809c 	bne.w	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80075d0:	4b93      	ldr	r3, [pc, #588]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075d4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80075d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80075da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075e0:	d054      	beq.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80075e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075e8:	f200 808b 	bhi.w	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80075ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075f2:	f000 8083 	beq.w	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80075f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075fc:	f200 8081 	bhi.w	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007602:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007606:	d02f      	beq.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800760e:	d878      	bhi.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007612:	2b00      	cmp	r3, #0
 8007614:	d004      	beq.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007618:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800761c:	d012      	beq.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800761e:	e070      	b.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007620:	4b7f      	ldr	r3, [pc, #508]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007628:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800762c:	d107      	bne.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800762e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007632:	4618      	mov	r0, r3
 8007634:	f000 fd5e 	bl	80080f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800763c:	e293      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800763e:	2300      	movs	r3, #0
 8007640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007642:	e290      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007644:	4b76      	ldr	r3, [pc, #472]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800764c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007650:	d107      	bne.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007652:	f107 0318 	add.w	r3, r7, #24
 8007656:	4618      	mov	r0, r3
 8007658:	f000 faa4 	bl	8007ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007660:	e281      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007662:	2300      	movs	r3, #0
 8007664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007666:	e27e      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007668:	4b6d      	ldr	r3, [pc, #436]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007674:	d107      	bne.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007676:	f107 030c 	add.w	r3, r7, #12
 800767a:	4618      	mov	r0, r3
 800767c:	f000 fbe6 	bl	8007e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007684:	e26f      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800768a:	e26c      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800768c:	4b64      	ldr	r3, [pc, #400]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800768e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007690:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007694:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007696:	4b62      	ldr	r3, [pc, #392]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0304 	and.w	r3, r3, #4
 800769e:	2b04      	cmp	r3, #4
 80076a0:	d10c      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80076a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d109      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076a8:	4b5d      	ldr	r3, [pc, #372]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	08db      	lsrs	r3, r3, #3
 80076ae:	f003 0303 	and.w	r3, r3, #3
 80076b2:	4a5c      	ldr	r2, [pc, #368]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80076b4:	fa22 f303 	lsr.w	r3, r2, r3
 80076b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076ba:	e01e      	b.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076bc:	4b58      	ldr	r3, [pc, #352]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076c8:	d106      	bne.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80076ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076d0:	d102      	bne.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80076d2:	4b55      	ldr	r3, [pc, #340]	@ (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80076d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076d6:	e010      	b.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076d8:	4b51      	ldr	r3, [pc, #324]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076e4:	d106      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80076e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076ec:	d102      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80076ee:	4b4f      	ldr	r3, [pc, #316]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80076f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076f2:	e002      	b.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80076f8:	e235      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80076fa:	e234      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80076fc:	4b4c      	ldr	r3, [pc, #304]	@ (8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80076fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007700:	e231      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007706:	e22e      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800770c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007710:	430b      	orrs	r3, r1
 8007712:	f040 808f 	bne.w	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007716:	4b42      	ldr	r3, [pc, #264]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800771a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800771e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007722:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007726:	d06b      	beq.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800772e:	d874      	bhi.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007732:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007736:	d056      	beq.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800773e:	d86c      	bhi.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007742:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007746:	d03b      	beq.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800774e:	d864      	bhi.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007752:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007756:	d021      	beq.n	800779c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800775e:	d85c      	bhi.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007762:	2b00      	cmp	r3, #0
 8007764:	d004      	beq.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800776c:	d004      	beq.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800776e:	e054      	b.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007770:	f7fe fa4c 	bl	8005c0c <HAL_RCC_GetPCLK1Freq>
 8007774:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007776:	e1f6      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007778:	4b29      	ldr	r3, [pc, #164]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007780:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007784:	d107      	bne.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007786:	f107 0318 	add.w	r3, r7, #24
 800778a:	4618      	mov	r0, r3
 800778c:	f000 fa0a 	bl	8007ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007794:	e1e7      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007796:	2300      	movs	r3, #0
 8007798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800779a:	e1e4      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800779c:	4b20      	ldr	r3, [pc, #128]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077a8:	d107      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077aa:	f107 030c 	add.w	r3, r7, #12
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fb4c 	bl	8007e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077b8:	e1d5      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077be:	e1d2      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077c0:	4b17      	ldr	r3, [pc, #92]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0304 	and.w	r3, r3, #4
 80077c8:	2b04      	cmp	r3, #4
 80077ca:	d109      	bne.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077cc:	4b14      	ldr	r3, [pc, #80]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	08db      	lsrs	r3, r3, #3
 80077d2:	f003 0303 	and.w	r3, r3, #3
 80077d6:	4a13      	ldr	r2, [pc, #76]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80077d8:	fa22 f303 	lsr.w	r3, r2, r3
 80077dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077de:	e1c2      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077e0:	2300      	movs	r3, #0
 80077e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077e4:	e1bf      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80077e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077f2:	d102      	bne.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80077f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80077f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077f8:	e1b5      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077fa:	2300      	movs	r3, #0
 80077fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077fe:	e1b2      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007800:	4b07      	ldr	r3, [pc, #28]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007808:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800780c:	d102      	bne.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800780e:	4b07      	ldr	r3, [pc, #28]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007812:	e1a8      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007814:	2300      	movs	r3, #0
 8007816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007818:	e1a5      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800781e:	e1a2      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007820:	58024400 	.word	0x58024400
 8007824:	03d09000 	.word	0x03d09000
 8007828:	003d0900 	.word	0x003d0900
 800782c:	007a1200 	.word	0x007a1200
 8007830:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007834:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007838:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800783c:	430b      	orrs	r3, r1
 800783e:	d173      	bne.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007840:	4b9c      	ldr	r3, [pc, #624]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007844:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007848:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800784a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800784c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007850:	d02f      	beq.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007854:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007858:	d863      	bhi.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800785a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785c:	2b00      	cmp	r3, #0
 800785e:	d004      	beq.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007862:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007866:	d012      	beq.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007868:	e05b      	b.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800786a:	4b92      	ldr	r3, [pc, #584]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007872:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007876:	d107      	bne.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007878:	f107 0318 	add.w	r3, r7, #24
 800787c:	4618      	mov	r0, r3
 800787e:	f000 f991 	bl	8007ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007886:	e16e      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007888:	2300      	movs	r3, #0
 800788a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800788c:	e16b      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800788e:	4b89      	ldr	r3, [pc, #548]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007896:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800789a:	d107      	bne.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800789c:	f107 030c 	add.w	r3, r7, #12
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 fad3 	bl	8007e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078aa:	e15c      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078ac:	2300      	movs	r3, #0
 80078ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078b0:	e159      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078b2:	4b80      	ldr	r3, [pc, #512]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078ba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078bc:	4b7d      	ldr	r3, [pc, #500]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	2b04      	cmp	r3, #4
 80078c6:	d10c      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80078c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d109      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078ce:	4b79      	ldr	r3, [pc, #484]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	08db      	lsrs	r3, r3, #3
 80078d4:	f003 0303 	and.w	r3, r3, #3
 80078d8:	4a77      	ldr	r2, [pc, #476]	@ (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80078da:	fa22 f303 	lsr.w	r3, r2, r3
 80078de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078e0:	e01e      	b.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078e2:	4b74      	ldr	r3, [pc, #464]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078ee:	d106      	bne.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80078f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078f6:	d102      	bne.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078f8:	4b70      	ldr	r3, [pc, #448]	@ (8007abc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80078fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078fc:	e010      	b.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078fe:	4b6d      	ldr	r3, [pc, #436]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007906:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800790a:	d106      	bne.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800790c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800790e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007912:	d102      	bne.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007914:	4b6a      	ldr	r3, [pc, #424]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007916:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007918:	e002      	b.n	8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800791a:	2300      	movs	r3, #0
 800791c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800791e:	e122      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007920:	e121      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007926:	e11e      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800792c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007930:	430b      	orrs	r3, r1
 8007932:	d133      	bne.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007934:	4b5f      	ldr	r3, [pc, #380]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800793c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800793e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007940:	2b00      	cmp	r3, #0
 8007942:	d004      	beq.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800794a:	d012      	beq.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800794c:	e023      	b.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800794e:	4b59      	ldr	r3, [pc, #356]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007956:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800795a:	d107      	bne.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800795c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007960:	4618      	mov	r0, r3
 8007962:	f000 fbc7 	bl	80080f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800796a:	e0fc      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800796c:	2300      	movs	r3, #0
 800796e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007970:	e0f9      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007972:	4b50      	ldr	r3, [pc, #320]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800797a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800797e:	d107      	bne.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007980:	f107 0318 	add.w	r3, r7, #24
 8007984:	4618      	mov	r0, r3
 8007986:	f000 f90d 	bl	8007ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800798e:	e0ea      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007990:	2300      	movs	r3, #0
 8007992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007994:	e0e7      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800799a:	e0e4      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800799c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079a0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80079a4:	430b      	orrs	r3, r1
 80079a6:	f040 808d 	bne.w	8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80079aa:	4b42      	ldr	r3, [pc, #264]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80079ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079ae:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80079b2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80079b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079ba:	d06b      	beq.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80079bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079c2:	d874      	bhi.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80079c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ca:	d056      	beq.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80079cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079d2:	d86c      	bhi.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80079d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079da:	d03b      	beq.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80079dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079e2:	d864      	bhi.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80079e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079ea:	d021      	beq.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80079ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079f2:	d85c      	bhi.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80079f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d004      	beq.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80079fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a00:	d004      	beq.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007a02:	e054      	b.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007a04:	f000 f8b8 	bl	8007b78 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a08:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a0a:	e0ac      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a0c:	4b29      	ldr	r3, [pc, #164]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a18:	d107      	bne.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a1a:	f107 0318 	add.w	r3, r7, #24
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f000 f8c0 	bl	8007ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a28:	e09d      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a2e:	e09a      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a30:	4b20      	ldr	r3, [pc, #128]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a3c:	d107      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a3e:	f107 030c 	add.w	r3, r7, #12
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 fa02 	bl	8007e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a4c:	e08b      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a52:	e088      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a54:	4b17      	ldr	r3, [pc, #92]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b04      	cmp	r3, #4
 8007a5e:	d109      	bne.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a60:	4b14      	ldr	r3, [pc, #80]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	08db      	lsrs	r3, r3, #3
 8007a66:	f003 0303 	and.w	r3, r3, #3
 8007a6a:	4a13      	ldr	r2, [pc, #76]	@ (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a72:	e078      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a74:	2300      	movs	r3, #0
 8007a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a78:	e075      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a86:	d102      	bne.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007a88:	4b0c      	ldr	r3, [pc, #48]	@ (8007abc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a8c:	e06b      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a92:	e068      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007a94:	4b07      	ldr	r3, [pc, #28]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007aa0:	d102      	bne.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007aa2:	4b07      	ldr	r3, [pc, #28]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007aa6:	e05e      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aac:	e05b      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ab2:	e058      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ab4:	58024400 	.word	0x58024400
 8007ab8:	03d09000 	.word	0x03d09000
 8007abc:	003d0900 	.word	0x003d0900
 8007ac0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ac8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007acc:	430b      	orrs	r3, r1
 8007ace:	d148      	bne.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007ad0:	4b27      	ldr	r3, [pc, #156]	@ (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ad4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ad8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007adc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ae0:	d02a      	beq.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ae8:	d838      	bhi.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d004      	beq.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007af6:	d00d      	beq.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007af8:	e030      	b.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007afa:	4b1d      	ldr	r3, [pc, #116]	@ (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b06:	d102      	bne.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007b08:	4b1a      	ldr	r3, [pc, #104]	@ (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b0c:	e02b      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b12:	e028      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b14:	4b16      	ldr	r3, [pc, #88]	@ (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b20:	d107      	bne.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 fae4 	bl	80080f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b30:	e019      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b32:	2300      	movs	r3, #0
 8007b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b36:	e016      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b38:	4b0d      	ldr	r3, [pc, #52]	@ (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b44:	d107      	bne.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b46:	f107 0318 	add.w	r3, r7, #24
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 f82a 	bl	8007ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b54:	e007      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b56:	2300      	movs	r3, #0
 8007b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b5a:	e004      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b60:	e001      	b.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3740      	adds	r7, #64	@ 0x40
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	58024400 	.word	0x58024400
 8007b74:	007a1200 	.word	0x007a1200

08007b78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007b7c:	f7fe f816 	bl	8005bac <HAL_RCC_GetHCLKFreq>
 8007b80:	4602      	mov	r2, r0
 8007b82:	4b06      	ldr	r3, [pc, #24]	@ (8007b9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	091b      	lsrs	r3, r3, #4
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	4904      	ldr	r1, [pc, #16]	@ (8007ba0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007b8e:	5ccb      	ldrb	r3, [r1, r3]
 8007b90:	f003 031f 	and.w	r3, r3, #31
 8007b94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	58024400 	.word	0x58024400
 8007ba0:	08009ba0 	.word	0x08009ba0

08007ba4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b089      	sub	sp, #36	@ 0x24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bac:	4ba1      	ldr	r3, [pc, #644]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb0:	f003 0303 	and.w	r3, r3, #3
 8007bb4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007bb6:	4b9f      	ldr	r3, [pc, #636]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bba:	0b1b      	lsrs	r3, r3, #12
 8007bbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bc0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007bc2:	4b9c      	ldr	r3, [pc, #624]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc6:	091b      	lsrs	r3, r3, #4
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007bce:	4b99      	ldr	r3, [pc, #612]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bd2:	08db      	lsrs	r3, r3, #3
 8007bd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	fb02 f303 	mul.w	r3, r2, r3
 8007bde:	ee07 3a90 	vmov	s15, r3
 8007be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 8111 	beq.w	8007e14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	f000 8083 	beq.w	8007d00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	f200 80a1 	bhi.w	8007d44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d003      	beq.n	8007c10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d056      	beq.n	8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007c0e:	e099      	b.n	8007d44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c10:	4b88      	ldr	r3, [pc, #544]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0320 	and.w	r3, r3, #32
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d02d      	beq.n	8007c78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c1c:	4b85      	ldr	r3, [pc, #532]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	08db      	lsrs	r3, r3, #3
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	4a84      	ldr	r2, [pc, #528]	@ (8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007c28:	fa22 f303 	lsr.w	r3, r2, r3
 8007c2c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	ee07 3a90 	vmov	s15, r3
 8007c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	ee07 3a90 	vmov	s15, r3
 8007c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c46:	4b7b      	ldr	r3, [pc, #492]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c4e:	ee07 3a90 	vmov	s15, r3
 8007c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c76:	e087      	b.n	8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	ee07 3a90 	vmov	s15, r3
 8007c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007e40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c8a:	4b6a      	ldr	r3, [pc, #424]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c92:	ee07 3a90 	vmov	s15, r3
 8007c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cba:	e065      	b.n	8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	ee07 3a90 	vmov	s15, r3
 8007cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cce:	4b59      	ldr	r3, [pc, #356]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cd6:	ee07 3a90 	vmov	s15, r3
 8007cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ce2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cfe:	e043      	b.n	8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	ee07 3a90 	vmov	s15, r3
 8007d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d12:	4b48      	ldr	r3, [pc, #288]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d1a:	ee07 3a90 	vmov	s15, r3
 8007d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d42:	e021      	b.n	8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	ee07 3a90 	vmov	s15, r3
 8007d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d56:	4b37      	ldr	r3, [pc, #220]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d5e:	ee07 3a90 	vmov	s15, r3
 8007d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007d88:	4b2a      	ldr	r3, [pc, #168]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8c:	0a5b      	lsrs	r3, r3, #9
 8007d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d92:	ee07 3a90 	vmov	s15, r3
 8007d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007da2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dae:	ee17 2a90 	vmov	r2, s15
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007db6:	4b1f      	ldr	r3, [pc, #124]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dba:	0c1b      	lsrs	r3, r3, #16
 8007dbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dc0:	ee07 3a90 	vmov	s15, r3
 8007dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ddc:	ee17 2a90 	vmov	r2, s15
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007de4:	4b13      	ldr	r3, [pc, #76]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de8:	0e1b      	lsrs	r3, r3, #24
 8007dea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dee:	ee07 3a90 	vmov	s15, r3
 8007df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e0a:	ee17 2a90 	vmov	r2, s15
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007e12:	e008      	b.n	8007e26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	609a      	str	r2, [r3, #8]
}
 8007e26:	bf00      	nop
 8007e28:	3724      	adds	r7, #36	@ 0x24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	58024400 	.word	0x58024400
 8007e38:	03d09000 	.word	0x03d09000
 8007e3c:	46000000 	.word	0x46000000
 8007e40:	4c742400 	.word	0x4c742400
 8007e44:	4a742400 	.word	0x4a742400
 8007e48:	4af42400 	.word	0x4af42400

08007e4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b089      	sub	sp, #36	@ 0x24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e54:	4ba1      	ldr	r3, [pc, #644]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e58:	f003 0303 	and.w	r3, r3, #3
 8007e5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007e5e:	4b9f      	ldr	r3, [pc, #636]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e62:	0d1b      	lsrs	r3, r3, #20
 8007e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007e6a:	4b9c      	ldr	r3, [pc, #624]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6e:	0a1b      	lsrs	r3, r3, #8
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007e76:	4b99      	ldr	r3, [pc, #612]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e7a:	08db      	lsrs	r3, r3, #3
 8007e7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	fb02 f303 	mul.w	r3, r2, r3
 8007e86:	ee07 3a90 	vmov	s15, r3
 8007e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 8111 	beq.w	80080bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	f000 8083 	beq.w	8007fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	f200 80a1 	bhi.w	8007fec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d056      	beq.n	8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007eb6:	e099      	b.n	8007fec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eb8:	4b88      	ldr	r3, [pc, #544]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0320 	and.w	r3, r3, #32
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d02d      	beq.n	8007f20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ec4:	4b85      	ldr	r3, [pc, #532]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	08db      	lsrs	r3, r3, #3
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	4a84      	ldr	r2, [pc, #528]	@ (80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	ee07 3a90 	vmov	s15, r3
 8007edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	ee07 3a90 	vmov	s15, r3
 8007ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eee:	4b7b      	ldr	r3, [pc, #492]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef6:	ee07 3a90 	vmov	s15, r3
 8007efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80080e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f1e:	e087      	b.n	8008030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	ee07 3a90 	vmov	s15, r3
 8007f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80080e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f32:	4b6a      	ldr	r3, [pc, #424]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f3a:	ee07 3a90 	vmov	s15, r3
 8007f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80080e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f62:	e065      	b.n	8008030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	ee07 3a90 	vmov	s15, r3
 8007f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80080ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f76:	4b59      	ldr	r3, [pc, #356]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f7e:	ee07 3a90 	vmov	s15, r3
 8007f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80080e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fa6:	e043      	b.n	8008030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	ee07 3a90 	vmov	s15, r3
 8007fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80080f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fba:	4b48      	ldr	r3, [pc, #288]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc2:	ee07 3a90 	vmov	s15, r3
 8007fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80080e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fea:	e021      	b.n	8008030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80080ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ffe:	4b37      	ldr	r3, [pc, #220]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008006:	ee07 3a90 	vmov	s15, r3
 800800a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800800e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008012:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80080e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800801a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800801e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800802a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800802e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008030:	4b2a      	ldr	r3, [pc, #168]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008034:	0a5b      	lsrs	r3, r3, #9
 8008036:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800803a:	ee07 3a90 	vmov	s15, r3
 800803e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008042:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008046:	ee37 7a87 	vadd.f32	s14, s15, s14
 800804a:	edd7 6a07 	vldr	s13, [r7, #28]
 800804e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008056:	ee17 2a90 	vmov	r2, s15
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800805e:	4b1f      	ldr	r3, [pc, #124]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008062:	0c1b      	lsrs	r3, r3, #16
 8008064:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008068:	ee07 3a90 	vmov	s15, r3
 800806c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008070:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008074:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008078:	edd7 6a07 	vldr	s13, [r7, #28]
 800807c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008084:	ee17 2a90 	vmov	r2, s15
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800808c:	4b13      	ldr	r3, [pc, #76]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800808e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008090:	0e1b      	lsrs	r3, r3, #24
 8008092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008096:	ee07 3a90 	vmov	s15, r3
 800809a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80080aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080b2:	ee17 2a90 	vmov	r2, s15
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80080ba:	e008      	b.n	80080ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	609a      	str	r2, [r3, #8]
}
 80080ce:	bf00      	nop
 80080d0:	3724      	adds	r7, #36	@ 0x24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	58024400 	.word	0x58024400
 80080e0:	03d09000 	.word	0x03d09000
 80080e4:	46000000 	.word	0x46000000
 80080e8:	4c742400 	.word	0x4c742400
 80080ec:	4a742400 	.word	0x4a742400
 80080f0:	4af42400 	.word	0x4af42400

080080f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b089      	sub	sp, #36	@ 0x24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080fc:	4ba0      	ldr	r3, [pc, #640]	@ (8008380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008100:	f003 0303 	and.w	r3, r3, #3
 8008104:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008106:	4b9e      	ldr	r3, [pc, #632]	@ (8008380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800810a:	091b      	lsrs	r3, r3, #4
 800810c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008110:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008112:	4b9b      	ldr	r3, [pc, #620]	@ (8008380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800811c:	4b98      	ldr	r3, [pc, #608]	@ (8008380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800811e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008120:	08db      	lsrs	r3, r3, #3
 8008122:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	fb02 f303 	mul.w	r3, r2, r3
 800812c:	ee07 3a90 	vmov	s15, r3
 8008130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008134:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	2b00      	cmp	r3, #0
 800813c:	f000 8111 	beq.w	8008362 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	2b02      	cmp	r3, #2
 8008144:	f000 8083 	beq.w	800824e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	2b02      	cmp	r3, #2
 800814c:	f200 80a1 	bhi.w	8008292 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d003      	beq.n	800815e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d056      	beq.n	800820a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800815c:	e099      	b.n	8008292 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800815e:	4b88      	ldr	r3, [pc, #544]	@ (8008380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0320 	and.w	r3, r3, #32
 8008166:	2b00      	cmp	r3, #0
 8008168:	d02d      	beq.n	80081c6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800816a:	4b85      	ldr	r3, [pc, #532]	@ (8008380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	08db      	lsrs	r3, r3, #3
 8008170:	f003 0303 	and.w	r3, r3, #3
 8008174:	4a83      	ldr	r2, [pc, #524]	@ (8008384 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008176:	fa22 f303 	lsr.w	r3, r2, r3
 800817a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	ee07 3a90 	vmov	s15, r3
 8008182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	ee07 3a90 	vmov	s15, r3
 800818c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008194:	4b7a      	ldr	r3, [pc, #488]	@ (8008380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800819c:	ee07 3a90 	vmov	s15, r3
 80081a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80081a8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80081ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081c0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80081c4:	e087      	b.n	80082d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	ee07 3a90 	vmov	s15, r3
 80081cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800838c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80081d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081d8:	4b69      	ldr	r3, [pc, #420]	@ (8008380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e0:	ee07 3a90 	vmov	s15, r3
 80081e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ec:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80081f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008204:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008208:	e065      	b.n	80082d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	ee07 3a90 	vmov	s15, r3
 8008210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008214:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008390 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008218:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800821c:	4b58      	ldr	r3, [pc, #352]	@ (8008380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800821e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008224:	ee07 3a90 	vmov	s15, r3
 8008228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800822c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008230:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008234:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800823c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008248:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800824c:	e043      	b.n	80082d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	ee07 3a90 	vmov	s15, r3
 8008254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008258:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008394 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800825c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008260:	4b47      	ldr	r3, [pc, #284]	@ (8008380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008268:	ee07 3a90 	vmov	s15, r3
 800826c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008270:	ed97 6a03 	vldr	s12, [r7, #12]
 8008274:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008278:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800827c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008280:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008284:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800828c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008290:	e021      	b.n	80082d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	ee07 3a90 	vmov	s15, r3
 8008298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800829c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800838c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80082a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082a4:	4b36      	ldr	r3, [pc, #216]	@ (8008380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ac:	ee07 3a90 	vmov	s15, r3
 80082b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80082b8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80082bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80082d6:	4b2a      	ldr	r3, [pc, #168]	@ (8008380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082da:	0a5b      	lsrs	r3, r3, #9
 80082dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082e0:	ee07 3a90 	vmov	s15, r3
 80082e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80082f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082fc:	ee17 2a90 	vmov	r2, s15
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008304:	4b1e      	ldr	r3, [pc, #120]	@ (8008380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008308:	0c1b      	lsrs	r3, r3, #16
 800830a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800830e:	ee07 3a90 	vmov	s15, r3
 8008312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008316:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800831a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800831e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800832a:	ee17 2a90 	vmov	r2, s15
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008332:	4b13      	ldr	r3, [pc, #76]	@ (8008380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008336:	0e1b      	lsrs	r3, r3, #24
 8008338:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800833c:	ee07 3a90 	vmov	s15, r3
 8008340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008344:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008348:	ee37 7a87 	vadd.f32	s14, s15, s14
 800834c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008358:	ee17 2a90 	vmov	r2, s15
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008360:	e008      	b.n	8008374 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	609a      	str	r2, [r3, #8]
}
 8008374:	bf00      	nop
 8008376:	3724      	adds	r7, #36	@ 0x24
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	58024400 	.word	0x58024400
 8008384:	03d09000 	.word	0x03d09000
 8008388:	46000000 	.word	0x46000000
 800838c:	4c742400 	.word	0x4c742400
 8008390:	4a742400 	.word	0x4a742400
 8008394:	4af42400 	.word	0x4af42400

08008398 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80083a6:	4b53      	ldr	r3, [pc, #332]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 80083a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083aa:	f003 0303 	and.w	r3, r3, #3
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	d101      	bne.n	80083b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e099      	b.n	80084ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80083b6:	4b4f      	ldr	r3, [pc, #316]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a4e      	ldr	r2, [pc, #312]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 80083bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80083c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083c2:	f7f9 f9f5 	bl	80017b0 <HAL_GetTick>
 80083c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80083c8:	e008      	b.n	80083dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80083ca:	f7f9 f9f1 	bl	80017b0 <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d901      	bls.n	80083dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e086      	b.n	80084ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80083dc:	4b45      	ldr	r3, [pc, #276]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1f0      	bne.n	80083ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80083e8:	4b42      	ldr	r3, [pc, #264]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 80083ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	031b      	lsls	r3, r3, #12
 80083f6:	493f      	ldr	r1, [pc, #252]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 80083f8:	4313      	orrs	r3, r2
 80083fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	3b01      	subs	r3, #1
 8008402:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	3b01      	subs	r3, #1
 800840c:	025b      	lsls	r3, r3, #9
 800840e:	b29b      	uxth	r3, r3
 8008410:	431a      	orrs	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	3b01      	subs	r3, #1
 8008418:	041b      	lsls	r3, r3, #16
 800841a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800841e:	431a      	orrs	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	3b01      	subs	r3, #1
 8008426:	061b      	lsls	r3, r3, #24
 8008428:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800842c:	4931      	ldr	r1, [pc, #196]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 800842e:	4313      	orrs	r3, r2
 8008430:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008432:	4b30      	ldr	r3, [pc, #192]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 8008434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008436:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	492d      	ldr	r1, [pc, #180]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 8008440:	4313      	orrs	r3, r2
 8008442:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008444:	4b2b      	ldr	r3, [pc, #172]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 8008446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008448:	f023 0220 	bic.w	r2, r3, #32
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	4928      	ldr	r1, [pc, #160]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 8008452:	4313      	orrs	r3, r2
 8008454:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008456:	4b27      	ldr	r3, [pc, #156]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 8008458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800845a:	4a26      	ldr	r2, [pc, #152]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 800845c:	f023 0310 	bic.w	r3, r3, #16
 8008460:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008462:	4b24      	ldr	r3, [pc, #144]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 8008464:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008466:	4b24      	ldr	r3, [pc, #144]	@ (80084f8 <RCCEx_PLL2_Config+0x160>)
 8008468:	4013      	ands	r3, r2
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	69d2      	ldr	r2, [r2, #28]
 800846e:	00d2      	lsls	r2, r2, #3
 8008470:	4920      	ldr	r1, [pc, #128]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 8008472:	4313      	orrs	r3, r2
 8008474:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008476:	4b1f      	ldr	r3, [pc, #124]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 8008478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800847a:	4a1e      	ldr	r2, [pc, #120]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 800847c:	f043 0310 	orr.w	r3, r3, #16
 8008480:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d106      	bne.n	8008496 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008488:	4b1a      	ldr	r3, [pc, #104]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 800848a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848c:	4a19      	ldr	r2, [pc, #100]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 800848e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008492:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008494:	e00f      	b.n	80084b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d106      	bne.n	80084aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800849c:	4b15      	ldr	r3, [pc, #84]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 800849e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a0:	4a14      	ldr	r2, [pc, #80]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 80084a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80084a8:	e005      	b.n	80084b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80084aa:	4b12      	ldr	r3, [pc, #72]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 80084ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ae:	4a11      	ldr	r2, [pc, #68]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 80084b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80084b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80084b6:	4b0f      	ldr	r3, [pc, #60]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a0e      	ldr	r2, [pc, #56]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 80084bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80084c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084c2:	f7f9 f975 	bl	80017b0 <HAL_GetTick>
 80084c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80084c8:	e008      	b.n	80084dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80084ca:	f7f9 f971 	bl	80017b0 <HAL_GetTick>
 80084ce:	4602      	mov	r2, r0
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	1ad3      	subs	r3, r2, r3
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d901      	bls.n	80084dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80084d8:	2303      	movs	r3, #3
 80084da:	e006      	b.n	80084ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80084dc:	4b05      	ldr	r3, [pc, #20]	@ (80084f4 <RCCEx_PLL2_Config+0x15c>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d0f0      	beq.n	80084ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80084e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	58024400 	.word	0x58024400
 80084f8:	ffff0007 	.word	0xffff0007

080084fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008506:	2300      	movs	r3, #0
 8008508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800850a:	4b53      	ldr	r3, [pc, #332]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 800850c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	2b03      	cmp	r3, #3
 8008514:	d101      	bne.n	800851a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e099      	b.n	800864e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800851a:	4b4f      	ldr	r3, [pc, #316]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a4e      	ldr	r2, [pc, #312]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 8008520:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008526:	f7f9 f943 	bl	80017b0 <HAL_GetTick>
 800852a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800852c:	e008      	b.n	8008540 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800852e:	f7f9 f93f 	bl	80017b0 <HAL_GetTick>
 8008532:	4602      	mov	r2, r0
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	2b02      	cmp	r3, #2
 800853a:	d901      	bls.n	8008540 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e086      	b.n	800864e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008540:	4b45      	ldr	r3, [pc, #276]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1f0      	bne.n	800852e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800854c:	4b42      	ldr	r3, [pc, #264]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 800854e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008550:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	051b      	lsls	r3, r3, #20
 800855a:	493f      	ldr	r1, [pc, #252]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 800855c:	4313      	orrs	r3, r2
 800855e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	3b01      	subs	r3, #1
 8008566:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	3b01      	subs	r3, #1
 8008570:	025b      	lsls	r3, r3, #9
 8008572:	b29b      	uxth	r3, r3
 8008574:	431a      	orrs	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	3b01      	subs	r3, #1
 800857c:	041b      	lsls	r3, r3, #16
 800857e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008582:	431a      	orrs	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	3b01      	subs	r3, #1
 800858a:	061b      	lsls	r3, r3, #24
 800858c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008590:	4931      	ldr	r1, [pc, #196]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 8008592:	4313      	orrs	r3, r2
 8008594:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008596:	4b30      	ldr	r3, [pc, #192]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 8008598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800859a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	492d      	ldr	r1, [pc, #180]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80085a8:	4b2b      	ldr	r3, [pc, #172]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 80085aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	4928      	ldr	r1, [pc, #160]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80085ba:	4b27      	ldr	r3, [pc, #156]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 80085bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085be:	4a26      	ldr	r2, [pc, #152]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 80085c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80085c6:	4b24      	ldr	r3, [pc, #144]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 80085c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085ca:	4b24      	ldr	r3, [pc, #144]	@ (800865c <RCCEx_PLL3_Config+0x160>)
 80085cc:	4013      	ands	r3, r2
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	69d2      	ldr	r2, [r2, #28]
 80085d2:	00d2      	lsls	r2, r2, #3
 80085d4:	4920      	ldr	r1, [pc, #128]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80085da:	4b1f      	ldr	r3, [pc, #124]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 80085dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085de:	4a1e      	ldr	r2, [pc, #120]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 80085e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d106      	bne.n	80085fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80085ec:	4b1a      	ldr	r3, [pc, #104]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 80085ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f0:	4a19      	ldr	r2, [pc, #100]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 80085f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80085f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80085f8:	e00f      	b.n	800861a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d106      	bne.n	800860e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008600:	4b15      	ldr	r3, [pc, #84]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 8008602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008604:	4a14      	ldr	r2, [pc, #80]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 8008606:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800860a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800860c:	e005      	b.n	800861a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800860e:	4b12      	ldr	r3, [pc, #72]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 8008610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008612:	4a11      	ldr	r2, [pc, #68]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 8008614:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008618:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800861a:	4b0f      	ldr	r3, [pc, #60]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a0e      	ldr	r2, [pc, #56]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 8008620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008626:	f7f9 f8c3 	bl	80017b0 <HAL_GetTick>
 800862a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800862c:	e008      	b.n	8008640 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800862e:	f7f9 f8bf 	bl	80017b0 <HAL_GetTick>
 8008632:	4602      	mov	r2, r0
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	2b02      	cmp	r3, #2
 800863a:	d901      	bls.n	8008640 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e006      	b.n	800864e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008640:	4b05      	ldr	r3, [pc, #20]	@ (8008658 <RCCEx_PLL3_Config+0x15c>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d0f0      	beq.n	800862e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800864c:	7bfb      	ldrb	r3, [r7, #15]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	58024400 	.word	0x58024400
 800865c:	ffff0007 	.word	0xffff0007

08008660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d101      	bne.n	8008672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e049      	b.n	8008706 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d106      	bne.n	800868c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7f8 fe4a 	bl	8001320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2202      	movs	r2, #2
 8008690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	3304      	adds	r3, #4
 800869c:	4619      	mov	r1, r3
 800869e:	4610      	mov	r0, r2
 80086a0:	f000 f836 	bl	8008710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
	...

08008710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a46      	ldr	r2, [pc, #280]	@ (800883c <TIM_Base_SetConfig+0x12c>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d013      	beq.n	8008750 <TIM_Base_SetConfig+0x40>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800872e:	d00f      	beq.n	8008750 <TIM_Base_SetConfig+0x40>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a43      	ldr	r2, [pc, #268]	@ (8008840 <TIM_Base_SetConfig+0x130>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d00b      	beq.n	8008750 <TIM_Base_SetConfig+0x40>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a42      	ldr	r2, [pc, #264]	@ (8008844 <TIM_Base_SetConfig+0x134>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d007      	beq.n	8008750 <TIM_Base_SetConfig+0x40>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a41      	ldr	r2, [pc, #260]	@ (8008848 <TIM_Base_SetConfig+0x138>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d003      	beq.n	8008750 <TIM_Base_SetConfig+0x40>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a40      	ldr	r2, [pc, #256]	@ (800884c <TIM_Base_SetConfig+0x13c>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d108      	bne.n	8008762 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	4313      	orrs	r3, r2
 8008760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a35      	ldr	r2, [pc, #212]	@ (800883c <TIM_Base_SetConfig+0x12c>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d01f      	beq.n	80087aa <TIM_Base_SetConfig+0x9a>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008770:	d01b      	beq.n	80087aa <TIM_Base_SetConfig+0x9a>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a32      	ldr	r2, [pc, #200]	@ (8008840 <TIM_Base_SetConfig+0x130>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d017      	beq.n	80087aa <TIM_Base_SetConfig+0x9a>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a31      	ldr	r2, [pc, #196]	@ (8008844 <TIM_Base_SetConfig+0x134>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d013      	beq.n	80087aa <TIM_Base_SetConfig+0x9a>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a30      	ldr	r2, [pc, #192]	@ (8008848 <TIM_Base_SetConfig+0x138>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d00f      	beq.n	80087aa <TIM_Base_SetConfig+0x9a>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a2f      	ldr	r2, [pc, #188]	@ (800884c <TIM_Base_SetConfig+0x13c>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d00b      	beq.n	80087aa <TIM_Base_SetConfig+0x9a>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a2e      	ldr	r2, [pc, #184]	@ (8008850 <TIM_Base_SetConfig+0x140>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d007      	beq.n	80087aa <TIM_Base_SetConfig+0x9a>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a2d      	ldr	r2, [pc, #180]	@ (8008854 <TIM_Base_SetConfig+0x144>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d003      	beq.n	80087aa <TIM_Base_SetConfig+0x9a>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a2c      	ldr	r2, [pc, #176]	@ (8008858 <TIM_Base_SetConfig+0x148>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d108      	bne.n	80087bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	689a      	ldr	r2, [r3, #8]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a16      	ldr	r2, [pc, #88]	@ (800883c <TIM_Base_SetConfig+0x12c>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d00f      	beq.n	8008808 <TIM_Base_SetConfig+0xf8>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a18      	ldr	r2, [pc, #96]	@ (800884c <TIM_Base_SetConfig+0x13c>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d00b      	beq.n	8008808 <TIM_Base_SetConfig+0xf8>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a17      	ldr	r2, [pc, #92]	@ (8008850 <TIM_Base_SetConfig+0x140>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d007      	beq.n	8008808 <TIM_Base_SetConfig+0xf8>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a16      	ldr	r2, [pc, #88]	@ (8008854 <TIM_Base_SetConfig+0x144>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d003      	beq.n	8008808 <TIM_Base_SetConfig+0xf8>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a15      	ldr	r2, [pc, #84]	@ (8008858 <TIM_Base_SetConfig+0x148>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d103      	bne.n	8008810 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	691a      	ldr	r2, [r3, #16]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	2b01      	cmp	r3, #1
 8008820:	d105      	bne.n	800882e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	f023 0201 	bic.w	r2, r3, #1
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	611a      	str	r2, [r3, #16]
  }
}
 800882e:	bf00      	nop
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	40010000 	.word	0x40010000
 8008840:	40000400 	.word	0x40000400
 8008844:	40000800 	.word	0x40000800
 8008848:	40000c00 	.word	0x40000c00
 800884c:	40010400 	.word	0x40010400
 8008850:	40014000 	.word	0x40014000
 8008854:	40014400 	.word	0x40014400
 8008858:	40014800 	.word	0x40014800

0800885c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800886c:	2b01      	cmp	r3, #1
 800886e:	d101      	bne.n	8008874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008870:	2302      	movs	r3, #2
 8008872:	e06d      	b.n	8008950 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2202      	movs	r2, #2
 8008880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a30      	ldr	r2, [pc, #192]	@ (800895c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d004      	beq.n	80088a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a2f      	ldr	r2, [pc, #188]	@ (8008960 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d108      	bne.n	80088ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80088ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a20      	ldr	r2, [pc, #128]	@ (800895c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d022      	beq.n	8008924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088e6:	d01d      	beq.n	8008924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008964 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d018      	beq.n	8008924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a1c      	ldr	r2, [pc, #112]	@ (8008968 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d013      	beq.n	8008924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a1a      	ldr	r2, [pc, #104]	@ (800896c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d00e      	beq.n	8008924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a15      	ldr	r2, [pc, #84]	@ (8008960 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d009      	beq.n	8008924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a16      	ldr	r2, [pc, #88]	@ (8008970 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d004      	beq.n	8008924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a15      	ldr	r2, [pc, #84]	@ (8008974 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d10c      	bne.n	800893e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800892a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	68ba      	ldr	r2, [r7, #8]
 8008932:	4313      	orrs	r3, r2
 8008934:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr
 800895c:	40010000 	.word	0x40010000
 8008960:	40010400 	.word	0x40010400
 8008964:	40000400 	.word	0x40000400
 8008968:	40000800 	.word	0x40000800
 800896c:	40000c00 	.word	0x40000c00
 8008970:	40001800 	.word	0x40001800
 8008974:	40014000 	.word	0x40014000

08008978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d101      	bne.n	800898a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e042      	b.n	8008a10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008990:	2b00      	cmp	r3, #0
 8008992:	d106      	bne.n	80089a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7f8 fce1 	bl	8001364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2224      	movs	r2, #36	@ 0x24
 80089a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f022 0201 	bic.w	r2, r2, #1
 80089b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d002      	beq.n	80089c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fd90 	bl	80094e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 f825 	bl	8008a18 <UART_SetConfig>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d101      	bne.n	80089d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e01b      	b.n	8008a10 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	689a      	ldr	r2, [r3, #8]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f042 0201 	orr.w	r2, r2, #1
 8008a06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fe0f 	bl	800962c <UART_CheckIdleState>
 8008a0e:	4603      	mov	r3, r0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a1c:	b092      	sub	sp, #72	@ 0x48
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a22:	2300      	movs	r3, #0
 8008a24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	689a      	ldr	r2, [r3, #8]
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	431a      	orrs	r2, r3
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	431a      	orrs	r2, r3
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	69db      	ldr	r3, [r3, #28]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	4bbe      	ldr	r3, [pc, #760]	@ (8008d40 <UART_SetConfig+0x328>)
 8008a48:	4013      	ands	r3, r2
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	6812      	ldr	r2, [r2, #0]
 8008a4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a50:	430b      	orrs	r3, r1
 8008a52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	68da      	ldr	r2, [r3, #12]
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	430a      	orrs	r2, r1
 8008a68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4ab3      	ldr	r2, [pc, #716]	@ (8008d44 <UART_SetConfig+0x32c>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d004      	beq.n	8008a84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a80:	4313      	orrs	r3, r2
 8008a82:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	689a      	ldr	r2, [r3, #8]
 8008a8a:	4baf      	ldr	r3, [pc, #700]	@ (8008d48 <UART_SetConfig+0x330>)
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	6812      	ldr	r2, [r2, #0]
 8008a92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a94:	430b      	orrs	r3, r1
 8008a96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9e:	f023 010f 	bic.w	r1, r3, #15
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4aa6      	ldr	r2, [pc, #664]	@ (8008d4c <UART_SetConfig+0x334>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d177      	bne.n	8008ba8 <UART_SetConfig+0x190>
 8008ab8:	4ba5      	ldr	r3, [pc, #660]	@ (8008d50 <UART_SetConfig+0x338>)
 8008aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008abc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ac0:	2b28      	cmp	r3, #40	@ 0x28
 8008ac2:	d86d      	bhi.n	8008ba0 <UART_SetConfig+0x188>
 8008ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8008acc <UART_SetConfig+0xb4>)
 8008ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aca:	bf00      	nop
 8008acc:	08008b71 	.word	0x08008b71
 8008ad0:	08008ba1 	.word	0x08008ba1
 8008ad4:	08008ba1 	.word	0x08008ba1
 8008ad8:	08008ba1 	.word	0x08008ba1
 8008adc:	08008ba1 	.word	0x08008ba1
 8008ae0:	08008ba1 	.word	0x08008ba1
 8008ae4:	08008ba1 	.word	0x08008ba1
 8008ae8:	08008ba1 	.word	0x08008ba1
 8008aec:	08008b79 	.word	0x08008b79
 8008af0:	08008ba1 	.word	0x08008ba1
 8008af4:	08008ba1 	.word	0x08008ba1
 8008af8:	08008ba1 	.word	0x08008ba1
 8008afc:	08008ba1 	.word	0x08008ba1
 8008b00:	08008ba1 	.word	0x08008ba1
 8008b04:	08008ba1 	.word	0x08008ba1
 8008b08:	08008ba1 	.word	0x08008ba1
 8008b0c:	08008b81 	.word	0x08008b81
 8008b10:	08008ba1 	.word	0x08008ba1
 8008b14:	08008ba1 	.word	0x08008ba1
 8008b18:	08008ba1 	.word	0x08008ba1
 8008b1c:	08008ba1 	.word	0x08008ba1
 8008b20:	08008ba1 	.word	0x08008ba1
 8008b24:	08008ba1 	.word	0x08008ba1
 8008b28:	08008ba1 	.word	0x08008ba1
 8008b2c:	08008b89 	.word	0x08008b89
 8008b30:	08008ba1 	.word	0x08008ba1
 8008b34:	08008ba1 	.word	0x08008ba1
 8008b38:	08008ba1 	.word	0x08008ba1
 8008b3c:	08008ba1 	.word	0x08008ba1
 8008b40:	08008ba1 	.word	0x08008ba1
 8008b44:	08008ba1 	.word	0x08008ba1
 8008b48:	08008ba1 	.word	0x08008ba1
 8008b4c:	08008b91 	.word	0x08008b91
 8008b50:	08008ba1 	.word	0x08008ba1
 8008b54:	08008ba1 	.word	0x08008ba1
 8008b58:	08008ba1 	.word	0x08008ba1
 8008b5c:	08008ba1 	.word	0x08008ba1
 8008b60:	08008ba1 	.word	0x08008ba1
 8008b64:	08008ba1 	.word	0x08008ba1
 8008b68:	08008ba1 	.word	0x08008ba1
 8008b6c:	08008b99 	.word	0x08008b99
 8008b70:	2301      	movs	r3, #1
 8008b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b76:	e222      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008b78:	2304      	movs	r3, #4
 8008b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b7e:	e21e      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008b80:	2308      	movs	r3, #8
 8008b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b86:	e21a      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008b88:	2310      	movs	r3, #16
 8008b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b8e:	e216      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008b90:	2320      	movs	r3, #32
 8008b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b96:	e212      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008b98:	2340      	movs	r3, #64	@ 0x40
 8008b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b9e:	e20e      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008ba0:	2380      	movs	r3, #128	@ 0x80
 8008ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ba6:	e20a      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a69      	ldr	r2, [pc, #420]	@ (8008d54 <UART_SetConfig+0x33c>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d130      	bne.n	8008c14 <UART_SetConfig+0x1fc>
 8008bb2:	4b67      	ldr	r3, [pc, #412]	@ (8008d50 <UART_SetConfig+0x338>)
 8008bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bb6:	f003 0307 	and.w	r3, r3, #7
 8008bba:	2b05      	cmp	r3, #5
 8008bbc:	d826      	bhi.n	8008c0c <UART_SetConfig+0x1f4>
 8008bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8008bc4 <UART_SetConfig+0x1ac>)
 8008bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc4:	08008bdd 	.word	0x08008bdd
 8008bc8:	08008be5 	.word	0x08008be5
 8008bcc:	08008bed 	.word	0x08008bed
 8008bd0:	08008bf5 	.word	0x08008bf5
 8008bd4:	08008bfd 	.word	0x08008bfd
 8008bd8:	08008c05 	.word	0x08008c05
 8008bdc:	2300      	movs	r3, #0
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008be2:	e1ec      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008be4:	2304      	movs	r3, #4
 8008be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bea:	e1e8      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008bec:	2308      	movs	r3, #8
 8008bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bf2:	e1e4      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008bf4:	2310      	movs	r3, #16
 8008bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bfa:	e1e0      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008bfc:	2320      	movs	r3, #32
 8008bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c02:	e1dc      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008c04:	2340      	movs	r3, #64	@ 0x40
 8008c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c0a:	e1d8      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008c0c:	2380      	movs	r3, #128	@ 0x80
 8008c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c12:	e1d4      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a4f      	ldr	r2, [pc, #316]	@ (8008d58 <UART_SetConfig+0x340>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d130      	bne.n	8008c80 <UART_SetConfig+0x268>
 8008c1e:	4b4c      	ldr	r3, [pc, #304]	@ (8008d50 <UART_SetConfig+0x338>)
 8008c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c22:	f003 0307 	and.w	r3, r3, #7
 8008c26:	2b05      	cmp	r3, #5
 8008c28:	d826      	bhi.n	8008c78 <UART_SetConfig+0x260>
 8008c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c30 <UART_SetConfig+0x218>)
 8008c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c30:	08008c49 	.word	0x08008c49
 8008c34:	08008c51 	.word	0x08008c51
 8008c38:	08008c59 	.word	0x08008c59
 8008c3c:	08008c61 	.word	0x08008c61
 8008c40:	08008c69 	.word	0x08008c69
 8008c44:	08008c71 	.word	0x08008c71
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4e:	e1b6      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008c50:	2304      	movs	r3, #4
 8008c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c56:	e1b2      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008c58:	2308      	movs	r3, #8
 8008c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5e:	e1ae      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008c60:	2310      	movs	r3, #16
 8008c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c66:	e1aa      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008c68:	2320      	movs	r3, #32
 8008c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6e:	e1a6      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008c70:	2340      	movs	r3, #64	@ 0x40
 8008c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c76:	e1a2      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008c78:	2380      	movs	r3, #128	@ 0x80
 8008c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7e:	e19e      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a35      	ldr	r2, [pc, #212]	@ (8008d5c <UART_SetConfig+0x344>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d130      	bne.n	8008cec <UART_SetConfig+0x2d4>
 8008c8a:	4b31      	ldr	r3, [pc, #196]	@ (8008d50 <UART_SetConfig+0x338>)
 8008c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c8e:	f003 0307 	and.w	r3, r3, #7
 8008c92:	2b05      	cmp	r3, #5
 8008c94:	d826      	bhi.n	8008ce4 <UART_SetConfig+0x2cc>
 8008c96:	a201      	add	r2, pc, #4	@ (adr r2, 8008c9c <UART_SetConfig+0x284>)
 8008c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9c:	08008cb5 	.word	0x08008cb5
 8008ca0:	08008cbd 	.word	0x08008cbd
 8008ca4:	08008cc5 	.word	0x08008cc5
 8008ca8:	08008ccd 	.word	0x08008ccd
 8008cac:	08008cd5 	.word	0x08008cd5
 8008cb0:	08008cdd 	.word	0x08008cdd
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cba:	e180      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008cbc:	2304      	movs	r3, #4
 8008cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc2:	e17c      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008cc4:	2308      	movs	r3, #8
 8008cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cca:	e178      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008ccc:	2310      	movs	r3, #16
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd2:	e174      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008cd4:	2320      	movs	r3, #32
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cda:	e170      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008cdc:	2340      	movs	r3, #64	@ 0x40
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce2:	e16c      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008ce4:	2380      	movs	r3, #128	@ 0x80
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cea:	e168      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8008d60 <UART_SetConfig+0x348>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d142      	bne.n	8008d7c <UART_SetConfig+0x364>
 8008cf6:	4b16      	ldr	r3, [pc, #88]	@ (8008d50 <UART_SetConfig+0x338>)
 8008cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cfa:	f003 0307 	and.w	r3, r3, #7
 8008cfe:	2b05      	cmp	r3, #5
 8008d00:	d838      	bhi.n	8008d74 <UART_SetConfig+0x35c>
 8008d02:	a201      	add	r2, pc, #4	@ (adr r2, 8008d08 <UART_SetConfig+0x2f0>)
 8008d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d08:	08008d21 	.word	0x08008d21
 8008d0c:	08008d29 	.word	0x08008d29
 8008d10:	08008d31 	.word	0x08008d31
 8008d14:	08008d39 	.word	0x08008d39
 8008d18:	08008d65 	.word	0x08008d65
 8008d1c:	08008d6d 	.word	0x08008d6d
 8008d20:	2300      	movs	r3, #0
 8008d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d26:	e14a      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008d28:	2304      	movs	r3, #4
 8008d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d2e:	e146      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008d30:	2308      	movs	r3, #8
 8008d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d36:	e142      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008d38:	2310      	movs	r3, #16
 8008d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3e:	e13e      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008d40:	cfff69f3 	.word	0xcfff69f3
 8008d44:	58000c00 	.word	0x58000c00
 8008d48:	11fff4ff 	.word	0x11fff4ff
 8008d4c:	40011000 	.word	0x40011000
 8008d50:	58024400 	.word	0x58024400
 8008d54:	40004400 	.word	0x40004400
 8008d58:	40004800 	.word	0x40004800
 8008d5c:	40004c00 	.word	0x40004c00
 8008d60:	40005000 	.word	0x40005000
 8008d64:	2320      	movs	r3, #32
 8008d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d6a:	e128      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008d6c:	2340      	movs	r3, #64	@ 0x40
 8008d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d72:	e124      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008d74:	2380      	movs	r3, #128	@ 0x80
 8008d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d7a:	e120      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4acb      	ldr	r2, [pc, #812]	@ (80090b0 <UART_SetConfig+0x698>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d176      	bne.n	8008e74 <UART_SetConfig+0x45c>
 8008d86:	4bcb      	ldr	r3, [pc, #812]	@ (80090b4 <UART_SetConfig+0x69c>)
 8008d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d8e:	2b28      	cmp	r3, #40	@ 0x28
 8008d90:	d86c      	bhi.n	8008e6c <UART_SetConfig+0x454>
 8008d92:	a201      	add	r2, pc, #4	@ (adr r2, 8008d98 <UART_SetConfig+0x380>)
 8008d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d98:	08008e3d 	.word	0x08008e3d
 8008d9c:	08008e6d 	.word	0x08008e6d
 8008da0:	08008e6d 	.word	0x08008e6d
 8008da4:	08008e6d 	.word	0x08008e6d
 8008da8:	08008e6d 	.word	0x08008e6d
 8008dac:	08008e6d 	.word	0x08008e6d
 8008db0:	08008e6d 	.word	0x08008e6d
 8008db4:	08008e6d 	.word	0x08008e6d
 8008db8:	08008e45 	.word	0x08008e45
 8008dbc:	08008e6d 	.word	0x08008e6d
 8008dc0:	08008e6d 	.word	0x08008e6d
 8008dc4:	08008e6d 	.word	0x08008e6d
 8008dc8:	08008e6d 	.word	0x08008e6d
 8008dcc:	08008e6d 	.word	0x08008e6d
 8008dd0:	08008e6d 	.word	0x08008e6d
 8008dd4:	08008e6d 	.word	0x08008e6d
 8008dd8:	08008e4d 	.word	0x08008e4d
 8008ddc:	08008e6d 	.word	0x08008e6d
 8008de0:	08008e6d 	.word	0x08008e6d
 8008de4:	08008e6d 	.word	0x08008e6d
 8008de8:	08008e6d 	.word	0x08008e6d
 8008dec:	08008e6d 	.word	0x08008e6d
 8008df0:	08008e6d 	.word	0x08008e6d
 8008df4:	08008e6d 	.word	0x08008e6d
 8008df8:	08008e55 	.word	0x08008e55
 8008dfc:	08008e6d 	.word	0x08008e6d
 8008e00:	08008e6d 	.word	0x08008e6d
 8008e04:	08008e6d 	.word	0x08008e6d
 8008e08:	08008e6d 	.word	0x08008e6d
 8008e0c:	08008e6d 	.word	0x08008e6d
 8008e10:	08008e6d 	.word	0x08008e6d
 8008e14:	08008e6d 	.word	0x08008e6d
 8008e18:	08008e5d 	.word	0x08008e5d
 8008e1c:	08008e6d 	.word	0x08008e6d
 8008e20:	08008e6d 	.word	0x08008e6d
 8008e24:	08008e6d 	.word	0x08008e6d
 8008e28:	08008e6d 	.word	0x08008e6d
 8008e2c:	08008e6d 	.word	0x08008e6d
 8008e30:	08008e6d 	.word	0x08008e6d
 8008e34:	08008e6d 	.word	0x08008e6d
 8008e38:	08008e65 	.word	0x08008e65
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e42:	e0bc      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008e44:	2304      	movs	r3, #4
 8008e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4a:	e0b8      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008e4c:	2308      	movs	r3, #8
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e52:	e0b4      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008e54:	2310      	movs	r3, #16
 8008e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5a:	e0b0      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008e5c:	2320      	movs	r3, #32
 8008e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e62:	e0ac      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008e64:	2340      	movs	r3, #64	@ 0x40
 8008e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6a:	e0a8      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008e6c:	2380      	movs	r3, #128	@ 0x80
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e72:	e0a4      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a8f      	ldr	r2, [pc, #572]	@ (80090b8 <UART_SetConfig+0x6a0>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d130      	bne.n	8008ee0 <UART_SetConfig+0x4c8>
 8008e7e:	4b8d      	ldr	r3, [pc, #564]	@ (80090b4 <UART_SetConfig+0x69c>)
 8008e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e82:	f003 0307 	and.w	r3, r3, #7
 8008e86:	2b05      	cmp	r3, #5
 8008e88:	d826      	bhi.n	8008ed8 <UART_SetConfig+0x4c0>
 8008e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e90 <UART_SetConfig+0x478>)
 8008e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e90:	08008ea9 	.word	0x08008ea9
 8008e94:	08008eb1 	.word	0x08008eb1
 8008e98:	08008eb9 	.word	0x08008eb9
 8008e9c:	08008ec1 	.word	0x08008ec1
 8008ea0:	08008ec9 	.word	0x08008ec9
 8008ea4:	08008ed1 	.word	0x08008ed1
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eae:	e086      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008eb0:	2304      	movs	r3, #4
 8008eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eb6:	e082      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008eb8:	2308      	movs	r3, #8
 8008eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ebe:	e07e      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008ec0:	2310      	movs	r3, #16
 8008ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ec6:	e07a      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008ec8:	2320      	movs	r3, #32
 8008eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ece:	e076      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008ed0:	2340      	movs	r3, #64	@ 0x40
 8008ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ed6:	e072      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008ed8:	2380      	movs	r3, #128	@ 0x80
 8008eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ede:	e06e      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a75      	ldr	r2, [pc, #468]	@ (80090bc <UART_SetConfig+0x6a4>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d130      	bne.n	8008f4c <UART_SetConfig+0x534>
 8008eea:	4b72      	ldr	r3, [pc, #456]	@ (80090b4 <UART_SetConfig+0x69c>)
 8008eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eee:	f003 0307 	and.w	r3, r3, #7
 8008ef2:	2b05      	cmp	r3, #5
 8008ef4:	d826      	bhi.n	8008f44 <UART_SetConfig+0x52c>
 8008ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8008efc <UART_SetConfig+0x4e4>)
 8008ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efc:	08008f15 	.word	0x08008f15
 8008f00:	08008f1d 	.word	0x08008f1d
 8008f04:	08008f25 	.word	0x08008f25
 8008f08:	08008f2d 	.word	0x08008f2d
 8008f0c:	08008f35 	.word	0x08008f35
 8008f10:	08008f3d 	.word	0x08008f3d
 8008f14:	2300      	movs	r3, #0
 8008f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1a:	e050      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008f1c:	2304      	movs	r3, #4
 8008f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f22:	e04c      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008f24:	2308      	movs	r3, #8
 8008f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2a:	e048      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008f2c:	2310      	movs	r3, #16
 8008f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f32:	e044      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008f34:	2320      	movs	r3, #32
 8008f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f3a:	e040      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008f3c:	2340      	movs	r3, #64	@ 0x40
 8008f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f42:	e03c      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008f44:	2380      	movs	r3, #128	@ 0x80
 8008f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4a:	e038      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a5b      	ldr	r2, [pc, #364]	@ (80090c0 <UART_SetConfig+0x6a8>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d130      	bne.n	8008fb8 <UART_SetConfig+0x5a0>
 8008f56:	4b57      	ldr	r3, [pc, #348]	@ (80090b4 <UART_SetConfig+0x69c>)
 8008f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f5a:	f003 0307 	and.w	r3, r3, #7
 8008f5e:	2b05      	cmp	r3, #5
 8008f60:	d826      	bhi.n	8008fb0 <UART_SetConfig+0x598>
 8008f62:	a201      	add	r2, pc, #4	@ (adr r2, 8008f68 <UART_SetConfig+0x550>)
 8008f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f68:	08008f81 	.word	0x08008f81
 8008f6c:	08008f89 	.word	0x08008f89
 8008f70:	08008f91 	.word	0x08008f91
 8008f74:	08008f99 	.word	0x08008f99
 8008f78:	08008fa1 	.word	0x08008fa1
 8008f7c:	08008fa9 	.word	0x08008fa9
 8008f80:	2302      	movs	r3, #2
 8008f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f86:	e01a      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008f88:	2304      	movs	r3, #4
 8008f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f8e:	e016      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008f90:	2308      	movs	r3, #8
 8008f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f96:	e012      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008f98:	2310      	movs	r3, #16
 8008f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f9e:	e00e      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008fa0:	2320      	movs	r3, #32
 8008fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fa6:	e00a      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008fa8:	2340      	movs	r3, #64	@ 0x40
 8008faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fae:	e006      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008fb0:	2380      	movs	r3, #128	@ 0x80
 8008fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb6:	e002      	b.n	8008fbe <UART_SetConfig+0x5a6>
 8008fb8:	2380      	movs	r3, #128	@ 0x80
 8008fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a3f      	ldr	r2, [pc, #252]	@ (80090c0 <UART_SetConfig+0x6a8>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	f040 80f8 	bne.w	80091ba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008fca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008fce:	2b20      	cmp	r3, #32
 8008fd0:	dc46      	bgt.n	8009060 <UART_SetConfig+0x648>
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	f2c0 8082 	blt.w	80090dc <UART_SetConfig+0x6c4>
 8008fd8:	3b02      	subs	r3, #2
 8008fda:	2b1e      	cmp	r3, #30
 8008fdc:	d87e      	bhi.n	80090dc <UART_SetConfig+0x6c4>
 8008fde:	a201      	add	r2, pc, #4	@ (adr r2, 8008fe4 <UART_SetConfig+0x5cc>)
 8008fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe4:	08009067 	.word	0x08009067
 8008fe8:	080090dd 	.word	0x080090dd
 8008fec:	0800906f 	.word	0x0800906f
 8008ff0:	080090dd 	.word	0x080090dd
 8008ff4:	080090dd 	.word	0x080090dd
 8008ff8:	080090dd 	.word	0x080090dd
 8008ffc:	0800907f 	.word	0x0800907f
 8009000:	080090dd 	.word	0x080090dd
 8009004:	080090dd 	.word	0x080090dd
 8009008:	080090dd 	.word	0x080090dd
 800900c:	080090dd 	.word	0x080090dd
 8009010:	080090dd 	.word	0x080090dd
 8009014:	080090dd 	.word	0x080090dd
 8009018:	080090dd 	.word	0x080090dd
 800901c:	0800908f 	.word	0x0800908f
 8009020:	080090dd 	.word	0x080090dd
 8009024:	080090dd 	.word	0x080090dd
 8009028:	080090dd 	.word	0x080090dd
 800902c:	080090dd 	.word	0x080090dd
 8009030:	080090dd 	.word	0x080090dd
 8009034:	080090dd 	.word	0x080090dd
 8009038:	080090dd 	.word	0x080090dd
 800903c:	080090dd 	.word	0x080090dd
 8009040:	080090dd 	.word	0x080090dd
 8009044:	080090dd 	.word	0x080090dd
 8009048:	080090dd 	.word	0x080090dd
 800904c:	080090dd 	.word	0x080090dd
 8009050:	080090dd 	.word	0x080090dd
 8009054:	080090dd 	.word	0x080090dd
 8009058:	080090dd 	.word	0x080090dd
 800905c:	080090cf 	.word	0x080090cf
 8009060:	2b40      	cmp	r3, #64	@ 0x40
 8009062:	d037      	beq.n	80090d4 <UART_SetConfig+0x6bc>
 8009064:	e03a      	b.n	80090dc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009066:	f7fe fd87 	bl	8007b78 <HAL_RCCEx_GetD3PCLK1Freq>
 800906a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800906c:	e03c      	b.n	80090e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800906e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009072:	4618      	mov	r0, r3
 8009074:	f7fe fd96 	bl	8007ba4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800907a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800907c:	e034      	b.n	80090e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800907e:	f107 0318 	add.w	r3, r7, #24
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe fee2 	bl	8007e4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800908c:	e02c      	b.n	80090e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800908e:	4b09      	ldr	r3, [pc, #36]	@ (80090b4 <UART_SetConfig+0x69c>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0320 	and.w	r3, r3, #32
 8009096:	2b00      	cmp	r3, #0
 8009098:	d016      	beq.n	80090c8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800909a:	4b06      	ldr	r3, [pc, #24]	@ (80090b4 <UART_SetConfig+0x69c>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	08db      	lsrs	r3, r3, #3
 80090a0:	f003 0303 	and.w	r3, r3, #3
 80090a4:	4a07      	ldr	r2, [pc, #28]	@ (80090c4 <UART_SetConfig+0x6ac>)
 80090a6:	fa22 f303 	lsr.w	r3, r2, r3
 80090aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090ac:	e01c      	b.n	80090e8 <UART_SetConfig+0x6d0>
 80090ae:	bf00      	nop
 80090b0:	40011400 	.word	0x40011400
 80090b4:	58024400 	.word	0x58024400
 80090b8:	40007800 	.word	0x40007800
 80090bc:	40007c00 	.word	0x40007c00
 80090c0:	58000c00 	.word	0x58000c00
 80090c4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80090c8:	4b9d      	ldr	r3, [pc, #628]	@ (8009340 <UART_SetConfig+0x928>)
 80090ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090cc:	e00c      	b.n	80090e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80090ce:	4b9d      	ldr	r3, [pc, #628]	@ (8009344 <UART_SetConfig+0x92c>)
 80090d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090d2:	e009      	b.n	80090e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090da:	e005      	b.n	80090e8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80090e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80090e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f000 81de 	beq.w	80094ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f4:	4a94      	ldr	r2, [pc, #592]	@ (8009348 <UART_SetConfig+0x930>)
 80090f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090fa:	461a      	mov	r2, r3
 80090fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009102:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	4613      	mov	r3, r2
 800910a:	005b      	lsls	r3, r3, #1
 800910c:	4413      	add	r3, r2
 800910e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009110:	429a      	cmp	r2, r3
 8009112:	d305      	bcc.n	8009120 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800911a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800911c:	429a      	cmp	r2, r3
 800911e:	d903      	bls.n	8009128 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009126:	e1c1      	b.n	80094ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800912a:	2200      	movs	r2, #0
 800912c:	60bb      	str	r3, [r7, #8]
 800912e:	60fa      	str	r2, [r7, #12]
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009134:	4a84      	ldr	r2, [pc, #528]	@ (8009348 <UART_SetConfig+0x930>)
 8009136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800913a:	b29b      	uxth	r3, r3
 800913c:	2200      	movs	r2, #0
 800913e:	603b      	str	r3, [r7, #0]
 8009140:	607a      	str	r2, [r7, #4]
 8009142:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009146:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800914a:	f7f7 f8c5 	bl	80002d8 <__aeabi_uldivmod>
 800914e:	4602      	mov	r2, r0
 8009150:	460b      	mov	r3, r1
 8009152:	4610      	mov	r0, r2
 8009154:	4619      	mov	r1, r3
 8009156:	f04f 0200 	mov.w	r2, #0
 800915a:	f04f 0300 	mov.w	r3, #0
 800915e:	020b      	lsls	r3, r1, #8
 8009160:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009164:	0202      	lsls	r2, r0, #8
 8009166:	6979      	ldr	r1, [r7, #20]
 8009168:	6849      	ldr	r1, [r1, #4]
 800916a:	0849      	lsrs	r1, r1, #1
 800916c:	2000      	movs	r0, #0
 800916e:	460c      	mov	r4, r1
 8009170:	4605      	mov	r5, r0
 8009172:	eb12 0804 	adds.w	r8, r2, r4
 8009176:	eb43 0905 	adc.w	r9, r3, r5
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	469a      	mov	sl, r3
 8009182:	4693      	mov	fp, r2
 8009184:	4652      	mov	r2, sl
 8009186:	465b      	mov	r3, fp
 8009188:	4640      	mov	r0, r8
 800918a:	4649      	mov	r1, r9
 800918c:	f7f7 f8a4 	bl	80002d8 <__aeabi_uldivmod>
 8009190:	4602      	mov	r2, r0
 8009192:	460b      	mov	r3, r1
 8009194:	4613      	mov	r3, r2
 8009196:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800919e:	d308      	bcc.n	80091b2 <UART_SetConfig+0x79a>
 80091a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091a6:	d204      	bcs.n	80091b2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091ae:	60da      	str	r2, [r3, #12]
 80091b0:	e17c      	b.n	80094ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80091b8:	e178      	b.n	80094ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	69db      	ldr	r3, [r3, #28]
 80091be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091c2:	f040 80c5 	bne.w	8009350 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80091c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80091ca:	2b20      	cmp	r3, #32
 80091cc:	dc48      	bgt.n	8009260 <UART_SetConfig+0x848>
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	db7b      	blt.n	80092ca <UART_SetConfig+0x8b2>
 80091d2:	2b20      	cmp	r3, #32
 80091d4:	d879      	bhi.n	80092ca <UART_SetConfig+0x8b2>
 80091d6:	a201      	add	r2, pc, #4	@ (adr r2, 80091dc <UART_SetConfig+0x7c4>)
 80091d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091dc:	08009267 	.word	0x08009267
 80091e0:	0800926f 	.word	0x0800926f
 80091e4:	080092cb 	.word	0x080092cb
 80091e8:	080092cb 	.word	0x080092cb
 80091ec:	08009277 	.word	0x08009277
 80091f0:	080092cb 	.word	0x080092cb
 80091f4:	080092cb 	.word	0x080092cb
 80091f8:	080092cb 	.word	0x080092cb
 80091fc:	08009287 	.word	0x08009287
 8009200:	080092cb 	.word	0x080092cb
 8009204:	080092cb 	.word	0x080092cb
 8009208:	080092cb 	.word	0x080092cb
 800920c:	080092cb 	.word	0x080092cb
 8009210:	080092cb 	.word	0x080092cb
 8009214:	080092cb 	.word	0x080092cb
 8009218:	080092cb 	.word	0x080092cb
 800921c:	08009297 	.word	0x08009297
 8009220:	080092cb 	.word	0x080092cb
 8009224:	080092cb 	.word	0x080092cb
 8009228:	080092cb 	.word	0x080092cb
 800922c:	080092cb 	.word	0x080092cb
 8009230:	080092cb 	.word	0x080092cb
 8009234:	080092cb 	.word	0x080092cb
 8009238:	080092cb 	.word	0x080092cb
 800923c:	080092cb 	.word	0x080092cb
 8009240:	080092cb 	.word	0x080092cb
 8009244:	080092cb 	.word	0x080092cb
 8009248:	080092cb 	.word	0x080092cb
 800924c:	080092cb 	.word	0x080092cb
 8009250:	080092cb 	.word	0x080092cb
 8009254:	080092cb 	.word	0x080092cb
 8009258:	080092cb 	.word	0x080092cb
 800925c:	080092bd 	.word	0x080092bd
 8009260:	2b40      	cmp	r3, #64	@ 0x40
 8009262:	d02e      	beq.n	80092c2 <UART_SetConfig+0x8aa>
 8009264:	e031      	b.n	80092ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009266:	f7fc fcd1 	bl	8005c0c <HAL_RCC_GetPCLK1Freq>
 800926a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800926c:	e033      	b.n	80092d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800926e:	f7fc fce3 	bl	8005c38 <HAL_RCC_GetPCLK2Freq>
 8009272:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009274:	e02f      	b.n	80092d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009276:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800927a:	4618      	mov	r0, r3
 800927c:	f7fe fc92 	bl	8007ba4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009284:	e027      	b.n	80092d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009286:	f107 0318 	add.w	r3, r7, #24
 800928a:	4618      	mov	r0, r3
 800928c:	f7fe fdde 	bl	8007e4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009294:	e01f      	b.n	80092d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009296:	4b2d      	ldr	r3, [pc, #180]	@ (800934c <UART_SetConfig+0x934>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0320 	and.w	r3, r3, #32
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d009      	beq.n	80092b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092a2:	4b2a      	ldr	r3, [pc, #168]	@ (800934c <UART_SetConfig+0x934>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	08db      	lsrs	r3, r3, #3
 80092a8:	f003 0303 	and.w	r3, r3, #3
 80092ac:	4a24      	ldr	r2, [pc, #144]	@ (8009340 <UART_SetConfig+0x928>)
 80092ae:	fa22 f303 	lsr.w	r3, r2, r3
 80092b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092b4:	e00f      	b.n	80092d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80092b6:	4b22      	ldr	r3, [pc, #136]	@ (8009340 <UART_SetConfig+0x928>)
 80092b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092ba:	e00c      	b.n	80092d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092bc:	4b21      	ldr	r3, [pc, #132]	@ (8009344 <UART_SetConfig+0x92c>)
 80092be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092c0:	e009      	b.n	80092d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092c8:	e005      	b.n	80092d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80092ca:	2300      	movs	r3, #0
 80092cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80092d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 80e7 	beq.w	80094ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092e2:	4a19      	ldr	r2, [pc, #100]	@ (8009348 <UART_SetConfig+0x930>)
 80092e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092e8:	461a      	mov	r2, r3
 80092ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80092f0:	005a      	lsls	r2, r3, #1
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	085b      	lsrs	r3, r3, #1
 80092f8:	441a      	add	r2, r3
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009302:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009306:	2b0f      	cmp	r3, #15
 8009308:	d916      	bls.n	8009338 <UART_SetConfig+0x920>
 800930a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800930c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009310:	d212      	bcs.n	8009338 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009314:	b29b      	uxth	r3, r3
 8009316:	f023 030f 	bic.w	r3, r3, #15
 800931a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800931c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931e:	085b      	lsrs	r3, r3, #1
 8009320:	b29b      	uxth	r3, r3
 8009322:	f003 0307 	and.w	r3, r3, #7
 8009326:	b29a      	uxth	r2, r3
 8009328:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800932a:	4313      	orrs	r3, r2
 800932c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009334:	60da      	str	r2, [r3, #12]
 8009336:	e0b9      	b.n	80094ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800933e:	e0b5      	b.n	80094ac <UART_SetConfig+0xa94>
 8009340:	03d09000 	.word	0x03d09000
 8009344:	003d0900 	.word	0x003d0900
 8009348:	08009bb8 	.word	0x08009bb8
 800934c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009350:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009354:	2b20      	cmp	r3, #32
 8009356:	dc49      	bgt.n	80093ec <UART_SetConfig+0x9d4>
 8009358:	2b00      	cmp	r3, #0
 800935a:	db7c      	blt.n	8009456 <UART_SetConfig+0xa3e>
 800935c:	2b20      	cmp	r3, #32
 800935e:	d87a      	bhi.n	8009456 <UART_SetConfig+0xa3e>
 8009360:	a201      	add	r2, pc, #4	@ (adr r2, 8009368 <UART_SetConfig+0x950>)
 8009362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009366:	bf00      	nop
 8009368:	080093f3 	.word	0x080093f3
 800936c:	080093fb 	.word	0x080093fb
 8009370:	08009457 	.word	0x08009457
 8009374:	08009457 	.word	0x08009457
 8009378:	08009403 	.word	0x08009403
 800937c:	08009457 	.word	0x08009457
 8009380:	08009457 	.word	0x08009457
 8009384:	08009457 	.word	0x08009457
 8009388:	08009413 	.word	0x08009413
 800938c:	08009457 	.word	0x08009457
 8009390:	08009457 	.word	0x08009457
 8009394:	08009457 	.word	0x08009457
 8009398:	08009457 	.word	0x08009457
 800939c:	08009457 	.word	0x08009457
 80093a0:	08009457 	.word	0x08009457
 80093a4:	08009457 	.word	0x08009457
 80093a8:	08009423 	.word	0x08009423
 80093ac:	08009457 	.word	0x08009457
 80093b0:	08009457 	.word	0x08009457
 80093b4:	08009457 	.word	0x08009457
 80093b8:	08009457 	.word	0x08009457
 80093bc:	08009457 	.word	0x08009457
 80093c0:	08009457 	.word	0x08009457
 80093c4:	08009457 	.word	0x08009457
 80093c8:	08009457 	.word	0x08009457
 80093cc:	08009457 	.word	0x08009457
 80093d0:	08009457 	.word	0x08009457
 80093d4:	08009457 	.word	0x08009457
 80093d8:	08009457 	.word	0x08009457
 80093dc:	08009457 	.word	0x08009457
 80093e0:	08009457 	.word	0x08009457
 80093e4:	08009457 	.word	0x08009457
 80093e8:	08009449 	.word	0x08009449
 80093ec:	2b40      	cmp	r3, #64	@ 0x40
 80093ee:	d02e      	beq.n	800944e <UART_SetConfig+0xa36>
 80093f0:	e031      	b.n	8009456 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093f2:	f7fc fc0b 	bl	8005c0c <HAL_RCC_GetPCLK1Freq>
 80093f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093f8:	e033      	b.n	8009462 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093fa:	f7fc fc1d 	bl	8005c38 <HAL_RCC_GetPCLK2Freq>
 80093fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009400:	e02f      	b.n	8009462 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009406:	4618      	mov	r0, r3
 8009408:	f7fe fbcc 	bl	8007ba4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800940c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800940e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009410:	e027      	b.n	8009462 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009412:	f107 0318 	add.w	r3, r7, #24
 8009416:	4618      	mov	r0, r3
 8009418:	f7fe fd18 	bl	8007e4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009420:	e01f      	b.n	8009462 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009422:	4b2d      	ldr	r3, [pc, #180]	@ (80094d8 <UART_SetConfig+0xac0>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 0320 	and.w	r3, r3, #32
 800942a:	2b00      	cmp	r3, #0
 800942c:	d009      	beq.n	8009442 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800942e:	4b2a      	ldr	r3, [pc, #168]	@ (80094d8 <UART_SetConfig+0xac0>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	08db      	lsrs	r3, r3, #3
 8009434:	f003 0303 	and.w	r3, r3, #3
 8009438:	4a28      	ldr	r2, [pc, #160]	@ (80094dc <UART_SetConfig+0xac4>)
 800943a:	fa22 f303 	lsr.w	r3, r2, r3
 800943e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009440:	e00f      	b.n	8009462 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009442:	4b26      	ldr	r3, [pc, #152]	@ (80094dc <UART_SetConfig+0xac4>)
 8009444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009446:	e00c      	b.n	8009462 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009448:	4b25      	ldr	r3, [pc, #148]	@ (80094e0 <UART_SetConfig+0xac8>)
 800944a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800944c:	e009      	b.n	8009462 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800944e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009454:	e005      	b.n	8009462 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009456:	2300      	movs	r3, #0
 8009458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009460:	bf00      	nop
    }

    if (pclk != 0U)
 8009462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009464:	2b00      	cmp	r3, #0
 8009466:	d021      	beq.n	80094ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800946c:	4a1d      	ldr	r2, [pc, #116]	@ (80094e4 <UART_SetConfig+0xacc>)
 800946e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009472:	461a      	mov	r2, r3
 8009474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009476:	fbb3 f2f2 	udiv	r2, r3, r2
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	085b      	lsrs	r3, r3, #1
 8009480:	441a      	add	r2, r3
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	fbb2 f3f3 	udiv	r3, r2, r3
 800948a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800948c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800948e:	2b0f      	cmp	r3, #15
 8009490:	d909      	bls.n	80094a6 <UART_SetConfig+0xa8e>
 8009492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009498:	d205      	bcs.n	80094a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800949a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800949c:	b29a      	uxth	r2, r3
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	60da      	str	r2, [r3, #12]
 80094a4:	e002      	b.n	80094ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	2200      	movs	r2, #0
 80094c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	2200      	movs	r2, #0
 80094c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80094c8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3748      	adds	r7, #72	@ 0x48
 80094d0:	46bd      	mov	sp, r7
 80094d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094d6:	bf00      	nop
 80094d8:	58024400 	.word	0x58024400
 80094dc:	03d09000 	.word	0x03d09000
 80094e0:	003d0900 	.word	0x003d0900
 80094e4:	08009bb8 	.word	0x08009bb8

080094e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f4:	f003 0308 	and.w	r3, r3, #8
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00a      	beq.n	8009512 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	430a      	orrs	r2, r1
 8009510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00a      	beq.n	8009534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	430a      	orrs	r2, r1
 8009532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009538:	f003 0302 	and.w	r3, r3, #2
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00a      	beq.n	8009556 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	430a      	orrs	r2, r1
 8009554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800955a:	f003 0304 	and.w	r3, r3, #4
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00a      	beq.n	8009578 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	430a      	orrs	r2, r1
 8009576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800957c:	f003 0310 	and.w	r3, r3, #16
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00a      	beq.n	800959a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	430a      	orrs	r2, r1
 8009598:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800959e:	f003 0320 	and.w	r3, r3, #32
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00a      	beq.n	80095bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	430a      	orrs	r2, r1
 80095ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d01a      	beq.n	80095fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	430a      	orrs	r2, r1
 80095dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095e6:	d10a      	bne.n	80095fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	430a      	orrs	r2, r1
 80095fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00a      	beq.n	8009620 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	430a      	orrs	r2, r1
 800961e:	605a      	str	r2, [r3, #4]
  }
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b098      	sub	sp, #96	@ 0x60
 8009630:	af02      	add	r7, sp, #8
 8009632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800963c:	f7f8 f8b8 	bl	80017b0 <HAL_GetTick>
 8009640:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 0308 	and.w	r3, r3, #8
 800964c:	2b08      	cmp	r3, #8
 800964e:	d12f      	bne.n	80096b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009650:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009654:	9300      	str	r3, [sp, #0]
 8009656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009658:	2200      	movs	r2, #0
 800965a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f88e 	bl	8009780 <UART_WaitOnFlagUntilTimeout>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d022      	beq.n	80096b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009672:	e853 3f00 	ldrex	r3, [r3]
 8009676:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800967a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800967e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	461a      	mov	r2, r3
 8009686:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009688:	647b      	str	r3, [r7, #68]	@ 0x44
 800968a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800968e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009690:	e841 2300 	strex	r3, r2, [r1]
 8009694:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1e6      	bne.n	800966a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2220      	movs	r2, #32
 80096a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e063      	b.n	8009778 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 0304 	and.w	r3, r3, #4
 80096ba:	2b04      	cmp	r3, #4
 80096bc:	d149      	bne.n	8009752 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096c6:	2200      	movs	r2, #0
 80096c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f857 	bl	8009780 <UART_WaitOnFlagUntilTimeout>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d03c      	beq.n	8009752 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e0:	e853 3f00 	ldrex	r3, [r3]
 80096e4:	623b      	str	r3, [r7, #32]
   return(result);
 80096e6:	6a3b      	ldr	r3, [r7, #32]
 80096e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80096f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096fe:	e841 2300 	strex	r3, r2, [r1]
 8009702:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1e6      	bne.n	80096d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3308      	adds	r3, #8
 8009710:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	e853 3f00 	ldrex	r3, [r3]
 8009718:	60fb      	str	r3, [r7, #12]
   return(result);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f023 0301 	bic.w	r3, r3, #1
 8009720:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3308      	adds	r3, #8
 8009728:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800972a:	61fa      	str	r2, [r7, #28]
 800972c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972e:	69b9      	ldr	r1, [r7, #24]
 8009730:	69fa      	ldr	r2, [r7, #28]
 8009732:	e841 2300 	strex	r3, r2, [r1]
 8009736:	617b      	str	r3, [r7, #20]
   return(result);
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1e5      	bne.n	800970a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2220      	movs	r2, #32
 8009742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800974e:	2303      	movs	r3, #3
 8009750:	e012      	b.n	8009778 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2220      	movs	r2, #32
 8009756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2220      	movs	r2, #32
 800975e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3758      	adds	r7, #88	@ 0x58
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	603b      	str	r3, [r7, #0]
 800978c:	4613      	mov	r3, r2
 800978e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009790:	e04f      	b.n	8009832 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009798:	d04b      	beq.n	8009832 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800979a:	f7f8 f809 	bl	80017b0 <HAL_GetTick>
 800979e:	4602      	mov	r2, r0
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	69ba      	ldr	r2, [r7, #24]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d302      	bcc.n	80097b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80097b0:	2303      	movs	r3, #3
 80097b2:	e04e      	b.n	8009852 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 0304 	and.w	r3, r3, #4
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d037      	beq.n	8009832 <UART_WaitOnFlagUntilTimeout+0xb2>
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	2b80      	cmp	r3, #128	@ 0x80
 80097c6:	d034      	beq.n	8009832 <UART_WaitOnFlagUntilTimeout+0xb2>
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	2b40      	cmp	r3, #64	@ 0x40
 80097cc:	d031      	beq.n	8009832 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	69db      	ldr	r3, [r3, #28]
 80097d4:	f003 0308 	and.w	r3, r3, #8
 80097d8:	2b08      	cmp	r3, #8
 80097da:	d110      	bne.n	80097fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2208      	movs	r2, #8
 80097e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f000 f839 	bl	800985c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2208      	movs	r2, #8
 80097ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e029      	b.n	8009852 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	69db      	ldr	r3, [r3, #28]
 8009804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009808:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800980c:	d111      	bne.n	8009832 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009816:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f000 f81f 	bl	800985c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2220      	movs	r2, #32
 8009822:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800982e:	2303      	movs	r3, #3
 8009830:	e00f      	b.n	8009852 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	69da      	ldr	r2, [r3, #28]
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	4013      	ands	r3, r2
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	429a      	cmp	r2, r3
 8009840:	bf0c      	ite	eq
 8009842:	2301      	moveq	r3, #1
 8009844:	2300      	movne	r3, #0
 8009846:	b2db      	uxtb	r3, r3
 8009848:	461a      	mov	r2, r3
 800984a:	79fb      	ldrb	r3, [r7, #7]
 800984c:	429a      	cmp	r2, r3
 800984e:	d0a0      	beq.n	8009792 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
	...

0800985c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800985c:	b480      	push	{r7}
 800985e:	b095      	sub	sp, #84	@ 0x54
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800986c:	e853 3f00 	ldrex	r3, [r3]
 8009870:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009874:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009878:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	461a      	mov	r2, r3
 8009880:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009882:	643b      	str	r3, [r7, #64]	@ 0x40
 8009884:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009886:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009888:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800988a:	e841 2300 	strex	r3, r2, [r1]
 800988e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1e6      	bne.n	8009864 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	3308      	adds	r3, #8
 800989c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989e:	6a3b      	ldr	r3, [r7, #32]
 80098a0:	e853 3f00 	ldrex	r3, [r3]
 80098a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80098a6:	69fa      	ldr	r2, [r7, #28]
 80098a8:	4b1e      	ldr	r3, [pc, #120]	@ (8009924 <UART_EndRxTransfer+0xc8>)
 80098aa:	4013      	ands	r3, r2
 80098ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	3308      	adds	r3, #8
 80098b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80098b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098be:	e841 2300 	strex	r3, r2, [r1]
 80098c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1e5      	bne.n	8009896 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d118      	bne.n	8009904 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	e853 3f00 	ldrex	r3, [r3]
 80098de:	60bb      	str	r3, [r7, #8]
   return(result);
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	f023 0310 	bic.w	r3, r3, #16
 80098e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	461a      	mov	r2, r3
 80098ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098f0:	61bb      	str	r3, [r7, #24]
 80098f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f4:	6979      	ldr	r1, [r7, #20]
 80098f6:	69ba      	ldr	r2, [r7, #24]
 80098f8:	e841 2300 	strex	r3, r2, [r1]
 80098fc:	613b      	str	r3, [r7, #16]
   return(result);
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1e6      	bne.n	80098d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2220      	movs	r2, #32
 8009908:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009918:	bf00      	nop
 800991a:	3754      	adds	r7, #84	@ 0x54
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr
 8009924:	effffffe 	.word	0xeffffffe

08009928 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009936:	2b01      	cmp	r3, #1
 8009938:	d101      	bne.n	800993e <HAL_UARTEx_DisableFifoMode+0x16>
 800993a:	2302      	movs	r3, #2
 800993c:	e027      	b.n	800998e <HAL_UARTEx_DisableFifoMode+0x66>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2224      	movs	r2, #36	@ 0x24
 800994a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f022 0201 	bic.w	r2, r2, #1
 8009964:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800996c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2220      	movs	r2, #32
 8009980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr

0800999a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b084      	sub	sp, #16
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d101      	bne.n	80099b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80099ae:	2302      	movs	r3, #2
 80099b0:	e02d      	b.n	8009a0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2224      	movs	r2, #36	@ 0x24
 80099be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f022 0201 	bic.w	r2, r2, #1
 80099d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	683a      	ldr	r2, [r7, #0]
 80099ea:	430a      	orrs	r2, r1
 80099ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f850 	bl	8009a94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2220      	movs	r2, #32
 8009a00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b084      	sub	sp, #16
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d101      	bne.n	8009a2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	e02d      	b.n	8009a8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2201      	movs	r2, #1
 8009a32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2224      	movs	r2, #36	@ 0x24
 8009a3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f022 0201 	bic.w	r2, r2, #1
 8009a54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	683a      	ldr	r2, [r7, #0]
 8009a66:	430a      	orrs	r2, r1
 8009a68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f812 	bl	8009a94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2220      	movs	r2, #32
 8009a7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
	...

08009a94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d108      	bne.n	8009ab6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ab4:	e031      	b.n	8009b1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ab6:	2310      	movs	r3, #16
 8009ab8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009aba:	2310      	movs	r3, #16
 8009abc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	0e5b      	lsrs	r3, r3, #25
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	f003 0307 	and.w	r3, r3, #7
 8009acc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	0f5b      	lsrs	r3, r3, #29
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	f003 0307 	and.w	r3, r3, #7
 8009adc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ade:	7bbb      	ldrb	r3, [r7, #14]
 8009ae0:	7b3a      	ldrb	r2, [r7, #12]
 8009ae2:	4911      	ldr	r1, [pc, #68]	@ (8009b28 <UARTEx_SetNbDataToProcess+0x94>)
 8009ae4:	5c8a      	ldrb	r2, [r1, r2]
 8009ae6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009aea:	7b3a      	ldrb	r2, [r7, #12]
 8009aec:	490f      	ldr	r1, [pc, #60]	@ (8009b2c <UARTEx_SetNbDataToProcess+0x98>)
 8009aee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009af0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
 8009afe:	7b7a      	ldrb	r2, [r7, #13]
 8009b00:	4909      	ldr	r1, [pc, #36]	@ (8009b28 <UARTEx_SetNbDataToProcess+0x94>)
 8009b02:	5c8a      	ldrb	r2, [r1, r2]
 8009b04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b08:	7b7a      	ldrb	r2, [r7, #13]
 8009b0a:	4908      	ldr	r1, [pc, #32]	@ (8009b2c <UARTEx_SetNbDataToProcess+0x98>)
 8009b0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009b1a:	bf00      	nop
 8009b1c:	3714      	adds	r7, #20
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	08009bd0 	.word	0x08009bd0
 8009b2c:	08009bd8 	.word	0x08009bd8

08009b30 <memset>:
 8009b30:	4402      	add	r2, r0
 8009b32:	4603      	mov	r3, r0
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d100      	bne.n	8009b3a <memset+0xa>
 8009b38:	4770      	bx	lr
 8009b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b3e:	e7f9      	b.n	8009b34 <memset+0x4>

08009b40 <__libc_init_array>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	4d0d      	ldr	r5, [pc, #52]	@ (8009b78 <__libc_init_array+0x38>)
 8009b44:	4c0d      	ldr	r4, [pc, #52]	@ (8009b7c <__libc_init_array+0x3c>)
 8009b46:	1b64      	subs	r4, r4, r5
 8009b48:	10a4      	asrs	r4, r4, #2
 8009b4a:	2600      	movs	r6, #0
 8009b4c:	42a6      	cmp	r6, r4
 8009b4e:	d109      	bne.n	8009b64 <__libc_init_array+0x24>
 8009b50:	4d0b      	ldr	r5, [pc, #44]	@ (8009b80 <__libc_init_array+0x40>)
 8009b52:	4c0c      	ldr	r4, [pc, #48]	@ (8009b84 <__libc_init_array+0x44>)
 8009b54:	f000 f818 	bl	8009b88 <_init>
 8009b58:	1b64      	subs	r4, r4, r5
 8009b5a:	10a4      	asrs	r4, r4, #2
 8009b5c:	2600      	movs	r6, #0
 8009b5e:	42a6      	cmp	r6, r4
 8009b60:	d105      	bne.n	8009b6e <__libc_init_array+0x2e>
 8009b62:	bd70      	pop	{r4, r5, r6, pc}
 8009b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b68:	4798      	blx	r3
 8009b6a:	3601      	adds	r6, #1
 8009b6c:	e7ee      	b.n	8009b4c <__libc_init_array+0xc>
 8009b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b72:	4798      	blx	r3
 8009b74:	3601      	adds	r6, #1
 8009b76:	e7f2      	b.n	8009b5e <__libc_init_array+0x1e>
 8009b78:	08009be8 	.word	0x08009be8
 8009b7c:	08009be8 	.word	0x08009be8
 8009b80:	08009be8 	.word	0x08009be8
 8009b84:	08009bec 	.word	0x08009bec

08009b88 <_init>:
 8009b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8a:	bf00      	nop
 8009b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b8e:	bc08      	pop	{r3}
 8009b90:	469e      	mov	lr, r3
 8009b92:	4770      	bx	lr

08009b94 <_fini>:
 8009b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b96:	bf00      	nop
 8009b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b9a:	bc08      	pop	{r3}
 8009b9c:	469e      	mov	lr, r3
 8009b9e:	4770      	bx	lr
