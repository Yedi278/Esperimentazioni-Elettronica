
Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006898  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006b30  08006b30  00007b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006b68  08006b68  00007b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006b70  08006b70  00007b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006b74  08006b74  00007b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08006b78  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08006b88  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08006be8  00008070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  240000d0  08006c48  000080d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240007a4  08006c48  000087a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cdc5  00000000  00000000  000080fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ddd  00000000  00000000  00024ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  00027ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001056  00000000  00000000  00029178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001096d  00000000  00000000  0002a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a98a  00000000  00000000  0003ab3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016a2be  00000000  00000000  000554c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bf783  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a9c  00000000  00000000  001bf7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001c5264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006b18 	.word	0x08006b18

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006b18 	.word	0x08006b18

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fd98 	bl	8001100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f826 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f9a4 	bl	8000920 <MX_GPIO_Init>
  MX_ETH_Init();
 80005d8:	f000 f8a2 	bl	8000720 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005dc:	f000 f922 	bl	8000824 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e0:	f000 f96c 	bl	80008bc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 80005e4:	f000 f8e8 	bl	80007b8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  TIM6->PSC = 64000;			// Set Prescaler
 80005e8:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <main+0x54>)
 80005ea:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 80005ee:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM6->ARR = 1000;		// Ser counting limit
 80005f0:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <main+0x54>)
 80005f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM6->CNT = 0;			// Set count register to 0
 80005f8:	4b08      	ldr	r3, [pc, #32]	@ (800061c <main+0x54>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	625a      	str	r2, [r3, #36]	@ 0x24

  TIM6->DIER |= TIM_DIER_UIE; // Enable Interrupt
 80005fe:	4b07      	ldr	r3, [pc, #28]	@ (800061c <main+0x54>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	4a06      	ldr	r2, [pc, #24]	@ (800061c <main+0x54>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	60d3      	str	r3, [r2, #12]
  TIM6->CR1 |= TIM_CR1_CEN;	  // Start Timer
 800060a:	4b04      	ldr	r3, [pc, #16]	@ (800061c <main+0x54>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a03      	ldr	r2, [pc, #12]	@ (800061c <main+0x54>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000616:	bf00      	nop
 8000618:	e7fd      	b.n	8000616 <main+0x4e>
 800061a:	bf00      	nop
 800061c:	40001000 	.word	0x40001000

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b09c      	sub	sp, #112	@ 0x70
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800062a:	224c      	movs	r2, #76	@ 0x4c
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f006 fa45 	bl	8006abe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2220      	movs	r2, #32
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f006 fa3f 	bl	8006abe <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000640:	2002      	movs	r0, #2
 8000642:	f001 fe71 	bl	8002328 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000646:	2300      	movs	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	4b33      	ldr	r3, [pc, #204]	@ (8000718 <SystemClock_Config+0xf8>)
 800064c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800064e:	4a32      	ldr	r2, [pc, #200]	@ (8000718 <SystemClock_Config+0xf8>)
 8000650:	f023 0301 	bic.w	r3, r3, #1
 8000654:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000656:	4b30      	ldr	r3, [pc, #192]	@ (8000718 <SystemClock_Config+0xf8>)
 8000658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	4b2e      	ldr	r3, [pc, #184]	@ (800071c <SystemClock_Config+0xfc>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000668:	4a2c      	ldr	r2, [pc, #176]	@ (800071c <SystemClock_Config+0xfc>)
 800066a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b2a      	ldr	r3, [pc, #168]	@ (800071c <SystemClock_Config+0xfc>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800067c:	bf00      	nop
 800067e:	4b27      	ldr	r3, [pc, #156]	@ (800071c <SystemClock_Config+0xfc>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000686:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800068a:	d1f8      	bne.n	800067e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800068c:	2303      	movs	r3, #3
 800068e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000690:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000694:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000696:	2301      	movs	r3, #1
 8000698:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069a:	2340      	movs	r3, #64	@ 0x40
 800069c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	2302      	movs	r3, #2
 80006a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006aa:	2318      	movs	r3, #24
 80006ac:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b2:	2304      	movs	r3, #4
 80006b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006ba:	230c      	movs	r3, #12
 80006bc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006be:	2300      	movs	r3, #0
 80006c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 fe76 	bl	80023bc <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006d6:	f000 f9ff 	bl	8000ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	233f      	movs	r3, #63	@ 0x3f
 80006dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2101      	movs	r1, #1
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fab6 	bl	8002c70 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800070a:	f000 f9e5 	bl	8000ad8 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3770      	adds	r7, #112	@ 0x70
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	58000400 	.word	0x58000400
 800071c:	58024800 	.word	0x58024800

08000720 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000724:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <MX_ETH_Init+0x80>)
 8000726:	4a1f      	ldr	r2, [pc, #124]	@ (80007a4 <MX_ETH_Init+0x84>)
 8000728:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800072a:	4b1f      	ldr	r3, [pc, #124]	@ (80007a8 <MX_ETH_Init+0x88>)
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000730:	4b1d      	ldr	r3, [pc, #116]	@ (80007a8 <MX_ETH_Init+0x88>)
 8000732:	2280      	movs	r2, #128	@ 0x80
 8000734:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000736:	4b1c      	ldr	r3, [pc, #112]	@ (80007a8 <MX_ETH_Init+0x88>)
 8000738:	22e1      	movs	r2, #225	@ 0xe1
 800073a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800073c:	4b1a      	ldr	r3, [pc, #104]	@ (80007a8 <MX_ETH_Init+0x88>)
 800073e:	2200      	movs	r2, #0
 8000740:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000742:	4b19      	ldr	r3, [pc, #100]	@ (80007a8 <MX_ETH_Init+0x88>)
 8000744:	2200      	movs	r2, #0
 8000746:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000748:	4b17      	ldr	r3, [pc, #92]	@ (80007a8 <MX_ETH_Init+0x88>)
 800074a:	2200      	movs	r2, #0
 800074c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_ETH_Init+0x80>)
 8000750:	4a15      	ldr	r2, [pc, #84]	@ (80007a8 <MX_ETH_Init+0x88>)
 8000752:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_ETH_Init+0x80>)
 8000756:	2201      	movs	r2, #1
 8000758:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_ETH_Init+0x80>)
 800075c:	4a13      	ldr	r2, [pc, #76]	@ (80007ac <MX_ETH_Init+0x8c>)
 800075e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_ETH_Init+0x80>)
 8000762:	4a13      	ldr	r2, [pc, #76]	@ (80007b0 <MX_ETH_Init+0x90>)
 8000764:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_ETH_Init+0x80>)
 8000768:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800076c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800076e:	480c      	ldr	r0, [pc, #48]	@ (80007a0 <MX_ETH_Init+0x80>)
 8000770:	f000 feac 	bl	80014cc <HAL_ETH_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800077a:	f000 f9ad 	bl	8000ad8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800077e:	2238      	movs	r2, #56	@ 0x38
 8000780:	2100      	movs	r1, #0
 8000782:	480c      	ldr	r0, [pc, #48]	@ (80007b4 <MX_ETH_Init+0x94>)
 8000784:	f006 f99b 	bl	8006abe <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000788:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <MX_ETH_Init+0x94>)
 800078a:	2221      	movs	r2, #33	@ 0x21
 800078c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_ETH_Init+0x94>)
 8000790:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000794:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000796:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <MX_ETH_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	24000124 	.word	0x24000124
 80007a4:	40028000 	.word	0x40028000
 80007a8:	24000798 	.word	0x24000798
 80007ac:	24000070 	.word	0x24000070
 80007b0:	24000010 	.word	0x24000010
 80007b4:	240000ec 	.word	0x240000ec

080007b8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007c8:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_TIM6_Init+0x64>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	@ (8000820 <MX_TIM6_Init+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80007ce:	4b13      	ldr	r3, [pc, #76]	@ (800081c <MX_TIM6_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_TIM6_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <MX_TIM6_Init+0x64>)
 80007dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007e0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <MX_TIM6_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007e8:	480c      	ldr	r0, [pc, #48]	@ (800081c <MX_TIM6_Init+0x64>)
 80007ea:	f004 fbf9 	bl	8004fe0 <HAL_TIM_Base_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80007f4:	f000 f970 	bl	8000ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	@ (800081c <MX_TIM6_Init+0x64>)
 8000806:	f004 fce9 	bl	80051dc <HAL_TIMEx_MasterConfigSynchronization>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000810:	f000 f962 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	240001d4 	.word	0x240001d4
 8000820:	40001000 	.word	0x40001000

08000824 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000828:	4b22      	ldr	r3, [pc, #136]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 800082a:	4a23      	ldr	r2, [pc, #140]	@ (80008b8 <MX_USART3_UART_Init+0x94>)
 800082c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800082e:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000842:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800086c:	4811      	ldr	r0, [pc, #68]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 800086e:	f004 fd43 	bl	80052f8 <HAL_UART_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000878:	f000 f92e 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087c:	2100      	movs	r1, #0
 800087e:	480d      	ldr	r0, [pc, #52]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000880:	f005 fd4b 	bl	800631a <HAL_UARTEx_SetTxFifoThreshold>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800088a:	f000 f925 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	4808      	ldr	r0, [pc, #32]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 8000892:	f005 fd80 	bl	8006396 <HAL_UARTEx_SetRxFifoThreshold>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800089c:	f000 f91c 	bl	8000ad8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <MX_USART3_UART_Init+0x90>)
 80008a2:	f005 fd01 	bl	80062a8 <HAL_UARTEx_DisableFifoMode>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008ac:	f000 f914 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	24000220 	.word	0x24000220
 80008b8:	40004800 	.word	0x40004800

080008bc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008c0:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008c2:	4a16      	ldr	r2, [pc, #88]	@ (800091c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80008c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80008c6:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008c8:	2209      	movs	r2, #9
 80008ca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ce:	2202      	movs	r2, #2
 80008d0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008d2:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008da:	2202      	movs	r2, #2
 80008dc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80008f0:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	@ (8000918 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000904:	f001 fbdf 	bl	80020c6 <HAL_PCD_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800090e:	f000 f8e3 	bl	8000ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	240002b4 	.word	0x240002b4
 800091c:	40080000 	.word	0x40080000

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08c      	sub	sp, #48	@ 0x30
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b62      	ldr	r3, [pc, #392]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093c:	4a60      	ldr	r2, [pc, #384]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 800093e:	f043 0304 	orr.w	r3, r3, #4
 8000942:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000946:	4b5e      	ldr	r3, [pc, #376]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094c:	f003 0304 	and.w	r3, r3, #4
 8000950:	61bb      	str	r3, [r7, #24]
 8000952:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000954:	4b5a      	ldr	r3, [pc, #360]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 8000956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095a:	4a59      	ldr	r2, [pc, #356]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000960:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000964:	4b56      	ldr	r3, [pc, #344]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b53      	ldr	r3, [pc, #332]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000978:	4a51      	ldr	r2, [pc, #324]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 800097a:	f043 0301 	orr.w	r3, r3, #1
 800097e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000982:	4b4f      	ldr	r3, [pc, #316]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000990:	4b4b      	ldr	r3, [pc, #300]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 8000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000996:	4a4a      	ldr	r2, [pc, #296]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a0:	4b47      	ldr	r3, [pc, #284]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ae:	4b44      	ldr	r3, [pc, #272]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b4:	4a42      	ldr	r2, [pc, #264]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 80009b6:	f043 0308 	orr.w	r3, r3, #8
 80009ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009be:	4b40      	ldr	r3, [pc, #256]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c4:	f003 0308 	and.w	r3, r3, #8
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009cc:	4b3c      	ldr	r3, [pc, #240]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d2:	4a3b      	ldr	r2, [pc, #236]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 80009d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009dc:	4b38      	ldr	r3, [pc, #224]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ea:	4b35      	ldr	r3, [pc, #212]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f0:	4a33      	ldr	r2, [pc, #204]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 80009f2:	f043 0310 	orr.w	r3, r3, #16
 80009f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009fa:	4b31      	ldr	r3, [pc, #196]	@ (8000ac0 <MX_GPIO_Init+0x1a0>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a00:	f003 0310 	and.w	r3, r3, #16
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a0e:	482d      	ldr	r0, [pc, #180]	@ (8000ac4 <MX_GPIO_Init+0x1a4>)
 8000a10:	f001 fb40 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a1a:	482b      	ldr	r0, [pc, #172]	@ (8000ac8 <MX_GPIO_Init+0x1a8>)
 8000a1c:	f001 fb3a 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2102      	movs	r1, #2
 8000a24:	4829      	ldr	r0, [pc, #164]	@ (8000acc <MX_GPIO_Init+0x1ac>)
 8000a26:	f001 fb35 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4824      	ldr	r0, [pc, #144]	@ (8000ad0 <MX_GPIO_Init+0x1b0>)
 8000a40:	f001 f978 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB7 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_7;
 8000a44:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4819      	ldr	r0, [pc, #100]	@ (8000ac4 <MX_GPIO_Init+0x1a4>)
 8000a5e:	f001 f969 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000a62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4813      	ldr	r0, [pc, #76]	@ (8000ac8 <MX_GPIO_Init+0x1a8>)
 8000a7c:	f001 f95a 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a80:	2380      	movs	r3, #128	@ 0x80
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a84:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	480f      	ldr	r0, [pc, #60]	@ (8000ad4 <MX_GPIO_Init+0x1b4>)
 8000a96:	f001 f94d 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4806      	ldr	r0, [pc, #24]	@ (8000acc <MX_GPIO_Init+0x1ac>)
 8000ab2:	f001 f93f 	bl	8001d34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3730      	adds	r7, #48	@ 0x30
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	58024400 	.word	0x58024400
 8000ac4:	58020400 	.word	0x58020400
 8000ac8:	58020c00 	.word	0x58020c00
 8000acc:	58021000 	.word	0x58021000
 8000ad0:	58020800 	.word	0x58020800
 8000ad4:	58021800 	.word	0x58021800

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <Error_Handler+0x8>

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <HAL_MspInit+0x30>)
 8000aec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000af0:	4a08      	ldr	r2, [pc, #32]	@ (8000b14 <HAL_MspInit+0x30>)
 8000af2:	f043 0302 	orr.w	r3, r3, #2
 8000af6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000afa:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <HAL_MspInit+0x30>)
 8000afc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	58024400 	.word	0x58024400

08000b18 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08e      	sub	sp, #56	@ 0x38
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a59      	ldr	r2, [pc, #356]	@ (8000c9c <HAL_ETH_MspInit+0x184>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	f040 80ab 	bne.w	8000c92 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b3c:	4b58      	ldr	r3, [pc, #352]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000b3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b42:	4a57      	ldr	r2, [pc, #348]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000b44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b48:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b4c:	4b54      	ldr	r3, [pc, #336]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000b4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b56:	623b      	str	r3, [r7, #32]
 8000b58:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b5a:	4b51      	ldr	r3, [pc, #324]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000b5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b60:	4a4f      	ldr	r2, [pc, #316]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000b62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b6a:	4b4d      	ldr	r3, [pc, #308]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000b6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b74:	61fb      	str	r3, [r7, #28]
 8000b76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b78:	4b49      	ldr	r3, [pc, #292]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000b7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b7e:	4a48      	ldr	r2, [pc, #288]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b84:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b88:	4b45      	ldr	r3, [pc, #276]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000b8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b92:	61bb      	str	r3, [r7, #24]
 8000b94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	4b42      	ldr	r3, [pc, #264]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9c:	4a40      	ldr	r2, [pc, #256]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bba:	4a39      	ldr	r2, [pc, #228]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc4:	4b36      	ldr	r3, [pc, #216]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b33      	ldr	r3, [pc, #204]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd8:	4a31      	ldr	r2, [pc, #196]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000bda:	f043 0302 	orr.w	r3, r3, #2
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be2:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000bf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c00:	4b27      	ldr	r3, [pc, #156]	@ (8000ca0 <HAL_ETH_MspInit+0x188>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c0e:	2332      	movs	r3, #50	@ 0x32
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c1e:	230b      	movs	r3, #11
 8000c20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	481e      	ldr	r0, [pc, #120]	@ (8000ca4 <HAL_ETH_MspInit+0x18c>)
 8000c2a:	f001 f883 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c2e:	2386      	movs	r3, #134	@ 0x86
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c3e:	230b      	movs	r3, #11
 8000c40:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	4817      	ldr	r0, [pc, #92]	@ (8000ca8 <HAL_ETH_MspInit+0x190>)
 8000c4a:	f001 f873 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c60:	230b      	movs	r3, #11
 8000c62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4810      	ldr	r0, [pc, #64]	@ (8000cac <HAL_ETH_MspInit+0x194>)
 8000c6c:	f001 f862 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c70:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c82:	230b      	movs	r3, #11
 8000c84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4808      	ldr	r0, [pc, #32]	@ (8000cb0 <HAL_ETH_MspInit+0x198>)
 8000c8e:	f001 f851 	bl	8001d34 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000c92:	bf00      	nop
 8000c94:	3738      	adds	r7, #56	@ 0x38
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40028000 	.word	0x40028000
 8000ca0:	58024400 	.word	0x58024400
 8000ca4:	58020800 	.word	0x58020800
 8000ca8:	58020000 	.word	0x58020000
 8000cac:	58020400 	.word	0x58020400
 8000cb0:	58021800 	.word	0x58021800

08000cb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0e      	ldr	r2, [pc, #56]	@ (8000cfc <HAL_TIM_Base_MspInit+0x48>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d116      	bne.n	8000cf4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <HAL_TIM_Base_MspInit+0x4c>)
 8000cc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8000d00 <HAL_TIM_Base_MspInit+0x4c>)
 8000cce:	f043 0310 	orr.w	r3, r3, #16
 8000cd2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <HAL_TIM_Base_MspInit+0x4c>)
 8000cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cdc:	f003 0310 	and.w	r3, r3, #16
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2036      	movs	r0, #54	@ 0x36
 8000cea:	f000 fbba 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cee:	2036      	movs	r0, #54	@ 0x36
 8000cf0:	f000 fbd1 	bl	8001496 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40001000 	.word	0x40001000
 8000d00:	58024400 	.word	0x58024400

08000d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0ba      	sub	sp, #232	@ 0xe8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	22c0      	movs	r2, #192	@ 0xc0
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f005 feca 	bl	8006abe <memset>
  if(huart->Instance==USART3)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a27      	ldr	r2, [pc, #156]	@ (8000dcc <HAL_UART_MspInit+0xc8>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d146      	bne.n	8000dc2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d34:	f04f 0202 	mov.w	r2, #2
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d46:	f107 0310 	add.w	r3, r7, #16
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f002 fb1c 	bl	8003388 <HAL_RCCEx_PeriphCLKConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d56:	f7ff febf 	bl	8000ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <HAL_UART_MspInit+0xcc>)
 8000d5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d60:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd0 <HAL_UART_MspInit+0xcc>)
 8000d62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d6a:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <HAL_UART_MspInit+0xcc>)
 8000d6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d78:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <HAL_UART_MspInit+0xcc>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7e:	4a14      	ldr	r2, [pc, #80]	@ (8000dd0 <HAL_UART_MspInit+0xcc>)
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <HAL_UART_MspInit+0xcc>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000db0:	2307      	movs	r3, #7
 8000db2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <HAL_UART_MspInit+0xd0>)
 8000dbe:	f000 ffb9 	bl	8001d34 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000dc2:	bf00      	nop
 8000dc4:	37e8      	adds	r7, #232	@ 0xe8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40004800 	.word	0x40004800
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	58020c00 	.word	0x58020c00

08000dd8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b0ba      	sub	sp, #232	@ 0xe8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	22c0      	movs	r2, #192	@ 0xc0
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f005 fe60 	bl	8006abe <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a30      	ldr	r2, [pc, #192]	@ (8000ec4 <HAL_PCD_MspInit+0xec>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d159      	bne.n	8000ebc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e08:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e14:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	4618      	mov	r0, r3
 8000e22:	f002 fab1 	bl	8003388 <HAL_RCCEx_PeriphCLKConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000e2c:	f7ff fe54 	bl	8000ad8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e30:	f001 fab4 	bl	800239c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b24      	ldr	r3, [pc, #144]	@ (8000ec8 <HAL_PCD_MspInit+0xf0>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3a:	4a23      	ldr	r2, [pc, #140]	@ (8000ec8 <HAL_PCD_MspInit+0xf0>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e44:	4b20      	ldr	r3, [pc, #128]	@ (8000ec8 <HAL_PCD_MspInit+0xf0>)
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e52:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000e56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e6c:	230a      	movs	r3, #10
 8000e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4814      	ldr	r0, [pc, #80]	@ (8000ecc <HAL_PCD_MspInit+0xf4>)
 8000e7a:	f000 ff5b 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e96:	4619      	mov	r1, r3
 8000e98:	480c      	ldr	r0, [pc, #48]	@ (8000ecc <HAL_PCD_MspInit+0xf4>)
 8000e9a:	f000 ff4b 	bl	8001d34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <HAL_PCD_MspInit+0xf0>)
 8000ea0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ea4:	4a08      	ldr	r2, [pc, #32]	@ (8000ec8 <HAL_PCD_MspInit+0xf0>)
 8000ea6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000eaa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_PCD_MspInit+0xf0>)
 8000eb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000ebc:	bf00      	nop
 8000ebe:	37e8      	adds	r7, #232	@ 0xe8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40080000 	.word	0x40080000
 8000ec8:	58024400 	.word	0x58024400
 8000ecc:	58020000 	.word	0x58020000

08000ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <NMI_Handler+0x4>

08000ed8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f26:	f000 f95d 	bl	80011e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if(LED_on){
 8000f34:	4b16      	ldr	r3, [pc, #88]	@ (8000f90 <TIM6_DAC_IRQHandler+0x60>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d006      	beq.n	8000f4c <TIM6_DAC_IRQHandler+0x1c>
		GPIOB->BSRR |= GPIO_BSRR_BR0;
 8000f3e:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <TIM6_DAC_IRQHandler+0x64>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	4a14      	ldr	r2, [pc, #80]	@ (8000f94 <TIM6_DAC_IRQHandler+0x64>)
 8000f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f48:	6193      	str	r3, [r2, #24]
 8000f4a:	e005      	b.n	8000f58 <TIM6_DAC_IRQHandler+0x28>
	}else{
		GPIOB->BSRR |= GPIO_BSRR_BS0;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <TIM6_DAC_IRQHandler+0x64>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a10      	ldr	r2, [pc, #64]	@ (8000f94 <TIM6_DAC_IRQHandler+0x64>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6193      	str	r3, [r2, #24]
	}
	LED_on = !LED_on;
 8000f58:	4b0d      	ldr	r3, [pc, #52]	@ (8000f90 <TIM6_DAC_IRQHandler+0x60>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	bf14      	ite	ne
 8000f62:	2301      	movne	r3, #1
 8000f64:	2300      	moveq	r3, #0
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	f083 0301 	eor.w	r3, r3, #1
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <TIM6_DAC_IRQHandler+0x60>)
 8000f76:	701a      	strb	r2, [r3, #0]
	if(0){
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
	}
	TIM6->SR |= TIM_SR_UIF;
 8000f78:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <TIM6_DAC_IRQHandler+0x68>)
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	4a06      	ldr	r2, [pc, #24]	@ (8000f98 <TIM6_DAC_IRQHandler+0x68>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	2400079e 	.word	0x2400079e
 8000f94:	58020400 	.word	0x58020400
 8000f98:	40001000 	.word	0x40001000

08000f9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fa0:	4b37      	ldr	r3, [pc, #220]	@ (8001080 <SystemInit+0xe4>)
 8000fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fa6:	4a36      	ldr	r2, [pc, #216]	@ (8001080 <SystemInit+0xe4>)
 8000fa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fb0:	4b34      	ldr	r3, [pc, #208]	@ (8001084 <SystemInit+0xe8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 030f 	and.w	r3, r3, #15
 8000fb8:	2b06      	cmp	r3, #6
 8000fba:	d807      	bhi.n	8000fcc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fbc:	4b31      	ldr	r3, [pc, #196]	@ (8001084 <SystemInit+0xe8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f023 030f 	bic.w	r3, r3, #15
 8000fc4:	4a2f      	ldr	r2, [pc, #188]	@ (8001084 <SystemInit+0xe8>)
 8000fc6:	f043 0307 	orr.w	r3, r3, #7
 8000fca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fcc:	4b2e      	ldr	r3, [pc, #184]	@ (8001088 <SystemInit+0xec>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8001088 <SystemInit+0xec>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8001088 <SystemInit+0xec>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fde:	4b2a      	ldr	r3, [pc, #168]	@ (8001088 <SystemInit+0xec>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4929      	ldr	r1, [pc, #164]	@ (8001088 <SystemInit+0xec>)
 8000fe4:	4b29      	ldr	r3, [pc, #164]	@ (800108c <SystemInit+0xf0>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fea:	4b26      	ldr	r3, [pc, #152]	@ (8001084 <SystemInit+0xe8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d007      	beq.n	8001006 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ff6:	4b23      	ldr	r3, [pc, #140]	@ (8001084 <SystemInit+0xe8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 030f 	bic.w	r3, r3, #15
 8000ffe:	4a21      	ldr	r2, [pc, #132]	@ (8001084 <SystemInit+0xe8>)
 8001000:	f043 0307 	orr.w	r3, r3, #7
 8001004:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001006:	4b20      	ldr	r3, [pc, #128]	@ (8001088 <SystemInit+0xec>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800100c:	4b1e      	ldr	r3, [pc, #120]	@ (8001088 <SystemInit+0xec>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001012:	4b1d      	ldr	r3, [pc, #116]	@ (8001088 <SystemInit+0xec>)
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001018:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <SystemInit+0xec>)
 800101a:	4a1d      	ldr	r2, [pc, #116]	@ (8001090 <SystemInit+0xf4>)
 800101c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800101e:	4b1a      	ldr	r3, [pc, #104]	@ (8001088 <SystemInit+0xec>)
 8001020:	4a1c      	ldr	r2, [pc, #112]	@ (8001094 <SystemInit+0xf8>)
 8001022:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001024:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <SystemInit+0xec>)
 8001026:	4a1c      	ldr	r2, [pc, #112]	@ (8001098 <SystemInit+0xfc>)
 8001028:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800102a:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <SystemInit+0xec>)
 800102c:	2200      	movs	r2, #0
 800102e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001030:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <SystemInit+0xec>)
 8001032:	4a19      	ldr	r2, [pc, #100]	@ (8001098 <SystemInit+0xfc>)
 8001034:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001036:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <SystemInit+0xec>)
 8001038:	2200      	movs	r2, #0
 800103a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <SystemInit+0xec>)
 800103e:	4a16      	ldr	r2, [pc, #88]	@ (8001098 <SystemInit+0xfc>)
 8001040:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001042:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <SystemInit+0xec>)
 8001044:	2200      	movs	r2, #0
 8001046:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <SystemInit+0xec>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0e      	ldr	r2, [pc, #56]	@ (8001088 <SystemInit+0xec>)
 800104e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001052:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001054:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <SystemInit+0xec>)
 8001056:	2200      	movs	r2, #0
 8001058:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800105a:	4b10      	ldr	r3, [pc, #64]	@ (800109c <SystemInit+0x100>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <SystemInit+0x104>)
 8001060:	4013      	ands	r3, r2
 8001062:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001066:	d202      	bcs.n	800106e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001068:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <SystemInit+0x108>)
 800106a:	2201      	movs	r2, #1
 800106c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <SystemInit+0x10c>)
 8001070:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001074:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00
 8001084:	52002000 	.word	0x52002000
 8001088:	58024400 	.word	0x58024400
 800108c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001090:	02020200 	.word	0x02020200
 8001094:	01ff0000 	.word	0x01ff0000
 8001098:	01010280 	.word	0x01010280
 800109c:	5c001000 	.word	0x5c001000
 80010a0:	ffff0000 	.word	0xffff0000
 80010a4:	51008108 	.word	0x51008108
 80010a8:	52004000 	.word	0x52004000

080010ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010b0:	f7ff ff74 	bl	8000f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b4:	480c      	ldr	r0, [pc, #48]	@ (80010e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010b6:	490d      	ldr	r1, [pc, #52]	@ (80010ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010b8:	4a0d      	ldr	r2, [pc, #52]	@ (80010f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010cc:	4c0a      	ldr	r4, [pc, #40]	@ (80010f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010da:	f005 fcf9 	bl	8006ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010de:	f7ff fa73 	bl	80005c8 <main>
  bx  lr
 80010e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010ec:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80010f0:	08006b78 	.word	0x08006b78
  ldr r2, =_sbss
 80010f4:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80010f8:	240007a4 	.word	0x240007a4

080010fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC3_IRQHandler>
	...

08001100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001106:	2003      	movs	r0, #3
 8001108:	f000 f9a0 	bl	800144c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800110c:	f001 ff66 	bl	8002fdc <HAL_RCC_GetSysClockFreq>
 8001110:	4602      	mov	r2, r0
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <HAL_Init+0x68>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	0a1b      	lsrs	r3, r3, #8
 8001118:	f003 030f 	and.w	r3, r3, #15
 800111c:	4913      	ldr	r1, [pc, #76]	@ (800116c <HAL_Init+0x6c>)
 800111e:	5ccb      	ldrb	r3, [r1, r3]
 8001120:	f003 031f 	and.w	r3, r3, #31
 8001124:	fa22 f303 	lsr.w	r3, r2, r3
 8001128:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800112a:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <HAL_Init+0x68>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	4a0e      	ldr	r2, [pc, #56]	@ (800116c <HAL_Init+0x6c>)
 8001134:	5cd3      	ldrb	r3, [r2, r3]
 8001136:	f003 031f 	and.w	r3, r3, #31
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	fa22 f303 	lsr.w	r3, r2, r3
 8001140:	4a0b      	ldr	r2, [pc, #44]	@ (8001170 <HAL_Init+0x70>)
 8001142:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001144:	4a0b      	ldr	r2, [pc, #44]	@ (8001174 <HAL_Init+0x74>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800114a:	2000      	movs	r0, #0
 800114c:	f000 f814 	bl	8001178 <HAL_InitTick>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e002      	b.n	8001160 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800115a:	f7ff fcc3 	bl	8000ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	58024400 	.word	0x58024400
 800116c:	08006b30 	.word	0x08006b30
 8001170:	24000004 	.word	0x24000004
 8001174:	24000000 	.word	0x24000000

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001180:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <HAL_InitTick+0x60>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e021      	b.n	80011d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800118c:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <HAL_InitTick+0x64>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <HAL_InitTick+0x60>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800119a:	fbb3 f3f1 	udiv	r3, r3, r1
 800119e:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f985 	bl	80014b2 <HAL_SYSTICK_Config>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00e      	b.n	80011d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b0f      	cmp	r3, #15
 80011b6:	d80a      	bhi.n	80011ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b8:	2200      	movs	r2, #0
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f000 f94f 	bl	8001462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c4:	4a06      	ldr	r2, [pc, #24]	@ (80011e0 <HAL_InitTick+0x68>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e000      	b.n	80011d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	2400000c 	.word	0x2400000c
 80011dc:	24000000 	.word	0x24000000
 80011e0:	24000008 	.word	0x24000008

080011e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_IncTick+0x20>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <HAL_IncTick+0x24>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <HAL_IncTick+0x24>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	2400000c 	.word	0x2400000c
 8001208:	240007a0 	.word	0x240007a0

0800120c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b03      	ldr	r3, [pc, #12]	@ (8001220 <HAL_GetTick+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	240007a0 	.word	0x240007a0

08001224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800122c:	f7ff ffee 	bl	800120c <HAL_GetTick>
 8001230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800123c:	d005      	beq.n	800124a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123e:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <HAL_Delay+0x44>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4413      	add	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800124a:	bf00      	nop
 800124c:	f7ff ffde 	bl	800120c <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	429a      	cmp	r2, r3
 800125a:	d8f7      	bhi.n	800124c <HAL_Delay+0x28>
  {
  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2400000c 	.word	0x2400000c

0800126c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001270:	4b03      	ldr	r3, [pc, #12]	@ (8001280 <HAL_GetREVID+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	0c1b      	lsrs	r3, r3, #16
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	5c001000 	.word	0x5c001000

08001284 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001294:	4904      	ldr	r1, [pc, #16]	@ (80012a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	58000400 	.word	0x58000400

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <__NVIC_SetPriorityGrouping+0x40>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012da:	4a04      	ldr	r2, [pc, #16]	@ (80012ec <__NVIC_SetPriorityGrouping+0x40>)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	60d3      	str	r3, [r2, #12]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00
 80012f0:	05fa0000 	.word	0x05fa0000

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	@ (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800131a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db0b      	blt.n	800133a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	f003 021f 	and.w	r2, r3, #31
 8001328:	4907      	ldr	r1, [pc, #28]	@ (8001348 <__NVIC_EnableIRQ+0x38>)
 800132a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132e:	095b      	lsrs	r3, r3, #5
 8001330:	2001      	movs	r0, #1
 8001332:	fa00 f202 	lsl.w	r2, r0, r2
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000e100 	.word	0xe000e100

0800134c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001358:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135c:	2b00      	cmp	r3, #0
 800135e:	db0a      	blt.n	8001376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	490c      	ldr	r1, [pc, #48]	@ (8001398 <__NVIC_SetPriority+0x4c>)
 8001366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136a:	0112      	lsls	r2, r2, #4
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	440b      	add	r3, r1
 8001370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001374:	e00a      	b.n	800138c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4908      	ldr	r1, [pc, #32]	@ (800139c <__NVIC_SetPriority+0x50>)
 800137c:	88fb      	ldrh	r3, [r7, #6]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	3b04      	subs	r3, #4
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	440b      	add	r3, r1
 800138a:	761a      	strb	r2, [r3, #24]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	@ 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f1c3 0307 	rsb	r3, r3, #7
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	bf28      	it	cs
 80013be:	2304      	movcs	r3, #4
 80013c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3304      	adds	r3, #4
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d902      	bls.n	80013d0 <NVIC_EncodePriority+0x30>
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3b03      	subs	r3, #3
 80013ce:	e000      	b.n	80013d2 <NVIC_EncodePriority+0x32>
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	4313      	orrs	r3, r2
         );
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3724      	adds	r7, #36	@ 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001418:	d301      	bcc.n	800141e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141a:	2301      	movs	r3, #1
 800141c:	e00f      	b.n	800143e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141e:	4a0a      	ldr	r2, [pc, #40]	@ (8001448 <SysTick_Config+0x40>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001426:	210f      	movs	r1, #15
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f7ff ff8e 	bl	800134c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <SysTick_Config+0x40>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001436:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <SysTick_Config+0x40>)
 8001438:	2207      	movs	r2, #7
 800143a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	e000e010 	.word	0xe000e010

0800144c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff29 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001470:	f7ff ff40 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 8001474:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	6978      	ldr	r0, [r7, #20]
 800147c:	f7ff ff90 	bl	80013a0 <NVIC_EncodePriority>
 8001480:	4602      	mov	r2, r0
 8001482:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff5f 	bl	800134c <__NVIC_SetPriority>
}
 800148e:	bf00      	nop
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff33 	bl	8001310 <__NVIC_EnableIRQ>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ffa4 	bl	8001408 <SysTick_Config>
 80014c0:	4603      	mov	r3, r0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e0e3      	b.n	80016a6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d106      	bne.n	80014f6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2223      	movs	r2, #35	@ 0x23
 80014ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff fb11 	bl	8000b18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	4b6e      	ldr	r3, [pc, #440]	@ (80016b0 <HAL_ETH_Init+0x1e4>)
 80014f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014fc:	4a6c      	ldr	r2, [pc, #432]	@ (80016b0 <HAL_ETH_Init+0x1e4>)
 80014fe:	f043 0302 	orr.w	r3, r3, #2
 8001502:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001506:	4b6a      	ldr	r3, [pc, #424]	@ (80016b0 <HAL_ETH_Init+0x1e4>)
 8001508:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7a1b      	ldrb	r3, [r3, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d103      	bne.n	8001524 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800151c:	2000      	movs	r0, #0
 800151e:	f7ff feb1 	bl	8001284 <HAL_SYSCFG_ETHInterfaceSelect>
 8001522:	e003      	b.n	800152c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001524:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001528:	f7ff feac 	bl	8001284 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800152c:	4b61      	ldr	r3, [pc, #388]	@ (80016b4 <HAL_ETH_Init+0x1e8>)
 800152e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001546:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001548:	f7ff fe60 	bl	800120c <HAL_GetTick>
 800154c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800154e:	e011      	b.n	8001574 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001550:	f7ff fe5c 	bl	800120c <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800155e:	d909      	bls.n	8001574 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2204      	movs	r2, #4
 8001564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	22e0      	movs	r2, #224	@ 0xe0
 800156c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e098      	b.n	80016a6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1e4      	bne.n	8001550 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f89e 	bl	80016c8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800158c:	f001 fea0 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 8001590:	4603      	mov	r3, r0
 8001592:	4a49      	ldr	r2, [pc, #292]	@ (80016b8 <HAL_ETH_Init+0x1ec>)
 8001594:	fba2 2303 	umull	r2, r3, r2, r3
 8001598:	0c9a      	lsrs	r2, r3, #18
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	3a01      	subs	r2, #1
 80015a0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 fa81 	bl	8001aac <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80015b6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015c6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d009      	beq.n	80015ea <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	22e0      	movs	r2, #224	@ 0xe0
 80015e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e05d      	b.n	80016a6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015f2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80015f6:	4b31      	ldr	r3, [pc, #196]	@ (80016bc <HAL_ETH_Init+0x1f0>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6952      	ldr	r2, [r2, #20]
 80015fe:	0051      	lsls	r1, r2, #1
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	430b      	orrs	r3, r1
 8001606:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800160a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 fae9 	bl	8001be6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 fb2f 	bl	8001c78 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	3305      	adds	r3, #5
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	021a      	lsls	r2, r3, #8
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	3304      	adds	r3, #4
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	3303      	adds	r3, #3
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	061a      	lsls	r2, r3, #24
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	3302      	adds	r3, #2
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	041b      	lsls	r3, r3, #16
 800164c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	3301      	adds	r3, #1
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001658:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001666:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001668:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <HAL_ETH_Init+0x1f4>)
 800167a:	430b      	orrs	r3, r1
 800167c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b0d      	ldr	r3, [pc, #52]	@ (80016c4 <HAL_ETH_Init+0x1f8>)
 800168e:	430b      	orrs	r3, r1
 8001690:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2210      	movs	r2, #16
 80016a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	58024400 	.word	0x58024400
 80016b4:	58000400 	.word	0x58000400
 80016b8:	431bde83 	.word	0x431bde83
 80016bc:	ffff8001 	.word	0xffff8001
 80016c0:	0c020060 	.word	0x0c020060
 80016c4:	0c20c000 	.word	0x0c20c000

080016c8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80016e0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80016e2:	f001 fdf5 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 80016e6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001754 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d804      	bhi.n	80016fa <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	e022      	b.n	8001740 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	4a16      	ldr	r2, [pc, #88]	@ (8001758 <HAL_ETH_SetMDIOClockRange+0x90>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d204      	bcs.n	800170c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	e019      	b.n	8001740 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4a13      	ldr	r2, [pc, #76]	@ (800175c <HAL_ETH_SetMDIOClockRange+0x94>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d915      	bls.n	8001740 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4a12      	ldr	r2, [pc, #72]	@ (8001760 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d804      	bhi.n	8001726 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	e00c      	b.n	8001740 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	4a0e      	ldr	r2, [pc, #56]	@ (8001764 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d804      	bhi.n	8001738 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	e003      	b.n	8001740 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800173e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	02160ebf 	.word	0x02160ebf
 8001758:	03938700 	.word	0x03938700
 800175c:	05f5e0ff 	.word	0x05f5e0ff
 8001760:	08f0d17f 	.word	0x08f0d17f
 8001764:	0ee6b27f 	.word	0x0ee6b27f

08001768 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800177a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	791b      	ldrb	r3, [r3, #4]
 8001780:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001782:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	7b1b      	ldrb	r3, [r3, #12]
 8001788:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800178a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	7b5b      	ldrb	r3, [r3, #13]
 8001790:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001792:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	7b9b      	ldrb	r3, [r3, #14]
 8001798:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800179a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	7bdb      	ldrb	r3, [r3, #15]
 80017a0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80017a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	7c12      	ldrb	r2, [r2, #16]
 80017a8:	2a00      	cmp	r2, #0
 80017aa:	d102      	bne.n	80017b2 <ETH_SetMACConfig+0x4a>
 80017ac:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80017b0:	e000      	b.n	80017b4 <ETH_SetMACConfig+0x4c>
 80017b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80017b4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	7c52      	ldrb	r2, [r2, #17]
 80017ba:	2a00      	cmp	r2, #0
 80017bc:	d102      	bne.n	80017c4 <ETH_SetMACConfig+0x5c>
 80017be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017c2:	e000      	b.n	80017c6 <ETH_SetMACConfig+0x5e>
 80017c4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80017c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	7c9b      	ldrb	r3, [r3, #18]
 80017cc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80017ce:	431a      	orrs	r2, r3
               macconf->Speed |
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80017d4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80017da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	7f1b      	ldrb	r3, [r3, #28]
 80017e0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80017e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	7f5b      	ldrb	r3, [r3, #29]
 80017e8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80017ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	7f92      	ldrb	r2, [r2, #30]
 80017f0:	2a00      	cmp	r2, #0
 80017f2:	d102      	bne.n	80017fa <ETH_SetMACConfig+0x92>
 80017f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017f8:	e000      	b.n	80017fc <ETH_SetMACConfig+0x94>
 80017fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80017fc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	7fdb      	ldrb	r3, [r3, #31]
 8001802:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001804:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	f892 2020 	ldrb.w	r2, [r2, #32]
 800180c:	2a00      	cmp	r2, #0
 800180e:	d102      	bne.n	8001816 <ETH_SetMACConfig+0xae>
 8001810:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001814:	e000      	b.n	8001818 <ETH_SetMACConfig+0xb0>
 8001816:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001818:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800181e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001826:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001828:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800182e:	4313      	orrs	r3, r2
 8001830:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b56      	ldr	r3, [pc, #344]	@ (8001994 <ETH_SetMACConfig+0x22c>)
 800183a:	4013      	ands	r3, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	68f9      	ldr	r1, [r7, #12]
 8001842:	430b      	orrs	r3, r1
 8001844:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800184a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001852:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001854:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800185c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800185e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001866:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001868:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001870:	2a00      	cmp	r2, #0
 8001872:	d102      	bne.n	800187a <ETH_SetMACConfig+0x112>
 8001874:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001878:	e000      	b.n	800187c <ETH_SetMACConfig+0x114>
 800187a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800187c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001882:	4313      	orrs	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	4b42      	ldr	r3, [pc, #264]	@ (8001998 <ETH_SetMACConfig+0x230>)
 800188e:	4013      	ands	r3, r2
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	68f9      	ldr	r1, [r7, #12]
 8001896:	430b      	orrs	r3, r1
 8001898:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018a0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80018a6:	4313      	orrs	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	4b3a      	ldr	r3, [pc, #232]	@ (800199c <ETH_SetMACConfig+0x234>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	68f9      	ldr	r1, [r7, #12]
 80018ba:	430b      	orrs	r3, r1
 80018bc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80018c4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018ca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80018d2:	2a00      	cmp	r2, #0
 80018d4:	d101      	bne.n	80018da <ETH_SetMACConfig+0x172>
 80018d6:	2280      	movs	r2, #128	@ 0x80
 80018d8:	e000      	b.n	80018dc <ETH_SetMACConfig+0x174>
 80018da:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80018dc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018e2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018e4:	4313      	orrs	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80018ee:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80018f2:	4013      	ands	r3, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	68f9      	ldr	r1, [r7, #12]
 80018fa:	430b      	orrs	r3, r1
 80018fc:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001904:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800190c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800190e:	4313      	orrs	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800191a:	f023 0103 	bic.w	r1, r3, #3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	430a      	orrs	r2, r1
 8001926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001932:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800194e:	2a00      	cmp	r2, #0
 8001950:	d101      	bne.n	8001956 <ETH_SetMACConfig+0x1ee>
 8001952:	2240      	movs	r2, #64	@ 0x40
 8001954:	e000      	b.n	8001958 <ETH_SetMACConfig+0x1f0>
 8001956:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001958:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001960:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001962:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800196a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800196c:	4313      	orrs	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001978:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	430a      	orrs	r2, r1
 8001984:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	00048083 	.word	0x00048083
 8001998:	c0f88000 	.word	0xc0f88000
 800199c:	fffffef0 	.word	0xfffffef0

080019a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b38      	ldr	r3, [pc, #224]	@ (8001a98 <ETH_SetDMAConfig+0xf8>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	6811      	ldr	r1, [r2, #0]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	430b      	orrs	r3, r1
 80019c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019c6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	791b      	ldrb	r3, [r3, #4]
 80019cc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019d2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	7b1b      	ldrb	r3, [r3, #12]
 80019d8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019da:	4313      	orrs	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a9c <ETH_SetDMAConfig+0xfc>)
 80019ea:	4013      	ands	r3, r2
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	68f9      	ldr	r1, [r7, #12]
 80019f2:	430b      	orrs	r3, r1
 80019f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019f8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	7b5b      	ldrb	r3, [r3, #13]
 80019fe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001a04:	4313      	orrs	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a10:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001a14:	4b22      	ldr	r3, [pc, #136]	@ (8001aa0 <ETH_SetDMAConfig+0x100>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	68f9      	ldr	r1, [r7, #12]
 8001a1e:	430b      	orrs	r3, r1
 8001a20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a24:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	7d1b      	ldrb	r3, [r3, #20]
 8001a30:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a32:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	7f5b      	ldrb	r3, [r3, #29]
 8001a38:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a46:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001a4a:	4b16      	ldr	r3, [pc, #88]	@ (8001aa4 <ETH_SetDMAConfig+0x104>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	68f9      	ldr	r1, [r7, #12]
 8001a54:	430b      	orrs	r3, r1
 8001a56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a5a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	7f1b      	ldrb	r3, [r3, #28]
 8001a62:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a74:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001a78:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <ETH_SetDMAConfig+0x108>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	68f9      	ldr	r1, [r7, #12]
 8001a82:	430b      	orrs	r3, r1
 8001a84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a88:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	ffff87fd 	.word	0xffff87fd
 8001a9c:	ffff2ffe 	.word	0xffff2ffe
 8001aa0:	fffec000 	.word	0xfffec000
 8001aa4:	ffc0efef 	.word	0xffc0efef
 8001aa8:	7fc0ffff 	.word	0x7fc0ffff

08001aac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b0a4      	sub	sp, #144	@ 0x90
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001aba:	2300      	movs	r3, #0
 8001abc:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ae8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aec:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001b04:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001b08:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001b10:	2300      	movs	r3, #0
 8001b12:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001b14:	2301      	movs	r3, #1
 8001b16:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001b26:	2300      	movs	r3, #0
 8001b28:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001b44:	2320      	movs	r3, #32
 8001b46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001b56:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b60:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001b80:	2301      	movs	r3, #1
 8001b82:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001b86:	2300      	movs	r3, #0
 8001b88:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b94:	4619      	mov	r1, r3
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fde6 	bl	8001768 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001bb6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001bba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001bc0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001bc4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001bcc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001bd0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001bd2:	f107 0308 	add.w	r3, r7, #8
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff fee1 	bl	80019a0 <ETH_SetDMAConfig>
}
 8001bde:	bf00      	nop
 8001be0:	3790      	adds	r7, #144	@ 0x90
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b085      	sub	sp, #20
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	e01d      	b.n	8001c30 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68d9      	ldr	r1, [r3, #12]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4413      	add	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	440b      	add	r3, r1
 8001c04:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001c1e:	68b9      	ldr	r1, [r7, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	3206      	adds	r2, #6
 8001c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d9de      	bls.n	8001bf4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c44:	461a      	mov	r2, r3
 8001c46:	2303      	movs	r3, #3
 8001c48:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c58:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c68:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	e023      	b.n	8001cce <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6919      	ldr	r1, [r3, #16]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	440b      	add	r3, r1
 8001c96:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2200      	movs	r2, #0
 8001cae:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	3212      	adds	r2, #18
 8001cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d9d8      	bls.n	8001c86 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691a      	ldr	r2, [r3, #16]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d0e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d22:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	@ 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d42:	4b89      	ldr	r3, [pc, #548]	@ (8001f68 <HAL_GPIO_Init+0x234>)
 8001d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d46:	e194      	b.n	8002072 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8186 	beq.w	800206c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d005      	beq.n	8001d78 <HAL_GPIO_Init+0x44>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d130      	bne.n	8001dda <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dae:	2201      	movs	r2, #1
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	f003 0201 	and.w	r2, r3, #1
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d017      	beq.n	8001e16 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	2203      	movs	r2, #3
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d123      	bne.n	8001e6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	08da      	lsrs	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3208      	adds	r2, #8
 8001e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	220f      	movs	r2, #15
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	08da      	lsrs	r2, r3, #3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3208      	adds	r2, #8
 8001e64:	69b9      	ldr	r1, [r7, #24]
 8001e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	2203      	movs	r2, #3
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0203 	and.w	r2, r3, #3
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 80e0 	beq.w	800206c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eac:	4b2f      	ldr	r3, [pc, #188]	@ (8001f6c <HAL_GPIO_Init+0x238>)
 8001eae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001eb2:	4a2e      	ldr	r2, [pc, #184]	@ (8001f6c <HAL_GPIO_Init+0x238>)
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f6c <HAL_GPIO_Init+0x238>)
 8001ebe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eca:	4a29      	ldr	r2, [pc, #164]	@ (8001f70 <HAL_GPIO_Init+0x23c>)
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a20      	ldr	r2, [pc, #128]	@ (8001f74 <HAL_GPIO_Init+0x240>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d052      	beq.n	8001f9c <HAL_GPIO_Init+0x268>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f78 <HAL_GPIO_Init+0x244>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d031      	beq.n	8001f62 <HAL_GPIO_Init+0x22e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a1e      	ldr	r2, [pc, #120]	@ (8001f7c <HAL_GPIO_Init+0x248>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d02b      	beq.n	8001f5e <HAL_GPIO_Init+0x22a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a1d      	ldr	r2, [pc, #116]	@ (8001f80 <HAL_GPIO_Init+0x24c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d025      	beq.n	8001f5a <HAL_GPIO_Init+0x226>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a1c      	ldr	r2, [pc, #112]	@ (8001f84 <HAL_GPIO_Init+0x250>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01f      	beq.n	8001f56 <HAL_GPIO_Init+0x222>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a1b      	ldr	r2, [pc, #108]	@ (8001f88 <HAL_GPIO_Init+0x254>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d019      	beq.n	8001f52 <HAL_GPIO_Init+0x21e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a1a      	ldr	r2, [pc, #104]	@ (8001f8c <HAL_GPIO_Init+0x258>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d013      	beq.n	8001f4e <HAL_GPIO_Init+0x21a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a19      	ldr	r2, [pc, #100]	@ (8001f90 <HAL_GPIO_Init+0x25c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00d      	beq.n	8001f4a <HAL_GPIO_Init+0x216>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a18      	ldr	r2, [pc, #96]	@ (8001f94 <HAL_GPIO_Init+0x260>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d007      	beq.n	8001f46 <HAL_GPIO_Init+0x212>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a17      	ldr	r2, [pc, #92]	@ (8001f98 <HAL_GPIO_Init+0x264>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d101      	bne.n	8001f42 <HAL_GPIO_Init+0x20e>
 8001f3e:	2309      	movs	r3, #9
 8001f40:	e02d      	b.n	8001f9e <HAL_GPIO_Init+0x26a>
 8001f42:	230a      	movs	r3, #10
 8001f44:	e02b      	b.n	8001f9e <HAL_GPIO_Init+0x26a>
 8001f46:	2308      	movs	r3, #8
 8001f48:	e029      	b.n	8001f9e <HAL_GPIO_Init+0x26a>
 8001f4a:	2307      	movs	r3, #7
 8001f4c:	e027      	b.n	8001f9e <HAL_GPIO_Init+0x26a>
 8001f4e:	2306      	movs	r3, #6
 8001f50:	e025      	b.n	8001f9e <HAL_GPIO_Init+0x26a>
 8001f52:	2305      	movs	r3, #5
 8001f54:	e023      	b.n	8001f9e <HAL_GPIO_Init+0x26a>
 8001f56:	2304      	movs	r3, #4
 8001f58:	e021      	b.n	8001f9e <HAL_GPIO_Init+0x26a>
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e01f      	b.n	8001f9e <HAL_GPIO_Init+0x26a>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e01d      	b.n	8001f9e <HAL_GPIO_Init+0x26a>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e01b      	b.n	8001f9e <HAL_GPIO_Init+0x26a>
 8001f66:	bf00      	nop
 8001f68:	58000080 	.word	0x58000080
 8001f6c:	58024400 	.word	0x58024400
 8001f70:	58000400 	.word	0x58000400
 8001f74:	58020000 	.word	0x58020000
 8001f78:	58020400 	.word	0x58020400
 8001f7c:	58020800 	.word	0x58020800
 8001f80:	58020c00 	.word	0x58020c00
 8001f84:	58021000 	.word	0x58021000
 8001f88:	58021400 	.word	0x58021400
 8001f8c:	58021800 	.word	0x58021800
 8001f90:	58021c00 	.word	0x58021c00
 8001f94:	58022000 	.word	0x58022000
 8001f98:	58022400 	.word	0x58022400
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	f002 0203 	and.w	r2, r2, #3
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	4093      	lsls	r3, r2
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fae:	4938      	ldr	r1, [pc, #224]	@ (8002090 <HAL_GPIO_Init+0x35c>)
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fe2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002010:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	3301      	adds	r3, #1
 8002070:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	f47f ae63 	bne.w	8001d48 <HAL_GPIO_Init+0x14>
  }
}
 8002082:	bf00      	nop
 8002084:	bf00      	nop
 8002086:	3724      	adds	r7, #36	@ 0x24
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	58000400 	.word	0x58000400

08002094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
 80020a0:	4613      	mov	r3, r2
 80020a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020a4:	787b      	ldrb	r3, [r7, #1]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020aa:	887a      	ldrh	r2, [r7, #2]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020b0:	e003      	b.n	80020ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020b2:	887b      	ldrh	r3, [r7, #2]
 80020b4:	041a      	lsls	r2, r3, #16
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	619a      	str	r2, [r3, #24]
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af02      	add	r7, sp, #8
 80020cc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0fe      	b.n	80022d6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d106      	bne.n	80020f2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7fe fe73 	bl	8000dd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2203      	movs	r2, #3
 80020f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f004 fa48 	bl	8006594 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7c1a      	ldrb	r2, [r3, #16]
 800210c:	f88d 2000 	strb.w	r2, [sp]
 8002110:	3304      	adds	r3, #4
 8002112:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002114:	f004 f9cc 	bl	80064b0 <USB_CoreInit>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d005      	beq.n	800212a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2202      	movs	r2, #2
 8002122:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e0d5      	b.n	80022d6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f004 fa40 	bl	80065b6 <USB_SetCurrentMode>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0c6      	b.n	80022d6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]
 800214c:	e04a      	b.n	80021e4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	3315      	adds	r3, #21
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	3314      	adds	r3, #20
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	b298      	uxth	r0, r3
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	332e      	adds	r3, #46	@ 0x2e
 800218a:	4602      	mov	r2, r0
 800218c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	3318      	adds	r3, #24
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	331c      	adds	r3, #28
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	3320      	adds	r3, #32
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	3324      	adds	r3, #36	@ 0x24
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	3301      	adds	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	791b      	ldrb	r3, [r3, #4]
 80021e8:	7bfa      	ldrb	r2, [r7, #15]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d3af      	bcc.n	800214e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	73fb      	strb	r3, [r7, #15]
 80021f2:	e044      	b.n	800227e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	3301      	adds	r3, #1
 800227c:	73fb      	strb	r3, [r7, #15]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	791b      	ldrb	r3, [r3, #4]
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	429a      	cmp	r2, r3
 8002286:	d3b5      	bcc.n	80021f4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7c1a      	ldrb	r2, [r3, #16]
 8002290:	f88d 2000 	strb.w	r2, [sp]
 8002294:	3304      	adds	r3, #4
 8002296:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002298:	f004 f9da 	bl	8006650 <USB_DevInit>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2202      	movs	r2, #2
 80022a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e013      	b.n	80022d6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7b1b      	ldrb	r3, [r3, #12]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d102      	bne.n	80022ca <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f80b 	bl	80022e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f004 fb95 	bl	80069fe <USB_DevDisconnect>

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800230e:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <HAL_PCDEx_ActivateLPM+0x44>)
 8002310:	4313      	orrs	r3, r2
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	10000003 	.word	0x10000003

08002328 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002330:	4b19      	ldr	r3, [pc, #100]	@ (8002398 <HAL_PWREx_ConfigSupply+0x70>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b04      	cmp	r3, #4
 800233a:	d00a      	beq.n	8002352 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800233c:	4b16      	ldr	r3, [pc, #88]	@ (8002398 <HAL_PWREx_ConfigSupply+0x70>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	429a      	cmp	r2, r3
 8002348:	d001      	beq.n	800234e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e01f      	b.n	800238e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	e01d      	b.n	800238e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002352:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <HAL_PWREx_ConfigSupply+0x70>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f023 0207 	bic.w	r2, r3, #7
 800235a:	490f      	ldr	r1, [pc, #60]	@ (8002398 <HAL_PWREx_ConfigSupply+0x70>)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4313      	orrs	r3, r2
 8002360:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002362:	f7fe ff53 	bl	800120c <HAL_GetTick>
 8002366:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002368:	e009      	b.n	800237e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800236a:	f7fe ff4f 	bl	800120c <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002378:	d901      	bls.n	800237e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e007      	b.n	800238e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800237e:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <HAL_PWREx_ConfigSupply+0x70>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800238a:	d1ee      	bne.n	800236a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	58024800 	.word	0x58024800

0800239c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80023a0:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4a04      	ldr	r2, [pc, #16]	@ (80023b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80023a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023aa:	60d3      	str	r3, [r2, #12]
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	58024800 	.word	0x58024800

080023bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08c      	sub	sp, #48	@ 0x30
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d102      	bne.n	80023d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	f000 bc48 	b.w	8002c60 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 8088 	beq.w	80024ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023de:	4b99      	ldr	r3, [pc, #612]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023e8:	4b96      	ldr	r3, [pc, #600]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 80023ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023f0:	2b10      	cmp	r3, #16
 80023f2:	d007      	beq.n	8002404 <HAL_RCC_OscConfig+0x48>
 80023f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023f6:	2b18      	cmp	r3, #24
 80023f8:	d111      	bne.n	800241e <HAL_RCC_OscConfig+0x62>
 80023fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d10c      	bne.n	800241e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	4b8f      	ldr	r3, [pc, #572]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d06d      	beq.n	80024ec <HAL_RCC_OscConfig+0x130>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d169      	bne.n	80024ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	f000 bc21 	b.w	8002c60 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002426:	d106      	bne.n	8002436 <HAL_RCC_OscConfig+0x7a>
 8002428:	4b86      	ldr	r3, [pc, #536]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a85      	ldr	r2, [pc, #532]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 800242e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	e02e      	b.n	8002494 <HAL_RCC_OscConfig+0xd8>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10c      	bne.n	8002458 <HAL_RCC_OscConfig+0x9c>
 800243e:	4b81      	ldr	r3, [pc, #516]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a80      	ldr	r2, [pc, #512]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 8002444:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	4b7e      	ldr	r3, [pc, #504]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a7d      	ldr	r2, [pc, #500]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 8002450:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e01d      	b.n	8002494 <HAL_RCC_OscConfig+0xd8>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0xc0>
 8002462:	4b78      	ldr	r3, [pc, #480]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a77      	ldr	r2, [pc, #476]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 8002468:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b75      	ldr	r3, [pc, #468]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a74      	ldr	r2, [pc, #464]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e00b      	b.n	8002494 <HAL_RCC_OscConfig+0xd8>
 800247c:	4b71      	ldr	r3, [pc, #452]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a70      	ldr	r2, [pc, #448]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 8002482:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b6e      	ldr	r3, [pc, #440]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a6d      	ldr	r2, [pc, #436]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 800248e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d013      	beq.n	80024c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe feb6 	bl	800120c <HAL_GetTick>
 80024a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a4:	f7fe feb2 	bl	800120c <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	@ 0x64
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e3d4      	b.n	8002c60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024b6:	4b63      	ldr	r3, [pc, #396]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0xe8>
 80024c2:	e014      	b.n	80024ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7fe fea2 	bl	800120c <HAL_GetTick>
 80024c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024cc:	f7fe fe9e 	bl	800120c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	@ 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e3c0      	b.n	8002c60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024de:	4b59      	ldr	r3, [pc, #356]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x110>
 80024ea:	e000      	b.n	80024ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80ca 	beq.w	8002690 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024fc:	4b51      	ldr	r3, [pc, #324]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002504:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002506:	4b4f      	ldr	r3, [pc, #316]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 8002508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <HAL_RCC_OscConfig+0x166>
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	2b18      	cmp	r3, #24
 8002516:	d156      	bne.n	80025c6 <HAL_RCC_OscConfig+0x20a>
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d151      	bne.n	80025c6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002522:	4b48      	ldr	r3, [pc, #288]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <HAL_RCC_OscConfig+0x17e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e392      	b.n	8002c60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800253a:	4b42      	ldr	r3, [pc, #264]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 0219 	bic.w	r2, r3, #25
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	493f      	ldr	r1, [pc, #252]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7fe fe5e 	bl	800120c <HAL_GetTick>
 8002550:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002554:	f7fe fe5a 	bl	800120c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e37c      	b.n	8002c60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002566:	4b37      	ldr	r3, [pc, #220]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002572:	f7fe fe7b 	bl	800126c <HAL_GetREVID>
 8002576:	4603      	mov	r3, r0
 8002578:	f241 0203 	movw	r2, #4099	@ 0x1003
 800257c:	4293      	cmp	r3, r2
 800257e:	d817      	bhi.n	80025b0 <HAL_RCC_OscConfig+0x1f4>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	2b40      	cmp	r3, #64	@ 0x40
 8002586:	d108      	bne.n	800259a <HAL_RCC_OscConfig+0x1de>
 8002588:	4b2e      	ldr	r3, [pc, #184]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002590:	4a2c      	ldr	r2, [pc, #176]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 8002592:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002596:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002598:	e07a      	b.n	8002690 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259a:	4b2a      	ldr	r3, [pc, #168]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	031b      	lsls	r3, r3, #12
 80025a8:	4926      	ldr	r1, [pc, #152]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ae:	e06f      	b.n	8002690 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b0:	4b24      	ldr	r3, [pc, #144]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	061b      	lsls	r3, r3, #24
 80025be:	4921      	ldr	r1, [pc, #132]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c4:	e064      	b.n	8002690 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d047      	beq.n	800265e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 0219 	bic.w	r2, r3, #25
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	491a      	ldr	r1, [pc, #104]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7fe fe14 	bl	800120c <HAL_GetTick>
 80025e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e8:	f7fe fe10 	bl	800120c <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e332      	b.n	8002c60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025fa:	4b12      	ldr	r3, [pc, #72]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002606:	f7fe fe31 	bl	800126c <HAL_GetREVID>
 800260a:	4603      	mov	r3, r0
 800260c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002610:	4293      	cmp	r3, r2
 8002612:	d819      	bhi.n	8002648 <HAL_RCC_OscConfig+0x28c>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	2b40      	cmp	r3, #64	@ 0x40
 800261a:	d108      	bne.n	800262e <HAL_RCC_OscConfig+0x272>
 800261c:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002624:	4a07      	ldr	r2, [pc, #28]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 8002626:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800262a:	6053      	str	r3, [r2, #4]
 800262c:	e030      	b.n	8002690 <HAL_RCC_OscConfig+0x2d4>
 800262e:	4b05      	ldr	r3, [pc, #20]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	031b      	lsls	r3, r3, #12
 800263c:	4901      	ldr	r1, [pc, #4]	@ (8002644 <HAL_RCC_OscConfig+0x288>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
 8002642:	e025      	b.n	8002690 <HAL_RCC_OscConfig+0x2d4>
 8002644:	58024400 	.word	0x58024400
 8002648:	4b9a      	ldr	r3, [pc, #616]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	061b      	lsls	r3, r3, #24
 8002656:	4997      	ldr	r1, [pc, #604]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]
 800265c:	e018      	b.n	8002690 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265e:	4b95      	ldr	r3, [pc, #596]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a94      	ldr	r2, [pc, #592]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7fe fdcf 	bl	800120c <HAL_GetTick>
 800266e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002672:	f7fe fdcb 	bl	800120c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e2ed      	b.n	8002c60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002684:	4b8b      	ldr	r3, [pc, #556]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f0      	bne.n	8002672 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80a9 	beq.w	80027f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800269e:	4b85      	ldr	r3, [pc, #532]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026a8:	4b82      	ldr	r3, [pc, #520]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 80026aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d007      	beq.n	80026c4 <HAL_RCC_OscConfig+0x308>
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	2b18      	cmp	r3, #24
 80026b8:	d13a      	bne.n	8002730 <HAL_RCC_OscConfig+0x374>
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d135      	bne.n	8002730 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026c4:	4b7b      	ldr	r3, [pc, #492]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_OscConfig+0x320>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	2b80      	cmp	r3, #128	@ 0x80
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e2c1      	b.n	8002c60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026dc:	f7fe fdc6 	bl	800126c <HAL_GetREVID>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d817      	bhi.n	800271a <HAL_RCC_OscConfig+0x35e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d108      	bne.n	8002704 <HAL_RCC_OscConfig+0x348>
 80026f2:	4b70      	ldr	r3, [pc, #448]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80026fa:	4a6e      	ldr	r2, [pc, #440]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 80026fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002700:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002702:	e075      	b.n	80027f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002704:	4b6b      	ldr	r3, [pc, #428]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	069b      	lsls	r3, r3, #26
 8002712:	4968      	ldr	r1, [pc, #416]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002718:	e06a      	b.n	80027f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800271a:	4b66      	ldr	r3, [pc, #408]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	061b      	lsls	r3, r3, #24
 8002728:	4962      	ldr	r1, [pc, #392]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 800272a:	4313      	orrs	r3, r2
 800272c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800272e:	e05f      	b.n	80027f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d042      	beq.n	80027be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002738:	4b5e      	ldr	r3, [pc, #376]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a5d      	ldr	r2, [pc, #372]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 800273e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fd62 	bl	800120c <HAL_GetTick>
 8002748:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800274c:	f7fe fd5e 	bl	800120c <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e280      	b.n	8002c60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800275e:	4b55      	ldr	r3, [pc, #340]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800276a:	f7fe fd7f 	bl	800126c <HAL_GetREVID>
 800276e:	4603      	mov	r3, r0
 8002770:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002774:	4293      	cmp	r3, r2
 8002776:	d817      	bhi.n	80027a8 <HAL_RCC_OscConfig+0x3ec>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	2b20      	cmp	r3, #32
 800277e:	d108      	bne.n	8002792 <HAL_RCC_OscConfig+0x3d6>
 8002780:	4b4c      	ldr	r3, [pc, #304]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002788:	4a4a      	ldr	r2, [pc, #296]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 800278a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800278e:	6053      	str	r3, [r2, #4]
 8002790:	e02e      	b.n	80027f0 <HAL_RCC_OscConfig+0x434>
 8002792:	4b48      	ldr	r3, [pc, #288]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	069b      	lsls	r3, r3, #26
 80027a0:	4944      	ldr	r1, [pc, #272]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	604b      	str	r3, [r1, #4]
 80027a6:	e023      	b.n	80027f0 <HAL_RCC_OscConfig+0x434>
 80027a8:	4b42      	ldr	r3, [pc, #264]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	061b      	lsls	r3, r3, #24
 80027b6:	493f      	ldr	r1, [pc, #252]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60cb      	str	r3, [r1, #12]
 80027bc:	e018      	b.n	80027f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027be:	4b3d      	ldr	r3, [pc, #244]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a3c      	ldr	r2, [pc, #240]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 80027c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ca:	f7fe fd1f 	bl	800120c <HAL_GetTick>
 80027ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027d2:	f7fe fd1b 	bl	800120c <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e23d      	b.n	8002c60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027e4:	4b33      	ldr	r3, [pc, #204]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f0      	bne.n	80027d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d036      	beq.n	800286a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d019      	beq.n	8002838 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002804:	4b2b      	ldr	r3, [pc, #172]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 8002806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002808:	4a2a      	ldr	r2, [pc, #168]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002810:	f7fe fcfc 	bl	800120c <HAL_GetTick>
 8002814:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002818:	f7fe fcf8 	bl	800120c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e21a      	b.n	8002c60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800282a:	4b22      	ldr	r3, [pc, #136]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 800282c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x45c>
 8002836:	e018      	b.n	800286a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002838:	4b1e      	ldr	r3, [pc, #120]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 800283a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800283c:	4a1d      	ldr	r2, [pc, #116]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002844:	f7fe fce2 	bl	800120c <HAL_GetTick>
 8002848:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284c:	f7fe fcde 	bl	800120c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e200      	b.n	8002c60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800285e:	4b15      	ldr	r3, [pc, #84]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 8002860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	2b00      	cmp	r3, #0
 8002874:	d039      	beq.n	80028ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d01c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800287e:	4b0d      	ldr	r3, [pc, #52]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a0c      	ldr	r2, [pc, #48]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 8002884:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002888:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800288a:	f7fe fcbf 	bl	800120c <HAL_GetTick>
 800288e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002892:	f7fe fcbb 	bl	800120c <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e1dd      	b.n	8002c60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028a4:	4b03      	ldr	r3, [pc, #12]	@ (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f0      	beq.n	8002892 <HAL_RCC_OscConfig+0x4d6>
 80028b0:	e01b      	b.n	80028ea <HAL_RCC_OscConfig+0x52e>
 80028b2:	bf00      	nop
 80028b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028b8:	4b9b      	ldr	r3, [pc, #620]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a9a      	ldr	r2, [pc, #616]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 80028be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028c4:	f7fe fca2 	bl	800120c <HAL_GetTick>
 80028c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028cc:	f7fe fc9e 	bl	800120c <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e1c0      	b.n	8002c60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028de:	4b92      	ldr	r3, [pc, #584]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 8081 	beq.w	80029fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028f8:	4b8c      	ldr	r3, [pc, #560]	@ (8002b2c <HAL_RCC_OscConfig+0x770>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a8b      	ldr	r2, [pc, #556]	@ (8002b2c <HAL_RCC_OscConfig+0x770>)
 80028fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002902:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002904:	f7fe fc82 	bl	800120c <HAL_GetTick>
 8002908:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290c:	f7fe fc7e 	bl	800120c <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	@ 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e1a0      	b.n	8002c60 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800291e:	4b83      	ldr	r3, [pc, #524]	@ (8002b2c <HAL_RCC_OscConfig+0x770>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d106      	bne.n	8002940 <HAL_RCC_OscConfig+0x584>
 8002932:	4b7d      	ldr	r3, [pc, #500]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002936:	4a7c      	ldr	r2, [pc, #496]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6713      	str	r3, [r2, #112]	@ 0x70
 800293e:	e02d      	b.n	800299c <HAL_RCC_OscConfig+0x5e0>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10c      	bne.n	8002962 <HAL_RCC_OscConfig+0x5a6>
 8002948:	4b77      	ldr	r3, [pc, #476]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294c:	4a76      	ldr	r2, [pc, #472]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	6713      	str	r3, [r2, #112]	@ 0x70
 8002954:	4b74      	ldr	r3, [pc, #464]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002958:	4a73      	ldr	r2, [pc, #460]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 800295a:	f023 0304 	bic.w	r3, r3, #4
 800295e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002960:	e01c      	b.n	800299c <HAL_RCC_OscConfig+0x5e0>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b05      	cmp	r3, #5
 8002968:	d10c      	bne.n	8002984 <HAL_RCC_OscConfig+0x5c8>
 800296a:	4b6f      	ldr	r3, [pc, #444]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296e:	4a6e      	ldr	r2, [pc, #440]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002970:	f043 0304 	orr.w	r3, r3, #4
 8002974:	6713      	str	r3, [r2, #112]	@ 0x70
 8002976:	4b6c      	ldr	r3, [pc, #432]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297a:	4a6b      	ldr	r2, [pc, #428]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6713      	str	r3, [r2, #112]	@ 0x70
 8002982:	e00b      	b.n	800299c <HAL_RCC_OscConfig+0x5e0>
 8002984:	4b68      	ldr	r3, [pc, #416]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002988:	4a67      	ldr	r2, [pc, #412]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 800298a:	f023 0301 	bic.w	r3, r3, #1
 800298e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002990:	4b65      	ldr	r3, [pc, #404]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002994:	4a64      	ldr	r2, [pc, #400]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002996:	f023 0304 	bic.w	r3, r3, #4
 800299a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d015      	beq.n	80029d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a4:	f7fe fc32 	bl	800120c <HAL_GetTick>
 80029a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ac:	f7fe fc2e 	bl	800120c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e14e      	b.n	8002c60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029c2:	4b59      	ldr	r3, [pc, #356]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0ee      	beq.n	80029ac <HAL_RCC_OscConfig+0x5f0>
 80029ce:	e014      	b.n	80029fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7fe fc1c 	bl	800120c <HAL_GetTick>
 80029d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d8:	f7fe fc18 	bl	800120c <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e138      	b.n	8002c60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1ee      	bne.n	80029d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 812d 	beq.w	8002c5e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a04:	4b48      	ldr	r3, [pc, #288]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a0c:	2b18      	cmp	r3, #24
 8002a0e:	f000 80bd 	beq.w	8002b8c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	f040 809e 	bne.w	8002b58 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1c:	4b42      	ldr	r3, [pc, #264]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a41      	ldr	r2, [pc, #260]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002a22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7fe fbf0 	bl	800120c <HAL_GetTick>
 8002a2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a30:	f7fe fbec 	bl	800120c <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e10e      	b.n	8002c60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a42:	4b39      	ldr	r3, [pc, #228]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a4e:	4b36      	ldr	r3, [pc, #216]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002a50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a52:	4b37      	ldr	r3, [pc, #220]	@ (8002b30 <HAL_RCC_OscConfig+0x774>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a5e:	0112      	lsls	r2, r2, #4
 8002a60:	430a      	orrs	r2, r1
 8002a62:	4931      	ldr	r1, [pc, #196]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a76:	3b01      	subs	r3, #1
 8002a78:	025b      	lsls	r3, r3, #9
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a82:	3b01      	subs	r3, #1
 8002a84:	041b      	lsls	r3, r3, #16
 8002a86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a90:	3b01      	subs	r3, #1
 8002a92:	061b      	lsls	r3, r3, #24
 8002a94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a98:	4923      	ldr	r1, [pc, #140]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a9e:	4b22      	ldr	r3, [pc, #136]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa2:	4a21      	ldr	r2, [pc, #132]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002aac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aae:	4b21      	ldr	r3, [pc, #132]	@ (8002b34 <HAL_RCC_OscConfig+0x778>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ab6:	00d2      	lsls	r2, r2, #3
 8002ab8:	491b      	ldr	r1, [pc, #108]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002abe:	4b1a      	ldr	r3, [pc, #104]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac2:	f023 020c 	bic.w	r2, r3, #12
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	4917      	ldr	r1, [pc, #92]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ad0:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	f023 0202 	bic.w	r2, r3, #2
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002adc:	4912      	ldr	r1, [pc, #72]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ae2:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae6:	4a10      	ldr	r2, [pc, #64]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aee:	4b0e      	ldr	r3, [pc, #56]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af2:	4a0d      	ldr	r2, [pc, #52]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002af8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002afa:	4b0b      	ldr	r3, [pc, #44]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afe:	4a0a      	ldr	r2, [pc, #40]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002b00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b06:	4b08      	ldr	r3, [pc, #32]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0a:	4a07      	ldr	r2, [pc, #28]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b12:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a04      	ldr	r2, [pc, #16]	@ (8002b28 <HAL_RCC_OscConfig+0x76c>)
 8002b18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7fe fb75 	bl	800120c <HAL_GetTick>
 8002b22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b24:	e011      	b.n	8002b4a <HAL_RCC_OscConfig+0x78e>
 8002b26:	bf00      	nop
 8002b28:	58024400 	.word	0x58024400
 8002b2c:	58024800 	.word	0x58024800
 8002b30:	fffffc0c 	.word	0xfffffc0c
 8002b34:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b38:	f7fe fb68 	bl	800120c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e08a      	b.n	8002c60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b4a:	4b47      	ldr	r3, [pc, #284]	@ (8002c68 <HAL_RCC_OscConfig+0x8ac>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x77c>
 8002b56:	e082      	b.n	8002c5e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b58:	4b43      	ldr	r3, [pc, #268]	@ (8002c68 <HAL_RCC_OscConfig+0x8ac>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a42      	ldr	r2, [pc, #264]	@ (8002c68 <HAL_RCC_OscConfig+0x8ac>)
 8002b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7fe fb52 	bl	800120c <HAL_GetTick>
 8002b68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7fe fb4e 	bl	800120c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e070      	b.n	8002c60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b7e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c68 <HAL_RCC_OscConfig+0x8ac>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x7b0>
 8002b8a:	e068      	b.n	8002c5e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b8c:	4b36      	ldr	r3, [pc, #216]	@ (8002c68 <HAL_RCC_OscConfig+0x8ac>)
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b92:	4b35      	ldr	r3, [pc, #212]	@ (8002c68 <HAL_RCC_OscConfig+0x8ac>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d031      	beq.n	8002c04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f003 0203 	and.w	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d12a      	bne.n	8002c04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d122      	bne.n	8002c04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d11a      	bne.n	8002c04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	0a5b      	lsrs	r3, r3, #9
 8002bd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bda:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d111      	bne.n	8002c04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	0c1b      	lsrs	r3, r3, #16
 8002be4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d108      	bne.n	8002c04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	0e1b      	lsrs	r3, r3, #24
 8002bf6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bfe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e02b      	b.n	8002c60 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c08:	4b17      	ldr	r3, [pc, #92]	@ (8002c68 <HAL_RCC_OscConfig+0x8ac>)
 8002c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c0c:	08db      	lsrs	r3, r3, #3
 8002c0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c12:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d01f      	beq.n	8002c5e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c1e:	4b12      	ldr	r3, [pc, #72]	@ (8002c68 <HAL_RCC_OscConfig+0x8ac>)
 8002c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c22:	4a11      	ldr	r2, [pc, #68]	@ (8002c68 <HAL_RCC_OscConfig+0x8ac>)
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c2a:	f7fe faef 	bl	800120c <HAL_GetTick>
 8002c2e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c30:	bf00      	nop
 8002c32:	f7fe faeb 	bl	800120c <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d0f9      	beq.n	8002c32 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c68 <HAL_RCC_OscConfig+0x8ac>)
 8002c40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c42:	4b0a      	ldr	r3, [pc, #40]	@ (8002c6c <HAL_RCC_OscConfig+0x8b0>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c4a:	00d2      	lsls	r2, r2, #3
 8002c4c:	4906      	ldr	r1, [pc, #24]	@ (8002c68 <HAL_RCC_OscConfig+0x8ac>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c52:	4b05      	ldr	r3, [pc, #20]	@ (8002c68 <HAL_RCC_OscConfig+0x8ac>)
 8002c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c56:	4a04      	ldr	r2, [pc, #16]	@ (8002c68 <HAL_RCC_OscConfig+0x8ac>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3730      	adds	r7, #48	@ 0x30
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	58024400 	.word	0x58024400
 8002c6c:	ffff0007 	.word	0xffff0007

08002c70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e19c      	b.n	8002fbe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c84:	4b8a      	ldr	r3, [pc, #552]	@ (8002eb0 <HAL_RCC_ClockConfig+0x240>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d910      	bls.n	8002cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b87      	ldr	r3, [pc, #540]	@ (8002eb0 <HAL_RCC_ClockConfig+0x240>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 020f 	bic.w	r2, r3, #15
 8002c9a:	4985      	ldr	r1, [pc, #532]	@ (8002eb0 <HAL_RCC_ClockConfig+0x240>)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca2:	4b83      	ldr	r3, [pc, #524]	@ (8002eb0 <HAL_RCC_ClockConfig+0x240>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e184      	b.n	8002fbe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d010      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	4b7b      	ldr	r3, [pc, #492]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d908      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cd0:	4b78      	ldr	r3, [pc, #480]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	4975      	ldr	r1, [pc, #468]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d010      	beq.n	8002d10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	4b70      	ldr	r3, [pc, #448]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d908      	bls.n	8002d10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cfe:	4b6d      	ldr	r3, [pc, #436]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	496a      	ldr	r1, [pc, #424]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d010      	beq.n	8002d3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	4b64      	ldr	r3, [pc, #400]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d908      	bls.n	8002d3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d2c:	4b61      	ldr	r3, [pc, #388]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	495e      	ldr	r1, [pc, #376]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d010      	beq.n	8002d6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69da      	ldr	r2, [r3, #28]
 8002d4e:	4b59      	ldr	r3, [pc, #356]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d908      	bls.n	8002d6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d5a:	4b56      	ldr	r3, [pc, #344]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	4953      	ldr	r1, [pc, #332]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d010      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	4b4d      	ldr	r3, [pc, #308]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d908      	bls.n	8002d9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d88:	4b4a      	ldr	r3, [pc, #296]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	f023 020f 	bic.w	r2, r3, #15
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4947      	ldr	r1, [pc, #284]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d055      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002da6:	4b43      	ldr	r3, [pc, #268]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	4940      	ldr	r1, [pc, #256]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d107      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dc0:	4b3c      	ldr	r3, [pc, #240]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d121      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0f6      	b.n	8002fbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d107      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dd8:	4b36      	ldr	r3, [pc, #216]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d115      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0ea      	b.n	8002fbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d107      	bne.n	8002e00 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002df0:	4b30      	ldr	r3, [pc, #192]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d109      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0de      	b.n	8002fbe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e00:	4b2c      	ldr	r3, [pc, #176]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0d6      	b.n	8002fbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e10:	4b28      	ldr	r3, [pc, #160]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f023 0207 	bic.w	r2, r3, #7
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	4925      	ldr	r1, [pc, #148]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e22:	f7fe f9f3 	bl	800120c <HAL_GetTick>
 8002e26:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e28:	e00a      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2a:	f7fe f9ef 	bl	800120c <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e0be      	b.n	8002fbe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e40:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d1eb      	bne.n	8002e2a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d010      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	4b14      	ldr	r3, [pc, #80]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d208      	bcs.n	8002e80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e6e:	4b11      	ldr	r3, [pc, #68]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f023 020f 	bic.w	r2, r3, #15
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	490e      	ldr	r1, [pc, #56]	@ (8002eb4 <HAL_RCC_ClockConfig+0x244>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e80:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb0 <HAL_RCC_ClockConfig+0x240>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d214      	bcs.n	8002eb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	4b08      	ldr	r3, [pc, #32]	@ (8002eb0 <HAL_RCC_ClockConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 020f 	bic.w	r2, r3, #15
 8002e96:	4906      	ldr	r1, [pc, #24]	@ (8002eb0 <HAL_RCC_ClockConfig+0x240>)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b04      	ldr	r3, [pc, #16]	@ (8002eb0 <HAL_RCC_ClockConfig+0x240>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e086      	b.n	8002fbe <HAL_RCC_ClockConfig+0x34e>
 8002eb0:	52002000 	.word	0x52002000
 8002eb4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d010      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc8 <HAL_RCC_ClockConfig+0x358>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d208      	bcs.n	8002ee6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ed4:	4b3c      	ldr	r3, [pc, #240]	@ (8002fc8 <HAL_RCC_ClockConfig+0x358>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	4939      	ldr	r1, [pc, #228]	@ (8002fc8 <HAL_RCC_ClockConfig+0x358>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d010      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	4b34      	ldr	r3, [pc, #208]	@ (8002fc8 <HAL_RCC_ClockConfig+0x358>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d208      	bcs.n	8002f14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f02:	4b31      	ldr	r3, [pc, #196]	@ (8002fc8 <HAL_RCC_ClockConfig+0x358>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	492e      	ldr	r1, [pc, #184]	@ (8002fc8 <HAL_RCC_ClockConfig+0x358>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d010      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699a      	ldr	r2, [r3, #24]
 8002f24:	4b28      	ldr	r3, [pc, #160]	@ (8002fc8 <HAL_RCC_ClockConfig+0x358>)
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d208      	bcs.n	8002f42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f30:	4b25      	ldr	r3, [pc, #148]	@ (8002fc8 <HAL_RCC_ClockConfig+0x358>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	4922      	ldr	r1, [pc, #136]	@ (8002fc8 <HAL_RCC_ClockConfig+0x358>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0320 	and.w	r3, r3, #32
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d010      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69da      	ldr	r2, [r3, #28]
 8002f52:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc8 <HAL_RCC_ClockConfig+0x358>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d208      	bcs.n	8002f70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc8 <HAL_RCC_ClockConfig+0x358>)
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	4917      	ldr	r1, [pc, #92]	@ (8002fc8 <HAL_RCC_ClockConfig+0x358>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f70:	f000 f834 	bl	8002fdc <HAL_RCC_GetSysClockFreq>
 8002f74:	4602      	mov	r2, r0
 8002f76:	4b14      	ldr	r3, [pc, #80]	@ (8002fc8 <HAL_RCC_ClockConfig+0x358>)
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	4912      	ldr	r1, [pc, #72]	@ (8002fcc <HAL_RCC_ClockConfig+0x35c>)
 8002f82:	5ccb      	ldrb	r3, [r1, r3]
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc8 <HAL_RCC_ClockConfig+0x358>)
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	4a0d      	ldr	r2, [pc, #52]	@ (8002fcc <HAL_RCC_ClockConfig+0x35c>)
 8002f98:	5cd3      	ldrb	r3, [r2, r3]
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd0 <HAL_RCC_ClockConfig+0x360>)
 8002fa6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd4 <HAL_RCC_ClockConfig+0x364>)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002fae:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd8 <HAL_RCC_ClockConfig+0x368>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe f8e0 	bl	8001178 <HAL_InitTick>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	58024400 	.word	0x58024400
 8002fcc:	08006b30 	.word	0x08006b30
 8002fd0:	24000004 	.word	0x24000004
 8002fd4:	24000000 	.word	0x24000000
 8002fd8:	24000008 	.word	0x24000008

08002fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b089      	sub	sp, #36	@ 0x24
 8002fe0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fe2:	4bb3      	ldr	r3, [pc, #716]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fea:	2b18      	cmp	r3, #24
 8002fec:	f200 8155 	bhi.w	800329a <HAL_RCC_GetSysClockFreq+0x2be>
 8002ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff6:	bf00      	nop
 8002ff8:	0800305d 	.word	0x0800305d
 8002ffc:	0800329b 	.word	0x0800329b
 8003000:	0800329b 	.word	0x0800329b
 8003004:	0800329b 	.word	0x0800329b
 8003008:	0800329b 	.word	0x0800329b
 800300c:	0800329b 	.word	0x0800329b
 8003010:	0800329b 	.word	0x0800329b
 8003014:	0800329b 	.word	0x0800329b
 8003018:	08003083 	.word	0x08003083
 800301c:	0800329b 	.word	0x0800329b
 8003020:	0800329b 	.word	0x0800329b
 8003024:	0800329b 	.word	0x0800329b
 8003028:	0800329b 	.word	0x0800329b
 800302c:	0800329b 	.word	0x0800329b
 8003030:	0800329b 	.word	0x0800329b
 8003034:	0800329b 	.word	0x0800329b
 8003038:	08003089 	.word	0x08003089
 800303c:	0800329b 	.word	0x0800329b
 8003040:	0800329b 	.word	0x0800329b
 8003044:	0800329b 	.word	0x0800329b
 8003048:	0800329b 	.word	0x0800329b
 800304c:	0800329b 	.word	0x0800329b
 8003050:	0800329b 	.word	0x0800329b
 8003054:	0800329b 	.word	0x0800329b
 8003058:	0800308f 	.word	0x0800308f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800305c:	4b94      	ldr	r3, [pc, #592]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0320 	and.w	r3, r3, #32
 8003064:	2b00      	cmp	r3, #0
 8003066:	d009      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003068:	4b91      	ldr	r3, [pc, #580]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	08db      	lsrs	r3, r3, #3
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	4a90      	ldr	r2, [pc, #576]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
 8003078:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800307a:	e111      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800307c:	4b8d      	ldr	r3, [pc, #564]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800307e:	61bb      	str	r3, [r7, #24]
      break;
 8003080:	e10e      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003082:	4b8d      	ldr	r3, [pc, #564]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003084:	61bb      	str	r3, [r7, #24]
      break;
 8003086:	e10b      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003088:	4b8c      	ldr	r3, [pc, #560]	@ (80032bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800308a:	61bb      	str	r3, [r7, #24]
      break;
 800308c:	e108      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800308e:	4b88      	ldr	r3, [pc, #544]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003098:	4b85      	ldr	r3, [pc, #532]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030a4:	4b82      	ldr	r3, [pc, #520]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030ae:	4b80      	ldr	r3, [pc, #512]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b2:	08db      	lsrs	r3, r3, #3
 80030b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	fb02 f303 	mul.w	r3, r2, r3
 80030be:	ee07 3a90 	vmov	s15, r3
 80030c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80e1 	beq.w	8003294 <HAL_RCC_GetSysClockFreq+0x2b8>
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	f000 8083 	beq.w	80031e0 <HAL_RCC_GetSysClockFreq+0x204>
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	f200 80a1 	bhi.w	8003224 <HAL_RCC_GetSysClockFreq+0x248>
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0x114>
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d056      	beq.n	800319c <HAL_RCC_GetSysClockFreq+0x1c0>
 80030ee:	e099      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030f0:	4b6f      	ldr	r3, [pc, #444]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d02d      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030fc:	4b6c      	ldr	r3, [pc, #432]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	08db      	lsrs	r3, r3, #3
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	4a6b      	ldr	r2, [pc, #428]	@ (80032b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003108:	fa22 f303 	lsr.w	r3, r2, r3
 800310c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	ee07 3a90 	vmov	s15, r3
 8003114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	ee07 3a90 	vmov	s15, r3
 800311e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003126:	4b62      	ldr	r3, [pc, #392]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800312e:	ee07 3a90 	vmov	s15, r3
 8003132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003136:	ed97 6a02 	vldr	s12, [r7, #8]
 800313a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80032c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800313e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800314a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800314e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003152:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003156:	e087      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	ee07 3a90 	vmov	s15, r3
 800315e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003162:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80032c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800316a:	4b51      	ldr	r3, [pc, #324]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003172:	ee07 3a90 	vmov	s15, r3
 8003176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800317a:	ed97 6a02 	vldr	s12, [r7, #8]
 800317e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80032c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800318a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800318e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003196:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800319a:	e065      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80032c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ae:	4b40      	ldr	r3, [pc, #256]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031be:	ed97 6a02 	vldr	s12, [r7, #8]
 80031c2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80032c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031de:	e043      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	ee07 3a90 	vmov	s15, r3
 80031e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80032cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80031ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031f2:	4b2f      	ldr	r3, [pc, #188]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003202:	ed97 6a02 	vldr	s12, [r7, #8]
 8003206:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80032c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800320a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800320e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800321a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800321e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003222:	e021      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	ee07 3a90 	vmov	s15, r3
 800322a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80032c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003236:	4b1e      	ldr	r3, [pc, #120]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003246:	ed97 6a02 	vldr	s12, [r7, #8]
 800324a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80032c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800324e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800325a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800325e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003262:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003266:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003268:	4b11      	ldr	r3, [pc, #68]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326c:	0a5b      	lsrs	r3, r3, #9
 800326e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003272:	3301      	adds	r3, #1
 8003274:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	ee07 3a90 	vmov	s15, r3
 800327c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003280:	edd7 6a07 	vldr	s13, [r7, #28]
 8003284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800328c:	ee17 3a90 	vmov	r3, s15
 8003290:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003292:	e005      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	61bb      	str	r3, [r7, #24]
      break;
 8003298:	e002      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800329a:	4b07      	ldr	r3, [pc, #28]	@ (80032b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800329c:	61bb      	str	r3, [r7, #24]
      break;
 800329e:	bf00      	nop
  }

  return sysclockfreq;
 80032a0:	69bb      	ldr	r3, [r7, #24]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3724      	adds	r7, #36	@ 0x24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	58024400 	.word	0x58024400
 80032b4:	03d09000 	.word	0x03d09000
 80032b8:	003d0900 	.word	0x003d0900
 80032bc:	007a1200 	.word	0x007a1200
 80032c0:	46000000 	.word	0x46000000
 80032c4:	4c742400 	.word	0x4c742400
 80032c8:	4a742400 	.word	0x4a742400
 80032cc:	4af42400 	.word	0x4af42400

080032d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80032d6:	f7ff fe81 	bl	8002fdc <HAL_RCC_GetSysClockFreq>
 80032da:	4602      	mov	r2, r0
 80032dc:	4b10      	ldr	r3, [pc, #64]	@ (8003320 <HAL_RCC_GetHCLKFreq+0x50>)
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	490f      	ldr	r1, [pc, #60]	@ (8003324 <HAL_RCC_GetHCLKFreq+0x54>)
 80032e8:	5ccb      	ldrb	r3, [r1, r3]
 80032ea:	f003 031f 	and.w	r3, r3, #31
 80032ee:	fa22 f303 	lsr.w	r3, r2, r3
 80032f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003320 <HAL_RCC_GetHCLKFreq+0x50>)
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	4a09      	ldr	r2, [pc, #36]	@ (8003324 <HAL_RCC_GetHCLKFreq+0x54>)
 80032fe:	5cd3      	ldrb	r3, [r2, r3]
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	fa22 f303 	lsr.w	r3, r2, r3
 800330a:	4a07      	ldr	r2, [pc, #28]	@ (8003328 <HAL_RCC_GetHCLKFreq+0x58>)
 800330c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800330e:	4a07      	ldr	r2, [pc, #28]	@ (800332c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003314:	4b04      	ldr	r3, [pc, #16]	@ (8003328 <HAL_RCC_GetHCLKFreq+0x58>)
 8003316:	681b      	ldr	r3, [r3, #0]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	58024400 	.word	0x58024400
 8003324:	08006b30 	.word	0x08006b30
 8003328:	24000004 	.word	0x24000004
 800332c:	24000000 	.word	0x24000000

08003330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003334:	f7ff ffcc 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b06      	ldr	r3, [pc, #24]	@ (8003354 <HAL_RCC_GetPCLK1Freq+0x24>)
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	091b      	lsrs	r3, r3, #4
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4904      	ldr	r1, [pc, #16]	@ (8003358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003350:	4618      	mov	r0, r3
 8003352:	bd80      	pop	{r7, pc}
 8003354:	58024400 	.word	0x58024400
 8003358:	08006b30 	.word	0x08006b30

0800335c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003360:	f7ff ffb6 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 8003364:	4602      	mov	r2, r0
 8003366:	4b06      	ldr	r3, [pc, #24]	@ (8003380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	0a1b      	lsrs	r3, r3, #8
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	4904      	ldr	r1, [pc, #16]	@ (8003384 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003372:	5ccb      	ldrb	r3, [r1, r3]
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800337c:	4618      	mov	r0, r3
 800337e:	bd80      	pop	{r7, pc}
 8003380:	58024400 	.word	0x58024400
 8003384:	08006b30 	.word	0x08006b30

08003388 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800338c:	b0ca      	sub	sp, #296	@ 0x128
 800338e:	af00      	add	r7, sp, #0
 8003390:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003394:	2300      	movs	r3, #0
 8003396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800339a:	2300      	movs	r3, #0
 800339c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80033ac:	2500      	movs	r5, #0
 80033ae:	ea54 0305 	orrs.w	r3, r4, r5
 80033b2:	d049      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033be:	d02f      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033c4:	d828      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033ca:	d01a      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80033cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033d0:	d822      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80033d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033da:	d007      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033dc:	e01c      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033de:	4bb8      	ldr	r3, [pc, #736]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e2:	4ab7      	ldr	r2, [pc, #732]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033ea:	e01a      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f0:	3308      	adds	r3, #8
 80033f2:	2102      	movs	r1, #2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f001 fc8f 	bl	8004d18 <RCCEx_PLL2_Config>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003400:	e00f      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003406:	3328      	adds	r3, #40	@ 0x28
 8003408:	2102      	movs	r1, #2
 800340a:	4618      	mov	r0, r3
 800340c:	f001 fd36 	bl	8004e7c <RCCEx_PLL3_Config>
 8003410:	4603      	mov	r3, r0
 8003412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003416:	e004      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800341e:	e000      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10a      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800342a:	4ba5      	ldr	r3, [pc, #660]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800342c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800342e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003436:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003438:	4aa1      	ldr	r2, [pc, #644]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800343a:	430b      	orrs	r3, r1
 800343c:	6513      	str	r3, [r2, #80]	@ 0x50
 800343e:	e003      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003444:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003450:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003454:	f04f 0900 	mov.w	r9, #0
 8003458:	ea58 0309 	orrs.w	r3, r8, r9
 800345c:	d047      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800345e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003464:	2b04      	cmp	r3, #4
 8003466:	d82a      	bhi.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003468:	a201      	add	r2, pc, #4	@ (adr r2, 8003470 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800346a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346e:	bf00      	nop
 8003470:	08003485 	.word	0x08003485
 8003474:	08003493 	.word	0x08003493
 8003478:	080034a9 	.word	0x080034a9
 800347c:	080034c7 	.word	0x080034c7
 8003480:	080034c7 	.word	0x080034c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003484:	4b8e      	ldr	r3, [pc, #568]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003488:	4a8d      	ldr	r2, [pc, #564]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800348a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800348e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003490:	e01a      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003496:	3308      	adds	r3, #8
 8003498:	2100      	movs	r1, #0
 800349a:	4618      	mov	r0, r3
 800349c:	f001 fc3c 	bl	8004d18 <RCCEx_PLL2_Config>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034a6:	e00f      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ac:	3328      	adds	r3, #40	@ 0x28
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f001 fce3 	bl	8004e7c <RCCEx_PLL3_Config>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034bc:	e004      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034c4:	e000      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80034c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10a      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034d0:	4b7b      	ldr	r3, [pc, #492]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d4:	f023 0107 	bic.w	r1, r3, #7
 80034d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034de:	4a78      	ldr	r2, [pc, #480]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034e0:	430b      	orrs	r3, r1
 80034e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80034e4:	e003      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80034ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80034fa:	f04f 0b00 	mov.w	fp, #0
 80034fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8003502:	d04c      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800350e:	d030      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003510:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003514:	d829      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003516:	2bc0      	cmp	r3, #192	@ 0xc0
 8003518:	d02d      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800351a:	2bc0      	cmp	r3, #192	@ 0xc0
 800351c:	d825      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800351e:	2b80      	cmp	r3, #128	@ 0x80
 8003520:	d018      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003522:	2b80      	cmp	r3, #128	@ 0x80
 8003524:	d821      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800352a:	2b40      	cmp	r3, #64	@ 0x40
 800352c:	d007      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800352e:	e01c      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003530:	4b63      	ldr	r3, [pc, #396]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003534:	4a62      	ldr	r2, [pc, #392]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003536:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800353a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800353c:	e01c      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800353e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003542:	3308      	adds	r3, #8
 8003544:	2100      	movs	r1, #0
 8003546:	4618      	mov	r0, r3
 8003548:	f001 fbe6 	bl	8004d18 <RCCEx_PLL2_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003552:	e011      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003558:	3328      	adds	r3, #40	@ 0x28
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f001 fc8d 	bl	8004e7c <RCCEx_PLL3_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003568:	e006      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003570:	e002      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003572:	bf00      	nop
 8003574:	e000      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003576:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003578:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10a      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003580:	4b4f      	ldr	r3, [pc, #316]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003584:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800358e:	4a4c      	ldr	r2, [pc, #304]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003590:	430b      	orrs	r3, r1
 8003592:	6513      	str	r3, [r2, #80]	@ 0x50
 8003594:	e003      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800359a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800359e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80035aa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80035ae:	2300      	movs	r3, #0
 80035b0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80035b4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80035b8:	460b      	mov	r3, r1
 80035ba:	4313      	orrs	r3, r2
 80035bc:	d053      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80035be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035ca:	d035      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80035cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035d0:	d82e      	bhi.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80035d6:	d031      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80035d8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80035dc:	d828      	bhi.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035e2:	d01a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80035e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035e8:	d822      	bhi.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80035ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035f2:	d007      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80035f4:	e01c      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f6:	4b32      	ldr	r3, [pc, #200]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fa:	4a31      	ldr	r2, [pc, #196]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003600:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003602:	e01c      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003608:	3308      	adds	r3, #8
 800360a:	2100      	movs	r1, #0
 800360c:	4618      	mov	r0, r3
 800360e:	f001 fb83 	bl	8004d18 <RCCEx_PLL2_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003618:	e011      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800361a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800361e:	3328      	adds	r3, #40	@ 0x28
 8003620:	2100      	movs	r1, #0
 8003622:	4618      	mov	r0, r3
 8003624:	f001 fc2a 	bl	8004e7c <RCCEx_PLL3_Config>
 8003628:	4603      	mov	r3, r0
 800362a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800362e:	e006      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003636:	e002      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003638:	bf00      	nop
 800363a:	e000      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800363c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800363e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10b      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003646:	4b1e      	ldr	r3, [pc, #120]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800364e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003652:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003656:	4a1a      	ldr	r2, [pc, #104]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003658:	430b      	orrs	r3, r1
 800365a:	6593      	str	r3, [r2, #88]	@ 0x58
 800365c:	e003      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003662:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003672:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003676:	2300      	movs	r3, #0
 8003678:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800367c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003680:	460b      	mov	r3, r1
 8003682:	4313      	orrs	r3, r2
 8003684:	d056      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800368e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003692:	d038      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003694:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003698:	d831      	bhi.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800369a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800369e:	d034      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80036a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036a4:	d82b      	bhi.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036aa:	d01d      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80036ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036b0:	d825      	bhi.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d006      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80036b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80036bc:	e01f      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036be:	bf00      	nop
 80036c0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c4:	4ba2      	ldr	r3, [pc, #648]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c8:	4aa1      	ldr	r2, [pc, #644]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036d0:	e01c      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d6:	3308      	adds	r3, #8
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 fb1c 	bl	8004d18 <RCCEx_PLL2_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036e6:	e011      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ec:	3328      	adds	r3, #40	@ 0x28
 80036ee:	2100      	movs	r1, #0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f001 fbc3 	bl	8004e7c <RCCEx_PLL3_Config>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036fc:	e006      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003704:	e002      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003706:	bf00      	nop
 8003708:	e000      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800370a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800370c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10b      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003714:	4b8e      	ldr	r3, [pc, #568]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003718:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800371c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003720:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003724:	4a8a      	ldr	r2, [pc, #552]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003726:	430b      	orrs	r3, r1
 8003728:	6593      	str	r3, [r2, #88]	@ 0x58
 800372a:	e003      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003730:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003740:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003744:	2300      	movs	r3, #0
 8003746:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800374a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800374e:	460b      	mov	r3, r1
 8003750:	4313      	orrs	r3, r2
 8003752:	d03a      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375a:	2b30      	cmp	r3, #48	@ 0x30
 800375c:	d01f      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800375e:	2b30      	cmp	r3, #48	@ 0x30
 8003760:	d819      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003762:	2b20      	cmp	r3, #32
 8003764:	d00c      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003766:	2b20      	cmp	r3, #32
 8003768:	d815      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800376a:	2b00      	cmp	r3, #0
 800376c:	d019      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800376e:	2b10      	cmp	r3, #16
 8003770:	d111      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003772:	4b77      	ldr	r3, [pc, #476]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003776:	4a76      	ldr	r2, [pc, #472]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800377c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800377e:	e011      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003784:	3308      	adds	r3, #8
 8003786:	2102      	movs	r1, #2
 8003788:	4618      	mov	r0, r3
 800378a:	f001 fac5 	bl	8004d18 <RCCEx_PLL2_Config>
 800378e:	4603      	mov	r3, r0
 8003790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003794:	e006      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800379c:	e002      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800379e:	bf00      	nop
 80037a0:	e000      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80037a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037ac:	4b68      	ldr	r3, [pc, #416]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80037b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ba:	4a65      	ldr	r2, [pc, #404]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037bc:	430b      	orrs	r3, r1
 80037be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037c0:	e003      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80037d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80037da:	2300      	movs	r3, #0
 80037dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80037e0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4313      	orrs	r3, r2
 80037e8:	d051      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80037ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037f4:	d035      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80037f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037fa:	d82e      	bhi.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003800:	d031      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003802:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003806:	d828      	bhi.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003808:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800380c:	d01a      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800380e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003812:	d822      	bhi.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800381c:	d007      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800381e:	e01c      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003820:	4b4b      	ldr	r3, [pc, #300]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003824:	4a4a      	ldr	r2, [pc, #296]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800382a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800382c:	e01c      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800382e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003832:	3308      	adds	r3, #8
 8003834:	2100      	movs	r1, #0
 8003836:	4618      	mov	r0, r3
 8003838:	f001 fa6e 	bl	8004d18 <RCCEx_PLL2_Config>
 800383c:	4603      	mov	r3, r0
 800383e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003842:	e011      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003848:	3328      	adds	r3, #40	@ 0x28
 800384a:	2100      	movs	r1, #0
 800384c:	4618      	mov	r0, r3
 800384e:	f001 fb15 	bl	8004e7c <RCCEx_PLL3_Config>
 8003852:	4603      	mov	r3, r0
 8003854:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003858:	e006      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003860:	e002      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003862:	bf00      	nop
 8003864:	e000      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003866:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10a      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003870:	4b37      	ldr	r3, [pc, #220]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003874:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387e:	4a34      	ldr	r2, [pc, #208]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003880:	430b      	orrs	r3, r1
 8003882:	6513      	str	r3, [r2, #80]	@ 0x50
 8003884:	e003      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800388a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800388e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800389a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800389e:	2300      	movs	r3, #0
 80038a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80038a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80038a8:	460b      	mov	r3, r1
 80038aa:	4313      	orrs	r3, r2
 80038ac:	d056      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80038ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038b8:	d033      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80038ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038be:	d82c      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038c4:	d02f      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80038c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038ca:	d826      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038d0:	d02b      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80038d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038d6:	d820      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038dc:	d012      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80038de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038e2:	d81a      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d022      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80038e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ec:	d115      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f2:	3308      	adds	r3, #8
 80038f4:	2101      	movs	r1, #1
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 fa0e 	bl	8004d18 <RCCEx_PLL2_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003902:	e015      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003908:	3328      	adds	r3, #40	@ 0x28
 800390a:	2101      	movs	r1, #1
 800390c:	4618      	mov	r0, r3
 800390e:	f001 fab5 	bl	8004e7c <RCCEx_PLL3_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003918:	e00a      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003920:	e006      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003922:	bf00      	nop
 8003924:	e004      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003926:	bf00      	nop
 8003928:	e002      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800392a:	bf00      	nop
 800392c:	e000      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800392e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003930:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10d      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003938:	4b05      	ldr	r3, [pc, #20]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800393a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800393c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003944:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003946:	4a02      	ldr	r2, [pc, #8]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003948:	430b      	orrs	r3, r1
 800394a:	6513      	str	r3, [r2, #80]	@ 0x50
 800394c:	e006      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800394e:	bf00      	nop
 8003950:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003954:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003958:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800395c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003964:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003968:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800396c:	2300      	movs	r3, #0
 800396e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003972:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003976:	460b      	mov	r3, r1
 8003978:	4313      	orrs	r3, r2
 800397a:	d055      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800397c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003980:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003984:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003988:	d033      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800398a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800398e:	d82c      	bhi.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003994:	d02f      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800399a:	d826      	bhi.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800399c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039a0:	d02b      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x672>
 80039a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039a6:	d820      	bhi.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039ac:	d012      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80039ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039b2:	d81a      	bhi.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d022      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x676>
 80039b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039bc:	d115      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c2:	3308      	adds	r3, #8
 80039c4:	2101      	movs	r1, #1
 80039c6:	4618      	mov	r0, r3
 80039c8:	f001 f9a6 	bl	8004d18 <RCCEx_PLL2_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039d2:	e015      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d8:	3328      	adds	r3, #40	@ 0x28
 80039da:	2101      	movs	r1, #1
 80039dc:	4618      	mov	r0, r3
 80039de:	f001 fa4d 	bl	8004e7c <RCCEx_PLL3_Config>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039e8:	e00a      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039f0:	e006      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039f2:	bf00      	nop
 80039f4:	e004      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039f6:	bf00      	nop
 80039f8:	e002      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039fa:	bf00      	nop
 80039fc:	e000      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10b      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a08:	4ba3      	ldr	r3, [pc, #652]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a18:	4a9f      	ldr	r2, [pc, #636]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a1e:	e003      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003a34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003a3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a42:	460b      	mov	r3, r1
 8003a44:	4313      	orrs	r3, r2
 8003a46:	d037      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a52:	d00e      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a58:	d816      	bhi.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d018      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003a5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a62:	d111      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a64:	4b8c      	ldr	r3, [pc, #560]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a68:	4a8b      	ldr	r2, [pc, #556]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a70:	e00f      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a76:	3308      	adds	r3, #8
 8003a78:	2101      	movs	r1, #1
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f001 f94c 	bl	8004d18 <RCCEx_PLL2_Config>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a86:	e004      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a8e:	e000      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10a      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a9a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a9e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa8:	4a7b      	ldr	r2, [pc, #492]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aaa:	430b      	orrs	r3, r1
 8003aac:	6513      	str	r3, [r2, #80]	@ 0x50
 8003aae:	e003      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ab4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003ace:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	d039      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d81c      	bhi.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae8:	08003b25 	.word	0x08003b25
 8003aec:	08003af9 	.word	0x08003af9
 8003af0:	08003b07 	.word	0x08003b07
 8003af4:	08003b25 	.word	0x08003b25
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af8:	4b67      	ldr	r3, [pc, #412]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afc:	4a66      	ldr	r2, [pc, #408]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003afe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b04:	e00f      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0a:	3308      	adds	r3, #8
 8003b0c:	2102      	movs	r1, #2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f001 f902 	bl	8004d18 <RCCEx_PLL2_Config>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b1a:	e004      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b22:	e000      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10a      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b2e:	4b5a      	ldr	r3, [pc, #360]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b32:	f023 0103 	bic.w	r1, r3, #3
 8003b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b3c:	4a56      	ldr	r2, [pc, #344]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b42:	e003      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003b58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003b66:	460b      	mov	r3, r1
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f000 809f 	beq.w	8003cac <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b6e:	4b4b      	ldr	r3, [pc, #300]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a4a      	ldr	r2, [pc, #296]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b7a:	f7fd fb47 	bl	800120c <HAL_GetTick>
 8003b7e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b82:	e00b      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b84:	f7fd fb42 	bl	800120c <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b64      	cmp	r3, #100	@ 0x64
 8003b92:	d903      	bls.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b9a:	e005      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b9c:	4b3f      	ldr	r3, [pc, #252]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0ed      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d179      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003bb0:	4b39      	ldr	r3, [pc, #228]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bbc:	4053      	eors	r3, r2
 8003bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d015      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bc6:	4b34      	ldr	r3, [pc, #208]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bd2:	4b31      	ldr	r3, [pc, #196]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd6:	4a30      	ldr	r2, [pc, #192]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bdc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bde:	4b2e      	ldr	r3, [pc, #184]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be2:	4a2d      	ldr	r2, [pc, #180]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003be8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bea:	4a2b      	ldr	r2, [pc, #172]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bf0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bfe:	d118      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fd fb04 	bl	800120c <HAL_GetTick>
 8003c04:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c08:	e00d      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0a:	f7fd faff 	bl	800120c <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c14:	1ad2      	subs	r2, r2, r3
 8003c16:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d903      	bls.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003c24:	e005      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c26:	4b1c      	ldr	r3, [pc, #112]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0eb      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d129      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c4a:	d10e      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003c4c:	4b12      	ldr	r3, [pc, #72]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c5c:	091a      	lsrs	r2, r3, #4
 8003c5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	4a0d      	ldr	r2, [pc, #52]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c64:	430b      	orrs	r3, r1
 8003c66:	6113      	str	r3, [r2, #16]
 8003c68:	e005      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c70:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c74:	6113      	str	r3, [r2, #16]
 8003c76:	4b08      	ldr	r3, [pc, #32]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c78:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c86:	4a04      	ldr	r2, [pc, #16]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c88:	430b      	orrs	r3, r1
 8003c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c8c:	e00e      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003c96:	e009      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003c98:	58024400 	.word	0x58024400
 8003c9c:	58024800 	.word	0x58024800
 8003ca0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb4:	f002 0301 	and.w	r3, r2, #1
 8003cb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003cc2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f000 8089 	beq.w	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cd4:	2b28      	cmp	r3, #40	@ 0x28
 8003cd6:	d86b      	bhi.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003db9 	.word	0x08003db9
 8003ce4:	08003db1 	.word	0x08003db1
 8003ce8:	08003db1 	.word	0x08003db1
 8003cec:	08003db1 	.word	0x08003db1
 8003cf0:	08003db1 	.word	0x08003db1
 8003cf4:	08003db1 	.word	0x08003db1
 8003cf8:	08003db1 	.word	0x08003db1
 8003cfc:	08003db1 	.word	0x08003db1
 8003d00:	08003d85 	.word	0x08003d85
 8003d04:	08003db1 	.word	0x08003db1
 8003d08:	08003db1 	.word	0x08003db1
 8003d0c:	08003db1 	.word	0x08003db1
 8003d10:	08003db1 	.word	0x08003db1
 8003d14:	08003db1 	.word	0x08003db1
 8003d18:	08003db1 	.word	0x08003db1
 8003d1c:	08003db1 	.word	0x08003db1
 8003d20:	08003d9b 	.word	0x08003d9b
 8003d24:	08003db1 	.word	0x08003db1
 8003d28:	08003db1 	.word	0x08003db1
 8003d2c:	08003db1 	.word	0x08003db1
 8003d30:	08003db1 	.word	0x08003db1
 8003d34:	08003db1 	.word	0x08003db1
 8003d38:	08003db1 	.word	0x08003db1
 8003d3c:	08003db1 	.word	0x08003db1
 8003d40:	08003db9 	.word	0x08003db9
 8003d44:	08003db1 	.word	0x08003db1
 8003d48:	08003db1 	.word	0x08003db1
 8003d4c:	08003db1 	.word	0x08003db1
 8003d50:	08003db1 	.word	0x08003db1
 8003d54:	08003db1 	.word	0x08003db1
 8003d58:	08003db1 	.word	0x08003db1
 8003d5c:	08003db1 	.word	0x08003db1
 8003d60:	08003db9 	.word	0x08003db9
 8003d64:	08003db1 	.word	0x08003db1
 8003d68:	08003db1 	.word	0x08003db1
 8003d6c:	08003db1 	.word	0x08003db1
 8003d70:	08003db1 	.word	0x08003db1
 8003d74:	08003db1 	.word	0x08003db1
 8003d78:	08003db1 	.word	0x08003db1
 8003d7c:	08003db1 	.word	0x08003db1
 8003d80:	08003db9 	.word	0x08003db9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d88:	3308      	adds	r3, #8
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 ffc3 	bl	8004d18 <RCCEx_PLL2_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d98:	e00f      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9e:	3328      	adds	r3, #40	@ 0x28
 8003da0:	2101      	movs	r1, #1
 8003da2:	4618      	mov	r0, r3
 8003da4:	f001 f86a 	bl	8004e7c <RCCEx_PLL3_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003dae:	e004      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003db6:	e000      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10a      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003dc2:	4bbf      	ldr	r3, [pc, #764]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dd0:	4abb      	ldr	r2, [pc, #748]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dd6:	e003      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ddc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f002 0302 	and.w	r3, r2, #2
 8003dec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003df0:	2300      	movs	r3, #0
 8003df2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003df6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	d041      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e06:	2b05      	cmp	r3, #5
 8003e08:	d824      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e10 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e10:	08003e5d 	.word	0x08003e5d
 8003e14:	08003e29 	.word	0x08003e29
 8003e18:	08003e3f 	.word	0x08003e3f
 8003e1c:	08003e5d 	.word	0x08003e5d
 8003e20:	08003e5d 	.word	0x08003e5d
 8003e24:	08003e5d 	.word	0x08003e5d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	2101      	movs	r1, #1
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 ff71 	bl	8004d18 <RCCEx_PLL2_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e3c:	e00f      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e42:	3328      	adds	r3, #40	@ 0x28
 8003e44:	2101      	movs	r1, #1
 8003e46:	4618      	mov	r0, r3
 8003e48:	f001 f818 	bl	8004e7c <RCCEx_PLL3_Config>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e52:	e004      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e5a:	e000      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10a      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e66:	4b96      	ldr	r3, [pc, #600]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e6a:	f023 0107 	bic.w	r1, r3, #7
 8003e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e74:	4a92      	ldr	r2, [pc, #584]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e76:	430b      	orrs	r3, r1
 8003e78:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e7a:	e003      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8c:	f002 0304 	and.w	r3, r2, #4
 8003e90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e94:	2300      	movs	r3, #0
 8003e96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e9a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	d044      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eac:	2b05      	cmp	r3, #5
 8003eae:	d825      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb6:	bf00      	nop
 8003eb8:	08003f05 	.word	0x08003f05
 8003ebc:	08003ed1 	.word	0x08003ed1
 8003ec0:	08003ee7 	.word	0x08003ee7
 8003ec4:	08003f05 	.word	0x08003f05
 8003ec8:	08003f05 	.word	0x08003f05
 8003ecc:	08003f05 	.word	0x08003f05
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 ff1d 	bl	8004d18 <RCCEx_PLL2_Config>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ee4:	e00f      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eea:	3328      	adds	r3, #40	@ 0x28
 8003eec:	2101      	movs	r1, #1
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 ffc4 	bl	8004e7c <RCCEx_PLL3_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003efa:	e004      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f02:	e000      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f0e:	4b6c      	ldr	r3, [pc, #432]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f12:	f023 0107 	bic.w	r1, r3, #7
 8003f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f1e:	4a68      	ldr	r2, [pc, #416]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f24:	e003      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f36:	f002 0320 	and.w	r3, r2, #32
 8003f3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	d055      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f5a:	d033      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f60:	d82c      	bhi.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f66:	d02f      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f6c:	d826      	bhi.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f72:	d02b      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003f74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f78:	d820      	bhi.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f7e:	d012      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003f80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f84:	d81a      	bhi.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d022      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003f8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f8e:	d115      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f94:	3308      	adds	r3, #8
 8003f96:	2100      	movs	r1, #0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 febd 	bl	8004d18 <RCCEx_PLL2_Config>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fa4:	e015      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003faa:	3328      	adds	r3, #40	@ 0x28
 8003fac:	2102      	movs	r1, #2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 ff64 	bl	8004e7c <RCCEx_PLL3_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fba:	e00a      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fc2:	e006      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fc4:	bf00      	nop
 8003fc6:	e004      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fc8:	bf00      	nop
 8003fca:	e002      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fcc:	bf00      	nop
 8003fce:	e000      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10b      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fda:	4b39      	ldr	r3, [pc, #228]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fde:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fea:	4a35      	ldr	r2, [pc, #212]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fec:	430b      	orrs	r3, r1
 8003fee:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ff0:	e003      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004002:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004006:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800400a:	2300      	movs	r3, #0
 800400c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004010:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004014:	460b      	mov	r3, r1
 8004016:	4313      	orrs	r3, r2
 8004018:	d058      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800401a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004022:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004026:	d033      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004028:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800402c:	d82c      	bhi.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800402e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004032:	d02f      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004034:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004038:	d826      	bhi.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800403a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800403e:	d02b      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004040:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004044:	d820      	bhi.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004046:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800404a:	d012      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800404c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004050:	d81a      	bhi.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d022      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800405a:	d115      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800405c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004060:	3308      	adds	r3, #8
 8004062:	2100      	movs	r1, #0
 8004064:	4618      	mov	r0, r3
 8004066:	f000 fe57 	bl	8004d18 <RCCEx_PLL2_Config>
 800406a:	4603      	mov	r3, r0
 800406c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004070:	e015      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004076:	3328      	adds	r3, #40	@ 0x28
 8004078:	2102      	movs	r1, #2
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fefe 	bl	8004e7c <RCCEx_PLL3_Config>
 8004080:	4603      	mov	r3, r0
 8004082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004086:	e00a      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800408e:	e006      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004090:	bf00      	nop
 8004092:	e004      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004094:	bf00      	nop
 8004096:	e002      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004098:	bf00      	nop
 800409a:	e000      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800409c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10e      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040a6:	4b06      	ldr	r3, [pc, #24]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040aa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040b6:	4a02      	ldr	r2, [pc, #8]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040b8:	430b      	orrs	r3, r1
 80040ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80040bc:	e006      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80040be:	bf00      	nop
 80040c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80040d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040dc:	2300      	movs	r3, #0
 80040de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040e2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80040e6:	460b      	mov	r3, r1
 80040e8:	4313      	orrs	r3, r2
 80040ea:	d055      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80040ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040f4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040f8:	d033      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80040fa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040fe:	d82c      	bhi.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004100:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004104:	d02f      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004106:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800410a:	d826      	bhi.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800410c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004110:	d02b      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004112:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004116:	d820      	bhi.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004118:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800411c:	d012      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800411e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004122:	d81a      	bhi.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d022      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004128:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800412c:	d115      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800412e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004132:	3308      	adds	r3, #8
 8004134:	2100      	movs	r1, #0
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fdee 	bl	8004d18 <RCCEx_PLL2_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004142:	e015      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004148:	3328      	adds	r3, #40	@ 0x28
 800414a:	2102      	movs	r1, #2
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fe95 	bl	8004e7c <RCCEx_PLL3_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004158:	e00a      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004160:	e006      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004162:	bf00      	nop
 8004164:	e004      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004166:	bf00      	nop
 8004168:	e002      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800416a:	bf00      	nop
 800416c:	e000      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800416e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10b      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004178:	4ba1      	ldr	r3, [pc, #644]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800417a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004184:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004188:	4a9d      	ldr	r2, [pc, #628]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800418a:	430b      	orrs	r3, r1
 800418c:	6593      	str	r3, [r2, #88]	@ 0x58
 800418e:	e003      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004190:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004194:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a0:	f002 0308 	and.w	r3, r2, #8
 80041a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041a8:	2300      	movs	r3, #0
 80041aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80041b2:	460b      	mov	r3, r1
 80041b4:	4313      	orrs	r3, r2
 80041b6:	d01e      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80041b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ca:	3328      	adds	r3, #40	@ 0x28
 80041cc:	2102      	movs	r1, #2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fe54 	bl	8004e7c <RCCEx_PLL3_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041e0:	4b87      	ldr	r3, [pc, #540]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041f0:	4a83      	ldr	r2, [pc, #524]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041f2:	430b      	orrs	r3, r1
 80041f4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fe:	f002 0310 	and.w	r3, r2, #16
 8004202:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004206:	2300      	movs	r3, #0
 8004208:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800420c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004210:	460b      	mov	r3, r1
 8004212:	4313      	orrs	r3, r2
 8004214:	d01e      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800421e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004222:	d10c      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004228:	3328      	adds	r3, #40	@ 0x28
 800422a:	2102      	movs	r1, #2
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fe25 	bl	8004e7c <RCCEx_PLL3_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800423e:	4b70      	ldr	r3, [pc, #448]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004242:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800424e:	4a6c      	ldr	r2, [pc, #432]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004250:	430b      	orrs	r3, r1
 8004252:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004260:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004264:	2300      	movs	r3, #0
 8004266:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800426a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800426e:	460b      	mov	r3, r1
 8004270:	4313      	orrs	r3, r2
 8004272:	d03e      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004278:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800427c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004280:	d022      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004282:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004286:	d81b      	bhi.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004290:	d00b      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004292:	e015      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004298:	3308      	adds	r3, #8
 800429a:	2100      	movs	r1, #0
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fd3b 	bl	8004d18 <RCCEx_PLL2_Config>
 80042a2:	4603      	mov	r3, r0
 80042a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042a8:	e00f      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ae:	3328      	adds	r3, #40	@ 0x28
 80042b0:	2102      	movs	r1, #2
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fde2 	bl	8004e7c <RCCEx_PLL3_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042be:	e004      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042c6:	e000      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80042c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10b      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042d2:	4b4b      	ldr	r3, [pc, #300]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80042da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042e2:	4a47      	ldr	r2, [pc, #284]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042e4:	430b      	orrs	r3, r1
 80042e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80042e8:	e003      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80042fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004300:	2300      	movs	r3, #0
 8004302:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004304:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004308:	460b      	mov	r3, r1
 800430a:	4313      	orrs	r3, r2
 800430c:	d03b      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800430e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004316:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800431a:	d01f      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800431c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004320:	d818      	bhi.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004322:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004326:	d003      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004328:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800432c:	d007      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800432e:	e011      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004330:	4b33      	ldr	r3, [pc, #204]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004334:	4a32      	ldr	r2, [pc, #200]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800433a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800433c:	e00f      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800433e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004342:	3328      	adds	r3, #40	@ 0x28
 8004344:	2101      	movs	r1, #1
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fd98 	bl	8004e7c <RCCEx_PLL3_Config>
 800434c:	4603      	mov	r3, r0
 800434e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004352:	e004      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800435a:	e000      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800435c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800435e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10b      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004366:	4b26      	ldr	r3, [pc, #152]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800436a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004376:	4a22      	ldr	r2, [pc, #136]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004378:	430b      	orrs	r3, r1
 800437a:	6553      	str	r3, [r2, #84]	@ 0x54
 800437c:	e003      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004382:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004392:	673b      	str	r3, [r7, #112]	@ 0x70
 8004394:	2300      	movs	r3, #0
 8004396:	677b      	str	r3, [r7, #116]	@ 0x74
 8004398:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800439c:	460b      	mov	r3, r1
 800439e:	4313      	orrs	r3, r2
 80043a0:	d034      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80043a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80043ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b0:	d007      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80043b2:	e011      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b4:	4b12      	ldr	r3, [pc, #72]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b8:	4a11      	ldr	r2, [pc, #68]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043c0:	e00e      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c6:	3308      	adds	r3, #8
 80043c8:	2102      	movs	r1, #2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fca4 	bl	8004d18 <RCCEx_PLL2_Config>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043d6:	e003      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10d      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043e8:	4b05      	ldr	r3, [pc, #20]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f6:	4a02      	ldr	r2, [pc, #8]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043f8:	430b      	orrs	r3, r1
 80043fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043fc:	e006      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80043fe:	bf00      	nop
 8004400:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004404:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004408:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800440c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004418:	66bb      	str	r3, [r7, #104]	@ 0x68
 800441a:	2300      	movs	r3, #0
 800441c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800441e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004422:	460b      	mov	r3, r1
 8004424:	4313      	orrs	r3, r2
 8004426:	d00c      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442c:	3328      	adds	r3, #40	@ 0x28
 800442e:	2102      	movs	r1, #2
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fd23 	bl	8004e7c <RCCEx_PLL3_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800444e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004450:	2300      	movs	r3, #0
 8004452:	667b      	str	r3, [r7, #100]	@ 0x64
 8004454:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004458:	460b      	mov	r3, r1
 800445a:	4313      	orrs	r3, r2
 800445c:	d038      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800445e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004466:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800446a:	d018      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800446c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004470:	d811      	bhi.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004472:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004476:	d014      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800447c:	d80b      	bhi.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800447e:	2b00      	cmp	r3, #0
 8004480:	d011      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004486:	d106      	bne.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004488:	4bc3      	ldr	r3, [pc, #780]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	4ac2      	ldr	r2, [pc, #776]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800448e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004492:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004494:	e008      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800449c:	e004      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800449e:	bf00      	nop
 80044a0:	e002      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044a2:	bf00      	nop
 80044a4:	e000      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10b      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044b0:	4bb9      	ldr	r3, [pc, #740]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044c0:	4ab5      	ldr	r2, [pc, #724]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044c2:	430b      	orrs	r3, r1
 80044c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80044c6:	e003      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80044dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044de:	2300      	movs	r3, #0
 80044e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80044e6:	460b      	mov	r3, r1
 80044e8:	4313      	orrs	r3, r2
 80044ea:	d009      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044ec:	4baa      	ldr	r3, [pc, #680]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80044f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044fa:	4aa7      	ldr	r2, [pc, #668]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044fc:	430b      	orrs	r3, r1
 80044fe:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800450c:	653b      	str	r3, [r7, #80]	@ 0x50
 800450e:	2300      	movs	r3, #0
 8004510:	657b      	str	r3, [r7, #84]	@ 0x54
 8004512:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004516:	460b      	mov	r3, r1
 8004518:	4313      	orrs	r3, r2
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800451c:	4b9e      	ldr	r3, [pc, #632]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004528:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800452c:	4a9a      	ldr	r2, [pc, #616]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800452e:	430b      	orrs	r3, r1
 8004530:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800453e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004540:	2300      	movs	r3, #0
 8004542:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004544:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004548:	460b      	mov	r3, r1
 800454a:	4313      	orrs	r3, r2
 800454c:	d009      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800454e:	4b92      	ldr	r3, [pc, #584]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004552:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800455c:	4a8e      	ldr	r2, [pc, #568]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800455e:	430b      	orrs	r3, r1
 8004560:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800456e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004570:	2300      	movs	r3, #0
 8004572:	647b      	str	r3, [r7, #68]	@ 0x44
 8004574:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004578:	460b      	mov	r3, r1
 800457a:	4313      	orrs	r3, r2
 800457c:	d00e      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800457e:	4b86      	ldr	r3, [pc, #536]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	4a85      	ldr	r2, [pc, #532]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004584:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004588:	6113      	str	r3, [r2, #16]
 800458a:	4b83      	ldr	r3, [pc, #524]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800458c:	6919      	ldr	r1, [r3, #16]
 800458e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004592:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004596:	4a80      	ldr	r2, [pc, #512]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004598:	430b      	orrs	r3, r1
 800459a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800459c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80045a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045aa:	2300      	movs	r3, #0
 80045ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045ae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80045b2:	460b      	mov	r3, r1
 80045b4:	4313      	orrs	r3, r2
 80045b6:	d009      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045b8:	4b77      	ldr	r3, [pc, #476]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045bc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80045c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c6:	4a74      	ldr	r2, [pc, #464]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045c8:	430b      	orrs	r3, r1
 80045ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80045d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80045da:	2300      	movs	r3, #0
 80045dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80045de:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80045e2:	460b      	mov	r3, r1
 80045e4:	4313      	orrs	r3, r2
 80045e6:	d00a      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045e8:	4b6b      	ldr	r3, [pc, #428]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ec:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80045f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045f8:	4a67      	ldr	r2, [pc, #412]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045fa:	430b      	orrs	r3, r1
 80045fc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80045fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004606:	2100      	movs	r1, #0
 8004608:	62b9      	str	r1, [r7, #40]	@ 0x28
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004610:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004614:	460b      	mov	r3, r1
 8004616:	4313      	orrs	r3, r2
 8004618:	d011      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800461a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461e:	3308      	adds	r3, #8
 8004620:	2100      	movs	r1, #0
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fb78 	bl	8004d18 <RCCEx_PLL2_Config>
 8004628:	4603      	mov	r3, r0
 800462a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800462e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800463a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800463e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	2100      	movs	r1, #0
 8004648:	6239      	str	r1, [r7, #32]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004650:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004654:	460b      	mov	r3, r1
 8004656:	4313      	orrs	r3, r2
 8004658:	d011      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800465a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465e:	3308      	adds	r3, #8
 8004660:	2101      	movs	r1, #1
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fb58 	bl	8004d18 <RCCEx_PLL2_Config>
 8004668:	4603      	mov	r3, r0
 800466a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800466e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800467a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800467e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	2100      	movs	r1, #0
 8004688:	61b9      	str	r1, [r7, #24]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	61fb      	str	r3, [r7, #28]
 8004690:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004694:	460b      	mov	r3, r1
 8004696:	4313      	orrs	r3, r2
 8004698:	d011      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469e:	3308      	adds	r3, #8
 80046a0:	2102      	movs	r1, #2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fb38 	bl	8004d18 <RCCEx_PLL2_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80046be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	2100      	movs	r1, #0
 80046c8:	6139      	str	r1, [r7, #16]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046d4:	460b      	mov	r3, r1
 80046d6:	4313      	orrs	r3, r2
 80046d8:	d011      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046de:	3328      	adds	r3, #40	@ 0x28
 80046e0:	2100      	movs	r1, #0
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fbca 	bl	8004e7c <RCCEx_PLL3_Config>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80046ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	2100      	movs	r1, #0
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004714:	460b      	mov	r3, r1
 8004716:	4313      	orrs	r3, r2
 8004718:	d011      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471e:	3328      	adds	r3, #40	@ 0x28
 8004720:	2101      	movs	r1, #1
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fbaa 	bl	8004e7c <RCCEx_PLL3_Config>
 8004728:	4603      	mov	r3, r0
 800472a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800472e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800473a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800473e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004746:	2100      	movs	r1, #0
 8004748:	6039      	str	r1, [r7, #0]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	607b      	str	r3, [r7, #4]
 8004750:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004754:	460b      	mov	r3, r1
 8004756:	4313      	orrs	r3, r2
 8004758:	d011      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800475a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475e:	3328      	adds	r3, #40	@ 0x28
 8004760:	2102      	movs	r1, #2
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fb8a 	bl	8004e7c <RCCEx_PLL3_Config>
 8004768:	4603      	mov	r3, r0
 800476a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800476e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800477a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800477e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	e000      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
}
 800478c:	4618      	mov	r0, r3
 800478e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004792:	46bd      	mov	sp, r7
 8004794:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004798:	58024400 	.word	0x58024400

0800479c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80047a0:	f7fe fd96 	bl	80032d0 <HAL_RCC_GetHCLKFreq>
 80047a4:	4602      	mov	r2, r0
 80047a6:	4b06      	ldr	r3, [pc, #24]	@ (80047c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	091b      	lsrs	r3, r3, #4
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	4904      	ldr	r1, [pc, #16]	@ (80047c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80047b2:	5ccb      	ldrb	r3, [r1, r3]
 80047b4:	f003 031f 	and.w	r3, r3, #31
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80047bc:	4618      	mov	r0, r3
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	58024400 	.word	0x58024400
 80047c4:	08006b30 	.word	0x08006b30

080047c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b089      	sub	sp, #36	@ 0x24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047d0:	4ba1      	ldr	r3, [pc, #644]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80047da:	4b9f      	ldr	r3, [pc, #636]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047de:	0b1b      	lsrs	r3, r3, #12
 80047e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047e6:	4b9c      	ldr	r3, [pc, #624]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ea:	091b      	lsrs	r3, r3, #4
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80047f2:	4b99      	ldr	r3, [pc, #612]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f6:	08db      	lsrs	r3, r3, #3
 80047f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	fb02 f303 	mul.w	r3, r2, r3
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8111 	beq.w	8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b02      	cmp	r3, #2
 800481a:	f000 8083 	beq.w	8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	2b02      	cmp	r3, #2
 8004822:	f200 80a1 	bhi.w	8004968 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d056      	beq.n	80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004832:	e099      	b.n	8004968 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004834:	4b88      	ldr	r3, [pc, #544]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d02d      	beq.n	800489c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004840:	4b85      	ldr	r3, [pc, #532]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	08db      	lsrs	r3, r3, #3
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	4a84      	ldr	r2, [pc, #528]	@ (8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800484c:	fa22 f303 	lsr.w	r3, r2, r3
 8004850:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	ee07 3a90 	vmov	s15, r3
 8004858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486a:	4b7b      	ldr	r3, [pc, #492]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800486c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487a:	ed97 6a03 	vldr	s12, [r7, #12]
 800487e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800488e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004896:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800489a:	e087      	b.n	80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80048aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048be:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048de:	e065      	b.n	80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f2:	4b59      	ldr	r3, [pc, #356]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004902:	ed97 6a03 	vldr	s12, [r7, #12]
 8004906:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800490a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004912:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004922:	e043      	b.n	80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004936:	4b48      	ldr	r3, [pc, #288]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004946:	ed97 6a03 	vldr	s12, [r7, #12]
 800494a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800494e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800495a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800495e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004966:	e021      	b.n	80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004972:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497a:	4b37      	ldr	r3, [pc, #220]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800497c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498a:	ed97 6a03 	vldr	s12, [r7, #12]
 800498e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800499a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800499e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80049ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b0:	0a5b      	lsrs	r3, r3, #9
 80049b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d2:	ee17 2a90 	vmov	r2, s15
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80049da:	4b1f      	ldr	r3, [pc, #124]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049de:	0c1b      	lsrs	r3, r3, #16
 80049e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049e4:	ee07 3a90 	vmov	s15, r3
 80049e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80049f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a00:	ee17 2a90 	vmov	r2, s15
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a08:	4b13      	ldr	r3, [pc, #76]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0c:	0e1b      	lsrs	r3, r3, #24
 8004a0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a22:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a2e:	ee17 2a90 	vmov	r2, s15
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a36:	e008      	b.n	8004a4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	609a      	str	r2, [r3, #8]
}
 8004a4a:	bf00      	nop
 8004a4c:	3724      	adds	r7, #36	@ 0x24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	58024400 	.word	0x58024400
 8004a5c:	03d09000 	.word	0x03d09000
 8004a60:	46000000 	.word	0x46000000
 8004a64:	4c742400 	.word	0x4c742400
 8004a68:	4a742400 	.word	0x4a742400
 8004a6c:	4af42400 	.word	0x4af42400

08004a70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b089      	sub	sp, #36	@ 0x24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a78:	4ba1      	ldr	r3, [pc, #644]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7c:	f003 0303 	and.w	r3, r3, #3
 8004a80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a82:	4b9f      	ldr	r3, [pc, #636]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a86:	0d1b      	lsrs	r3, r3, #20
 8004a88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a8e:	4b9c      	ldr	r3, [pc, #624]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a92:	0a1b      	lsrs	r3, r3, #8
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a9a:	4b99      	ldr	r3, [pc, #612]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9e:	08db      	lsrs	r3, r3, #3
 8004aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 8111 	beq.w	8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	f000 8083 	beq.w	8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	f200 80a1 	bhi.w	8004c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d056      	beq.n	8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004ada:	e099      	b.n	8004c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004adc:	4b88      	ldr	r3, [pc, #544]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d02d      	beq.n	8004b44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ae8:	4b85      	ldr	r3, [pc, #532]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	08db      	lsrs	r3, r3, #3
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	4a84      	ldr	r2, [pc, #528]	@ (8004d04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
 8004af8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	ee07 3a90 	vmov	s15, r3
 8004b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b12:	4b7b      	ldr	r3, [pc, #492]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b26:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b42:	e087      	b.n	8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b56:	4b6a      	ldr	r3, [pc, #424]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b6a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b86:	e065      	b.n	8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b92:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b9a:	4b59      	ldr	r3, [pc, #356]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bca:	e043      	b.n	8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bde:	4b48      	ldr	r3, [pc, #288]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bf2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c0e:	e021      	b.n	8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c22:	4b37      	ldr	r3, [pc, #220]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c36:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c54:	4b2a      	ldr	r3, [pc, #168]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c58:	0a5b      	lsrs	r3, r3, #9
 8004c5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c7a:	ee17 2a90 	vmov	r2, s15
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c82:	4b1f      	ldr	r3, [pc, #124]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c86:	0c1b      	lsrs	r3, r3, #16
 8004c88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c8c:	ee07 3a90 	vmov	s15, r3
 8004c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ca8:	ee17 2a90 	vmov	r2, s15
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004cb0:	4b13      	ldr	r3, [pc, #76]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb4:	0e1b      	lsrs	r3, r3, #24
 8004cb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cca:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cd6:	ee17 2a90 	vmov	r2, s15
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004cde:	e008      	b.n	8004cf2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	609a      	str	r2, [r3, #8]
}
 8004cf2:	bf00      	nop
 8004cf4:	3724      	adds	r7, #36	@ 0x24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	58024400 	.word	0x58024400
 8004d04:	03d09000 	.word	0x03d09000
 8004d08:	46000000 	.word	0x46000000
 8004d0c:	4c742400 	.word	0x4c742400
 8004d10:	4a742400 	.word	0x4a742400
 8004d14:	4af42400 	.word	0x4af42400

08004d18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d26:	4b53      	ldr	r3, [pc, #332]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d101      	bne.n	8004d36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e099      	b.n	8004e6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d36:	4b4f      	ldr	r3, [pc, #316]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a4e      	ldr	r2, [pc, #312]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004d3c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d42:	f7fc fa63 	bl	800120c <HAL_GetTick>
 8004d46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d48:	e008      	b.n	8004d5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d4a:	f7fc fa5f 	bl	800120c <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e086      	b.n	8004e6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d5c:	4b45      	ldr	r3, [pc, #276]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1f0      	bne.n	8004d4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d68:	4b42      	ldr	r3, [pc, #264]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	031b      	lsls	r3, r3, #12
 8004d76:	493f      	ldr	r1, [pc, #252]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	3b01      	subs	r3, #1
 8004d82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	025b      	lsls	r3, r3, #9
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	041b      	lsls	r3, r3, #16
 8004d9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	061b      	lsls	r3, r3, #24
 8004da8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004dac:	4931      	ldr	r1, [pc, #196]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004db2:	4b30      	ldr	r3, [pc, #192]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	492d      	ldr	r1, [pc, #180]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc8:	f023 0220 	bic.w	r2, r3, #32
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	4928      	ldr	r1, [pc, #160]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004dd6:	4b27      	ldr	r3, [pc, #156]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dda:	4a26      	ldr	r2, [pc, #152]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004ddc:	f023 0310 	bic.w	r3, r3, #16
 8004de0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004de2:	4b24      	ldr	r3, [pc, #144]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004de4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004de6:	4b24      	ldr	r3, [pc, #144]	@ (8004e78 <RCCEx_PLL2_Config+0x160>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	69d2      	ldr	r2, [r2, #28]
 8004dee:	00d2      	lsls	r2, r2, #3
 8004df0:	4920      	ldr	r1, [pc, #128]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004df6:	4b1f      	ldr	r3, [pc, #124]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004dfc:	f043 0310 	orr.w	r3, r3, #16
 8004e00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d106      	bne.n	8004e16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e08:	4b1a      	ldr	r3, [pc, #104]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0c:	4a19      	ldr	r2, [pc, #100]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e14:	e00f      	b.n	8004e36 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d106      	bne.n	8004e2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e1c:	4b15      	ldr	r3, [pc, #84]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e20:	4a14      	ldr	r2, [pc, #80]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e28:	e005      	b.n	8004e36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e2a:	4b12      	ldr	r3, [pc, #72]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	4a11      	ldr	r2, [pc, #68]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e36:	4b0f      	ldr	r3, [pc, #60]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e42:	f7fc f9e3 	bl	800120c <HAL_GetTick>
 8004e46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e48:	e008      	b.n	8004e5c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e4a:	f7fc f9df 	bl	800120c <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e006      	b.n	8004e6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e5c:	4b05      	ldr	r3, [pc, #20]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	58024400 	.word	0x58024400
 8004e78:	ffff0007 	.word	0xffff0007

08004e7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e8a:	4b53      	ldr	r3, [pc, #332]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d101      	bne.n	8004e9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e099      	b.n	8004fce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e9a:	4b4f      	ldr	r3, [pc, #316]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a4e      	ldr	r2, [pc, #312]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004ea0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea6:	f7fc f9b1 	bl	800120c <HAL_GetTick>
 8004eaa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004eac:	e008      	b.n	8004ec0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004eae:	f7fc f9ad 	bl	800120c <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e086      	b.n	8004fce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ec0:	4b45      	ldr	r3, [pc, #276]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f0      	bne.n	8004eae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ecc:	4b42      	ldr	r3, [pc, #264]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	051b      	lsls	r3, r3, #20
 8004eda:	493f      	ldr	r1, [pc, #252]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	025b      	lsls	r3, r3, #9
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	041b      	lsls	r3, r3, #16
 8004efe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	061b      	lsls	r3, r3, #24
 8004f0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f10:	4931      	ldr	r1, [pc, #196]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f16:	4b30      	ldr	r3, [pc, #192]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	492d      	ldr	r1, [pc, #180]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f28:	4b2b      	ldr	r3, [pc, #172]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	4928      	ldr	r1, [pc, #160]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f3a:	4b27      	ldr	r3, [pc, #156]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3e:	4a26      	ldr	r2, [pc, #152]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f46:	4b24      	ldr	r3, [pc, #144]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f4a:	4b24      	ldr	r3, [pc, #144]	@ (8004fdc <RCCEx_PLL3_Config+0x160>)
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	69d2      	ldr	r2, [r2, #28]
 8004f52:	00d2      	lsls	r2, r2, #3
 8004f54:	4920      	ldr	r1, [pc, #128]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d106      	bne.n	8004f7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f70:	4a19      	ldr	r2, [pc, #100]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f78:	e00f      	b.n	8004f9a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d106      	bne.n	8004f8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f80:	4b15      	ldr	r3, [pc, #84]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f84:	4a14      	ldr	r2, [pc, #80]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f8c:	e005      	b.n	8004f9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f8e:	4b12      	ldr	r3, [pc, #72]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f92:	4a11      	ldr	r2, [pc, #68]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa6:	f7fc f931 	bl	800120c <HAL_GetTick>
 8004faa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fac:	e008      	b.n	8004fc0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fae:	f7fc f92d 	bl	800120c <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e006      	b.n	8004fce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fc0:	4b05      	ldr	r3, [pc, #20]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f0      	beq.n	8004fae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	58024400 	.word	0x58024400
 8004fdc:	ffff0007 	.word	0xffff0007

08004fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e049      	b.n	8005086 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fb fe54 	bl	8000cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3304      	adds	r3, #4
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f000 f836 	bl	8005090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a46      	ldr	r2, [pc, #280]	@ (80051bc <TIM_Base_SetConfig+0x12c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d013      	beq.n	80050d0 <TIM_Base_SetConfig+0x40>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ae:	d00f      	beq.n	80050d0 <TIM_Base_SetConfig+0x40>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a43      	ldr	r2, [pc, #268]	@ (80051c0 <TIM_Base_SetConfig+0x130>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00b      	beq.n	80050d0 <TIM_Base_SetConfig+0x40>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a42      	ldr	r2, [pc, #264]	@ (80051c4 <TIM_Base_SetConfig+0x134>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d007      	beq.n	80050d0 <TIM_Base_SetConfig+0x40>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a41      	ldr	r2, [pc, #260]	@ (80051c8 <TIM_Base_SetConfig+0x138>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d003      	beq.n	80050d0 <TIM_Base_SetConfig+0x40>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a40      	ldr	r2, [pc, #256]	@ (80051cc <TIM_Base_SetConfig+0x13c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d108      	bne.n	80050e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a35      	ldr	r2, [pc, #212]	@ (80051bc <TIM_Base_SetConfig+0x12c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d01f      	beq.n	800512a <TIM_Base_SetConfig+0x9a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050f0:	d01b      	beq.n	800512a <TIM_Base_SetConfig+0x9a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a32      	ldr	r2, [pc, #200]	@ (80051c0 <TIM_Base_SetConfig+0x130>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d017      	beq.n	800512a <TIM_Base_SetConfig+0x9a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a31      	ldr	r2, [pc, #196]	@ (80051c4 <TIM_Base_SetConfig+0x134>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d013      	beq.n	800512a <TIM_Base_SetConfig+0x9a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a30      	ldr	r2, [pc, #192]	@ (80051c8 <TIM_Base_SetConfig+0x138>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00f      	beq.n	800512a <TIM_Base_SetConfig+0x9a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a2f      	ldr	r2, [pc, #188]	@ (80051cc <TIM_Base_SetConfig+0x13c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00b      	beq.n	800512a <TIM_Base_SetConfig+0x9a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a2e      	ldr	r2, [pc, #184]	@ (80051d0 <TIM_Base_SetConfig+0x140>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d007      	beq.n	800512a <TIM_Base_SetConfig+0x9a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a2d      	ldr	r2, [pc, #180]	@ (80051d4 <TIM_Base_SetConfig+0x144>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d003      	beq.n	800512a <TIM_Base_SetConfig+0x9a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a2c      	ldr	r2, [pc, #176]	@ (80051d8 <TIM_Base_SetConfig+0x148>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d108      	bne.n	800513c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a16      	ldr	r2, [pc, #88]	@ (80051bc <TIM_Base_SetConfig+0x12c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d00f      	beq.n	8005188 <TIM_Base_SetConfig+0xf8>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a18      	ldr	r2, [pc, #96]	@ (80051cc <TIM_Base_SetConfig+0x13c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00b      	beq.n	8005188 <TIM_Base_SetConfig+0xf8>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a17      	ldr	r2, [pc, #92]	@ (80051d0 <TIM_Base_SetConfig+0x140>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d007      	beq.n	8005188 <TIM_Base_SetConfig+0xf8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a16      	ldr	r2, [pc, #88]	@ (80051d4 <TIM_Base_SetConfig+0x144>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d003      	beq.n	8005188 <TIM_Base_SetConfig+0xf8>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a15      	ldr	r2, [pc, #84]	@ (80051d8 <TIM_Base_SetConfig+0x148>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d103      	bne.n	8005190 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d105      	bne.n	80051ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f023 0201 	bic.w	r2, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	611a      	str	r2, [r3, #16]
  }
}
 80051ae:	bf00      	nop
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40010000 	.word	0x40010000
 80051c0:	40000400 	.word	0x40000400
 80051c4:	40000800 	.word	0x40000800
 80051c8:	40000c00 	.word	0x40000c00
 80051cc:	40010400 	.word	0x40010400
 80051d0:	40014000 	.word	0x40014000
 80051d4:	40014400 	.word	0x40014400
 80051d8:	40014800 	.word	0x40014800

080051dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d101      	bne.n	80051f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051f0:	2302      	movs	r3, #2
 80051f2:	e06d      	b.n	80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a30      	ldr	r2, [pc, #192]	@ (80052dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d004      	beq.n	8005228 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a2f      	ldr	r2, [pc, #188]	@ (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d108      	bne.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800522e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005240:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a20      	ldr	r2, [pc, #128]	@ (80052dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d022      	beq.n	80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005266:	d01d      	beq.n	80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a1d      	ldr	r2, [pc, #116]	@ (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d018      	beq.n	80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1c      	ldr	r2, [pc, #112]	@ (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d013      	beq.n	80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a1a      	ldr	r2, [pc, #104]	@ (80052ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00e      	beq.n	80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a15      	ldr	r2, [pc, #84]	@ (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d009      	beq.n	80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a16      	ldr	r2, [pc, #88]	@ (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d004      	beq.n	80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a15      	ldr	r2, [pc, #84]	@ (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d10c      	bne.n	80052be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40010400 	.word	0x40010400
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40000800 	.word	0x40000800
 80052ec:	40000c00 	.word	0x40000c00
 80052f0:	40001800 	.word	0x40001800
 80052f4:	40014000 	.word	0x40014000

080052f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e042      	b.n	8005390 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005310:	2b00      	cmp	r3, #0
 8005312:	d106      	bne.n	8005322 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7fb fcf1 	bl	8000d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2224      	movs	r2, #36	@ 0x24
 8005326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0201 	bic.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fd90 	bl	8005e68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f825 	bl	8005398 <UART_SetConfig>
 800534e:	4603      	mov	r3, r0
 8005350:	2b01      	cmp	r3, #1
 8005352:	d101      	bne.n	8005358 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e01b      	b.n	8005390 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005366:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689a      	ldr	r2, [r3, #8]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005376:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0201 	orr.w	r2, r2, #1
 8005386:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fe0f 	bl	8005fac <UART_CheckIdleState>
 800538e:	4603      	mov	r3, r0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800539c:	b092      	sub	sp, #72	@ 0x48
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	431a      	orrs	r2, r3
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	4313      	orrs	r3, r2
 80053be:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	4bbe      	ldr	r3, [pc, #760]	@ (80056c0 <UART_SetConfig+0x328>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	6812      	ldr	r2, [r2, #0]
 80053ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80053d0:	430b      	orrs	r3, r1
 80053d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4ab3      	ldr	r2, [pc, #716]	@ (80056c4 <UART_SetConfig+0x32c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d004      	beq.n	8005404 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005400:	4313      	orrs	r3, r2
 8005402:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689a      	ldr	r2, [r3, #8]
 800540a:	4baf      	ldr	r3, [pc, #700]	@ (80056c8 <UART_SetConfig+0x330>)
 800540c:	4013      	ands	r3, r2
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	6812      	ldr	r2, [r2, #0]
 8005412:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005414:	430b      	orrs	r3, r1
 8005416:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541e:	f023 010f 	bic.w	r1, r3, #15
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4aa6      	ldr	r2, [pc, #664]	@ (80056cc <UART_SetConfig+0x334>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d177      	bne.n	8005528 <UART_SetConfig+0x190>
 8005438:	4ba5      	ldr	r3, [pc, #660]	@ (80056d0 <UART_SetConfig+0x338>)
 800543a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800543c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005440:	2b28      	cmp	r3, #40	@ 0x28
 8005442:	d86d      	bhi.n	8005520 <UART_SetConfig+0x188>
 8005444:	a201      	add	r2, pc, #4	@ (adr r2, 800544c <UART_SetConfig+0xb4>)
 8005446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544a:	bf00      	nop
 800544c:	080054f1 	.word	0x080054f1
 8005450:	08005521 	.word	0x08005521
 8005454:	08005521 	.word	0x08005521
 8005458:	08005521 	.word	0x08005521
 800545c:	08005521 	.word	0x08005521
 8005460:	08005521 	.word	0x08005521
 8005464:	08005521 	.word	0x08005521
 8005468:	08005521 	.word	0x08005521
 800546c:	080054f9 	.word	0x080054f9
 8005470:	08005521 	.word	0x08005521
 8005474:	08005521 	.word	0x08005521
 8005478:	08005521 	.word	0x08005521
 800547c:	08005521 	.word	0x08005521
 8005480:	08005521 	.word	0x08005521
 8005484:	08005521 	.word	0x08005521
 8005488:	08005521 	.word	0x08005521
 800548c:	08005501 	.word	0x08005501
 8005490:	08005521 	.word	0x08005521
 8005494:	08005521 	.word	0x08005521
 8005498:	08005521 	.word	0x08005521
 800549c:	08005521 	.word	0x08005521
 80054a0:	08005521 	.word	0x08005521
 80054a4:	08005521 	.word	0x08005521
 80054a8:	08005521 	.word	0x08005521
 80054ac:	08005509 	.word	0x08005509
 80054b0:	08005521 	.word	0x08005521
 80054b4:	08005521 	.word	0x08005521
 80054b8:	08005521 	.word	0x08005521
 80054bc:	08005521 	.word	0x08005521
 80054c0:	08005521 	.word	0x08005521
 80054c4:	08005521 	.word	0x08005521
 80054c8:	08005521 	.word	0x08005521
 80054cc:	08005511 	.word	0x08005511
 80054d0:	08005521 	.word	0x08005521
 80054d4:	08005521 	.word	0x08005521
 80054d8:	08005521 	.word	0x08005521
 80054dc:	08005521 	.word	0x08005521
 80054e0:	08005521 	.word	0x08005521
 80054e4:	08005521 	.word	0x08005521
 80054e8:	08005521 	.word	0x08005521
 80054ec:	08005519 	.word	0x08005519
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054f6:	e222      	b.n	800593e <UART_SetConfig+0x5a6>
 80054f8:	2304      	movs	r3, #4
 80054fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054fe:	e21e      	b.n	800593e <UART_SetConfig+0x5a6>
 8005500:	2308      	movs	r3, #8
 8005502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005506:	e21a      	b.n	800593e <UART_SetConfig+0x5a6>
 8005508:	2310      	movs	r3, #16
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800550e:	e216      	b.n	800593e <UART_SetConfig+0x5a6>
 8005510:	2320      	movs	r3, #32
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005516:	e212      	b.n	800593e <UART_SetConfig+0x5a6>
 8005518:	2340      	movs	r3, #64	@ 0x40
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800551e:	e20e      	b.n	800593e <UART_SetConfig+0x5a6>
 8005520:	2380      	movs	r3, #128	@ 0x80
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005526:	e20a      	b.n	800593e <UART_SetConfig+0x5a6>
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a69      	ldr	r2, [pc, #420]	@ (80056d4 <UART_SetConfig+0x33c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d130      	bne.n	8005594 <UART_SetConfig+0x1fc>
 8005532:	4b67      	ldr	r3, [pc, #412]	@ (80056d0 <UART_SetConfig+0x338>)
 8005534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	2b05      	cmp	r3, #5
 800553c:	d826      	bhi.n	800558c <UART_SetConfig+0x1f4>
 800553e:	a201      	add	r2, pc, #4	@ (adr r2, 8005544 <UART_SetConfig+0x1ac>)
 8005540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005544:	0800555d 	.word	0x0800555d
 8005548:	08005565 	.word	0x08005565
 800554c:	0800556d 	.word	0x0800556d
 8005550:	08005575 	.word	0x08005575
 8005554:	0800557d 	.word	0x0800557d
 8005558:	08005585 	.word	0x08005585
 800555c:	2300      	movs	r3, #0
 800555e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005562:	e1ec      	b.n	800593e <UART_SetConfig+0x5a6>
 8005564:	2304      	movs	r3, #4
 8005566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800556a:	e1e8      	b.n	800593e <UART_SetConfig+0x5a6>
 800556c:	2308      	movs	r3, #8
 800556e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005572:	e1e4      	b.n	800593e <UART_SetConfig+0x5a6>
 8005574:	2310      	movs	r3, #16
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800557a:	e1e0      	b.n	800593e <UART_SetConfig+0x5a6>
 800557c:	2320      	movs	r3, #32
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005582:	e1dc      	b.n	800593e <UART_SetConfig+0x5a6>
 8005584:	2340      	movs	r3, #64	@ 0x40
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800558a:	e1d8      	b.n	800593e <UART_SetConfig+0x5a6>
 800558c:	2380      	movs	r3, #128	@ 0x80
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005592:	e1d4      	b.n	800593e <UART_SetConfig+0x5a6>
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a4f      	ldr	r2, [pc, #316]	@ (80056d8 <UART_SetConfig+0x340>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d130      	bne.n	8005600 <UART_SetConfig+0x268>
 800559e:	4b4c      	ldr	r3, [pc, #304]	@ (80056d0 <UART_SetConfig+0x338>)
 80055a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	2b05      	cmp	r3, #5
 80055a8:	d826      	bhi.n	80055f8 <UART_SetConfig+0x260>
 80055aa:	a201      	add	r2, pc, #4	@ (adr r2, 80055b0 <UART_SetConfig+0x218>)
 80055ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b0:	080055c9 	.word	0x080055c9
 80055b4:	080055d1 	.word	0x080055d1
 80055b8:	080055d9 	.word	0x080055d9
 80055bc:	080055e1 	.word	0x080055e1
 80055c0:	080055e9 	.word	0x080055e9
 80055c4:	080055f1 	.word	0x080055f1
 80055c8:	2300      	movs	r3, #0
 80055ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ce:	e1b6      	b.n	800593e <UART_SetConfig+0x5a6>
 80055d0:	2304      	movs	r3, #4
 80055d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055d6:	e1b2      	b.n	800593e <UART_SetConfig+0x5a6>
 80055d8:	2308      	movs	r3, #8
 80055da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055de:	e1ae      	b.n	800593e <UART_SetConfig+0x5a6>
 80055e0:	2310      	movs	r3, #16
 80055e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055e6:	e1aa      	b.n	800593e <UART_SetConfig+0x5a6>
 80055e8:	2320      	movs	r3, #32
 80055ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ee:	e1a6      	b.n	800593e <UART_SetConfig+0x5a6>
 80055f0:	2340      	movs	r3, #64	@ 0x40
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055f6:	e1a2      	b.n	800593e <UART_SetConfig+0x5a6>
 80055f8:	2380      	movs	r3, #128	@ 0x80
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fe:	e19e      	b.n	800593e <UART_SetConfig+0x5a6>
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a35      	ldr	r2, [pc, #212]	@ (80056dc <UART_SetConfig+0x344>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d130      	bne.n	800566c <UART_SetConfig+0x2d4>
 800560a:	4b31      	ldr	r3, [pc, #196]	@ (80056d0 <UART_SetConfig+0x338>)
 800560c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	2b05      	cmp	r3, #5
 8005614:	d826      	bhi.n	8005664 <UART_SetConfig+0x2cc>
 8005616:	a201      	add	r2, pc, #4	@ (adr r2, 800561c <UART_SetConfig+0x284>)
 8005618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561c:	08005635 	.word	0x08005635
 8005620:	0800563d 	.word	0x0800563d
 8005624:	08005645 	.word	0x08005645
 8005628:	0800564d 	.word	0x0800564d
 800562c:	08005655 	.word	0x08005655
 8005630:	0800565d 	.word	0x0800565d
 8005634:	2300      	movs	r3, #0
 8005636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800563a:	e180      	b.n	800593e <UART_SetConfig+0x5a6>
 800563c:	2304      	movs	r3, #4
 800563e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005642:	e17c      	b.n	800593e <UART_SetConfig+0x5a6>
 8005644:	2308      	movs	r3, #8
 8005646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564a:	e178      	b.n	800593e <UART_SetConfig+0x5a6>
 800564c:	2310      	movs	r3, #16
 800564e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005652:	e174      	b.n	800593e <UART_SetConfig+0x5a6>
 8005654:	2320      	movs	r3, #32
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565a:	e170      	b.n	800593e <UART_SetConfig+0x5a6>
 800565c:	2340      	movs	r3, #64	@ 0x40
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005662:	e16c      	b.n	800593e <UART_SetConfig+0x5a6>
 8005664:	2380      	movs	r3, #128	@ 0x80
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566a:	e168      	b.n	800593e <UART_SetConfig+0x5a6>
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a1b      	ldr	r2, [pc, #108]	@ (80056e0 <UART_SetConfig+0x348>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d142      	bne.n	80056fc <UART_SetConfig+0x364>
 8005676:	4b16      	ldr	r3, [pc, #88]	@ (80056d0 <UART_SetConfig+0x338>)
 8005678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	2b05      	cmp	r3, #5
 8005680:	d838      	bhi.n	80056f4 <UART_SetConfig+0x35c>
 8005682:	a201      	add	r2, pc, #4	@ (adr r2, 8005688 <UART_SetConfig+0x2f0>)
 8005684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005688:	080056a1 	.word	0x080056a1
 800568c:	080056a9 	.word	0x080056a9
 8005690:	080056b1 	.word	0x080056b1
 8005694:	080056b9 	.word	0x080056b9
 8005698:	080056e5 	.word	0x080056e5
 800569c:	080056ed 	.word	0x080056ed
 80056a0:	2300      	movs	r3, #0
 80056a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056a6:	e14a      	b.n	800593e <UART_SetConfig+0x5a6>
 80056a8:	2304      	movs	r3, #4
 80056aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ae:	e146      	b.n	800593e <UART_SetConfig+0x5a6>
 80056b0:	2308      	movs	r3, #8
 80056b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056b6:	e142      	b.n	800593e <UART_SetConfig+0x5a6>
 80056b8:	2310      	movs	r3, #16
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056be:	e13e      	b.n	800593e <UART_SetConfig+0x5a6>
 80056c0:	cfff69f3 	.word	0xcfff69f3
 80056c4:	58000c00 	.word	0x58000c00
 80056c8:	11fff4ff 	.word	0x11fff4ff
 80056cc:	40011000 	.word	0x40011000
 80056d0:	58024400 	.word	0x58024400
 80056d4:	40004400 	.word	0x40004400
 80056d8:	40004800 	.word	0x40004800
 80056dc:	40004c00 	.word	0x40004c00
 80056e0:	40005000 	.word	0x40005000
 80056e4:	2320      	movs	r3, #32
 80056e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ea:	e128      	b.n	800593e <UART_SetConfig+0x5a6>
 80056ec:	2340      	movs	r3, #64	@ 0x40
 80056ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056f2:	e124      	b.n	800593e <UART_SetConfig+0x5a6>
 80056f4:	2380      	movs	r3, #128	@ 0x80
 80056f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056fa:	e120      	b.n	800593e <UART_SetConfig+0x5a6>
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4acb      	ldr	r2, [pc, #812]	@ (8005a30 <UART_SetConfig+0x698>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d176      	bne.n	80057f4 <UART_SetConfig+0x45c>
 8005706:	4bcb      	ldr	r3, [pc, #812]	@ (8005a34 <UART_SetConfig+0x69c>)
 8005708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800570a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800570e:	2b28      	cmp	r3, #40	@ 0x28
 8005710:	d86c      	bhi.n	80057ec <UART_SetConfig+0x454>
 8005712:	a201      	add	r2, pc, #4	@ (adr r2, 8005718 <UART_SetConfig+0x380>)
 8005714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005718:	080057bd 	.word	0x080057bd
 800571c:	080057ed 	.word	0x080057ed
 8005720:	080057ed 	.word	0x080057ed
 8005724:	080057ed 	.word	0x080057ed
 8005728:	080057ed 	.word	0x080057ed
 800572c:	080057ed 	.word	0x080057ed
 8005730:	080057ed 	.word	0x080057ed
 8005734:	080057ed 	.word	0x080057ed
 8005738:	080057c5 	.word	0x080057c5
 800573c:	080057ed 	.word	0x080057ed
 8005740:	080057ed 	.word	0x080057ed
 8005744:	080057ed 	.word	0x080057ed
 8005748:	080057ed 	.word	0x080057ed
 800574c:	080057ed 	.word	0x080057ed
 8005750:	080057ed 	.word	0x080057ed
 8005754:	080057ed 	.word	0x080057ed
 8005758:	080057cd 	.word	0x080057cd
 800575c:	080057ed 	.word	0x080057ed
 8005760:	080057ed 	.word	0x080057ed
 8005764:	080057ed 	.word	0x080057ed
 8005768:	080057ed 	.word	0x080057ed
 800576c:	080057ed 	.word	0x080057ed
 8005770:	080057ed 	.word	0x080057ed
 8005774:	080057ed 	.word	0x080057ed
 8005778:	080057d5 	.word	0x080057d5
 800577c:	080057ed 	.word	0x080057ed
 8005780:	080057ed 	.word	0x080057ed
 8005784:	080057ed 	.word	0x080057ed
 8005788:	080057ed 	.word	0x080057ed
 800578c:	080057ed 	.word	0x080057ed
 8005790:	080057ed 	.word	0x080057ed
 8005794:	080057ed 	.word	0x080057ed
 8005798:	080057dd 	.word	0x080057dd
 800579c:	080057ed 	.word	0x080057ed
 80057a0:	080057ed 	.word	0x080057ed
 80057a4:	080057ed 	.word	0x080057ed
 80057a8:	080057ed 	.word	0x080057ed
 80057ac:	080057ed 	.word	0x080057ed
 80057b0:	080057ed 	.word	0x080057ed
 80057b4:	080057ed 	.word	0x080057ed
 80057b8:	080057e5 	.word	0x080057e5
 80057bc:	2301      	movs	r3, #1
 80057be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057c2:	e0bc      	b.n	800593e <UART_SetConfig+0x5a6>
 80057c4:	2304      	movs	r3, #4
 80057c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ca:	e0b8      	b.n	800593e <UART_SetConfig+0x5a6>
 80057cc:	2308      	movs	r3, #8
 80057ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057d2:	e0b4      	b.n	800593e <UART_SetConfig+0x5a6>
 80057d4:	2310      	movs	r3, #16
 80057d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057da:	e0b0      	b.n	800593e <UART_SetConfig+0x5a6>
 80057dc:	2320      	movs	r3, #32
 80057de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057e2:	e0ac      	b.n	800593e <UART_SetConfig+0x5a6>
 80057e4:	2340      	movs	r3, #64	@ 0x40
 80057e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ea:	e0a8      	b.n	800593e <UART_SetConfig+0x5a6>
 80057ec:	2380      	movs	r3, #128	@ 0x80
 80057ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057f2:	e0a4      	b.n	800593e <UART_SetConfig+0x5a6>
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a8f      	ldr	r2, [pc, #572]	@ (8005a38 <UART_SetConfig+0x6a0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d130      	bne.n	8005860 <UART_SetConfig+0x4c8>
 80057fe:	4b8d      	ldr	r3, [pc, #564]	@ (8005a34 <UART_SetConfig+0x69c>)
 8005800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	2b05      	cmp	r3, #5
 8005808:	d826      	bhi.n	8005858 <UART_SetConfig+0x4c0>
 800580a:	a201      	add	r2, pc, #4	@ (adr r2, 8005810 <UART_SetConfig+0x478>)
 800580c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005810:	08005829 	.word	0x08005829
 8005814:	08005831 	.word	0x08005831
 8005818:	08005839 	.word	0x08005839
 800581c:	08005841 	.word	0x08005841
 8005820:	08005849 	.word	0x08005849
 8005824:	08005851 	.word	0x08005851
 8005828:	2300      	movs	r3, #0
 800582a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800582e:	e086      	b.n	800593e <UART_SetConfig+0x5a6>
 8005830:	2304      	movs	r3, #4
 8005832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005836:	e082      	b.n	800593e <UART_SetConfig+0x5a6>
 8005838:	2308      	movs	r3, #8
 800583a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800583e:	e07e      	b.n	800593e <UART_SetConfig+0x5a6>
 8005840:	2310      	movs	r3, #16
 8005842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005846:	e07a      	b.n	800593e <UART_SetConfig+0x5a6>
 8005848:	2320      	movs	r3, #32
 800584a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800584e:	e076      	b.n	800593e <UART_SetConfig+0x5a6>
 8005850:	2340      	movs	r3, #64	@ 0x40
 8005852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005856:	e072      	b.n	800593e <UART_SetConfig+0x5a6>
 8005858:	2380      	movs	r3, #128	@ 0x80
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800585e:	e06e      	b.n	800593e <UART_SetConfig+0x5a6>
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a75      	ldr	r2, [pc, #468]	@ (8005a3c <UART_SetConfig+0x6a4>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d130      	bne.n	80058cc <UART_SetConfig+0x534>
 800586a:	4b72      	ldr	r3, [pc, #456]	@ (8005a34 <UART_SetConfig+0x69c>)
 800586c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	2b05      	cmp	r3, #5
 8005874:	d826      	bhi.n	80058c4 <UART_SetConfig+0x52c>
 8005876:	a201      	add	r2, pc, #4	@ (adr r2, 800587c <UART_SetConfig+0x4e4>)
 8005878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587c:	08005895 	.word	0x08005895
 8005880:	0800589d 	.word	0x0800589d
 8005884:	080058a5 	.word	0x080058a5
 8005888:	080058ad 	.word	0x080058ad
 800588c:	080058b5 	.word	0x080058b5
 8005890:	080058bd 	.word	0x080058bd
 8005894:	2300      	movs	r3, #0
 8005896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800589a:	e050      	b.n	800593e <UART_SetConfig+0x5a6>
 800589c:	2304      	movs	r3, #4
 800589e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058a2:	e04c      	b.n	800593e <UART_SetConfig+0x5a6>
 80058a4:	2308      	movs	r3, #8
 80058a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058aa:	e048      	b.n	800593e <UART_SetConfig+0x5a6>
 80058ac:	2310      	movs	r3, #16
 80058ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058b2:	e044      	b.n	800593e <UART_SetConfig+0x5a6>
 80058b4:	2320      	movs	r3, #32
 80058b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ba:	e040      	b.n	800593e <UART_SetConfig+0x5a6>
 80058bc:	2340      	movs	r3, #64	@ 0x40
 80058be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058c2:	e03c      	b.n	800593e <UART_SetConfig+0x5a6>
 80058c4:	2380      	movs	r3, #128	@ 0x80
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ca:	e038      	b.n	800593e <UART_SetConfig+0x5a6>
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a5b      	ldr	r2, [pc, #364]	@ (8005a40 <UART_SetConfig+0x6a8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d130      	bne.n	8005938 <UART_SetConfig+0x5a0>
 80058d6:	4b57      	ldr	r3, [pc, #348]	@ (8005a34 <UART_SetConfig+0x69c>)
 80058d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	2b05      	cmp	r3, #5
 80058e0:	d826      	bhi.n	8005930 <UART_SetConfig+0x598>
 80058e2:	a201      	add	r2, pc, #4	@ (adr r2, 80058e8 <UART_SetConfig+0x550>)
 80058e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e8:	08005901 	.word	0x08005901
 80058ec:	08005909 	.word	0x08005909
 80058f0:	08005911 	.word	0x08005911
 80058f4:	08005919 	.word	0x08005919
 80058f8:	08005921 	.word	0x08005921
 80058fc:	08005929 	.word	0x08005929
 8005900:	2302      	movs	r3, #2
 8005902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005906:	e01a      	b.n	800593e <UART_SetConfig+0x5a6>
 8005908:	2304      	movs	r3, #4
 800590a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800590e:	e016      	b.n	800593e <UART_SetConfig+0x5a6>
 8005910:	2308      	movs	r3, #8
 8005912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005916:	e012      	b.n	800593e <UART_SetConfig+0x5a6>
 8005918:	2310      	movs	r3, #16
 800591a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800591e:	e00e      	b.n	800593e <UART_SetConfig+0x5a6>
 8005920:	2320      	movs	r3, #32
 8005922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005926:	e00a      	b.n	800593e <UART_SetConfig+0x5a6>
 8005928:	2340      	movs	r3, #64	@ 0x40
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800592e:	e006      	b.n	800593e <UART_SetConfig+0x5a6>
 8005930:	2380      	movs	r3, #128	@ 0x80
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005936:	e002      	b.n	800593e <UART_SetConfig+0x5a6>
 8005938:	2380      	movs	r3, #128	@ 0x80
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a3f      	ldr	r2, [pc, #252]	@ (8005a40 <UART_SetConfig+0x6a8>)
 8005944:	4293      	cmp	r3, r2
 8005946:	f040 80f8 	bne.w	8005b3a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800594a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800594e:	2b20      	cmp	r3, #32
 8005950:	dc46      	bgt.n	80059e0 <UART_SetConfig+0x648>
 8005952:	2b02      	cmp	r3, #2
 8005954:	f2c0 8082 	blt.w	8005a5c <UART_SetConfig+0x6c4>
 8005958:	3b02      	subs	r3, #2
 800595a:	2b1e      	cmp	r3, #30
 800595c:	d87e      	bhi.n	8005a5c <UART_SetConfig+0x6c4>
 800595e:	a201      	add	r2, pc, #4	@ (adr r2, 8005964 <UART_SetConfig+0x5cc>)
 8005960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005964:	080059e7 	.word	0x080059e7
 8005968:	08005a5d 	.word	0x08005a5d
 800596c:	080059ef 	.word	0x080059ef
 8005970:	08005a5d 	.word	0x08005a5d
 8005974:	08005a5d 	.word	0x08005a5d
 8005978:	08005a5d 	.word	0x08005a5d
 800597c:	080059ff 	.word	0x080059ff
 8005980:	08005a5d 	.word	0x08005a5d
 8005984:	08005a5d 	.word	0x08005a5d
 8005988:	08005a5d 	.word	0x08005a5d
 800598c:	08005a5d 	.word	0x08005a5d
 8005990:	08005a5d 	.word	0x08005a5d
 8005994:	08005a5d 	.word	0x08005a5d
 8005998:	08005a5d 	.word	0x08005a5d
 800599c:	08005a0f 	.word	0x08005a0f
 80059a0:	08005a5d 	.word	0x08005a5d
 80059a4:	08005a5d 	.word	0x08005a5d
 80059a8:	08005a5d 	.word	0x08005a5d
 80059ac:	08005a5d 	.word	0x08005a5d
 80059b0:	08005a5d 	.word	0x08005a5d
 80059b4:	08005a5d 	.word	0x08005a5d
 80059b8:	08005a5d 	.word	0x08005a5d
 80059bc:	08005a5d 	.word	0x08005a5d
 80059c0:	08005a5d 	.word	0x08005a5d
 80059c4:	08005a5d 	.word	0x08005a5d
 80059c8:	08005a5d 	.word	0x08005a5d
 80059cc:	08005a5d 	.word	0x08005a5d
 80059d0:	08005a5d 	.word	0x08005a5d
 80059d4:	08005a5d 	.word	0x08005a5d
 80059d8:	08005a5d 	.word	0x08005a5d
 80059dc:	08005a4f 	.word	0x08005a4f
 80059e0:	2b40      	cmp	r3, #64	@ 0x40
 80059e2:	d037      	beq.n	8005a54 <UART_SetConfig+0x6bc>
 80059e4:	e03a      	b.n	8005a5c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80059e6:	f7fe fed9 	bl	800479c <HAL_RCCEx_GetD3PCLK1Freq>
 80059ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80059ec:	e03c      	b.n	8005a68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fe fee8 	bl	80047c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059fc:	e034      	b.n	8005a68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059fe:	f107 0318 	add.w	r3, r7, #24
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff f834 	bl	8004a70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a0c:	e02c      	b.n	8005a68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a0e:	4b09      	ldr	r3, [pc, #36]	@ (8005a34 <UART_SetConfig+0x69c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0320 	and.w	r3, r3, #32
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d016      	beq.n	8005a48 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a1a:	4b06      	ldr	r3, [pc, #24]	@ (8005a34 <UART_SetConfig+0x69c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	08db      	lsrs	r3, r3, #3
 8005a20:	f003 0303 	and.w	r3, r3, #3
 8005a24:	4a07      	ldr	r2, [pc, #28]	@ (8005a44 <UART_SetConfig+0x6ac>)
 8005a26:	fa22 f303 	lsr.w	r3, r2, r3
 8005a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a2c:	e01c      	b.n	8005a68 <UART_SetConfig+0x6d0>
 8005a2e:	bf00      	nop
 8005a30:	40011400 	.word	0x40011400
 8005a34:	58024400 	.word	0x58024400
 8005a38:	40007800 	.word	0x40007800
 8005a3c:	40007c00 	.word	0x40007c00
 8005a40:	58000c00 	.word	0x58000c00
 8005a44:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005a48:	4b9d      	ldr	r3, [pc, #628]	@ (8005cc0 <UART_SetConfig+0x928>)
 8005a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a4c:	e00c      	b.n	8005a68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a4e:	4b9d      	ldr	r3, [pc, #628]	@ (8005cc4 <UART_SetConfig+0x92c>)
 8005a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a52:	e009      	b.n	8005a68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a5a:	e005      	b.n	8005a68 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005a66:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 81de 	beq.w	8005e2c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a74:	4a94      	ldr	r2, [pc, #592]	@ (8005cc8 <UART_SetConfig+0x930>)
 8005a76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a82:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	4413      	add	r3, r2
 8005a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d305      	bcc.n	8005aa0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d903      	bls.n	8005aa8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005aa6:	e1c1      	b.n	8005e2c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aaa:	2200      	movs	r2, #0
 8005aac:	60bb      	str	r3, [r7, #8]
 8005aae:	60fa      	str	r2, [r7, #12]
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab4:	4a84      	ldr	r2, [pc, #528]	@ (8005cc8 <UART_SetConfig+0x930>)
 8005ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	2200      	movs	r2, #0
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	607a      	str	r2, [r7, #4]
 8005ac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ac6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005aca:	f7fa fc05 	bl	80002d8 <__aeabi_uldivmod>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	f04f 0300 	mov.w	r3, #0
 8005ade:	020b      	lsls	r3, r1, #8
 8005ae0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ae4:	0202      	lsls	r2, r0, #8
 8005ae6:	6979      	ldr	r1, [r7, #20]
 8005ae8:	6849      	ldr	r1, [r1, #4]
 8005aea:	0849      	lsrs	r1, r1, #1
 8005aec:	2000      	movs	r0, #0
 8005aee:	460c      	mov	r4, r1
 8005af0:	4605      	mov	r5, r0
 8005af2:	eb12 0804 	adds.w	r8, r2, r4
 8005af6:	eb43 0905 	adc.w	r9, r3, r5
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	469a      	mov	sl, r3
 8005b02:	4693      	mov	fp, r2
 8005b04:	4652      	mov	r2, sl
 8005b06:	465b      	mov	r3, fp
 8005b08:	4640      	mov	r0, r8
 8005b0a:	4649      	mov	r1, r9
 8005b0c:	f7fa fbe4 	bl	80002d8 <__aeabi_uldivmod>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	4613      	mov	r3, r2
 8005b16:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b1e:	d308      	bcc.n	8005b32 <UART_SetConfig+0x79a>
 8005b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b26:	d204      	bcs.n	8005b32 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b2e:	60da      	str	r2, [r3, #12]
 8005b30:	e17c      	b.n	8005e2c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005b38:	e178      	b.n	8005e2c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b42:	f040 80c5 	bne.w	8005cd0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005b46:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	dc48      	bgt.n	8005be0 <UART_SetConfig+0x848>
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	db7b      	blt.n	8005c4a <UART_SetConfig+0x8b2>
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d879      	bhi.n	8005c4a <UART_SetConfig+0x8b2>
 8005b56:	a201      	add	r2, pc, #4	@ (adr r2, 8005b5c <UART_SetConfig+0x7c4>)
 8005b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5c:	08005be7 	.word	0x08005be7
 8005b60:	08005bef 	.word	0x08005bef
 8005b64:	08005c4b 	.word	0x08005c4b
 8005b68:	08005c4b 	.word	0x08005c4b
 8005b6c:	08005bf7 	.word	0x08005bf7
 8005b70:	08005c4b 	.word	0x08005c4b
 8005b74:	08005c4b 	.word	0x08005c4b
 8005b78:	08005c4b 	.word	0x08005c4b
 8005b7c:	08005c07 	.word	0x08005c07
 8005b80:	08005c4b 	.word	0x08005c4b
 8005b84:	08005c4b 	.word	0x08005c4b
 8005b88:	08005c4b 	.word	0x08005c4b
 8005b8c:	08005c4b 	.word	0x08005c4b
 8005b90:	08005c4b 	.word	0x08005c4b
 8005b94:	08005c4b 	.word	0x08005c4b
 8005b98:	08005c4b 	.word	0x08005c4b
 8005b9c:	08005c17 	.word	0x08005c17
 8005ba0:	08005c4b 	.word	0x08005c4b
 8005ba4:	08005c4b 	.word	0x08005c4b
 8005ba8:	08005c4b 	.word	0x08005c4b
 8005bac:	08005c4b 	.word	0x08005c4b
 8005bb0:	08005c4b 	.word	0x08005c4b
 8005bb4:	08005c4b 	.word	0x08005c4b
 8005bb8:	08005c4b 	.word	0x08005c4b
 8005bbc:	08005c4b 	.word	0x08005c4b
 8005bc0:	08005c4b 	.word	0x08005c4b
 8005bc4:	08005c4b 	.word	0x08005c4b
 8005bc8:	08005c4b 	.word	0x08005c4b
 8005bcc:	08005c4b 	.word	0x08005c4b
 8005bd0:	08005c4b 	.word	0x08005c4b
 8005bd4:	08005c4b 	.word	0x08005c4b
 8005bd8:	08005c4b 	.word	0x08005c4b
 8005bdc:	08005c3d 	.word	0x08005c3d
 8005be0:	2b40      	cmp	r3, #64	@ 0x40
 8005be2:	d02e      	beq.n	8005c42 <UART_SetConfig+0x8aa>
 8005be4:	e031      	b.n	8005c4a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be6:	f7fd fba3 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8005bea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005bec:	e033      	b.n	8005c56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bee:	f7fd fbb5 	bl	800335c <HAL_RCC_GetPCLK2Freq>
 8005bf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005bf4:	e02f      	b.n	8005c56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fe fde4 	bl	80047c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c04:	e027      	b.n	8005c56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c06:	f107 0318 	add.w	r3, r7, #24
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fe ff30 	bl	8004a70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c14:	e01f      	b.n	8005c56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c16:	4b2d      	ldr	r3, [pc, #180]	@ (8005ccc <UART_SetConfig+0x934>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d009      	beq.n	8005c36 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c22:	4b2a      	ldr	r3, [pc, #168]	@ (8005ccc <UART_SetConfig+0x934>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	08db      	lsrs	r3, r3, #3
 8005c28:	f003 0303 	and.w	r3, r3, #3
 8005c2c:	4a24      	ldr	r2, [pc, #144]	@ (8005cc0 <UART_SetConfig+0x928>)
 8005c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c34:	e00f      	b.n	8005c56 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005c36:	4b22      	ldr	r3, [pc, #136]	@ (8005cc0 <UART_SetConfig+0x928>)
 8005c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c3a:	e00c      	b.n	8005c56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c3c:	4b21      	ldr	r3, [pc, #132]	@ (8005cc4 <UART_SetConfig+0x92c>)
 8005c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c40:	e009      	b.n	8005c56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c48:	e005      	b.n	8005c56 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005c54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 80e7 	beq.w	8005e2c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c62:	4a19      	ldr	r2, [pc, #100]	@ (8005cc8 <UART_SetConfig+0x930>)
 8005c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c70:	005a      	lsls	r2, r3, #1
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	085b      	lsrs	r3, r3, #1
 8005c78:	441a      	add	r2, r3
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c82:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c86:	2b0f      	cmp	r3, #15
 8005c88:	d916      	bls.n	8005cb8 <UART_SetConfig+0x920>
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c90:	d212      	bcs.n	8005cb8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	f023 030f 	bic.w	r3, r3, #15
 8005c9a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9e:	085b      	lsrs	r3, r3, #1
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005caa:	4313      	orrs	r3, r2
 8005cac:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005cb4:	60da      	str	r2, [r3, #12]
 8005cb6:	e0b9      	b.n	8005e2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005cbe:	e0b5      	b.n	8005e2c <UART_SetConfig+0xa94>
 8005cc0:	03d09000 	.word	0x03d09000
 8005cc4:	003d0900 	.word	0x003d0900
 8005cc8:	08006b40 	.word	0x08006b40
 8005ccc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cd0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	dc49      	bgt.n	8005d6c <UART_SetConfig+0x9d4>
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	db7c      	blt.n	8005dd6 <UART_SetConfig+0xa3e>
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d87a      	bhi.n	8005dd6 <UART_SetConfig+0xa3e>
 8005ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce8 <UART_SetConfig+0x950>)
 8005ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce6:	bf00      	nop
 8005ce8:	08005d73 	.word	0x08005d73
 8005cec:	08005d7b 	.word	0x08005d7b
 8005cf0:	08005dd7 	.word	0x08005dd7
 8005cf4:	08005dd7 	.word	0x08005dd7
 8005cf8:	08005d83 	.word	0x08005d83
 8005cfc:	08005dd7 	.word	0x08005dd7
 8005d00:	08005dd7 	.word	0x08005dd7
 8005d04:	08005dd7 	.word	0x08005dd7
 8005d08:	08005d93 	.word	0x08005d93
 8005d0c:	08005dd7 	.word	0x08005dd7
 8005d10:	08005dd7 	.word	0x08005dd7
 8005d14:	08005dd7 	.word	0x08005dd7
 8005d18:	08005dd7 	.word	0x08005dd7
 8005d1c:	08005dd7 	.word	0x08005dd7
 8005d20:	08005dd7 	.word	0x08005dd7
 8005d24:	08005dd7 	.word	0x08005dd7
 8005d28:	08005da3 	.word	0x08005da3
 8005d2c:	08005dd7 	.word	0x08005dd7
 8005d30:	08005dd7 	.word	0x08005dd7
 8005d34:	08005dd7 	.word	0x08005dd7
 8005d38:	08005dd7 	.word	0x08005dd7
 8005d3c:	08005dd7 	.word	0x08005dd7
 8005d40:	08005dd7 	.word	0x08005dd7
 8005d44:	08005dd7 	.word	0x08005dd7
 8005d48:	08005dd7 	.word	0x08005dd7
 8005d4c:	08005dd7 	.word	0x08005dd7
 8005d50:	08005dd7 	.word	0x08005dd7
 8005d54:	08005dd7 	.word	0x08005dd7
 8005d58:	08005dd7 	.word	0x08005dd7
 8005d5c:	08005dd7 	.word	0x08005dd7
 8005d60:	08005dd7 	.word	0x08005dd7
 8005d64:	08005dd7 	.word	0x08005dd7
 8005d68:	08005dc9 	.word	0x08005dc9
 8005d6c:	2b40      	cmp	r3, #64	@ 0x40
 8005d6e:	d02e      	beq.n	8005dce <UART_SetConfig+0xa36>
 8005d70:	e031      	b.n	8005dd6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d72:	f7fd fadd 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8005d76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d78:	e033      	b.n	8005de2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d7a:	f7fd faef 	bl	800335c <HAL_RCC_GetPCLK2Freq>
 8005d7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d80:	e02f      	b.n	8005de2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fe fd1e 	bl	80047c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d90:	e027      	b.n	8005de2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d92:	f107 0318 	add.w	r3, r7, #24
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fe fe6a 	bl	8004a70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005da0:	e01f      	b.n	8005de2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005da2:	4b2d      	ldr	r3, [pc, #180]	@ (8005e58 <UART_SetConfig+0xac0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d009      	beq.n	8005dc2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005dae:	4b2a      	ldr	r3, [pc, #168]	@ (8005e58 <UART_SetConfig+0xac0>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	08db      	lsrs	r3, r3, #3
 8005db4:	f003 0303 	and.w	r3, r3, #3
 8005db8:	4a28      	ldr	r2, [pc, #160]	@ (8005e5c <UART_SetConfig+0xac4>)
 8005dba:	fa22 f303 	lsr.w	r3, r2, r3
 8005dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005dc0:	e00f      	b.n	8005de2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005dc2:	4b26      	ldr	r3, [pc, #152]	@ (8005e5c <UART_SetConfig+0xac4>)
 8005dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dc6:	e00c      	b.n	8005de2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005dc8:	4b25      	ldr	r3, [pc, #148]	@ (8005e60 <UART_SetConfig+0xac8>)
 8005dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dcc:	e009      	b.n	8005de2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dd4:	e005      	b.n	8005de2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005de0:	bf00      	nop
    }

    if (pclk != 0U)
 8005de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d021      	beq.n	8005e2c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dec:	4a1d      	ldr	r2, [pc, #116]	@ (8005e64 <UART_SetConfig+0xacc>)
 8005dee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005df2:	461a      	mov	r2, r3
 8005df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005df6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	085b      	lsrs	r3, r3, #1
 8005e00:	441a      	add	r2, r3
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e0e:	2b0f      	cmp	r3, #15
 8005e10:	d909      	bls.n	8005e26 <UART_SetConfig+0xa8e>
 8005e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e18:	d205      	bcs.n	8005e26 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60da      	str	r2, [r3, #12]
 8005e24:	e002      	b.n	8005e2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	2200      	movs	r2, #0
 8005e46:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e48:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3748      	adds	r7, #72	@ 0x48
 8005e50:	46bd      	mov	sp, r7
 8005e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e56:	bf00      	nop
 8005e58:	58024400 	.word	0x58024400
 8005e5c:	03d09000 	.word	0x03d09000
 8005e60:	003d0900 	.word	0x003d0900
 8005e64:	08006b40 	.word	0x08006b40

08005e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00a      	beq.n	8005e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00a      	beq.n	8005eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00a      	beq.n	8005ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efc:	f003 0310 	and.w	r3, r3, #16
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01a      	beq.n	8005f7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f66:	d10a      	bne.n	8005f7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	605a      	str	r2, [r3, #4]
  }
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b098      	sub	sp, #96	@ 0x60
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fbc:	f7fb f926 	bl	800120c <HAL_GetTick>
 8005fc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d12f      	bne.n	8006030 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f88e 	bl	8006100 <UART_WaitOnFlagUntilTimeout>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d022      	beq.n	8006030 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ffa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ffe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	461a      	mov	r2, r3
 8006006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006008:	647b      	str	r3, [r7, #68]	@ 0x44
 800600a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800600e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e6      	bne.n	8005fea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e063      	b.n	80060f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b04      	cmp	r3, #4
 800603c:	d149      	bne.n	80060d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800603e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006046:	2200      	movs	r2, #0
 8006048:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f857 	bl	8006100 <UART_WaitOnFlagUntilTimeout>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d03c      	beq.n	80060d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	623b      	str	r3, [r7, #32]
   return(result);
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800606c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006076:	633b      	str	r3, [r7, #48]	@ 0x30
 8006078:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800607c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e6      	bne.n	8006058 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3308      	adds	r3, #8
 8006090:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	60fb      	str	r3, [r7, #12]
   return(result);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f023 0301 	bic.w	r3, r3, #1
 80060a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3308      	adds	r3, #8
 80060a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060aa:	61fa      	str	r2, [r7, #28]
 80060ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	69b9      	ldr	r1, [r7, #24]
 80060b0:	69fa      	ldr	r2, [r7, #28]
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	617b      	str	r3, [r7, #20]
   return(result);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1e5      	bne.n	800608a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2220      	movs	r2, #32
 80060c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e012      	b.n	80060f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2220      	movs	r2, #32
 80060d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2220      	movs	r2, #32
 80060de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3758      	adds	r7, #88	@ 0x58
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	603b      	str	r3, [r7, #0]
 800610c:	4613      	mov	r3, r2
 800610e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006110:	e04f      	b.n	80061b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006118:	d04b      	beq.n	80061b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800611a:	f7fb f877 	bl	800120c <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	429a      	cmp	r2, r3
 8006128:	d302      	bcc.n	8006130 <UART_WaitOnFlagUntilTimeout+0x30>
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e04e      	b.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0304 	and.w	r3, r3, #4
 800613e:	2b00      	cmp	r3, #0
 8006140:	d037      	beq.n	80061b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2b80      	cmp	r3, #128	@ 0x80
 8006146:	d034      	beq.n	80061b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2b40      	cmp	r3, #64	@ 0x40
 800614c:	d031      	beq.n	80061b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	f003 0308 	and.w	r3, r3, #8
 8006158:	2b08      	cmp	r3, #8
 800615a:	d110      	bne.n	800617e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2208      	movs	r2, #8
 8006162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 f839 	bl	80061dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2208      	movs	r2, #8
 800616e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e029      	b.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800618c:	d111      	bne.n	80061b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 f81f 	bl	80061dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e00f      	b.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69da      	ldr	r2, [r3, #28]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4013      	ands	r3, r2
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	429a      	cmp	r2, r3
 80061c0:	bf0c      	ite	eq
 80061c2:	2301      	moveq	r3, #1
 80061c4:	2300      	movne	r3, #0
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	461a      	mov	r2, r3
 80061ca:	79fb      	ldrb	r3, [r7, #7]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d0a0      	beq.n	8006112 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
	...

080061dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061dc:	b480      	push	{r7}
 80061de:	b095      	sub	sp, #84	@ 0x54
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006202:	643b      	str	r3, [r7, #64]	@ 0x40
 8006204:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006208:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e6      	bne.n	80061e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3308      	adds	r3, #8
 800621c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	61fb      	str	r3, [r7, #28]
   return(result);
 8006226:	69fa      	ldr	r2, [r7, #28]
 8006228:	4b1e      	ldr	r3, [pc, #120]	@ (80062a4 <UART_EndRxTransfer+0xc8>)
 800622a:	4013      	ands	r3, r2
 800622c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3308      	adds	r3, #8
 8006234:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006236:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006238:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800623c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e5      	bne.n	8006216 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800624e:	2b01      	cmp	r3, #1
 8006250:	d118      	bne.n	8006284 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f023 0310 	bic.w	r3, r3, #16
 8006266:	647b      	str	r3, [r7, #68]	@ 0x44
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	461a      	mov	r2, r3
 800626e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006270:	61bb      	str	r3, [r7, #24]
 8006272:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	6979      	ldr	r1, [r7, #20]
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	613b      	str	r3, [r7, #16]
   return(result);
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e6      	bne.n	8006252 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2220      	movs	r2, #32
 8006288:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006298:	bf00      	nop
 800629a:	3754      	adds	r7, #84	@ 0x54
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	effffffe 	.word	0xeffffffe

080062a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d101      	bne.n	80062be <HAL_UARTEx_DisableFifoMode+0x16>
 80062ba:	2302      	movs	r3, #2
 80062bc:	e027      	b.n	800630e <HAL_UARTEx_DisableFifoMode+0x66>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2224      	movs	r2, #36	@ 0x24
 80062ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0201 	bic.w	r2, r2, #1
 80062e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80062ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2220      	movs	r2, #32
 8006300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800632a:	2b01      	cmp	r3, #1
 800632c:	d101      	bne.n	8006332 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800632e:	2302      	movs	r3, #2
 8006330:	e02d      	b.n	800638e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2224      	movs	r2, #36	@ 0x24
 800633e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0201 	bic.w	r2, r2, #1
 8006358:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f850 	bl	8006414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2220      	movs	r2, #32
 8006380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b084      	sub	sp, #16
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d101      	bne.n	80063ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063aa:	2302      	movs	r3, #2
 80063ac:	e02d      	b.n	800640a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2224      	movs	r2, #36	@ 0x24
 80063ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0201 	bic.w	r2, r2, #1
 80063d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f812 	bl	8006414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2220      	movs	r2, #32
 80063fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006420:	2b00      	cmp	r3, #0
 8006422:	d108      	bne.n	8006436 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006434:	e031      	b.n	800649a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006436:	2310      	movs	r3, #16
 8006438:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800643a:	2310      	movs	r3, #16
 800643c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	0e5b      	lsrs	r3, r3, #25
 8006446:	b2db      	uxtb	r3, r3
 8006448:	f003 0307 	and.w	r3, r3, #7
 800644c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	0f5b      	lsrs	r3, r3, #29
 8006456:	b2db      	uxtb	r3, r3
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800645e:	7bbb      	ldrb	r3, [r7, #14]
 8006460:	7b3a      	ldrb	r2, [r7, #12]
 8006462:	4911      	ldr	r1, [pc, #68]	@ (80064a8 <UARTEx_SetNbDataToProcess+0x94>)
 8006464:	5c8a      	ldrb	r2, [r1, r2]
 8006466:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800646a:	7b3a      	ldrb	r2, [r7, #12]
 800646c:	490f      	ldr	r1, [pc, #60]	@ (80064ac <UARTEx_SetNbDataToProcess+0x98>)
 800646e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006470:	fb93 f3f2 	sdiv	r3, r3, r2
 8006474:	b29a      	uxth	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	7b7a      	ldrb	r2, [r7, #13]
 8006480:	4909      	ldr	r1, [pc, #36]	@ (80064a8 <UARTEx_SetNbDataToProcess+0x94>)
 8006482:	5c8a      	ldrb	r2, [r1, r2]
 8006484:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006488:	7b7a      	ldrb	r2, [r7, #13]
 800648a:	4908      	ldr	r1, [pc, #32]	@ (80064ac <UARTEx_SetNbDataToProcess+0x98>)
 800648c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800648e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006492:	b29a      	uxth	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800649a:	bf00      	nop
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	08006b58 	.word	0x08006b58
 80064ac:	08006b60 	.word	0x08006b60

080064b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064b0:	b084      	sub	sp, #16
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b084      	sub	sp, #16
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	f107 001c 	add.w	r0, r7, #28
 80064be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d121      	bne.n	800650e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	4b2c      	ldr	r3, [pc, #176]	@ (800658c <USB_CoreInit+0xdc>)
 80064dc:	4013      	ands	r3, r2
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d105      	bne.n	8006502 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 faaa 	bl	8006a5c <USB_CoreReset>
 8006508:	4603      	mov	r3, r0
 800650a:	73fb      	strb	r3, [r7, #15]
 800650c:	e01b      	b.n	8006546 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fa9e 	bl	8006a5c <USB_CoreReset>
 8006520:	4603      	mov	r3, r0
 8006522:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006524:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006528:	2b00      	cmp	r3, #0
 800652a:	d106      	bne.n	800653a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006530:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	639a      	str	r2, [r3, #56]	@ 0x38
 8006538:	e005      	b.n	8006546 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006546:	7fbb      	ldrb	r3, [r7, #30]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d116      	bne.n	800657a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006550:	b29a      	uxth	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800655a:	4b0d      	ldr	r3, [pc, #52]	@ (8006590 <USB_CoreInit+0xe0>)
 800655c:	4313      	orrs	r3, r2
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f043 0206 	orr.w	r2, r3, #6
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f043 0220 	orr.w	r2, r3, #32
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800657a:	7bfb      	ldrb	r3, [r7, #15]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006586:	b004      	add	sp, #16
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	ffbdffbf 	.word	0xffbdffbf
 8006590:	03ee0000 	.word	0x03ee0000

08006594 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f023 0201 	bic.w	r2, r3, #1
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	460b      	mov	r3, r1
 80065c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065d2:	78fb      	ldrb	r3, [r7, #3]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d115      	bne.n	8006604 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80065e4:	200a      	movs	r0, #10
 80065e6:	f7fa fe1d 	bl	8001224 <HAL_Delay>
      ms += 10U;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	330a      	adds	r3, #10
 80065ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fa25 	bl	8006a40 <USB_GetMode>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d01e      	beq.n	800663a <USB_SetCurrentMode+0x84>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2bc7      	cmp	r3, #199	@ 0xc7
 8006600:	d9f0      	bls.n	80065e4 <USB_SetCurrentMode+0x2e>
 8006602:	e01a      	b.n	800663a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006604:	78fb      	ldrb	r3, [r7, #3]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d115      	bne.n	8006636 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006616:	200a      	movs	r0, #10
 8006618:	f7fa fe04 	bl	8001224 <HAL_Delay>
      ms += 10U;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	330a      	adds	r3, #10
 8006620:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fa0c 	bl	8006a40 <USB_GetMode>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d005      	beq.n	800663a <USB_SetCurrentMode+0x84>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2bc7      	cmp	r3, #199	@ 0xc7
 8006632:	d9f0      	bls.n	8006616 <USB_SetCurrentMode+0x60>
 8006634:	e001      	b.n	800663a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e005      	b.n	8006646 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2bc8      	cmp	r3, #200	@ 0xc8
 800663e:	d101      	bne.n	8006644 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e000      	b.n	8006646 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
	...

08006650 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006650:	b084      	sub	sp, #16
 8006652:	b580      	push	{r7, lr}
 8006654:	b086      	sub	sp, #24
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800665e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006662:	2300      	movs	r3, #0
 8006664:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800666a:	2300      	movs	r3, #0
 800666c:	613b      	str	r3, [r7, #16]
 800666e:	e009      	b.n	8006684 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	3340      	adds	r3, #64	@ 0x40
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	2200      	movs	r2, #0
 800667c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	3301      	adds	r3, #1
 8006682:	613b      	str	r3, [r7, #16]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	2b0e      	cmp	r3, #14
 8006688:	d9f2      	bls.n	8006670 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800668a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800668e:	2b00      	cmp	r3, #0
 8006690:	d11c      	bne.n	80066cc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066a0:	f043 0302 	orr.w	r3, r3, #2
 80066a4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066aa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	e005      	b.n	80066d8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80066de:	461a      	mov	r2, r3
 80066e0:	2300      	movs	r3, #0
 80066e2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066e4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d10d      	bne.n	8006708 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80066ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d104      	bne.n	80066fe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80066f4:	2100      	movs	r1, #0
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f968 	bl	80069cc <USB_SetDevSpeed>
 80066fc:	e008      	b.n	8006710 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066fe:	2101      	movs	r1, #1
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f963 	bl	80069cc <USB_SetDevSpeed>
 8006706:	e003      	b.n	8006710 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006708:	2103      	movs	r1, #3
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f95e 	bl	80069cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006710:	2110      	movs	r1, #16
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f8fa 	bl	800690c <USB_FlushTxFifo>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f924 	bl	8006970 <USB_FlushRxFifo>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006738:	461a      	mov	r2, r3
 800673a:	2300      	movs	r3, #0
 800673c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006744:	461a      	mov	r2, r3
 8006746:	2300      	movs	r3, #0
 8006748:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006750:	461a      	mov	r2, r3
 8006752:	2300      	movs	r3, #0
 8006754:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006756:	2300      	movs	r3, #0
 8006758:	613b      	str	r3, [r7, #16]
 800675a:	e043      	b.n	80067e4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800676e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006772:	d118      	bne.n	80067a6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10a      	bne.n	8006790 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	4413      	add	r3, r2
 8006782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006786:	461a      	mov	r2, r3
 8006788:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800678c:	6013      	str	r3, [r2, #0]
 800678e:	e013      	b.n	80067b8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800679c:	461a      	mov	r2, r3
 800679e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80067a2:	6013      	str	r3, [r2, #0]
 80067a4:	e008      	b.n	80067b8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067b2:	461a      	mov	r2, r3
 80067b4:	2300      	movs	r3, #0
 80067b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067c4:	461a      	mov	r2, r3
 80067c6:	2300      	movs	r3, #0
 80067c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d6:	461a      	mov	r2, r3
 80067d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80067dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	3301      	adds	r3, #1
 80067e2:	613b      	str	r3, [r7, #16]
 80067e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80067e8:	461a      	mov	r2, r3
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d3b5      	bcc.n	800675c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067f0:	2300      	movs	r3, #0
 80067f2:	613b      	str	r3, [r7, #16]
 80067f4:	e043      	b.n	800687e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006808:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800680c:	d118      	bne.n	8006840 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10a      	bne.n	800682a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006820:	461a      	mov	r2, r3
 8006822:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	e013      	b.n	8006852 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006836:	461a      	mov	r2, r3
 8006838:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	e008      	b.n	8006852 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800684c:	461a      	mov	r2, r3
 800684e:	2300      	movs	r3, #0
 8006850:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4413      	add	r3, r2
 800685a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800685e:	461a      	mov	r2, r3
 8006860:	2300      	movs	r3, #0
 8006862:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006870:	461a      	mov	r2, r3
 8006872:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006876:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	3301      	adds	r3, #1
 800687c:	613b      	str	r3, [r7, #16]
 800687e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006882:	461a      	mov	r2, r3
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	4293      	cmp	r3, r2
 8006888:	d3b5      	bcc.n	80067f6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800689c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80068aa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d105      	bne.n	80068c0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	f043 0210 	orr.w	r2, r3, #16
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	699a      	ldr	r2, [r3, #24]
 80068c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006904 <USB_DevInit+0x2b4>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d005      	beq.n	80068e0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	f043 0208 	orr.w	r2, r3, #8
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d105      	bne.n	80068f4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	699a      	ldr	r2, [r3, #24]
 80068ec:	4b06      	ldr	r3, [pc, #24]	@ (8006908 <USB_DevInit+0x2b8>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006900:	b004      	add	sp, #16
 8006902:	4770      	bx	lr
 8006904:	803c3800 	.word	0x803c3800
 8006908:	40000004 	.word	0x40000004

0800690c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3301      	adds	r3, #1
 800691e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006926:	d901      	bls.n	800692c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e01b      	b.n	8006964 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	daf2      	bge.n	800691a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	019b      	lsls	r3, r3, #6
 800693c:	f043 0220 	orr.w	r2, r3, #32
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	3301      	adds	r3, #1
 8006948:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006950:	d901      	bls.n	8006956 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e006      	b.n	8006964 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f003 0320 	and.w	r3, r3, #32
 800695e:	2b20      	cmp	r3, #32
 8006960:	d0f0      	beq.n	8006944 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	3301      	adds	r3, #1
 8006980:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006988:	d901      	bls.n	800698e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e018      	b.n	80069c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	2b00      	cmp	r3, #0
 8006994:	daf2      	bge.n	800697c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2210      	movs	r2, #16
 800699e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3301      	adds	r3, #1
 80069a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069ac:	d901      	bls.n	80069b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e006      	b.n	80069c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	f003 0310 	and.w	r3, r3, #16
 80069ba:	2b10      	cmp	r3, #16
 80069bc:	d0f0      	beq.n	80069a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	460b      	mov	r3, r1
 80069d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	68f9      	ldr	r1, [r7, #12]
 80069e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069ec:	4313      	orrs	r3, r2
 80069ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b085      	sub	sp, #20
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a18:	f023 0303 	bic.w	r3, r3, #3
 8006a1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a2c:	f043 0302 	orr.w	r3, r3, #2
 8006a30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	f003 0301 	and.w	r3, r3, #1
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a74:	d901      	bls.n	8006a7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e01b      	b.n	8006ab2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	daf2      	bge.n	8006a68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	f043 0201 	orr.w	r2, r3, #1
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	3301      	adds	r3, #1
 8006a96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a9e:	d901      	bls.n	8006aa4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e006      	b.n	8006ab2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d0f0      	beq.n	8006a92 <USB_CoreReset+0x36>

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <memset>:
 8006abe:	4402      	add	r2, r0
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d100      	bne.n	8006ac8 <memset+0xa>
 8006ac6:	4770      	bx	lr
 8006ac8:	f803 1b01 	strb.w	r1, [r3], #1
 8006acc:	e7f9      	b.n	8006ac2 <memset+0x4>
	...

08006ad0 <__libc_init_array>:
 8006ad0:	b570      	push	{r4, r5, r6, lr}
 8006ad2:	4d0d      	ldr	r5, [pc, #52]	@ (8006b08 <__libc_init_array+0x38>)
 8006ad4:	4c0d      	ldr	r4, [pc, #52]	@ (8006b0c <__libc_init_array+0x3c>)
 8006ad6:	1b64      	subs	r4, r4, r5
 8006ad8:	10a4      	asrs	r4, r4, #2
 8006ada:	2600      	movs	r6, #0
 8006adc:	42a6      	cmp	r6, r4
 8006ade:	d109      	bne.n	8006af4 <__libc_init_array+0x24>
 8006ae0:	4d0b      	ldr	r5, [pc, #44]	@ (8006b10 <__libc_init_array+0x40>)
 8006ae2:	4c0c      	ldr	r4, [pc, #48]	@ (8006b14 <__libc_init_array+0x44>)
 8006ae4:	f000 f818 	bl	8006b18 <_init>
 8006ae8:	1b64      	subs	r4, r4, r5
 8006aea:	10a4      	asrs	r4, r4, #2
 8006aec:	2600      	movs	r6, #0
 8006aee:	42a6      	cmp	r6, r4
 8006af0:	d105      	bne.n	8006afe <__libc_init_array+0x2e>
 8006af2:	bd70      	pop	{r4, r5, r6, pc}
 8006af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af8:	4798      	blx	r3
 8006afa:	3601      	adds	r6, #1
 8006afc:	e7ee      	b.n	8006adc <__libc_init_array+0xc>
 8006afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b02:	4798      	blx	r3
 8006b04:	3601      	adds	r6, #1
 8006b06:	e7f2      	b.n	8006aee <__libc_init_array+0x1e>
 8006b08:	08006b70 	.word	0x08006b70
 8006b0c:	08006b70 	.word	0x08006b70
 8006b10:	08006b70 	.word	0x08006b70
 8006b14:	08006b74 	.word	0x08006b74

08006b18 <_init>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	bf00      	nop
 8006b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1e:	bc08      	pop	{r3}
 8006b20:	469e      	mov	lr, r3
 8006b22:	4770      	bx	lr

08006b24 <_fini>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	bf00      	nop
 8006b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2a:	bc08      	pop	{r3}
 8006b2c:	469e      	mov	lr, r3
 8006b2e:	4770      	bx	lr
