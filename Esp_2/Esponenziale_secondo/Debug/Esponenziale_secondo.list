
Esponenziale_secondo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006968  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006c00  08006c00  00007c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006c38  08006c38  00007c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006c40  08006c40  00007c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006c44  08006c44  00007c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  08006c48  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  08006cac  00008064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  08006d0c  000080c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fa8  24000124  08006d6c  00008124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240010cc  08006d6c  000090cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018522  00000000  00000000  00008152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b77  00000000  00000000  00020674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  000231f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c24  00000000  00000000  000241b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037f30  00000000  00000000  00024ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a97  00000000  00000000  0005cd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015ecf7  00000000  00000000  000727a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d149a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000457c  00000000  00000000  001d14e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001d5a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000124 	.word	0x24000124
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006be8 	.word	0x08006be8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000128 	.word	0x24000128
 80002d4:	08006be8 	.word	0x08006be8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <init_usart3>:

uint16_t data_buffer[1000];
unsigned char* data_buffer_8bit = (unsigned char*)data_buffer;
int data_index=0;

void init_usart3(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

    USART3->CR1 |= USART_CR1_TE;
 80005cc:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <init_usart3+0x4c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a10      	ldr	r2, [pc, #64]	@ (8000614 <init_usart3+0x4c>)
 80005d2:	f043 0308 	orr.w	r3, r3, #8
 80005d6:	6013      	str	r3, [r2, #0]
    USART3->CR1 |= USART_CR1_RE;
 80005d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <init_usart3+0x4c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000614 <init_usart3+0x4c>)
 80005de:	f043 0304 	orr.w	r3, r3, #4
 80005e2:	6013      	str	r3, [r2, #0]

    USART3->CR1 ^= USART_CR1_TXEIE;
 80005e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <init_usart3+0x4c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000614 <init_usart3+0x4c>)
 80005ea:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 80005ee:	6013      	str	r3, [r2, #0]
    USART3->CR1 |= USART_CR1_RXNEIE;
 80005f0:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <init_usart3+0x4c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a07      	ldr	r2, [pc, #28]	@ (8000614 <init_usart3+0x4c>)
 80005f6:	f043 0320 	orr.w	r3, r3, #32
 80005fa:	6013      	str	r3, [r2, #0]

    USART3->CR1 |= USART_CR1_UE;
 80005fc:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <init_usart3+0x4c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a04      	ldr	r2, [pc, #16]	@ (8000614 <init_usart3+0x4c>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6013      	str	r3, [r2, #0]

}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40004800 	.word	0x40004800

08000618 <usart3_interrupt>:

void usart3_interrupt(){
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0


	if(USART3->ISR & USART_ISR_RXNE_RXFNE){
 800061e:	4b38      	ldr	r3, [pc, #224]	@ (8000700 <usart3_interrupt+0xe8>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 0320 	and.w	r3, r3, #32
 8000626:	2b00      	cmp	r3, #0
 8000628:	d023      	beq.n	8000672 <usart3_interrupt+0x5a>
		if(USART3->ISR & USART_ISR_TXE_TXFNF){
 800062a:	4b35      	ldr	r3, [pc, #212]	@ (8000700 <usart3_interrupt+0xe8>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000632:	2b00      	cmp	r3, #0
 8000634:	d01d      	beq.n	8000672 <usart3_interrupt+0x5a>

			char received_data = USART3->RDR;
 8000636:	4b32      	ldr	r3, [pc, #200]	@ (8000700 <usart3_interrupt+0xe8>)
 8000638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800063a:	71fb      	strb	r3, [r7, #7]

			USART3->CR1 ^= USART_CR1_TXEIE;
 800063c:	4b30      	ldr	r3, [pc, #192]	@ (8000700 <usart3_interrupt+0xe8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a2f      	ldr	r2, [pc, #188]	@ (8000700 <usart3_interrupt+0xe8>)
 8000642:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8000646:	6013      	str	r3, [r2, #0]

			if(received_data=='e'){
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b65      	cmp	r3, #101	@ 0x65
 800064c:	d111      	bne.n	8000672 <usart3_interrupt+0x5a>
                data_index=0;
 800064e:	4b2d      	ldr	r3, [pc, #180]	@ (8000704 <usart3_interrupt+0xec>)
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]

				// FUNC() GENERA VETTORE DI DATI SE NECESSARIO
                genera_vett_esp(data_buffer, (int)SIZE_OF_BUFF(data_buffer), 0, 0);
 8000654:	ed9f 1b28 	vldr	d1, [pc, #160]	@ 80006f8 <usart3_interrupt+0xe0>
 8000658:	ed9f 0b27 	vldr	d0, [pc, #156]	@ 80006f8 <usart3_interrupt+0xe0>
 800065c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000660:	4829      	ldr	r0, [pc, #164]	@ (8000708 <usart3_interrupt+0xf0>)
 8000662:	f000 f871 	bl	8000748 <genera_vett_esp>
                USART3->CR1 |= USART_CR1_TXEIE;
 8000666:	4b26      	ldr	r3, [pc, #152]	@ (8000700 <usart3_interrupt+0xe8>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a25      	ldr	r2, [pc, #148]	@ (8000700 <usart3_interrupt+0xe8>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000670:	6013      	str	r3, [r2, #0]
			}
		}
	}

	if((USART3->ISR & USART_ISR_TXE_TXFNF) && (USART3->CR1 & USART_CR1_TXEIE) && !(USART3->ISR & USART_ISR_RXNE_RXFNE)){
 8000672:	4b23      	ldr	r3, [pc, #140]	@ (8000700 <usart3_interrupt+0xe8>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800067a:	2b00      	cmp	r3, #0
 800067c:	d024      	beq.n	80006c8 <usart3_interrupt+0xb0>
 800067e:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <usart3_interrupt+0xe8>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000686:	2b00      	cmp	r3, #0
 8000688:	d01e      	beq.n	80006c8 <usart3_interrupt+0xb0>
 800068a:	4b1d      	ldr	r3, [pc, #116]	@ (8000700 <usart3_interrupt+0xe8>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f003 0320 	and.w	r3, r3, #32
 8000692:	2b00      	cmp	r3, #0
 8000694:	d118      	bne.n	80006c8 <usart3_interrupt+0xb0>

        if(data_index < SIZE_OF_BUFF(data_buffer)*sizeof(data_buffer[0])){
 8000696:	4b1b      	ldr	r3, [pc, #108]	@ (8000704 <usart3_interrupt+0xec>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800069e:	d20d      	bcs.n	80006bc <usart3_interrupt+0xa4>

            USART3->TDR = data_buffer_8bit[data_index];
 80006a0:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <usart3_interrupt+0xf4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a17      	ldr	r2, [pc, #92]	@ (8000704 <usart3_interrupt+0xec>)
 80006a6:	6812      	ldr	r2, [r2, #0]
 80006a8:	4413      	add	r3, r2
 80006aa:	781a      	ldrb	r2, [r3, #0]
 80006ac:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <usart3_interrupt+0xe8>)
 80006ae:	629a      	str	r2, [r3, #40]	@ 0x28
            ++data_index;
 80006b0:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <usart3_interrupt+0xec>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	4a13      	ldr	r2, [pc, #76]	@ (8000704 <usart3_interrupt+0xec>)
 80006b8:	6013      	str	r3, [r2, #0]
 80006ba:	e005      	b.n	80006c8 <usart3_interrupt+0xb0>
        }else{
            USART3->CR1 ^= USART_CR1_TXEIE_TXFNFIE;
 80006bc:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <usart3_interrupt+0xe8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000700 <usart3_interrupt+0xe8>)
 80006c2:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 80006c6:	6013      	str	r3, [r2, #0]
        }
	}

	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 80006c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <usart3_interrupt+0xe8>)
 80006ca:	6a1b      	ldr	r3, [r3, #32]
 80006cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000700 <usart3_interrupt+0xe8>)
 80006ce:	f043 0308 	orr.w	r3, r3, #8
 80006d2:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF;  //Azzeramento flag interrupt trasmissione
 80006d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <usart3_interrupt+0xe8>)
 80006d6:	6a1b      	ldr	r3, [r3, #32]
 80006d8:	4a09      	ldr	r2, [pc, #36]	@ (8000700 <usart3_interrupt+0xe8>)
 80006da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006de:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 80006e0:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <usart3_interrupt+0xe8>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a06      	ldr	r2, [pc, #24]	@ (8000700 <usart3_interrupt+0xe8>)
 80006e6:	f043 0308 	orr.w	r3, r3, #8
 80006ea:	6193      	str	r3, [r2, #24]

}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	f3af 8000 	nop.w
	...
 8000700:	40004800 	.word	0x40004800
 8000704:	24000910 	.word	0x24000910
 8000708:	24000140 	.word	0x24000140
 800070c:	24000000 	.word	0x24000000

08000710 <init_exp_buff>:
 *      Author: yehan
 */
#include "Esponenziale.h"


void init_exp_buff(uint16_t* buff, int length){
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	for(int i=0; i<length; ++i)
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	e008      	b.n	8000732 <init_exp_buff+0x22>
		buff[i] = 0;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	4413      	add	r3, r2
 8000728:	2200      	movs	r2, #0
 800072a:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<length; ++i)
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	3301      	adds	r3, #1
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	429a      	cmp	r2, r3
 8000738:	dbf2      	blt.n	8000720 <init_exp_buff+0x10>
}
 800073a:	bf00      	nop
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <genera_vett_esp>:

void genera_vett_esp(uint16_t* buff, int length, double tau1, double tau2){
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	@ 0x30
 800074c:	af00      	add	r7, sp, #0
 800074e:	6178      	str	r0, [r7, #20]
 8000750:	6139      	str	r1, [r7, #16]
 8000752:	ed87 0b02 	vstr	d0, [r7, #8]
 8000756:	ed87 1b00 	vstr	d1, [r7]

	init_exp_buff(buff,length);
 800075a:	6939      	ldr	r1, [r7, #16]
 800075c:	6978      	ldr	r0, [r7, #20]
 800075e:	f7ff ffd7 	bl	8000710 <init_exp_buff>

	uint16_t* buff_1 = (uint16_t*)malloc(sizeof(uint16_t)*length);
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	4618      	mov	r0, r3
 8000768:	f006 f8f2 	bl	8006950 <malloc>
 800076c:	4603      	mov	r3, r0
 800076e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t* buff_2 = (uint16_t*)malloc(sizeof(uint16_t)*length);
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	4618      	mov	r0, r3
 8000776:	f006 f8eb 	bl	8006950 <malloc>
 800077a:	4603      	mov	r3, r0
 800077c:	623b      	str	r3, [r7, #32]

	uint16_t const_1 = 957;
 800077e:	f240 33bd 	movw	r3, #957	@ 0x3bd
 8000782:	83fb      	strh	r3, [r7, #30]
	uint16_t const_2 = 926;
 8000784:	f240 339e 	movw	r3, #926	@ 0x39e
 8000788:	83bb      	strh	r3, [r7, #28]

	buff_1[0] = 25000;
 800078a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800078c:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8000790:	801a      	strh	r2, [r3, #0]
	buff_2[0] = 25000;
 8000792:	6a3b      	ldr	r3, [r7, #32]
 8000794:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8000798:	801a      	strh	r2, [r3, #0]


	for(int i=1; i<length; ++i){
 800079a:	2301      	movs	r3, #1
 800079c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800079e:	e028      	b.n	80007f2 <genera_vett_esp+0xaa>
		buff_1[i] = (buff_1[i-1] * const_1) >> 10;
 80007a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007a2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80007a6:	4413      	add	r3, r2
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007ac:	4413      	add	r3, r2
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	8bfb      	ldrh	r3, [r7, #30]
 80007b4:	fb02 f303 	mul.w	r3, r2, r3
 80007b8:	1299      	asrs	r1, r3, #10
 80007ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007c0:	4413      	add	r3, r2
 80007c2:	b28a      	uxth	r2, r1
 80007c4:	801a      	strh	r2, [r3, #0]
		buff_2[i] = (buff_2[i-1] * const_2) >> 10;
 80007c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007c8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80007cc:	4413      	add	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	6a3a      	ldr	r2, [r7, #32]
 80007d2:	4413      	add	r3, r2
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	461a      	mov	r2, r3
 80007d8:	8bbb      	ldrh	r3, [r7, #28]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	1299      	asrs	r1, r3, #10
 80007e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	6a3a      	ldr	r2, [r7, #32]
 80007e6:	4413      	add	r3, r2
 80007e8:	b28a      	uxth	r2, r1
 80007ea:	801a      	strh	r2, [r3, #0]
	for(int i=1; i<length; ++i){
 80007ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007ee:	3301      	adds	r3, #1
 80007f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	dbd2      	blt.n	80007a0 <genera_vett_esp+0x58>
	}

	for(int i=0; i<length; ++i)
 80007fa:	2300      	movs	r3, #0
 80007fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007fe:	e013      	b.n	8000828 <genera_vett_esp+0xe0>
		buff[i] = buff_1[i]-buff_2[i];
 8000800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000806:	4413      	add	r3, r2
 8000808:	8819      	ldrh	r1, [r3, #0]
 800080a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	6a3a      	ldr	r2, [r7, #32]
 8000810:	4413      	add	r3, r2
 8000812:	881a      	ldrh	r2, [r3, #0]
 8000814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	6978      	ldr	r0, [r7, #20]
 800081a:	4403      	add	r3, r0
 800081c:	1a8a      	subs	r2, r1, r2
 800081e:	b292      	uxth	r2, r2
 8000820:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<length; ++i)
 8000822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000824:	3301      	adds	r3, #1
 8000826:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000828:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	429a      	cmp	r2, r3
 800082e:	dbe7      	blt.n	8000800 <genera_vett_esp+0xb8>

	free(buff_1);
 8000830:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000832:	f006 f895 	bl	8006960 <free>
	free(buff_2);
 8000836:	6a38      	ldr	r0, [r7, #32]
 8000838:	f006 f892 	bl	8006960 <free>
}
 800083c:	bf00      	nop
 800083e:	3730      	adds	r7, #48	@ 0x30
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000848:	f000 fd2e 	bl	80012a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084c:	f000 f80c 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000850:	f000 f954 	bl	8000afc <MX_GPIO_Init>
  MX_ETH_Init();
 8000854:	f000 f888 	bl	8000968 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000858:	f000 f8d2 	bl	8000a00 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800085c:	f000 f91c 	bl	8000a98 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  init_usart3();
 8000860:	f7ff feb2 	bl	80005c8 <init_usart3>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <main+0x20>

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b09c      	sub	sp, #112	@ 0x70
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000872:	224c      	movs	r2, #76	@ 0x4c
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f006 f928 	bl	8006acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2220      	movs	r2, #32
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f006 f922 	bl	8006acc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000888:	2002      	movs	r0, #2
 800088a:	f001 fe21 	bl	80024d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b33      	ldr	r3, [pc, #204]	@ (8000960 <SystemClock_Config+0xf8>)
 8000894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000896:	4a32      	ldr	r2, [pc, #200]	@ (8000960 <SystemClock_Config+0xf8>)
 8000898:	f023 0301 	bic.w	r3, r3, #1
 800089c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800089e:	4b30      	ldr	r3, [pc, #192]	@ (8000960 <SystemClock_Config+0xf8>)
 80008a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000964 <SystemClock_Config+0xfc>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008b0:	4a2c      	ldr	r2, [pc, #176]	@ (8000964 <SystemClock_Config+0xfc>)
 80008b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000964 <SystemClock_Config+0xfc>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c4:	bf00      	nop
 80008c6:	4b27      	ldr	r3, [pc, #156]	@ (8000964 <SystemClock_Config+0xfc>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008d2:	d1f8      	bne.n	80008c6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008d4:	2303      	movs	r3, #3
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008d8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008de:	2301      	movs	r3, #1
 80008e0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e2:	2340      	movs	r3, #64	@ 0x40
 80008e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e6:	2302      	movs	r3, #2
 80008e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ea:	2302      	movs	r3, #2
 80008ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008f2:	2318      	movs	r3, #24
 80008f4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008f6:	2302      	movs	r3, #2
 80008f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008fa:	2304      	movs	r3, #4
 80008fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008fe:	2302      	movs	r3, #2
 8000900:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000902:	230c      	movs	r3, #12
 8000904:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000906:	2300      	movs	r3, #0
 8000908:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000912:	4618      	mov	r0, r3
 8000914:	f001 fe26 	bl	8002564 <HAL_RCC_OscConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800091e:	f000 f9c9 	bl	8000cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000922:	233f      	movs	r3, #63	@ 0x3f
 8000924:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2101      	movs	r1, #1
 8000946:	4618      	mov	r0, r3
 8000948:	f002 fa66 	bl	8002e18 <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000952:	f000 f9af 	bl	8000cb4 <Error_Handler>
  }
}
 8000956:	bf00      	nop
 8000958:	3770      	adds	r7, #112	@ 0x70
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	58000400 	.word	0x58000400
 8000964:	58024800 	.word	0x58024800

08000968 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800096c:	4b1e      	ldr	r3, [pc, #120]	@ (80009e8 <MX_ETH_Init+0x80>)
 800096e:	4a1f      	ldr	r2, [pc, #124]	@ (80009ec <MX_ETH_Init+0x84>)
 8000970:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000972:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_ETH_Init+0x88>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000978:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <MX_ETH_Init+0x88>)
 800097a:	2280      	movs	r2, #128	@ 0x80
 800097c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800097e:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_ETH_Init+0x88>)
 8000980:	22e1      	movs	r2, #225	@ 0xe1
 8000982:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000984:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <MX_ETH_Init+0x88>)
 8000986:	2200      	movs	r2, #0
 8000988:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800098a:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <MX_ETH_Init+0x88>)
 800098c:	2200      	movs	r2, #0
 800098e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000990:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <MX_ETH_Init+0x88>)
 8000992:	2200      	movs	r2, #0
 8000994:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000996:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <MX_ETH_Init+0x80>)
 8000998:	4a15      	ldr	r2, [pc, #84]	@ (80009f0 <MX_ETH_Init+0x88>)
 800099a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800099c:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <MX_ETH_Init+0x80>)
 800099e:	2201      	movs	r2, #1
 80009a0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009a2:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <MX_ETH_Init+0x80>)
 80009a4:	4a13      	ldr	r2, [pc, #76]	@ (80009f4 <MX_ETH_Init+0x8c>)
 80009a6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <MX_ETH_Init+0x80>)
 80009aa:	4a13      	ldr	r2, [pc, #76]	@ (80009f8 <MX_ETH_Init+0x90>)
 80009ac:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <MX_ETH_Init+0x80>)
 80009b0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80009b4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009b6:	480c      	ldr	r0, [pc, #48]	@ (80009e8 <MX_ETH_Init+0x80>)
 80009b8:	f000 fe5c 	bl	8001674 <HAL_ETH_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80009c2:	f000 f977 	bl	8000cb4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009c6:	2238      	movs	r2, #56	@ 0x38
 80009c8:	2100      	movs	r1, #0
 80009ca:	480c      	ldr	r0, [pc, #48]	@ (80009fc <MX_ETH_Init+0x94>)
 80009cc:	f006 f87e 	bl	8006acc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <MX_ETH_Init+0x94>)
 80009d2:	2221      	movs	r2, #33	@ 0x21
 80009d4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_ETH_Init+0x94>)
 80009d8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80009dc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009de:	4b07      	ldr	r3, [pc, #28]	@ (80009fc <MX_ETH_Init+0x94>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2400094c 	.word	0x2400094c
 80009ec:	40028000 	.word	0x40028000
 80009f0:	24000f74 	.word	0x24000f74
 80009f4:	240000c4 	.word	0x240000c4
 80009f8:	24000064 	.word	0x24000064
 80009fc:	24000914 	.word	0x24000914

08000a00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a04:	4b22      	ldr	r3, [pc, #136]	@ (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a06:	4a23      	ldr	r2, [pc, #140]	@ (8000a94 <MX_USART3_UART_Init+0x94>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	@ (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a0c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b1d      	ldr	r3, [pc, #116]	@ (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b17      	ldr	r3, [pc, #92]	@ (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a36:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a42:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a48:	4811      	ldr	r0, [pc, #68]	@ (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a4a:	f004 fb9d 	bl	8005188 <HAL_UART_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a54:	f000 f92e 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	480d      	ldr	r0, [pc, #52]	@ (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a5c:	f005 fba5 	bl	80061aa <HAL_UARTEx_SetTxFifoThreshold>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a66:	f000 f925 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4808      	ldr	r0, [pc, #32]	@ (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a6e:	f005 fbda 	bl	8006226 <HAL_UARTEx_SetRxFifoThreshold>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a78:	f000 f91c 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	@ (8000a90 <MX_USART3_UART_Init+0x90>)
 8000a7e:	f005 fb5b 	bl	8006138 <HAL_UARTEx_DisableFifoMode>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a88:	f000 f914 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	240009fc 	.word	0x240009fc
 8000a94:	40004800 	.word	0x40004800

08000a98 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a9e:	4a16      	ldr	r2, [pc, #88]	@ (8000af8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aa4:	2209      	movs	r2, #9
 8000aa6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aaa:	2202      	movs	r2, #2
 8000aac:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000aae:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000acc:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae0:	f001 fbc5 	bl	800226e <HAL_PCD_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000aea:	f000 f8e3 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	24000a90 	.word	0x24000a90
 8000af8:	40080000 	.word	0x40080000

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08c      	sub	sp, #48	@ 0x30
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	4b62      	ldr	r3, [pc, #392]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b18:	4a60      	ldr	r2, [pc, #384]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000b1a:	f043 0304 	orr.w	r3, r3, #4
 8000b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b22:	4b5e      	ldr	r3, [pc, #376]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	61bb      	str	r3, [r7, #24]
 8000b2e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b30:	4b5a      	ldr	r3, [pc, #360]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b36:	4a59      	ldr	r2, [pc, #356]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b40:	4b56      	ldr	r3, [pc, #344]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b53      	ldr	r3, [pc, #332]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b54:	4a51      	ldr	r2, [pc, #324]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b5e:	4b4f      	ldr	r3, [pc, #316]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6c:	4b4b      	ldr	r3, [pc, #300]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b72:	4a4a      	ldr	r2, [pc, #296]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7c:	4b47      	ldr	r3, [pc, #284]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8a:	4b44      	ldr	r3, [pc, #272]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b90:	4a42      	ldr	r2, [pc, #264]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000b92:	f043 0308 	orr.w	r3, r3, #8
 8000b96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b9a:	4b40      	ldr	r3, [pc, #256]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba0:	f003 0308 	and.w	r3, r3, #8
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba8:	4b3c      	ldr	r3, [pc, #240]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bae:	4a3b      	ldr	r2, [pc, #236]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000bb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bb8:	4b38      	ldr	r3, [pc, #224]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc6:	4b35      	ldr	r3, [pc, #212]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bcc:	4a33      	ldr	r2, [pc, #204]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000bce:	f043 0310 	orr.w	r3, r3, #16
 8000bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd6:	4b31      	ldr	r3, [pc, #196]	@ (8000c9c <MX_GPIO_Init+0x1a0>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bdc:	f003 0310 	and.w	r3, r3, #16
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000bea:	482d      	ldr	r0, [pc, #180]	@ (8000ca0 <MX_GPIO_Init+0x1a4>)
 8000bec:	f001 fb26 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bf6:	482b      	ldr	r0, [pc, #172]	@ (8000ca4 <MX_GPIO_Init+0x1a8>)
 8000bf8:	f001 fb20 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2102      	movs	r1, #2
 8000c00:	4829      	ldr	r0, [pc, #164]	@ (8000ca8 <MX_GPIO_Init+0x1ac>)
 8000c02:	f001 fb1b 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4824      	ldr	r0, [pc, #144]	@ (8000cac <MX_GPIO_Init+0x1b0>)
 8000c1c:	f001 f95e 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c20:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	4819      	ldr	r0, [pc, #100]	@ (8000ca0 <MX_GPIO_Init+0x1a4>)
 8000c3a:	f001 f94f 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000c3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	4813      	ldr	r0, [pc, #76]	@ (8000ca4 <MX_GPIO_Init+0x1a8>)
 8000c58:	f001 f940 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c5c:	2380      	movs	r3, #128	@ 0x80
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480f      	ldr	r0, [pc, #60]	@ (8000cb0 <MX_GPIO_Init+0x1b4>)
 8000c72:	f001 f933 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4806      	ldr	r0, [pc, #24]	@ (8000ca8 <MX_GPIO_Init+0x1ac>)
 8000c8e:	f001 f925 	bl	8001edc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c92:	bf00      	nop
 8000c94:	3730      	adds	r7, #48	@ 0x30
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	58024400 	.word	0x58024400
 8000ca0:	58020400 	.word	0x58020400
 8000ca4:	58020c00 	.word	0x58020c00
 8000ca8:	58021000 	.word	0x58021000
 8000cac:	58020800 	.word	0x58020800
 8000cb0:	58021800 	.word	0x58021800

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <Error_Handler+0x8>

08000cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <HAL_MspInit+0x30>)
 8000cc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ccc:	4a08      	ldr	r2, [pc, #32]	@ (8000cf0 <HAL_MspInit+0x30>)
 8000cce:	f043 0302 	orr.w	r3, r3, #2
 8000cd2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_MspInit+0x30>)
 8000cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	58024400 	.word	0x58024400

08000cf4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08e      	sub	sp, #56	@ 0x38
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a59      	ldr	r2, [pc, #356]	@ (8000e78 <HAL_ETH_MspInit+0x184>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	f040 80ab 	bne.w	8000e6e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d18:	4b58      	ldr	r3, [pc, #352]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000d1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d1e:	4a57      	ldr	r2, [pc, #348]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000d20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d24:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d28:	4b54      	ldr	r3, [pc, #336]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000d2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d32:	623b      	str	r3, [r7, #32]
 8000d34:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d36:	4b51      	ldr	r3, [pc, #324]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000d38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d3c:	4a4f      	ldr	r2, [pc, #316]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d42:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d46:	4b4d      	ldr	r3, [pc, #308]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000d48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d50:	61fb      	str	r3, [r7, #28]
 8000d52:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d54:	4b49      	ldr	r3, [pc, #292]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000d56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d5a:	4a48      	ldr	r2, [pc, #288]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d60:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d64:	4b45      	ldr	r3, [pc, #276]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000d66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d6e:	61bb      	str	r3, [r7, #24]
 8000d70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	4b42      	ldr	r3, [pc, #264]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d78:	4a40      	ldr	r2, [pc, #256]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000d7a:	f043 0304 	orr.w	r3, r3, #4
 8000d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d82:	4b3e      	ldr	r3, [pc, #248]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	4b3a      	ldr	r3, [pc, #232]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d96:	4a39      	ldr	r2, [pc, #228]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da0:	4b36      	ldr	r3, [pc, #216]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b33      	ldr	r3, [pc, #204]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db4:	4a31      	ldr	r2, [pc, #196]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000db6:	f043 0302 	orr.w	r3, r3, #2
 8000dba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dbe:	4b2f      	ldr	r3, [pc, #188]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd2:	4a2a      	ldr	r2, [pc, #168]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000dd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ddc:	4b27      	ldr	r3, [pc, #156]	@ (8000e7c <HAL_ETH_MspInit+0x188>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000dea:	2332      	movs	r3, #50	@ 0x32
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dfa:	230b      	movs	r3, #11
 8000dfc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e02:	4619      	mov	r1, r3
 8000e04:	481e      	ldr	r0, [pc, #120]	@ (8000e80 <HAL_ETH_MspInit+0x18c>)
 8000e06:	f001 f869 	bl	8001edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e0a:	2386      	movs	r3, #134	@ 0x86
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e1a:	230b      	movs	r3, #11
 8000e1c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	4817      	ldr	r0, [pc, #92]	@ (8000e84 <HAL_ETH_MspInit+0x190>)
 8000e26:	f001 f859 	bl	8001edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e3c:	230b      	movs	r3, #11
 8000e3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	4810      	ldr	r0, [pc, #64]	@ (8000e88 <HAL_ETH_MspInit+0x194>)
 8000e48:	f001 f848 	bl	8001edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e4c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e5e:	230b      	movs	r3, #11
 8000e60:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e66:	4619      	mov	r1, r3
 8000e68:	4808      	ldr	r0, [pc, #32]	@ (8000e8c <HAL_ETH_MspInit+0x198>)
 8000e6a:	f001 f837 	bl	8001edc <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000e6e:	bf00      	nop
 8000e70:	3738      	adds	r7, #56	@ 0x38
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40028000 	.word	0x40028000
 8000e7c:	58024400 	.word	0x58024400
 8000e80:	58020800 	.word	0x58020800
 8000e84:	58020000 	.word	0x58020000
 8000e88:	58020400 	.word	0x58020400
 8000e8c:	58021800 	.word	0x58021800

08000e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b0ba      	sub	sp, #232	@ 0xe8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	22c0      	movs	r2, #192	@ 0xc0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f005 fe0b 	bl	8006acc <memset>
  if(huart->Instance==USART3)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a2b      	ldr	r2, [pc, #172]	@ (8000f68 <HAL_UART_MspInit+0xd8>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d14e      	bne.n	8000f5e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ec0:	f04f 0202 	mov.w	r2, #2
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed2:	f107 0310 	add.w	r3, r7, #16
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f002 fb2a 	bl	8003530 <HAL_RCCEx_PeriphCLKConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ee2:	f7ff fee7 	bl	8000cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ee6:	4b21      	ldr	r3, [pc, #132]	@ (8000f6c <HAL_UART_MspInit+0xdc>)
 8000ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eec:	4a1f      	ldr	r2, [pc, #124]	@ (8000f6c <HAL_UART_MspInit+0xdc>)
 8000eee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ef2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <HAL_UART_MspInit+0xdc>)
 8000ef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000efc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f04:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <HAL_UART_MspInit+0xdc>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0a:	4a18      	ldr	r2, [pc, #96]	@ (8000f6c <HAL_UART_MspInit+0xdc>)
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f14:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <HAL_UART_MspInit+0xdc>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f22:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f42:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f46:	4619      	mov	r1, r3
 8000f48:	4809      	ldr	r0, [pc, #36]	@ (8000f70 <HAL_UART_MspInit+0xe0>)
 8000f4a:	f000 ffc7 	bl	8001edc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	2027      	movs	r0, #39	@ 0x27
 8000f54:	f000 fb59 	bl	800160a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f58:	2027      	movs	r0, #39	@ 0x27
 8000f5a:	f000 fb70 	bl	800163e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f5e:	bf00      	nop
 8000f60:	37e8      	adds	r7, #232	@ 0xe8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40004800 	.word	0x40004800
 8000f6c:	58024400 	.word	0x58024400
 8000f70:	58020c00 	.word	0x58020c00

08000f74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b0ba      	sub	sp, #232	@ 0xe8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	22c0      	movs	r2, #192	@ 0xc0
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f005 fd99 	bl	8006acc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a30      	ldr	r2, [pc, #192]	@ (8001060 <HAL_PCD_MspInit+0xec>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d159      	bne.n	8001058 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000fa4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000fa8:	f04f 0300 	mov.w	r3, #0
 8000fac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000fb0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000fb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f002 fab7 	bl	8003530 <HAL_RCCEx_PeriphCLKConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000fc8:	f7ff fe74 	bl	8000cb4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000fcc:	f001 faba 	bl	8002544 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b24      	ldr	r3, [pc, #144]	@ (8001064 <HAL_PCD_MspInit+0xf0>)
 8000fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd6:	4a23      	ldr	r2, [pc, #140]	@ (8001064 <HAL_PCD_MspInit+0xf0>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe0:	4b20      	ldr	r3, [pc, #128]	@ (8001064 <HAL_PCD_MspInit+0xf0>)
 8000fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000fee:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000ff2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001008:	230a      	movs	r3, #10
 800100a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001012:	4619      	mov	r1, r3
 8001014:	4814      	ldr	r0, [pc, #80]	@ (8001068 <HAL_PCD_MspInit+0xf4>)
 8001016:	f000 ff61 	bl	8001edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800101a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800101e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001032:	4619      	mov	r1, r3
 8001034:	480c      	ldr	r0, [pc, #48]	@ (8001068 <HAL_PCD_MspInit+0xf4>)
 8001036:	f000 ff51 	bl	8001edc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800103a:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <HAL_PCD_MspInit+0xf0>)
 800103c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001040:	4a08      	ldr	r2, [pc, #32]	@ (8001064 <HAL_PCD_MspInit+0xf0>)
 8001042:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001046:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_PCD_MspInit+0xf0>)
 800104c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001050:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001058:	bf00      	nop
 800105a:	37e8      	adds	r7, #232	@ 0xe8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40080000 	.word	0x40080000
 8001064:	58024400 	.word	0x58024400
 8001068:	58020000 	.word	0x58020000

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <NMI_Handler+0x4>

08001074 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <HardFault_Handler+0x4>

0800107c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <MemManage_Handler+0x4>

08001084 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <BusFault_Handler+0x4>

0800108c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <UsageFault_Handler+0x4>

08001094 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c2:	f000 f963 	bl	800138c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}

080010ca <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	usart3_interrupt();
 80010ce:	f7ff faa3 	bl	8000618 <usart3_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e0:	4a14      	ldr	r2, [pc, #80]	@ (8001134 <_sbrk+0x5c>)
 80010e2:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <_sbrk+0x60>)
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <_sbrk+0x64>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <_sbrk+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d207      	bcs.n	8001118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001108:	f005 fcf8 	bl	8006afc <__errno>
 800110c:	4603      	mov	r3, r0
 800110e:	220c      	movs	r2, #12
 8001110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e009      	b.n	800112c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111e:	4b07      	ldr	r3, [pc, #28]	@ (800113c <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	4a05      	ldr	r2, [pc, #20]	@ (800113c <_sbrk+0x64>)
 8001128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	24080000 	.word	0x24080000
 8001138:	00000400 	.word	0x00000400
 800113c:	24000f7c 	.word	0x24000f7c
 8001140:	240010d0 	.word	0x240010d0

08001144 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001148:	4b37      	ldr	r3, [pc, #220]	@ (8001228 <SystemInit+0xe4>)
 800114a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800114e:	4a36      	ldr	r2, [pc, #216]	@ (8001228 <SystemInit+0xe4>)
 8001150:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001154:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001158:	4b34      	ldr	r3, [pc, #208]	@ (800122c <SystemInit+0xe8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 030f 	and.w	r3, r3, #15
 8001160:	2b06      	cmp	r3, #6
 8001162:	d807      	bhi.n	8001174 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001164:	4b31      	ldr	r3, [pc, #196]	@ (800122c <SystemInit+0xe8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f023 030f 	bic.w	r3, r3, #15
 800116c:	4a2f      	ldr	r2, [pc, #188]	@ (800122c <SystemInit+0xe8>)
 800116e:	f043 0307 	orr.w	r3, r3, #7
 8001172:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001174:	4b2e      	ldr	r3, [pc, #184]	@ (8001230 <SystemInit+0xec>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a2d      	ldr	r2, [pc, #180]	@ (8001230 <SystemInit+0xec>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001180:	4b2b      	ldr	r3, [pc, #172]	@ (8001230 <SystemInit+0xec>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001186:	4b2a      	ldr	r3, [pc, #168]	@ (8001230 <SystemInit+0xec>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4929      	ldr	r1, [pc, #164]	@ (8001230 <SystemInit+0xec>)
 800118c:	4b29      	ldr	r3, [pc, #164]	@ (8001234 <SystemInit+0xf0>)
 800118e:	4013      	ands	r3, r2
 8001190:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001192:	4b26      	ldr	r3, [pc, #152]	@ (800122c <SystemInit+0xe8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d007      	beq.n	80011ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800119e:	4b23      	ldr	r3, [pc, #140]	@ (800122c <SystemInit+0xe8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f023 030f 	bic.w	r3, r3, #15
 80011a6:	4a21      	ldr	r2, [pc, #132]	@ (800122c <SystemInit+0xe8>)
 80011a8:	f043 0307 	orr.w	r3, r3, #7
 80011ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011ae:	4b20      	ldr	r3, [pc, #128]	@ (8001230 <SystemInit+0xec>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <SystemInit+0xec>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001230 <SystemInit+0xec>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001230 <SystemInit+0xec>)
 80011c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001238 <SystemInit+0xf4>)
 80011c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <SystemInit+0xec>)
 80011c8:	4a1c      	ldr	r2, [pc, #112]	@ (800123c <SystemInit+0xf8>)
 80011ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011cc:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <SystemInit+0xec>)
 80011ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001240 <SystemInit+0xfc>)
 80011d0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011d2:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <SystemInit+0xec>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011d8:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <SystemInit+0xec>)
 80011da:	4a19      	ldr	r2, [pc, #100]	@ (8001240 <SystemInit+0xfc>)
 80011dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <SystemInit+0xec>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <SystemInit+0xec>)
 80011e6:	4a16      	ldr	r2, [pc, #88]	@ (8001240 <SystemInit+0xfc>)
 80011e8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <SystemInit+0xec>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <SystemInit+0xec>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001230 <SystemInit+0xec>)
 80011f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <SystemInit+0xec>)
 80011fe:	2200      	movs	r2, #0
 8001200:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001202:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <SystemInit+0x100>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <SystemInit+0x104>)
 8001208:	4013      	ands	r3, r2
 800120a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800120e:	d202      	bcs.n	8001216 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001210:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <SystemInit+0x108>)
 8001212:	2201      	movs	r2, #1
 8001214:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001216:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <SystemInit+0x10c>)
 8001218:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800121c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00
 800122c:	52002000 	.word	0x52002000
 8001230:	58024400 	.word	0x58024400
 8001234:	eaf6ed7f 	.word	0xeaf6ed7f
 8001238:	02020200 	.word	0x02020200
 800123c:	01ff0000 	.word	0x01ff0000
 8001240:	01010280 	.word	0x01010280
 8001244:	5c001000 	.word	0x5c001000
 8001248:	ffff0000 	.word	0xffff0000
 800124c:	51008108 	.word	0x51008108
 8001250:	52004000 	.word	0x52004000

08001254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001254:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800128c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001258:	f7ff ff74 	bl	8001144 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800125c:	480c      	ldr	r0, [pc, #48]	@ (8001290 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800125e:	490d      	ldr	r1, [pc, #52]	@ (8001294 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001260:	4a0d      	ldr	r2, [pc, #52]	@ (8001298 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001264:	e002      	b.n	800126c <LoopCopyDataInit>

08001266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126a:	3304      	adds	r3, #4

0800126c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800126c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001270:	d3f9      	bcc.n	8001266 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001272:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001274:	4c0a      	ldr	r4, [pc, #40]	@ (80012a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001278:	e001      	b.n	800127e <LoopFillZerobss>

0800127a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800127c:	3204      	adds	r2, #4

0800127e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001280:	d3fb      	bcc.n	800127a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001282:	f005 fc41 	bl	8006b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001286:	f7ff fadd 	bl	8000844 <main>
  bx  lr
 800128a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800128c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001290:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001294:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001298:	08006c48 	.word	0x08006c48
  ldr r2, =_sbss
 800129c:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 80012a0:	240010cc 	.word	0x240010cc

080012a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <ADC3_IRQHandler>
	...

080012a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ae:	2003      	movs	r0, #3
 80012b0:	f000 f9a0 	bl	80015f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012b4:	f001 ff66 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 80012b8:	4602      	mov	r2, r0
 80012ba:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <HAL_Init+0x68>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	0a1b      	lsrs	r3, r3, #8
 80012c0:	f003 030f 	and.w	r3, r3, #15
 80012c4:	4913      	ldr	r1, [pc, #76]	@ (8001314 <HAL_Init+0x6c>)
 80012c6:	5ccb      	ldrb	r3, [r1, r3]
 80012c8:	f003 031f 	and.w	r3, r3, #31
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
 80012d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <HAL_Init+0x68>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	4a0e      	ldr	r2, [pc, #56]	@ (8001314 <HAL_Init+0x6c>)
 80012dc:	5cd3      	ldrb	r3, [r2, r3]
 80012de:	f003 031f 	and.w	r3, r3, #31
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	fa22 f303 	lsr.w	r3, r2, r3
 80012e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001318 <HAL_Init+0x70>)
 80012ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012ec:	4a0b      	ldr	r2, [pc, #44]	@ (800131c <HAL_Init+0x74>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012f2:	2000      	movs	r0, #0
 80012f4:	f000 f814 	bl	8001320 <HAL_InitTick>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e002      	b.n	8001308 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001302:	f7ff fcdd 	bl	8000cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	58024400 	.word	0x58024400
 8001314:	08006c00 	.word	0x08006c00
 8001318:	24000008 	.word	0x24000008
 800131c:	24000004 	.word	0x24000004

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001328:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <HAL_InitTick+0x60>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e021      	b.n	8001378 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001334:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <HAL_InitTick+0x64>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <HAL_InitTick+0x60>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001342:	fbb3 f3f1 	udiv	r3, r3, r1
 8001346:	fbb2 f3f3 	udiv	r3, r2, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f000 f985 	bl	800165a <HAL_SYSTICK_Config>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e00e      	b.n	8001378 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b0f      	cmp	r3, #15
 800135e:	d80a      	bhi.n	8001376 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001360:	2200      	movs	r2, #0
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f000 f94f 	bl	800160a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800136c:	4a06      	ldr	r2, [pc, #24]	@ (8001388 <HAL_InitTick+0x68>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	e000      	b.n	8001378 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	24000010 	.word	0x24000010
 8001384:	24000004 	.word	0x24000004
 8001388:	2400000c 	.word	0x2400000c

0800138c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_IncTick+0x20>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_IncTick+0x24>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	4a04      	ldr	r2, [pc, #16]	@ (80013b0 <HAL_IncTick+0x24>)
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	24000010 	.word	0x24000010
 80013b0:	24000f80 	.word	0x24000f80

080013b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b03      	ldr	r3, [pc, #12]	@ (80013c8 <HAL_GetTick+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	24000f80 	.word	0x24000f80

080013cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff ffee 	bl	80013b4 <HAL_GetTick>
 80013d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e4:	d005      	beq.n	80013f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <HAL_Delay+0x44>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4413      	add	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013f2:	bf00      	nop
 80013f4:	f7ff ffde 	bl	80013b4 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	d8f7      	bhi.n	80013f4 <HAL_Delay+0x28>
  {
  }
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	24000010 	.word	0x24000010

08001414 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001418:	4b03      	ldr	r3, [pc, #12]	@ (8001428 <HAL_GetREVID+0x14>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	0c1b      	lsrs	r3, r3, #16
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	5c001000 	.word	0x5c001000

0800142c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800143c:	4904      	ldr	r1, [pc, #16]	@ (8001450 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4313      	orrs	r3, r2
 8001442:	604b      	str	r3, [r1, #4]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	58000400 	.word	0x58000400

08001454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001464:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <__NVIC_SetPriorityGrouping+0x40>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001470:	4013      	ands	r3, r2
 8001472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 800147e:	4313      	orrs	r3, r2
 8001480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001482:	4a04      	ldr	r2, [pc, #16]	@ (8001494 <__NVIC_SetPriorityGrouping+0x40>)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	60d3      	str	r3, [r2, #12]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00
 8001498:	05fa0000 	.word	0x05fa0000

0800149c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a0:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <__NVIC_GetPriorityGrouping+0x18>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	f003 0307 	and.w	r3, r3, #7
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	db0b      	blt.n	80014e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	f003 021f 	and.w	r2, r3, #31
 80014d0:	4907      	ldr	r1, [pc, #28]	@ (80014f0 <__NVIC_EnableIRQ+0x38>)
 80014d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d6:	095b      	lsrs	r3, r3, #5
 80014d8:	2001      	movs	r0, #1
 80014da:	fa00 f202 	lsl.w	r2, r0, r2
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000e100 	.word	0xe000e100

080014f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001500:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001504:	2b00      	cmp	r3, #0
 8001506:	db0a      	blt.n	800151e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	490c      	ldr	r1, [pc, #48]	@ (8001540 <__NVIC_SetPriority+0x4c>)
 800150e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001512:	0112      	lsls	r2, r2, #4
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	440b      	add	r3, r1
 8001518:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800151c:	e00a      	b.n	8001534 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4908      	ldr	r1, [pc, #32]	@ (8001544 <__NVIC_SetPriority+0x50>)
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	3b04      	subs	r3, #4
 800152c:	0112      	lsls	r2, r2, #4
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	440b      	add	r3, r1
 8001532:	761a      	strb	r2, [r3, #24]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000e100 	.word	0xe000e100
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	@ 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f1c3 0307 	rsb	r3, r3, #7
 8001562:	2b04      	cmp	r3, #4
 8001564:	bf28      	it	cs
 8001566:	2304      	movcs	r3, #4
 8001568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3304      	adds	r3, #4
 800156e:	2b06      	cmp	r3, #6
 8001570:	d902      	bls.n	8001578 <NVIC_EncodePriority+0x30>
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3b03      	subs	r3, #3
 8001576:	e000      	b.n	800157a <NVIC_EncodePriority+0x32>
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	f04f 32ff 	mov.w	r2, #4294967295
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	401a      	ands	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001590:	f04f 31ff 	mov.w	r1, #4294967295
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	fa01 f303 	lsl.w	r3, r1, r3
 800159a:	43d9      	mvns	r1, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	4313      	orrs	r3, r2
         );
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3724      	adds	r7, #36	@ 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015c0:	d301      	bcc.n	80015c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00f      	b.n	80015e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c6:	4a0a      	ldr	r2, [pc, #40]	@ (80015f0 <SysTick_Config+0x40>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ce:	210f      	movs	r1, #15
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f7ff ff8e 	bl	80014f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d8:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <SysTick_Config+0x40>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015de:	4b04      	ldr	r3, [pc, #16]	@ (80015f0 <SysTick_Config+0x40>)
 80015e0:	2207      	movs	r2, #7
 80015e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	e000e010 	.word	0xe000e010

080015f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff29 	bl	8001454 <__NVIC_SetPriorityGrouping>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001618:	f7ff ff40 	bl	800149c <__NVIC_GetPriorityGrouping>
 800161c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f7ff ff90 	bl	8001548 <NVIC_EncodePriority>
 8001628:	4602      	mov	r2, r0
 800162a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff5f 	bl	80014f4 <__NVIC_SetPriority>
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001648:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff33 	bl	80014b8 <__NVIC_EnableIRQ>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffa4 	bl	80015b0 <SysTick_Config>
 8001668:	4603      	mov	r3, r0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e0e3      	b.n	800184e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800168c:	2b00      	cmp	r3, #0
 800168e:	d106      	bne.n	800169e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2223      	movs	r2, #35	@ 0x23
 8001694:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fb2b 	bl	8000cf4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	4b6e      	ldr	r3, [pc, #440]	@ (8001858 <HAL_ETH_Init+0x1e4>)
 80016a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016a4:	4a6c      	ldr	r2, [pc, #432]	@ (8001858 <HAL_ETH_Init+0x1e4>)
 80016a6:	f043 0302 	orr.w	r3, r3, #2
 80016aa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001858 <HAL_ETH_Init+0x1e4>)
 80016b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7a1b      	ldrb	r3, [r3, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d103      	bne.n	80016cc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80016c4:	2000      	movs	r0, #0
 80016c6:	f7ff feb1 	bl	800142c <HAL_SYSCFG_ETHInterfaceSelect>
 80016ca:	e003      	b.n	80016d4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80016cc:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80016d0:	f7ff feac 	bl	800142c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80016d4:	4b61      	ldr	r3, [pc, #388]	@ (800185c <HAL_ETH_Init+0x1e8>)
 80016d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016f0:	f7ff fe60 	bl	80013b4 <HAL_GetTick>
 80016f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80016f6:	e011      	b.n	800171c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80016f8:	f7ff fe5c 	bl	80013b4 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001706:	d909      	bls.n	800171c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2204      	movs	r2, #4
 800170c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	22e0      	movs	r2, #224	@ 0xe0
 8001714:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e098      	b.n	800184e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1e4      	bne.n	80016f8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f89e 	bl	8001870 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001734:	f001 fea0 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 8001738:	4603      	mov	r3, r0
 800173a:	4a49      	ldr	r2, [pc, #292]	@ (8001860 <HAL_ETH_Init+0x1ec>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	0c9a      	lsrs	r2, r3, #18
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3a01      	subs	r2, #1
 8001748:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fa81 	bl	8001c54 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800175a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800175e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6812      	ldr	r2, [r2, #0]
 8001766:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800176a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800176e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d009      	beq.n	8001792 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	22e0      	movs	r2, #224	@ 0xe0
 800178a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e05d      	b.n	800184e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800179a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800179e:	4b31      	ldr	r3, [pc, #196]	@ (8001864 <HAL_ETH_Init+0x1f0>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6952      	ldr	r2, [r2, #20]
 80017a6:	0051      	lsls	r1, r2, #1
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	430b      	orrs	r3, r1
 80017ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017b2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fae9 	bl	8001d8e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 fb2f 	bl	8001e20 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	3305      	adds	r3, #5
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	021a      	lsls	r2, r3, #8
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	3304      	adds	r3, #4
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	3303      	adds	r3, #3
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	061a      	lsls	r2, r3, #24
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	3302      	adds	r3, #2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	041b      	lsls	r3, r3, #16
 80017f4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	3301      	adds	r3, #1
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001800:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800180e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001810:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <HAL_ETH_Init+0x1f4>)
 8001822:	430b      	orrs	r3, r1
 8001824:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b0d      	ldr	r3, [pc, #52]	@ (800186c <HAL_ETH_Init+0x1f8>)
 8001836:	430b      	orrs	r3, r1
 8001838:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2210      	movs	r2, #16
 8001848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	58024400 	.word	0x58024400
 800185c:	58000400 	.word	0x58000400
 8001860:	431bde83 	.word	0x431bde83
 8001864:	ffff8001 	.word	0xffff8001
 8001868:	0c020060 	.word	0x0c020060
 800186c:	0c20c000 	.word	0x0c20c000

08001870 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001880:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001888:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800188a:	f001 fdf5 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 800188e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4a1a      	ldr	r2, [pc, #104]	@ (80018fc <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d804      	bhi.n	80018a2 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	e022      	b.n	80018e8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	4a16      	ldr	r2, [pc, #88]	@ (8001900 <HAL_ETH_SetMDIOClockRange+0x90>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d204      	bcs.n	80018b4 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	e019      	b.n	80018e8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	4a13      	ldr	r2, [pc, #76]	@ (8001904 <HAL_ETH_SetMDIOClockRange+0x94>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d915      	bls.n	80018e8 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	4a12      	ldr	r2, [pc, #72]	@ (8001908 <HAL_ETH_SetMDIOClockRange+0x98>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d804      	bhi.n	80018ce <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	e00c      	b.n	80018e8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	4a0e      	ldr	r2, [pc, #56]	@ (800190c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d804      	bhi.n	80018e0 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	e003      	b.n	80018e8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80018e6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	02160ebf 	.word	0x02160ebf
 8001900:	03938700 	.word	0x03938700
 8001904:	05f5e0ff 	.word	0x05f5e0ff
 8001908:	08f0d17f 	.word	0x08f0d17f
 800190c:	0ee6b27f 	.word	0x0ee6b27f

08001910 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001922:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	791b      	ldrb	r3, [r3, #4]
 8001928:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800192a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	7b1b      	ldrb	r3, [r3, #12]
 8001930:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001932:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	7b5b      	ldrb	r3, [r3, #13]
 8001938:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800193a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	7b9b      	ldrb	r3, [r3, #14]
 8001940:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001942:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	7bdb      	ldrb	r3, [r3, #15]
 8001948:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800194a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	7c12      	ldrb	r2, [r2, #16]
 8001950:	2a00      	cmp	r2, #0
 8001952:	d102      	bne.n	800195a <ETH_SetMACConfig+0x4a>
 8001954:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001958:	e000      	b.n	800195c <ETH_SetMACConfig+0x4c>
 800195a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800195c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	7c52      	ldrb	r2, [r2, #17]
 8001962:	2a00      	cmp	r2, #0
 8001964:	d102      	bne.n	800196c <ETH_SetMACConfig+0x5c>
 8001966:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800196a:	e000      	b.n	800196e <ETH_SetMACConfig+0x5e>
 800196c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800196e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	7c9b      	ldrb	r3, [r3, #18]
 8001974:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001976:	431a      	orrs	r2, r3
               macconf->Speed |
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800197c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001982:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	7f1b      	ldrb	r3, [r3, #28]
 8001988:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800198a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	7f5b      	ldrb	r3, [r3, #29]
 8001990:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001992:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	7f92      	ldrb	r2, [r2, #30]
 8001998:	2a00      	cmp	r2, #0
 800199a:	d102      	bne.n	80019a2 <ETH_SetMACConfig+0x92>
 800199c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019a0:	e000      	b.n	80019a4 <ETH_SetMACConfig+0x94>
 80019a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80019a4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	7fdb      	ldrb	r3, [r3, #31]
 80019aa:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80019ac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80019b4:	2a00      	cmp	r2, #0
 80019b6:	d102      	bne.n	80019be <ETH_SetMACConfig+0xae>
 80019b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019bc:	e000      	b.n	80019c0 <ETH_SetMACConfig+0xb0>
 80019be:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80019c0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80019c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80019ce:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80019d0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80019d6:	4313      	orrs	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b56      	ldr	r3, [pc, #344]	@ (8001b3c <ETH_SetMACConfig+0x22c>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	68f9      	ldr	r1, [r7, #12]
 80019ea:	430b      	orrs	r3, r1
 80019ec:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019fa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80019fc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a04:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001a0e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a10:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001a18:	2a00      	cmp	r2, #0
 8001a1a:	d102      	bne.n	8001a22 <ETH_SetMACConfig+0x112>
 8001a1c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a20:	e000      	b.n	8001a24 <ETH_SetMACConfig+0x114>
 8001a22:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a24:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	4b42      	ldr	r3, [pc, #264]	@ (8001b40 <ETH_SetMACConfig+0x230>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	68f9      	ldr	r1, [r7, #12]
 8001a3e:	430b      	orrs	r3, r1
 8001a40:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a48:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	4b3a      	ldr	r3, [pc, #232]	@ (8001b44 <ETH_SetMACConfig+0x234>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	68f9      	ldr	r1, [r7, #12]
 8001a62:	430b      	orrs	r3, r1
 8001a64:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a6c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a72:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001a7a:	2a00      	cmp	r2, #0
 8001a7c:	d101      	bne.n	8001a82 <ETH_SetMACConfig+0x172>
 8001a7e:	2280      	movs	r2, #128	@ 0x80
 8001a80:	e000      	b.n	8001a84 <ETH_SetMACConfig+0x174>
 8001a82:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001a84:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a8a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001a96:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	68f9      	ldr	r1, [r7, #12]
 8001aa2:	430b      	orrs	r3, r1
 8001aa4:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001aac:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001ab4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ac2:	f023 0103 	bic.w	r1, r3, #3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001ada:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001af6:	2a00      	cmp	r2, #0
 8001af8:	d101      	bne.n	8001afe <ETH_SetMACConfig+0x1ee>
 8001afa:	2240      	movs	r2, #64	@ 0x40
 8001afc:	e000      	b.n	8001b00 <ETH_SetMACConfig+0x1f0>
 8001afe:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001b00:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001b08:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001b12:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001b14:	4313      	orrs	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001b20:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	00048083 	.word	0x00048083
 8001b40:	c0f88000 	.word	0xc0f88000
 8001b44:	fffffef0 	.word	0xfffffef0

08001b48 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b38      	ldr	r3, [pc, #224]	@ (8001c40 <ETH_SetDMAConfig+0xf8>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	6811      	ldr	r1, [r2, #0]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	430b      	orrs	r3, r1
 8001b6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b6e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	791b      	ldrb	r3, [r3, #4]
 8001b74:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b7a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	7b1b      	ldrb	r3, [r3, #12]
 8001b80:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b82:	4313      	orrs	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	4b2c      	ldr	r3, [pc, #176]	@ (8001c44 <ETH_SetDMAConfig+0xfc>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	68f9      	ldr	r1, [r7, #12]
 8001b9a:	430b      	orrs	r3, r1
 8001b9c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ba0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	7b5b      	ldrb	r3, [r3, #13]
 8001ba6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001bac:	4313      	orrs	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bb8:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001bbc:	4b22      	ldr	r3, [pc, #136]	@ (8001c48 <ETH_SetDMAConfig+0x100>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	68f9      	ldr	r1, [r7, #12]
 8001bc6:	430b      	orrs	r3, r1
 8001bc8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bcc:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	7d1b      	ldrb	r3, [r3, #20]
 8001bd8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bda:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	7f5b      	ldrb	r3, [r3, #29]
 8001be0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bee:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001bf2:	4b16      	ldr	r3, [pc, #88]	@ (8001c4c <ETH_SetDMAConfig+0x104>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	68f9      	ldr	r1, [r7, #12]
 8001bfc:	430b      	orrs	r3, r1
 8001bfe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c02:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	7f1b      	ldrb	r3, [r3, #28]
 8001c0a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c10:	4313      	orrs	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c1c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001c20:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <ETH_SetDMAConfig+0x108>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	68f9      	ldr	r1, [r7, #12]
 8001c2a:	430b      	orrs	r3, r1
 8001c2c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c30:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	ffff87fd 	.word	0xffff87fd
 8001c44:	ffff2ffe 	.word	0xffff2ffe
 8001c48:	fffec000 	.word	0xfffec000
 8001c4c:	ffc0efef 	.word	0xffc0efef
 8001c50:	7fc0ffff 	.word	0x7fc0ffff

08001c54 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b0a4      	sub	sp, #144	@ 0x90
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c62:	2300      	movs	r3, #0
 8001c64:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c94:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001cac:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001cb0:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001cec:	2320      	movs	r3, #32
 8001cee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001cfe:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d04:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d08:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001d10:	2302      	movs	r3, #2
 8001d12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff fde6 	bl	8001910 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d44:	2301      	movs	r3, #1
 8001d46:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d5e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d62:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d68:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d6c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001d74:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001d78:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d7a:	f107 0308 	add.w	r3, r7, #8
 8001d7e:	4619      	mov	r1, r3
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff fee1 	bl	8001b48 <ETH_SetDMAConfig>
}
 8001d86:	bf00      	nop
 8001d88:	3790      	adds	r7, #144	@ 0x90
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b085      	sub	sp, #20
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	e01d      	b.n	8001dd8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68d9      	ldr	r1, [r3, #12]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4613      	mov	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	440b      	add	r3, r1
 8001dac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2200      	movs	r2, #0
 8001db8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001dc6:	68b9      	ldr	r1, [r7, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	3206      	adds	r2, #6
 8001dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d9de      	bls.n	8001d9c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dec:	461a      	mov	r2, r3
 8001dee:	2303      	movs	r3, #3
 8001df0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e00:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e10:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	e023      	b.n	8001e76 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6919      	ldr	r1, [r3, #16]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	440b      	add	r3, r1
 8001e3e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2200      	movs	r2, #0
 8001e56:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2200      	movs	r2, #0
 8001e62:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	3212      	adds	r2, #18
 8001e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	3301      	adds	r3, #1
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d9d8      	bls.n	8001e2e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691a      	ldr	r2, [r3, #16]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eb6:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eca:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	@ 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001eea:	4b89      	ldr	r3, [pc, #548]	@ (8002110 <HAL_GPIO_Init+0x234>)
 8001eec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001eee:	e194      	b.n	800221a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 8186 	beq.w	8002214 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d005      	beq.n	8001f20 <HAL_GPIO_Init+0x44>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d130      	bne.n	8001f82 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f56:	2201      	movs	r2, #1
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	f003 0201 	and.w	r2, r3, #1
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d017      	beq.n	8001fbe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d123      	bne.n	8002012 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	08da      	lsrs	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3208      	adds	r2, #8
 8001fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	08da      	lsrs	r2, r3, #3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3208      	adds	r2, #8
 800200c:	69b9      	ldr	r1, [r7, #24]
 800200e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0203 	and.w	r2, r3, #3
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 80e0 	beq.w	8002214 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002054:	4b2f      	ldr	r3, [pc, #188]	@ (8002114 <HAL_GPIO_Init+0x238>)
 8002056:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800205a:	4a2e      	ldr	r2, [pc, #184]	@ (8002114 <HAL_GPIO_Init+0x238>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002064:	4b2b      	ldr	r3, [pc, #172]	@ (8002114 <HAL_GPIO_Init+0x238>)
 8002066:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002072:	4a29      	ldr	r2, [pc, #164]	@ (8002118 <HAL_GPIO_Init+0x23c>)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	3302      	adds	r3, #2
 800207a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	220f      	movs	r2, #15
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a20      	ldr	r2, [pc, #128]	@ (800211c <HAL_GPIO_Init+0x240>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d052      	beq.n	8002144 <HAL_GPIO_Init+0x268>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002120 <HAL_GPIO_Init+0x244>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d031      	beq.n	800210a <HAL_GPIO_Init+0x22e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002124 <HAL_GPIO_Init+0x248>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d02b      	beq.n	8002106 <HAL_GPIO_Init+0x22a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002128 <HAL_GPIO_Init+0x24c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d025      	beq.n	8002102 <HAL_GPIO_Init+0x226>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a1c      	ldr	r2, [pc, #112]	@ (800212c <HAL_GPIO_Init+0x250>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d01f      	beq.n	80020fe <HAL_GPIO_Init+0x222>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002130 <HAL_GPIO_Init+0x254>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d019      	beq.n	80020fa <HAL_GPIO_Init+0x21e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002134 <HAL_GPIO_Init+0x258>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d013      	beq.n	80020f6 <HAL_GPIO_Init+0x21a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a19      	ldr	r2, [pc, #100]	@ (8002138 <HAL_GPIO_Init+0x25c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00d      	beq.n	80020f2 <HAL_GPIO_Init+0x216>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a18      	ldr	r2, [pc, #96]	@ (800213c <HAL_GPIO_Init+0x260>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d007      	beq.n	80020ee <HAL_GPIO_Init+0x212>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a17      	ldr	r2, [pc, #92]	@ (8002140 <HAL_GPIO_Init+0x264>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d101      	bne.n	80020ea <HAL_GPIO_Init+0x20e>
 80020e6:	2309      	movs	r3, #9
 80020e8:	e02d      	b.n	8002146 <HAL_GPIO_Init+0x26a>
 80020ea:	230a      	movs	r3, #10
 80020ec:	e02b      	b.n	8002146 <HAL_GPIO_Init+0x26a>
 80020ee:	2308      	movs	r3, #8
 80020f0:	e029      	b.n	8002146 <HAL_GPIO_Init+0x26a>
 80020f2:	2307      	movs	r3, #7
 80020f4:	e027      	b.n	8002146 <HAL_GPIO_Init+0x26a>
 80020f6:	2306      	movs	r3, #6
 80020f8:	e025      	b.n	8002146 <HAL_GPIO_Init+0x26a>
 80020fa:	2305      	movs	r3, #5
 80020fc:	e023      	b.n	8002146 <HAL_GPIO_Init+0x26a>
 80020fe:	2304      	movs	r3, #4
 8002100:	e021      	b.n	8002146 <HAL_GPIO_Init+0x26a>
 8002102:	2303      	movs	r3, #3
 8002104:	e01f      	b.n	8002146 <HAL_GPIO_Init+0x26a>
 8002106:	2302      	movs	r3, #2
 8002108:	e01d      	b.n	8002146 <HAL_GPIO_Init+0x26a>
 800210a:	2301      	movs	r3, #1
 800210c:	e01b      	b.n	8002146 <HAL_GPIO_Init+0x26a>
 800210e:	bf00      	nop
 8002110:	58000080 	.word	0x58000080
 8002114:	58024400 	.word	0x58024400
 8002118:	58000400 	.word	0x58000400
 800211c:	58020000 	.word	0x58020000
 8002120:	58020400 	.word	0x58020400
 8002124:	58020800 	.word	0x58020800
 8002128:	58020c00 	.word	0x58020c00
 800212c:	58021000 	.word	0x58021000
 8002130:	58021400 	.word	0x58021400
 8002134:	58021800 	.word	0x58021800
 8002138:	58021c00 	.word	0x58021c00
 800213c:	58022000 	.word	0x58022000
 8002140:	58022400 	.word	0x58022400
 8002144:	2300      	movs	r3, #0
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	f002 0203 	and.w	r2, r2, #3
 800214c:	0092      	lsls	r2, r2, #2
 800214e:	4093      	lsls	r3, r2
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002156:	4938      	ldr	r1, [pc, #224]	@ (8002238 <HAL_GPIO_Init+0x35c>)
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	3302      	adds	r3, #2
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800218a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	3301      	adds	r3, #1
 8002218:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	f47f ae63 	bne.w	8001ef0 <HAL_GPIO_Init+0x14>
  }
}
 800222a:	bf00      	nop
 800222c:	bf00      	nop
 800222e:	3724      	adds	r7, #36	@ 0x24
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	58000400 	.word	0x58000400

0800223c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]
 8002248:	4613      	mov	r3, r2
 800224a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800224c:	787b      	ldrb	r3, [r7, #1]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002258:	e003      	b.n	8002262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800225a:	887b      	ldrh	r3, [r7, #2]
 800225c:	041a      	lsls	r2, r3, #16
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	619a      	str	r2, [r3, #24]
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af02      	add	r7, sp, #8
 8002274:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0fe      	b.n	800247e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d106      	bne.n	800229a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7fe fe6d 	bl	8000f74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2203      	movs	r2, #3
 800229e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f004 f8bc 	bl	8006424 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	7c1a      	ldrb	r2, [r3, #16]
 80022b4:	f88d 2000 	strb.w	r2, [sp]
 80022b8:	3304      	adds	r3, #4
 80022ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022bc:	f004 f840 	bl	8006340 <USB_CoreInit>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2202      	movs	r2, #2
 80022ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e0d5      	b.n	800247e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f004 f8b4 	bl	8006446 <USB_SetCurrentMode>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0c6      	b.n	800247e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f0:	2300      	movs	r3, #0
 80022f2:	73fb      	strb	r3, [r7, #15]
 80022f4:	e04a      	b.n	800238c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4413      	add	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	3315      	adds	r3, #21
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	3314      	adds	r3, #20
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	b298      	uxth	r0, r3
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	332e      	adds	r3, #46	@ 0x2e
 8002332:	4602      	mov	r2, r0
 8002334:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	3318      	adds	r3, #24
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	331c      	adds	r3, #28
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	3320      	adds	r3, #32
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	3324      	adds	r3, #36	@ 0x24
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	3301      	adds	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	791b      	ldrb	r3, [r3, #4]
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	429a      	cmp	r2, r3
 8002394:	d3af      	bcc.n	80022f6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002396:	2300      	movs	r3, #0
 8002398:	73fb      	strb	r3, [r7, #15]
 800239a:	e044      	b.n	8002426 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800239c:	7bfa      	ldrb	r2, [r7, #15]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023b2:	7bfa      	ldrb	r2, [r7, #15]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023c8:	7bfa      	ldrb	r2, [r7, #15]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023f4:	7bfa      	ldrb	r2, [r7, #15]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800240a:	7bfa      	ldrb	r2, [r7, #15]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	3301      	adds	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	791b      	ldrb	r3, [r3, #4]
 800242a:	7bfa      	ldrb	r2, [r7, #15]
 800242c:	429a      	cmp	r2, r3
 800242e:	d3b5      	bcc.n	800239c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	7c1a      	ldrb	r2, [r3, #16]
 8002438:	f88d 2000 	strb.w	r2, [sp]
 800243c:	3304      	adds	r3, #4
 800243e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002440:	f004 f84e 	bl	80064e0 <USB_DevInit>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d005      	beq.n	8002456 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2202      	movs	r2, #2
 800244e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e013      	b.n	800247e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7b1b      	ldrb	r3, [r3, #12]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d102      	bne.n	8002472 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f80b 	bl	8002488 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f004 fa09 	bl	800688e <USB_DevDisconnect>

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80024b6:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <HAL_PCDEx_ActivateLPM+0x44>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	10000003 	.word	0x10000003

080024d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80024d8:	4b19      	ldr	r3, [pc, #100]	@ (8002540 <HAL_PWREx_ConfigSupply+0x70>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d00a      	beq.n	80024fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024e4:	4b16      	ldr	r3, [pc, #88]	@ (8002540 <HAL_PWREx_ConfigSupply+0x70>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d001      	beq.n	80024f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e01f      	b.n	8002536 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e01d      	b.n	8002536 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024fa:	4b11      	ldr	r3, [pc, #68]	@ (8002540 <HAL_PWREx_ConfigSupply+0x70>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f023 0207 	bic.w	r2, r3, #7
 8002502:	490f      	ldr	r1, [pc, #60]	@ (8002540 <HAL_PWREx_ConfigSupply+0x70>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4313      	orrs	r3, r2
 8002508:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800250a:	f7fe ff53 	bl	80013b4 <HAL_GetTick>
 800250e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002510:	e009      	b.n	8002526 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002512:	f7fe ff4f 	bl	80013b4 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002520:	d901      	bls.n	8002526 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e007      	b.n	8002536 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002526:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <HAL_PWREx_ConfigSupply+0x70>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800252e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002532:	d1ee      	bne.n	8002512 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	58024800 	.word	0x58024800

08002544 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002548:	4b05      	ldr	r3, [pc, #20]	@ (8002560 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4a04      	ldr	r2, [pc, #16]	@ (8002560 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800254e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002552:	60d3      	str	r3, [r2, #12]
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	58024800 	.word	0x58024800

08002564 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08c      	sub	sp, #48	@ 0x30
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	f000 bc48 	b.w	8002e08 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 8088 	beq.w	8002696 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002586:	4b99      	ldr	r3, [pc, #612]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800258e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002590:	4b96      	ldr	r3, [pc, #600]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 8002592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002594:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002598:	2b10      	cmp	r3, #16
 800259a:	d007      	beq.n	80025ac <HAL_RCC_OscConfig+0x48>
 800259c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800259e:	2b18      	cmp	r3, #24
 80025a0:	d111      	bne.n	80025c6 <HAL_RCC_OscConfig+0x62>
 80025a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d10c      	bne.n	80025c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	4b8f      	ldr	r3, [pc, #572]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d06d      	beq.n	8002694 <HAL_RCC_OscConfig+0x130>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d169      	bne.n	8002694 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f000 bc21 	b.w	8002e08 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x7a>
 80025d0:	4b86      	ldr	r3, [pc, #536]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a85      	ldr	r2, [pc, #532]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 80025d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	e02e      	b.n	800263c <HAL_RCC_OscConfig+0xd8>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x9c>
 80025e6:	4b81      	ldr	r3, [pc, #516]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a80      	ldr	r2, [pc, #512]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 80025ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b7e      	ldr	r3, [pc, #504]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a7d      	ldr	r2, [pc, #500]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 80025f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e01d      	b.n	800263c <HAL_RCC_OscConfig+0xd8>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002608:	d10c      	bne.n	8002624 <HAL_RCC_OscConfig+0xc0>
 800260a:	4b78      	ldr	r3, [pc, #480]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a77      	ldr	r2, [pc, #476]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 8002610:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	4b75      	ldr	r3, [pc, #468]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a74      	ldr	r2, [pc, #464]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 800261c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e00b      	b.n	800263c <HAL_RCC_OscConfig+0xd8>
 8002624:	4b71      	ldr	r3, [pc, #452]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a70      	ldr	r2, [pc, #448]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 800262a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	4b6e      	ldr	r3, [pc, #440]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a6d      	ldr	r2, [pc, #436]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 8002636:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800263a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d013      	beq.n	800266c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7fe feb6 	bl	80013b4 <HAL_GetTick>
 8002648:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800264c:	f7fe feb2 	bl	80013b4 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	@ 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e3d4      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800265e:	4b63      	ldr	r3, [pc, #396]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0xe8>
 800266a:	e014      	b.n	8002696 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe fea2 	bl	80013b4 <HAL_GetTick>
 8002670:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002674:	f7fe fe9e 	bl	80013b4 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	@ 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e3c0      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002686:	4b59      	ldr	r3, [pc, #356]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x110>
 8002692:	e000      	b.n	8002696 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 80ca 	beq.w	8002838 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a4:	4b51      	ldr	r3, [pc, #324]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026ae:	4b4f      	ldr	r3, [pc, #316]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 80026b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_RCC_OscConfig+0x166>
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	2b18      	cmp	r3, #24
 80026be:	d156      	bne.n	800276e <HAL_RCC_OscConfig+0x20a>
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d151      	bne.n	800276e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ca:	4b48      	ldr	r3, [pc, #288]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x17e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e392      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026e2:	4b42      	ldr	r3, [pc, #264]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 0219 	bic.w	r2, r3, #25
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	493f      	ldr	r1, [pc, #252]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fe5e 	bl	80013b4 <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fc:	f7fe fe5a 	bl	80013b4 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e37c      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800270e:	4b37      	ldr	r3, [pc, #220]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271a:	f7fe fe7b 	bl	8001414 <HAL_GetREVID>
 800271e:	4603      	mov	r3, r0
 8002720:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002724:	4293      	cmp	r3, r2
 8002726:	d817      	bhi.n	8002758 <HAL_RCC_OscConfig+0x1f4>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b40      	cmp	r3, #64	@ 0x40
 800272e:	d108      	bne.n	8002742 <HAL_RCC_OscConfig+0x1de>
 8002730:	4b2e      	ldr	r3, [pc, #184]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002738:	4a2c      	ldr	r2, [pc, #176]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 800273a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800273e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002740:	e07a      	b.n	8002838 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002742:	4b2a      	ldr	r3, [pc, #168]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	031b      	lsls	r3, r3, #12
 8002750:	4926      	ldr	r1, [pc, #152]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002756:	e06f      	b.n	8002838 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002758:	4b24      	ldr	r3, [pc, #144]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	061b      	lsls	r3, r3, #24
 8002766:	4921      	ldr	r1, [pc, #132]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800276c:	e064      	b.n	8002838 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d047      	beq.n	8002806 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002776:	4b1d      	ldr	r3, [pc, #116]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 0219 	bic.w	r2, r3, #25
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	491a      	ldr	r1, [pc, #104]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 8002784:	4313      	orrs	r3, r2
 8002786:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe fe14 	bl	80013b4 <HAL_GetTick>
 800278c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002790:	f7fe fe10 	bl	80013b4 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e332      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027a2:	4b12      	ldr	r3, [pc, #72]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ae:	f7fe fe31 	bl	8001414 <HAL_GetREVID>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d819      	bhi.n	80027f0 <HAL_RCC_OscConfig+0x28c>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	2b40      	cmp	r3, #64	@ 0x40
 80027c2:	d108      	bne.n	80027d6 <HAL_RCC_OscConfig+0x272>
 80027c4:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80027cc:	4a07      	ldr	r2, [pc, #28]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 80027ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d2:	6053      	str	r3, [r2, #4]
 80027d4:	e030      	b.n	8002838 <HAL_RCC_OscConfig+0x2d4>
 80027d6:	4b05      	ldr	r3, [pc, #20]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	031b      	lsls	r3, r3, #12
 80027e4:	4901      	ldr	r1, [pc, #4]	@ (80027ec <HAL_RCC_OscConfig+0x288>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
 80027ea:	e025      	b.n	8002838 <HAL_RCC_OscConfig+0x2d4>
 80027ec:	58024400 	.word	0x58024400
 80027f0:	4b9a      	ldr	r3, [pc, #616]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	061b      	lsls	r3, r3, #24
 80027fe:	4997      	ldr	r1, [pc, #604]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
 8002804:	e018      	b.n	8002838 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002806:	4b95      	ldr	r3, [pc, #596]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a94      	ldr	r2, [pc, #592]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002812:	f7fe fdcf 	bl	80013b4 <HAL_GetTick>
 8002816:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281a:	f7fe fdcb 	bl	80013b4 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e2ed      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800282c:	4b8b      	ldr	r3, [pc, #556]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f0      	bne.n	800281a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80a9 	beq.w	8002998 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002846:	4b85      	ldr	r3, [pc, #532]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800284e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002850:	4b82      	ldr	r3, [pc, #520]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002854:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	2b08      	cmp	r3, #8
 800285a:	d007      	beq.n	800286c <HAL_RCC_OscConfig+0x308>
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2b18      	cmp	r3, #24
 8002860:	d13a      	bne.n	80028d8 <HAL_RCC_OscConfig+0x374>
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d135      	bne.n	80028d8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800286c:	4b7b      	ldr	r3, [pc, #492]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_OscConfig+0x320>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	2b80      	cmp	r3, #128	@ 0x80
 800287e:	d001      	beq.n	8002884 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e2c1      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002884:	f7fe fdc6 	bl	8001414 <HAL_GetREVID>
 8002888:	4603      	mov	r3, r0
 800288a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800288e:	4293      	cmp	r3, r2
 8002890:	d817      	bhi.n	80028c2 <HAL_RCC_OscConfig+0x35e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	2b20      	cmp	r3, #32
 8002898:	d108      	bne.n	80028ac <HAL_RCC_OscConfig+0x348>
 800289a:	4b70      	ldr	r3, [pc, #448]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80028a2:	4a6e      	ldr	r2, [pc, #440]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80028a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80028a8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028aa:	e075      	b.n	8002998 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028ac:	4b6b      	ldr	r3, [pc, #428]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	069b      	lsls	r3, r3, #26
 80028ba:	4968      	ldr	r1, [pc, #416]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028c0:	e06a      	b.n	8002998 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028c2:	4b66      	ldr	r3, [pc, #408]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	061b      	lsls	r3, r3, #24
 80028d0:	4962      	ldr	r1, [pc, #392]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028d6:	e05f      	b.n	8002998 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d042      	beq.n	8002966 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80028e0:	4b5e      	ldr	r3, [pc, #376]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a5d      	ldr	r2, [pc, #372]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80028e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe fd62 	bl	80013b4 <HAL_GetTick>
 80028f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028f4:	f7fe fd5e 	bl	80013b4 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e280      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002906:	4b55      	ldr	r3, [pc, #340]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002912:	f7fe fd7f 	bl	8001414 <HAL_GetREVID>
 8002916:	4603      	mov	r3, r0
 8002918:	f241 0203 	movw	r2, #4099	@ 0x1003
 800291c:	4293      	cmp	r3, r2
 800291e:	d817      	bhi.n	8002950 <HAL_RCC_OscConfig+0x3ec>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	2b20      	cmp	r3, #32
 8002926:	d108      	bne.n	800293a <HAL_RCC_OscConfig+0x3d6>
 8002928:	4b4c      	ldr	r3, [pc, #304]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002930:	4a4a      	ldr	r2, [pc, #296]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002932:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002936:	6053      	str	r3, [r2, #4]
 8002938:	e02e      	b.n	8002998 <HAL_RCC_OscConfig+0x434>
 800293a:	4b48      	ldr	r3, [pc, #288]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	069b      	lsls	r3, r3, #26
 8002948:	4944      	ldr	r1, [pc, #272]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
 800294e:	e023      	b.n	8002998 <HAL_RCC_OscConfig+0x434>
 8002950:	4b42      	ldr	r3, [pc, #264]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	061b      	lsls	r3, r3, #24
 800295e:	493f      	ldr	r1, [pc, #252]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002960:	4313      	orrs	r3, r2
 8002962:	60cb      	str	r3, [r1, #12]
 8002964:	e018      	b.n	8002998 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002966:	4b3d      	ldr	r3, [pc, #244]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a3c      	ldr	r2, [pc, #240]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 800296c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002972:	f7fe fd1f 	bl	80013b4 <HAL_GetTick>
 8002976:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800297a:	f7fe fd1b 	bl	80013b4 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e23d      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800298c:	4b33      	ldr	r3, [pc, #204]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f0      	bne.n	800297a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d036      	beq.n	8002a12 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d019      	beq.n	80029e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ac:	4b2b      	ldr	r3, [pc, #172]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80029ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029b0:	4a2a      	ldr	r2, [pc, #168]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b8:	f7fe fcfc 	bl	80013b4 <HAL_GetTick>
 80029bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c0:	f7fe fcf8 	bl	80013b4 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e21a      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029d2:	4b22      	ldr	r3, [pc, #136]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80029d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x45c>
 80029de:	e018      	b.n	8002a12 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80029e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029e4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ec:	f7fe fce2 	bl	80013b4 <HAL_GetTick>
 80029f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f4:	f7fe fcde 	bl	80013b4 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e200      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a06:	4b15      	ldr	r3, [pc, #84]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d039      	beq.n	8002a92 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d01c      	beq.n	8002a60 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a26:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a0c      	ldr	r2, [pc, #48]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002a2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a32:	f7fe fcbf 	bl	80013b4 <HAL_GetTick>
 8002a36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a3a:	f7fe fcbb 	bl	80013b4 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e1dd      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a4c:	4b03      	ldr	r3, [pc, #12]	@ (8002a5c <HAL_RCC_OscConfig+0x4f8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x4d6>
 8002a58:	e01b      	b.n	8002a92 <HAL_RCC_OscConfig+0x52e>
 8002a5a:	bf00      	nop
 8002a5c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a60:	4b9b      	ldr	r3, [pc, #620]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a9a      	ldr	r2, [pc, #616]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002a66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a6a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a6c:	f7fe fca2 	bl	80013b4 <HAL_GetTick>
 8002a70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a74:	f7fe fc9e 	bl	80013b4 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e1c0      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a86:	4b92      	ldr	r3, [pc, #584]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 8081 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002aa0:	4b8c      	ldr	r3, [pc, #560]	@ (8002cd4 <HAL_RCC_OscConfig+0x770>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a8b      	ldr	r2, [pc, #556]	@ (8002cd4 <HAL_RCC_OscConfig+0x770>)
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aaa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aac:	f7fe fc82 	bl	80013b4 <HAL_GetTick>
 8002ab0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab4:	f7fe fc7e 	bl	80013b4 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	@ 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e1a0      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ac6:	4b83      	ldr	r3, [pc, #524]	@ (8002cd4 <HAL_RCC_OscConfig+0x770>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d106      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x584>
 8002ada:	4b7d      	ldr	r3, [pc, #500]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ade:	4a7c      	ldr	r2, [pc, #496]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae6:	e02d      	b.n	8002b44 <HAL_RCC_OscConfig+0x5e0>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10c      	bne.n	8002b0a <HAL_RCC_OscConfig+0x5a6>
 8002af0:	4b77      	ldr	r3, [pc, #476]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af4:	4a76      	ldr	r2, [pc, #472]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002af6:	f023 0301 	bic.w	r3, r3, #1
 8002afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002afc:	4b74      	ldr	r3, [pc, #464]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b00:	4a73      	ldr	r2, [pc, #460]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b02:	f023 0304 	bic.w	r3, r3, #4
 8002b06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b08:	e01c      	b.n	8002b44 <HAL_RCC_OscConfig+0x5e0>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b05      	cmp	r3, #5
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x5c8>
 8002b12:	4b6f      	ldr	r3, [pc, #444]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b16:	4a6e      	ldr	r2, [pc, #440]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b18:	f043 0304 	orr.w	r3, r3, #4
 8002b1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b1e:	4b6c      	ldr	r3, [pc, #432]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b22:	4a6b      	ldr	r2, [pc, #428]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCC_OscConfig+0x5e0>
 8002b2c:	4b68      	ldr	r3, [pc, #416]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b30:	4a67      	ldr	r2, [pc, #412]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b32:	f023 0301 	bic.w	r3, r3, #1
 8002b36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b38:	4b65      	ldr	r3, [pc, #404]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3c:	4a64      	ldr	r2, [pc, #400]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b3e:	f023 0304 	bic.w	r3, r3, #4
 8002b42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d015      	beq.n	8002b78 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4c:	f7fe fc32 	bl	80013b4 <HAL_GetTick>
 8002b50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b54:	f7fe fc2e 	bl	80013b4 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e14e      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b6a:	4b59      	ldr	r3, [pc, #356]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0ee      	beq.n	8002b54 <HAL_RCC_OscConfig+0x5f0>
 8002b76:	e014      	b.n	8002ba2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fe fc1c 	bl	80013b4 <HAL_GetTick>
 8002b7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b80:	f7fe fc18 	bl	80013b4 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e138      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b96:	4b4e      	ldr	r3, [pc, #312]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1ee      	bne.n	8002b80 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 812d 	beq.w	8002e06 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002bac:	4b48      	ldr	r3, [pc, #288]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bb4:	2b18      	cmp	r3, #24
 8002bb6:	f000 80bd 	beq.w	8002d34 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	f040 809e 	bne.w	8002d00 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc4:	4b42      	ldr	r3, [pc, #264]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a41      	ldr	r2, [pc, #260]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002bca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd0:	f7fe fbf0 	bl	80013b4 <HAL_GetTick>
 8002bd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7fe fbec 	bl	80013b4 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e10e      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bea:	4b39      	ldr	r3, [pc, #228]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf6:	4b36      	ldr	r3, [pc, #216]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002bf8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bfa:	4b37      	ldr	r3, [pc, #220]	@ (8002cd8 <HAL_RCC_OscConfig+0x774>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c06:	0112      	lsls	r2, r2, #4
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	4931      	ldr	r1, [pc, #196]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c14:	3b01      	subs	r3, #1
 8002c16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	025b      	lsls	r3, r3, #9
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	431a      	orrs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	041b      	lsls	r3, r3, #16
 8002c2e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	061b      	lsls	r3, r3, #24
 8002c3c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002c40:	4923      	ldr	r1, [pc, #140]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c46:	4b22      	ldr	r3, [pc, #136]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4a:	4a21      	ldr	r2, [pc, #132]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c52:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c56:	4b21      	ldr	r3, [pc, #132]	@ (8002cdc <HAL_RCC_OscConfig+0x778>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c5e:	00d2      	lsls	r2, r2, #3
 8002c60:	491b      	ldr	r1, [pc, #108]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c66:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6a:	f023 020c 	bic.w	r2, r3, #12
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	4917      	ldr	r1, [pc, #92]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c78:	4b15      	ldr	r3, [pc, #84]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7c:	f023 0202 	bic.w	r2, r3, #2
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c84:	4912      	ldr	r1, [pc, #72]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c8a:	4b11      	ldr	r3, [pc, #68]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8e:	4a10      	ldr	r2, [pc, #64]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c96:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ca0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002cae:	4b08      	ldr	r3, [pc, #32]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb2:	4a07      	ldr	r2, [pc, #28]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cba:	4b05      	ldr	r3, [pc, #20]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a04      	ldr	r2, [pc, #16]	@ (8002cd0 <HAL_RCC_OscConfig+0x76c>)
 8002cc0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc6:	f7fe fb75 	bl	80013b4 <HAL_GetTick>
 8002cca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ccc:	e011      	b.n	8002cf2 <HAL_RCC_OscConfig+0x78e>
 8002cce:	bf00      	nop
 8002cd0:	58024400 	.word	0x58024400
 8002cd4:	58024800 	.word	0x58024800
 8002cd8:	fffffc0c 	.word	0xfffffc0c
 8002cdc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce0:	f7fe fb68 	bl	80013b4 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e08a      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cf2:	4b47      	ldr	r3, [pc, #284]	@ (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x77c>
 8002cfe:	e082      	b.n	8002e06 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d00:	4b43      	ldr	r3, [pc, #268]	@ (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a42      	ldr	r2, [pc, #264]	@ (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002d06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fb52 	bl	80013b4 <HAL_GetTick>
 8002d10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d14:	f7fe fb4e 	bl	80013b4 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e070      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d26:	4b3a      	ldr	r3, [pc, #232]	@ (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x7b0>
 8002d32:	e068      	b.n	8002e06 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d34:	4b36      	ldr	r3, [pc, #216]	@ (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d38:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d3a:	4b35      	ldr	r3, [pc, #212]	@ (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d031      	beq.n	8002dac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f003 0203 	and.w	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d12a      	bne.n	8002dac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d122      	bne.n	8002dac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d70:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d11a      	bne.n	8002dac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	0a5b      	lsrs	r3, r3, #9
 8002d7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d82:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d111      	bne.n	8002dac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	0c1b      	lsrs	r3, r3, #16
 8002d8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d94:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d108      	bne.n	8002dac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	0e1b      	lsrs	r3, r3, #24
 8002d9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e02b      	b.n	8002e08 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002db0:	4b17      	ldr	r3, [pc, #92]	@ (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002db4:	08db      	lsrs	r3, r3, #3
 8002db6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002dba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d01f      	beq.n	8002e06 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002dc6:	4b12      	ldr	r3, [pc, #72]	@ (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dca:	4a11      	ldr	r2, [pc, #68]	@ (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dd2:	f7fe faef 	bl	80013b4 <HAL_GetTick>
 8002dd6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002dd8:	bf00      	nop
 8002dda:	f7fe faeb 	bl	80013b4 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d0f9      	beq.n	8002dda <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002de6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002de8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dea:	4b0a      	ldr	r3, [pc, #40]	@ (8002e14 <HAL_RCC_OscConfig+0x8b0>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002df2:	00d2      	lsls	r2, r2, #3
 8002df4:	4906      	ldr	r1, [pc, #24]	@ (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002dfa:	4b05      	ldr	r3, [pc, #20]	@ (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dfe:	4a04      	ldr	r2, [pc, #16]	@ (8002e10 <HAL_RCC_OscConfig+0x8ac>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3730      	adds	r7, #48	@ 0x30
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	58024400 	.word	0x58024400
 8002e14:	ffff0007 	.word	0xffff0007

08002e18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e19c      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b8a      	ldr	r3, [pc, #552]	@ (8003058 <HAL_RCC_ClockConfig+0x240>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d910      	bls.n	8002e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b87      	ldr	r3, [pc, #540]	@ (8003058 <HAL_RCC_ClockConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 020f 	bic.w	r2, r3, #15
 8002e42:	4985      	ldr	r1, [pc, #532]	@ (8003058 <HAL_RCC_ClockConfig+0x240>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b83      	ldr	r3, [pc, #524]	@ (8003058 <HAL_RCC_ClockConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e184      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d010      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	4b7b      	ldr	r3, [pc, #492]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d908      	bls.n	8002e8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e78:	4b78      	ldr	r3, [pc, #480]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	4975      	ldr	r1, [pc, #468]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d010      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	4b70      	ldr	r3, [pc, #448]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d908      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ea6:	4b6d      	ldr	r3, [pc, #436]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	496a      	ldr	r1, [pc, #424]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d010      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699a      	ldr	r2, [r3, #24]
 8002ec8:	4b64      	ldr	r3, [pc, #400]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d908      	bls.n	8002ee6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ed4:	4b61      	ldr	r3, [pc, #388]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	495e      	ldr	r1, [pc, #376]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d010      	beq.n	8002f14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	4b59      	ldr	r3, [pc, #356]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d908      	bls.n	8002f14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f02:	4b56      	ldr	r3, [pc, #344]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	4953      	ldr	r1, [pc, #332]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d010      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	4b4d      	ldr	r3, [pc, #308]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d908      	bls.n	8002f42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f30:	4b4a      	ldr	r3, [pc, #296]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f023 020f 	bic.w	r2, r3, #15
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4947      	ldr	r1, [pc, #284]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d055      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f4e:	4b43      	ldr	r3, [pc, #268]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	4940      	ldr	r1, [pc, #256]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d107      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f68:	4b3c      	ldr	r3, [pc, #240]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d121      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0f6      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f80:	4b36      	ldr	r3, [pc, #216]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d115      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0ea      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d107      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f98:	4b30      	ldr	r3, [pc, #192]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d109      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0de      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fa8:	4b2c      	ldr	r3, [pc, #176]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0d6      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fb8:	4b28      	ldr	r3, [pc, #160]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f023 0207 	bic.w	r2, r3, #7
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4925      	ldr	r1, [pc, #148]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fca:	f7fe f9f3 	bl	80013b4 <HAL_GetTick>
 8002fce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd0:	e00a      	b.n	8002fe8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd2:	f7fe f9ef 	bl	80013b4 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e0be      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d1eb      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d010      	beq.n	8003028 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	4b14      	ldr	r3, [pc, #80]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	429a      	cmp	r2, r3
 8003014:	d208      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003016:	4b11      	ldr	r3, [pc, #68]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f023 020f 	bic.w	r2, r3, #15
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	490e      	ldr	r1, [pc, #56]	@ (800305c <HAL_RCC_ClockConfig+0x244>)
 8003024:	4313      	orrs	r3, r2
 8003026:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003028:	4b0b      	ldr	r3, [pc, #44]	@ (8003058 <HAL_RCC_ClockConfig+0x240>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d214      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b08      	ldr	r3, [pc, #32]	@ (8003058 <HAL_RCC_ClockConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 020f 	bic.w	r2, r3, #15
 800303e:	4906      	ldr	r1, [pc, #24]	@ (8003058 <HAL_RCC_ClockConfig+0x240>)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003046:	4b04      	ldr	r3, [pc, #16]	@ (8003058 <HAL_RCC_ClockConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e086      	b.n	8003166 <HAL_RCC_ClockConfig+0x34e>
 8003058:	52002000 	.word	0x52002000
 800305c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d010      	beq.n	800308e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	4b3f      	ldr	r3, [pc, #252]	@ (8003170 <HAL_RCC_ClockConfig+0x358>)
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003078:	429a      	cmp	r2, r3
 800307a:	d208      	bcs.n	800308e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800307c:	4b3c      	ldr	r3, [pc, #240]	@ (8003170 <HAL_RCC_ClockConfig+0x358>)
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	4939      	ldr	r1, [pc, #228]	@ (8003170 <HAL_RCC_ClockConfig+0x358>)
 800308a:	4313      	orrs	r3, r2
 800308c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d010      	beq.n	80030bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	4b34      	ldr	r3, [pc, #208]	@ (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d208      	bcs.n	80030bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030aa:	4b31      	ldr	r3, [pc, #196]	@ (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	492e      	ldr	r1, [pc, #184]	@ (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699a      	ldr	r2, [r3, #24]
 80030cc:	4b28      	ldr	r3, [pc, #160]	@ (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d208      	bcs.n	80030ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030d8:	4b25      	ldr	r3, [pc, #148]	@ (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	4922      	ldr	r1, [pc, #136]	@ (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d010      	beq.n	8003118 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69da      	ldr	r2, [r3, #28]
 80030fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003170 <HAL_RCC_ClockConfig+0x358>)
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003102:	429a      	cmp	r2, r3
 8003104:	d208      	bcs.n	8003118 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003106:	4b1a      	ldr	r3, [pc, #104]	@ (8003170 <HAL_RCC_ClockConfig+0x358>)
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	4917      	ldr	r1, [pc, #92]	@ (8003170 <HAL_RCC_ClockConfig+0x358>)
 8003114:	4313      	orrs	r3, r2
 8003116:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003118:	f000 f834 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 800311c:	4602      	mov	r2, r0
 800311e:	4b14      	ldr	r3, [pc, #80]	@ (8003170 <HAL_RCC_ClockConfig+0x358>)
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	4912      	ldr	r1, [pc, #72]	@ (8003174 <HAL_RCC_ClockConfig+0x35c>)
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
 8003134:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003136:	4b0e      	ldr	r3, [pc, #56]	@ (8003170 <HAL_RCC_ClockConfig+0x358>)
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	4a0d      	ldr	r2, [pc, #52]	@ (8003174 <HAL_RCC_ClockConfig+0x35c>)
 8003140:	5cd3      	ldrb	r3, [r2, r3]
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
 800314c:	4a0a      	ldr	r2, [pc, #40]	@ (8003178 <HAL_RCC_ClockConfig+0x360>)
 800314e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003150:	4a0a      	ldr	r2, [pc, #40]	@ (800317c <HAL_RCC_ClockConfig+0x364>)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003156:	4b0a      	ldr	r3, [pc, #40]	@ (8003180 <HAL_RCC_ClockConfig+0x368>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe f8e0 	bl	8001320 <HAL_InitTick>
 8003160:	4603      	mov	r3, r0
 8003162:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003164:	7bfb      	ldrb	r3, [r7, #15]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	58024400 	.word	0x58024400
 8003174:	08006c00 	.word	0x08006c00
 8003178:	24000008 	.word	0x24000008
 800317c:	24000004 	.word	0x24000004
 8003180:	2400000c 	.word	0x2400000c

08003184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003184:	b480      	push	{r7}
 8003186:	b089      	sub	sp, #36	@ 0x24
 8003188:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800318a:	4bb3      	ldr	r3, [pc, #716]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003192:	2b18      	cmp	r3, #24
 8003194:	f200 8155 	bhi.w	8003442 <HAL_RCC_GetSysClockFreq+0x2be>
 8003198:	a201      	add	r2, pc, #4	@ (adr r2, 80031a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800319a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319e:	bf00      	nop
 80031a0:	08003205 	.word	0x08003205
 80031a4:	08003443 	.word	0x08003443
 80031a8:	08003443 	.word	0x08003443
 80031ac:	08003443 	.word	0x08003443
 80031b0:	08003443 	.word	0x08003443
 80031b4:	08003443 	.word	0x08003443
 80031b8:	08003443 	.word	0x08003443
 80031bc:	08003443 	.word	0x08003443
 80031c0:	0800322b 	.word	0x0800322b
 80031c4:	08003443 	.word	0x08003443
 80031c8:	08003443 	.word	0x08003443
 80031cc:	08003443 	.word	0x08003443
 80031d0:	08003443 	.word	0x08003443
 80031d4:	08003443 	.word	0x08003443
 80031d8:	08003443 	.word	0x08003443
 80031dc:	08003443 	.word	0x08003443
 80031e0:	08003231 	.word	0x08003231
 80031e4:	08003443 	.word	0x08003443
 80031e8:	08003443 	.word	0x08003443
 80031ec:	08003443 	.word	0x08003443
 80031f0:	08003443 	.word	0x08003443
 80031f4:	08003443 	.word	0x08003443
 80031f8:	08003443 	.word	0x08003443
 80031fc:	08003443 	.word	0x08003443
 8003200:	08003237 	.word	0x08003237
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003204:	4b94      	ldr	r3, [pc, #592]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003210:	4b91      	ldr	r3, [pc, #580]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	08db      	lsrs	r3, r3, #3
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	4a90      	ldr	r2, [pc, #576]	@ (800345c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
 8003220:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003222:	e111      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003224:	4b8d      	ldr	r3, [pc, #564]	@ (800345c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003226:	61bb      	str	r3, [r7, #24]
      break;
 8003228:	e10e      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800322a:	4b8d      	ldr	r3, [pc, #564]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800322c:	61bb      	str	r3, [r7, #24]
      break;
 800322e:	e10b      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003230:	4b8c      	ldr	r3, [pc, #560]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003232:	61bb      	str	r3, [r7, #24]
      break;
 8003234:	e108      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003236:	4b88      	ldr	r3, [pc, #544]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003240:	4b85      	ldr	r3, [pc, #532]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800324a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800324c:	4b82      	ldr	r3, [pc, #520]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003256:	4b80      	ldr	r3, [pc, #512]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800325a:	08db      	lsrs	r3, r3, #3
 800325c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	fb02 f303 	mul.w	r3, r2, r3
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80e1 	beq.w	800343c <HAL_RCC_GetSysClockFreq+0x2b8>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b02      	cmp	r3, #2
 800327e:	f000 8083 	beq.w	8003388 <HAL_RCC_GetSysClockFreq+0x204>
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b02      	cmp	r3, #2
 8003286:	f200 80a1 	bhi.w	80033cc <HAL_RCC_GetSysClockFreq+0x248>
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x114>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d056      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003296:	e099      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003298:	4b6f      	ldr	r3, [pc, #444]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0320 	and.w	r3, r3, #32
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d02d      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032a4:	4b6c      	ldr	r3, [pc, #432]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	08db      	lsrs	r3, r3, #3
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	4a6b      	ldr	r2, [pc, #428]	@ (800345c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
 80032b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	ee07 3a90 	vmov	s15, r3
 80032bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	ee07 3a90 	vmov	s15, r3
 80032c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ce:	4b62      	ldr	r3, [pc, #392]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032de:	ed97 6a02 	vldr	s12, [r7, #8]
 80032e2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80032fe:	e087      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800346c <HAL_RCC_GetSysClockFreq+0x2e8>
 800330e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003312:	4b51      	ldr	r3, [pc, #324]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003322:	ed97 6a02 	vldr	s12, [r7, #8]
 8003326:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003468 <HAL_RCC_GetSysClockFreq+0x2e4>
 800332a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800332e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003332:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800333a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003342:	e065      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003470 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003356:	4b40      	ldr	r3, [pc, #256]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003366:	ed97 6a02 	vldr	s12, [r7, #8]
 800336a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003468 <HAL_RCC_GetSysClockFreq+0x2e4>
 800336e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800337a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800337e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003382:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003386:	e043      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003392:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003474 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800339a:	4b2f      	ldr	r3, [pc, #188]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033ca:	e021      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003470 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033de:	4b1e      	ldr	r3, [pc, #120]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80033f2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003468 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800340e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003410:	4b11      	ldr	r3, [pc, #68]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003414:	0a5b      	lsrs	r3, r3, #9
 8003416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800341a:	3301      	adds	r3, #1
 800341c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	ee07 3a90 	vmov	s15, r3
 8003424:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003428:	edd7 6a07 	vldr	s13, [r7, #28]
 800342c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003434:	ee17 3a90 	vmov	r3, s15
 8003438:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800343a:	e005      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	61bb      	str	r3, [r7, #24]
      break;
 8003440:	e002      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003442:	4b07      	ldr	r3, [pc, #28]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003444:	61bb      	str	r3, [r7, #24]
      break;
 8003446:	bf00      	nop
  }

  return sysclockfreq;
 8003448:	69bb      	ldr	r3, [r7, #24]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3724      	adds	r7, #36	@ 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	58024400 	.word	0x58024400
 800345c:	03d09000 	.word	0x03d09000
 8003460:	003d0900 	.word	0x003d0900
 8003464:	007a1200 	.word	0x007a1200
 8003468:	46000000 	.word	0x46000000
 800346c:	4c742400 	.word	0x4c742400
 8003470:	4a742400 	.word	0x4a742400
 8003474:	4af42400 	.word	0x4af42400

08003478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800347e:	f7ff fe81 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 8003482:	4602      	mov	r2, r0
 8003484:	4b10      	ldr	r3, [pc, #64]	@ (80034c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	490f      	ldr	r1, [pc, #60]	@ (80034cc <HAL_RCC_GetHCLKFreq+0x54>)
 8003490:	5ccb      	ldrb	r3, [r1, r3]
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	fa22 f303 	lsr.w	r3, r2, r3
 800349a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800349c:	4b0a      	ldr	r3, [pc, #40]	@ (80034c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	4a09      	ldr	r2, [pc, #36]	@ (80034cc <HAL_RCC_GetHCLKFreq+0x54>)
 80034a6:	5cd3      	ldrb	r3, [r2, r3]
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	4a07      	ldr	r2, [pc, #28]	@ (80034d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80034b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034b6:	4a07      	ldr	r2, [pc, #28]	@ (80034d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80034bc:	4b04      	ldr	r3, [pc, #16]	@ (80034d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	58024400 	.word	0x58024400
 80034cc:	08006c00 	.word	0x08006c00
 80034d0:	24000008 	.word	0x24000008
 80034d4:	24000004 	.word	0x24000004

080034d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80034dc:	f7ff ffcc 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 80034e0:	4602      	mov	r2, r0
 80034e2:	4b06      	ldr	r3, [pc, #24]	@ (80034fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	4904      	ldr	r1, [pc, #16]	@ (8003500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ee:	5ccb      	ldrb	r3, [r1, r3]
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	58024400 	.word	0x58024400
 8003500:	08006c00 	.word	0x08006c00

08003504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003508:	f7ff ffb6 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 800350c:	4602      	mov	r2, r0
 800350e:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	0a1b      	lsrs	r3, r3, #8
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	4904      	ldr	r1, [pc, #16]	@ (800352c <HAL_RCC_GetPCLK2Freq+0x28>)
 800351a:	5ccb      	ldrb	r3, [r1, r3]
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	58024400 	.word	0x58024400
 800352c:	08006c00 	.word	0x08006c00

08003530 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003534:	b0ca      	sub	sp, #296	@ 0x128
 8003536:	af00      	add	r7, sp, #0
 8003538:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800353c:	2300      	movs	r3, #0
 800353e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003542:	2300      	movs	r3, #0
 8003544:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003554:	2500      	movs	r5, #0
 8003556:	ea54 0305 	orrs.w	r3, r4, r5
 800355a:	d049      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800355c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003560:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003562:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003566:	d02f      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003568:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800356c:	d828      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800356e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003572:	d01a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003574:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003578:	d822      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800357e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003582:	d007      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003584:	e01c      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003586:	4bb8      	ldr	r3, [pc, #736]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358a:	4ab7      	ldr	r2, [pc, #732]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800358c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003590:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003592:	e01a      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003598:	3308      	adds	r3, #8
 800359a:	2102      	movs	r1, #2
 800359c:	4618      	mov	r0, r3
 800359e:	f001 fc8f 	bl	8004ec0 <RCCEx_PLL2_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035a8:	e00f      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ae:	3328      	adds	r3, #40	@ 0x28
 80035b0:	2102      	movs	r1, #2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 fd36 	bl	8005024 <RCCEx_PLL3_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035be:	e004      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035c6:	e000      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80035c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10a      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80035d2:	4ba5      	ldr	r3, [pc, #660]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035d6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80035da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035e0:	4aa1      	ldr	r2, [pc, #644]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035e2:	430b      	orrs	r3, r1
 80035e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80035e6:	e003      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80035fc:	f04f 0900 	mov.w	r9, #0
 8003600:	ea58 0309 	orrs.w	r3, r8, r9
 8003604:	d047      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360c:	2b04      	cmp	r3, #4
 800360e:	d82a      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003610:	a201      	add	r2, pc, #4	@ (adr r2, 8003618 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	0800362d 	.word	0x0800362d
 800361c:	0800363b 	.word	0x0800363b
 8003620:	08003651 	.word	0x08003651
 8003624:	0800366f 	.word	0x0800366f
 8003628:	0800366f 	.word	0x0800366f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800362c:	4b8e      	ldr	r3, [pc, #568]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800362e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003630:	4a8d      	ldr	r2, [pc, #564]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003636:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003638:	e01a      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800363a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363e:	3308      	adds	r3, #8
 8003640:	2100      	movs	r1, #0
 8003642:	4618      	mov	r0, r3
 8003644:	f001 fc3c 	bl	8004ec0 <RCCEx_PLL2_Config>
 8003648:	4603      	mov	r3, r0
 800364a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800364e:	e00f      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003654:	3328      	adds	r3, #40	@ 0x28
 8003656:	2100      	movs	r1, #0
 8003658:	4618      	mov	r0, r3
 800365a:	f001 fce3 	bl	8005024 <RCCEx_PLL3_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003664:	e004      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800366c:	e000      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800366e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003678:	4b7b      	ldr	r3, [pc, #492]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800367a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800367c:	f023 0107 	bic.w	r1, r3, #7
 8003680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003686:	4a78      	ldr	r2, [pc, #480]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003688:	430b      	orrs	r3, r1
 800368a:	6513      	str	r3, [r2, #80]	@ 0x50
 800368c:	e003      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80036a2:	f04f 0b00 	mov.w	fp, #0
 80036a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80036aa:	d04c      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80036ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036b6:	d030      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80036b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036bc:	d829      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036be:	2bc0      	cmp	r3, #192	@ 0xc0
 80036c0:	d02d      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80036c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80036c4:	d825      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036c6:	2b80      	cmp	r3, #128	@ 0x80
 80036c8:	d018      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80036ca:	2b80      	cmp	r3, #128	@ 0x80
 80036cc:	d821      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80036d2:	2b40      	cmp	r3, #64	@ 0x40
 80036d4:	d007      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80036d6:	e01c      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d8:	4b63      	ldr	r3, [pc, #396]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036dc:	4a62      	ldr	r2, [pc, #392]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036e4:	e01c      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ea:	3308      	adds	r3, #8
 80036ec:	2100      	movs	r1, #0
 80036ee:	4618      	mov	r0, r3
 80036f0:	f001 fbe6 	bl	8004ec0 <RCCEx_PLL2_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036fa:	e011      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003700:	3328      	adds	r3, #40	@ 0x28
 8003702:	2100      	movs	r1, #0
 8003704:	4618      	mov	r0, r3
 8003706:	f001 fc8d 	bl	8005024 <RCCEx_PLL3_Config>
 800370a:	4603      	mov	r3, r0
 800370c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003710:	e006      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003718:	e002      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800371a:	bf00      	nop
 800371c:	e000      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800371e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003728:	4b4f      	ldr	r3, [pc, #316]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800372a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800372c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003736:	4a4c      	ldr	r2, [pc, #304]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003738:	430b      	orrs	r3, r1
 800373a:	6513      	str	r3, [r2, #80]	@ 0x50
 800373c:	e003      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003742:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003752:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003756:	2300      	movs	r3, #0
 8003758:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800375c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003760:	460b      	mov	r3, r1
 8003762:	4313      	orrs	r3, r2
 8003764:	d053      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800376e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003772:	d035      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003774:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003778:	d82e      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800377a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800377e:	d031      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003780:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003784:	d828      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003786:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800378a:	d01a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800378c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003790:	d822      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003796:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800379a:	d007      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800379c:	e01c      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800379e:	4b32      	ldr	r3, [pc, #200]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a2:	4a31      	ldr	r2, [pc, #196]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037aa:	e01c      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b0:	3308      	adds	r3, #8
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f001 fb83 	bl	8004ec0 <RCCEx_PLL2_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037c0:	e011      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c6:	3328      	adds	r3, #40	@ 0x28
 80037c8:	2100      	movs	r1, #0
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 fc2a 	bl	8005024 <RCCEx_PLL3_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037d6:	e006      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037de:	e002      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037e0:	bf00      	nop
 80037e2:	e000      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10b      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80037f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003800:	430b      	orrs	r3, r1
 8003802:	6593      	str	r3, [r2, #88]	@ 0x58
 8003804:	e003      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800380a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800380e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800381a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800381e:	2300      	movs	r3, #0
 8003820:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003824:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003828:	460b      	mov	r3, r1
 800382a:	4313      	orrs	r3, r2
 800382c:	d056      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800382e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003832:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003836:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800383a:	d038      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800383c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003840:	d831      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003842:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003846:	d034      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003848:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800384c:	d82b      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800384e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003852:	d01d      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003854:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003858:	d825      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800385a:	2b00      	cmp	r3, #0
 800385c:	d006      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800385e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003862:	d00a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003864:	e01f      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003866:	bf00      	nop
 8003868:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800386c:	4ba2      	ldr	r3, [pc, #648]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800386e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003870:	4aa1      	ldr	r2, [pc, #644]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003876:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003878:	e01c      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800387a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387e:	3308      	adds	r3, #8
 8003880:	2100      	movs	r1, #0
 8003882:	4618      	mov	r0, r3
 8003884:	f001 fb1c 	bl	8004ec0 <RCCEx_PLL2_Config>
 8003888:	4603      	mov	r3, r0
 800388a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800388e:	e011      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003894:	3328      	adds	r3, #40	@ 0x28
 8003896:	2100      	movs	r1, #0
 8003898:	4618      	mov	r0, r3
 800389a:	f001 fbc3 	bl	8005024 <RCCEx_PLL3_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038a4:	e006      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038ac:	e002      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80038ae:	bf00      	nop
 80038b0:	e000      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80038b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10b      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038bc:	4b8e      	ldr	r3, [pc, #568]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80038c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038cc:	4a8a      	ldr	r2, [pc, #552]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ce:	430b      	orrs	r3, r1
 80038d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80038d2:	e003      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80038e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80038ec:	2300      	movs	r3, #0
 80038ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80038f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80038f6:	460b      	mov	r3, r1
 80038f8:	4313      	orrs	r3, r2
 80038fa:	d03a      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80038fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003902:	2b30      	cmp	r3, #48	@ 0x30
 8003904:	d01f      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003906:	2b30      	cmp	r3, #48	@ 0x30
 8003908:	d819      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800390a:	2b20      	cmp	r3, #32
 800390c:	d00c      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800390e:	2b20      	cmp	r3, #32
 8003910:	d815      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d019      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003916:	2b10      	cmp	r3, #16
 8003918:	d111      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800391a:	4b77      	ldr	r3, [pc, #476]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800391c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391e:	4a76      	ldr	r2, [pc, #472]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003924:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003926:	e011      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392c:	3308      	adds	r3, #8
 800392e:	2102      	movs	r1, #2
 8003930:	4618      	mov	r0, r3
 8003932:	f001 fac5 	bl	8004ec0 <RCCEx_PLL2_Config>
 8003936:	4603      	mov	r3, r0
 8003938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800393c:	e006      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003944:	e002      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003946:	bf00      	nop
 8003948:	e000      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800394a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800394c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10a      	bne.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003954:	4b68      	ldr	r3, [pc, #416]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003958:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800395c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003962:	4a65      	ldr	r2, [pc, #404]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003964:	430b      	orrs	r3, r1
 8003966:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003968:	e003      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800396e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800397e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003982:	2300      	movs	r3, #0
 8003984:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003988:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800398c:	460b      	mov	r3, r1
 800398e:	4313      	orrs	r3, r2
 8003990:	d051      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003998:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800399c:	d035      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800399e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039a2:	d82e      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039a8:	d031      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80039aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039ae:	d828      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039b4:	d01a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80039b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039ba:	d822      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80039c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c4:	d007      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80039c6:	e01c      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c8:	4b4b      	ldr	r3, [pc, #300]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039cc:	4a4a      	ldr	r2, [pc, #296]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039d4:	e01c      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039da:	3308      	adds	r3, #8
 80039dc:	2100      	movs	r1, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	f001 fa6e 	bl	8004ec0 <RCCEx_PLL2_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039ea:	e011      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f0:	3328      	adds	r3, #40	@ 0x28
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f001 fb15 	bl	8005024 <RCCEx_PLL3_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a00:	e006      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a08:	e002      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a0a:	bf00      	nop
 8003a0c:	e000      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10a      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a18:	4b37      	ldr	r3, [pc, #220]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a1c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a26:	4a34      	ldr	r2, [pc, #208]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a2c:	e003      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003a42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a46:	2300      	movs	r3, #0
 8003a48:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003a4c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a50:	460b      	mov	r3, r1
 8003a52:	4313      	orrs	r3, r2
 8003a54:	d056      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a60:	d033      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a62:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a66:	d82c      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a6c:	d02f      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003a6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a72:	d826      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a78:	d02b      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003a7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a7e:	d820      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a84:	d012      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003a86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a8a:	d81a      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d022      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a94:	d115      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f001 fa0e 	bl	8004ec0 <RCCEx_PLL2_Config>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003aaa:	e015      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab0:	3328      	adds	r3, #40	@ 0x28
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f001 fab5 	bl	8005024 <RCCEx_PLL3_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ac0:	e00a      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ac8:	e006      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003aca:	bf00      	nop
 8003acc:	e004      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ace:	bf00      	nop
 8003ad0:	e002      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ad2:	bf00      	nop
 8003ad4:	e000      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10d      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ae0:	4b05      	ldr	r3, [pc, #20]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003aee:	4a02      	ldr	r2, [pc, #8]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003af0:	430b      	orrs	r3, r1
 8003af2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003af4:	e006      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003af6:	bf00      	nop
 8003af8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003b10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b14:	2300      	movs	r3, #0
 8003b16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b1a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4313      	orrs	r3, r2
 8003b22:	d055      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b30:	d033      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b36:	d82c      	bhi.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b3c:	d02f      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b42:	d826      	bhi.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b44:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b48:	d02b      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003b4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b4e:	d820      	bhi.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b54:	d012      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003b56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b5a:	d81a      	bhi.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d022      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003b60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b64:	d115      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6a:	3308      	adds	r3, #8
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f001 f9a6 	bl	8004ec0 <RCCEx_PLL2_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b7a:	e015      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b80:	3328      	adds	r3, #40	@ 0x28
 8003b82:	2101      	movs	r1, #1
 8003b84:	4618      	mov	r0, r3
 8003b86:	f001 fa4d 	bl	8005024 <RCCEx_PLL3_Config>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b90:	e00a      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b98:	e006      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b9a:	bf00      	nop
 8003b9c:	e004      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b9e:	bf00      	nop
 8003ba0:	e002      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ba2:	bf00      	nop
 8003ba4:	e000      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10b      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003bb0:	4ba3      	ldr	r3, [pc, #652]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bc0:	4a9f      	ldr	r2, [pc, #636]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc2:	430b      	orrs	r3, r1
 8003bc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bc6:	e003      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003be0:	2300      	movs	r3, #0
 8003be2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003be6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bea:	460b      	mov	r3, r1
 8003bec:	4313      	orrs	r3, r2
 8003bee:	d037      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bfa:	d00e      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c00:	d816      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d018      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003c06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c0a:	d111      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c0c:	4b8c      	ldr	r3, [pc, #560]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c10:	4a8b      	ldr	r2, [pc, #556]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c18:	e00f      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1e:	3308      	adds	r3, #8
 8003c20:	2101      	movs	r1, #1
 8003c22:	4618      	mov	r0, r3
 8003c24:	f001 f94c 	bl	8004ec0 <RCCEx_PLL2_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c2e:	e004      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c36:	e000      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10a      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c42:	4b7f      	ldr	r3, [pc, #508]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c46:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c50:	4a7b      	ldr	r2, [pc, #492]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c52:	430b      	orrs	r3, r1
 8003c54:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c56:	e003      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c68:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c70:	2300      	movs	r3, #0
 8003c72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	d039      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d81c      	bhi.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c90 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c90:	08003ccd 	.word	0x08003ccd
 8003c94:	08003ca1 	.word	0x08003ca1
 8003c98:	08003caf 	.word	0x08003caf
 8003c9c:	08003ccd 	.word	0x08003ccd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ca0:	4b67      	ldr	r3, [pc, #412]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca4:	4a66      	ldr	r2, [pc, #408]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003caa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cac:	e00f      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f001 f902 	bl	8004ec0 <RCCEx_PLL2_Config>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cc2:	e004      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cca:	e000      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10a      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003cd6:	4b5a      	ldr	r3, [pc, #360]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cda:	f023 0103 	bic.w	r1, r3, #3
 8003cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce4:	4a56      	ldr	r2, [pc, #344]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ce6:	430b      	orrs	r3, r1
 8003ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cea:	e003      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003d00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d04:	2300      	movs	r3, #0
 8003d06:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f000 809f 	beq.w	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d16:	4b4b      	ldr	r3, [pc, #300]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d22:	f7fd fb47 	bl	80013b4 <HAL_GetTick>
 8003d26:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d2a:	e00b      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2c:	f7fd fb42 	bl	80013b4 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b64      	cmp	r3, #100	@ 0x64
 8003d3a:	d903      	bls.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d42:	e005      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d44:	4b3f      	ldr	r3, [pc, #252]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0ed      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003d50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d179      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d58:	4b39      	ldr	r3, [pc, #228]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d64:	4053      	eors	r3, r2
 8003d66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d015      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d6e:	4b34      	ldr	r3, [pc, #208]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d76:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d7a:	4b31      	ldr	r3, [pc, #196]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7e:	4a30      	ldr	r2, [pc, #192]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d84:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d86:	4b2e      	ldr	r3, [pc, #184]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8a:	4a2d      	ldr	r2, [pc, #180]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d90:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d92:	4a2b      	ldr	r2, [pc, #172]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d98:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003da2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003da6:	d118      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da8:	f7fd fb04 	bl	80013b4 <HAL_GetTick>
 8003dac:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003db0:	e00d      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db2:	f7fd faff 	bl	80013b4 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003dbc:	1ad2      	subs	r2, r2, r3
 8003dbe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d903      	bls.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003dcc:	e005      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dce:	4b1c      	ldr	r3, [pc, #112]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0eb      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d129      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003df2:	d10e      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003df4:	4b12      	ldr	r3, [pc, #72]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e04:	091a      	lsrs	r2, r3, #4
 8003e06:	4b10      	ldr	r3, [pc, #64]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	4a0d      	ldr	r2, [pc, #52]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	6113      	str	r3, [r2, #16]
 8003e10:	e005      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003e12:	4b0b      	ldr	r3, [pc, #44]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	4a0a      	ldr	r2, [pc, #40]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e18:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003e1c:	6113      	str	r3, [r2, #16]
 8003e1e:	4b08      	ldr	r3, [pc, #32]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e20:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e2e:	4a04      	ldr	r2, [pc, #16]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e30:	430b      	orrs	r3, r1
 8003e32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e34:	e00e      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003e3e:	e009      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003e40:	58024400 	.word	0x58024400
 8003e44:	58024800 	.word	0x58024800
 8003e48:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5c:	f002 0301 	and.w	r3, r2, #1
 8003e60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e64:	2300      	movs	r3, #0
 8003e66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e6a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f000 8089 	beq.w	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e7c:	2b28      	cmp	r3, #40	@ 0x28
 8003e7e:	d86b      	bhi.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003e80:	a201      	add	r2, pc, #4	@ (adr r2, 8003e88 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003f61 	.word	0x08003f61
 8003e8c:	08003f59 	.word	0x08003f59
 8003e90:	08003f59 	.word	0x08003f59
 8003e94:	08003f59 	.word	0x08003f59
 8003e98:	08003f59 	.word	0x08003f59
 8003e9c:	08003f59 	.word	0x08003f59
 8003ea0:	08003f59 	.word	0x08003f59
 8003ea4:	08003f59 	.word	0x08003f59
 8003ea8:	08003f2d 	.word	0x08003f2d
 8003eac:	08003f59 	.word	0x08003f59
 8003eb0:	08003f59 	.word	0x08003f59
 8003eb4:	08003f59 	.word	0x08003f59
 8003eb8:	08003f59 	.word	0x08003f59
 8003ebc:	08003f59 	.word	0x08003f59
 8003ec0:	08003f59 	.word	0x08003f59
 8003ec4:	08003f59 	.word	0x08003f59
 8003ec8:	08003f43 	.word	0x08003f43
 8003ecc:	08003f59 	.word	0x08003f59
 8003ed0:	08003f59 	.word	0x08003f59
 8003ed4:	08003f59 	.word	0x08003f59
 8003ed8:	08003f59 	.word	0x08003f59
 8003edc:	08003f59 	.word	0x08003f59
 8003ee0:	08003f59 	.word	0x08003f59
 8003ee4:	08003f59 	.word	0x08003f59
 8003ee8:	08003f61 	.word	0x08003f61
 8003eec:	08003f59 	.word	0x08003f59
 8003ef0:	08003f59 	.word	0x08003f59
 8003ef4:	08003f59 	.word	0x08003f59
 8003ef8:	08003f59 	.word	0x08003f59
 8003efc:	08003f59 	.word	0x08003f59
 8003f00:	08003f59 	.word	0x08003f59
 8003f04:	08003f59 	.word	0x08003f59
 8003f08:	08003f61 	.word	0x08003f61
 8003f0c:	08003f59 	.word	0x08003f59
 8003f10:	08003f59 	.word	0x08003f59
 8003f14:	08003f59 	.word	0x08003f59
 8003f18:	08003f59 	.word	0x08003f59
 8003f1c:	08003f59 	.word	0x08003f59
 8003f20:	08003f59 	.word	0x08003f59
 8003f24:	08003f59 	.word	0x08003f59
 8003f28:	08003f61 	.word	0x08003f61
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f30:	3308      	adds	r3, #8
 8003f32:	2101      	movs	r1, #1
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 ffc3 	bl	8004ec0 <RCCEx_PLL2_Config>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f40:	e00f      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f46:	3328      	adds	r3, #40	@ 0x28
 8003f48:	2101      	movs	r1, #1
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f001 f86a 	bl	8005024 <RCCEx_PLL3_Config>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f56:	e004      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f5e:	e000      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10a      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f6a:	4bbf      	ldr	r3, [pc, #764]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f6e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f78:	4abb      	ldr	r2, [pc, #748]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f7e:	e003      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	f002 0302 	and.w	r3, r2, #2
 8003f94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f9e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	d041      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fae:	2b05      	cmp	r3, #5
 8003fb0:	d824      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	08004005 	.word	0x08004005
 8003fbc:	08003fd1 	.word	0x08003fd1
 8003fc0:	08003fe7 	.word	0x08003fe7
 8003fc4:	08004005 	.word	0x08004005
 8003fc8:	08004005 	.word	0x08004005
 8003fcc:	08004005 	.word	0x08004005
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 ff71 	bl	8004ec0 <RCCEx_PLL2_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003fe4:	e00f      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fea:	3328      	adds	r3, #40	@ 0x28
 8003fec:	2101      	movs	r1, #1
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f001 f818 	bl	8005024 <RCCEx_PLL3_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ffa:	e004      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004002:	e000      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10a      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800400e:	4b96      	ldr	r3, [pc, #600]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004012:	f023 0107 	bic.w	r1, r3, #7
 8004016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800401c:	4a92      	ldr	r2, [pc, #584]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800401e:	430b      	orrs	r3, r1
 8004020:	6553      	str	r3, [r2, #84]	@ 0x54
 8004022:	e003      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004024:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004028:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800402c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	f002 0304 	and.w	r3, r2, #4
 8004038:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800403c:	2300      	movs	r3, #0
 800403e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004042:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004046:	460b      	mov	r3, r1
 8004048:	4313      	orrs	r3, r2
 800404a:	d044      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800404c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004050:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004054:	2b05      	cmp	r3, #5
 8004056:	d825      	bhi.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004058:	a201      	add	r2, pc, #4	@ (adr r2, 8004060 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800405a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405e:	bf00      	nop
 8004060:	080040ad 	.word	0x080040ad
 8004064:	08004079 	.word	0x08004079
 8004068:	0800408f 	.word	0x0800408f
 800406c:	080040ad 	.word	0x080040ad
 8004070:	080040ad 	.word	0x080040ad
 8004074:	080040ad 	.word	0x080040ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407c:	3308      	adds	r3, #8
 800407e:	2101      	movs	r1, #1
 8004080:	4618      	mov	r0, r3
 8004082:	f000 ff1d 	bl	8004ec0 <RCCEx_PLL2_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800408c:	e00f      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800408e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004092:	3328      	adds	r3, #40	@ 0x28
 8004094:	2101      	movs	r1, #1
 8004096:	4618      	mov	r0, r3
 8004098:	f000 ffc4 	bl	8005024 <RCCEx_PLL3_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040a2:	e004      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040aa:	e000      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80040ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10b      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040b6:	4b6c      	ldr	r3, [pc, #432]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ba:	f023 0107 	bic.w	r1, r3, #7
 80040be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040c6:	4a68      	ldr	r2, [pc, #416]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80040cc:	e003      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	f002 0320 	and.w	r3, r2, #32
 80040e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040e6:	2300      	movs	r3, #0
 80040e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040f0:	460b      	mov	r3, r1
 80040f2:	4313      	orrs	r3, r2
 80040f4:	d055      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80040f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004102:	d033      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004104:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004108:	d82c      	bhi.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800410a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800410e:	d02f      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004114:	d826      	bhi.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004116:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800411a:	d02b      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800411c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004120:	d820      	bhi.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004122:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004126:	d012      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800412c:	d81a      	bhi.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d022      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004132:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004136:	d115      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413c:	3308      	adds	r3, #8
 800413e:	2100      	movs	r1, #0
 8004140:	4618      	mov	r0, r3
 8004142:	f000 febd 	bl	8004ec0 <RCCEx_PLL2_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800414c:	e015      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800414e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004152:	3328      	adds	r3, #40	@ 0x28
 8004154:	2102      	movs	r1, #2
 8004156:	4618      	mov	r0, r3
 8004158:	f000 ff64 	bl	8005024 <RCCEx_PLL3_Config>
 800415c:	4603      	mov	r3, r0
 800415e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004162:	e00a      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800416a:	e006      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800416c:	bf00      	nop
 800416e:	e004      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004170:	bf00      	nop
 8004172:	e002      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004174:	bf00      	nop
 8004176:	e000      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800417a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10b      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004182:	4b39      	ldr	r3, [pc, #228]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004186:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004192:	4a35      	ldr	r2, [pc, #212]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004194:	430b      	orrs	r3, r1
 8004196:	6553      	str	r3, [r2, #84]	@ 0x54
 8004198:	e003      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800419e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041aa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80041ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041b2:	2300      	movs	r3, #0
 80041b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80041b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80041bc:	460b      	mov	r3, r1
 80041be:	4313      	orrs	r3, r2
 80041c0:	d058      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80041c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041ca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80041ce:	d033      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80041d0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80041d4:	d82c      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041da:	d02f      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80041dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e0:	d826      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041e6:	d02b      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80041e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041ec:	d820      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041f2:	d012      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80041f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041f8:	d81a      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d022      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80041fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004202:	d115      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004208:	3308      	adds	r3, #8
 800420a:	2100      	movs	r1, #0
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fe57 	bl	8004ec0 <RCCEx_PLL2_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004218:	e015      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421e:	3328      	adds	r3, #40	@ 0x28
 8004220:	2102      	movs	r1, #2
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fefe 	bl	8005024 <RCCEx_PLL3_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800422e:	e00a      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004236:	e006      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004238:	bf00      	nop
 800423a:	e004      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800423c:	bf00      	nop
 800423e:	e002      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004240:	bf00      	nop
 8004242:	e000      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10e      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800424e:	4b06      	ldr	r3, [pc, #24]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004252:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800425e:	4a02      	ldr	r2, [pc, #8]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004260:	430b      	orrs	r3, r1
 8004262:	6593      	str	r3, [r2, #88]	@ 0x58
 8004264:	e006      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004266:	bf00      	nop
 8004268:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004270:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004280:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004284:	2300      	movs	r3, #0
 8004286:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800428a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800428e:	460b      	mov	r3, r1
 8004290:	4313      	orrs	r3, r2
 8004292:	d055      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004298:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800429c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80042a0:	d033      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80042a2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80042a6:	d82c      	bhi.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ac:	d02f      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80042ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042b2:	d826      	bhi.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042b4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80042b8:	d02b      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80042ba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80042be:	d820      	bhi.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042c4:	d012      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80042c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042ca:	d81a      	bhi.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d022      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80042d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042d4:	d115      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042da:	3308      	adds	r3, #8
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fdee 	bl	8004ec0 <RCCEx_PLL2_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042ea:	e015      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f0:	3328      	adds	r3, #40	@ 0x28
 80042f2:	2102      	movs	r1, #2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fe95 	bl	8005024 <RCCEx_PLL3_Config>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004300:	e00a      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004308:	e006      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800430a:	bf00      	nop
 800430c:	e004      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800430e:	bf00      	nop
 8004310:	e002      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004312:	bf00      	nop
 8004314:	e000      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10b      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004320:	4ba1      	ldr	r3, [pc, #644]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004324:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004330:	4a9d      	ldr	r2, [pc, #628]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004332:	430b      	orrs	r3, r1
 8004334:	6593      	str	r3, [r2, #88]	@ 0x58
 8004336:	e003      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004338:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800433c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	f002 0308 	and.w	r3, r2, #8
 800434c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004350:	2300      	movs	r3, #0
 8004352:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004356:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800435a:	460b      	mov	r3, r1
 800435c:	4313      	orrs	r3, r2
 800435e:	d01e      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004364:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004368:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800436c:	d10c      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004372:	3328      	adds	r3, #40	@ 0x28
 8004374:	2102      	movs	r1, #2
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fe54 	bl	8005024 <RCCEx_PLL3_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004388:	4b87      	ldr	r3, [pc, #540]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800438a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004394:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004398:	4a83      	ldr	r2, [pc, #524]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800439a:	430b      	orrs	r3, r1
 800439c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800439e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	f002 0310 	and.w	r3, r2, #16
 80043aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043ae:	2300      	movs	r3, #0
 80043b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80043b4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80043b8:	460b      	mov	r3, r1
 80043ba:	4313      	orrs	r3, r2
 80043bc:	d01e      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ca:	d10c      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d0:	3328      	adds	r3, #40	@ 0x28
 80043d2:	2102      	movs	r1, #2
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fe25 	bl	8005024 <RCCEx_PLL3_Config>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043e6:	4b70      	ldr	r3, [pc, #448]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043f6:	4a6c      	ldr	r2, [pc, #432]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043f8:	430b      	orrs	r3, r1
 80043fa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004404:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004408:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800440c:	2300      	movs	r3, #0
 800440e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004412:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004416:	460b      	mov	r3, r1
 8004418:	4313      	orrs	r3, r2
 800441a:	d03e      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800441c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004420:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004424:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004428:	d022      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800442a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800442e:	d81b      	bhi.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004438:	d00b      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800443a:	e015      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800443c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004440:	3308      	adds	r3, #8
 8004442:	2100      	movs	r1, #0
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fd3b 	bl	8004ec0 <RCCEx_PLL2_Config>
 800444a:	4603      	mov	r3, r0
 800444c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004450:	e00f      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004456:	3328      	adds	r3, #40	@ 0x28
 8004458:	2102      	movs	r1, #2
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fde2 	bl	8005024 <RCCEx_PLL3_Config>
 8004460:	4603      	mov	r3, r0
 8004462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004466:	e004      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800446e:	e000      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10b      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800447a:	4b4b      	ldr	r3, [pc, #300]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800447c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004486:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800448a:	4a47      	ldr	r2, [pc, #284]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800448c:	430b      	orrs	r3, r1
 800448e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004490:	e003      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004496:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800449a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80044a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044a8:	2300      	movs	r3, #0
 80044aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80044b0:	460b      	mov	r3, r1
 80044b2:	4313      	orrs	r3, r2
 80044b4:	d03b      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044c2:	d01f      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80044c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044c8:	d818      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80044ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044ce:	d003      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80044d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044d4:	d007      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80044d6:	e011      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d8:	4b33      	ldr	r3, [pc, #204]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044dc:	4a32      	ldr	r2, [pc, #200]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80044e4:	e00f      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ea:	3328      	adds	r3, #40	@ 0x28
 80044ec:	2101      	movs	r1, #1
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fd98 	bl	8005024 <RCCEx_PLL3_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80044fa:	e004      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004502:	e000      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10b      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800450e:	4b26      	ldr	r3, [pc, #152]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004512:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451e:	4a22      	ldr	r2, [pc, #136]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004520:	430b      	orrs	r3, r1
 8004522:	6553      	str	r3, [r2, #84]	@ 0x54
 8004524:	e003      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800452a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004536:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800453a:	673b      	str	r3, [r7, #112]	@ 0x70
 800453c:	2300      	movs	r3, #0
 800453e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004540:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004544:	460b      	mov	r3, r1
 8004546:	4313      	orrs	r3, r2
 8004548:	d034      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004558:	d007      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800455a:	e011      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800455c:	4b12      	ldr	r3, [pc, #72]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800455e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004560:	4a11      	ldr	r2, [pc, #68]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004568:	e00e      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800456a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456e:	3308      	adds	r3, #8
 8004570:	2102      	movs	r1, #2
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fca4 	bl	8004ec0 <RCCEx_PLL2_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800457e:	e003      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004588:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10d      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004590:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004594:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800459e:	4a02      	ldr	r2, [pc, #8]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045a0:	430b      	orrs	r3, r1
 80045a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045a4:	e006      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80045a6:	bf00      	nop
 80045a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80045c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045c2:	2300      	movs	r3, #0
 80045c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80045ca:	460b      	mov	r3, r1
 80045cc:	4313      	orrs	r3, r2
 80045ce:	d00c      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d4:	3328      	adds	r3, #40	@ 0x28
 80045d6:	2102      	movs	r1, #2
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fd23 	bl	8005024 <RCCEx_PLL3_Config>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80045f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80045f8:	2300      	movs	r3, #0
 80045fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80045fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004600:	460b      	mov	r3, r1
 8004602:	4313      	orrs	r3, r2
 8004604:	d038      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800460e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004612:	d018      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004614:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004618:	d811      	bhi.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800461a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800461e:	d014      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004624:	d80b      	bhi.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004626:	2b00      	cmp	r3, #0
 8004628:	d011      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800462a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800462e:	d106      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004630:	4bc3      	ldr	r3, [pc, #780]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004634:	4ac2      	ldr	r2, [pc, #776]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004636:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800463a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800463c:	e008      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004644:	e004      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004646:	bf00      	nop
 8004648:	e002      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800464a:	bf00      	nop
 800464c:	e000      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800464e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10b      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004658:	4bb9      	ldr	r3, [pc, #740]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800465a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800465c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004668:	4ab5      	ldr	r2, [pc, #724]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800466a:	430b      	orrs	r3, r1
 800466c:	6553      	str	r3, [r2, #84]	@ 0x54
 800466e:	e003      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004684:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004686:	2300      	movs	r3, #0
 8004688:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800468a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800468e:	460b      	mov	r3, r1
 8004690:	4313      	orrs	r3, r2
 8004692:	d009      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004694:	4baa      	ldr	r3, [pc, #680]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004698:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800469c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046a2:	4aa7      	ldr	r2, [pc, #668]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80046a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80046b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80046b6:	2300      	movs	r3, #0
 80046b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80046ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80046be:	460b      	mov	r3, r1
 80046c0:	4313      	orrs	r3, r2
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80046c4:	4b9e      	ldr	r3, [pc, #632]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80046cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80046d4:	4a9a      	ldr	r2, [pc, #616]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046d6:	430b      	orrs	r3, r1
 80046d8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80046e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046e8:	2300      	movs	r3, #0
 80046ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046ec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80046f0:	460b      	mov	r3, r1
 80046f2:	4313      	orrs	r3, r2
 80046f4:	d009      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046f6:	4b92      	ldr	r3, [pc, #584]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046fa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004704:	4a8e      	ldr	r2, [pc, #568]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004706:	430b      	orrs	r3, r1
 8004708:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800470a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004712:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004716:	643b      	str	r3, [r7, #64]	@ 0x40
 8004718:	2300      	movs	r3, #0
 800471a:	647b      	str	r3, [r7, #68]	@ 0x44
 800471c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004720:	460b      	mov	r3, r1
 8004722:	4313      	orrs	r3, r2
 8004724:	d00e      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004726:	4b86      	ldr	r3, [pc, #536]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	4a85      	ldr	r2, [pc, #532]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800472c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004730:	6113      	str	r3, [r2, #16]
 8004732:	4b83      	ldr	r3, [pc, #524]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004734:	6919      	ldr	r1, [r3, #16]
 8004736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800473e:	4a80      	ldr	r2, [pc, #512]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004740:	430b      	orrs	r3, r1
 8004742:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004750:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004752:	2300      	movs	r3, #0
 8004754:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004756:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800475a:	460b      	mov	r3, r1
 800475c:	4313      	orrs	r3, r2
 800475e:	d009      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004760:	4b77      	ldr	r3, [pc, #476]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004764:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800476e:	4a74      	ldr	r2, [pc, #464]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004770:	430b      	orrs	r3, r1
 8004772:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004780:	633b      	str	r3, [r7, #48]	@ 0x30
 8004782:	2300      	movs	r3, #0
 8004784:	637b      	str	r3, [r7, #52]	@ 0x34
 8004786:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800478a:	460b      	mov	r3, r1
 800478c:	4313      	orrs	r3, r2
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004790:	4b6b      	ldr	r3, [pc, #428]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004794:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047a0:	4a67      	ldr	r2, [pc, #412]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047a2:	430b      	orrs	r3, r1
 80047a4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80047a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	2100      	movs	r1, #0
 80047b0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80047bc:	460b      	mov	r3, r1
 80047be:	4313      	orrs	r3, r2
 80047c0:	d011      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c6:	3308      	adds	r3, #8
 80047c8:	2100      	movs	r1, #0
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fb78 	bl	8004ec0 <RCCEx_PLL2_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80047e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	2100      	movs	r1, #0
 80047f0:	6239      	str	r1, [r7, #32]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80047fc:	460b      	mov	r3, r1
 80047fe:	4313      	orrs	r3, r2
 8004800:	d011      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004806:	3308      	adds	r3, #8
 8004808:	2101      	movs	r1, #1
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fb58 	bl	8004ec0 <RCCEx_PLL2_Config>
 8004810:	4603      	mov	r3, r0
 8004812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004822:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482e:	2100      	movs	r1, #0
 8004830:	61b9      	str	r1, [r7, #24]
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	61fb      	str	r3, [r7, #28]
 8004838:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800483c:	460b      	mov	r3, r1
 800483e:	4313      	orrs	r3, r2
 8004840:	d011      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004846:	3308      	adds	r3, #8
 8004848:	2102      	movs	r1, #2
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fb38 	bl	8004ec0 <RCCEx_PLL2_Config>
 8004850:	4603      	mov	r3, r0
 8004852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004862:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486e:	2100      	movs	r1, #0
 8004870:	6139      	str	r1, [r7, #16]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800487c:	460b      	mov	r3, r1
 800487e:	4313      	orrs	r3, r2
 8004880:	d011      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004886:	3328      	adds	r3, #40	@ 0x28
 8004888:	2100      	movs	r1, #0
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fbca 	bl	8005024 <RCCEx_PLL3_Config>
 8004890:	4603      	mov	r3, r0
 8004892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004896:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80048a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ae:	2100      	movs	r1, #0
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	f003 0310 	and.w	r3, r3, #16
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80048bc:	460b      	mov	r3, r1
 80048be:	4313      	orrs	r3, r2
 80048c0:	d011      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c6:	3328      	adds	r3, #40	@ 0x28
 80048c8:	2101      	movs	r1, #1
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fbaa 	bl	8005024 <RCCEx_PLL3_Config>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80048e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	2100      	movs	r1, #0
 80048f0:	6039      	str	r1, [r7, #0]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	607b      	str	r3, [r7, #4]
 80048f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80048fc:	460b      	mov	r3, r1
 80048fe:	4313      	orrs	r3, r2
 8004900:	d011      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004906:	3328      	adds	r3, #40	@ 0x28
 8004908:	2102      	movs	r1, #2
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fb8a 	bl	8005024 <RCCEx_PLL3_Config>
 8004910:	4603      	mov	r3, r0
 8004912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004922:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004926:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	e000      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
}
 8004934:	4618      	mov	r0, r3
 8004936:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800493a:	46bd      	mov	sp, r7
 800493c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004940:	58024400 	.word	0x58024400

08004944 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004948:	f7fe fd96 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 800494c:	4602      	mov	r2, r0
 800494e:	4b06      	ldr	r3, [pc, #24]	@ (8004968 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	091b      	lsrs	r3, r3, #4
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	4904      	ldr	r1, [pc, #16]	@ (800496c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800495a:	5ccb      	ldrb	r3, [r1, r3]
 800495c:	f003 031f 	and.w	r3, r3, #31
 8004960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004964:	4618      	mov	r0, r3
 8004966:	bd80      	pop	{r7, pc}
 8004968:	58024400 	.word	0x58024400
 800496c:	08006c00 	.word	0x08006c00

08004970 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004970:	b480      	push	{r7}
 8004972:	b089      	sub	sp, #36	@ 0x24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004978:	4ba1      	ldr	r3, [pc, #644]	@ (8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800497a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004982:	4b9f      	ldr	r3, [pc, #636]	@ (8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004986:	0b1b      	lsrs	r3, r3, #12
 8004988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800498c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800498e:	4b9c      	ldr	r3, [pc, #624]	@ (8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004992:	091b      	lsrs	r3, r3, #4
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800499a:	4b99      	ldr	r3, [pc, #612]	@ (8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800499c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800499e:	08db      	lsrs	r3, r3, #3
 80049a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	fb02 f303 	mul.w	r3, r2, r3
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 8111 	beq.w	8004be0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	f000 8083 	beq.w	8004acc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	f200 80a1 	bhi.w	8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d056      	beq.n	8004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80049da:	e099      	b.n	8004b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049dc:	4b88      	ldr	r3, [pc, #544]	@ (8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0320 	and.w	r3, r3, #32
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d02d      	beq.n	8004a44 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049e8:	4b85      	ldr	r3, [pc, #532]	@ (8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	08db      	lsrs	r3, r3, #3
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	4a84      	ldr	r2, [pc, #528]	@ (8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80049f4:	fa22 f303 	lsr.w	r3, r2, r3
 80049f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	ee07 3a90 	vmov	s15, r3
 8004a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a12:	4b7b      	ldr	r3, [pc, #492]	@ (8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a26:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a42:	e087      	b.n	8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	ee07 3a90 	vmov	s15, r3
 8004a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a56:	4b6a      	ldr	r3, [pc, #424]	@ (8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5e:	ee07 3a90 	vmov	s15, r3
 8004a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a6a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a86:	e065      	b.n	8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a92:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a9a:	4b59      	ldr	r3, [pc, #356]	@ (8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aca:	e043      	b.n	8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ade:	4b48      	ldr	r3, [pc, #288]	@ (8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004af2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b0e:	e021      	b.n	8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b22:	4b37      	ldr	r3, [pc, #220]	@ (8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b36:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b54:	4b2a      	ldr	r3, [pc, #168]	@ (8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b58:	0a5b      	lsrs	r3, r3, #9
 8004b5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b7a:	ee17 2a90 	vmov	r2, s15
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b82:	4b1f      	ldr	r3, [pc, #124]	@ (8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b86:	0c1b      	lsrs	r3, r3, #16
 8004b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b8c:	ee07 3a90 	vmov	s15, r3
 8004b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ba8:	ee17 2a90 	vmov	r2, s15
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004bb0:	4b13      	ldr	r3, [pc, #76]	@ (8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb4:	0e1b      	lsrs	r3, r3, #24
 8004bb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bca:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd6:	ee17 2a90 	vmov	r2, s15
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004bde:	e008      	b.n	8004bf2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	609a      	str	r2, [r3, #8]
}
 8004bf2:	bf00      	nop
 8004bf4:	3724      	adds	r7, #36	@ 0x24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	58024400 	.word	0x58024400
 8004c04:	03d09000 	.word	0x03d09000
 8004c08:	46000000 	.word	0x46000000
 8004c0c:	4c742400 	.word	0x4c742400
 8004c10:	4a742400 	.word	0x4a742400
 8004c14:	4af42400 	.word	0x4af42400

08004c18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b089      	sub	sp, #36	@ 0x24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c20:	4ba1      	ldr	r3, [pc, #644]	@ (8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c24:	f003 0303 	and.w	r3, r3, #3
 8004c28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004c2a:	4b9f      	ldr	r3, [pc, #636]	@ (8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2e:	0d1b      	lsrs	r3, r3, #20
 8004c30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c36:	4b9c      	ldr	r3, [pc, #624]	@ (8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3a:	0a1b      	lsrs	r3, r3, #8
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c42:	4b99      	ldr	r3, [pc, #612]	@ (8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c46:	08db      	lsrs	r3, r3, #3
 8004c48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 8111 	beq.w	8004e88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	f000 8083 	beq.w	8004d74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	f200 80a1 	bhi.w	8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d056      	beq.n	8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c82:	e099      	b.n	8004db8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c84:	4b88      	ldr	r3, [pc, #544]	@ (8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0320 	and.w	r3, r3, #32
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d02d      	beq.n	8004cec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c90:	4b85      	ldr	r3, [pc, #532]	@ (8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	08db      	lsrs	r3, r3, #3
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	4a84      	ldr	r2, [pc, #528]	@ (8004eac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	ee07 3a90 	vmov	s15, r3
 8004ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cba:	4b7b      	ldr	r3, [pc, #492]	@ (8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc2:	ee07 3a90 	vmov	s15, r3
 8004cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004cea:	e087      	b.n	8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	ee07 3a90 	vmov	s15, r3
 8004cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cfe:	4b6a      	ldr	r3, [pc, #424]	@ (8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d2e:	e065      	b.n	8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d42:	4b59      	ldr	r3, [pc, #356]	@ (8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d72:	e043      	b.n	8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d86:	4b48      	ldr	r3, [pc, #288]	@ (8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004db6:	e021      	b.n	8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dca:	4b37      	ldr	r3, [pc, #220]	@ (8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dde:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dfa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004dfc:	4b2a      	ldr	r3, [pc, #168]	@ (8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e00:	0a5b      	lsrs	r3, r3, #9
 8004e02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e06:	ee07 3a90 	vmov	s15, r3
 8004e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e16:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e22:	ee17 2a90 	vmov	r2, s15
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2e:	0c1b      	lsrs	r3, r3, #16
 8004e30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e34:	ee07 3a90 	vmov	s15, r3
 8004e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e44:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e50:	ee17 2a90 	vmov	r2, s15
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004e58:	4b13      	ldr	r3, [pc, #76]	@ (8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5c:	0e1b      	lsrs	r3, r3, #24
 8004e5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e72:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e7e:	ee17 2a90 	vmov	r2, s15
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e86:	e008      	b.n	8004e9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	609a      	str	r2, [r3, #8]
}
 8004e9a:	bf00      	nop
 8004e9c:	3724      	adds	r7, #36	@ 0x24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	58024400 	.word	0x58024400
 8004eac:	03d09000 	.word	0x03d09000
 8004eb0:	46000000 	.word	0x46000000
 8004eb4:	4c742400 	.word	0x4c742400
 8004eb8:	4a742400 	.word	0x4a742400
 8004ebc:	4af42400 	.word	0x4af42400

08004ec0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ece:	4b53      	ldr	r3, [pc, #332]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d101      	bne.n	8004ede <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e099      	b.n	8005012 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ede:	4b4f      	ldr	r3, [pc, #316]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a4e      	ldr	r2, [pc, #312]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004ee4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eea:	f7fc fa63 	bl	80013b4 <HAL_GetTick>
 8004eee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ef0:	e008      	b.n	8004f04 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ef2:	f7fc fa5f 	bl	80013b4 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e086      	b.n	8005012 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f04:	4b45      	ldr	r3, [pc, #276]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1f0      	bne.n	8004ef2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f10:	4b42      	ldr	r3, [pc, #264]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f14:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	031b      	lsls	r3, r3, #12
 8004f1e:	493f      	ldr	r1, [pc, #252]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	025b      	lsls	r3, r3, #9
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	041b      	lsls	r3, r3, #16
 8004f42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	061b      	lsls	r3, r3, #24
 8004f50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f54:	4931      	ldr	r1, [pc, #196]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f5a:	4b30      	ldr	r3, [pc, #192]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	492d      	ldr	r1, [pc, #180]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f70:	f023 0220 	bic.w	r2, r3, #32
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	4928      	ldr	r1, [pc, #160]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f7e:	4b27      	ldr	r3, [pc, #156]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f82:	4a26      	ldr	r2, [pc, #152]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004f84:	f023 0310 	bic.w	r3, r3, #16
 8004f88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f8a:	4b24      	ldr	r3, [pc, #144]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004f8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f8e:	4b24      	ldr	r3, [pc, #144]	@ (8005020 <RCCEx_PLL2_Config+0x160>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	69d2      	ldr	r2, [r2, #28]
 8004f96:	00d2      	lsls	r2, r2, #3
 8004f98:	4920      	ldr	r1, [pc, #128]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004fa4:	f043 0310 	orr.w	r3, r3, #16
 8004fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d106      	bne.n	8004fbe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb4:	4a19      	ldr	r2, [pc, #100]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004fb6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004fba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fbc:	e00f      	b.n	8004fde <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d106      	bne.n	8004fd2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004fc4:	4b15      	ldr	r3, [pc, #84]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc8:	4a14      	ldr	r2, [pc, #80]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004fca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fd0:	e005      	b.n	8004fde <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004fd2:	4b12      	ldr	r3, [pc, #72]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd6:	4a11      	ldr	r2, [pc, #68]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004fd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004fde:	4b0f      	ldr	r3, [pc, #60]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8004fe4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fea:	f7fc f9e3 	bl	80013b4 <HAL_GetTick>
 8004fee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ff0:	e008      	b.n	8005004 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ff2:	f7fc f9df 	bl	80013b4 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e006      	b.n	8005012 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005004:	4b05      	ldr	r3, [pc, #20]	@ (800501c <RCCEx_PLL2_Config+0x15c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0f0      	beq.n	8004ff2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005010:	7bfb      	ldrb	r3, [r7, #15]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	58024400 	.word	0x58024400
 8005020:	ffff0007 	.word	0xffff0007

08005024 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005032:	4b53      	ldr	r3, [pc, #332]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 8005034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	2b03      	cmp	r3, #3
 800503c:	d101      	bne.n	8005042 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e099      	b.n	8005176 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005042:	4b4f      	ldr	r3, [pc, #316]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a4e      	ldr	r2, [pc, #312]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 8005048:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800504c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800504e:	f7fc f9b1 	bl	80013b4 <HAL_GetTick>
 8005052:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005054:	e008      	b.n	8005068 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005056:	f7fc f9ad 	bl	80013b4 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d901      	bls.n	8005068 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e086      	b.n	8005176 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005068:	4b45      	ldr	r3, [pc, #276]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1f0      	bne.n	8005056 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005074:	4b42      	ldr	r3, [pc, #264]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 8005076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005078:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	051b      	lsls	r3, r3, #20
 8005082:	493f      	ldr	r1, [pc, #252]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 8005084:	4313      	orrs	r3, r2
 8005086:	628b      	str	r3, [r1, #40]	@ 0x28
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	3b01      	subs	r3, #1
 800508e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	3b01      	subs	r3, #1
 8005098:	025b      	lsls	r3, r3, #9
 800509a:	b29b      	uxth	r3, r3
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	041b      	lsls	r3, r3, #16
 80050a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	061b      	lsls	r3, r3, #24
 80050b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80050b8:	4931      	ldr	r1, [pc, #196]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80050be:	4b30      	ldr	r3, [pc, #192]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 80050c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	492d      	ldr	r1, [pc, #180]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80050d0:	4b2b      	ldr	r3, [pc, #172]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 80050d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	4928      	ldr	r1, [pc, #160]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80050e2:	4b27      	ldr	r3, [pc, #156]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 80050e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e6:	4a26      	ldr	r2, [pc, #152]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 80050e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80050ee:	4b24      	ldr	r3, [pc, #144]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 80050f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050f2:	4b24      	ldr	r3, [pc, #144]	@ (8005184 <RCCEx_PLL3_Config+0x160>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	69d2      	ldr	r2, [r2, #28]
 80050fa:	00d2      	lsls	r2, r2, #3
 80050fc:	4920      	ldr	r1, [pc, #128]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005102:	4b1f      	ldr	r3, [pc, #124]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 8005104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005106:	4a1e      	ldr	r2, [pc, #120]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 8005108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800510c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d106      	bne.n	8005122 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005114:	4b1a      	ldr	r3, [pc, #104]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 8005116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005118:	4a19      	ldr	r2, [pc, #100]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 800511a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800511e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005120:	e00f      	b.n	8005142 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d106      	bne.n	8005136 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005128:	4b15      	ldr	r3, [pc, #84]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 800512a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512c:	4a14      	ldr	r2, [pc, #80]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 800512e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005132:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005134:	e005      	b.n	8005142 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005136:	4b12      	ldr	r3, [pc, #72]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 8005138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513a:	4a11      	ldr	r2, [pc, #68]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 800513c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005140:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005142:	4b0f      	ldr	r3, [pc, #60]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a0e      	ldr	r2, [pc, #56]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 8005148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800514c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800514e:	f7fc f931 	bl	80013b4 <HAL_GetTick>
 8005152:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005154:	e008      	b.n	8005168 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005156:	f7fc f92d 	bl	80013b4 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e006      	b.n	8005176 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005168:	4b05      	ldr	r3, [pc, #20]	@ (8005180 <RCCEx_PLL3_Config+0x15c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005174:	7bfb      	ldrb	r3, [r7, #15]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	58024400 	.word	0x58024400
 8005184:	ffff0007 	.word	0xffff0007

08005188 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e042      	b.n	8005220 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f7fb fe6f 	bl	8000e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2224      	movs	r2, #36	@ 0x24
 80051b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0201 	bic.w	r2, r2, #1
 80051c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fd90 	bl	8005cf8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f825 	bl	8005228 <UART_SetConfig>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e01b      	b.n	8005220 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005206:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0201 	orr.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fe0f 	bl	8005e3c <UART_CheckIdleState>
 800521e:	4603      	mov	r3, r0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800522c:	b092      	sub	sp, #72	@ 0x48
 800522e:	af00      	add	r7, sp, #0
 8005230:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	431a      	orrs	r2, r3
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	431a      	orrs	r2, r3
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	4313      	orrs	r3, r2
 800524e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	4bbe      	ldr	r3, [pc, #760]	@ (8005550 <UART_SetConfig+0x328>)
 8005258:	4013      	ands	r3, r2
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	6812      	ldr	r2, [r2, #0]
 800525e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005260:	430b      	orrs	r3, r1
 8005262:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4ab3      	ldr	r2, [pc, #716]	@ (8005554 <UART_SetConfig+0x32c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d004      	beq.n	8005294 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005290:	4313      	orrs	r3, r2
 8005292:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	4baf      	ldr	r3, [pc, #700]	@ (8005558 <UART_SetConfig+0x330>)
 800529c:	4013      	ands	r3, r2
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80052a4:	430b      	orrs	r3, r1
 80052a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ae:	f023 010f 	bic.w	r1, r3, #15
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4aa6      	ldr	r2, [pc, #664]	@ (800555c <UART_SetConfig+0x334>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d177      	bne.n	80053b8 <UART_SetConfig+0x190>
 80052c8:	4ba5      	ldr	r3, [pc, #660]	@ (8005560 <UART_SetConfig+0x338>)
 80052ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052d0:	2b28      	cmp	r3, #40	@ 0x28
 80052d2:	d86d      	bhi.n	80053b0 <UART_SetConfig+0x188>
 80052d4:	a201      	add	r2, pc, #4	@ (adr r2, 80052dc <UART_SetConfig+0xb4>)
 80052d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052da:	bf00      	nop
 80052dc:	08005381 	.word	0x08005381
 80052e0:	080053b1 	.word	0x080053b1
 80052e4:	080053b1 	.word	0x080053b1
 80052e8:	080053b1 	.word	0x080053b1
 80052ec:	080053b1 	.word	0x080053b1
 80052f0:	080053b1 	.word	0x080053b1
 80052f4:	080053b1 	.word	0x080053b1
 80052f8:	080053b1 	.word	0x080053b1
 80052fc:	08005389 	.word	0x08005389
 8005300:	080053b1 	.word	0x080053b1
 8005304:	080053b1 	.word	0x080053b1
 8005308:	080053b1 	.word	0x080053b1
 800530c:	080053b1 	.word	0x080053b1
 8005310:	080053b1 	.word	0x080053b1
 8005314:	080053b1 	.word	0x080053b1
 8005318:	080053b1 	.word	0x080053b1
 800531c:	08005391 	.word	0x08005391
 8005320:	080053b1 	.word	0x080053b1
 8005324:	080053b1 	.word	0x080053b1
 8005328:	080053b1 	.word	0x080053b1
 800532c:	080053b1 	.word	0x080053b1
 8005330:	080053b1 	.word	0x080053b1
 8005334:	080053b1 	.word	0x080053b1
 8005338:	080053b1 	.word	0x080053b1
 800533c:	08005399 	.word	0x08005399
 8005340:	080053b1 	.word	0x080053b1
 8005344:	080053b1 	.word	0x080053b1
 8005348:	080053b1 	.word	0x080053b1
 800534c:	080053b1 	.word	0x080053b1
 8005350:	080053b1 	.word	0x080053b1
 8005354:	080053b1 	.word	0x080053b1
 8005358:	080053b1 	.word	0x080053b1
 800535c:	080053a1 	.word	0x080053a1
 8005360:	080053b1 	.word	0x080053b1
 8005364:	080053b1 	.word	0x080053b1
 8005368:	080053b1 	.word	0x080053b1
 800536c:	080053b1 	.word	0x080053b1
 8005370:	080053b1 	.word	0x080053b1
 8005374:	080053b1 	.word	0x080053b1
 8005378:	080053b1 	.word	0x080053b1
 800537c:	080053a9 	.word	0x080053a9
 8005380:	2301      	movs	r3, #1
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005386:	e222      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005388:	2304      	movs	r3, #4
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538e:	e21e      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005390:	2308      	movs	r3, #8
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005396:	e21a      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005398:	2310      	movs	r3, #16
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539e:	e216      	b.n	80057ce <UART_SetConfig+0x5a6>
 80053a0:	2320      	movs	r3, #32
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a6:	e212      	b.n	80057ce <UART_SetConfig+0x5a6>
 80053a8:	2340      	movs	r3, #64	@ 0x40
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ae:	e20e      	b.n	80057ce <UART_SetConfig+0x5a6>
 80053b0:	2380      	movs	r3, #128	@ 0x80
 80053b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b6:	e20a      	b.n	80057ce <UART_SetConfig+0x5a6>
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a69      	ldr	r2, [pc, #420]	@ (8005564 <UART_SetConfig+0x33c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d130      	bne.n	8005424 <UART_SetConfig+0x1fc>
 80053c2:	4b67      	ldr	r3, [pc, #412]	@ (8005560 <UART_SetConfig+0x338>)
 80053c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	2b05      	cmp	r3, #5
 80053cc:	d826      	bhi.n	800541c <UART_SetConfig+0x1f4>
 80053ce:	a201      	add	r2, pc, #4	@ (adr r2, 80053d4 <UART_SetConfig+0x1ac>)
 80053d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d4:	080053ed 	.word	0x080053ed
 80053d8:	080053f5 	.word	0x080053f5
 80053dc:	080053fd 	.word	0x080053fd
 80053e0:	08005405 	.word	0x08005405
 80053e4:	0800540d 	.word	0x0800540d
 80053e8:	08005415 	.word	0x08005415
 80053ec:	2300      	movs	r3, #0
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053f2:	e1ec      	b.n	80057ce <UART_SetConfig+0x5a6>
 80053f4:	2304      	movs	r3, #4
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fa:	e1e8      	b.n	80057ce <UART_SetConfig+0x5a6>
 80053fc:	2308      	movs	r3, #8
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005402:	e1e4      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005404:	2310      	movs	r3, #16
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540a:	e1e0      	b.n	80057ce <UART_SetConfig+0x5a6>
 800540c:	2320      	movs	r3, #32
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005412:	e1dc      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005414:	2340      	movs	r3, #64	@ 0x40
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541a:	e1d8      	b.n	80057ce <UART_SetConfig+0x5a6>
 800541c:	2380      	movs	r3, #128	@ 0x80
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005422:	e1d4      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a4f      	ldr	r2, [pc, #316]	@ (8005568 <UART_SetConfig+0x340>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d130      	bne.n	8005490 <UART_SetConfig+0x268>
 800542e:	4b4c      	ldr	r3, [pc, #304]	@ (8005560 <UART_SetConfig+0x338>)
 8005430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	2b05      	cmp	r3, #5
 8005438:	d826      	bhi.n	8005488 <UART_SetConfig+0x260>
 800543a:	a201      	add	r2, pc, #4	@ (adr r2, 8005440 <UART_SetConfig+0x218>)
 800543c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005440:	08005459 	.word	0x08005459
 8005444:	08005461 	.word	0x08005461
 8005448:	08005469 	.word	0x08005469
 800544c:	08005471 	.word	0x08005471
 8005450:	08005479 	.word	0x08005479
 8005454:	08005481 	.word	0x08005481
 8005458:	2300      	movs	r3, #0
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545e:	e1b6      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005460:	2304      	movs	r3, #4
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005466:	e1b2      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005468:	2308      	movs	r3, #8
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546e:	e1ae      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005470:	2310      	movs	r3, #16
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005476:	e1aa      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005478:	2320      	movs	r3, #32
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547e:	e1a6      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005480:	2340      	movs	r3, #64	@ 0x40
 8005482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005486:	e1a2      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005488:	2380      	movs	r3, #128	@ 0x80
 800548a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800548e:	e19e      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a35      	ldr	r2, [pc, #212]	@ (800556c <UART_SetConfig+0x344>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d130      	bne.n	80054fc <UART_SetConfig+0x2d4>
 800549a:	4b31      	ldr	r3, [pc, #196]	@ (8005560 <UART_SetConfig+0x338>)
 800549c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	2b05      	cmp	r3, #5
 80054a4:	d826      	bhi.n	80054f4 <UART_SetConfig+0x2cc>
 80054a6:	a201      	add	r2, pc, #4	@ (adr r2, 80054ac <UART_SetConfig+0x284>)
 80054a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ac:	080054c5 	.word	0x080054c5
 80054b0:	080054cd 	.word	0x080054cd
 80054b4:	080054d5 	.word	0x080054d5
 80054b8:	080054dd 	.word	0x080054dd
 80054bc:	080054e5 	.word	0x080054e5
 80054c0:	080054ed 	.word	0x080054ed
 80054c4:	2300      	movs	r3, #0
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ca:	e180      	b.n	80057ce <UART_SetConfig+0x5a6>
 80054cc:	2304      	movs	r3, #4
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054d2:	e17c      	b.n	80057ce <UART_SetConfig+0x5a6>
 80054d4:	2308      	movs	r3, #8
 80054d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054da:	e178      	b.n	80057ce <UART_SetConfig+0x5a6>
 80054dc:	2310      	movs	r3, #16
 80054de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054e2:	e174      	b.n	80057ce <UART_SetConfig+0x5a6>
 80054e4:	2320      	movs	r3, #32
 80054e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ea:	e170      	b.n	80057ce <UART_SetConfig+0x5a6>
 80054ec:	2340      	movs	r3, #64	@ 0x40
 80054ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054f2:	e16c      	b.n	80057ce <UART_SetConfig+0x5a6>
 80054f4:	2380      	movs	r3, #128	@ 0x80
 80054f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054fa:	e168      	b.n	80057ce <UART_SetConfig+0x5a6>
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a1b      	ldr	r2, [pc, #108]	@ (8005570 <UART_SetConfig+0x348>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d142      	bne.n	800558c <UART_SetConfig+0x364>
 8005506:	4b16      	ldr	r3, [pc, #88]	@ (8005560 <UART_SetConfig+0x338>)
 8005508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	2b05      	cmp	r3, #5
 8005510:	d838      	bhi.n	8005584 <UART_SetConfig+0x35c>
 8005512:	a201      	add	r2, pc, #4	@ (adr r2, 8005518 <UART_SetConfig+0x2f0>)
 8005514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005518:	08005531 	.word	0x08005531
 800551c:	08005539 	.word	0x08005539
 8005520:	08005541 	.word	0x08005541
 8005524:	08005549 	.word	0x08005549
 8005528:	08005575 	.word	0x08005575
 800552c:	0800557d 	.word	0x0800557d
 8005530:	2300      	movs	r3, #0
 8005532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005536:	e14a      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005538:	2304      	movs	r3, #4
 800553a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800553e:	e146      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005540:	2308      	movs	r3, #8
 8005542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005546:	e142      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005548:	2310      	movs	r3, #16
 800554a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800554e:	e13e      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005550:	cfff69f3 	.word	0xcfff69f3
 8005554:	58000c00 	.word	0x58000c00
 8005558:	11fff4ff 	.word	0x11fff4ff
 800555c:	40011000 	.word	0x40011000
 8005560:	58024400 	.word	0x58024400
 8005564:	40004400 	.word	0x40004400
 8005568:	40004800 	.word	0x40004800
 800556c:	40004c00 	.word	0x40004c00
 8005570:	40005000 	.word	0x40005000
 8005574:	2320      	movs	r3, #32
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800557a:	e128      	b.n	80057ce <UART_SetConfig+0x5a6>
 800557c:	2340      	movs	r3, #64	@ 0x40
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005582:	e124      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005584:	2380      	movs	r3, #128	@ 0x80
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800558a:	e120      	b.n	80057ce <UART_SetConfig+0x5a6>
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4acb      	ldr	r2, [pc, #812]	@ (80058c0 <UART_SetConfig+0x698>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d176      	bne.n	8005684 <UART_SetConfig+0x45c>
 8005596:	4bcb      	ldr	r3, [pc, #812]	@ (80058c4 <UART_SetConfig+0x69c>)
 8005598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800559a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800559e:	2b28      	cmp	r3, #40	@ 0x28
 80055a0:	d86c      	bhi.n	800567c <UART_SetConfig+0x454>
 80055a2:	a201      	add	r2, pc, #4	@ (adr r2, 80055a8 <UART_SetConfig+0x380>)
 80055a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a8:	0800564d 	.word	0x0800564d
 80055ac:	0800567d 	.word	0x0800567d
 80055b0:	0800567d 	.word	0x0800567d
 80055b4:	0800567d 	.word	0x0800567d
 80055b8:	0800567d 	.word	0x0800567d
 80055bc:	0800567d 	.word	0x0800567d
 80055c0:	0800567d 	.word	0x0800567d
 80055c4:	0800567d 	.word	0x0800567d
 80055c8:	08005655 	.word	0x08005655
 80055cc:	0800567d 	.word	0x0800567d
 80055d0:	0800567d 	.word	0x0800567d
 80055d4:	0800567d 	.word	0x0800567d
 80055d8:	0800567d 	.word	0x0800567d
 80055dc:	0800567d 	.word	0x0800567d
 80055e0:	0800567d 	.word	0x0800567d
 80055e4:	0800567d 	.word	0x0800567d
 80055e8:	0800565d 	.word	0x0800565d
 80055ec:	0800567d 	.word	0x0800567d
 80055f0:	0800567d 	.word	0x0800567d
 80055f4:	0800567d 	.word	0x0800567d
 80055f8:	0800567d 	.word	0x0800567d
 80055fc:	0800567d 	.word	0x0800567d
 8005600:	0800567d 	.word	0x0800567d
 8005604:	0800567d 	.word	0x0800567d
 8005608:	08005665 	.word	0x08005665
 800560c:	0800567d 	.word	0x0800567d
 8005610:	0800567d 	.word	0x0800567d
 8005614:	0800567d 	.word	0x0800567d
 8005618:	0800567d 	.word	0x0800567d
 800561c:	0800567d 	.word	0x0800567d
 8005620:	0800567d 	.word	0x0800567d
 8005624:	0800567d 	.word	0x0800567d
 8005628:	0800566d 	.word	0x0800566d
 800562c:	0800567d 	.word	0x0800567d
 8005630:	0800567d 	.word	0x0800567d
 8005634:	0800567d 	.word	0x0800567d
 8005638:	0800567d 	.word	0x0800567d
 800563c:	0800567d 	.word	0x0800567d
 8005640:	0800567d 	.word	0x0800567d
 8005644:	0800567d 	.word	0x0800567d
 8005648:	08005675 	.word	0x08005675
 800564c:	2301      	movs	r3, #1
 800564e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005652:	e0bc      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005654:	2304      	movs	r3, #4
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565a:	e0b8      	b.n	80057ce <UART_SetConfig+0x5a6>
 800565c:	2308      	movs	r3, #8
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005662:	e0b4      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005664:	2310      	movs	r3, #16
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566a:	e0b0      	b.n	80057ce <UART_SetConfig+0x5a6>
 800566c:	2320      	movs	r3, #32
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005672:	e0ac      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005674:	2340      	movs	r3, #64	@ 0x40
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800567a:	e0a8      	b.n	80057ce <UART_SetConfig+0x5a6>
 800567c:	2380      	movs	r3, #128	@ 0x80
 800567e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005682:	e0a4      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a8f      	ldr	r2, [pc, #572]	@ (80058c8 <UART_SetConfig+0x6a0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d130      	bne.n	80056f0 <UART_SetConfig+0x4c8>
 800568e:	4b8d      	ldr	r3, [pc, #564]	@ (80058c4 <UART_SetConfig+0x69c>)
 8005690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	2b05      	cmp	r3, #5
 8005698:	d826      	bhi.n	80056e8 <UART_SetConfig+0x4c0>
 800569a:	a201      	add	r2, pc, #4	@ (adr r2, 80056a0 <UART_SetConfig+0x478>)
 800569c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a0:	080056b9 	.word	0x080056b9
 80056a4:	080056c1 	.word	0x080056c1
 80056a8:	080056c9 	.word	0x080056c9
 80056ac:	080056d1 	.word	0x080056d1
 80056b0:	080056d9 	.word	0x080056d9
 80056b4:	080056e1 	.word	0x080056e1
 80056b8:	2300      	movs	r3, #0
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056be:	e086      	b.n	80057ce <UART_SetConfig+0x5a6>
 80056c0:	2304      	movs	r3, #4
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056c6:	e082      	b.n	80057ce <UART_SetConfig+0x5a6>
 80056c8:	2308      	movs	r3, #8
 80056ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ce:	e07e      	b.n	80057ce <UART_SetConfig+0x5a6>
 80056d0:	2310      	movs	r3, #16
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056d6:	e07a      	b.n	80057ce <UART_SetConfig+0x5a6>
 80056d8:	2320      	movs	r3, #32
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056de:	e076      	b.n	80057ce <UART_SetConfig+0x5a6>
 80056e0:	2340      	movs	r3, #64	@ 0x40
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056e6:	e072      	b.n	80057ce <UART_SetConfig+0x5a6>
 80056e8:	2380      	movs	r3, #128	@ 0x80
 80056ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ee:	e06e      	b.n	80057ce <UART_SetConfig+0x5a6>
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a75      	ldr	r2, [pc, #468]	@ (80058cc <UART_SetConfig+0x6a4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d130      	bne.n	800575c <UART_SetConfig+0x534>
 80056fa:	4b72      	ldr	r3, [pc, #456]	@ (80058c4 <UART_SetConfig+0x69c>)
 80056fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056fe:	f003 0307 	and.w	r3, r3, #7
 8005702:	2b05      	cmp	r3, #5
 8005704:	d826      	bhi.n	8005754 <UART_SetConfig+0x52c>
 8005706:	a201      	add	r2, pc, #4	@ (adr r2, 800570c <UART_SetConfig+0x4e4>)
 8005708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570c:	08005725 	.word	0x08005725
 8005710:	0800572d 	.word	0x0800572d
 8005714:	08005735 	.word	0x08005735
 8005718:	0800573d 	.word	0x0800573d
 800571c:	08005745 	.word	0x08005745
 8005720:	0800574d 	.word	0x0800574d
 8005724:	2300      	movs	r3, #0
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800572a:	e050      	b.n	80057ce <UART_SetConfig+0x5a6>
 800572c:	2304      	movs	r3, #4
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005732:	e04c      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005734:	2308      	movs	r3, #8
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800573a:	e048      	b.n	80057ce <UART_SetConfig+0x5a6>
 800573c:	2310      	movs	r3, #16
 800573e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005742:	e044      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005744:	2320      	movs	r3, #32
 8005746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800574a:	e040      	b.n	80057ce <UART_SetConfig+0x5a6>
 800574c:	2340      	movs	r3, #64	@ 0x40
 800574e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005752:	e03c      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005754:	2380      	movs	r3, #128	@ 0x80
 8005756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800575a:	e038      	b.n	80057ce <UART_SetConfig+0x5a6>
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a5b      	ldr	r2, [pc, #364]	@ (80058d0 <UART_SetConfig+0x6a8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d130      	bne.n	80057c8 <UART_SetConfig+0x5a0>
 8005766:	4b57      	ldr	r3, [pc, #348]	@ (80058c4 <UART_SetConfig+0x69c>)
 8005768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	2b05      	cmp	r3, #5
 8005770:	d826      	bhi.n	80057c0 <UART_SetConfig+0x598>
 8005772:	a201      	add	r2, pc, #4	@ (adr r2, 8005778 <UART_SetConfig+0x550>)
 8005774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005778:	08005791 	.word	0x08005791
 800577c:	08005799 	.word	0x08005799
 8005780:	080057a1 	.word	0x080057a1
 8005784:	080057a9 	.word	0x080057a9
 8005788:	080057b1 	.word	0x080057b1
 800578c:	080057b9 	.word	0x080057b9
 8005790:	2302      	movs	r3, #2
 8005792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005796:	e01a      	b.n	80057ce <UART_SetConfig+0x5a6>
 8005798:	2304      	movs	r3, #4
 800579a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800579e:	e016      	b.n	80057ce <UART_SetConfig+0x5a6>
 80057a0:	2308      	movs	r3, #8
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057a6:	e012      	b.n	80057ce <UART_SetConfig+0x5a6>
 80057a8:	2310      	movs	r3, #16
 80057aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ae:	e00e      	b.n	80057ce <UART_SetConfig+0x5a6>
 80057b0:	2320      	movs	r3, #32
 80057b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057b6:	e00a      	b.n	80057ce <UART_SetConfig+0x5a6>
 80057b8:	2340      	movs	r3, #64	@ 0x40
 80057ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057be:	e006      	b.n	80057ce <UART_SetConfig+0x5a6>
 80057c0:	2380      	movs	r3, #128	@ 0x80
 80057c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057c6:	e002      	b.n	80057ce <UART_SetConfig+0x5a6>
 80057c8:	2380      	movs	r3, #128	@ 0x80
 80057ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a3f      	ldr	r2, [pc, #252]	@ (80058d0 <UART_SetConfig+0x6a8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	f040 80f8 	bne.w	80059ca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80057de:	2b20      	cmp	r3, #32
 80057e0:	dc46      	bgt.n	8005870 <UART_SetConfig+0x648>
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	f2c0 8082 	blt.w	80058ec <UART_SetConfig+0x6c4>
 80057e8:	3b02      	subs	r3, #2
 80057ea:	2b1e      	cmp	r3, #30
 80057ec:	d87e      	bhi.n	80058ec <UART_SetConfig+0x6c4>
 80057ee:	a201      	add	r2, pc, #4	@ (adr r2, 80057f4 <UART_SetConfig+0x5cc>)
 80057f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f4:	08005877 	.word	0x08005877
 80057f8:	080058ed 	.word	0x080058ed
 80057fc:	0800587f 	.word	0x0800587f
 8005800:	080058ed 	.word	0x080058ed
 8005804:	080058ed 	.word	0x080058ed
 8005808:	080058ed 	.word	0x080058ed
 800580c:	0800588f 	.word	0x0800588f
 8005810:	080058ed 	.word	0x080058ed
 8005814:	080058ed 	.word	0x080058ed
 8005818:	080058ed 	.word	0x080058ed
 800581c:	080058ed 	.word	0x080058ed
 8005820:	080058ed 	.word	0x080058ed
 8005824:	080058ed 	.word	0x080058ed
 8005828:	080058ed 	.word	0x080058ed
 800582c:	0800589f 	.word	0x0800589f
 8005830:	080058ed 	.word	0x080058ed
 8005834:	080058ed 	.word	0x080058ed
 8005838:	080058ed 	.word	0x080058ed
 800583c:	080058ed 	.word	0x080058ed
 8005840:	080058ed 	.word	0x080058ed
 8005844:	080058ed 	.word	0x080058ed
 8005848:	080058ed 	.word	0x080058ed
 800584c:	080058ed 	.word	0x080058ed
 8005850:	080058ed 	.word	0x080058ed
 8005854:	080058ed 	.word	0x080058ed
 8005858:	080058ed 	.word	0x080058ed
 800585c:	080058ed 	.word	0x080058ed
 8005860:	080058ed 	.word	0x080058ed
 8005864:	080058ed 	.word	0x080058ed
 8005868:	080058ed 	.word	0x080058ed
 800586c:	080058df 	.word	0x080058df
 8005870:	2b40      	cmp	r3, #64	@ 0x40
 8005872:	d037      	beq.n	80058e4 <UART_SetConfig+0x6bc>
 8005874:	e03a      	b.n	80058ec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005876:	f7ff f865 	bl	8004944 <HAL_RCCEx_GetD3PCLK1Freq>
 800587a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800587c:	e03c      	b.n	80058f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800587e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff f874 	bl	8004970 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800588c:	e034      	b.n	80058f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800588e:	f107 0318 	add.w	r3, r7, #24
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff f9c0 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800589c:	e02c      	b.n	80058f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800589e:	4b09      	ldr	r3, [pc, #36]	@ (80058c4 <UART_SetConfig+0x69c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0320 	and.w	r3, r3, #32
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d016      	beq.n	80058d8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058aa:	4b06      	ldr	r3, [pc, #24]	@ (80058c4 <UART_SetConfig+0x69c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	08db      	lsrs	r3, r3, #3
 80058b0:	f003 0303 	and.w	r3, r3, #3
 80058b4:	4a07      	ldr	r2, [pc, #28]	@ (80058d4 <UART_SetConfig+0x6ac>)
 80058b6:	fa22 f303 	lsr.w	r3, r2, r3
 80058ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058bc:	e01c      	b.n	80058f8 <UART_SetConfig+0x6d0>
 80058be:	bf00      	nop
 80058c0:	40011400 	.word	0x40011400
 80058c4:	58024400 	.word	0x58024400
 80058c8:	40007800 	.word	0x40007800
 80058cc:	40007c00 	.word	0x40007c00
 80058d0:	58000c00 	.word	0x58000c00
 80058d4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80058d8:	4b9d      	ldr	r3, [pc, #628]	@ (8005b50 <UART_SetConfig+0x928>)
 80058da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058dc:	e00c      	b.n	80058f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058de:	4b9d      	ldr	r3, [pc, #628]	@ (8005b54 <UART_SetConfig+0x92c>)
 80058e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058e2:	e009      	b.n	80058f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058ea:	e005      	b.n	80058f8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80058f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 81de 	beq.w	8005cbc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005904:	4a94      	ldr	r2, [pc, #592]	@ (8005b58 <UART_SetConfig+0x930>)
 8005906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800590a:	461a      	mov	r2, r3
 800590c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800590e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005912:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	4613      	mov	r3, r2
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	4413      	add	r3, r2
 800591e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005920:	429a      	cmp	r2, r3
 8005922:	d305      	bcc.n	8005930 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800592a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800592c:	429a      	cmp	r2, r3
 800592e:	d903      	bls.n	8005938 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005936:	e1c1      	b.n	8005cbc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800593a:	2200      	movs	r2, #0
 800593c:	60bb      	str	r3, [r7, #8]
 800593e:	60fa      	str	r2, [r7, #12]
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005944:	4a84      	ldr	r2, [pc, #528]	@ (8005b58 <UART_SetConfig+0x930>)
 8005946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800594a:	b29b      	uxth	r3, r3
 800594c:	2200      	movs	r2, #0
 800594e:	603b      	str	r3, [r7, #0]
 8005950:	607a      	str	r2, [r7, #4]
 8005952:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005956:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800595a:	f7fa fcbd 	bl	80002d8 <__aeabi_uldivmod>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4610      	mov	r0, r2
 8005964:	4619      	mov	r1, r3
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	020b      	lsls	r3, r1, #8
 8005970:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005974:	0202      	lsls	r2, r0, #8
 8005976:	6979      	ldr	r1, [r7, #20]
 8005978:	6849      	ldr	r1, [r1, #4]
 800597a:	0849      	lsrs	r1, r1, #1
 800597c:	2000      	movs	r0, #0
 800597e:	460c      	mov	r4, r1
 8005980:	4605      	mov	r5, r0
 8005982:	eb12 0804 	adds.w	r8, r2, r4
 8005986:	eb43 0905 	adc.w	r9, r3, r5
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	469a      	mov	sl, r3
 8005992:	4693      	mov	fp, r2
 8005994:	4652      	mov	r2, sl
 8005996:	465b      	mov	r3, fp
 8005998:	4640      	mov	r0, r8
 800599a:	4649      	mov	r1, r9
 800599c:	f7fa fc9c 	bl	80002d8 <__aeabi_uldivmod>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4613      	mov	r3, r2
 80059a6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059ae:	d308      	bcc.n	80059c2 <UART_SetConfig+0x79a>
 80059b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059b6:	d204      	bcs.n	80059c2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059be:	60da      	str	r2, [r3, #12]
 80059c0:	e17c      	b.n	8005cbc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80059c8:	e178      	b.n	8005cbc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059d2:	f040 80c5 	bne.w	8005b60 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80059d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80059da:	2b20      	cmp	r3, #32
 80059dc:	dc48      	bgt.n	8005a70 <UART_SetConfig+0x848>
 80059de:	2b00      	cmp	r3, #0
 80059e0:	db7b      	blt.n	8005ada <UART_SetConfig+0x8b2>
 80059e2:	2b20      	cmp	r3, #32
 80059e4:	d879      	bhi.n	8005ada <UART_SetConfig+0x8b2>
 80059e6:	a201      	add	r2, pc, #4	@ (adr r2, 80059ec <UART_SetConfig+0x7c4>)
 80059e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ec:	08005a77 	.word	0x08005a77
 80059f0:	08005a7f 	.word	0x08005a7f
 80059f4:	08005adb 	.word	0x08005adb
 80059f8:	08005adb 	.word	0x08005adb
 80059fc:	08005a87 	.word	0x08005a87
 8005a00:	08005adb 	.word	0x08005adb
 8005a04:	08005adb 	.word	0x08005adb
 8005a08:	08005adb 	.word	0x08005adb
 8005a0c:	08005a97 	.word	0x08005a97
 8005a10:	08005adb 	.word	0x08005adb
 8005a14:	08005adb 	.word	0x08005adb
 8005a18:	08005adb 	.word	0x08005adb
 8005a1c:	08005adb 	.word	0x08005adb
 8005a20:	08005adb 	.word	0x08005adb
 8005a24:	08005adb 	.word	0x08005adb
 8005a28:	08005adb 	.word	0x08005adb
 8005a2c:	08005aa7 	.word	0x08005aa7
 8005a30:	08005adb 	.word	0x08005adb
 8005a34:	08005adb 	.word	0x08005adb
 8005a38:	08005adb 	.word	0x08005adb
 8005a3c:	08005adb 	.word	0x08005adb
 8005a40:	08005adb 	.word	0x08005adb
 8005a44:	08005adb 	.word	0x08005adb
 8005a48:	08005adb 	.word	0x08005adb
 8005a4c:	08005adb 	.word	0x08005adb
 8005a50:	08005adb 	.word	0x08005adb
 8005a54:	08005adb 	.word	0x08005adb
 8005a58:	08005adb 	.word	0x08005adb
 8005a5c:	08005adb 	.word	0x08005adb
 8005a60:	08005adb 	.word	0x08005adb
 8005a64:	08005adb 	.word	0x08005adb
 8005a68:	08005adb 	.word	0x08005adb
 8005a6c:	08005acd 	.word	0x08005acd
 8005a70:	2b40      	cmp	r3, #64	@ 0x40
 8005a72:	d02e      	beq.n	8005ad2 <UART_SetConfig+0x8aa>
 8005a74:	e031      	b.n	8005ada <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a76:	f7fd fd2f 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8005a7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a7c:	e033      	b.n	8005ae6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a7e:	f7fd fd41 	bl	8003504 <HAL_RCC_GetPCLK2Freq>
 8005a82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a84:	e02f      	b.n	8005ae6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fe ff70 	bl	8004970 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a94:	e027      	b.n	8005ae6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a96:	f107 0318 	add.w	r3, r7, #24
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff f8bc 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005aa4:	e01f      	b.n	8005ae6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8005b5c <UART_SetConfig+0x934>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d009      	beq.n	8005ac6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8005b5c <UART_SetConfig+0x934>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	08db      	lsrs	r3, r3, #3
 8005ab8:	f003 0303 	and.w	r3, r3, #3
 8005abc:	4a24      	ldr	r2, [pc, #144]	@ (8005b50 <UART_SetConfig+0x928>)
 8005abe:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ac4:	e00f      	b.n	8005ae6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005ac6:	4b22      	ldr	r3, [pc, #136]	@ (8005b50 <UART_SetConfig+0x928>)
 8005ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005aca:	e00c      	b.n	8005ae6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005acc:	4b21      	ldr	r3, [pc, #132]	@ (8005b54 <UART_SetConfig+0x92c>)
 8005ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ad0:	e009      	b.n	8005ae6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ad8:	e005      	b.n	8005ae6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005ae4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 80e7 	beq.w	8005cbc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af2:	4a19      	ldr	r2, [pc, #100]	@ (8005b58 <UART_SetConfig+0x930>)
 8005af4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005af8:	461a      	mov	r2, r3
 8005afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005afc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b00:	005a      	lsls	r2, r3, #1
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	085b      	lsrs	r3, r3, #1
 8005b08:	441a      	add	r2, r3
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b12:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b16:	2b0f      	cmp	r3, #15
 8005b18:	d916      	bls.n	8005b48 <UART_SetConfig+0x920>
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b20:	d212      	bcs.n	8005b48 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f023 030f 	bic.w	r3, r3, #15
 8005b2a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	f003 0307 	and.w	r3, r3, #7
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005b44:	60da      	str	r2, [r3, #12]
 8005b46:	e0b9      	b.n	8005cbc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005b4e:	e0b5      	b.n	8005cbc <UART_SetConfig+0xa94>
 8005b50:	03d09000 	.word	0x03d09000
 8005b54:	003d0900 	.word	0x003d0900
 8005b58:	08006c10 	.word	0x08006c10
 8005b5c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b60:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	dc49      	bgt.n	8005bfc <UART_SetConfig+0x9d4>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	db7c      	blt.n	8005c66 <UART_SetConfig+0xa3e>
 8005b6c:	2b20      	cmp	r3, #32
 8005b6e:	d87a      	bhi.n	8005c66 <UART_SetConfig+0xa3e>
 8005b70:	a201      	add	r2, pc, #4	@ (adr r2, 8005b78 <UART_SetConfig+0x950>)
 8005b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b76:	bf00      	nop
 8005b78:	08005c03 	.word	0x08005c03
 8005b7c:	08005c0b 	.word	0x08005c0b
 8005b80:	08005c67 	.word	0x08005c67
 8005b84:	08005c67 	.word	0x08005c67
 8005b88:	08005c13 	.word	0x08005c13
 8005b8c:	08005c67 	.word	0x08005c67
 8005b90:	08005c67 	.word	0x08005c67
 8005b94:	08005c67 	.word	0x08005c67
 8005b98:	08005c23 	.word	0x08005c23
 8005b9c:	08005c67 	.word	0x08005c67
 8005ba0:	08005c67 	.word	0x08005c67
 8005ba4:	08005c67 	.word	0x08005c67
 8005ba8:	08005c67 	.word	0x08005c67
 8005bac:	08005c67 	.word	0x08005c67
 8005bb0:	08005c67 	.word	0x08005c67
 8005bb4:	08005c67 	.word	0x08005c67
 8005bb8:	08005c33 	.word	0x08005c33
 8005bbc:	08005c67 	.word	0x08005c67
 8005bc0:	08005c67 	.word	0x08005c67
 8005bc4:	08005c67 	.word	0x08005c67
 8005bc8:	08005c67 	.word	0x08005c67
 8005bcc:	08005c67 	.word	0x08005c67
 8005bd0:	08005c67 	.word	0x08005c67
 8005bd4:	08005c67 	.word	0x08005c67
 8005bd8:	08005c67 	.word	0x08005c67
 8005bdc:	08005c67 	.word	0x08005c67
 8005be0:	08005c67 	.word	0x08005c67
 8005be4:	08005c67 	.word	0x08005c67
 8005be8:	08005c67 	.word	0x08005c67
 8005bec:	08005c67 	.word	0x08005c67
 8005bf0:	08005c67 	.word	0x08005c67
 8005bf4:	08005c67 	.word	0x08005c67
 8005bf8:	08005c59 	.word	0x08005c59
 8005bfc:	2b40      	cmp	r3, #64	@ 0x40
 8005bfe:	d02e      	beq.n	8005c5e <UART_SetConfig+0xa36>
 8005c00:	e031      	b.n	8005c66 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c02:	f7fd fc69 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8005c06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c08:	e033      	b.n	8005c72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c0a:	f7fd fc7b 	bl	8003504 <HAL_RCC_GetPCLK2Freq>
 8005c0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c10:	e02f      	b.n	8005c72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fe feaa 	bl	8004970 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c20:	e027      	b.n	8005c72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c22:	f107 0318 	add.w	r3, r7, #24
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fe fff6 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c30:	e01f      	b.n	8005c72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c32:	4b2d      	ldr	r3, [pc, #180]	@ (8005ce8 <UART_SetConfig+0xac0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d009      	beq.n	8005c52 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8005ce8 <UART_SetConfig+0xac0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	08db      	lsrs	r3, r3, #3
 8005c44:	f003 0303 	and.w	r3, r3, #3
 8005c48:	4a28      	ldr	r2, [pc, #160]	@ (8005cec <UART_SetConfig+0xac4>)
 8005c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c50:	e00f      	b.n	8005c72 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005c52:	4b26      	ldr	r3, [pc, #152]	@ (8005cec <UART_SetConfig+0xac4>)
 8005c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c56:	e00c      	b.n	8005c72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c58:	4b25      	ldr	r3, [pc, #148]	@ (8005cf0 <UART_SetConfig+0xac8>)
 8005c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c5c:	e009      	b.n	8005c72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c64:	e005      	b.n	8005c72 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005c70:	bf00      	nop
    }

    if (pclk != 0U)
 8005c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d021      	beq.n	8005cbc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8005cf4 <UART_SetConfig+0xacc>)
 8005c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c82:	461a      	mov	r2, r3
 8005c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c86:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	085b      	lsrs	r3, r3, #1
 8005c90:	441a      	add	r2, r3
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9e:	2b0f      	cmp	r3, #15
 8005ca0:	d909      	bls.n	8005cb6 <UART_SetConfig+0xa8e>
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ca8:	d205      	bcs.n	8005cb6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60da      	str	r2, [r3, #12]
 8005cb4:	e002      	b.n	8005cbc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005cd8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3748      	adds	r7, #72	@ 0x48
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ce6:	bf00      	nop
 8005ce8:	58024400 	.word	0x58024400
 8005cec:	03d09000 	.word	0x03d09000
 8005cf0:	003d0900 	.word	0x003d0900
 8005cf4:	08006c10 	.word	0x08006c10

08005cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6a:	f003 0304 	and.w	r3, r3, #4
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8c:	f003 0310 	and.w	r3, r3, #16
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01a      	beq.n	8005e0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005df6:	d10a      	bne.n	8005e0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	605a      	str	r2, [r3, #4]
  }
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b098      	sub	sp, #96	@ 0x60
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e4c:	f7fb fab2 	bl	80013b4 <HAL_GetTick>
 8005e50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d12f      	bne.n	8005ec0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f88e 	bl	8005f90 <UART_WaitOnFlagUntilTimeout>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d022      	beq.n	8005ec0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e9a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ea0:	e841 2300 	strex	r3, r2, [r1]
 8005ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e6      	bne.n	8005e7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e063      	b.n	8005f88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0304 	and.w	r3, r3, #4
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d149      	bne.n	8005f62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ece:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f857 	bl	8005f90 <UART_WaitOnFlagUntilTimeout>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d03c      	beq.n	8005f62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f06:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e6      	bne.n	8005ee8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3308      	adds	r3, #8
 8005f20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f023 0301 	bic.w	r3, r3, #1
 8005f30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3308      	adds	r3, #8
 8005f38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f3a:	61fa      	str	r2, [r7, #28]
 8005f3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3e:	69b9      	ldr	r1, [r7, #24]
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	617b      	str	r3, [r7, #20]
   return(result);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e5      	bne.n	8005f1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e012      	b.n	8005f88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3758      	adds	r7, #88	@ 0x58
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	603b      	str	r3, [r7, #0]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa0:	e04f      	b.n	8006042 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa8:	d04b      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005faa:	f7fb fa03 	bl	80013b4 <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d302      	bcc.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e04e      	b.n	8006062 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d037      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b80      	cmp	r3, #128	@ 0x80
 8005fd6:	d034      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b40      	cmp	r3, #64	@ 0x40
 8005fdc:	d031      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	f003 0308 	and.w	r3, r3, #8
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	d110      	bne.n	800600e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2208      	movs	r2, #8
 8005ff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 f839 	bl	800606c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2208      	movs	r2, #8
 8005ffe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e029      	b.n	8006062 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800601c:	d111      	bne.n	8006042 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006026:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f81f 	bl	800606c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2220      	movs	r2, #32
 8006032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e00f      	b.n	8006062 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69da      	ldr	r2, [r3, #28]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4013      	ands	r3, r2
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	429a      	cmp	r2, r3
 8006050:	bf0c      	ite	eq
 8006052:	2301      	moveq	r3, #1
 8006054:	2300      	movne	r3, #0
 8006056:	b2db      	uxtb	r3, r3
 8006058:	461a      	mov	r2, r3
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	429a      	cmp	r2, r3
 800605e:	d0a0      	beq.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800606c:	b480      	push	{r7}
 800606e:	b095      	sub	sp, #84	@ 0x54
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006088:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006092:	643b      	str	r3, [r7, #64]	@ 0x40
 8006094:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006098:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e6      	bne.n	8006074 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3308      	adds	r3, #8
 80060ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	4b1e      	ldr	r3, [pc, #120]	@ (8006134 <UART_EndRxTransfer+0xc8>)
 80060ba:	4013      	ands	r3, r2
 80060bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3308      	adds	r3, #8
 80060c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060ce:	e841 2300 	strex	r3, r2, [r1]
 80060d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1e5      	bne.n	80060a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d118      	bne.n	8006114 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	e853 3f00 	ldrex	r3, [r3]
 80060ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f023 0310 	bic.w	r3, r3, #16
 80060f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	461a      	mov	r2, r3
 80060fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006100:	61bb      	str	r3, [r7, #24]
 8006102:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006104:	6979      	ldr	r1, [r7, #20]
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	e841 2300 	strex	r3, r2, [r1]
 800610c:	613b      	str	r3, [r7, #16]
   return(result);
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1e6      	bne.n	80060e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2220      	movs	r2, #32
 8006118:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006128:	bf00      	nop
 800612a:	3754      	adds	r7, #84	@ 0x54
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	effffffe 	.word	0xeffffffe

08006138 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <HAL_UARTEx_DisableFifoMode+0x16>
 800614a:	2302      	movs	r3, #2
 800614c:	e027      	b.n	800619e <HAL_UARTEx_DisableFifoMode+0x66>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2224      	movs	r2, #36	@ 0x24
 800615a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0201 	bic.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800617c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2220      	movs	r2, #32
 8006190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061be:	2302      	movs	r3, #2
 80061c0:	e02d      	b.n	800621e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2224      	movs	r2, #36	@ 0x24
 80061ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0201 	bic.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f850 	bl	80062a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800623a:	2302      	movs	r3, #2
 800623c:	e02d      	b.n	800629a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2224      	movs	r2, #36	@ 0x24
 800624a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0201 	bic.w	r2, r2, #1
 8006264:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f812 	bl	80062a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
	...

080062a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d108      	bne.n	80062c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062c4:	e031      	b.n	800632a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062c6:	2310      	movs	r3, #16
 80062c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062ca:	2310      	movs	r3, #16
 80062cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	0e5b      	lsrs	r3, r3, #25
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	0f5b      	lsrs	r3, r3, #29
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	f003 0307 	and.w	r3, r3, #7
 80062ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062ee:	7bbb      	ldrb	r3, [r7, #14]
 80062f0:	7b3a      	ldrb	r2, [r7, #12]
 80062f2:	4911      	ldr	r1, [pc, #68]	@ (8006338 <UARTEx_SetNbDataToProcess+0x94>)
 80062f4:	5c8a      	ldrb	r2, [r1, r2]
 80062f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062fa:	7b3a      	ldrb	r2, [r7, #12]
 80062fc:	490f      	ldr	r1, [pc, #60]	@ (800633c <UARTEx_SetNbDataToProcess+0x98>)
 80062fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006300:	fb93 f3f2 	sdiv	r3, r3, r2
 8006304:	b29a      	uxth	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800630c:	7bfb      	ldrb	r3, [r7, #15]
 800630e:	7b7a      	ldrb	r2, [r7, #13]
 8006310:	4909      	ldr	r1, [pc, #36]	@ (8006338 <UARTEx_SetNbDataToProcess+0x94>)
 8006312:	5c8a      	ldrb	r2, [r1, r2]
 8006314:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006318:	7b7a      	ldrb	r2, [r7, #13]
 800631a:	4908      	ldr	r1, [pc, #32]	@ (800633c <UARTEx_SetNbDataToProcess+0x98>)
 800631c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800631e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006322:	b29a      	uxth	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800632a:	bf00      	nop
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	08006c28 	.word	0x08006c28
 800633c:	08006c30 	.word	0x08006c30

08006340 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006340:	b084      	sub	sp, #16
 8006342:	b580      	push	{r7, lr}
 8006344:	b084      	sub	sp, #16
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	f107 001c 	add.w	r0, r7, #28
 800634e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006352:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006356:	2b01      	cmp	r3, #1
 8006358:	d121      	bne.n	800639e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68da      	ldr	r2, [r3, #12]
 800636a:	4b2c      	ldr	r3, [pc, #176]	@ (800641c <USB_CoreInit+0xdc>)
 800636c:	4013      	ands	r3, r2
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800637e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006382:	2b01      	cmp	r3, #1
 8006384:	d105      	bne.n	8006392 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 faaa 	bl	80068ec <USB_CoreReset>
 8006398:	4603      	mov	r3, r0
 800639a:	73fb      	strb	r3, [r7, #15]
 800639c:	e01b      	b.n	80063d6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fa9e 	bl	80068ec <USB_CoreReset>
 80063b0:	4603      	mov	r3, r0
 80063b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d106      	bne.n	80063ca <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80063c8:	e005      	b.n	80063d6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80063d6:	7fbb      	ldrb	r3, [r7, #30]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d116      	bne.n	800640a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80063ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006420 <USB_CoreInit+0xe0>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f043 0206 	orr.w	r2, r3, #6
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f043 0220 	orr.w	r2, r3, #32
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800640a:	7bfb      	ldrb	r3, [r7, #15]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006416:	b004      	add	sp, #16
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	ffbdffbf 	.word	0xffbdffbf
 8006420:	03ee0000 	.word	0x03ee0000

08006424 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f023 0201 	bic.w	r2, r3, #1
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	460b      	mov	r3, r1
 8006450:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006462:	78fb      	ldrb	r3, [r7, #3]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d115      	bne.n	8006494 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006474:	200a      	movs	r0, #10
 8006476:	f7fa ffa9 	bl	80013cc <HAL_Delay>
      ms += 10U;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	330a      	adds	r3, #10
 800647e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fa25 	bl	80068d0 <USB_GetMode>
 8006486:	4603      	mov	r3, r0
 8006488:	2b01      	cmp	r3, #1
 800648a:	d01e      	beq.n	80064ca <USB_SetCurrentMode+0x84>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006490:	d9f0      	bls.n	8006474 <USB_SetCurrentMode+0x2e>
 8006492:	e01a      	b.n	80064ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006494:	78fb      	ldrb	r3, [r7, #3]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d115      	bne.n	80064c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064a6:	200a      	movs	r0, #10
 80064a8:	f7fa ff90 	bl	80013cc <HAL_Delay>
      ms += 10U;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	330a      	adds	r3, #10
 80064b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fa0c 	bl	80068d0 <USB_GetMode>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d005      	beq.n	80064ca <USB_SetCurrentMode+0x84>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80064c2:	d9f0      	bls.n	80064a6 <USB_SetCurrentMode+0x60>
 80064c4:	e001      	b.n	80064ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e005      	b.n	80064d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2bc8      	cmp	r3, #200	@ 0xc8
 80064ce:	d101      	bne.n	80064d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e000      	b.n	80064d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064e0:	b084      	sub	sp, #16
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b086      	sub	sp, #24
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80064ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80064fa:	2300      	movs	r3, #0
 80064fc:	613b      	str	r3, [r7, #16]
 80064fe:	e009      	b.n	8006514 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	3340      	adds	r3, #64	@ 0x40
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	2200      	movs	r2, #0
 800650c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	3301      	adds	r3, #1
 8006512:	613b      	str	r3, [r7, #16]
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	2b0e      	cmp	r3, #14
 8006518:	d9f2      	bls.n	8006500 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800651a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800651e:	2b00      	cmp	r3, #0
 8006520:	d11c      	bne.n	800655c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006530:	f043 0302 	orr.w	r3, r3, #2
 8006534:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	e005      	b.n	8006568 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006560:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800656e:	461a      	mov	r2, r3
 8006570:	2300      	movs	r3, #0
 8006572:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006574:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006578:	2b01      	cmp	r3, #1
 800657a:	d10d      	bne.n	8006598 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800657c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006580:	2b00      	cmp	r3, #0
 8006582:	d104      	bne.n	800658e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006584:	2100      	movs	r1, #0
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f968 	bl	800685c <USB_SetDevSpeed>
 800658c:	e008      	b.n	80065a0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800658e:	2101      	movs	r1, #1
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f963 	bl	800685c <USB_SetDevSpeed>
 8006596:	e003      	b.n	80065a0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006598:	2103      	movs	r1, #3
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f95e 	bl	800685c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065a0:	2110      	movs	r1, #16
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f8fa 	bl	800679c <USB_FlushTxFifo>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f924 	bl	8006800 <USB_FlushRxFifo>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065c8:	461a      	mov	r2, r3
 80065ca:	2300      	movs	r3, #0
 80065cc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065d4:	461a      	mov	r2, r3
 80065d6:	2300      	movs	r3, #0
 80065d8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065e0:	461a      	mov	r2, r3
 80065e2:	2300      	movs	r3, #0
 80065e4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065e6:	2300      	movs	r3, #0
 80065e8:	613b      	str	r3, [r7, #16]
 80065ea:	e043      	b.n	8006674 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006602:	d118      	bne.n	8006636 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10a      	bne.n	8006620 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4413      	add	r3, r2
 8006612:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006616:	461a      	mov	r2, r3
 8006618:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	e013      	b.n	8006648 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800662c:	461a      	mov	r2, r3
 800662e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	e008      	b.n	8006648 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006642:	461a      	mov	r2, r3
 8006644:	2300      	movs	r3, #0
 8006646:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006654:	461a      	mov	r2, r3
 8006656:	2300      	movs	r3, #0
 8006658:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006666:	461a      	mov	r2, r3
 8006668:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800666c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	3301      	adds	r3, #1
 8006672:	613b      	str	r3, [r7, #16]
 8006674:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006678:	461a      	mov	r2, r3
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	4293      	cmp	r3, r2
 800667e:	d3b5      	bcc.n	80065ec <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006680:	2300      	movs	r3, #0
 8006682:	613b      	str	r3, [r7, #16]
 8006684:	e043      	b.n	800670e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006698:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800669c:	d118      	bne.n	80066d0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10a      	bne.n	80066ba <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b0:	461a      	mov	r2, r3
 80066b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	e013      	b.n	80066e2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c6:	461a      	mov	r2, r3
 80066c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	e008      	b.n	80066e2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066dc:	461a      	mov	r2, r3
 80066de:	2300      	movs	r3, #0
 80066e0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ee:	461a      	mov	r2, r3
 80066f0:	2300      	movs	r3, #0
 80066f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006700:	461a      	mov	r2, r3
 8006702:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006706:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	3301      	adds	r3, #1
 800670c:	613b      	str	r3, [r7, #16]
 800670e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006712:	461a      	mov	r2, r3
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	4293      	cmp	r3, r2
 8006718:	d3b5      	bcc.n	8006686 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006728:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800672c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800673a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800673c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006740:	2b00      	cmp	r3, #0
 8006742:	d105      	bne.n	8006750 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	f043 0210 	orr.w	r2, r3, #16
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699a      	ldr	r2, [r3, #24]
 8006754:	4b0f      	ldr	r3, [pc, #60]	@ (8006794 <USB_DevInit+0x2b4>)
 8006756:	4313      	orrs	r3, r2
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800675c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006760:	2b00      	cmp	r3, #0
 8006762:	d005      	beq.n	8006770 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	f043 0208 	orr.w	r2, r3, #8
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006770:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006774:	2b01      	cmp	r3, #1
 8006776:	d105      	bne.n	8006784 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	699a      	ldr	r2, [r3, #24]
 800677c:	4b06      	ldr	r3, [pc, #24]	@ (8006798 <USB_DevInit+0x2b8>)
 800677e:	4313      	orrs	r3, r2
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006784:	7dfb      	ldrb	r3, [r7, #23]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006790:	b004      	add	sp, #16
 8006792:	4770      	bx	lr
 8006794:	803c3800 	.word	0x803c3800
 8006798:	40000004 	.word	0x40000004

0800679c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3301      	adds	r3, #1
 80067ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067b6:	d901      	bls.n	80067bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e01b      	b.n	80067f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	daf2      	bge.n	80067aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	019b      	lsls	r3, r3, #6
 80067cc:	f043 0220 	orr.w	r2, r3, #32
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3301      	adds	r3, #1
 80067d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067e0:	d901      	bls.n	80067e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e006      	b.n	80067f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b20      	cmp	r3, #32
 80067f0:	d0f0      	beq.n	80067d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3301      	adds	r3, #1
 8006810:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006818:	d901      	bls.n	800681e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e018      	b.n	8006850 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	daf2      	bge.n	800680c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2210      	movs	r2, #16
 800682e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	3301      	adds	r3, #1
 8006834:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800683c:	d901      	bls.n	8006842 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e006      	b.n	8006850 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	f003 0310 	and.w	r3, r3, #16
 800684a:	2b10      	cmp	r3, #16
 800684c:	d0f0      	beq.n	8006830 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	78fb      	ldrb	r3, [r7, #3]
 8006876:	68f9      	ldr	r1, [r7, #12]
 8006878:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800687c:	4313      	orrs	r3, r2
 800687e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800688e:	b480      	push	{r7}
 8006890:	b085      	sub	sp, #20
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80068a8:	f023 0303 	bic.w	r3, r3, #3
 80068ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068bc:	f043 0302 	orr.w	r3, r3, #2
 80068c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	f003 0301 	and.w	r3, r3, #1
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3301      	adds	r3, #1
 80068fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006904:	d901      	bls.n	800690a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e01b      	b.n	8006942 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	daf2      	bge.n	80068f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	f043 0201 	orr.w	r2, r3, #1
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3301      	adds	r3, #1
 8006926:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800692e:	d901      	bls.n	8006934 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e006      	b.n	8006942 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b01      	cmp	r3, #1
 800693e:	d0f0      	beq.n	8006922 <USB_CoreReset+0x36>

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
	...

08006950 <malloc>:
 8006950:	4b02      	ldr	r3, [pc, #8]	@ (800695c <malloc+0xc>)
 8006952:	4601      	mov	r1, r0
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	f000 b82d 	b.w	80069b4 <_malloc_r>
 800695a:	bf00      	nop
 800695c:	24000014 	.word	0x24000014

08006960 <free>:
 8006960:	4b02      	ldr	r3, [pc, #8]	@ (800696c <free+0xc>)
 8006962:	4601      	mov	r1, r0
 8006964:	6818      	ldr	r0, [r3, #0]
 8006966:	f000 b8f5 	b.w	8006b54 <_free_r>
 800696a:	bf00      	nop
 800696c:	24000014 	.word	0x24000014

08006970 <sbrk_aligned>:
 8006970:	b570      	push	{r4, r5, r6, lr}
 8006972:	4e0f      	ldr	r6, [pc, #60]	@ (80069b0 <sbrk_aligned+0x40>)
 8006974:	460c      	mov	r4, r1
 8006976:	6831      	ldr	r1, [r6, #0]
 8006978:	4605      	mov	r5, r0
 800697a:	b911      	cbnz	r1, 8006982 <sbrk_aligned+0x12>
 800697c:	f000 f8ae 	bl	8006adc <_sbrk_r>
 8006980:	6030      	str	r0, [r6, #0]
 8006982:	4621      	mov	r1, r4
 8006984:	4628      	mov	r0, r5
 8006986:	f000 f8a9 	bl	8006adc <_sbrk_r>
 800698a:	1c43      	adds	r3, r0, #1
 800698c:	d103      	bne.n	8006996 <sbrk_aligned+0x26>
 800698e:	f04f 34ff 	mov.w	r4, #4294967295
 8006992:	4620      	mov	r0, r4
 8006994:	bd70      	pop	{r4, r5, r6, pc}
 8006996:	1cc4      	adds	r4, r0, #3
 8006998:	f024 0403 	bic.w	r4, r4, #3
 800699c:	42a0      	cmp	r0, r4
 800699e:	d0f8      	beq.n	8006992 <sbrk_aligned+0x22>
 80069a0:	1a21      	subs	r1, r4, r0
 80069a2:	4628      	mov	r0, r5
 80069a4:	f000 f89a 	bl	8006adc <_sbrk_r>
 80069a8:	3001      	adds	r0, #1
 80069aa:	d1f2      	bne.n	8006992 <sbrk_aligned+0x22>
 80069ac:	e7ef      	b.n	800698e <sbrk_aligned+0x1e>
 80069ae:	bf00      	nop
 80069b0:	24000f84 	.word	0x24000f84

080069b4 <_malloc_r>:
 80069b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069b8:	1ccd      	adds	r5, r1, #3
 80069ba:	f025 0503 	bic.w	r5, r5, #3
 80069be:	3508      	adds	r5, #8
 80069c0:	2d0c      	cmp	r5, #12
 80069c2:	bf38      	it	cc
 80069c4:	250c      	movcc	r5, #12
 80069c6:	2d00      	cmp	r5, #0
 80069c8:	4606      	mov	r6, r0
 80069ca:	db01      	blt.n	80069d0 <_malloc_r+0x1c>
 80069cc:	42a9      	cmp	r1, r5
 80069ce:	d904      	bls.n	80069da <_malloc_r+0x26>
 80069d0:	230c      	movs	r3, #12
 80069d2:	6033      	str	r3, [r6, #0]
 80069d4:	2000      	movs	r0, #0
 80069d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ab0 <_malloc_r+0xfc>
 80069de:	f000 f869 	bl	8006ab4 <__malloc_lock>
 80069e2:	f8d8 3000 	ldr.w	r3, [r8]
 80069e6:	461c      	mov	r4, r3
 80069e8:	bb44      	cbnz	r4, 8006a3c <_malloc_r+0x88>
 80069ea:	4629      	mov	r1, r5
 80069ec:	4630      	mov	r0, r6
 80069ee:	f7ff ffbf 	bl	8006970 <sbrk_aligned>
 80069f2:	1c43      	adds	r3, r0, #1
 80069f4:	4604      	mov	r4, r0
 80069f6:	d158      	bne.n	8006aaa <_malloc_r+0xf6>
 80069f8:	f8d8 4000 	ldr.w	r4, [r8]
 80069fc:	4627      	mov	r7, r4
 80069fe:	2f00      	cmp	r7, #0
 8006a00:	d143      	bne.n	8006a8a <_malloc_r+0xd6>
 8006a02:	2c00      	cmp	r4, #0
 8006a04:	d04b      	beq.n	8006a9e <_malloc_r+0xea>
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	4639      	mov	r1, r7
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	eb04 0903 	add.w	r9, r4, r3
 8006a10:	f000 f864 	bl	8006adc <_sbrk_r>
 8006a14:	4581      	cmp	r9, r0
 8006a16:	d142      	bne.n	8006a9e <_malloc_r+0xea>
 8006a18:	6821      	ldr	r1, [r4, #0]
 8006a1a:	1a6d      	subs	r5, r5, r1
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	4630      	mov	r0, r6
 8006a20:	f7ff ffa6 	bl	8006970 <sbrk_aligned>
 8006a24:	3001      	adds	r0, #1
 8006a26:	d03a      	beq.n	8006a9e <_malloc_r+0xea>
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	442b      	add	r3, r5
 8006a2c:	6023      	str	r3, [r4, #0]
 8006a2e:	f8d8 3000 	ldr.w	r3, [r8]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	bb62      	cbnz	r2, 8006a90 <_malloc_r+0xdc>
 8006a36:	f8c8 7000 	str.w	r7, [r8]
 8006a3a:	e00f      	b.n	8006a5c <_malloc_r+0xa8>
 8006a3c:	6822      	ldr	r2, [r4, #0]
 8006a3e:	1b52      	subs	r2, r2, r5
 8006a40:	d420      	bmi.n	8006a84 <_malloc_r+0xd0>
 8006a42:	2a0b      	cmp	r2, #11
 8006a44:	d917      	bls.n	8006a76 <_malloc_r+0xc2>
 8006a46:	1961      	adds	r1, r4, r5
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	6025      	str	r5, [r4, #0]
 8006a4c:	bf18      	it	ne
 8006a4e:	6059      	strne	r1, [r3, #4]
 8006a50:	6863      	ldr	r3, [r4, #4]
 8006a52:	bf08      	it	eq
 8006a54:	f8c8 1000 	streq.w	r1, [r8]
 8006a58:	5162      	str	r2, [r4, r5]
 8006a5a:	604b      	str	r3, [r1, #4]
 8006a5c:	4630      	mov	r0, r6
 8006a5e:	f000 f82f 	bl	8006ac0 <__malloc_unlock>
 8006a62:	f104 000b 	add.w	r0, r4, #11
 8006a66:	1d23      	adds	r3, r4, #4
 8006a68:	f020 0007 	bic.w	r0, r0, #7
 8006a6c:	1ac2      	subs	r2, r0, r3
 8006a6e:	bf1c      	itt	ne
 8006a70:	1a1b      	subne	r3, r3, r0
 8006a72:	50a3      	strne	r3, [r4, r2]
 8006a74:	e7af      	b.n	80069d6 <_malloc_r+0x22>
 8006a76:	6862      	ldr	r2, [r4, #4]
 8006a78:	42a3      	cmp	r3, r4
 8006a7a:	bf0c      	ite	eq
 8006a7c:	f8c8 2000 	streq.w	r2, [r8]
 8006a80:	605a      	strne	r2, [r3, #4]
 8006a82:	e7eb      	b.n	8006a5c <_malloc_r+0xa8>
 8006a84:	4623      	mov	r3, r4
 8006a86:	6864      	ldr	r4, [r4, #4]
 8006a88:	e7ae      	b.n	80069e8 <_malloc_r+0x34>
 8006a8a:	463c      	mov	r4, r7
 8006a8c:	687f      	ldr	r7, [r7, #4]
 8006a8e:	e7b6      	b.n	80069fe <_malloc_r+0x4a>
 8006a90:	461a      	mov	r2, r3
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	42a3      	cmp	r3, r4
 8006a96:	d1fb      	bne.n	8006a90 <_malloc_r+0xdc>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	6053      	str	r3, [r2, #4]
 8006a9c:	e7de      	b.n	8006a5c <_malloc_r+0xa8>
 8006a9e:	230c      	movs	r3, #12
 8006aa0:	6033      	str	r3, [r6, #0]
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	f000 f80c 	bl	8006ac0 <__malloc_unlock>
 8006aa8:	e794      	b.n	80069d4 <_malloc_r+0x20>
 8006aaa:	6005      	str	r5, [r0, #0]
 8006aac:	e7d6      	b.n	8006a5c <_malloc_r+0xa8>
 8006aae:	bf00      	nop
 8006ab0:	24000f88 	.word	0x24000f88

08006ab4 <__malloc_lock>:
 8006ab4:	4801      	ldr	r0, [pc, #4]	@ (8006abc <__malloc_lock+0x8>)
 8006ab6:	f000 b84b 	b.w	8006b50 <__retarget_lock_acquire_recursive>
 8006aba:	bf00      	nop
 8006abc:	240010c8 	.word	0x240010c8

08006ac0 <__malloc_unlock>:
 8006ac0:	4801      	ldr	r0, [pc, #4]	@ (8006ac8 <__malloc_unlock+0x8>)
 8006ac2:	f000 b846 	b.w	8006b52 <__retarget_lock_release_recursive>
 8006ac6:	bf00      	nop
 8006ac8:	240010c8 	.word	0x240010c8

08006acc <memset>:
 8006acc:	4402      	add	r2, r0
 8006ace:	4603      	mov	r3, r0
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d100      	bne.n	8006ad6 <memset+0xa>
 8006ad4:	4770      	bx	lr
 8006ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8006ada:	e7f9      	b.n	8006ad0 <memset+0x4>

08006adc <_sbrk_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4d06      	ldr	r5, [pc, #24]	@ (8006af8 <_sbrk_r+0x1c>)
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	602b      	str	r3, [r5, #0]
 8006ae8:	f7fa faf6 	bl	80010d8 <_sbrk>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d102      	bne.n	8006af6 <_sbrk_r+0x1a>
 8006af0:	682b      	ldr	r3, [r5, #0]
 8006af2:	b103      	cbz	r3, 8006af6 <_sbrk_r+0x1a>
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	bd38      	pop	{r3, r4, r5, pc}
 8006af8:	240010c4 	.word	0x240010c4

08006afc <__errno>:
 8006afc:	4b01      	ldr	r3, [pc, #4]	@ (8006b04 <__errno+0x8>)
 8006afe:	6818      	ldr	r0, [r3, #0]
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	24000014 	.word	0x24000014

08006b08 <__libc_init_array>:
 8006b08:	b570      	push	{r4, r5, r6, lr}
 8006b0a:	4d0d      	ldr	r5, [pc, #52]	@ (8006b40 <__libc_init_array+0x38>)
 8006b0c:	4c0d      	ldr	r4, [pc, #52]	@ (8006b44 <__libc_init_array+0x3c>)
 8006b0e:	1b64      	subs	r4, r4, r5
 8006b10:	10a4      	asrs	r4, r4, #2
 8006b12:	2600      	movs	r6, #0
 8006b14:	42a6      	cmp	r6, r4
 8006b16:	d109      	bne.n	8006b2c <__libc_init_array+0x24>
 8006b18:	4d0b      	ldr	r5, [pc, #44]	@ (8006b48 <__libc_init_array+0x40>)
 8006b1a:	4c0c      	ldr	r4, [pc, #48]	@ (8006b4c <__libc_init_array+0x44>)
 8006b1c:	f000 f864 	bl	8006be8 <_init>
 8006b20:	1b64      	subs	r4, r4, r5
 8006b22:	10a4      	asrs	r4, r4, #2
 8006b24:	2600      	movs	r6, #0
 8006b26:	42a6      	cmp	r6, r4
 8006b28:	d105      	bne.n	8006b36 <__libc_init_array+0x2e>
 8006b2a:	bd70      	pop	{r4, r5, r6, pc}
 8006b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b30:	4798      	blx	r3
 8006b32:	3601      	adds	r6, #1
 8006b34:	e7ee      	b.n	8006b14 <__libc_init_array+0xc>
 8006b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b3a:	4798      	blx	r3
 8006b3c:	3601      	adds	r6, #1
 8006b3e:	e7f2      	b.n	8006b26 <__libc_init_array+0x1e>
 8006b40:	08006c40 	.word	0x08006c40
 8006b44:	08006c40 	.word	0x08006c40
 8006b48:	08006c40 	.word	0x08006c40
 8006b4c:	08006c44 	.word	0x08006c44

08006b50 <__retarget_lock_acquire_recursive>:
 8006b50:	4770      	bx	lr

08006b52 <__retarget_lock_release_recursive>:
 8006b52:	4770      	bx	lr

08006b54 <_free_r>:
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	4605      	mov	r5, r0
 8006b58:	2900      	cmp	r1, #0
 8006b5a:	d041      	beq.n	8006be0 <_free_r+0x8c>
 8006b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b60:	1f0c      	subs	r4, r1, #4
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	bfb8      	it	lt
 8006b66:	18e4      	addlt	r4, r4, r3
 8006b68:	f7ff ffa4 	bl	8006ab4 <__malloc_lock>
 8006b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8006be4 <_free_r+0x90>)
 8006b6e:	6813      	ldr	r3, [r2, #0]
 8006b70:	b933      	cbnz	r3, 8006b80 <_free_r+0x2c>
 8006b72:	6063      	str	r3, [r4, #4]
 8006b74:	6014      	str	r4, [r2, #0]
 8006b76:	4628      	mov	r0, r5
 8006b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b7c:	f7ff bfa0 	b.w	8006ac0 <__malloc_unlock>
 8006b80:	42a3      	cmp	r3, r4
 8006b82:	d908      	bls.n	8006b96 <_free_r+0x42>
 8006b84:	6820      	ldr	r0, [r4, #0]
 8006b86:	1821      	adds	r1, r4, r0
 8006b88:	428b      	cmp	r3, r1
 8006b8a:	bf01      	itttt	eq
 8006b8c:	6819      	ldreq	r1, [r3, #0]
 8006b8e:	685b      	ldreq	r3, [r3, #4]
 8006b90:	1809      	addeq	r1, r1, r0
 8006b92:	6021      	streq	r1, [r4, #0]
 8006b94:	e7ed      	b.n	8006b72 <_free_r+0x1e>
 8006b96:	461a      	mov	r2, r3
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	b10b      	cbz	r3, 8006ba0 <_free_r+0x4c>
 8006b9c:	42a3      	cmp	r3, r4
 8006b9e:	d9fa      	bls.n	8006b96 <_free_r+0x42>
 8006ba0:	6811      	ldr	r1, [r2, #0]
 8006ba2:	1850      	adds	r0, r2, r1
 8006ba4:	42a0      	cmp	r0, r4
 8006ba6:	d10b      	bne.n	8006bc0 <_free_r+0x6c>
 8006ba8:	6820      	ldr	r0, [r4, #0]
 8006baa:	4401      	add	r1, r0
 8006bac:	1850      	adds	r0, r2, r1
 8006bae:	4283      	cmp	r3, r0
 8006bb0:	6011      	str	r1, [r2, #0]
 8006bb2:	d1e0      	bne.n	8006b76 <_free_r+0x22>
 8006bb4:	6818      	ldr	r0, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	6053      	str	r3, [r2, #4]
 8006bba:	4408      	add	r0, r1
 8006bbc:	6010      	str	r0, [r2, #0]
 8006bbe:	e7da      	b.n	8006b76 <_free_r+0x22>
 8006bc0:	d902      	bls.n	8006bc8 <_free_r+0x74>
 8006bc2:	230c      	movs	r3, #12
 8006bc4:	602b      	str	r3, [r5, #0]
 8006bc6:	e7d6      	b.n	8006b76 <_free_r+0x22>
 8006bc8:	6820      	ldr	r0, [r4, #0]
 8006bca:	1821      	adds	r1, r4, r0
 8006bcc:	428b      	cmp	r3, r1
 8006bce:	bf04      	itt	eq
 8006bd0:	6819      	ldreq	r1, [r3, #0]
 8006bd2:	685b      	ldreq	r3, [r3, #4]
 8006bd4:	6063      	str	r3, [r4, #4]
 8006bd6:	bf04      	itt	eq
 8006bd8:	1809      	addeq	r1, r1, r0
 8006bda:	6021      	streq	r1, [r4, #0]
 8006bdc:	6054      	str	r4, [r2, #4]
 8006bde:	e7ca      	b.n	8006b76 <_free_r+0x22>
 8006be0:	bd38      	pop	{r3, r4, r5, pc}
 8006be2:	bf00      	nop
 8006be4:	24000f88 	.word	0x24000f88

08006be8 <_init>:
 8006be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bea:	bf00      	nop
 8006bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bee:	bc08      	pop	{r3}
 8006bf0:	469e      	mov	lr, r3
 8006bf2:	4770      	bx	lr

08006bf4 <_fini>:
 8006bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf6:	bf00      	nop
 8006bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfa:	bc08      	pop	{r3}
 8006bfc:	469e      	mov	lr, r3
 8006bfe:	4770      	bx	lr
