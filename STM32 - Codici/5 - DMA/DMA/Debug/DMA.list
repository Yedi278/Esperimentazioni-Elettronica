
DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009144  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080093dc  080093dc  0000a3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800941c  0800941c  0000a41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009424  08009424  0000a424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009428  08009428  0000a428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800942c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002a8  24000010  0800943c  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002b8  0800943c  0000b2b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018a21  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b70  00000000  00000000  00023a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001308  00000000  00000000  000265d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ede  00000000  00000000  000278d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003921f  00000000  00000000  000287b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001adb1  00000000  00000000  000619d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00176551  00000000  00000000  0007c786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f2cd7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005148  00000000  00000000  001f2d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000083  00000000  00000000  001f7e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080093c4 	.word	0x080093c4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080093c4 	.word	0x080093c4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADC_custom_init>:

bool triggd = false;
bool pre_triggd = false;
uint16_t trig_indx = 0;

void ADC_custom_init(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

	ADC3->SQR1=0; // Resetto il registro per cancellare modifice dell'IDE
 80005cc:	4b33      	ldr	r3, [pc, #204]	@ (800069c <ADC_custom_init+0xd4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere (0 = 1 canale)
 80005d2:	4b32      	ldr	r3, [pc, #200]	@ (800069c <ADC_custom_init+0xd4>)
 80005d4:	4a31      	ldr	r2, [pc, #196]	@ (800069c <ADC_custom_init+0xd4>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_SQ1_Pos);	// Inidco i canali da accendere
 80005da:	4b30      	ldr	r3, [pc, #192]	@ (800069c <ADC_custom_init+0xd4>)
 80005dc:	4a2f      	ldr	r2, [pc, #188]	@ (800069c <ADC_custom_init+0xd4>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->PCSEL |= ADC_PCSEL_PCSEL_0;		// Selezioni i canali da leggere
 80005e2:	4b2e      	ldr	r3, [pc, #184]	@ (800069c <ADC_custom_init+0xd4>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a2d      	ldr	r2, [pc, #180]	@ (800069c <ADC_custom_init+0xd4>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	61d3      	str	r3, [r2, #28]

	/* Fase di calibrazione */
	ADC3->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 80005ee:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <ADC_custom_init+0xd4>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	4a2a      	ldr	r2, [pc, #168]	@ (800069c <ADC_custom_init+0xd4>)
 80005f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80005f8:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 80005fa:	4b28      	ldr	r3, [pc, #160]	@ (800069c <ADC_custom_init+0xd4>)
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	4a27      	ldr	r2, [pc, #156]	@ (800069c <ADC_custom_init+0xd4>)
 8000600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000604:	6093      	str	r3, [r2, #8]
	ADC3->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 8000606:	4b25      	ldr	r3, [pc, #148]	@ (800069c <ADC_custom_init+0xd4>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	4a24      	ldr	r2, [pc, #144]	@ (800069c <ADC_custom_init+0xd4>)
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 8000612:	4b22      	ldr	r3, [pc, #136]	@ (800069c <ADC_custom_init+0xd4>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	4a21      	ldr	r2, [pc, #132]	@ (800069c <ADC_custom_init+0xd4>)
 8000618:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800061c:	6093      	str	r3, [r2, #8]

	while((ADC3->CR & ADC_CR_ADCAL) != 0){};
 800061e:	bf00      	nop
 8000620:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <ADC_custom_init+0xd4>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	2b00      	cmp	r3, #0
 8000626:	dbfb      	blt.n	8000620 <ADC_custom_init+0x58>
	/* Fine fase di calibrazione */

	/* Accensione ADC */
	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000628:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <ADC_custom_init+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1b      	ldr	r2, [pc, #108]	@ (800069c <ADC_custom_init+0xd4>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]
	ADC3->CR |= ADC_CR_ADEN;		// Abilito l'ADC
 8000634:	4b19      	ldr	r3, [pc, #100]	@ (800069c <ADC_custom_init+0xd4>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	4a18      	ldr	r2, [pc, #96]	@ (800069c <ADC_custom_init+0xd4>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6093      	str	r3, [r2, #8]

	while((ADC3->ISR & ADC_ISR_ADRDY) != 0){}	// Aspetto che il flag cambi
 8000640:	bf00      	nop
 8000642:	4b16      	ldr	r3, [pc, #88]	@ (800069c <ADC_custom_init+0xd4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f9      	bne.n	8000642 <ADC_custom_init+0x7a>

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 800064e:	4b13      	ldr	r3, [pc, #76]	@ (800069c <ADC_custom_init+0xd4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a12      	ldr	r2, [pc, #72]	@ (800069c <ADC_custom_init+0xd4>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6013      	str	r3, [r2, #0]
	/* Fine istruzioni per l'accensione */

	/* Impostazioni TIMER per triggerare l'nizio della misura */
	TIM6->PSC = 12;	// 240/12 = 20Mhz
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <ADC_custom_init+0xd8>)
 800065c:	220c      	movs	r2, #12
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 20;	// 20Mhz / 10 = 2Mhz
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <ADC_custom_init+0xd8>)
 8000662:	2214      	movs	r2, #20
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CNT = 0;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <ADC_custom_init+0xd8>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->DIER &= ~TIM_DIER_UIE;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <ADC_custom_init+0xd8>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	4a0b      	ldr	r2, [pc, #44]	@ (80006a0 <ADC_custom_init+0xd8>)
 8000672:	f023 0301 	bic.w	r3, r3, #1
 8000676:	60d3      	str	r3, [r2, #12]
	TIM6->CR1 &= ~TIM_CR1_CEN;
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <ADC_custom_init+0xd8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a08      	ldr	r2, [pc, #32]	@ (80006a0 <ADC_custom_init+0xd8>)
 800067e:	f023 0301 	bic.w	r3, r3, #1
 8000682:	6013      	str	r3, [r2, #0]
	/* Fine sett. TImer */

	ADC3->IER |= ADC_IER_EOCIE;		// Abilito l'interrupt di fine conversione
 8000684:	4b05      	ldr	r3, [pc, #20]	@ (800069c <ADC_custom_init+0xd4>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	4a04      	ldr	r2, [pc, #16]	@ (800069c <ADC_custom_init+0xd4>)
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	6053      	str	r3, [r2, #4]
//	ADC3->CR  |= ADC_CR_ADSTART;	// Inizio le misurazioni
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	58026000 	.word	0x58026000
 80006a0:	40001000 	.word	0x40001000

080006a4 <ADC_custom_interrupt>:

void ADC_custom_interrupt(){
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

	if(triggd && (DMA1_Stream0->NDTR == trig_indx)){
 80006a8:	4b30      	ldr	r3, [pc, #192]	@ (800076c <ADC_custom_interrupt+0xc8>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d018      	beq.n	80006e2 <ADC_custom_interrupt+0x3e>
 80006b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000770 <ADC_custom_interrupt+0xcc>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	4a2f      	ldr	r2, [pc, #188]	@ (8000774 <ADC_custom_interrupt+0xd0>)
 80006b6:	8812      	ldrh	r2, [r2, #0]
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d112      	bne.n	80006e2 <ADC_custom_interrupt+0x3e>

		TIM6->CR1 &= ~TIM_CR1_CEN;
 80006bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000778 <ADC_custom_interrupt+0xd4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a2d      	ldr	r2, [pc, #180]	@ (8000778 <ADC_custom_interrupt+0xd4>)
 80006c2:	f023 0301 	bic.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

		triggd = 0;
 80006c8:	4b28      	ldr	r3, [pc, #160]	@ (800076c <ADC_custom_interrupt+0xc8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
		pre_triggd = 0;
 80006ce:	4b2b      	ldr	r3, [pc, #172]	@ (800077c <ADC_custom_interrupt+0xd8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]

		USART3->CR3 |= USART_CR3_DMAT;
 80006d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000780 <ADC_custom_interrupt+0xdc>)
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	4a29      	ldr	r2, [pc, #164]	@ (8000780 <ADC_custom_interrupt+0xdc>)
 80006da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006de:	6093      	str	r3, [r2, #8]
		return;
 80006e0:	e03f      	b.n	8000762 <ADC_custom_interrupt+0xbe>
	}

	else if(!triggd && (ADC3->DR < PRETRIG_VALUE) ){
 80006e2:	4b22      	ldr	r3, [pc, #136]	@ (800076c <ADC_custom_interrupt+0xc8>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	f083 0301 	eor.w	r3, r3, #1
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d008      	beq.n	8000702 <ADC_custom_interrupt+0x5e>
 80006f0:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <ADC_custom_interrupt+0xe0>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80006f8:	d203      	bcs.n	8000702 <ADC_custom_interrupt+0x5e>
		pre_triggd = 1;
 80006fa:	4b20      	ldr	r3, [pc, #128]	@ (800077c <ADC_custom_interrupt+0xd8>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	701a      	strb	r2, [r3, #0]
		return;
 8000700:	e02f      	b.n	8000762 <ADC_custom_interrupt+0xbe>
	}

	else if(pre_triggd && !triggd && (ADC3->DR > TRIG_VALUE)){
 8000702:	4b1e      	ldr	r3, [pc, #120]	@ (800077c <ADC_custom_interrupt+0xd8>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d025      	beq.n	8000756 <ADC_custom_interrupt+0xb2>
 800070a:	4b18      	ldr	r3, [pc, #96]	@ (800076c <ADC_custom_interrupt+0xc8>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	f083 0301 	eor.w	r3, r3, #1
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d01e      	beq.n	8000756 <ADC_custom_interrupt+0xb2>
 8000718:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <ADC_custom_interrupt+0xe0>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000720:	4293      	cmp	r3, r2
 8000722:	d918      	bls.n	8000756 <ADC_custom_interrupt+0xb2>
		triggd = 1;
 8000724:	4b11      	ldr	r3, [pc, #68]	@ (800076c <ADC_custom_interrupt+0xc8>)
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
		pre_triggd = 0;
 800072a:	4b14      	ldr	r3, [pc, #80]	@ (800077c <ADC_custom_interrupt+0xd8>)
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
//		trig_indx = DMA1_Stream0->NDTR;
		trig_indx = (DMA1_Stream0->NDTR + 10UL)%40UL + 1UL;	// conservo 100 dati prima del trigger
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <ADC_custom_interrupt+0xcc>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	f103 010a 	add.w	r1, r3, #10
 8000738:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <ADC_custom_interrupt+0xe4>)
 800073a:	fba3 2301 	umull	r2, r3, r3, r1
 800073e:	095a      	lsrs	r2, r3, #5
 8000740:	4613      	mov	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	4413      	add	r3, r2
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	1aca      	subs	r2, r1, r3
 800074a:	b293      	uxth	r3, r2
 800074c:	3301      	adds	r3, #1
 800074e:	b29a      	uxth	r2, r3
 8000750:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <ADC_custom_interrupt+0xd0>)
 8000752:	801a      	strh	r2, [r3, #0]
		return;
 8000754:	e005      	b.n	8000762 <ADC_custom_interrupt+0xbe>
	}

	ADC3->ISR |= ADC_ISR_EOC;
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <ADC_custom_interrupt+0xe0>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a0a      	ldr	r2, [pc, #40]	@ (8000784 <ADC_custom_interrupt+0xe0>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6013      	str	r3, [r2, #0]
}
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	2400002c 	.word	0x2400002c
 8000770:	40020010 	.word	0x40020010
 8000774:	2400002e 	.word	0x2400002e
 8000778:	40001000 	.word	0x40001000
 800077c:	2400002d 	.word	0x2400002d
 8000780:	40004800 	.word	0x40004800
 8000784:	58026000 	.word	0x58026000
 8000788:	cccccccd 	.word	0xcccccccd

0800078c <DMA_custom_init>:

#define DMA_DATA_BUFF_SIZE 40

uint16_t DMA_data_buffer[DMA_DATA_BUFF_SIZE];

void DMA_custom_init(){
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0

	DMA1_Stream0->M0AR = (uint32_t) (&DMA_data_buffer);	// inidico l'indirizzo dello storarge di dati
 8000792:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <DMA_custom_init+0x84>)
 8000794:	4a1f      	ldr	r2, [pc, #124]	@ (8000814 <DMA_custom_init+0x88>)
 8000796:	60da      	str	r2, [r3, #12]
	DMA1_Stream1->M0AR = (uint32_t) (&DMA_data_buffer);
 8000798:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <DMA_custom_init+0x8c>)
 800079a:	4a1e      	ldr	r2, [pc, #120]	@ (8000814 <DMA_custom_init+0x88>)
 800079c:	60da      	str	r2, [r3, #12]

	DMA1_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
 800079e:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <DMA_custom_init+0x84>)
 80007a0:	4a1e      	ldr	r2, [pc, #120]	@ (800081c <DMA_custom_init+0x90>)
 80007a2:	609a      	str	r2, [r3, #8]
	DMA1_Stream1->PAR = (uint32_t) (&USART3->TDR);
 80007a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <DMA_custom_init+0x8c>)
 80007a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000820 <DMA_custom_init+0x94>)
 80007a8:	609a      	str	r2, [r3, #8]

	uint32_t n_misure = DMA_DATA_BUFF_SIZE;
 80007aa:	2328      	movs	r3, #40	@ 0x28
 80007ac:	607b      	str	r3, [r7, #4]

	DMA1_Stream0->NDTR = n_misure;			// numero elementi da prendere da ADC3
 80007ae:	4a18      	ldr	r2, [pc, #96]	@ (8000810 <DMA_custom_init+0x84>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6053      	str	r3, [r2, #4]
	DMA1_Stream1->NDTR = n_misure*2;			// numero elementi da mandare a USART3
 80007b4:	4a18      	ldr	r2, [pc, #96]	@ (8000818 <DMA_custom_init+0x8c>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	6053      	str	r3, [r2, #4]

	DMA1_Stream0->CR &= ~DMA_SxCR_TCIE;		// disablilito interrupt di fine ricezione
 80007bc:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <DMA_custom_init+0x84>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a13      	ldr	r2, [pc, #76]	@ (8000810 <DMA_custom_init+0x84>)
 80007c2:	f023 0310 	bic.w	r3, r3, #16
 80007c6:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine trasmissione
 80007c8:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <DMA_custom_init+0x8c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a12      	ldr	r2, [pc, #72]	@ (8000818 <DMA_custom_init+0x8c>)
 80007ce:	f043 0310 	orr.w	r3, r3, #16
 80007d2:	6013      	str	r3, [r2, #0]

	ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);	// DMA in cont mode
 80007d4:	4b13      	ldr	r3, [pc, #76]	@ (8000824 <DMA_custom_init+0x98>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	4a12      	ldr	r2, [pc, #72]	@ (8000824 <DMA_custom_init+0x98>)
 80007da:	f043 0303 	orr.w	r3, r3, #3
 80007de:	60d3      	str	r3, [r2, #12]

	DMA1_Stream0->CR |= DMA_SxCR_EN;
 80007e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <DMA_custom_init+0x84>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000810 <DMA_custom_init+0x84>)
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <DMA_custom_init+0x8c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a09      	ldr	r2, [pc, #36]	@ (8000818 <DMA_custom_init+0x8c>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	6013      	str	r3, [r2, #0]

	ADC3->CR  |= ADC_CR_ADSTART;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <DMA_custom_init+0x98>)
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	4a09      	ldr	r2, [pc, #36]	@ (8000824 <DMA_custom_init+0x98>)
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	6093      	str	r3, [r2, #8]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	40020010 	.word	0x40020010
 8000814:	24000030 	.word	0x24000030
 8000818:	40020028 	.word	0x40020028
 800081c:	58026040 	.word	0x58026040
 8000820:	40004828 	.word	0x40004828
 8000824:	58026000 	.word	0x58026000

08000828 <DMA_custom_interrupt_tx>:


void DMA_custom_interrupt_tx(){
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 800082c:	4b1e      	ldr	r3, [pc, #120]	@ (80008a8 <DMA_custom_interrupt_tx+0x80>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	4a1d      	ldr	r2, [pc, #116]	@ (80008a8 <DMA_custom_interrupt_tx+0x80>)
 8000832:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000836:	6093      	str	r3, [r2, #8]

	DMA1->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 8000838:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <DMA_custom_interrupt_tx+0x84>)
 800083a:	f04f 32ff 	mov.w	r2, #4294967295
 800083e:	609a      	str	r2, [r3, #8]
	DMA1->HIFCR = 0xffffffff;
 8000840:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <DMA_custom_interrupt_tx+0x84>)
 8000842:	f04f 32ff 	mov.w	r2, #4294967295
 8000846:	60da      	str	r2, [r3, #12]

	DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000848:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <DMA_custom_interrupt_tx+0x88>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a18      	ldr	r2, [pc, #96]	@ (80008b0 <DMA_custom_interrupt_tx+0x88>)
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 8000854:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <DMA_custom_interrupt_tx+0x8c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a16      	ldr	r2, [pc, #88]	@ (80008b4 <DMA_custom_interrupt_tx+0x8c>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	6013      	str	r3, [r2, #0]

	// invio come ultimo elemento l'indice di trigger
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 8000860:	bf00      	nop
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <DMA_custom_interrupt_tx+0x80>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086a:	2b00      	cmp	r3, #0
 800086c:	d0f9      	beq.n	8000862 <DMA_custom_interrupt_tx+0x3a>
	USART3->TDR = (unsigned char)(trig_indx & 0xFF );
 800086e:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <DMA_custom_interrupt_tx+0x90>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	b2da      	uxtb	r2, r3
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <DMA_custom_interrupt_tx+0x80>)
 8000876:	629a      	str	r2, [r3, #40]	@ 0x28
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 8000878:	bf00      	nop
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <DMA_custom_interrupt_tx+0x80>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0f9      	beq.n	800087a <DMA_custom_interrupt_tx+0x52>
	USART3->TDR = *((unsigned char*)&trig_indx + 1);
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <DMA_custom_interrupt_tx+0x94>)
 8000888:	781a      	ldrb	r2, [r3, #0]
 800088a:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <DMA_custom_interrupt_tx+0x80>)
 800088c:	629a      	str	r2, [r3, #40]	@ 0x28
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 800088e:	bf00      	nop
 8000890:	4b05      	ldr	r3, [pc, #20]	@ (80008a8 <DMA_custom_interrupt_tx+0x80>)
 8000892:	69db      	ldr	r3, [r3, #28]
 8000894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000898:	2b00      	cmp	r3, #0
 800089a:	d0f9      	beq.n	8000890 <DMA_custom_interrupt_tx+0x68>
}
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	40004800 	.word	0x40004800
 80008ac:	40020000 	.word	0x40020000
 80008b0:	40020010 	.word	0x40020010
 80008b4:	40020028 	.word	0x40020028
 80008b8:	2400002e 	.word	0x2400002e
 80008bc:	2400002f 	.word	0x2400002f

080008c0 <USART_init>:
 *      Author: yehan
 */

#include "Custom_USART.h"

void USART_init(){
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

	USART3->CR1 |= USART_CR1_TE;
 80008c4:	4b11      	ldr	r3, [pc, #68]	@ (800090c <USART_init+0x4c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a10      	ldr	r2, [pc, #64]	@ (800090c <USART_init+0x4c>)
 80008ca:	f043 0308 	orr.w	r3, r3, #8
 80008ce:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_RE;
 80008d0:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <USART_init+0x4c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a0d      	ldr	r2, [pc, #52]	@ (800090c <USART_init+0x4c>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	6013      	str	r3, [r2, #0]

	USART3->CR1 &= ~USART_CR1_TXEIE;
 80008dc:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <USART_init+0x4c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0a      	ldr	r2, [pc, #40]	@ (800090c <USART_init+0x4c>)
 80008e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80008e6:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_RXNEIE;
 80008e8:	4b08      	ldr	r3, [pc, #32]	@ (800090c <USART_init+0x4c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a07      	ldr	r2, [pc, #28]	@ (800090c <USART_init+0x4c>)
 80008ee:	f043 0320 	orr.w	r3, r3, #32
 80008f2:	6013      	str	r3, [r2, #0]

	USART3->CR1 |= USART_CR1_UE;
 80008f4:	4b05      	ldr	r3, [pc, #20]	@ (800090c <USART_init+0x4c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	@ (800090c <USART_init+0x4c>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40004800 	.word	0x40004800

08000910 <USART_custom_interrupt>:

void USART_custom_interrupt(){
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0

	char data = USART3->RDR;
 8000916:	4b15      	ldr	r3, [pc, #84]	@ (800096c <USART_custom_interrupt+0x5c>)
 8000918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800091a:	71fb      	strb	r3, [r7, #7]

	if(data == '?'){
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000920:	d10b      	bne.n	800093a <USART_custom_interrupt+0x2a>

		USART3->CR3 &= ~USART_CR3_DMAT;	// spengo l'usart
 8000922:	4b12      	ldr	r3, [pc, #72]	@ (800096c <USART_custom_interrupt+0x5c>)
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	4a11      	ldr	r2, [pc, #68]	@ (800096c <USART_custom_interrupt+0x5c>)
 8000928:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800092c:	6093      	str	r3, [r2, #8]
		TIM6->CR1 |= TIM_CR1_CEN;		// accendo l'adc
 800092e:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <USART_custom_interrupt+0x60>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a0f      	ldr	r2, [pc, #60]	@ (8000970 <USART_custom_interrupt+0x60>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6013      	str	r3, [r2, #0]
	}

	USART3->ICR |= USART_ICR_ORECF;  //Cancella l'overrun. Capita quando si entra in debug
 800093a:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <USART_custom_interrupt+0x5c>)
 800093c:	6a1b      	ldr	r3, [r3, #32]
 800093e:	4a0b      	ldr	r2, [pc, #44]	@ (800096c <USART_custom_interrupt+0x5c>)
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF;   //Azzeramento flag interrupt trasmissione
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <USART_custom_interrupt+0x5c>)
 8000948:	6a1b      	ldr	r3, [r3, #32]
 800094a:	4a08      	ldr	r2, [pc, #32]	@ (800096c <USART_custom_interrupt+0x5c>)
 800094c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000950:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <USART_custom_interrupt+0x5c>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	4a05      	ldr	r2, [pc, #20]	@ (800096c <USART_custom_interrupt+0x5c>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6193      	str	r3, [r2, #24]
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40004800 	.word	0x40004800
 8000970:	40001000 	.word	0x40001000

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000978:	f000 fd8c 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097c:	f000 f812 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000980:	f000 f9da 	bl	8000d38 <MX_GPIO_Init>
  MX_DMA_Init();
 8000984:	f000 f9b0 	bl	8000ce8 <MX_DMA_Init>
  MX_ADC3_Init();
 8000988:	f000 f8ba 	bl	8000b00 <MX_ADC3_Init>
  MX_TIM6_Init();
 800098c:	f000 f928 	bl	8000be0 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8000990:	f000 f95c 	bl	8000c4c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  ADC_custom_init();
 8000994:	f7ff fe18 	bl	80005c8 <ADC_custom_init>
  USART_init();
 8000998:	f7ff ff92 	bl	80008c0 <USART_init>
  DMA_custom_init();
 800099c:	f7ff fef6 	bl	800078c <DMA_custom_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <main+0x2c>

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b09e      	sub	sp, #120	@ 0x78
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ae:	224c      	movs	r2, #76	@ 0x4c
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f008 fcda 	bl	800936c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2220      	movs	r2, #32
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f008 fcd3 	bl	800936c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009c6:	2002      	movs	r0, #2
 80009c8:	f003 fd4a 	bl	8004460 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	4b48      	ldr	r3, [pc, #288]	@ (8000af4 <SystemClock_Config+0x150>)
 80009d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009d4:	4a47      	ldr	r2, [pc, #284]	@ (8000af4 <SystemClock_Config+0x150>)
 80009d6:	f023 0301 	bic.w	r3, r3, #1
 80009da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009dc:	4b45      	ldr	r3, [pc, #276]	@ (8000af4 <SystemClock_Config+0x150>)
 80009de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	4b44      	ldr	r3, [pc, #272]	@ (8000af8 <SystemClock_Config+0x154>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	4a43      	ldr	r2, [pc, #268]	@ (8000af8 <SystemClock_Config+0x154>)
 80009ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009f0:	6193      	str	r3, [r2, #24]
 80009f2:	4b41      	ldr	r3, [pc, #260]	@ (8000af8 <SystemClock_Config+0x154>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009fe:	bf00      	nop
 8000a00:	4b3d      	ldr	r3, [pc, #244]	@ (8000af8 <SystemClock_Config+0x154>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a0c:	d1f8      	bne.n	8000a00 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8000afc <SystemClock_Config+0x158>)
 8000a10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a14:	4a39      	ldr	r2, [pc, #228]	@ (8000afc <SystemClock_Config+0x158>)
 8000a16:	f043 0302 	orr.w	r3, r3, #2
 8000a1a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a1e:	4b37      	ldr	r3, [pc, #220]	@ (8000afc <SystemClock_Config+0x158>)
 8000a20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a24:	f003 0302 	and.w	r3, r3, #2
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	4b31      	ldr	r3, [pc, #196]	@ (8000af8 <SystemClock_Config+0x154>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a30      	ldr	r2, [pc, #192]	@ (8000af8 <SystemClock_Config+0x154>)
 8000a36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000af8 <SystemClock_Config+0x154>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4b2b      	ldr	r3, [pc, #172]	@ (8000af4 <SystemClock_Config+0x150>)
 8000a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8000af4 <SystemClock_Config+0x150>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a52:	4b28      	ldr	r3, [pc, #160]	@ (8000af4 <SystemClock_Config+0x150>)
 8000a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a5e:	bf00      	nop
 8000a60:	4b25      	ldr	r3, [pc, #148]	@ (8000af8 <SystemClock_Config+0x154>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a6c:	d1f8      	bne.n	8000a60 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a72:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a76:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000a84:	2378      	movs	r3, #120	@ 0x78
 8000a86:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a94:	230c      	movs	r3, #12
 8000a96:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f003 fd15 	bl	80044d4 <HAL_RCC_OscConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000ab0:	f000 fa72 	bl	8000f98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab4:	233f      	movs	r3, #63	@ 0x3f
 8000ab6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ac4:	2340      	movs	r3, #64	@ 0x40
 8000ac6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ac8:	2340      	movs	r3, #64	@ 0x40
 8000aca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000acc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ad2:	2340      	movs	r3, #64	@ 0x40
 8000ad4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	2104      	movs	r1, #4
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 f953 	bl	8004d88 <HAL_RCC_ClockConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000ae8:	f000 fa56 	bl	8000f98 <Error_Handler>
  }
}
 8000aec:	bf00      	nop
 8000aee:	3778      	adds	r7, #120	@ 0x78
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	58000400 	.word	0x58000400
 8000af8:	58024800 	.word	0x58024800
 8000afc:	58024400 	.word	0x58024400

08000b00 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
 8000b14:	615a      	str	r2, [r3, #20]
 8000b16:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b18:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd8 <MX_ADC3_Init+0xd8>)
 8000b1a:	4a30      	ldr	r2, [pc, #192]	@ (8000bdc <MX_ADC3_Init+0xdc>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000bd8 <MX_ADC3_Init+0xd8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b24:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd8 <MX_ADC3_Init+0xd8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd8 <MX_ADC3_Init+0xd8>)
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b30:	4b29      	ldr	r3, [pc, #164]	@ (8000bd8 <MX_ADC3_Init+0xd8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b36:	4b28      	ldr	r3, [pc, #160]	@ (8000bd8 <MX_ADC3_Init+0xd8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000b3c:	4b26      	ldr	r3, [pc, #152]	@ (8000bd8 <MX_ADC3_Init+0xd8>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b42:	4b25      	ldr	r3, [pc, #148]	@ (8000bd8 <MX_ADC3_Init+0xd8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000b48:	4b23      	ldr	r3, [pc, #140]	@ (8000bd8 <MX_ADC3_Init+0xd8>)
 8000b4a:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000b4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b50:	4b21      	ldr	r3, [pc, #132]	@ (8000bd8 <MX_ADC3_Init+0xd8>)
 8000b52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b56:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b58:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd8 <MX_ADC3_Init+0xd8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd8 <MX_ADC3_Init+0xd8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b64:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd8 <MX_ADC3_Init+0xd8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd8 <MX_ADC3_Init+0xd8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000b72:	4b19      	ldr	r3, [pc, #100]	@ (8000bd8 <MX_ADC3_Init+0xd8>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b78:	4817      	ldr	r0, [pc, #92]	@ (8000bd8 <MX_ADC3_Init+0xd8>)
 8000b7a:	f000 fecb 	bl	8001914 <HAL_ADC_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000b84:	f000 fa08 	bl	8000f98 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000b88:	4b13      	ldr	r3, [pc, #76]	@ (8000bd8 <MX_ADC3_Init+0xd8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b8e:	4812      	ldr	r0, [pc, #72]	@ (8000bd8 <MX_ADC3_Init+0xd8>)
 8000b90:	f000 fec0 	bl	8001914 <HAL_ADC_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000b9a:	f000 f9fd 	bl	8000f98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ba2:	2306      	movs	r3, #6
 8000ba4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000baa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000bae:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <MX_ADC3_Init+0xd8>)
 8000bc2:	f001 f849 	bl	8001c58 <HAL_ADC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000bcc:	f000 f9e4 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	24000080 	.word	0x24000080
 8000bdc:	58026000 	.word	0x58026000

08000be0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	@ (8000c44 <MX_TIM6_Init+0x64>)
 8000bf2:	4a15      	ldr	r2, [pc, #84]	@ (8000c48 <MX_TIM6_Init+0x68>)
 8000bf4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <MX_TIM6_Init+0x64>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <MX_TIM6_Init+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000c02:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <MX_TIM6_Init+0x64>)
 8000c04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c08:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <MX_TIM6_Init+0x64>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <MX_TIM6_Init+0x64>)
 8000c12:	f007 f943 	bl	8007e9c <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c1c:	f000 f9bc 	bl	8000f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c20:	2320      	movs	r3, #32
 8000c22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <MX_TIM6_Init+0x64>)
 8000c2e:	f007 fa33 	bl	8008098 <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c38:	f000 f9ae 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	2400015c 	.word	0x2400015c
 8000c48:	40001000 	.word	0x40001000

08000c4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c50:	4b22      	ldr	r3, [pc, #136]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c52:	4a23      	ldr	r2, [pc, #140]	@ (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8000c56:	4b21      	ldr	r3, [pc, #132]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c58:	4a22      	ldr	r2, [pc, #136]	@ (8000ce4 <MX_USART3_UART_Init+0x98>)
 8000c5a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c62:	4b1e      	ldr	r3, [pc, #120]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c68:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c70:	220c      	movs	r2, #12
 8000c72:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c74:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c80:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c8c:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c92:	4812      	ldr	r0, [pc, #72]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c94:	f007 fa8e 	bl	80081b4 <HAL_UART_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000c9e:	f000 f97b 	bl	8000f98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	480d      	ldr	r0, [pc, #52]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000ca6:	f008 fa96 	bl	80091d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000cb0:	f000 f972 	bl	8000f98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4809      	ldr	r0, [pc, #36]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000cb8:	f008 facb 	bl	8009252 <HAL_UARTEx_SetRxFifoThreshold>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000cc2:	f000 f969 	bl	8000f98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000cc8:	f008 fa4c 	bl	8009164 <HAL_UARTEx_DisableFifoMode>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000cd2:	f000 f961 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	240001a8 	.word	0x240001a8
 8000ce0:	40004800 	.word	0x40004800
 8000ce4:	000f4240 	.word	0x000f4240

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <MX_DMA_Init+0x4c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8000d34 <MX_DMA_Init+0x4c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000d34 <MX_DMA_Init+0x4c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	200b      	movs	r0, #11
 8000d12:	f001 fce4 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f001 fcfb 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	200c      	movs	r0, #12
 8000d22:	f001 fcdc 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f001 fcf3 	bl	8002712 <HAL_NVIC_EnableIRQ>

}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	58024400 	.word	0x58024400

08000d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08c      	sub	sp, #48	@ 0x30
 8000d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	4b8b      	ldr	r3, [pc, #556]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d54:	4a89      	ldr	r2, [pc, #548]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000d56:	f043 0304 	orr.w	r3, r3, #4
 8000d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d5e:	4b87      	ldr	r3, [pc, #540]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
 8000d6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6c:	4b83      	ldr	r3, [pc, #524]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d72:	4a82      	ldr	r2, [pc, #520]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d7c:	4b7f      	ldr	r3, [pc, #508]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b7c      	ldr	r3, [pc, #496]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d90:	4a7a      	ldr	r2, [pc, #488]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d9a:	4b78      	ldr	r3, [pc, #480]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da8:	4b74      	ldr	r3, [pc, #464]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dae:	4a73      	ldr	r2, [pc, #460]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db8:	4b70      	ldr	r3, [pc, #448]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc6:	4b6d      	ldr	r3, [pc, #436]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dcc:	4a6b      	ldr	r2, [pc, #428]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000dce:	f043 0308 	orr.w	r3, r3, #8
 8000dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd6:	4b69      	ldr	r3, [pc, #420]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ddc:	f003 0308 	and.w	r3, r3, #8
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de4:	4b65      	ldr	r3, [pc, #404]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dea:	4a64      	ldr	r2, [pc, #400]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000dec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000df0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df4:	4b61      	ldr	r3, [pc, #388]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e02:	4b5e      	ldr	r3, [pc, #376]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e08:	4a5c      	ldr	r2, [pc, #368]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000e0a:	f043 0310 	orr.w	r3, r3, #16
 8000e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e12:	4b5a      	ldr	r3, [pc, #360]	@ (8000f7c <MX_GPIO_Init+0x244>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000e26:	4856      	ldr	r0, [pc, #344]	@ (8000f80 <MX_GPIO_Init+0x248>)
 8000e28:	f003 fb00 	bl	800442c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e32:	4854      	ldr	r0, [pc, #336]	@ (8000f84 <MX_GPIO_Init+0x24c>)
 8000e34:	f003 fafa 	bl	800442c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2102      	movs	r1, #2
 8000e3c:	4852      	ldr	r0, [pc, #328]	@ (8000f88 <MX_GPIO_Init+0x250>)
 8000e3e:	f003 faf5 	bl	800442c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4619      	mov	r1, r3
 8000e56:	484d      	ldr	r0, [pc, #308]	@ (8000f8c <MX_GPIO_Init+0x254>)
 8000e58:	f003 f938 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e5c:	2332      	movs	r3, #50	@ 0x32
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e6c:	230b      	movs	r3, #11
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	4845      	ldr	r0, [pc, #276]	@ (8000f8c <MX_GPIO_Init+0x254>)
 8000e78:	f003 f928 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e7c:	2386      	movs	r3, #134	@ 0x86
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e8c:	230b      	movs	r3, #11
 8000e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	483e      	ldr	r0, [pc, #248]	@ (8000f90 <MX_GPIO_Init+0x258>)
 8000e98:	f003 f918 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e9c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4832      	ldr	r0, [pc, #200]	@ (8000f80 <MX_GPIO_Init+0x248>)
 8000eb6:	f003 f909 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ecc:	230b      	movs	r3, #11
 8000ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	482a      	ldr	r0, [pc, #168]	@ (8000f80 <MX_GPIO_Init+0x248>)
 8000ed8:	f003 f8f8 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000edc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4823      	ldr	r0, [pc, #140]	@ (8000f84 <MX_GPIO_Init+0x24c>)
 8000ef6:	f003 f8e9 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000efa:	2380      	movs	r3, #128	@ 0x80
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000efe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4821      	ldr	r0, [pc, #132]	@ (8000f94 <MX_GPIO_Init+0x25c>)
 8000f10:	f003 f8dc 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f14:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f26:	230a      	movs	r3, #10
 8000f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4817      	ldr	r0, [pc, #92]	@ (8000f90 <MX_GPIO_Init+0x258>)
 8000f32:	f003 f8cb 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f36:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f48:	230b      	movs	r3, #11
 8000f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	4619      	mov	r1, r3
 8000f52:	4810      	ldr	r0, [pc, #64]	@ (8000f94 <MX_GPIO_Init+0x25c>)
 8000f54:	f003 f8ba 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	@ (8000f88 <MX_GPIO_Init+0x250>)
 8000f70:	f003 f8ac 	bl	80040cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f74:	bf00      	nop
 8000f76:	3730      	adds	r7, #48	@ 0x30
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	58024400 	.word	0x58024400
 8000f80:	58020400 	.word	0x58020400
 8000f84:	58020c00 	.word	0x58020c00
 8000f88:	58021000 	.word	0x58021000
 8000f8c:	58020800 	.word	0x58020800
 8000f90:	58020000 	.word	0x58020000
 8000f94:	58021800 	.word	0x58021800

08000f98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9c:	b672      	cpsid	i
}
 8000f9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <Error_Handler+0x8>

08000fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <HAL_MspInit+0x30>)
 8000fac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fb0:	4a08      	ldr	r2, [pc, #32]	@ (8000fd4 <HAL_MspInit+0x30>)
 8000fb2:	f043 0302 	orr.w	r3, r3, #2
 8000fb6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_MspInit+0x30>)
 8000fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	58024400 	.word	0x58024400

08000fd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0b4      	sub	sp, #208	@ 0xd0
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	22c0      	movs	r2, #192	@ 0xc0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f008 f9bf 	bl	800936c <memset>
  if(hadc->Instance==ADC3)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a43      	ldr	r2, [pc, #268]	@ (8001100 <HAL_ADC_MspInit+0x128>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d17e      	bne.n	80010f6 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ff8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ffc:	f04f 0300 	mov.w	r3, #0
 8001000:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001004:	2302      	movs	r3, #2
 8001006:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 50;
 8001008:	2332      	movs	r3, #50	@ 0x32
 800100a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800100c:	2302      	movs	r3, #2
 800100e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001010:	2302      	movs	r3, #2
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001014:	2302      	movs	r3, #2
 8001016:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001018:	2380      	movs	r3, #128	@ 0x80
 800101a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800101c:	2300      	movs	r3, #0
 800101e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102a:	f107 0310 	add.w	r3, r7, #16
 800102e:	4618      	mov	r0, r3
 8001030:	f004 fa36 	bl	80054a0 <HAL_RCCEx_PeriphCLKConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 800103a:	f7ff ffad 	bl	8000f98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800103e:	4b31      	ldr	r3, [pc, #196]	@ (8001104 <HAL_ADC_MspInit+0x12c>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001044:	4a2f      	ldr	r2, [pc, #188]	@ (8001104 <HAL_ADC_MspInit+0x12c>)
 8001046:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800104a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800104e:	4b2d      	ldr	r3, [pc, #180]	@ (8001104 <HAL_ADC_MspInit+0x12c>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001054:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105c:	4b29      	ldr	r3, [pc, #164]	@ (8001104 <HAL_ADC_MspInit+0x12c>)
 800105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001062:	4a28      	ldr	r2, [pc, #160]	@ (8001104 <HAL_ADC_MspInit+0x12c>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800106c:	4b25      	ldr	r3, [pc, #148]	@ (8001104 <HAL_ADC_MspInit+0x12c>)
 800106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800107a:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 800107e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001082:	f000 faa5 	bl	80015d0 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8001086:	4b20      	ldr	r3, [pc, #128]	@ (8001108 <HAL_ADC_MspInit+0x130>)
 8001088:	4a20      	ldr	r2, [pc, #128]	@ (800110c <HAL_ADC_MspInit+0x134>)
 800108a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800108c:	4b1e      	ldr	r3, [pc, #120]	@ (8001108 <HAL_ADC_MspInit+0x130>)
 800108e:	2273      	movs	r2, #115	@ 0x73
 8001090:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001092:	4b1d      	ldr	r3, [pc, #116]	@ (8001108 <HAL_ADC_MspInit+0x130>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001098:	4b1b      	ldr	r3, [pc, #108]	@ (8001108 <HAL_ADC_MspInit+0x130>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800109e:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <HAL_ADC_MspInit+0x130>)
 80010a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010a4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010a6:	4b18      	ldr	r3, [pc, #96]	@ (8001108 <HAL_ADC_MspInit+0x130>)
 80010a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010ac:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010ae:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <HAL_ADC_MspInit+0x130>)
 80010b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80010b6:	4b14      	ldr	r3, [pc, #80]	@ (8001108 <HAL_ADC_MspInit+0x130>)
 80010b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010bc:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80010be:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <HAL_ADC_MspInit+0x130>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010c4:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <HAL_ADC_MspInit+0x130>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80010ca:	480f      	ldr	r0, [pc, #60]	@ (8001108 <HAL_ADC_MspInit+0x130>)
 80010cc:	f001 fb3c 	bl	8002748 <HAL_DMA_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80010d6:	f7ff ff5f 	bl	8000f98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001108 <HAL_ADC_MspInit+0x130>)
 80010de:	64da      	str	r2, [r3, #76]	@ 0x4c
 80010e0:	4a09      	ldr	r2, [pc, #36]	@ (8001108 <HAL_ADC_MspInit+0x130>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	207f      	movs	r0, #127	@ 0x7f
 80010ec:	f001 faf7 	bl	80026de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80010f0:	207f      	movs	r0, #127	@ 0x7f
 80010f2:	f001 fb0e 	bl	8002712 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 80010f6:	bf00      	nop
 80010f8:	37d0      	adds	r7, #208	@ 0xd0
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	58026000 	.word	0x58026000
 8001104:	58024400 	.word	0x58024400
 8001108:	240000e4 	.word	0x240000e4
 800110c:	40020010 	.word	0x40020010

08001110 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0b      	ldr	r2, [pc, #44]	@ (800114c <HAL_TIM_Base_MspInit+0x3c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d10e      	bne.n	8001140 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001122:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <HAL_TIM_Base_MspInit+0x40>)
 8001124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001128:	4a09      	ldr	r2, [pc, #36]	@ (8001150 <HAL_TIM_Base_MspInit+0x40>)
 800112a:	f043 0310 	orr.w	r3, r3, #16
 800112e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001132:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <HAL_TIM_Base_MspInit+0x40>)
 8001134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001138:	f003 0310 	and.w	r3, r3, #16
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	40001000 	.word	0x40001000
 8001150:	58024400 	.word	0x58024400

08001154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b0ba      	sub	sp, #232	@ 0xe8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	22c0      	movs	r2, #192	@ 0xc0
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f008 f8f9 	bl	800936c <memset>
  if(huart->Instance==USART3)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a41      	ldr	r2, [pc, #260]	@ (8001284 <HAL_UART_MspInit+0x130>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d17b      	bne.n	800127c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001184:	f04f 0202 	mov.w	r2, #2
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001196:	f107 0310 	add.w	r3, r7, #16
 800119a:	4618      	mov	r0, r3
 800119c:	f004 f980 	bl	80054a0 <HAL_RCCEx_PeriphCLKConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80011a6:	f7ff fef7 	bl	8000f98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011aa:	4b37      	ldr	r3, [pc, #220]	@ (8001288 <HAL_UART_MspInit+0x134>)
 80011ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011b0:	4a35      	ldr	r2, [pc, #212]	@ (8001288 <HAL_UART_MspInit+0x134>)
 80011b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011b6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011ba:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <HAL_UART_MspInit+0x134>)
 80011bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001288 <HAL_UART_MspInit+0x134>)
 80011ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ce:	4a2e      	ldr	r2, [pc, #184]	@ (8001288 <HAL_UART_MspInit+0x134>)
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001288 <HAL_UART_MspInit+0x134>)
 80011da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001200:	2307      	movs	r3, #7
 8001202:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001206:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800120a:	4619      	mov	r1, r3
 800120c:	481f      	ldr	r0, [pc, #124]	@ (800128c <HAL_UART_MspInit+0x138>)
 800120e:	f002 ff5d 	bl	80040cc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001212:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <HAL_UART_MspInit+0x13c>)
 8001214:	4a1f      	ldr	r2, [pc, #124]	@ (8001294 <HAL_UART_MspInit+0x140>)
 8001216:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001218:	4b1d      	ldr	r3, [pc, #116]	@ (8001290 <HAL_UART_MspInit+0x13c>)
 800121a:	222e      	movs	r2, #46	@ 0x2e
 800121c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800121e:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <HAL_UART_MspInit+0x13c>)
 8001220:	2240      	movs	r2, #64	@ 0x40
 8001222:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001224:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <HAL_UART_MspInit+0x13c>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800122a:	4b19      	ldr	r3, [pc, #100]	@ (8001290 <HAL_UART_MspInit+0x13c>)
 800122c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001230:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001232:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <HAL_UART_MspInit+0x13c>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001238:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <HAL_UART_MspInit+0x13c>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800123e:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <HAL_UART_MspInit+0x13c>)
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <HAL_UART_MspInit+0x13c>)
 8001246:	2200      	movs	r2, #0
 8001248:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800124a:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <HAL_UART_MspInit+0x13c>)
 800124c:	2200      	movs	r2, #0
 800124e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001250:	480f      	ldr	r0, [pc, #60]	@ (8001290 <HAL_UART_MspInit+0x13c>)
 8001252:	f001 fa79 	bl	8002748 <HAL_DMA_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800125c:	f7ff fe9c 	bl	8000f98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a0b      	ldr	r2, [pc, #44]	@ (8001290 <HAL_UART_MspInit+0x13c>)
 8001264:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001266:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <HAL_UART_MspInit+0x13c>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	2027      	movs	r0, #39	@ 0x27
 8001272:	f001 fa34 	bl	80026de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001276:	2027      	movs	r0, #39	@ 0x27
 8001278:	f001 fa4b 	bl	8002712 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800127c:	bf00      	nop
 800127e:	37e8      	adds	r7, #232	@ 0xe8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40004800 	.word	0x40004800
 8001288:	58024400 	.word	0x58024400
 800128c:	58020c00 	.word	0x58020c00
 8001290:	2400023c 	.word	0x2400023c
 8001294:	40020028 	.word	0x40020028

08001298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <NMI_Handler+0x4>

080012a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <MemManage_Handler+0x4>

080012b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <UsageFault_Handler+0x4>

080012c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ee:	f000 f943 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <DMA1_Stream0_IRQHandler+0x10>)
 80012fe:	f001 fd7f 	bl	8002e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	240000e4 	.word	0x240000e4

0800130c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
	DMA_custom_interrupt_tx();
 8001310:	f7ff fa8a 	bl	8000828 <DMA_custom_interrupt_tx>
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
	}
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	USART_custom_interrupt();
 800131c:	f7ff faf8 	bl	8000910 <USART_custom_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}

08001324 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	ADC_custom_interrupt();
 8001328:	f7ff f9bc 	bl	80006a4 <ADC_custom_interrupt>
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}
  /* USER CODE END ADC3_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}

08001330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001334:	4b37      	ldr	r3, [pc, #220]	@ (8001414 <SystemInit+0xe4>)
 8001336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800133a:	4a36      	ldr	r2, [pc, #216]	@ (8001414 <SystemInit+0xe4>)
 800133c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001340:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001344:	4b34      	ldr	r3, [pc, #208]	@ (8001418 <SystemInit+0xe8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 030f 	and.w	r3, r3, #15
 800134c:	2b06      	cmp	r3, #6
 800134e:	d807      	bhi.n	8001360 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001350:	4b31      	ldr	r3, [pc, #196]	@ (8001418 <SystemInit+0xe8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f023 030f 	bic.w	r3, r3, #15
 8001358:	4a2f      	ldr	r2, [pc, #188]	@ (8001418 <SystemInit+0xe8>)
 800135a:	f043 0307 	orr.w	r3, r3, #7
 800135e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001360:	4b2e      	ldr	r3, [pc, #184]	@ (800141c <SystemInit+0xec>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a2d      	ldr	r2, [pc, #180]	@ (800141c <SystemInit+0xec>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800136c:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <SystemInit+0xec>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001372:	4b2a      	ldr	r3, [pc, #168]	@ (800141c <SystemInit+0xec>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	4929      	ldr	r1, [pc, #164]	@ (800141c <SystemInit+0xec>)
 8001378:	4b29      	ldr	r3, [pc, #164]	@ (8001420 <SystemInit+0xf0>)
 800137a:	4013      	ands	r3, r2
 800137c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800137e:	4b26      	ldr	r3, [pc, #152]	@ (8001418 <SystemInit+0xe8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d007      	beq.n	800139a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800138a:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <SystemInit+0xe8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 030f 	bic.w	r3, r3, #15
 8001392:	4a21      	ldr	r2, [pc, #132]	@ (8001418 <SystemInit+0xe8>)
 8001394:	f043 0307 	orr.w	r3, r3, #7
 8001398:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800139a:	4b20      	ldr	r3, [pc, #128]	@ (800141c <SystemInit+0xec>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013a0:	4b1e      	ldr	r3, [pc, #120]	@ (800141c <SystemInit+0xec>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013a6:	4b1d      	ldr	r3, [pc, #116]	@ (800141c <SystemInit+0xec>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <SystemInit+0xec>)
 80013ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001424 <SystemInit+0xf4>)
 80013b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <SystemInit+0xec>)
 80013b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001428 <SystemInit+0xf8>)
 80013b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013b8:	4b18      	ldr	r3, [pc, #96]	@ (800141c <SystemInit+0xec>)
 80013ba:	4a1c      	ldr	r2, [pc, #112]	@ (800142c <SystemInit+0xfc>)
 80013bc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013be:	4b17      	ldr	r3, [pc, #92]	@ (800141c <SystemInit+0xec>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013c4:	4b15      	ldr	r3, [pc, #84]	@ (800141c <SystemInit+0xec>)
 80013c6:	4a19      	ldr	r2, [pc, #100]	@ (800142c <SystemInit+0xfc>)
 80013c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <SystemInit+0xec>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <SystemInit+0xec>)
 80013d2:	4a16      	ldr	r2, [pc, #88]	@ (800142c <SystemInit+0xfc>)
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <SystemInit+0xec>)
 80013d8:	2200      	movs	r2, #0
 80013da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <SystemInit+0xec>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0e      	ldr	r2, [pc, #56]	@ (800141c <SystemInit+0xec>)
 80013e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <SystemInit+0xec>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <SystemInit+0x100>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <SystemInit+0x104>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013fa:	d202      	bcs.n	8001402 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <SystemInit+0x108>)
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <SystemInit+0x10c>)
 8001404:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001408:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00
 8001418:	52002000 	.word	0x52002000
 800141c:	58024400 	.word	0x58024400
 8001420:	eaf6ed7f 	.word	0xeaf6ed7f
 8001424:	02020200 	.word	0x02020200
 8001428:	01ff0000 	.word	0x01ff0000
 800142c:	01010280 	.word	0x01010280
 8001430:	5c001000 	.word	0x5c001000
 8001434:	ffff0000 	.word	0xffff0000
 8001438:	51008108 	.word	0x51008108
 800143c:	52004000 	.word	0x52004000

08001440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001440:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001478 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001444:	f7ff ff74 	bl	8001330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001448:	480c      	ldr	r0, [pc, #48]	@ (800147c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800144a:	490d      	ldr	r1, [pc, #52]	@ (8001480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800144c:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001460:	4c0a      	ldr	r4, [pc, #40]	@ (800148c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146e:	f007 ff85 	bl	800937c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001472:	f7ff fa7f 	bl	8000974 <main>
  bx  lr
 8001476:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001478:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800147c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001480:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001484:	0800942c 	.word	0x0800942c
  ldr r2, =_sbss
 8001488:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800148c:	240002b8 	.word	0x240002b8

08001490 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC_IRQHandler>
	...

08001494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149a:	2003      	movs	r0, #3
 800149c:	f001 f914 	bl	80026c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014a0:	f003 fe28 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 80014a4:	4602      	mov	r2, r0
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <HAL_Init+0x68>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	0a1b      	lsrs	r3, r3, #8
 80014ac:	f003 030f 	and.w	r3, r3, #15
 80014b0:	4913      	ldr	r1, [pc, #76]	@ (8001500 <HAL_Init+0x6c>)
 80014b2:	5ccb      	ldrb	r3, [r1, r3]
 80014b4:	f003 031f 	and.w	r3, r3, #31
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
 80014bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <HAL_Init+0x68>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001500 <HAL_Init+0x6c>)
 80014c8:	5cd3      	ldrb	r3, [r2, r3]
 80014ca:	f003 031f 	and.w	r3, r3, #31
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	fa22 f303 	lsr.w	r3, r2, r3
 80014d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001504 <HAL_Init+0x70>)
 80014d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001508 <HAL_Init+0x74>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 f814 	bl	800150c <HAL_InitTick>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e002      	b.n	80014f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014ee:	f7ff fd59 	bl	8000fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	58024400 	.word	0x58024400
 8001500:	080093dc 	.word	0x080093dc
 8001504:	24000004 	.word	0x24000004
 8001508:	24000000 	.word	0x24000000

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001514:	4b15      	ldr	r3, [pc, #84]	@ (800156c <HAL_InitTick+0x60>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e021      	b.n	8001564 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001520:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <HAL_InitTick+0x64>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <HAL_InitTick+0x60>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f001 f8f9 	bl	800272e <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e00e      	b.n	8001564 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d80a      	bhi.n	8001562 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f001 f8c3 	bl	80026de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001558:	4a06      	ldr	r2, [pc, #24]	@ (8001574 <HAL_InitTick+0x68>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2400000c 	.word	0x2400000c
 8001570:	24000000 	.word	0x24000000
 8001574:	24000008 	.word	0x24000008

08001578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_IncTick+0x20>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_IncTick+0x24>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a04      	ldr	r2, [pc, #16]	@ (800159c <HAL_IncTick+0x24>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	2400000c 	.word	0x2400000c
 800159c:	240002b4 	.word	0x240002b4

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	@ (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	240002b4 	.word	0x240002b4

080015b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015bc:	4b03      	ldr	r3, [pc, #12]	@ (80015cc <HAL_GetREVID+0x14>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	0c1b      	lsrs	r3, r3, #16
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	5c001000 	.word	0x5c001000

080015d0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80015da:	4b07      	ldr	r3, [pc, #28]	@ (80015f8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	401a      	ands	r2, r3
 80015e4:	4904      	ldr	r1, [pc, #16]	@ (80015f8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	58000400 	.word	0x58000400

080015fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	609a      	str	r2, [r3, #8]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	609a      	str	r2, [r3, #8]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3360      	adds	r3, #96	@ 0x60
 8001676:	461a      	mov	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	430b      	orrs	r3, r1
 8001692:	431a      	orrs	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001698:	bf00      	nop
 800169a:	371c      	adds	r7, #28
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	f003 031f 	and.w	r3, r3, #31
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	431a      	orrs	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	611a      	str	r2, [r3, #16]
}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b087      	sub	sp, #28
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3360      	adds	r3, #96	@ 0x60
 80016e6:	461a      	mov	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	431a      	orrs	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	601a      	str	r2, [r3, #0]
  }
}
 8001700:	bf00      	nop
 8001702:	371c      	adds	r7, #28
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	3330      	adds	r3, #48	@ 0x30
 800171c:	461a      	mov	r2, r3
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	4413      	add	r3, r2
 800172a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	211f      	movs	r1, #31
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	401a      	ands	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	0e9b      	lsrs	r3, r3, #26
 8001744:	f003 011f 	and.w	r1, r3, #31
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	431a      	orrs	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001758:	bf00      	nop
 800175a:	371c      	adds	r7, #28
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001764:	b480      	push	{r7}
 8001766:	b087      	sub	sp, #28
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3314      	adds	r3, #20
 8001774:	461a      	mov	r2, r3
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	0e5b      	lsrs	r3, r3, #25
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	4413      	add	r3, r2
 8001782:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	0d1b      	lsrs	r3, r3, #20
 800178c:	f003 031f 	and.w	r3, r3, #31
 8001790:	2107      	movs	r1, #7
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	401a      	ands	r2, r3
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	0d1b      	lsrs	r3, r3, #20
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	431a      	orrs	r2, r3
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017ae:	bf00      	nop
 80017b0:	371c      	adds	r7, #28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017d4:	43db      	mvns	r3, r3
 80017d6:	401a      	ands	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f003 0318 	and.w	r3, r3, #24
 80017de:	4908      	ldr	r1, [pc, #32]	@ (8001800 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017e0:	40d9      	lsrs	r1, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	400b      	ands	r3, r1
 80017e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017ea:	431a      	orrs	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	000fffff 	.word	0x000fffff

08001804 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	4b04      	ldr	r3, [pc, #16]	@ (8001824 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001812:	4013      	ands	r3, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6093      	str	r3, [r2, #8]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	5fffffc0 	.word	0x5fffffc0

08001828 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800183c:	d101      	bne.n	8001842 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <LL_ADC_EnableInternalRegulator+0x24>)
 800185e:	4013      	ands	r3, r2
 8001860:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	6fffffc0 	.word	0x6fffffc0

08001878 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001888:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800188c:	d101      	bne.n	8001892 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <LL_ADC_IsEnabled+0x18>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <LL_ADC_IsEnabled+0x1a>
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d101      	bne.n	80018de <LL_ADC_REG_IsConversionOngoing+0x18>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d101      	bne.n	8001904 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b089      	sub	sp, #36	@ 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e18f      	b.n	8001c4e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001938:	2b00      	cmp	r3, #0
 800193a:	d109      	bne.n	8001950 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff fb4b 	bl	8000fd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff67 	bl	8001828 <LL_ADC_IsDeepPowerDownEnabled>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d004      	beq.n	800196a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff4d 	bl	8001804 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff ff82 	bl	8001878 <LL_ADC_IsInternalRegulatorEnabled>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d114      	bne.n	80019a4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff66 	bl	8001850 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001984:	4b87      	ldr	r3, [pc, #540]	@ (8001ba4 <HAL_ADC_Init+0x290>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	099b      	lsrs	r3, r3, #6
 800198a:	4a87      	ldr	r2, [pc, #540]	@ (8001ba8 <HAL_ADC_Init+0x294>)
 800198c:	fba2 2303 	umull	r2, r3, r2, r3
 8001990:	099b      	lsrs	r3, r3, #6
 8001992:	3301      	adds	r3, #1
 8001994:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001996:	e002      	b.n	800199e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	3b01      	subs	r3, #1
 800199c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f9      	bne.n	8001998 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff65 	bl	8001878 <LL_ADC_IsInternalRegulatorEnabled>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10d      	bne.n	80019d0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019b8:	f043 0210 	orr.w	r2, r3, #16
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c4:	f043 0201 	orr.w	r2, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff76 	bl	80018c6 <LL_ADC_REG_IsConversionOngoing>
 80019da:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e0:	f003 0310 	and.w	r3, r3, #16
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f040 8129 	bne.w	8001c3c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f040 8125 	bne.w	8001c3c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019fa:	f043 0202 	orr.w	r2, r3, #2
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ff4a 	bl	80018a0 <LL_ADC_IsEnabled>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d136      	bne.n	8001a80 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a65      	ldr	r2, [pc, #404]	@ (8001bac <HAL_ADC_Init+0x298>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d004      	beq.n	8001a26 <HAL_ADC_Init+0x112>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a63      	ldr	r2, [pc, #396]	@ (8001bb0 <HAL_ADC_Init+0x29c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d10e      	bne.n	8001a44 <HAL_ADC_Init+0x130>
 8001a26:	4861      	ldr	r0, [pc, #388]	@ (8001bac <HAL_ADC_Init+0x298>)
 8001a28:	f7ff ff3a 	bl	80018a0 <LL_ADC_IsEnabled>
 8001a2c:	4604      	mov	r4, r0
 8001a2e:	4860      	ldr	r0, [pc, #384]	@ (8001bb0 <HAL_ADC_Init+0x29c>)
 8001a30:	f7ff ff36 	bl	80018a0 <LL_ADC_IsEnabled>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4323      	orrs	r3, r4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf0c      	ite	eq
 8001a3c:	2301      	moveq	r3, #1
 8001a3e:	2300      	movne	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	e008      	b.n	8001a56 <HAL_ADC_Init+0x142>
 8001a44:	485b      	ldr	r0, [pc, #364]	@ (8001bb4 <HAL_ADC_Init+0x2a0>)
 8001a46:	f7ff ff2b 	bl	80018a0 <LL_ADC_IsEnabled>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf0c      	ite	eq
 8001a50:	2301      	moveq	r3, #1
 8001a52:	2300      	movne	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d012      	beq.n	8001a80 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a53      	ldr	r2, [pc, #332]	@ (8001bac <HAL_ADC_Init+0x298>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d004      	beq.n	8001a6e <HAL_ADC_Init+0x15a>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a51      	ldr	r2, [pc, #324]	@ (8001bb0 <HAL_ADC_Init+0x29c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_ADC_Init+0x15e>
 8001a6e:	4a52      	ldr	r2, [pc, #328]	@ (8001bb8 <HAL_ADC_Init+0x2a4>)
 8001a70:	e000      	b.n	8001a74 <HAL_ADC_Init+0x160>
 8001a72:	4a52      	ldr	r2, [pc, #328]	@ (8001bbc <HAL_ADC_Init+0x2a8>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	f7ff fdbe 	bl	80015fc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001a80:	f7ff fd9a 	bl	80015b8 <HAL_GetREVID>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d914      	bls.n	8001ab8 <HAL_ADC_Init+0x1a4>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b10      	cmp	r3, #16
 8001a94:	d110      	bne.n	8001ab8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7d5b      	ldrb	r3, [r3, #21]
 8001a9a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001aa0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001aa6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7f1b      	ldrb	r3, [r3, #28]
 8001aac:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001aae:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ab0:	f043 030c 	orr.w	r3, r3, #12
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	e00d      	b.n	8001ad4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	7d5b      	ldrb	r3, [r3, #21]
 8001abc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ac2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ac8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7f1b      	ldrb	r3, [r3, #28]
 8001ace:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7f1b      	ldrb	r3, [r3, #28]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d106      	bne.n	8001aea <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	045b      	lsls	r3, r3, #17
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d009      	beq.n	8001b06 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc0 <HAL_ADC_Init+0x2ac>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	69b9      	ldr	r1, [r7, #24]
 8001b16:	430b      	orrs	r3, r1
 8001b18:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fed1 	bl	80018c6 <LL_ADC_REG_IsConversionOngoing>
 8001b24:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fede 	bl	80018ec <LL_ADC_INJ_IsConversionOngoing>
 8001b30:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d15f      	bne.n	8001bf8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d15c      	bne.n	8001bf8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7d1b      	ldrb	r3, [r3, #20]
 8001b42:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc4 <HAL_ADC_Init+0x2b0>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	69b9      	ldr	r1, [r7, #24]
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d130      	bne.n	8001bcc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <HAL_ADC_Init+0x2b4>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b7e:	3a01      	subs	r2, #1
 8001b80:	0411      	lsls	r1, r2, #16
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b86:	4311      	orrs	r1, r2
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b8c:	4311      	orrs	r1, r2
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b92:	430a      	orrs	r2, r1
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0201 	orr.w	r2, r2, #1
 8001b9e:	611a      	str	r2, [r3, #16]
 8001ba0:	e01c      	b.n	8001bdc <HAL_ADC_Init+0x2c8>
 8001ba2:	bf00      	nop
 8001ba4:	24000000 	.word	0x24000000
 8001ba8:	053e2d63 	.word	0x053e2d63
 8001bac:	40022000 	.word	0x40022000
 8001bb0:	40022100 	.word	0x40022100
 8001bb4:	58026000 	.word	0x58026000
 8001bb8:	40022300 	.word	0x40022300
 8001bbc:	58026300 	.word	0x58026300
 8001bc0:	fff0c003 	.word	0xfff0c003
 8001bc4:	ffffbffc 	.word	0xffffbffc
 8001bc8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0201 	bic.w	r2, r2, #1
 8001bda:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 fb8c 	bl	8002310 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d10c      	bne.n	8001c1a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f023 010f 	bic.w	r1, r3, #15
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	1e5a      	subs	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c18:	e007      	b.n	8001c2a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 020f 	bic.w	r2, r2, #15
 8001c28:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2e:	f023 0303 	bic.w	r3, r3, #3
 8001c32:	f043 0201 	orr.w	r2, r3, #1
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c3a:	e007      	b.n	8001c4c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c40:	f043 0210 	orr.w	r2, r3, #16
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3724      	adds	r7, #36	@ 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd90      	pop	{r4, r7, pc}
 8001c56:	bf00      	nop

08001c58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b0a1      	sub	sp, #132	@ 0x84
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	4a65      	ldr	r2, [pc, #404]	@ (8001e08 <HAL_ADC_ConfigChannel+0x1b0>)
 8001c72:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x2a>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e32e      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x688>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fe19 	bl	80018c6 <LL_ADC_REG_IsConversionOngoing>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f040 8313 	bne.w	80022c2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db2c      	blt.n	8001cfe <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d108      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x6a>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0e9b      	lsrs	r3, r3, #26
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	2201      	movs	r2, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	e016      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x98>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cd2:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e003      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001cde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ce0:	fab3 f383 	clz	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	2201      	movs	r2, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	69d1      	ldr	r1, [r2, #28]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	430b      	orrs	r3, r1
 8001cfc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6859      	ldr	r1, [r3, #4]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f7ff fcfe 	bl	800170c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fdd6 	bl	80018c6 <LL_ADC_REG_IsConversionOngoing>
 8001d1a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fde3 	bl	80018ec <LL_ADC_INJ_IsConversionOngoing>
 8001d26:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f040 80b8 	bne.w	8001ea0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f040 80b4 	bne.w	8001ea0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6819      	ldr	r1, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	461a      	mov	r2, r3
 8001d46:	f7ff fd0d 	bl	8001764 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d4a:	4b30      	ldr	r3, [pc, #192]	@ (8001e0c <HAL_ADC_ConfigChannel+0x1b4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001d52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d56:	d10b      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x118>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	695a      	ldr	r2, [r3, #20]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	e01d      	b.n	8001dac <HAL_ADC_ConfigChannel+0x154>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10b      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x13e>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	e00a      	b.n	8001dac <HAL_ADC_ConfigChannel+0x154>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	089b      	lsrs	r3, r3, #2
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d02c      	beq.n	8001e10 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6919      	ldr	r1, [r3, #16]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001dc4:	f7ff fc4e 	bl	8001664 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6919      	ldr	r1, [r3, #16]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	7e5b      	ldrb	r3, [r3, #25]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d102      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x186>
 8001dd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001ddc:	e000      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x188>
 8001dde:	2300      	movs	r3, #0
 8001de0:	461a      	mov	r2, r3
 8001de2:	f7ff fc78 	bl	80016d6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6919      	ldr	r1, [r3, #16]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	7e1b      	ldrb	r3, [r3, #24]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d102      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1a4>
 8001df6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001dfa:	e000      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1a6>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f7ff fc50 	bl	80016a4 <LL_ADC_SetDataRightShift>
 8001e04:	e04c      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x248>
 8001e06:	bf00      	nop
 8001e08:	47ff0000 	.word	0x47ff0000
 8001e0c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	069b      	lsls	r3, r3, #26
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d107      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e32:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	069b      	lsls	r3, r3, #26
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d107      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e56:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	069b      	lsls	r3, r3, #26
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d107      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e7a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	069b      	lsls	r3, r3, #26
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d107      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e9e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fcfb 	bl	80018a0 <LL_ADC_IsEnabled>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f040 8211 	bne.w	80022d4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	6819      	ldr	r1, [r3, #0]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f7ff fc7c 	bl	80017bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4aa1      	ldr	r2, [pc, #644]	@ (8002150 <HAL_ADC_ConfigChannel+0x4f8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	f040 812e 	bne.w	800212c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10b      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x2a0>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	0e9b      	lsrs	r3, r3, #26
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	2b09      	cmp	r3, #9
 8001eee:	bf94      	ite	ls
 8001ef0:	2301      	movls	r3, #1
 8001ef2:	2300      	movhi	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	e019      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x2d4>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001f0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8001f10:	2320      	movs	r3, #32
 8001f12:	e003      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8001f14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	2b09      	cmp	r3, #9
 8001f24:	bf94      	ite	ls
 8001f26:	2301      	movls	r3, #1
 8001f28:	2300      	movhi	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d079      	beq.n	8002024 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d107      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x2f4>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	0e9b      	lsrs	r3, r3, #26
 8001f42:	3301      	adds	r3, #1
 8001f44:	069b      	lsls	r3, r3, #26
 8001f46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f4a:	e015      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x320>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f54:	fa93 f3a3 	rbit	r3, r3
 8001f58:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001f5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f5c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001f5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8001f64:	2320      	movs	r3, #32
 8001f66:	e003      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8001f68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	069b      	lsls	r3, r3, #26
 8001f74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d109      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x340>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0e9b      	lsrs	r3, r3, #26
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	2101      	movs	r1, #1
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	e017      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x370>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fa0:	fa93 f3a3 	rbit	r3, r3
 8001fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fa8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001faa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	e003      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8001fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	ea42 0103 	orr.w	r1, r2, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10a      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x396>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0e9b      	lsrs	r3, r3, #26
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	051b      	lsls	r3, r3, #20
 8001fec:	e018      	b.n	8002020 <HAL_ADC_ConfigChannel+0x3c8>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002006:	2320      	movs	r3, #32
 8002008:	e003      	b.n	8002012 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800200a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800200c:	fab3 f383 	clz	r3, r3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	3301      	adds	r3, #1
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002020:	430b      	orrs	r3, r1
 8002022:	e07e      	b.n	8002122 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800202c:	2b00      	cmp	r3, #0
 800202e:	d107      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x3e8>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	0e9b      	lsrs	r3, r3, #26
 8002036:	3301      	adds	r3, #1
 8002038:	069b      	lsls	r3, r3, #26
 800203a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800203e:	e015      	b.n	800206c <HAL_ADC_ConfigChannel+0x414>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002058:	2320      	movs	r3, #32
 800205a:	e003      	b.n	8002064 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 800205c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	3301      	adds	r3, #1
 8002066:	069b      	lsls	r3, r3, #26
 8002068:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002074:	2b00      	cmp	r3, #0
 8002076:	d109      	bne.n	800208c <HAL_ADC_ConfigChannel+0x434>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	0e9b      	lsrs	r3, r3, #26
 800207e:	3301      	adds	r3, #1
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	2101      	movs	r1, #1
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	e017      	b.n	80020bc <HAL_ADC_ConfigChannel+0x464>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	61bb      	str	r3, [r7, #24]
  return result;
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80020a4:	2320      	movs	r3, #32
 80020a6:	e003      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	fab3 f383 	clz	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	3301      	adds	r3, #1
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	2101      	movs	r1, #1
 80020b8:	fa01 f303 	lsl.w	r3, r1, r3
 80020bc:	ea42 0103 	orr.w	r1, r2, r3
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10d      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x490>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0e9b      	lsrs	r3, r3, #26
 80020d2:	3301      	adds	r3, #1
 80020d4:	f003 021f 	and.w	r2, r3, #31
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	3b1e      	subs	r3, #30
 80020e0:	051b      	lsls	r3, r3, #20
 80020e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020e6:	e01b      	b.n	8002120 <HAL_ADC_ConfigChannel+0x4c8>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	60fb      	str	r3, [r7, #12]
  return result;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002100:	2320      	movs	r3, #32
 8002102:	e003      	b.n	800210c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fab3 f383 	clz	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	3301      	adds	r3, #1
 800210e:	f003 021f 	and.w	r2, r3, #31
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	3b1e      	subs	r3, #30
 800211a:	051b      	lsls	r3, r3, #20
 800211c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002120:	430b      	orrs	r3, r1
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	6892      	ldr	r2, [r2, #8]
 8002126:	4619      	mov	r1, r3
 8002128:	f7ff fb1c 	bl	8001764 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	f280 80cf 	bge.w	80022d4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a06      	ldr	r2, [pc, #24]	@ (8002154 <HAL_ADC_ConfigChannel+0x4fc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d004      	beq.n	800214a <HAL_ADC_ConfigChannel+0x4f2>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a04      	ldr	r2, [pc, #16]	@ (8002158 <HAL_ADC_ConfigChannel+0x500>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d10a      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x508>
 800214a:	4b04      	ldr	r3, [pc, #16]	@ (800215c <HAL_ADC_ConfigChannel+0x504>)
 800214c:	e009      	b.n	8002162 <HAL_ADC_ConfigChannel+0x50a>
 800214e:	bf00      	nop
 8002150:	47ff0000 	.word	0x47ff0000
 8002154:	40022000 	.word	0x40022000
 8002158:	40022100 	.word	0x40022100
 800215c:	40022300 	.word	0x40022300
 8002160:	4b61      	ldr	r3, [pc, #388]	@ (80022e8 <HAL_ADC_ConfigChannel+0x690>)
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fa70 	bl	8001648 <LL_ADC_GetCommonPathInternalCh>
 8002168:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a5f      	ldr	r2, [pc, #380]	@ (80022ec <HAL_ADC_ConfigChannel+0x694>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d004      	beq.n	800217e <HAL_ADC_ConfigChannel+0x526>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a5d      	ldr	r2, [pc, #372]	@ (80022f0 <HAL_ADC_ConfigChannel+0x698>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d10e      	bne.n	800219c <HAL_ADC_ConfigChannel+0x544>
 800217e:	485b      	ldr	r0, [pc, #364]	@ (80022ec <HAL_ADC_ConfigChannel+0x694>)
 8002180:	f7ff fb8e 	bl	80018a0 <LL_ADC_IsEnabled>
 8002184:	4604      	mov	r4, r0
 8002186:	485a      	ldr	r0, [pc, #360]	@ (80022f0 <HAL_ADC_ConfigChannel+0x698>)
 8002188:	f7ff fb8a 	bl	80018a0 <LL_ADC_IsEnabled>
 800218c:	4603      	mov	r3, r0
 800218e:	4323      	orrs	r3, r4
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	e008      	b.n	80021ae <HAL_ADC_ConfigChannel+0x556>
 800219c:	4855      	ldr	r0, [pc, #340]	@ (80022f4 <HAL_ADC_ConfigChannel+0x69c>)
 800219e:	f7ff fb7f 	bl	80018a0 <LL_ADC_IsEnabled>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d07d      	beq.n	80022ae <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a50      	ldr	r2, [pc, #320]	@ (80022f8 <HAL_ADC_ConfigChannel+0x6a0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d130      	bne.n	800221e <HAL_ADC_ConfigChannel+0x5c6>
 80021bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d12b      	bne.n	800221e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a4a      	ldr	r2, [pc, #296]	@ (80022f4 <HAL_ADC_ConfigChannel+0x69c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	f040 8081 	bne.w	80022d4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a45      	ldr	r2, [pc, #276]	@ (80022ec <HAL_ADC_ConfigChannel+0x694>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d004      	beq.n	80021e6 <HAL_ADC_ConfigChannel+0x58e>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a43      	ldr	r2, [pc, #268]	@ (80022f0 <HAL_ADC_ConfigChannel+0x698>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x592>
 80021e6:	4a45      	ldr	r2, [pc, #276]	@ (80022fc <HAL_ADC_ConfigChannel+0x6a4>)
 80021e8:	e000      	b.n	80021ec <HAL_ADC_ConfigChannel+0x594>
 80021ea:	4a3f      	ldr	r2, [pc, #252]	@ (80022e8 <HAL_ADC_ConfigChannel+0x690>)
 80021ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021f2:	4619      	mov	r1, r3
 80021f4:	4610      	mov	r0, r2
 80021f6:	f7ff fa14 	bl	8001622 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021fa:	4b41      	ldr	r3, [pc, #260]	@ (8002300 <HAL_ADC_ConfigChannel+0x6a8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	099b      	lsrs	r3, r3, #6
 8002200:	4a40      	ldr	r2, [pc, #256]	@ (8002304 <HAL_ADC_ConfigChannel+0x6ac>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	099b      	lsrs	r3, r3, #6
 8002208:	3301      	adds	r3, #1
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800220e:	e002      	b.n	8002216 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	3b01      	subs	r3, #1
 8002214:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f9      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800221c:	e05a      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a39      	ldr	r2, [pc, #228]	@ (8002308 <HAL_ADC_ConfigChannel+0x6b0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d11e      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x60e>
 8002228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800222a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d119      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a2f      	ldr	r2, [pc, #188]	@ (80022f4 <HAL_ADC_ConfigChannel+0x69c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d14b      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a2a      	ldr	r2, [pc, #168]	@ (80022ec <HAL_ADC_ConfigChannel+0x694>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d004      	beq.n	8002250 <HAL_ADC_ConfigChannel+0x5f8>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a29      	ldr	r2, [pc, #164]	@ (80022f0 <HAL_ADC_ConfigChannel+0x698>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d101      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x5fc>
 8002250:	4a2a      	ldr	r2, [pc, #168]	@ (80022fc <HAL_ADC_ConfigChannel+0x6a4>)
 8002252:	e000      	b.n	8002256 <HAL_ADC_ConfigChannel+0x5fe>
 8002254:	4a24      	ldr	r2, [pc, #144]	@ (80022e8 <HAL_ADC_ConfigChannel+0x690>)
 8002256:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002258:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800225c:	4619      	mov	r1, r3
 800225e:	4610      	mov	r0, r2
 8002260:	f7ff f9df 	bl	8001622 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002264:	e036      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a28      	ldr	r2, [pc, #160]	@ (800230c <HAL_ADC_ConfigChannel+0x6b4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d131      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x67c>
 8002270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d12c      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a1d      	ldr	r2, [pc, #116]	@ (80022f4 <HAL_ADC_ConfigChannel+0x69c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d127      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a18      	ldr	r2, [pc, #96]	@ (80022ec <HAL_ADC_ConfigChannel+0x694>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d004      	beq.n	8002298 <HAL_ADC_ConfigChannel+0x640>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a17      	ldr	r2, [pc, #92]	@ (80022f0 <HAL_ADC_ConfigChannel+0x698>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x644>
 8002298:	4a18      	ldr	r2, [pc, #96]	@ (80022fc <HAL_ADC_ConfigChannel+0x6a4>)
 800229a:	e000      	b.n	800229e <HAL_ADC_ConfigChannel+0x646>
 800229c:	4a12      	ldr	r2, [pc, #72]	@ (80022e8 <HAL_ADC_ConfigChannel+0x690>)
 800229e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022a4:	4619      	mov	r1, r3
 80022a6:	4610      	mov	r0, r2
 80022a8:	f7ff f9bb 	bl	8001622 <LL_ADC_SetCommonPathInternalCh>
 80022ac:	e012      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b2:	f043 0220 	orr.w	r2, r3, #32
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80022c0:	e008      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c6:	f043 0220 	orr.w	r2, r3, #32
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80022dc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3784      	adds	r7, #132	@ 0x84
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd90      	pop	{r4, r7, pc}
 80022e8:	58026300 	.word	0x58026300
 80022ec:	40022000 	.word	0x40022000
 80022f0:	40022100 	.word	0x40022100
 80022f4:	58026000 	.word	0x58026000
 80022f8:	cb840000 	.word	0xcb840000
 80022fc:	40022300 	.word	0x40022300
 8002300:	24000000 	.word	0x24000000
 8002304:	053e2d63 	.word	0x053e2d63
 8002308:	c7520000 	.word	0xc7520000
 800230c:	cfb80000 	.word	0xcfb80000

08002310 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a7a      	ldr	r2, [pc, #488]	@ (8002508 <ADC_ConfigureBoostMode+0x1f8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d004      	beq.n	800232c <ADC_ConfigureBoostMode+0x1c>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a79      	ldr	r2, [pc, #484]	@ (800250c <ADC_ConfigureBoostMode+0x1fc>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d109      	bne.n	8002340 <ADC_ConfigureBoostMode+0x30>
 800232c:	4b78      	ldr	r3, [pc, #480]	@ (8002510 <ADC_ConfigureBoostMode+0x200>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf14      	ite	ne
 8002338:	2301      	movne	r3, #1
 800233a:	2300      	moveq	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	e008      	b.n	8002352 <ADC_ConfigureBoostMode+0x42>
 8002340:	4b74      	ldr	r3, [pc, #464]	@ (8002514 <ADC_ConfigureBoostMode+0x204>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf14      	ite	ne
 800234c:	2301      	movne	r3, #1
 800234e:	2300      	moveq	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01c      	beq.n	8002390 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002356:	f003 f847 	bl	80053e8 <HAL_RCC_GetHCLKFreq>
 800235a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002364:	d010      	beq.n	8002388 <ADC_ConfigureBoostMode+0x78>
 8002366:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800236a:	d873      	bhi.n	8002454 <ADC_ConfigureBoostMode+0x144>
 800236c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002370:	d002      	beq.n	8002378 <ADC_ConfigureBoostMode+0x68>
 8002372:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002376:	d16d      	bne.n	8002454 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	fbb2 f3f3 	udiv	r3, r2, r3
 8002384:	60fb      	str	r3, [r7, #12]
        break;
 8002386:	e068      	b.n	800245a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	60fb      	str	r3, [r7, #12]
        break;
 800238e:	e064      	b.n	800245a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002390:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002394:	f04f 0100 	mov.w	r1, #0
 8002398:	f004 fa8c 	bl	80068b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800239c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80023a6:	d051      	beq.n	800244c <ADC_ConfigureBoostMode+0x13c>
 80023a8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80023ac:	d854      	bhi.n	8002458 <ADC_ConfigureBoostMode+0x148>
 80023ae:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80023b2:	d047      	beq.n	8002444 <ADC_ConfigureBoostMode+0x134>
 80023b4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80023b8:	d84e      	bhi.n	8002458 <ADC_ConfigureBoostMode+0x148>
 80023ba:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80023be:	d03d      	beq.n	800243c <ADC_ConfigureBoostMode+0x12c>
 80023c0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80023c4:	d848      	bhi.n	8002458 <ADC_ConfigureBoostMode+0x148>
 80023c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023ca:	d033      	beq.n	8002434 <ADC_ConfigureBoostMode+0x124>
 80023cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023d0:	d842      	bhi.n	8002458 <ADC_ConfigureBoostMode+0x148>
 80023d2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80023d6:	d029      	beq.n	800242c <ADC_ConfigureBoostMode+0x11c>
 80023d8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80023dc:	d83c      	bhi.n	8002458 <ADC_ConfigureBoostMode+0x148>
 80023de:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80023e2:	d01a      	beq.n	800241a <ADC_ConfigureBoostMode+0x10a>
 80023e4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80023e8:	d836      	bhi.n	8002458 <ADC_ConfigureBoostMode+0x148>
 80023ea:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80023ee:	d014      	beq.n	800241a <ADC_ConfigureBoostMode+0x10a>
 80023f0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80023f4:	d830      	bhi.n	8002458 <ADC_ConfigureBoostMode+0x148>
 80023f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023fa:	d00e      	beq.n	800241a <ADC_ConfigureBoostMode+0x10a>
 80023fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002400:	d82a      	bhi.n	8002458 <ADC_ConfigureBoostMode+0x148>
 8002402:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002406:	d008      	beq.n	800241a <ADC_ConfigureBoostMode+0x10a>
 8002408:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800240c:	d824      	bhi.n	8002458 <ADC_ConfigureBoostMode+0x148>
 800240e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002412:	d002      	beq.n	800241a <ADC_ConfigureBoostMode+0x10a>
 8002414:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002418:	d11e      	bne.n	8002458 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	0c9b      	lsrs	r3, r3, #18
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	fbb2 f3f3 	udiv	r3, r2, r3
 8002428:	60fb      	str	r3, [r7, #12]
        break;
 800242a:	e016      	b.n	800245a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	60fb      	str	r3, [r7, #12]
        break;
 8002432:	e012      	b.n	800245a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	60fb      	str	r3, [r7, #12]
        break;
 800243a:	e00e      	b.n	800245a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	099b      	lsrs	r3, r3, #6
 8002440:	60fb      	str	r3, [r7, #12]
        break;
 8002442:	e00a      	b.n	800245a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	09db      	lsrs	r3, r3, #7
 8002448:	60fb      	str	r3, [r7, #12]
        break;
 800244a:	e006      	b.n	800245a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	0a1b      	lsrs	r3, r3, #8
 8002450:	60fb      	str	r3, [r7, #12]
        break;
 8002452:	e002      	b.n	800245a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002454:	bf00      	nop
 8002456:	e000      	b.n	800245a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002458:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800245a:	f7ff f8ad 	bl	80015b8 <HAL_GetREVID>
 800245e:	4603      	mov	r3, r0
 8002460:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002464:	4293      	cmp	r3, r2
 8002466:	d815      	bhi.n	8002494 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4a2b      	ldr	r2, [pc, #172]	@ (8002518 <ADC_ConfigureBoostMode+0x208>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d908      	bls.n	8002482 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800247e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002480:	e03e      	b.n	8002500 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002490:	609a      	str	r2, [r3, #8]
}
 8002492:	e035      	b.n	8002500 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	085b      	lsrs	r3, r3, #1
 8002498:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4a1f      	ldr	r2, [pc, #124]	@ (800251c <ADC_ConfigureBoostMode+0x20c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d808      	bhi.n	80024b4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80024b0:	609a      	str	r2, [r3, #8]
}
 80024b2:	e025      	b.n	8002500 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002520 <ADC_ConfigureBoostMode+0x210>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d80a      	bhi.n	80024d2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024ce:	609a      	str	r2, [r3, #8]
}
 80024d0:	e016      	b.n	8002500 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4a13      	ldr	r2, [pc, #76]	@ (8002524 <ADC_ConfigureBoostMode+0x214>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d80a      	bhi.n	80024f0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ec:	609a      	str	r2, [r3, #8]
}
 80024ee:	e007      	b.n	8002500 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80024fe:	609a      	str	r2, [r3, #8]
}
 8002500:	bf00      	nop
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40022000 	.word	0x40022000
 800250c:	40022100 	.word	0x40022100
 8002510:	40022300 	.word	0x40022300
 8002514:	58026300 	.word	0x58026300
 8002518:	01312d00 	.word	0x01312d00
 800251c:	005f5e10 	.word	0x005f5e10
 8002520:	00bebc20 	.word	0x00bebc20
 8002524:	017d7840 	.word	0x017d7840

08002528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002538:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <__NVIC_SetPriorityGrouping+0x40>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002550:	4b06      	ldr	r3, [pc, #24]	@ (800256c <__NVIC_SetPriorityGrouping+0x44>)
 8002552:	4313      	orrs	r3, r2
 8002554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002556:	4a04      	ldr	r2, [pc, #16]	@ (8002568 <__NVIC_SetPriorityGrouping+0x40>)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	60d3      	str	r3, [r2, #12]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00
 800256c:	05fa0000 	.word	0x05fa0000

08002570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002574:	4b04      	ldr	r3, [pc, #16]	@ (8002588 <__NVIC_GetPriorityGrouping+0x18>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	f003 0307 	and.w	r3, r3, #7
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800259a:	2b00      	cmp	r3, #0
 800259c:	db0b      	blt.n	80025b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259e:	88fb      	ldrh	r3, [r7, #6]
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	4907      	ldr	r1, [pc, #28]	@ (80025c4 <__NVIC_EnableIRQ+0x38>)
 80025a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	2001      	movs	r0, #1
 80025ae:	fa00 f202 	lsl.w	r2, r0, r2
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000e100 	.word	0xe000e100

080025c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	6039      	str	r1, [r7, #0]
 80025d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	db0a      	blt.n	80025f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	490c      	ldr	r1, [pc, #48]	@ (8002614 <__NVIC_SetPriority+0x4c>)
 80025e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	440b      	add	r3, r1
 80025ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f0:	e00a      	b.n	8002608 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4908      	ldr	r1, [pc, #32]	@ (8002618 <__NVIC_SetPriority+0x50>)
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	3b04      	subs	r3, #4
 8002600:	0112      	lsls	r2, r2, #4
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	440b      	add	r3, r1
 8002606:	761a      	strb	r2, [r3, #24]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000e100 	.word	0xe000e100
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	@ 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f1c3 0307 	rsb	r3, r3, #7
 8002636:	2b04      	cmp	r3, #4
 8002638:	bf28      	it	cs
 800263a:	2304      	movcs	r3, #4
 800263c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3304      	adds	r3, #4
 8002642:	2b06      	cmp	r3, #6
 8002644:	d902      	bls.n	800264c <NVIC_EncodePriority+0x30>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3b03      	subs	r3, #3
 800264a:	e000      	b.n	800264e <NVIC_EncodePriority+0x32>
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	401a      	ands	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002664:	f04f 31ff 	mov.w	r1, #4294967295
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43d9      	mvns	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	4313      	orrs	r3, r2
         );
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	@ 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002694:	d301      	bcc.n	800269a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002696:	2301      	movs	r3, #1
 8002698:	e00f      	b.n	80026ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269a:	4a0a      	ldr	r2, [pc, #40]	@ (80026c4 <SysTick_Config+0x40>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a2:	210f      	movs	r1, #15
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295
 80026a8:	f7ff ff8e 	bl	80025c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ac:	4b05      	ldr	r3, [pc, #20]	@ (80026c4 <SysTick_Config+0x40>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b2:	4b04      	ldr	r3, [pc, #16]	@ (80026c4 <SysTick_Config+0x40>)
 80026b4:	2207      	movs	r2, #7
 80026b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	e000e010 	.word	0xe000e010

080026c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ff29 	bl	8002528 <__NVIC_SetPriorityGrouping>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b086      	sub	sp, #24
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4603      	mov	r3, r0
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026ec:	f7ff ff40 	bl	8002570 <__NVIC_GetPriorityGrouping>
 80026f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	6978      	ldr	r0, [r7, #20]
 80026f8:	f7ff ff90 	bl	800261c <NVIC_EncodePriority>
 80026fc:	4602      	mov	r2, r0
 80026fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff5f 	bl	80025c8 <__NVIC_SetPriority>
}
 800270a:	bf00      	nop
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800271c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff33 	bl	800258c <__NVIC_EnableIRQ>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff ffa4 	bl	8002684 <SysTick_Config>
 800273c:	4603      	mov	r3, r0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002750:	f7fe ff26 	bl	80015a0 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e316      	b.n	8002d8e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a66      	ldr	r2, [pc, #408]	@ (8002900 <HAL_DMA_Init+0x1b8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d04a      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a65      	ldr	r2, [pc, #404]	@ (8002904 <HAL_DMA_Init+0x1bc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d045      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a63      	ldr	r2, [pc, #396]	@ (8002908 <HAL_DMA_Init+0x1c0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d040      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a62      	ldr	r2, [pc, #392]	@ (800290c <HAL_DMA_Init+0x1c4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d03b      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a60      	ldr	r2, [pc, #384]	@ (8002910 <HAL_DMA_Init+0x1c8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d036      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a5f      	ldr	r2, [pc, #380]	@ (8002914 <HAL_DMA_Init+0x1cc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d031      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002918 <HAL_DMA_Init+0x1d0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d02c      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a5c      	ldr	r2, [pc, #368]	@ (800291c <HAL_DMA_Init+0x1d4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d027      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a5a      	ldr	r2, [pc, #360]	@ (8002920 <HAL_DMA_Init+0x1d8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d022      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a59      	ldr	r2, [pc, #356]	@ (8002924 <HAL_DMA_Init+0x1dc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d01d      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a57      	ldr	r2, [pc, #348]	@ (8002928 <HAL_DMA_Init+0x1e0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d018      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a56      	ldr	r2, [pc, #344]	@ (800292c <HAL_DMA_Init+0x1e4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d013      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a54      	ldr	r2, [pc, #336]	@ (8002930 <HAL_DMA_Init+0x1e8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00e      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a53      	ldr	r2, [pc, #332]	@ (8002934 <HAL_DMA_Init+0x1ec>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d009      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a51      	ldr	r2, [pc, #324]	@ (8002938 <HAL_DMA_Init+0x1f0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d004      	beq.n	8002800 <HAL_DMA_Init+0xb8>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a50      	ldr	r2, [pc, #320]	@ (800293c <HAL_DMA_Init+0x1f4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d101      	bne.n	8002804 <HAL_DMA_Init+0xbc>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <HAL_DMA_Init+0xbe>
 8002804:	2300      	movs	r3, #0
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 813b 	beq.w	8002a82 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a37      	ldr	r2, [pc, #220]	@ (8002900 <HAL_DMA_Init+0x1b8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d04a      	beq.n	80028bc <HAL_DMA_Init+0x174>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a36      	ldr	r2, [pc, #216]	@ (8002904 <HAL_DMA_Init+0x1bc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d045      	beq.n	80028bc <HAL_DMA_Init+0x174>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a34      	ldr	r2, [pc, #208]	@ (8002908 <HAL_DMA_Init+0x1c0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d040      	beq.n	80028bc <HAL_DMA_Init+0x174>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a33      	ldr	r2, [pc, #204]	@ (800290c <HAL_DMA_Init+0x1c4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d03b      	beq.n	80028bc <HAL_DMA_Init+0x174>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a31      	ldr	r2, [pc, #196]	@ (8002910 <HAL_DMA_Init+0x1c8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d036      	beq.n	80028bc <HAL_DMA_Init+0x174>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a30      	ldr	r2, [pc, #192]	@ (8002914 <HAL_DMA_Init+0x1cc>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d031      	beq.n	80028bc <HAL_DMA_Init+0x174>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a2e      	ldr	r2, [pc, #184]	@ (8002918 <HAL_DMA_Init+0x1d0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d02c      	beq.n	80028bc <HAL_DMA_Init+0x174>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a2d      	ldr	r2, [pc, #180]	@ (800291c <HAL_DMA_Init+0x1d4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d027      	beq.n	80028bc <HAL_DMA_Init+0x174>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a2b      	ldr	r2, [pc, #172]	@ (8002920 <HAL_DMA_Init+0x1d8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d022      	beq.n	80028bc <HAL_DMA_Init+0x174>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a2a      	ldr	r2, [pc, #168]	@ (8002924 <HAL_DMA_Init+0x1dc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d01d      	beq.n	80028bc <HAL_DMA_Init+0x174>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a28      	ldr	r2, [pc, #160]	@ (8002928 <HAL_DMA_Init+0x1e0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d018      	beq.n	80028bc <HAL_DMA_Init+0x174>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a27      	ldr	r2, [pc, #156]	@ (800292c <HAL_DMA_Init+0x1e4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d013      	beq.n	80028bc <HAL_DMA_Init+0x174>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a25      	ldr	r2, [pc, #148]	@ (8002930 <HAL_DMA_Init+0x1e8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00e      	beq.n	80028bc <HAL_DMA_Init+0x174>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a24      	ldr	r2, [pc, #144]	@ (8002934 <HAL_DMA_Init+0x1ec>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d009      	beq.n	80028bc <HAL_DMA_Init+0x174>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a22      	ldr	r2, [pc, #136]	@ (8002938 <HAL_DMA_Init+0x1f0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d004      	beq.n	80028bc <HAL_DMA_Init+0x174>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a21      	ldr	r2, [pc, #132]	@ (800293c <HAL_DMA_Init+0x1f4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d108      	bne.n	80028ce <HAL_DMA_Init+0x186>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0201 	bic.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e007      	b.n	80028de <HAL_DMA_Init+0x196>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028de:	e02f      	b.n	8002940 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028e0:	f7fe fe5e 	bl	80015a0 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b05      	cmp	r3, #5
 80028ec:	d928      	bls.n	8002940 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2220      	movs	r2, #32
 80028f2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2203      	movs	r2, #3
 80028f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e246      	b.n	8002d8e <HAL_DMA_Init+0x646>
 8002900:	40020010 	.word	0x40020010
 8002904:	40020028 	.word	0x40020028
 8002908:	40020040 	.word	0x40020040
 800290c:	40020058 	.word	0x40020058
 8002910:	40020070 	.word	0x40020070
 8002914:	40020088 	.word	0x40020088
 8002918:	400200a0 	.word	0x400200a0
 800291c:	400200b8 	.word	0x400200b8
 8002920:	40020410 	.word	0x40020410
 8002924:	40020428 	.word	0x40020428
 8002928:	40020440 	.word	0x40020440
 800292c:	40020458 	.word	0x40020458
 8002930:	40020470 	.word	0x40020470
 8002934:	40020488 	.word	0x40020488
 8002938:	400204a0 	.word	0x400204a0
 800293c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1c8      	bne.n	80028e0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b83      	ldr	r3, [pc, #524]	@ (8002b68 <HAL_DMA_Init+0x420>)
 800295a:	4013      	ands	r3, r2
 800295c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002966:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002972:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800297e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	2b04      	cmp	r3, #4
 8002992:	d107      	bne.n	80029a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299c:	4313      	orrs	r3, r2
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80029a4:	4b71      	ldr	r3, [pc, #452]	@ (8002b6c <HAL_DMA_Init+0x424>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b71      	ldr	r3, [pc, #452]	@ (8002b70 <HAL_DMA_Init+0x428>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029b0:	d328      	bcc.n	8002a04 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b28      	cmp	r3, #40	@ 0x28
 80029b8:	d903      	bls.n	80029c2 <HAL_DMA_Init+0x27a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b2e      	cmp	r3, #46	@ 0x2e
 80029c0:	d917      	bls.n	80029f2 <HAL_DMA_Init+0x2aa>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80029c8:	d903      	bls.n	80029d2 <HAL_DMA_Init+0x28a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b42      	cmp	r3, #66	@ 0x42
 80029d0:	d90f      	bls.n	80029f2 <HAL_DMA_Init+0x2aa>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b46      	cmp	r3, #70	@ 0x46
 80029d8:	d903      	bls.n	80029e2 <HAL_DMA_Init+0x29a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b48      	cmp	r3, #72	@ 0x48
 80029e0:	d907      	bls.n	80029f2 <HAL_DMA_Init+0x2aa>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b4e      	cmp	r3, #78	@ 0x4e
 80029e8:	d905      	bls.n	80029f6 <HAL_DMA_Init+0x2ae>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b52      	cmp	r3, #82	@ 0x52
 80029f0:	d801      	bhi.n	80029f6 <HAL_DMA_Init+0x2ae>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <HAL_DMA_Init+0x2b0>
 80029f6:	2300      	movs	r3, #0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a02:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f023 0307 	bic.w	r3, r3, #7
 8002a1a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d117      	bne.n	8002a5e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00e      	beq.n	8002a5e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f001 f9b9 	bl	8003db8 <DMA_CheckFifoParam>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2240      	movs	r2, #64	@ 0x40
 8002a50:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e197      	b.n	8002d8e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f001 f8f4 	bl	8003c54 <DMA_CalcBaseAndBitshift>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	223f      	movs	r2, #63	@ 0x3f
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	e0cd      	b.n	8002c1e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a3b      	ldr	r2, [pc, #236]	@ (8002b74 <HAL_DMA_Init+0x42c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d022      	beq.n	8002ad2 <HAL_DMA_Init+0x38a>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a39      	ldr	r2, [pc, #228]	@ (8002b78 <HAL_DMA_Init+0x430>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d01d      	beq.n	8002ad2 <HAL_DMA_Init+0x38a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a38      	ldr	r2, [pc, #224]	@ (8002b7c <HAL_DMA_Init+0x434>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d018      	beq.n	8002ad2 <HAL_DMA_Init+0x38a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a36      	ldr	r2, [pc, #216]	@ (8002b80 <HAL_DMA_Init+0x438>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d013      	beq.n	8002ad2 <HAL_DMA_Init+0x38a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a35      	ldr	r2, [pc, #212]	@ (8002b84 <HAL_DMA_Init+0x43c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00e      	beq.n	8002ad2 <HAL_DMA_Init+0x38a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a33      	ldr	r2, [pc, #204]	@ (8002b88 <HAL_DMA_Init+0x440>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d009      	beq.n	8002ad2 <HAL_DMA_Init+0x38a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a32      	ldr	r2, [pc, #200]	@ (8002b8c <HAL_DMA_Init+0x444>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d004      	beq.n	8002ad2 <HAL_DMA_Init+0x38a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a30      	ldr	r2, [pc, #192]	@ (8002b90 <HAL_DMA_Init+0x448>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d101      	bne.n	8002ad6 <HAL_DMA_Init+0x38e>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_DMA_Init+0x390>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8097 	beq.w	8002c0c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a24      	ldr	r2, [pc, #144]	@ (8002b74 <HAL_DMA_Init+0x42c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d021      	beq.n	8002b2c <HAL_DMA_Init+0x3e4>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a22      	ldr	r2, [pc, #136]	@ (8002b78 <HAL_DMA_Init+0x430>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d01c      	beq.n	8002b2c <HAL_DMA_Init+0x3e4>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a21      	ldr	r2, [pc, #132]	@ (8002b7c <HAL_DMA_Init+0x434>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d017      	beq.n	8002b2c <HAL_DMA_Init+0x3e4>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a1f      	ldr	r2, [pc, #124]	@ (8002b80 <HAL_DMA_Init+0x438>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d012      	beq.n	8002b2c <HAL_DMA_Init+0x3e4>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8002b84 <HAL_DMA_Init+0x43c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00d      	beq.n	8002b2c <HAL_DMA_Init+0x3e4>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1c      	ldr	r2, [pc, #112]	@ (8002b88 <HAL_DMA_Init+0x440>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d008      	beq.n	8002b2c <HAL_DMA_Init+0x3e4>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8002b8c <HAL_DMA_Init+0x444>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d003      	beq.n	8002b2c <HAL_DMA_Init+0x3e4>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a19      	ldr	r2, [pc, #100]	@ (8002b90 <HAL_DMA_Init+0x448>)
 8002b2a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	4b13      	ldr	r3, [pc, #76]	@ (8002b94 <HAL_DMA_Init+0x44c>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b40      	cmp	r3, #64	@ 0x40
 8002b52:	d021      	beq.n	8002b98 <HAL_DMA_Init+0x450>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b80      	cmp	r3, #128	@ 0x80
 8002b5a:	d102      	bne.n	8002b62 <HAL_DMA_Init+0x41a>
 8002b5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b60:	e01b      	b.n	8002b9a <HAL_DMA_Init+0x452>
 8002b62:	2300      	movs	r3, #0
 8002b64:	e019      	b.n	8002b9a <HAL_DMA_Init+0x452>
 8002b66:	bf00      	nop
 8002b68:	fe10803f 	.word	0xfe10803f
 8002b6c:	5c001000 	.word	0x5c001000
 8002b70:	ffff0000 	.word	0xffff0000
 8002b74:	58025408 	.word	0x58025408
 8002b78:	5802541c 	.word	0x5802541c
 8002b7c:	58025430 	.word	0x58025430
 8002b80:	58025444 	.word	0x58025444
 8002b84:	58025458 	.word	0x58025458
 8002b88:	5802546c 	.word	0x5802546c
 8002b8c:	58025480 	.word	0x58025480
 8002b90:	58025494 	.word	0x58025494
 8002b94:	fffe000f 	.word	0xfffe000f
 8002b98:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68d2      	ldr	r2, [r2, #12]
 8002b9e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ba0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ba8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002bb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002bb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002bc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002bc8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4b6e      	ldr	r3, [pc, #440]	@ (8002d98 <HAL_DMA_Init+0x650>)
 8002be0:	4413      	add	r3, r2
 8002be2:	4a6e      	ldr	r2, [pc, #440]	@ (8002d9c <HAL_DMA_Init+0x654>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	009a      	lsls	r2, r3, #2
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f001 f82f 	bl	8003c54 <DMA_CalcBaseAndBitshift>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	2201      	movs	r2, #1
 8002c04:	409a      	lsls	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	e008      	b.n	8002c1e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2240      	movs	r2, #64	@ 0x40
 8002c10:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2203      	movs	r2, #3
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e0b7      	b.n	8002d8e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a5f      	ldr	r2, [pc, #380]	@ (8002da0 <HAL_DMA_Init+0x658>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d072      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a5d      	ldr	r2, [pc, #372]	@ (8002da4 <HAL_DMA_Init+0x65c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d06d      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a5c      	ldr	r2, [pc, #368]	@ (8002da8 <HAL_DMA_Init+0x660>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d068      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a5a      	ldr	r2, [pc, #360]	@ (8002dac <HAL_DMA_Init+0x664>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d063      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a59      	ldr	r2, [pc, #356]	@ (8002db0 <HAL_DMA_Init+0x668>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d05e      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a57      	ldr	r2, [pc, #348]	@ (8002db4 <HAL_DMA_Init+0x66c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d059      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a56      	ldr	r2, [pc, #344]	@ (8002db8 <HAL_DMA_Init+0x670>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d054      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a54      	ldr	r2, [pc, #336]	@ (8002dbc <HAL_DMA_Init+0x674>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d04f      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a53      	ldr	r2, [pc, #332]	@ (8002dc0 <HAL_DMA_Init+0x678>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d04a      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a51      	ldr	r2, [pc, #324]	@ (8002dc4 <HAL_DMA_Init+0x67c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d045      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a50      	ldr	r2, [pc, #320]	@ (8002dc8 <HAL_DMA_Init+0x680>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d040      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a4e      	ldr	r2, [pc, #312]	@ (8002dcc <HAL_DMA_Init+0x684>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d03b      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a4d      	ldr	r2, [pc, #308]	@ (8002dd0 <HAL_DMA_Init+0x688>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d036      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a4b      	ldr	r2, [pc, #300]	@ (8002dd4 <HAL_DMA_Init+0x68c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d031      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a4a      	ldr	r2, [pc, #296]	@ (8002dd8 <HAL_DMA_Init+0x690>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d02c      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a48      	ldr	r2, [pc, #288]	@ (8002ddc <HAL_DMA_Init+0x694>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d027      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a47      	ldr	r2, [pc, #284]	@ (8002de0 <HAL_DMA_Init+0x698>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d022      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a45      	ldr	r2, [pc, #276]	@ (8002de4 <HAL_DMA_Init+0x69c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01d      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a44      	ldr	r2, [pc, #272]	@ (8002de8 <HAL_DMA_Init+0x6a0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d018      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a42      	ldr	r2, [pc, #264]	@ (8002dec <HAL_DMA_Init+0x6a4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d013      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a41      	ldr	r2, [pc, #260]	@ (8002df0 <HAL_DMA_Init+0x6a8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00e      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a3f      	ldr	r2, [pc, #252]	@ (8002df4 <HAL_DMA_Init+0x6ac>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d009      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a3e      	ldr	r2, [pc, #248]	@ (8002df8 <HAL_DMA_Init+0x6b0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d004      	beq.n	8002d0e <HAL_DMA_Init+0x5c6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a3c      	ldr	r2, [pc, #240]	@ (8002dfc <HAL_DMA_Init+0x6b4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d101      	bne.n	8002d12 <HAL_DMA_Init+0x5ca>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <HAL_DMA_Init+0x5cc>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d032      	beq.n	8002d7e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f001 f8c9 	bl	8003eb0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b80      	cmp	r3, #128	@ 0x80
 8002d24:	d102      	bne.n	8002d2c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d40:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d010      	beq.n	8002d6c <HAL_DMA_Init+0x624>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d80c      	bhi.n	8002d6c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f001 f946 	bl	8003fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	e008      	b.n	8002d7e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	a7fdabf8 	.word	0xa7fdabf8
 8002d9c:	cccccccd 	.word	0xcccccccd
 8002da0:	40020010 	.word	0x40020010
 8002da4:	40020028 	.word	0x40020028
 8002da8:	40020040 	.word	0x40020040
 8002dac:	40020058 	.word	0x40020058
 8002db0:	40020070 	.word	0x40020070
 8002db4:	40020088 	.word	0x40020088
 8002db8:	400200a0 	.word	0x400200a0
 8002dbc:	400200b8 	.word	0x400200b8
 8002dc0:	40020410 	.word	0x40020410
 8002dc4:	40020428 	.word	0x40020428
 8002dc8:	40020440 	.word	0x40020440
 8002dcc:	40020458 	.word	0x40020458
 8002dd0:	40020470 	.word	0x40020470
 8002dd4:	40020488 	.word	0x40020488
 8002dd8:	400204a0 	.word	0x400204a0
 8002ddc:	400204b8 	.word	0x400204b8
 8002de0:	58025408 	.word	0x58025408
 8002de4:	5802541c 	.word	0x5802541c
 8002de8:	58025430 	.word	0x58025430
 8002dec:	58025444 	.word	0x58025444
 8002df0:	58025458 	.word	0x58025458
 8002df4:	5802546c 	.word	0x5802546c
 8002df8:	58025480 	.word	0x58025480
 8002dfc:	58025494 	.word	0x58025494

08002e00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08a      	sub	sp, #40	@ 0x28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e0c:	4b67      	ldr	r3, [pc, #412]	@ (8002fac <HAL_DMA_IRQHandler+0x1ac>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a67      	ldr	r2, [pc, #412]	@ (8002fb0 <HAL_DMA_IRQHandler+0x1b0>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0a9b      	lsrs	r3, r3, #10
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e24:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a5f      	ldr	r2, [pc, #380]	@ (8002fb4 <HAL_DMA_IRQHandler+0x1b4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d04a      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a5d      	ldr	r2, [pc, #372]	@ (8002fb8 <HAL_DMA_IRQHandler+0x1b8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d045      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a5c      	ldr	r2, [pc, #368]	@ (8002fbc <HAL_DMA_IRQHandler+0x1bc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d040      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a5a      	ldr	r2, [pc, #360]	@ (8002fc0 <HAL_DMA_IRQHandler+0x1c0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d03b      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a59      	ldr	r2, [pc, #356]	@ (8002fc4 <HAL_DMA_IRQHandler+0x1c4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d036      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a57      	ldr	r2, [pc, #348]	@ (8002fc8 <HAL_DMA_IRQHandler+0x1c8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d031      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a56      	ldr	r2, [pc, #344]	@ (8002fcc <HAL_DMA_IRQHandler+0x1cc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d02c      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a54      	ldr	r2, [pc, #336]	@ (8002fd0 <HAL_DMA_IRQHandler+0x1d0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d027      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a53      	ldr	r2, [pc, #332]	@ (8002fd4 <HAL_DMA_IRQHandler+0x1d4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d022      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a51      	ldr	r2, [pc, #324]	@ (8002fd8 <HAL_DMA_IRQHandler+0x1d8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d01d      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a50      	ldr	r2, [pc, #320]	@ (8002fdc <HAL_DMA_IRQHandler+0x1dc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d018      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a4e      	ldr	r2, [pc, #312]	@ (8002fe0 <HAL_DMA_IRQHandler+0x1e0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a4d      	ldr	r2, [pc, #308]	@ (8002fe4 <HAL_DMA_IRQHandler+0x1e4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00e      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a4b      	ldr	r2, [pc, #300]	@ (8002fe8 <HAL_DMA_IRQHandler+0x1e8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d009      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a4a      	ldr	r2, [pc, #296]	@ (8002fec <HAL_DMA_IRQHandler+0x1ec>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xd2>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a48      	ldr	r2, [pc, #288]	@ (8002ff0 <HAL_DMA_IRQHandler+0x1f0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <HAL_DMA_IRQHandler+0xd6>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <HAL_DMA_IRQHandler+0xd8>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 842b 	beq.w	8003734 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 80a2 	beq.w	8003038 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a2e      	ldr	r2, [pc, #184]	@ (8002fb4 <HAL_DMA_IRQHandler+0x1b4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d04a      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a2d      	ldr	r2, [pc, #180]	@ (8002fb8 <HAL_DMA_IRQHandler+0x1b8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d045      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8002fbc <HAL_DMA_IRQHandler+0x1bc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d040      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a2a      	ldr	r2, [pc, #168]	@ (8002fc0 <HAL_DMA_IRQHandler+0x1c0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d03b      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a28      	ldr	r2, [pc, #160]	@ (8002fc4 <HAL_DMA_IRQHandler+0x1c4>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d036      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a27      	ldr	r2, [pc, #156]	@ (8002fc8 <HAL_DMA_IRQHandler+0x1c8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d031      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a25      	ldr	r2, [pc, #148]	@ (8002fcc <HAL_DMA_IRQHandler+0x1cc>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d02c      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a24      	ldr	r2, [pc, #144]	@ (8002fd0 <HAL_DMA_IRQHandler+0x1d0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d027      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a22      	ldr	r2, [pc, #136]	@ (8002fd4 <HAL_DMA_IRQHandler+0x1d4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d022      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a21      	ldr	r2, [pc, #132]	@ (8002fd8 <HAL_DMA_IRQHandler+0x1d8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d01d      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fdc <HAL_DMA_IRQHandler+0x1dc>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d018      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe0 <HAL_DMA_IRQHandler+0x1e0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d013      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe4 <HAL_DMA_IRQHandler+0x1e4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00e      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe8 <HAL_DMA_IRQHandler+0x1e8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d009      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a19      	ldr	r2, [pc, #100]	@ (8002fec <HAL_DMA_IRQHandler+0x1ec>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d004      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x194>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a18      	ldr	r2, [pc, #96]	@ (8002ff0 <HAL_DMA_IRQHandler+0x1f0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d12f      	bne.n	8002ff4 <HAL_DMA_IRQHandler+0x1f4>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	bf14      	ite	ne
 8002fa2:	2301      	movne	r3, #1
 8002fa4:	2300      	moveq	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	e02e      	b.n	8003008 <HAL_DMA_IRQHandler+0x208>
 8002faa:	bf00      	nop
 8002fac:	24000000 	.word	0x24000000
 8002fb0:	1b4e81b5 	.word	0x1b4e81b5
 8002fb4:	40020010 	.word	0x40020010
 8002fb8:	40020028 	.word	0x40020028
 8002fbc:	40020040 	.word	0x40020040
 8002fc0:	40020058 	.word	0x40020058
 8002fc4:	40020070 	.word	0x40020070
 8002fc8:	40020088 	.word	0x40020088
 8002fcc:	400200a0 	.word	0x400200a0
 8002fd0:	400200b8 	.word	0x400200b8
 8002fd4:	40020410 	.word	0x40020410
 8002fd8:	40020428 	.word	0x40020428
 8002fdc:	40020440 	.word	0x40020440
 8002fe0:	40020458 	.word	0x40020458
 8002fe4:	40020470 	.word	0x40020470
 8002fe8:	40020488 	.word	0x40020488
 8002fec:	400204a0 	.word	0x400204a0
 8002ff0:	400204b8 	.word	0x400204b8
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bf14      	ite	ne
 8003002:	2301      	movne	r3, #1
 8003004:	2300      	moveq	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d015      	beq.n	8003038 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0204 	bic.w	r2, r2, #4
 800301a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	2208      	movs	r2, #8
 8003026:	409a      	lsls	r2, r3
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003030:	f043 0201 	orr.w	r2, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	fa22 f303 	lsr.w	r3, r2, r3
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d06e      	beq.n	800312c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a69      	ldr	r2, [pc, #420]	@ (80031f8 <HAL_DMA_IRQHandler+0x3f8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d04a      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a67      	ldr	r2, [pc, #412]	@ (80031fc <HAL_DMA_IRQHandler+0x3fc>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d045      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a66      	ldr	r2, [pc, #408]	@ (8003200 <HAL_DMA_IRQHandler+0x400>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d040      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a64      	ldr	r2, [pc, #400]	@ (8003204 <HAL_DMA_IRQHandler+0x404>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d03b      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a63      	ldr	r2, [pc, #396]	@ (8003208 <HAL_DMA_IRQHandler+0x408>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d036      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a61      	ldr	r2, [pc, #388]	@ (800320c <HAL_DMA_IRQHandler+0x40c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d031      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a60      	ldr	r2, [pc, #384]	@ (8003210 <HAL_DMA_IRQHandler+0x410>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d02c      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a5e      	ldr	r2, [pc, #376]	@ (8003214 <HAL_DMA_IRQHandler+0x414>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d027      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a5d      	ldr	r2, [pc, #372]	@ (8003218 <HAL_DMA_IRQHandler+0x418>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d022      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a5b      	ldr	r2, [pc, #364]	@ (800321c <HAL_DMA_IRQHandler+0x41c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d01d      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a5a      	ldr	r2, [pc, #360]	@ (8003220 <HAL_DMA_IRQHandler+0x420>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d018      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a58      	ldr	r2, [pc, #352]	@ (8003224 <HAL_DMA_IRQHandler+0x424>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d013      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a57      	ldr	r2, [pc, #348]	@ (8003228 <HAL_DMA_IRQHandler+0x428>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00e      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a55      	ldr	r2, [pc, #340]	@ (800322c <HAL_DMA_IRQHandler+0x42c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d009      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a54      	ldr	r2, [pc, #336]	@ (8003230 <HAL_DMA_IRQHandler+0x430>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d004      	beq.n	80030ee <HAL_DMA_IRQHandler+0x2ee>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a52      	ldr	r2, [pc, #328]	@ (8003234 <HAL_DMA_IRQHandler+0x434>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d10a      	bne.n	8003104 <HAL_DMA_IRQHandler+0x304>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e003      	b.n	800310c <HAL_DMA_IRQHandler+0x30c>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2300      	movs	r3, #0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00d      	beq.n	800312c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	2201      	movs	r2, #1
 800311a:	409a      	lsls	r2, r3
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003124:	f043 0202 	orr.w	r2, r3, #2
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	2204      	movs	r2, #4
 8003136:	409a      	lsls	r2, r3
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 808f 	beq.w	8003260 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a2c      	ldr	r2, [pc, #176]	@ (80031f8 <HAL_DMA_IRQHandler+0x3f8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d04a      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a2a      	ldr	r2, [pc, #168]	@ (80031fc <HAL_DMA_IRQHandler+0x3fc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d045      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a29      	ldr	r2, [pc, #164]	@ (8003200 <HAL_DMA_IRQHandler+0x400>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d040      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a27      	ldr	r2, [pc, #156]	@ (8003204 <HAL_DMA_IRQHandler+0x404>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d03b      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a26      	ldr	r2, [pc, #152]	@ (8003208 <HAL_DMA_IRQHandler+0x408>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d036      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a24      	ldr	r2, [pc, #144]	@ (800320c <HAL_DMA_IRQHandler+0x40c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d031      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a23      	ldr	r2, [pc, #140]	@ (8003210 <HAL_DMA_IRQHandler+0x410>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d02c      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a21      	ldr	r2, [pc, #132]	@ (8003214 <HAL_DMA_IRQHandler+0x414>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d027      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a20      	ldr	r2, [pc, #128]	@ (8003218 <HAL_DMA_IRQHandler+0x418>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d022      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1e      	ldr	r2, [pc, #120]	@ (800321c <HAL_DMA_IRQHandler+0x41c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01d      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003220 <HAL_DMA_IRQHandler+0x420>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d018      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003224 <HAL_DMA_IRQHandler+0x424>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a1a      	ldr	r2, [pc, #104]	@ (8003228 <HAL_DMA_IRQHandler+0x428>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00e      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a18      	ldr	r2, [pc, #96]	@ (800322c <HAL_DMA_IRQHandler+0x42c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d009      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a17      	ldr	r2, [pc, #92]	@ (8003230 <HAL_DMA_IRQHandler+0x430>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d004      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x3e2>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a15      	ldr	r2, [pc, #84]	@ (8003234 <HAL_DMA_IRQHandler+0x434>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d12a      	bne.n	8003238 <HAL_DMA_IRQHandler+0x438>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf14      	ite	ne
 80031f0:	2301      	movne	r3, #1
 80031f2:	2300      	moveq	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	e023      	b.n	8003240 <HAL_DMA_IRQHandler+0x440>
 80031f8:	40020010 	.word	0x40020010
 80031fc:	40020028 	.word	0x40020028
 8003200:	40020040 	.word	0x40020040
 8003204:	40020058 	.word	0x40020058
 8003208:	40020070 	.word	0x40020070
 800320c:	40020088 	.word	0x40020088
 8003210:	400200a0 	.word	0x400200a0
 8003214:	400200b8 	.word	0x400200b8
 8003218:	40020410 	.word	0x40020410
 800321c:	40020428 	.word	0x40020428
 8003220:	40020440 	.word	0x40020440
 8003224:	40020458 	.word	0x40020458
 8003228:	40020470 	.word	0x40020470
 800322c:	40020488 	.word	0x40020488
 8003230:	400204a0 	.word	0x400204a0
 8003234:	400204b8 	.word	0x400204b8
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2300      	movs	r3, #0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00d      	beq.n	8003260 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	2204      	movs	r2, #4
 800324e:	409a      	lsls	r2, r3
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003258:	f043 0204 	orr.w	r2, r3, #4
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	2210      	movs	r2, #16
 800326a:	409a      	lsls	r2, r3
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80a6 	beq.w	80033c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a85      	ldr	r2, [pc, #532]	@ (8003490 <HAL_DMA_IRQHandler+0x690>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d04a      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a83      	ldr	r2, [pc, #524]	@ (8003494 <HAL_DMA_IRQHandler+0x694>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d045      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a82      	ldr	r2, [pc, #520]	@ (8003498 <HAL_DMA_IRQHandler+0x698>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d040      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a80      	ldr	r2, [pc, #512]	@ (800349c <HAL_DMA_IRQHandler+0x69c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d03b      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a7f      	ldr	r2, [pc, #508]	@ (80034a0 <HAL_DMA_IRQHandler+0x6a0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d036      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a7d      	ldr	r2, [pc, #500]	@ (80034a4 <HAL_DMA_IRQHandler+0x6a4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d031      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a7c      	ldr	r2, [pc, #496]	@ (80034a8 <HAL_DMA_IRQHandler+0x6a8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d02c      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a7a      	ldr	r2, [pc, #488]	@ (80034ac <HAL_DMA_IRQHandler+0x6ac>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d027      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a79      	ldr	r2, [pc, #484]	@ (80034b0 <HAL_DMA_IRQHandler+0x6b0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d022      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a77      	ldr	r2, [pc, #476]	@ (80034b4 <HAL_DMA_IRQHandler+0x6b4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01d      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a76      	ldr	r2, [pc, #472]	@ (80034b8 <HAL_DMA_IRQHandler+0x6b8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d018      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a74      	ldr	r2, [pc, #464]	@ (80034bc <HAL_DMA_IRQHandler+0x6bc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d013      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a73      	ldr	r2, [pc, #460]	@ (80034c0 <HAL_DMA_IRQHandler+0x6c0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d00e      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a71      	ldr	r2, [pc, #452]	@ (80034c4 <HAL_DMA_IRQHandler+0x6c4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d009      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a70      	ldr	r2, [pc, #448]	@ (80034c8 <HAL_DMA_IRQHandler+0x6c8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d004      	beq.n	8003316 <HAL_DMA_IRQHandler+0x516>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a6e      	ldr	r2, [pc, #440]	@ (80034cc <HAL_DMA_IRQHandler+0x6cc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d10a      	bne.n	800332c <HAL_DMA_IRQHandler+0x52c>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf14      	ite	ne
 8003324:	2301      	movne	r3, #1
 8003326:	2300      	moveq	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	e009      	b.n	8003340 <HAL_DMA_IRQHandler+0x540>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	bf14      	ite	ne
 800333a:	2301      	movne	r3, #1
 800333c:	2300      	moveq	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d03e      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	2210      	movs	r2, #16
 800334e:	409a      	lsls	r2, r3
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d018      	beq.n	8003394 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d108      	bne.n	8003382 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	2b00      	cmp	r3, #0
 8003376:	d024      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4798      	blx	r3
 8003380:	e01f      	b.n	80033c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01b      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	4798      	blx	r3
 8003392:	e016      	b.n	80033c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d107      	bne.n	80033b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0208 	bic.w	r2, r2, #8
 80033b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c6:	f003 031f 	and.w	r3, r3, #31
 80033ca:	2220      	movs	r2, #32
 80033cc:	409a      	lsls	r2, r3
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8110 	beq.w	80035f8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003490 <HAL_DMA_IRQHandler+0x690>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d04a      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003494 <HAL_DMA_IRQHandler+0x694>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d045      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a29      	ldr	r2, [pc, #164]	@ (8003498 <HAL_DMA_IRQHandler+0x698>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d040      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a28      	ldr	r2, [pc, #160]	@ (800349c <HAL_DMA_IRQHandler+0x69c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d03b      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a26      	ldr	r2, [pc, #152]	@ (80034a0 <HAL_DMA_IRQHandler+0x6a0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d036      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a25      	ldr	r2, [pc, #148]	@ (80034a4 <HAL_DMA_IRQHandler+0x6a4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d031      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a23      	ldr	r2, [pc, #140]	@ (80034a8 <HAL_DMA_IRQHandler+0x6a8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d02c      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a22      	ldr	r2, [pc, #136]	@ (80034ac <HAL_DMA_IRQHandler+0x6ac>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d027      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a20      	ldr	r2, [pc, #128]	@ (80034b0 <HAL_DMA_IRQHandler+0x6b0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d022      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a1f      	ldr	r2, [pc, #124]	@ (80034b4 <HAL_DMA_IRQHandler+0x6b4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d01d      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1d      	ldr	r2, [pc, #116]	@ (80034b8 <HAL_DMA_IRQHandler+0x6b8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d018      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1c      	ldr	r2, [pc, #112]	@ (80034bc <HAL_DMA_IRQHandler+0x6bc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d013      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1a      	ldr	r2, [pc, #104]	@ (80034c0 <HAL_DMA_IRQHandler+0x6c0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00e      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a19      	ldr	r2, [pc, #100]	@ (80034c4 <HAL_DMA_IRQHandler+0x6c4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d009      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a17      	ldr	r2, [pc, #92]	@ (80034c8 <HAL_DMA_IRQHandler+0x6c8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d004      	beq.n	8003478 <HAL_DMA_IRQHandler+0x678>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a16      	ldr	r2, [pc, #88]	@ (80034cc <HAL_DMA_IRQHandler+0x6cc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d12b      	bne.n	80034d0 <HAL_DMA_IRQHandler+0x6d0>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b00      	cmp	r3, #0
 8003484:	bf14      	ite	ne
 8003486:	2301      	movne	r3, #1
 8003488:	2300      	moveq	r3, #0
 800348a:	b2db      	uxtb	r3, r3
 800348c:	e02a      	b.n	80034e4 <HAL_DMA_IRQHandler+0x6e4>
 800348e:	bf00      	nop
 8003490:	40020010 	.word	0x40020010
 8003494:	40020028 	.word	0x40020028
 8003498:	40020040 	.word	0x40020040
 800349c:	40020058 	.word	0x40020058
 80034a0:	40020070 	.word	0x40020070
 80034a4:	40020088 	.word	0x40020088
 80034a8:	400200a0 	.word	0x400200a0
 80034ac:	400200b8 	.word	0x400200b8
 80034b0:	40020410 	.word	0x40020410
 80034b4:	40020428 	.word	0x40020428
 80034b8:	40020440 	.word	0x40020440
 80034bc:	40020458 	.word	0x40020458
 80034c0:	40020470 	.word	0x40020470
 80034c4:	40020488 	.word	0x40020488
 80034c8:	400204a0 	.word	0x400204a0
 80034cc:	400204b8 	.word	0x400204b8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	bf14      	ite	ne
 80034de:	2301      	movne	r3, #1
 80034e0:	2300      	moveq	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8087 	beq.w	80035f8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ee:	f003 031f 	and.w	r3, r3, #31
 80034f2:	2220      	movs	r2, #32
 80034f4:	409a      	lsls	r2, r3
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b04      	cmp	r3, #4
 8003504:	d139      	bne.n	800357a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0216 	bic.w	r2, r2, #22
 8003514:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003524:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d103      	bne.n	8003536 <HAL_DMA_IRQHandler+0x736>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0208 	bic.w	r2, r2, #8
 8003544:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	223f      	movs	r2, #63	@ 0x3f
 8003550:	409a      	lsls	r2, r3
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 834a 	beq.w	8003c04 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
          }
          return;
 8003578:	e344      	b.n	8003c04 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d018      	beq.n	80035ba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d108      	bne.n	80035a8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359a:	2b00      	cmp	r3, #0
 800359c:	d02c      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	4798      	blx	r3
 80035a6:	e027      	b.n	80035f8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d023      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
 80035b8:	e01e      	b.n	80035f8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10f      	bne.n	80035e8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0210 	bic.w	r2, r2, #16
 80035d6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 8306 	beq.w	8003c0e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 8088 	beq.w	8003720 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2204      	movs	r2, #4
 8003614:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a7a      	ldr	r2, [pc, #488]	@ (8003808 <HAL_DMA_IRQHandler+0xa08>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d04a      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a79      	ldr	r2, [pc, #484]	@ (800380c <HAL_DMA_IRQHandler+0xa0c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d045      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a77      	ldr	r2, [pc, #476]	@ (8003810 <HAL_DMA_IRQHandler+0xa10>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d040      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a76      	ldr	r2, [pc, #472]	@ (8003814 <HAL_DMA_IRQHandler+0xa14>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d03b      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a74      	ldr	r2, [pc, #464]	@ (8003818 <HAL_DMA_IRQHandler+0xa18>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d036      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a73      	ldr	r2, [pc, #460]	@ (800381c <HAL_DMA_IRQHandler+0xa1c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d031      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a71      	ldr	r2, [pc, #452]	@ (8003820 <HAL_DMA_IRQHandler+0xa20>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d02c      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a70      	ldr	r2, [pc, #448]	@ (8003824 <HAL_DMA_IRQHandler+0xa24>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d027      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a6e      	ldr	r2, [pc, #440]	@ (8003828 <HAL_DMA_IRQHandler+0xa28>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d022      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a6d      	ldr	r2, [pc, #436]	@ (800382c <HAL_DMA_IRQHandler+0xa2c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d01d      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a6b      	ldr	r2, [pc, #428]	@ (8003830 <HAL_DMA_IRQHandler+0xa30>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d018      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a6a      	ldr	r2, [pc, #424]	@ (8003834 <HAL_DMA_IRQHandler+0xa34>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d013      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a68      	ldr	r2, [pc, #416]	@ (8003838 <HAL_DMA_IRQHandler+0xa38>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00e      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a67      	ldr	r2, [pc, #412]	@ (800383c <HAL_DMA_IRQHandler+0xa3c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d009      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a65      	ldr	r2, [pc, #404]	@ (8003840 <HAL_DMA_IRQHandler+0xa40>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d004      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x8b8>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a64      	ldr	r2, [pc, #400]	@ (8003844 <HAL_DMA_IRQHandler+0xa44>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d108      	bne.n	80036ca <HAL_DMA_IRQHandler+0x8ca>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0201 	bic.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	e007      	b.n	80036da <HAL_DMA_IRQHandler+0x8da>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0201 	bic.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	3301      	adds	r3, #1
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d307      	bcc.n	80036f6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1f2      	bne.n	80036da <HAL_DMA_IRQHandler+0x8da>
 80036f4:	e000      	b.n	80036f8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80036f6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d004      	beq.n	8003710 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2203      	movs	r2, #3
 800370a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800370e:	e003      	b.n	8003718 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 8272 	beq.w	8003c0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	4798      	blx	r3
 8003732:	e26c      	b.n	8003c0e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a43      	ldr	r2, [pc, #268]	@ (8003848 <HAL_DMA_IRQHandler+0xa48>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d022      	beq.n	8003784 <HAL_DMA_IRQHandler+0x984>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a42      	ldr	r2, [pc, #264]	@ (800384c <HAL_DMA_IRQHandler+0xa4c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d01d      	beq.n	8003784 <HAL_DMA_IRQHandler+0x984>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a40      	ldr	r2, [pc, #256]	@ (8003850 <HAL_DMA_IRQHandler+0xa50>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d018      	beq.n	8003784 <HAL_DMA_IRQHandler+0x984>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a3f      	ldr	r2, [pc, #252]	@ (8003854 <HAL_DMA_IRQHandler+0xa54>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d013      	beq.n	8003784 <HAL_DMA_IRQHandler+0x984>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a3d      	ldr	r2, [pc, #244]	@ (8003858 <HAL_DMA_IRQHandler+0xa58>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00e      	beq.n	8003784 <HAL_DMA_IRQHandler+0x984>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a3c      	ldr	r2, [pc, #240]	@ (800385c <HAL_DMA_IRQHandler+0xa5c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d009      	beq.n	8003784 <HAL_DMA_IRQHandler+0x984>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a3a      	ldr	r2, [pc, #232]	@ (8003860 <HAL_DMA_IRQHandler+0xa60>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d004      	beq.n	8003784 <HAL_DMA_IRQHandler+0x984>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a39      	ldr	r2, [pc, #228]	@ (8003864 <HAL_DMA_IRQHandler+0xa64>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d101      	bne.n	8003788 <HAL_DMA_IRQHandler+0x988>
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <HAL_DMA_IRQHandler+0x98a>
 8003788:	2300      	movs	r3, #0
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 823f 	beq.w	8003c0e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	2204      	movs	r2, #4
 80037a2:	409a      	lsls	r2, r3
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80cd 	beq.w	8003948 <HAL_DMA_IRQHandler+0xb48>
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80c7 	beq.w	8003948 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	2204      	movs	r2, #4
 80037c4:	409a      	lsls	r2, r3
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d049      	beq.n	8003868 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 8210 	beq.w	8003c08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037f0:	e20a      	b.n	8003c08 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 8206 	beq.w	8003c08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003804:	e200      	b.n	8003c08 <HAL_DMA_IRQHandler+0xe08>
 8003806:	bf00      	nop
 8003808:	40020010 	.word	0x40020010
 800380c:	40020028 	.word	0x40020028
 8003810:	40020040 	.word	0x40020040
 8003814:	40020058 	.word	0x40020058
 8003818:	40020070 	.word	0x40020070
 800381c:	40020088 	.word	0x40020088
 8003820:	400200a0 	.word	0x400200a0
 8003824:	400200b8 	.word	0x400200b8
 8003828:	40020410 	.word	0x40020410
 800382c:	40020428 	.word	0x40020428
 8003830:	40020440 	.word	0x40020440
 8003834:	40020458 	.word	0x40020458
 8003838:	40020470 	.word	0x40020470
 800383c:	40020488 	.word	0x40020488
 8003840:	400204a0 	.word	0x400204a0
 8003844:	400204b8 	.word	0x400204b8
 8003848:	58025408 	.word	0x58025408
 800384c:	5802541c 	.word	0x5802541c
 8003850:	58025430 	.word	0x58025430
 8003854:	58025444 	.word	0x58025444
 8003858:	58025458 	.word	0x58025458
 800385c:	5802546c 	.word	0x5802546c
 8003860:	58025480 	.word	0x58025480
 8003864:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b00      	cmp	r3, #0
 8003870:	d160      	bne.n	8003934 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a7f      	ldr	r2, [pc, #508]	@ (8003a74 <HAL_DMA_IRQHandler+0xc74>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d04a      	beq.n	8003912 <HAL_DMA_IRQHandler+0xb12>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a7d      	ldr	r2, [pc, #500]	@ (8003a78 <HAL_DMA_IRQHandler+0xc78>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d045      	beq.n	8003912 <HAL_DMA_IRQHandler+0xb12>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a7c      	ldr	r2, [pc, #496]	@ (8003a7c <HAL_DMA_IRQHandler+0xc7c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d040      	beq.n	8003912 <HAL_DMA_IRQHandler+0xb12>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a7a      	ldr	r2, [pc, #488]	@ (8003a80 <HAL_DMA_IRQHandler+0xc80>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d03b      	beq.n	8003912 <HAL_DMA_IRQHandler+0xb12>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a79      	ldr	r2, [pc, #484]	@ (8003a84 <HAL_DMA_IRQHandler+0xc84>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d036      	beq.n	8003912 <HAL_DMA_IRQHandler+0xb12>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a77      	ldr	r2, [pc, #476]	@ (8003a88 <HAL_DMA_IRQHandler+0xc88>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d031      	beq.n	8003912 <HAL_DMA_IRQHandler+0xb12>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a76      	ldr	r2, [pc, #472]	@ (8003a8c <HAL_DMA_IRQHandler+0xc8c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d02c      	beq.n	8003912 <HAL_DMA_IRQHandler+0xb12>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a74      	ldr	r2, [pc, #464]	@ (8003a90 <HAL_DMA_IRQHandler+0xc90>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d027      	beq.n	8003912 <HAL_DMA_IRQHandler+0xb12>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a73      	ldr	r2, [pc, #460]	@ (8003a94 <HAL_DMA_IRQHandler+0xc94>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d022      	beq.n	8003912 <HAL_DMA_IRQHandler+0xb12>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a71      	ldr	r2, [pc, #452]	@ (8003a98 <HAL_DMA_IRQHandler+0xc98>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d01d      	beq.n	8003912 <HAL_DMA_IRQHandler+0xb12>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a70      	ldr	r2, [pc, #448]	@ (8003a9c <HAL_DMA_IRQHandler+0xc9c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d018      	beq.n	8003912 <HAL_DMA_IRQHandler+0xb12>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a6e      	ldr	r2, [pc, #440]	@ (8003aa0 <HAL_DMA_IRQHandler+0xca0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d013      	beq.n	8003912 <HAL_DMA_IRQHandler+0xb12>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a6d      	ldr	r2, [pc, #436]	@ (8003aa4 <HAL_DMA_IRQHandler+0xca4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d00e      	beq.n	8003912 <HAL_DMA_IRQHandler+0xb12>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a6b      	ldr	r2, [pc, #428]	@ (8003aa8 <HAL_DMA_IRQHandler+0xca8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d009      	beq.n	8003912 <HAL_DMA_IRQHandler+0xb12>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a6a      	ldr	r2, [pc, #424]	@ (8003aac <HAL_DMA_IRQHandler+0xcac>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d004      	beq.n	8003912 <HAL_DMA_IRQHandler+0xb12>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a68      	ldr	r2, [pc, #416]	@ (8003ab0 <HAL_DMA_IRQHandler+0xcb0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d108      	bne.n	8003924 <HAL_DMA_IRQHandler+0xb24>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0208 	bic.w	r2, r2, #8
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	e007      	b.n	8003934 <HAL_DMA_IRQHandler+0xb34>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0204 	bic.w	r2, r2, #4
 8003932:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8165 	beq.w	8003c08 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003946:	e15f      	b.n	8003c08 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	2202      	movs	r2, #2
 8003952:	409a      	lsls	r2, r3
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	4013      	ands	r3, r2
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 80c5 	beq.w	8003ae8 <HAL_DMA_IRQHandler+0xce8>
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80bf 	beq.w	8003ae8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396e:	f003 031f 	and.w	r3, r3, #31
 8003972:	2202      	movs	r2, #2
 8003974:	409a      	lsls	r2, r3
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d018      	beq.n	80039b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d109      	bne.n	80039a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 813a 	beq.w	8003c0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039a0:	e134      	b.n	8003c0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 8130 	beq.w	8003c0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039b4:	e12a      	b.n	8003c0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f040 8089 	bne.w	8003ad4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003a74 <HAL_DMA_IRQHandler+0xc74>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d04a      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xc62>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a29      	ldr	r2, [pc, #164]	@ (8003a78 <HAL_DMA_IRQHandler+0xc78>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d045      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xc62>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a28      	ldr	r2, [pc, #160]	@ (8003a7c <HAL_DMA_IRQHandler+0xc7c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d040      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xc62>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a26      	ldr	r2, [pc, #152]	@ (8003a80 <HAL_DMA_IRQHandler+0xc80>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d03b      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xc62>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a25      	ldr	r2, [pc, #148]	@ (8003a84 <HAL_DMA_IRQHandler+0xc84>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d036      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xc62>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a23      	ldr	r2, [pc, #140]	@ (8003a88 <HAL_DMA_IRQHandler+0xc88>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d031      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xc62>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a22      	ldr	r2, [pc, #136]	@ (8003a8c <HAL_DMA_IRQHandler+0xc8c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d02c      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xc62>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a20      	ldr	r2, [pc, #128]	@ (8003a90 <HAL_DMA_IRQHandler+0xc90>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d027      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xc62>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1f      	ldr	r2, [pc, #124]	@ (8003a94 <HAL_DMA_IRQHandler+0xc94>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d022      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xc62>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1d      	ldr	r2, [pc, #116]	@ (8003a98 <HAL_DMA_IRQHandler+0xc98>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d01d      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xc62>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8003a9c <HAL_DMA_IRQHandler+0xc9c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d018      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xc62>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa0 <HAL_DMA_IRQHandler+0xca0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d013      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xc62>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a19      	ldr	r2, [pc, #100]	@ (8003aa4 <HAL_DMA_IRQHandler+0xca4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d00e      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xc62>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a17      	ldr	r2, [pc, #92]	@ (8003aa8 <HAL_DMA_IRQHandler+0xca8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d009      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xc62>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a16      	ldr	r2, [pc, #88]	@ (8003aac <HAL_DMA_IRQHandler+0xcac>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d004      	beq.n	8003a62 <HAL_DMA_IRQHandler+0xc62>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a14      	ldr	r2, [pc, #80]	@ (8003ab0 <HAL_DMA_IRQHandler+0xcb0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d128      	bne.n	8003ab4 <HAL_DMA_IRQHandler+0xcb4>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0214 	bic.w	r2, r2, #20
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e027      	b.n	8003ac4 <HAL_DMA_IRQHandler+0xcc4>
 8003a74:	40020010 	.word	0x40020010
 8003a78:	40020028 	.word	0x40020028
 8003a7c:	40020040 	.word	0x40020040
 8003a80:	40020058 	.word	0x40020058
 8003a84:	40020070 	.word	0x40020070
 8003a88:	40020088 	.word	0x40020088
 8003a8c:	400200a0 	.word	0x400200a0
 8003a90:	400200b8 	.word	0x400200b8
 8003a94:	40020410 	.word	0x40020410
 8003a98:	40020428 	.word	0x40020428
 8003a9c:	40020440 	.word	0x40020440
 8003aa0:	40020458 	.word	0x40020458
 8003aa4:	40020470 	.word	0x40020470
 8003aa8:	40020488 	.word	0x40020488
 8003aac:	400204a0 	.word	0x400204a0
 8003ab0:	400204b8 	.word	0x400204b8
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 020a 	bic.w	r2, r2, #10
 8003ac2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8097 	beq.w	8003c0c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ae6:	e091      	b.n	8003c0c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	2208      	movs	r2, #8
 8003af2:	409a      	lsls	r2, r3
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 8088 	beq.w	8003c0e <HAL_DMA_IRQHandler+0xe0e>
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 8082 	beq.w	8003c0e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a41      	ldr	r2, [pc, #260]	@ (8003c14 <HAL_DMA_IRQHandler+0xe14>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d04a      	beq.n	8003baa <HAL_DMA_IRQHandler+0xdaa>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a3f      	ldr	r2, [pc, #252]	@ (8003c18 <HAL_DMA_IRQHandler+0xe18>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d045      	beq.n	8003baa <HAL_DMA_IRQHandler+0xdaa>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a3e      	ldr	r2, [pc, #248]	@ (8003c1c <HAL_DMA_IRQHandler+0xe1c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d040      	beq.n	8003baa <HAL_DMA_IRQHandler+0xdaa>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a3c      	ldr	r2, [pc, #240]	@ (8003c20 <HAL_DMA_IRQHandler+0xe20>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d03b      	beq.n	8003baa <HAL_DMA_IRQHandler+0xdaa>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a3b      	ldr	r2, [pc, #236]	@ (8003c24 <HAL_DMA_IRQHandler+0xe24>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d036      	beq.n	8003baa <HAL_DMA_IRQHandler+0xdaa>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a39      	ldr	r2, [pc, #228]	@ (8003c28 <HAL_DMA_IRQHandler+0xe28>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d031      	beq.n	8003baa <HAL_DMA_IRQHandler+0xdaa>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a38      	ldr	r2, [pc, #224]	@ (8003c2c <HAL_DMA_IRQHandler+0xe2c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d02c      	beq.n	8003baa <HAL_DMA_IRQHandler+0xdaa>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a36      	ldr	r2, [pc, #216]	@ (8003c30 <HAL_DMA_IRQHandler+0xe30>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d027      	beq.n	8003baa <HAL_DMA_IRQHandler+0xdaa>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a35      	ldr	r2, [pc, #212]	@ (8003c34 <HAL_DMA_IRQHandler+0xe34>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d022      	beq.n	8003baa <HAL_DMA_IRQHandler+0xdaa>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a33      	ldr	r2, [pc, #204]	@ (8003c38 <HAL_DMA_IRQHandler+0xe38>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01d      	beq.n	8003baa <HAL_DMA_IRQHandler+0xdaa>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a32      	ldr	r2, [pc, #200]	@ (8003c3c <HAL_DMA_IRQHandler+0xe3c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d018      	beq.n	8003baa <HAL_DMA_IRQHandler+0xdaa>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a30      	ldr	r2, [pc, #192]	@ (8003c40 <HAL_DMA_IRQHandler+0xe40>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <HAL_DMA_IRQHandler+0xdaa>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a2f      	ldr	r2, [pc, #188]	@ (8003c44 <HAL_DMA_IRQHandler+0xe44>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00e      	beq.n	8003baa <HAL_DMA_IRQHandler+0xdaa>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a2d      	ldr	r2, [pc, #180]	@ (8003c48 <HAL_DMA_IRQHandler+0xe48>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d009      	beq.n	8003baa <HAL_DMA_IRQHandler+0xdaa>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a2c      	ldr	r2, [pc, #176]	@ (8003c4c <HAL_DMA_IRQHandler+0xe4c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d004      	beq.n	8003baa <HAL_DMA_IRQHandler+0xdaa>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a2a      	ldr	r2, [pc, #168]	@ (8003c50 <HAL_DMA_IRQHandler+0xe50>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d108      	bne.n	8003bbc <HAL_DMA_IRQHandler+0xdbc>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 021c 	bic.w	r2, r2, #28
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e007      	b.n	8003bcc <HAL_DMA_IRQHandler+0xdcc>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 020e 	bic.w	r2, r2, #14
 8003bca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd0:	f003 031f 	and.w	r3, r3, #31
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	409a      	lsls	r2, r3
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d009      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	4798      	blx	r3
 8003c02:	e004      	b.n	8003c0e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003c04:	bf00      	nop
 8003c06:	e002      	b.n	8003c0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c08:	bf00      	nop
 8003c0a:	e000      	b.n	8003c0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c0c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c0e:	3728      	adds	r7, #40	@ 0x28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40020010 	.word	0x40020010
 8003c18:	40020028 	.word	0x40020028
 8003c1c:	40020040 	.word	0x40020040
 8003c20:	40020058 	.word	0x40020058
 8003c24:	40020070 	.word	0x40020070
 8003c28:	40020088 	.word	0x40020088
 8003c2c:	400200a0 	.word	0x400200a0
 8003c30:	400200b8 	.word	0x400200b8
 8003c34:	40020410 	.word	0x40020410
 8003c38:	40020428 	.word	0x40020428
 8003c3c:	40020440 	.word	0x40020440
 8003c40:	40020458 	.word	0x40020458
 8003c44:	40020470 	.word	0x40020470
 8003c48:	40020488 	.word	0x40020488
 8003c4c:	400204a0 	.word	0x400204a0
 8003c50:	400204b8 	.word	0x400204b8

08003c54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a42      	ldr	r2, [pc, #264]	@ (8003d6c <DMA_CalcBaseAndBitshift+0x118>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d04a      	beq.n	8003cfc <DMA_CalcBaseAndBitshift+0xa8>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a41      	ldr	r2, [pc, #260]	@ (8003d70 <DMA_CalcBaseAndBitshift+0x11c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d045      	beq.n	8003cfc <DMA_CalcBaseAndBitshift+0xa8>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a3f      	ldr	r2, [pc, #252]	@ (8003d74 <DMA_CalcBaseAndBitshift+0x120>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d040      	beq.n	8003cfc <DMA_CalcBaseAndBitshift+0xa8>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a3e      	ldr	r2, [pc, #248]	@ (8003d78 <DMA_CalcBaseAndBitshift+0x124>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d03b      	beq.n	8003cfc <DMA_CalcBaseAndBitshift+0xa8>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a3c      	ldr	r2, [pc, #240]	@ (8003d7c <DMA_CalcBaseAndBitshift+0x128>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d036      	beq.n	8003cfc <DMA_CalcBaseAndBitshift+0xa8>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a3b      	ldr	r2, [pc, #236]	@ (8003d80 <DMA_CalcBaseAndBitshift+0x12c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d031      	beq.n	8003cfc <DMA_CalcBaseAndBitshift+0xa8>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a39      	ldr	r2, [pc, #228]	@ (8003d84 <DMA_CalcBaseAndBitshift+0x130>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d02c      	beq.n	8003cfc <DMA_CalcBaseAndBitshift+0xa8>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a38      	ldr	r2, [pc, #224]	@ (8003d88 <DMA_CalcBaseAndBitshift+0x134>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d027      	beq.n	8003cfc <DMA_CalcBaseAndBitshift+0xa8>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a36      	ldr	r2, [pc, #216]	@ (8003d8c <DMA_CalcBaseAndBitshift+0x138>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d022      	beq.n	8003cfc <DMA_CalcBaseAndBitshift+0xa8>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a35      	ldr	r2, [pc, #212]	@ (8003d90 <DMA_CalcBaseAndBitshift+0x13c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d01d      	beq.n	8003cfc <DMA_CalcBaseAndBitshift+0xa8>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a33      	ldr	r2, [pc, #204]	@ (8003d94 <DMA_CalcBaseAndBitshift+0x140>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d018      	beq.n	8003cfc <DMA_CalcBaseAndBitshift+0xa8>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a32      	ldr	r2, [pc, #200]	@ (8003d98 <DMA_CalcBaseAndBitshift+0x144>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d013      	beq.n	8003cfc <DMA_CalcBaseAndBitshift+0xa8>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a30      	ldr	r2, [pc, #192]	@ (8003d9c <DMA_CalcBaseAndBitshift+0x148>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00e      	beq.n	8003cfc <DMA_CalcBaseAndBitshift+0xa8>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a2f      	ldr	r2, [pc, #188]	@ (8003da0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d009      	beq.n	8003cfc <DMA_CalcBaseAndBitshift+0xa8>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a2d      	ldr	r2, [pc, #180]	@ (8003da4 <DMA_CalcBaseAndBitshift+0x150>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d004      	beq.n	8003cfc <DMA_CalcBaseAndBitshift+0xa8>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8003da8 <DMA_CalcBaseAndBitshift+0x154>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d101      	bne.n	8003d00 <DMA_CalcBaseAndBitshift+0xac>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <DMA_CalcBaseAndBitshift+0xae>
 8003d00:	2300      	movs	r3, #0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d024      	beq.n	8003d50 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	3b10      	subs	r3, #16
 8003d0e:	4a27      	ldr	r2, [pc, #156]	@ (8003dac <DMA_CalcBaseAndBitshift+0x158>)
 8003d10:	fba2 2303 	umull	r2, r3, r2, r3
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	4a24      	ldr	r2, [pc, #144]	@ (8003db0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003d20:	5cd3      	ldrb	r3, [r2, r3]
 8003d22:	461a      	mov	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d908      	bls.n	8003d40 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	4b1f      	ldr	r3, [pc, #124]	@ (8003db4 <DMA_CalcBaseAndBitshift+0x160>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	1d1a      	adds	r2, r3, #4
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d3e:	e00d      	b.n	8003d5c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	4b1b      	ldr	r3, [pc, #108]	@ (8003db4 <DMA_CalcBaseAndBitshift+0x160>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d4e:	e005      	b.n	8003d5c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	40020010 	.word	0x40020010
 8003d70:	40020028 	.word	0x40020028
 8003d74:	40020040 	.word	0x40020040
 8003d78:	40020058 	.word	0x40020058
 8003d7c:	40020070 	.word	0x40020070
 8003d80:	40020088 	.word	0x40020088
 8003d84:	400200a0 	.word	0x400200a0
 8003d88:	400200b8 	.word	0x400200b8
 8003d8c:	40020410 	.word	0x40020410
 8003d90:	40020428 	.word	0x40020428
 8003d94:	40020440 	.word	0x40020440
 8003d98:	40020458 	.word	0x40020458
 8003d9c:	40020470 	.word	0x40020470
 8003da0:	40020488 	.word	0x40020488
 8003da4:	400204a0 	.word	0x400204a0
 8003da8:	400204b8 	.word	0x400204b8
 8003dac:	aaaaaaab 	.word	0xaaaaaaab
 8003db0:	080093ec 	.word	0x080093ec
 8003db4:	fffffc00 	.word	0xfffffc00

08003db8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d120      	bne.n	8003e0e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d858      	bhi.n	8003e86 <DMA_CheckFifoParam+0xce>
 8003dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ddc <DMA_CheckFifoParam+0x24>)
 8003dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dda:	bf00      	nop
 8003ddc:	08003ded 	.word	0x08003ded
 8003de0:	08003dff 	.word	0x08003dff
 8003de4:	08003ded 	.word	0x08003ded
 8003de8:	08003e87 	.word	0x08003e87
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d048      	beq.n	8003e8a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dfc:	e045      	b.n	8003e8a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e06:	d142      	bne.n	8003e8e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e0c:	e03f      	b.n	8003e8e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e16:	d123      	bne.n	8003e60 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d838      	bhi.n	8003e92 <DMA_CheckFifoParam+0xda>
 8003e20:	a201      	add	r2, pc, #4	@ (adr r2, 8003e28 <DMA_CheckFifoParam+0x70>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003e39 	.word	0x08003e39
 8003e2c:	08003e3f 	.word	0x08003e3f
 8003e30:	08003e39 	.word	0x08003e39
 8003e34:	08003e51 	.word	0x08003e51
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	73fb      	strb	r3, [r7, #15]
        break;
 8003e3c:	e030      	b.n	8003ea0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d025      	beq.n	8003e96 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e4e:	e022      	b.n	8003e96 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e58:	d11f      	bne.n	8003e9a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e5e:	e01c      	b.n	8003e9a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d902      	bls.n	8003e6e <DMA_CheckFifoParam+0xb6>
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d003      	beq.n	8003e74 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003e6c:	e018      	b.n	8003ea0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	73fb      	strb	r3, [r7, #15]
        break;
 8003e72:	e015      	b.n	8003ea0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00e      	beq.n	8003e9e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	73fb      	strb	r3, [r7, #15]
    break;
 8003e84:	e00b      	b.n	8003e9e <DMA_CheckFifoParam+0xe6>
        break;
 8003e86:	bf00      	nop
 8003e88:	e00a      	b.n	8003ea0 <DMA_CheckFifoParam+0xe8>
        break;
 8003e8a:	bf00      	nop
 8003e8c:	e008      	b.n	8003ea0 <DMA_CheckFifoParam+0xe8>
        break;
 8003e8e:	bf00      	nop
 8003e90:	e006      	b.n	8003ea0 <DMA_CheckFifoParam+0xe8>
        break;
 8003e92:	bf00      	nop
 8003e94:	e004      	b.n	8003ea0 <DMA_CheckFifoParam+0xe8>
        break;
 8003e96:	bf00      	nop
 8003e98:	e002      	b.n	8003ea0 <DMA_CheckFifoParam+0xe8>
        break;
 8003e9a:	bf00      	nop
 8003e9c:	e000      	b.n	8003ea0 <DMA_CheckFifoParam+0xe8>
    break;
 8003e9e:	bf00      	nop
    }
  }

  return status;
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop

08003eb0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a38      	ldr	r2, [pc, #224]	@ (8003fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d022      	beq.n	8003f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a36      	ldr	r2, [pc, #216]	@ (8003fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d01d      	beq.n	8003f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a35      	ldr	r2, [pc, #212]	@ (8003fac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d018      	beq.n	8003f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a33      	ldr	r2, [pc, #204]	@ (8003fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a32      	ldr	r2, [pc, #200]	@ (8003fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d00e      	beq.n	8003f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a30      	ldr	r2, [pc, #192]	@ (8003fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d009      	beq.n	8003f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a2f      	ldr	r2, [pc, #188]	@ (8003fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d004      	beq.n	8003f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a2d      	ldr	r2, [pc, #180]	@ (8003fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d101      	bne.n	8003f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003f12:	2300      	movs	r3, #0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d01a      	beq.n	8003f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	3b08      	subs	r3, #8
 8003f20:	4a28      	ldr	r2, [pc, #160]	@ (8003fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003f22:	fba2 2303 	umull	r2, r3, r2, r3
 8003f26:	091b      	lsrs	r3, r3, #4
 8003f28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4b26      	ldr	r3, [pc, #152]	@ (8003fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	461a      	mov	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a24      	ldr	r2, [pc, #144]	@ (8003fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003f3c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	2201      	movs	r2, #1
 8003f46:	409a      	lsls	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003f4c:	e024      	b.n	8003f98 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	3b10      	subs	r3, #16
 8003f56:	4a1e      	ldr	r2, [pc, #120]	@ (8003fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003f58:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4a1c      	ldr	r2, [pc, #112]	@ (8003fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d806      	bhi.n	8003f76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8003fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d902      	bls.n	8003f76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	3308      	adds	r3, #8
 8003f74:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4b18      	ldr	r3, [pc, #96]	@ (8003fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003f7a:	4413      	add	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	461a      	mov	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a16      	ldr	r2, [pc, #88]	@ (8003fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003f88:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f003 031f 	and.w	r3, r3, #31
 8003f90:	2201      	movs	r2, #1
 8003f92:	409a      	lsls	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f98:	bf00      	nop
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	58025408 	.word	0x58025408
 8003fa8:	5802541c 	.word	0x5802541c
 8003fac:	58025430 	.word	0x58025430
 8003fb0:	58025444 	.word	0x58025444
 8003fb4:	58025458 	.word	0x58025458
 8003fb8:	5802546c 	.word	0x5802546c
 8003fbc:	58025480 	.word	0x58025480
 8003fc0:	58025494 	.word	0x58025494
 8003fc4:	cccccccd 	.word	0xcccccccd
 8003fc8:	16009600 	.word	0x16009600
 8003fcc:	58025880 	.word	0x58025880
 8003fd0:	aaaaaaab 	.word	0xaaaaaaab
 8003fd4:	400204b8 	.word	0x400204b8
 8003fd8:	4002040f 	.word	0x4002040f
 8003fdc:	10008200 	.word	0x10008200
 8003fe0:	40020880 	.word	0x40020880

08003fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d04a      	beq.n	8004090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d847      	bhi.n	8004090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a25      	ldr	r2, [pc, #148]	@ (800409c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d022      	beq.n	8004050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a24      	ldr	r2, [pc, #144]	@ (80040a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d01d      	beq.n	8004050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a22      	ldr	r2, [pc, #136]	@ (80040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d018      	beq.n	8004050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a21      	ldr	r2, [pc, #132]	@ (80040a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d013      	beq.n	8004050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a1f      	ldr	r2, [pc, #124]	@ (80040ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00e      	beq.n	8004050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1e      	ldr	r2, [pc, #120]	@ (80040b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d009      	beq.n	8004050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a1c      	ldr	r2, [pc, #112]	@ (80040b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d004      	beq.n	8004050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1b      	ldr	r2, [pc, #108]	@ (80040b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d101      	bne.n	8004054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004054:	2300      	movs	r3, #0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4b17      	ldr	r3, [pc, #92]	@ (80040bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	461a      	mov	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a15      	ldr	r2, [pc, #84]	@ (80040c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800406c:	671a      	str	r2, [r3, #112]	@ 0x70
 800406e:	e009      	b.n	8004084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4b14      	ldr	r3, [pc, #80]	@ (80040c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	461a      	mov	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a11      	ldr	r2, [pc, #68]	@ (80040c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004082:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3b01      	subs	r3, #1
 8004088:	2201      	movs	r2, #1
 800408a:	409a      	lsls	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004090:	bf00      	nop
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	58025408 	.word	0x58025408
 80040a0:	5802541c 	.word	0x5802541c
 80040a4:	58025430 	.word	0x58025430
 80040a8:	58025444 	.word	0x58025444
 80040ac:	58025458 	.word	0x58025458
 80040b0:	5802546c 	.word	0x5802546c
 80040b4:	58025480 	.word	0x58025480
 80040b8:	58025494 	.word	0x58025494
 80040bc:	1600963f 	.word	0x1600963f
 80040c0:	58025940 	.word	0x58025940
 80040c4:	1000823f 	.word	0x1000823f
 80040c8:	40020940 	.word	0x40020940

080040cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b089      	sub	sp, #36	@ 0x24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80040da:	4b89      	ldr	r3, [pc, #548]	@ (8004300 <HAL_GPIO_Init+0x234>)
 80040dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040de:	e194      	b.n	800440a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	2101      	movs	r1, #1
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ec:	4013      	ands	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 8186 	beq.w	8004404 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	2b01      	cmp	r3, #1
 8004102:	d005      	beq.n	8004110 <HAL_GPIO_Init+0x44>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f003 0303 	and.w	r3, r3, #3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d130      	bne.n	8004172 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	2203      	movs	r2, #3
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	43db      	mvns	r3, r3
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4013      	ands	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4313      	orrs	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004146:	2201      	movs	r2, #1
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43db      	mvns	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	091b      	lsrs	r3, r3, #4
 800415c:	f003 0201 	and.w	r2, r3, #1
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4313      	orrs	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b03      	cmp	r3, #3
 800417c:	d017      	beq.n	80041ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	2203      	movs	r2, #3
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4013      	ands	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d123      	bne.n	8004202 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	08da      	lsrs	r2, r3, #3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3208      	adds	r2, #8
 80041c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	220f      	movs	r2, #15
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	43db      	mvns	r3, r3
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	4013      	ands	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	08da      	lsrs	r2, r3, #3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3208      	adds	r2, #8
 80041fc:	69b9      	ldr	r1, [r7, #24]
 80041fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	2203      	movs	r2, #3
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	43db      	mvns	r3, r3
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	4013      	ands	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f003 0203 	and.w	r2, r3, #3
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4313      	orrs	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 80e0 	beq.w	8004404 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004244:	4b2f      	ldr	r3, [pc, #188]	@ (8004304 <HAL_GPIO_Init+0x238>)
 8004246:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800424a:	4a2e      	ldr	r2, [pc, #184]	@ (8004304 <HAL_GPIO_Init+0x238>)
 800424c:	f043 0302 	orr.w	r3, r3, #2
 8004250:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004254:	4b2b      	ldr	r3, [pc, #172]	@ (8004304 <HAL_GPIO_Init+0x238>)
 8004256:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004262:	4a29      	ldr	r2, [pc, #164]	@ (8004308 <HAL_GPIO_Init+0x23c>)
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	089b      	lsrs	r3, r3, #2
 8004268:	3302      	adds	r3, #2
 800426a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	220f      	movs	r2, #15
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43db      	mvns	r3, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	4013      	ands	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a20      	ldr	r2, [pc, #128]	@ (800430c <HAL_GPIO_Init+0x240>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d052      	beq.n	8004334 <HAL_GPIO_Init+0x268>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a1f      	ldr	r2, [pc, #124]	@ (8004310 <HAL_GPIO_Init+0x244>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d031      	beq.n	80042fa <HAL_GPIO_Init+0x22e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a1e      	ldr	r2, [pc, #120]	@ (8004314 <HAL_GPIO_Init+0x248>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d02b      	beq.n	80042f6 <HAL_GPIO_Init+0x22a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004318 <HAL_GPIO_Init+0x24c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d025      	beq.n	80042f2 <HAL_GPIO_Init+0x226>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a1c      	ldr	r2, [pc, #112]	@ (800431c <HAL_GPIO_Init+0x250>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d01f      	beq.n	80042ee <HAL_GPIO_Init+0x222>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004320 <HAL_GPIO_Init+0x254>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d019      	beq.n	80042ea <HAL_GPIO_Init+0x21e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004324 <HAL_GPIO_Init+0x258>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d013      	beq.n	80042e6 <HAL_GPIO_Init+0x21a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a19      	ldr	r2, [pc, #100]	@ (8004328 <HAL_GPIO_Init+0x25c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00d      	beq.n	80042e2 <HAL_GPIO_Init+0x216>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a18      	ldr	r2, [pc, #96]	@ (800432c <HAL_GPIO_Init+0x260>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d007      	beq.n	80042de <HAL_GPIO_Init+0x212>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a17      	ldr	r2, [pc, #92]	@ (8004330 <HAL_GPIO_Init+0x264>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d101      	bne.n	80042da <HAL_GPIO_Init+0x20e>
 80042d6:	2309      	movs	r3, #9
 80042d8:	e02d      	b.n	8004336 <HAL_GPIO_Init+0x26a>
 80042da:	230a      	movs	r3, #10
 80042dc:	e02b      	b.n	8004336 <HAL_GPIO_Init+0x26a>
 80042de:	2308      	movs	r3, #8
 80042e0:	e029      	b.n	8004336 <HAL_GPIO_Init+0x26a>
 80042e2:	2307      	movs	r3, #7
 80042e4:	e027      	b.n	8004336 <HAL_GPIO_Init+0x26a>
 80042e6:	2306      	movs	r3, #6
 80042e8:	e025      	b.n	8004336 <HAL_GPIO_Init+0x26a>
 80042ea:	2305      	movs	r3, #5
 80042ec:	e023      	b.n	8004336 <HAL_GPIO_Init+0x26a>
 80042ee:	2304      	movs	r3, #4
 80042f0:	e021      	b.n	8004336 <HAL_GPIO_Init+0x26a>
 80042f2:	2303      	movs	r3, #3
 80042f4:	e01f      	b.n	8004336 <HAL_GPIO_Init+0x26a>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e01d      	b.n	8004336 <HAL_GPIO_Init+0x26a>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e01b      	b.n	8004336 <HAL_GPIO_Init+0x26a>
 80042fe:	bf00      	nop
 8004300:	58000080 	.word	0x58000080
 8004304:	58024400 	.word	0x58024400
 8004308:	58000400 	.word	0x58000400
 800430c:	58020000 	.word	0x58020000
 8004310:	58020400 	.word	0x58020400
 8004314:	58020800 	.word	0x58020800
 8004318:	58020c00 	.word	0x58020c00
 800431c:	58021000 	.word	0x58021000
 8004320:	58021400 	.word	0x58021400
 8004324:	58021800 	.word	0x58021800
 8004328:	58021c00 	.word	0x58021c00
 800432c:	58022000 	.word	0x58022000
 8004330:	58022400 	.word	0x58022400
 8004334:	2300      	movs	r3, #0
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	f002 0203 	and.w	r2, r2, #3
 800433c:	0092      	lsls	r2, r2, #2
 800433e:	4093      	lsls	r3, r2
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4313      	orrs	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004346:	4938      	ldr	r1, [pc, #224]	@ (8004428 <HAL_GPIO_Init+0x35c>)
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	089b      	lsrs	r3, r3, #2
 800434c:	3302      	adds	r3, #2
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	43db      	mvns	r3, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4013      	ands	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800437a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	43db      	mvns	r3, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4013      	ands	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80043a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	43db      	mvns	r3, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4013      	ands	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	43db      	mvns	r3, r3
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4013      	ands	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	3301      	adds	r3, #1
 8004408:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	fa22 f303 	lsr.w	r3, r2, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	f47f ae63 	bne.w	80040e0 <HAL_GPIO_Init+0x14>
  }
}
 800441a:	bf00      	nop
 800441c:	bf00      	nop
 800441e:	3724      	adds	r7, #36	@ 0x24
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	58000400 	.word	0x58000400

0800442c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	807b      	strh	r3, [r7, #2]
 8004438:	4613      	mov	r3, r2
 800443a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800443c:	787b      	ldrb	r3, [r7, #1]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004442:	887a      	ldrh	r2, [r7, #2]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004448:	e003      	b.n	8004452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800444a:	887b      	ldrh	r3, [r7, #2]
 800444c:	041a      	lsls	r2, r3, #16
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	619a      	str	r2, [r3, #24]
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
	...

08004460 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004468:	4b19      	ldr	r3, [pc, #100]	@ (80044d0 <HAL_PWREx_ConfigSupply+0x70>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b04      	cmp	r3, #4
 8004472:	d00a      	beq.n	800448a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004474:	4b16      	ldr	r3, [pc, #88]	@ (80044d0 <HAL_PWREx_ConfigSupply+0x70>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	429a      	cmp	r2, r3
 8004480:	d001      	beq.n	8004486 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e01f      	b.n	80044c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	e01d      	b.n	80044c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800448a:	4b11      	ldr	r3, [pc, #68]	@ (80044d0 <HAL_PWREx_ConfigSupply+0x70>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f023 0207 	bic.w	r2, r3, #7
 8004492:	490f      	ldr	r1, [pc, #60]	@ (80044d0 <HAL_PWREx_ConfigSupply+0x70>)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4313      	orrs	r3, r2
 8004498:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800449a:	f7fd f881 	bl	80015a0 <HAL_GetTick>
 800449e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044a0:	e009      	b.n	80044b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80044a2:	f7fd f87d 	bl	80015a0 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044b0:	d901      	bls.n	80044b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e007      	b.n	80044c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044b6:	4b06      	ldr	r3, [pc, #24]	@ (80044d0 <HAL_PWREx_ConfigSupply+0x70>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044c2:	d1ee      	bne.n	80044a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	58024800 	.word	0x58024800

080044d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08c      	sub	sp, #48	@ 0x30
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d102      	bne.n	80044e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	f000 bc48 	b.w	8004d78 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8088 	beq.w	8004606 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044f6:	4b99      	ldr	r3, [pc, #612]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004500:	4b96      	ldr	r3, [pc, #600]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004504:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004508:	2b10      	cmp	r3, #16
 800450a:	d007      	beq.n	800451c <HAL_RCC_OscConfig+0x48>
 800450c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450e:	2b18      	cmp	r3, #24
 8004510:	d111      	bne.n	8004536 <HAL_RCC_OscConfig+0x62>
 8004512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004514:	f003 0303 	and.w	r3, r3, #3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d10c      	bne.n	8004536 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800451c:	4b8f      	ldr	r3, [pc, #572]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d06d      	beq.n	8004604 <HAL_RCC_OscConfig+0x130>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d169      	bne.n	8004604 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	f000 bc21 	b.w	8004d78 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800453e:	d106      	bne.n	800454e <HAL_RCC_OscConfig+0x7a>
 8004540:	4b86      	ldr	r3, [pc, #536]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a85      	ldr	r2, [pc, #532]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	e02e      	b.n	80045ac <HAL_RCC_OscConfig+0xd8>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10c      	bne.n	8004570 <HAL_RCC_OscConfig+0x9c>
 8004556:	4b81      	ldr	r3, [pc, #516]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a80      	ldr	r2, [pc, #512]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 800455c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	4b7e      	ldr	r3, [pc, #504]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a7d      	ldr	r2, [pc, #500]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004568:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	e01d      	b.n	80045ac <HAL_RCC_OscConfig+0xd8>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004578:	d10c      	bne.n	8004594 <HAL_RCC_OscConfig+0xc0>
 800457a:	4b78      	ldr	r3, [pc, #480]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a77      	ldr	r2, [pc, #476]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004580:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	4b75      	ldr	r3, [pc, #468]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a74      	ldr	r2, [pc, #464]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 800458c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	e00b      	b.n	80045ac <HAL_RCC_OscConfig+0xd8>
 8004594:	4b71      	ldr	r3, [pc, #452]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a70      	ldr	r2, [pc, #448]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 800459a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	4b6e      	ldr	r3, [pc, #440]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a6d      	ldr	r2, [pc, #436]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80045a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d013      	beq.n	80045dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7fc fff4 	bl	80015a0 <HAL_GetTick>
 80045b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045bc:	f7fc fff0 	bl	80015a0 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b64      	cmp	r3, #100	@ 0x64
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e3d4      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045ce:	4b63      	ldr	r3, [pc, #396]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0f0      	beq.n	80045bc <HAL_RCC_OscConfig+0xe8>
 80045da:	e014      	b.n	8004606 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045dc:	f7fc ffe0 	bl	80015a0 <HAL_GetTick>
 80045e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e4:	f7fc ffdc 	bl	80015a0 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b64      	cmp	r3, #100	@ 0x64
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e3c0      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045f6:	4b59      	ldr	r3, [pc, #356]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f0      	bne.n	80045e4 <HAL_RCC_OscConfig+0x110>
 8004602:	e000      	b.n	8004606 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 80ca 	beq.w	80047a8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004614:	4b51      	ldr	r3, [pc, #324]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800461c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800461e:	4b4f      	ldr	r3, [pc, #316]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004622:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <HAL_RCC_OscConfig+0x166>
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	2b18      	cmp	r3, #24
 800462e:	d156      	bne.n	80046de <HAL_RCC_OscConfig+0x20a>
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d151      	bne.n	80046de <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800463a:	4b48      	ldr	r3, [pc, #288]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <HAL_RCC_OscConfig+0x17e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e392      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004652:	4b42      	ldr	r3, [pc, #264]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 0219 	bic.w	r2, r3, #25
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	493f      	ldr	r1, [pc, #252]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004660:	4313      	orrs	r3, r2
 8004662:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004664:	f7fc ff9c 	bl	80015a0 <HAL_GetTick>
 8004668:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800466c:	f7fc ff98 	bl	80015a0 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e37c      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800467e:	4b37      	ldr	r3, [pc, #220]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468a:	f7fc ff95 	bl	80015b8 <HAL_GetREVID>
 800468e:	4603      	mov	r3, r0
 8004690:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004694:	4293      	cmp	r3, r2
 8004696:	d817      	bhi.n	80046c8 <HAL_RCC_OscConfig+0x1f4>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	2b40      	cmp	r3, #64	@ 0x40
 800469e:	d108      	bne.n	80046b2 <HAL_RCC_OscConfig+0x1de>
 80046a0:	4b2e      	ldr	r3, [pc, #184]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80046a8:	4a2c      	ldr	r2, [pc, #176]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80046aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046b0:	e07a      	b.n	80047a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b2:	4b2a      	ldr	r3, [pc, #168]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	031b      	lsls	r3, r3, #12
 80046c0:	4926      	ldr	r1, [pc, #152]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046c6:	e06f      	b.n	80047a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c8:	4b24      	ldr	r3, [pc, #144]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	061b      	lsls	r3, r3, #24
 80046d6:	4921      	ldr	r1, [pc, #132]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046dc:	e064      	b.n	80047a8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d047      	beq.n	8004776 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046e6:	4b1d      	ldr	r3, [pc, #116]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f023 0219 	bic.w	r2, r3, #25
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	491a      	ldr	r1, [pc, #104]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f8:	f7fc ff52 	bl	80015a0 <HAL_GetTick>
 80046fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004700:	f7fc ff4e 	bl	80015a0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e332      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004712:	4b12      	ldr	r3, [pc, #72]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471e:	f7fc ff4b 	bl	80015b8 <HAL_GetREVID>
 8004722:	4603      	mov	r3, r0
 8004724:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004728:	4293      	cmp	r3, r2
 800472a:	d819      	bhi.n	8004760 <HAL_RCC_OscConfig+0x28c>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	2b40      	cmp	r3, #64	@ 0x40
 8004732:	d108      	bne.n	8004746 <HAL_RCC_OscConfig+0x272>
 8004734:	4b09      	ldr	r3, [pc, #36]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800473c:	4a07      	ldr	r2, [pc, #28]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 800473e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004742:	6053      	str	r3, [r2, #4]
 8004744:	e030      	b.n	80047a8 <HAL_RCC_OscConfig+0x2d4>
 8004746:	4b05      	ldr	r3, [pc, #20]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	031b      	lsls	r3, r3, #12
 8004754:	4901      	ldr	r1, [pc, #4]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004756:	4313      	orrs	r3, r2
 8004758:	604b      	str	r3, [r1, #4]
 800475a:	e025      	b.n	80047a8 <HAL_RCC_OscConfig+0x2d4>
 800475c:	58024400 	.word	0x58024400
 8004760:	4b9a      	ldr	r3, [pc, #616]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	061b      	lsls	r3, r3, #24
 800476e:	4997      	ldr	r1, [pc, #604]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004770:	4313      	orrs	r3, r2
 8004772:	604b      	str	r3, [r1, #4]
 8004774:	e018      	b.n	80047a8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004776:	4b95      	ldr	r3, [pc, #596]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a94      	ldr	r2, [pc, #592]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 800477c:	f023 0301 	bic.w	r3, r3, #1
 8004780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004782:	f7fc ff0d 	bl	80015a0 <HAL_GetTick>
 8004786:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800478a:	f7fc ff09 	bl	80015a0 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e2ed      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800479c:	4b8b      	ldr	r3, [pc, #556]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f0      	bne.n	800478a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0310 	and.w	r3, r3, #16
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 80a9 	beq.w	8004908 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047b6:	4b85      	ldr	r3, [pc, #532]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047c0:	4b82      	ldr	r3, [pc, #520]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80047c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d007      	beq.n	80047dc <HAL_RCC_OscConfig+0x308>
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	2b18      	cmp	r3, #24
 80047d0:	d13a      	bne.n	8004848 <HAL_RCC_OscConfig+0x374>
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d135      	bne.n	8004848 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047dc:	4b7b      	ldr	r3, [pc, #492]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_OscConfig+0x320>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	2b80      	cmp	r3, #128	@ 0x80
 80047ee:	d001      	beq.n	80047f4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e2c1      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047f4:	f7fc fee0 	bl	80015b8 <HAL_GetREVID>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047fe:	4293      	cmp	r3, r2
 8004800:	d817      	bhi.n	8004832 <HAL_RCC_OscConfig+0x35e>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	2b20      	cmp	r3, #32
 8004808:	d108      	bne.n	800481c <HAL_RCC_OscConfig+0x348>
 800480a:	4b70      	ldr	r3, [pc, #448]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004812:	4a6e      	ldr	r2, [pc, #440]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004814:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004818:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800481a:	e075      	b.n	8004908 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800481c:	4b6b      	ldr	r3, [pc, #428]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	069b      	lsls	r3, r3, #26
 800482a:	4968      	ldr	r1, [pc, #416]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 800482c:	4313      	orrs	r3, r2
 800482e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004830:	e06a      	b.n	8004908 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004832:	4b66      	ldr	r3, [pc, #408]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	061b      	lsls	r3, r3, #24
 8004840:	4962      	ldr	r1, [pc, #392]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004842:	4313      	orrs	r3, r2
 8004844:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004846:	e05f      	b.n	8004908 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d042      	beq.n	80048d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004850:	4b5e      	ldr	r3, [pc, #376]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a5d      	ldr	r2, [pc, #372]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800485a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fc fea0 	bl	80015a0 <HAL_GetTick>
 8004860:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004864:	f7fc fe9c 	bl	80015a0 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e280      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004876:	4b55      	ldr	r3, [pc, #340]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0f0      	beq.n	8004864 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004882:	f7fc fe99 	bl	80015b8 <HAL_GetREVID>
 8004886:	4603      	mov	r3, r0
 8004888:	f241 0203 	movw	r2, #4099	@ 0x1003
 800488c:	4293      	cmp	r3, r2
 800488e:	d817      	bhi.n	80048c0 <HAL_RCC_OscConfig+0x3ec>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	2b20      	cmp	r3, #32
 8004896:	d108      	bne.n	80048aa <HAL_RCC_OscConfig+0x3d6>
 8004898:	4b4c      	ldr	r3, [pc, #304]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80048a0:	4a4a      	ldr	r2, [pc, #296]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80048a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048a6:	6053      	str	r3, [r2, #4]
 80048a8:	e02e      	b.n	8004908 <HAL_RCC_OscConfig+0x434>
 80048aa:	4b48      	ldr	r3, [pc, #288]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	069b      	lsls	r3, r3, #26
 80048b8:	4944      	ldr	r1, [pc, #272]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	604b      	str	r3, [r1, #4]
 80048be:	e023      	b.n	8004908 <HAL_RCC_OscConfig+0x434>
 80048c0:	4b42      	ldr	r3, [pc, #264]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	061b      	lsls	r3, r3, #24
 80048ce:	493f      	ldr	r1, [pc, #252]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60cb      	str	r3, [r1, #12]
 80048d4:	e018      	b.n	8004908 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80048d6:	4b3d      	ldr	r3, [pc, #244]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a3c      	ldr	r2, [pc, #240]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80048dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e2:	f7fc fe5d 	bl	80015a0 <HAL_GetTick>
 80048e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048ea:	f7fc fe59 	bl	80015a0 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e23d      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048fc:	4b33      	ldr	r3, [pc, #204]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1f0      	bne.n	80048ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d036      	beq.n	8004982 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d019      	beq.n	8004950 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800491c:	4b2b      	ldr	r3, [pc, #172]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 800491e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004920:	4a2a      	ldr	r2, [pc, #168]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004928:	f7fc fe3a 	bl	80015a0 <HAL_GetTick>
 800492c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004930:	f7fc fe36 	bl	80015a0 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e21a      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004942:	4b22      	ldr	r3, [pc, #136]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0f0      	beq.n	8004930 <HAL_RCC_OscConfig+0x45c>
 800494e:	e018      	b.n	8004982 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004950:	4b1e      	ldr	r3, [pc, #120]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004954:	4a1d      	ldr	r2, [pc, #116]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004956:	f023 0301 	bic.w	r3, r3, #1
 800495a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495c:	f7fc fe20 	bl	80015a0 <HAL_GetTick>
 8004960:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004964:	f7fc fe1c 	bl	80015a0 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e200      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004976:	4b15      	ldr	r3, [pc, #84]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d039      	beq.n	8004a02 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d01c      	beq.n	80049d0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004996:	4b0d      	ldr	r3, [pc, #52]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a0c      	ldr	r2, [pc, #48]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 800499c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80049a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049a2:	f7fc fdfd 	bl	80015a0 <HAL_GetTick>
 80049a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049aa:	f7fc fdf9 	bl	80015a0 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e1dd      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049bc:	4b03      	ldr	r3, [pc, #12]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f0      	beq.n	80049aa <HAL_RCC_OscConfig+0x4d6>
 80049c8:	e01b      	b.n	8004a02 <HAL_RCC_OscConfig+0x52e>
 80049ca:	bf00      	nop
 80049cc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049d0:	4b9b      	ldr	r3, [pc, #620]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a9a      	ldr	r2, [pc, #616]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 80049d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049dc:	f7fc fde0 	bl	80015a0 <HAL_GetTick>
 80049e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049e4:	f7fc fddc 	bl	80015a0 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e1c0      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049f6:	4b92      	ldr	r3, [pc, #584]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f0      	bne.n	80049e4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 8081 	beq.w	8004b12 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a10:	4b8c      	ldr	r3, [pc, #560]	@ (8004c44 <HAL_RCC_OscConfig+0x770>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a8b      	ldr	r2, [pc, #556]	@ (8004c44 <HAL_RCC_OscConfig+0x770>)
 8004a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a1c:	f7fc fdc0 	bl	80015a0 <HAL_GetTick>
 8004a20:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a24:	f7fc fdbc 	bl	80015a0 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	@ 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e1a0      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a36:	4b83      	ldr	r3, [pc, #524]	@ (8004c44 <HAL_RCC_OscConfig+0x770>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d106      	bne.n	8004a58 <HAL_RCC_OscConfig+0x584>
 8004a4a:	4b7d      	ldr	r3, [pc, #500]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a4e:	4a7c      	ldr	r2, [pc, #496]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a56:	e02d      	b.n	8004ab4 <HAL_RCC_OscConfig+0x5e0>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10c      	bne.n	8004a7a <HAL_RCC_OscConfig+0x5a6>
 8004a60:	4b77      	ldr	r3, [pc, #476]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a64:	4a76      	ldr	r2, [pc, #472]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a66:	f023 0301 	bic.w	r3, r3, #1
 8004a6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a6c:	4b74      	ldr	r3, [pc, #464]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a70:	4a73      	ldr	r2, [pc, #460]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a72:	f023 0304 	bic.w	r3, r3, #4
 8004a76:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a78:	e01c      	b.n	8004ab4 <HAL_RCC_OscConfig+0x5e0>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2b05      	cmp	r3, #5
 8004a80:	d10c      	bne.n	8004a9c <HAL_RCC_OscConfig+0x5c8>
 8004a82:	4b6f      	ldr	r3, [pc, #444]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a86:	4a6e      	ldr	r2, [pc, #440]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a88:	f043 0304 	orr.w	r3, r3, #4
 8004a8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a8e:	4b6c      	ldr	r3, [pc, #432]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a92:	4a6b      	ldr	r2, [pc, #428]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a94:	f043 0301 	orr.w	r3, r3, #1
 8004a98:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a9a:	e00b      	b.n	8004ab4 <HAL_RCC_OscConfig+0x5e0>
 8004a9c:	4b68      	ldr	r3, [pc, #416]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa0:	4a67      	ldr	r2, [pc, #412]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004aa2:	f023 0301 	bic.w	r3, r3, #1
 8004aa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aa8:	4b65      	ldr	r3, [pc, #404]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aac:	4a64      	ldr	r2, [pc, #400]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004aae:	f023 0304 	bic.w	r3, r3, #4
 8004ab2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d015      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abc:	f7fc fd70 	bl	80015a0 <HAL_GetTick>
 8004ac0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ac2:	e00a      	b.n	8004ada <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac4:	f7fc fd6c 	bl	80015a0 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e14e      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ada:	4b59      	ldr	r3, [pc, #356]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0ee      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x5f0>
 8004ae6:	e014      	b.n	8004b12 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae8:	f7fc fd5a 	bl	80015a0 <HAL_GetTick>
 8004aec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004aee:	e00a      	b.n	8004b06 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af0:	f7fc fd56 	bl	80015a0 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e138      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b06:	4b4e      	ldr	r3, [pc, #312]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1ee      	bne.n	8004af0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 812d 	beq.w	8004d76 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b1c:	4b48      	ldr	r3, [pc, #288]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b24:	2b18      	cmp	r3, #24
 8004b26:	f000 80bd 	beq.w	8004ca4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	f040 809e 	bne.w	8004c70 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b34:	4b42      	ldr	r3, [pc, #264]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a41      	ldr	r2, [pc, #260]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004b3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b40:	f7fc fd2e 	bl	80015a0 <HAL_GetTick>
 8004b44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b48:	f7fc fd2a 	bl	80015a0 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e10e      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b5a:	4b39      	ldr	r3, [pc, #228]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b66:	4b36      	ldr	r3, [pc, #216]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004b68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b6a:	4b37      	ldr	r3, [pc, #220]	@ (8004c48 <HAL_RCC_OscConfig+0x774>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b76:	0112      	lsls	r2, r2, #4
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	4931      	ldr	r1, [pc, #196]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b84:	3b01      	subs	r3, #1
 8004b86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	025b      	lsls	r3, r3, #9
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	041b      	lsls	r3, r3, #16
 8004b9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	061b      	lsls	r3, r3, #24
 8004bac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004bb0:	4923      	ldr	r1, [pc, #140]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004bb6:	4b22      	ldr	r3, [pc, #136]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bba:	4a21      	ldr	r2, [pc, #132]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004bc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bc6:	4b21      	ldr	r3, [pc, #132]	@ (8004c4c <HAL_RCC_OscConfig+0x778>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004bce:	00d2      	lsls	r2, r2, #3
 8004bd0:	491b      	ldr	r1, [pc, #108]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bda:	f023 020c 	bic.w	r2, r3, #12
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	4917      	ldr	r1, [pc, #92]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004be8:	4b15      	ldr	r3, [pc, #84]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bec:	f023 0202 	bic.w	r2, r3, #2
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf4:	4912      	ldr	r1, [pc, #72]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004bfa:	4b11      	ldr	r3, [pc, #68]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfe:	4a10      	ldr	r2, [pc, #64]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c06:	4b0e      	ldr	r3, [pc, #56]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c12:	4b0b      	ldr	r3, [pc, #44]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c16:	4a0a      	ldr	r2, [pc, #40]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004c1e:	4b08      	ldr	r3, [pc, #32]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c22:	4a07      	ldr	r2, [pc, #28]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c2a:	4b05      	ldr	r3, [pc, #20]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a04      	ldr	r2, [pc, #16]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004c30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c36:	f7fc fcb3 	bl	80015a0 <HAL_GetTick>
 8004c3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c3c:	e011      	b.n	8004c62 <HAL_RCC_OscConfig+0x78e>
 8004c3e:	bf00      	nop
 8004c40:	58024400 	.word	0x58024400
 8004c44:	58024800 	.word	0x58024800
 8004c48:	fffffc0c 	.word	0xfffffc0c
 8004c4c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c50:	f7fc fca6 	bl	80015a0 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e08a      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c62:	4b47      	ldr	r3, [pc, #284]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x77c>
 8004c6e:	e082      	b.n	8004d76 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c70:	4b43      	ldr	r3, [pc, #268]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a42      	ldr	r2, [pc, #264]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004c76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7c:	f7fc fc90 	bl	80015a0 <HAL_GetTick>
 8004c80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c84:	f7fc fc8c 	bl	80015a0 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e070      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c96:	4b3a      	ldr	r3, [pc, #232]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f0      	bne.n	8004c84 <HAL_RCC_OscConfig+0x7b0>
 8004ca2:	e068      	b.n	8004d76 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ca4:	4b36      	ldr	r3, [pc, #216]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004caa:	4b35      	ldr	r3, [pc, #212]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d031      	beq.n	8004d1c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f003 0203 	and.w	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d12a      	bne.n	8004d1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d122      	bne.n	8004d1c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d11a      	bne.n	8004d1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	0a5b      	lsrs	r3, r3, #9
 8004cea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d111      	bne.n	8004d1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	0c1b      	lsrs	r3, r3, #16
 8004cfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d04:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d108      	bne.n	8004d1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	0e1b      	lsrs	r3, r3, #24
 8004d0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d16:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e02b      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004d20:	4b17      	ldr	r3, [pc, #92]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d24:	08db      	lsrs	r3, r3, #3
 8004d26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d2a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d01f      	beq.n	8004d76 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004d36:	4b12      	ldr	r3, [pc, #72]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3a:	4a11      	ldr	r2, [pc, #68]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004d3c:	f023 0301 	bic.w	r3, r3, #1
 8004d40:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d42:	f7fc fc2d 	bl	80015a0 <HAL_GetTick>
 8004d46:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004d48:	bf00      	nop
 8004d4a:	f7fc fc29 	bl	80015a0 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d0f9      	beq.n	8004d4a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d56:	4b0a      	ldr	r3, [pc, #40]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004d58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d84 <HAL_RCC_OscConfig+0x8b0>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d62:	00d2      	lsls	r2, r2, #3
 8004d64:	4906      	ldr	r1, [pc, #24]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004d6a:	4b05      	ldr	r3, [pc, #20]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6e:	4a04      	ldr	r2, [pc, #16]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004d70:	f043 0301 	orr.w	r3, r3, #1
 8004d74:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3730      	adds	r7, #48	@ 0x30
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	58024400 	.word	0x58024400
 8004d84:	ffff0007 	.word	0xffff0007

08004d88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e19c      	b.n	80050d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d9c:	4b8a      	ldr	r3, [pc, #552]	@ (8004fc8 <HAL_RCC_ClockConfig+0x240>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d910      	bls.n	8004dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004daa:	4b87      	ldr	r3, [pc, #540]	@ (8004fc8 <HAL_RCC_ClockConfig+0x240>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f023 020f 	bic.w	r2, r3, #15
 8004db2:	4985      	ldr	r1, [pc, #532]	@ (8004fc8 <HAL_RCC_ClockConfig+0x240>)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dba:	4b83      	ldr	r3, [pc, #524]	@ (8004fc8 <HAL_RCC_ClockConfig+0x240>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e184      	b.n	80050d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d010      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	4b7b      	ldr	r3, [pc, #492]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d908      	bls.n	8004dfa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004de8:	4b78      	ldr	r3, [pc, #480]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	4975      	ldr	r1, [pc, #468]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d010      	beq.n	8004e28 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695a      	ldr	r2, [r3, #20]
 8004e0a:	4b70      	ldr	r3, [pc, #448]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d908      	bls.n	8004e28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e16:	4b6d      	ldr	r3, [pc, #436]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	496a      	ldr	r1, [pc, #424]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0310 	and.w	r3, r3, #16
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d010      	beq.n	8004e56 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699a      	ldr	r2, [r3, #24]
 8004e38:	4b64      	ldr	r3, [pc, #400]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d908      	bls.n	8004e56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e44:	4b61      	ldr	r3, [pc, #388]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	495e      	ldr	r1, [pc, #376]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d010      	beq.n	8004e84 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69da      	ldr	r2, [r3, #28]
 8004e66:	4b59      	ldr	r3, [pc, #356]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d908      	bls.n	8004e84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e72:	4b56      	ldr	r3, [pc, #344]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	4953      	ldr	r1, [pc, #332]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d010      	beq.n	8004eb2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	4b4d      	ldr	r3, [pc, #308]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d908      	bls.n	8004eb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ea0:	4b4a      	ldr	r3, [pc, #296]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	f023 020f 	bic.w	r2, r3, #15
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	4947      	ldr	r1, [pc, #284]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d055      	beq.n	8004f6a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ebe:	4b43      	ldr	r3, [pc, #268]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	4940      	ldr	r1, [pc, #256]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d107      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ed8:	4b3c      	ldr	r3, [pc, #240]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d121      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0f6      	b.n	80050d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d107      	bne.n	8004f00 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ef0:	4b36      	ldr	r3, [pc, #216]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d115      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e0ea      	b.n	80050d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d107      	bne.n	8004f18 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f08:	4b30      	ldr	r3, [pc, #192]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d109      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0de      	b.n	80050d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f18:	4b2c      	ldr	r3, [pc, #176]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e0d6      	b.n	80050d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f28:	4b28      	ldr	r3, [pc, #160]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f023 0207 	bic.w	r2, r3, #7
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4925      	ldr	r1, [pc, #148]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f3a:	f7fc fb31 	bl	80015a0 <HAL_GetTick>
 8004f3e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f40:	e00a      	b.n	8004f58 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f42:	f7fc fb2d 	bl	80015a0 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e0be      	b.n	80050d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f58:	4b1c      	ldr	r3, [pc, #112]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d1eb      	bne.n	8004f42 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d010      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	4b14      	ldr	r3, [pc, #80]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	f003 030f 	and.w	r3, r3, #15
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d208      	bcs.n	8004f98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f86:	4b11      	ldr	r3, [pc, #68]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f023 020f 	bic.w	r2, r3, #15
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	490e      	ldr	r1, [pc, #56]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f98:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc8 <HAL_RCC_ClockConfig+0x240>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d214      	bcs.n	8004fd0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa6:	4b08      	ldr	r3, [pc, #32]	@ (8004fc8 <HAL_RCC_ClockConfig+0x240>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f023 020f 	bic.w	r2, r3, #15
 8004fae:	4906      	ldr	r1, [pc, #24]	@ (8004fc8 <HAL_RCC_ClockConfig+0x240>)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb6:	4b04      	ldr	r3, [pc, #16]	@ (8004fc8 <HAL_RCC_ClockConfig+0x240>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d005      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e086      	b.n	80050d6 <HAL_RCC_ClockConfig+0x34e>
 8004fc8:	52002000 	.word	0x52002000
 8004fcc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d010      	beq.n	8004ffe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d208      	bcs.n	8004ffe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004fec:	4b3c      	ldr	r3, [pc, #240]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	4939      	ldr	r1, [pc, #228]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d010      	beq.n	800502c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695a      	ldr	r2, [r3, #20]
 800500e:	4b34      	ldr	r3, [pc, #208]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005016:	429a      	cmp	r2, r3
 8005018:	d208      	bcs.n	800502c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800501a:	4b31      	ldr	r3, [pc, #196]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	492e      	ldr	r1, [pc, #184]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 8005028:	4313      	orrs	r3, r2
 800502a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0310 	and.w	r3, r3, #16
 8005034:	2b00      	cmp	r3, #0
 8005036:	d010      	beq.n	800505a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699a      	ldr	r2, [r3, #24]
 800503c:	4b28      	ldr	r3, [pc, #160]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005044:	429a      	cmp	r2, r3
 8005046:	d208      	bcs.n	800505a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005048:	4b25      	ldr	r3, [pc, #148]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	4922      	ldr	r1, [pc, #136]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 8005056:	4313      	orrs	r3, r2
 8005058:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	d010      	beq.n	8005088 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69da      	ldr	r2, [r3, #28]
 800506a:	4b1d      	ldr	r3, [pc, #116]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005072:	429a      	cmp	r2, r3
 8005074:	d208      	bcs.n	8005088 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005076:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	4917      	ldr	r1, [pc, #92]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 8005084:	4313      	orrs	r3, r2
 8005086:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005088:	f000 f834 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 800508c:	4602      	mov	r2, r0
 800508e:	4b14      	ldr	r3, [pc, #80]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	0a1b      	lsrs	r3, r3, #8
 8005094:	f003 030f 	and.w	r3, r3, #15
 8005098:	4912      	ldr	r1, [pc, #72]	@ (80050e4 <HAL_RCC_ClockConfig+0x35c>)
 800509a:	5ccb      	ldrb	r3, [r1, r3]
 800509c:	f003 031f 	and.w	r3, r3, #31
 80050a0:	fa22 f303 	lsr.w	r3, r2, r3
 80050a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050a6:	4b0e      	ldr	r3, [pc, #56]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	4a0d      	ldr	r2, [pc, #52]	@ (80050e4 <HAL_RCC_ClockConfig+0x35c>)
 80050b0:	5cd3      	ldrb	r3, [r2, r3]
 80050b2:	f003 031f 	and.w	r3, r3, #31
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	fa22 f303 	lsr.w	r3, r2, r3
 80050bc:	4a0a      	ldr	r2, [pc, #40]	@ (80050e8 <HAL_RCC_ClockConfig+0x360>)
 80050be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050c0:	4a0a      	ldr	r2, [pc, #40]	@ (80050ec <HAL_RCC_ClockConfig+0x364>)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80050c6:	4b0a      	ldr	r3, [pc, #40]	@ (80050f0 <HAL_RCC_ClockConfig+0x368>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fc fa1e 	bl	800150c <HAL_InitTick>
 80050d0:	4603      	mov	r3, r0
 80050d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	58024400 	.word	0x58024400
 80050e4:	080093dc 	.word	0x080093dc
 80050e8:	24000004 	.word	0x24000004
 80050ec:	24000000 	.word	0x24000000
 80050f0:	24000008 	.word	0x24000008

080050f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b089      	sub	sp, #36	@ 0x24
 80050f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050fa:	4bb3      	ldr	r3, [pc, #716]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005102:	2b18      	cmp	r3, #24
 8005104:	f200 8155 	bhi.w	80053b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005108:	a201      	add	r2, pc, #4	@ (adr r2, 8005110 <HAL_RCC_GetSysClockFreq+0x1c>)
 800510a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510e:	bf00      	nop
 8005110:	08005175 	.word	0x08005175
 8005114:	080053b3 	.word	0x080053b3
 8005118:	080053b3 	.word	0x080053b3
 800511c:	080053b3 	.word	0x080053b3
 8005120:	080053b3 	.word	0x080053b3
 8005124:	080053b3 	.word	0x080053b3
 8005128:	080053b3 	.word	0x080053b3
 800512c:	080053b3 	.word	0x080053b3
 8005130:	0800519b 	.word	0x0800519b
 8005134:	080053b3 	.word	0x080053b3
 8005138:	080053b3 	.word	0x080053b3
 800513c:	080053b3 	.word	0x080053b3
 8005140:	080053b3 	.word	0x080053b3
 8005144:	080053b3 	.word	0x080053b3
 8005148:	080053b3 	.word	0x080053b3
 800514c:	080053b3 	.word	0x080053b3
 8005150:	080051a1 	.word	0x080051a1
 8005154:	080053b3 	.word	0x080053b3
 8005158:	080053b3 	.word	0x080053b3
 800515c:	080053b3 	.word	0x080053b3
 8005160:	080053b3 	.word	0x080053b3
 8005164:	080053b3 	.word	0x080053b3
 8005168:	080053b3 	.word	0x080053b3
 800516c:	080053b3 	.word	0x080053b3
 8005170:	080051a7 	.word	0x080051a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005174:	4b94      	ldr	r3, [pc, #592]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b00      	cmp	r3, #0
 800517e:	d009      	beq.n	8005194 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005180:	4b91      	ldr	r3, [pc, #580]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	08db      	lsrs	r3, r3, #3
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	4a90      	ldr	r2, [pc, #576]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800518c:	fa22 f303 	lsr.w	r3, r2, r3
 8005190:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005192:	e111      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005194:	4b8d      	ldr	r3, [pc, #564]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005196:	61bb      	str	r3, [r7, #24]
      break;
 8005198:	e10e      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800519a:	4b8d      	ldr	r3, [pc, #564]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800519c:	61bb      	str	r3, [r7, #24]
      break;
 800519e:	e10b      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80051a0:	4b8c      	ldr	r3, [pc, #560]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80051a2:	61bb      	str	r3, [r7, #24]
      break;
 80051a4:	e108      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051a6:	4b88      	ldr	r3, [pc, #544]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80051b0:	4b85      	ldr	r3, [pc, #532]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b4:	091b      	lsrs	r3, r3, #4
 80051b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80051bc:	4b82      	ldr	r3, [pc, #520]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80051c6:	4b80      	ldr	r3, [pc, #512]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ca:	08db      	lsrs	r3, r3, #3
 80051cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	fb02 f303 	mul.w	r3, r2, r3
 80051d6:	ee07 3a90 	vmov	s15, r3
 80051da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 80e1 	beq.w	80053ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	f000 8083 	beq.w	80052f8 <HAL_RCC_GetSysClockFreq+0x204>
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	f200 80a1 	bhi.w	800533c <HAL_RCC_GetSysClockFreq+0x248>
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <HAL_RCC_GetSysClockFreq+0x114>
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d056      	beq.n	80052b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005206:	e099      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005208:	4b6f      	ldr	r3, [pc, #444]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0320 	and.w	r3, r3, #32
 8005210:	2b00      	cmp	r3, #0
 8005212:	d02d      	beq.n	8005270 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005214:	4b6c      	ldr	r3, [pc, #432]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	08db      	lsrs	r3, r3, #3
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	4a6b      	ldr	r2, [pc, #428]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005220:	fa22 f303 	lsr.w	r3, r2, r3
 8005224:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	ee07 3a90 	vmov	s15, r3
 800522c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	ee07 3a90 	vmov	s15, r3
 8005236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800523e:	4b62      	ldr	r3, [pc, #392]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800524e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005252:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80053d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800525a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800525e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800526a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800526e:	e087      	b.n	8005380 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80053dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800527e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005282:	4b51      	ldr	r3, [pc, #324]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800528a:	ee07 3a90 	vmov	s15, r3
 800528e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005292:	ed97 6a02 	vldr	s12, [r7, #8]
 8005296:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80053d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800529a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800529e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052b2:	e065      	b.n	8005380 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	ee07 3a90 	vmov	s15, r3
 80052ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80053e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80052c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c6:	4b40      	ldr	r3, [pc, #256]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ce:	ee07 3a90 	vmov	s15, r3
 80052d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80052da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80053d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052f6:	e043      	b.n	8005380 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005302:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80053e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800530a:	4b2f      	ldr	r3, [pc, #188]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800530c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005312:	ee07 3a90 	vmov	s15, r3
 8005316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800531a:	ed97 6a02 	vldr	s12, [r7, #8]
 800531e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80053d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800532a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800532e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005336:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800533a:	e021      	b.n	8005380 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005346:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80053e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800534a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800534e:	4b1e      	ldr	r3, [pc, #120]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005362:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80053d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800536a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800536e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800537e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005380:	4b11      	ldr	r3, [pc, #68]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005384:	0a5b      	lsrs	r3, r3, #9
 8005386:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800538a:	3301      	adds	r3, #1
 800538c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	ee07 3a90 	vmov	s15, r3
 8005394:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005398:	edd7 6a07 	vldr	s13, [r7, #28]
 800539c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053a4:	ee17 3a90 	vmov	r3, s15
 80053a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80053aa:	e005      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	61bb      	str	r3, [r7, #24]
      break;
 80053b0:	e002      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80053b2:	4b07      	ldr	r3, [pc, #28]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053b4:	61bb      	str	r3, [r7, #24]
      break;
 80053b6:	bf00      	nop
  }

  return sysclockfreq;
 80053b8:	69bb      	ldr	r3, [r7, #24]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3724      	adds	r7, #36	@ 0x24
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	58024400 	.word	0x58024400
 80053cc:	03d09000 	.word	0x03d09000
 80053d0:	003d0900 	.word	0x003d0900
 80053d4:	007a1200 	.word	0x007a1200
 80053d8:	46000000 	.word	0x46000000
 80053dc:	4c742400 	.word	0x4c742400
 80053e0:	4a742400 	.word	0x4a742400
 80053e4:	4af42400 	.word	0x4af42400

080053e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80053ee:	f7ff fe81 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 80053f2:	4602      	mov	r2, r0
 80053f4:	4b10      	ldr	r3, [pc, #64]	@ (8005438 <HAL_RCC_GetHCLKFreq+0x50>)
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	0a1b      	lsrs	r3, r3, #8
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	490f      	ldr	r1, [pc, #60]	@ (800543c <HAL_RCC_GetHCLKFreq+0x54>)
 8005400:	5ccb      	ldrb	r3, [r1, r3]
 8005402:	f003 031f 	and.w	r3, r3, #31
 8005406:	fa22 f303 	lsr.w	r3, r2, r3
 800540a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800540c:	4b0a      	ldr	r3, [pc, #40]	@ (8005438 <HAL_RCC_GetHCLKFreq+0x50>)
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	f003 030f 	and.w	r3, r3, #15
 8005414:	4a09      	ldr	r2, [pc, #36]	@ (800543c <HAL_RCC_GetHCLKFreq+0x54>)
 8005416:	5cd3      	ldrb	r3, [r2, r3]
 8005418:	f003 031f 	and.w	r3, r3, #31
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	fa22 f303 	lsr.w	r3, r2, r3
 8005422:	4a07      	ldr	r2, [pc, #28]	@ (8005440 <HAL_RCC_GetHCLKFreq+0x58>)
 8005424:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005426:	4a07      	ldr	r2, [pc, #28]	@ (8005444 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800542c:	4b04      	ldr	r3, [pc, #16]	@ (8005440 <HAL_RCC_GetHCLKFreq+0x58>)
 800542e:	681b      	ldr	r3, [r3, #0]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	58024400 	.word	0x58024400
 800543c:	080093dc 	.word	0x080093dc
 8005440:	24000004 	.word	0x24000004
 8005444:	24000000 	.word	0x24000000

08005448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800544c:	f7ff ffcc 	bl	80053e8 <HAL_RCC_GetHCLKFreq>
 8005450:	4602      	mov	r2, r0
 8005452:	4b06      	ldr	r3, [pc, #24]	@ (800546c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	091b      	lsrs	r3, r3, #4
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	4904      	ldr	r1, [pc, #16]	@ (8005470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800545e:	5ccb      	ldrb	r3, [r1, r3]
 8005460:	f003 031f 	and.w	r3, r3, #31
 8005464:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005468:	4618      	mov	r0, r3
 800546a:	bd80      	pop	{r7, pc}
 800546c:	58024400 	.word	0x58024400
 8005470:	080093dc 	.word	0x080093dc

08005474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005478:	f7ff ffb6 	bl	80053e8 <HAL_RCC_GetHCLKFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	0a1b      	lsrs	r3, r3, #8
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	4904      	ldr	r1, [pc, #16]	@ (800549c <HAL_RCC_GetPCLK2Freq+0x28>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005494:	4618      	mov	r0, r3
 8005496:	bd80      	pop	{r7, pc}
 8005498:	58024400 	.word	0x58024400
 800549c:	080093dc 	.word	0x080093dc

080054a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054a4:	b0ca      	sub	sp, #296	@ 0x128
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054ac:	2300      	movs	r3, #0
 80054ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054b2:	2300      	movs	r3, #0
 80054b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80054c4:	2500      	movs	r5, #0
 80054c6:	ea54 0305 	orrs.w	r3, r4, r5
 80054ca:	d049      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80054cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054d6:	d02f      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80054d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054dc:	d828      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80054de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054e2:	d01a      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80054e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054e8:	d822      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80054ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054f2:	d007      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80054f4:	e01c      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054f6:	4bb8      	ldr	r3, [pc, #736]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fa:	4ab7      	ldr	r2, [pc, #732]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005500:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005502:	e01a      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005508:	3308      	adds	r3, #8
 800550a:	2102      	movs	r1, #2
 800550c:	4618      	mov	r0, r3
 800550e:	f002 fb61 	bl	8007bd4 <RCCEx_PLL2_Config>
 8005512:	4603      	mov	r3, r0
 8005514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005518:	e00f      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800551a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551e:	3328      	adds	r3, #40	@ 0x28
 8005520:	2102      	movs	r1, #2
 8005522:	4618      	mov	r0, r3
 8005524:	f002 fc08 	bl	8007d38 <RCCEx_PLL3_Config>
 8005528:	4603      	mov	r3, r0
 800552a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800552e:	e004      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005536:	e000      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800553a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005542:	4ba5      	ldr	r3, [pc, #660]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005546:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800554a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800554e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005550:	4aa1      	ldr	r2, [pc, #644]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005552:	430b      	orrs	r3, r1
 8005554:	6513      	str	r3, [r2, #80]	@ 0x50
 8005556:	e003      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005558:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800555c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005568:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800556c:	f04f 0900 	mov.w	r9, #0
 8005570:	ea58 0309 	orrs.w	r3, r8, r9
 8005574:	d047      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800557a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800557c:	2b04      	cmp	r3, #4
 800557e:	d82a      	bhi.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005580:	a201      	add	r2, pc, #4	@ (adr r2, 8005588 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005586:	bf00      	nop
 8005588:	0800559d 	.word	0x0800559d
 800558c:	080055ab 	.word	0x080055ab
 8005590:	080055c1 	.word	0x080055c1
 8005594:	080055df 	.word	0x080055df
 8005598:	080055df 	.word	0x080055df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800559c:	4b8e      	ldr	r3, [pc, #568]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800559e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a0:	4a8d      	ldr	r2, [pc, #564]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055a8:	e01a      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ae:	3308      	adds	r3, #8
 80055b0:	2100      	movs	r1, #0
 80055b2:	4618      	mov	r0, r3
 80055b4:	f002 fb0e 	bl	8007bd4 <RCCEx_PLL2_Config>
 80055b8:	4603      	mov	r3, r0
 80055ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055be:	e00f      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c4:	3328      	adds	r3, #40	@ 0x28
 80055c6:	2100      	movs	r1, #0
 80055c8:	4618      	mov	r0, r3
 80055ca:	f002 fbb5 	bl	8007d38 <RCCEx_PLL3_Config>
 80055ce:	4603      	mov	r3, r0
 80055d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055d4:	e004      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055dc:	e000      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80055de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055e8:	4b7b      	ldr	r3, [pc, #492]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ec:	f023 0107 	bic.w	r1, r3, #7
 80055f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f6:	4a78      	ldr	r2, [pc, #480]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055f8:	430b      	orrs	r3, r1
 80055fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80055fc:	e003      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005602:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005612:	f04f 0b00 	mov.w	fp, #0
 8005616:	ea5a 030b 	orrs.w	r3, sl, fp
 800561a:	d04c      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800561c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005626:	d030      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800562c:	d829      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800562e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005630:	d02d      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005632:	2bc0      	cmp	r3, #192	@ 0xc0
 8005634:	d825      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005636:	2b80      	cmp	r3, #128	@ 0x80
 8005638:	d018      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800563a:	2b80      	cmp	r3, #128	@ 0x80
 800563c:	d821      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005642:	2b40      	cmp	r3, #64	@ 0x40
 8005644:	d007      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005646:	e01c      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005648:	4b63      	ldr	r3, [pc, #396]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800564a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564c:	4a62      	ldr	r2, [pc, #392]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800564e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005654:	e01c      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565a:	3308      	adds	r3, #8
 800565c:	2100      	movs	r1, #0
 800565e:	4618      	mov	r0, r3
 8005660:	f002 fab8 	bl	8007bd4 <RCCEx_PLL2_Config>
 8005664:	4603      	mov	r3, r0
 8005666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800566a:	e011      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800566c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005670:	3328      	adds	r3, #40	@ 0x28
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f002 fb5f 	bl	8007d38 <RCCEx_PLL3_Config>
 800567a:	4603      	mov	r3, r0
 800567c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005680:	e006      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005688:	e002      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800568a:	bf00      	nop
 800568c:	e000      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800568e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005698:	4b4f      	ldr	r3, [pc, #316]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800569a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800569c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80056a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a6:	4a4c      	ldr	r2, [pc, #304]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056a8:	430b      	orrs	r3, r1
 80056aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80056ac:	e003      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80056b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80056c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80056c6:	2300      	movs	r3, #0
 80056c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80056cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80056d0:	460b      	mov	r3, r1
 80056d2:	4313      	orrs	r3, r2
 80056d4:	d053      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80056d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80056de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056e2:	d035      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80056e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056e8:	d82e      	bhi.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80056ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80056ee:	d031      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80056f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80056f4:	d828      	bhi.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80056f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056fa:	d01a      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80056fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005700:	d822      	bhi.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005706:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800570a:	d007      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800570c:	e01c      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800570e:	4b32      	ldr	r3, [pc, #200]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005712:	4a31      	ldr	r2, [pc, #196]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005718:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800571a:	e01c      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800571c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005720:	3308      	adds	r3, #8
 8005722:	2100      	movs	r1, #0
 8005724:	4618      	mov	r0, r3
 8005726:	f002 fa55 	bl	8007bd4 <RCCEx_PLL2_Config>
 800572a:	4603      	mov	r3, r0
 800572c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005730:	e011      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005736:	3328      	adds	r3, #40	@ 0x28
 8005738:	2100      	movs	r1, #0
 800573a:	4618      	mov	r0, r3
 800573c:	f002 fafc 	bl	8007d38 <RCCEx_PLL3_Config>
 8005740:	4603      	mov	r3, r0
 8005742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005746:	e006      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800574e:	e002      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005750:	bf00      	nop
 8005752:	e000      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10b      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800575e:	4b1e      	ldr	r3, [pc, #120]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005762:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800576e:	4a1a      	ldr	r2, [pc, #104]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005770:	430b      	orrs	r3, r1
 8005772:	6593      	str	r3, [r2, #88]	@ 0x58
 8005774:	e003      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800577a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800577e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800578a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800578e:	2300      	movs	r3, #0
 8005790:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005794:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005798:	460b      	mov	r3, r1
 800579a:	4313      	orrs	r3, r2
 800579c:	d056      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800579e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80057a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057aa:	d038      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80057ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057b0:	d831      	bhi.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057b6:	d034      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80057b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057bc:	d82b      	bhi.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057c2:	d01d      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80057c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057c8:	d825      	bhi.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d006      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80057ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057d2:	d00a      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80057d4:	e01f      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057d6:	bf00      	nop
 80057d8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057dc:	4ba2      	ldr	r3, [pc, #648]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e0:	4aa1      	ldr	r2, [pc, #644]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057e8:	e01c      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ee:	3308      	adds	r3, #8
 80057f0:	2100      	movs	r1, #0
 80057f2:	4618      	mov	r0, r3
 80057f4:	f002 f9ee 	bl	8007bd4 <RCCEx_PLL2_Config>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80057fe:	e011      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005804:	3328      	adds	r3, #40	@ 0x28
 8005806:	2100      	movs	r1, #0
 8005808:	4618      	mov	r0, r3
 800580a:	f002 fa95 	bl	8007d38 <RCCEx_PLL3_Config>
 800580e:	4603      	mov	r3, r0
 8005810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005814:	e006      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800581c:	e002      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800581e:	bf00      	nop
 8005820:	e000      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10b      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800582c:	4b8e      	ldr	r3, [pc, #568]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800582e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005830:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005838:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800583c:	4a8a      	ldr	r2, [pc, #552]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800583e:	430b      	orrs	r3, r1
 8005840:	6593      	str	r3, [r2, #88]	@ 0x58
 8005842:	e003      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005848:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800584c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005858:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800585c:	2300      	movs	r3, #0
 800585e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005862:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005866:	460b      	mov	r3, r1
 8005868:	4313      	orrs	r3, r2
 800586a:	d03a      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800586c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005872:	2b30      	cmp	r3, #48	@ 0x30
 8005874:	d01f      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005876:	2b30      	cmp	r3, #48	@ 0x30
 8005878:	d819      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800587a:	2b20      	cmp	r3, #32
 800587c:	d00c      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800587e:	2b20      	cmp	r3, #32
 8005880:	d815      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d019      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005886:	2b10      	cmp	r3, #16
 8005888:	d111      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800588a:	4b77      	ldr	r3, [pc, #476]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800588c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588e:	4a76      	ldr	r2, [pc, #472]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005894:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005896:	e011      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800589c:	3308      	adds	r3, #8
 800589e:	2102      	movs	r1, #2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f002 f997 	bl	8007bd4 <RCCEx_PLL2_Config>
 80058a6:	4603      	mov	r3, r0
 80058a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80058ac:	e006      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058b4:	e002      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80058b6:	bf00      	nop
 80058b8:	e000      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80058ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80058c4:	4b68      	ldr	r3, [pc, #416]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80058cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058d2:	4a65      	ldr	r2, [pc, #404]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058d4:	430b      	orrs	r3, r1
 80058d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058d8:	e003      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80058e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80058ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058f2:	2300      	movs	r3, #0
 80058f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4313      	orrs	r3, r2
 8005900:	d051      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005908:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800590c:	d035      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800590e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005912:	d82e      	bhi.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005914:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005918:	d031      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800591a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800591e:	d828      	bhi.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005920:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005924:	d01a      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005926:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800592a:	d822      	bhi.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005930:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005934:	d007      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005936:	e01c      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005938:	4b4b      	ldr	r3, [pc, #300]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800593a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593c:	4a4a      	ldr	r2, [pc, #296]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800593e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005944:	e01c      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594a:	3308      	adds	r3, #8
 800594c:	2100      	movs	r1, #0
 800594e:	4618      	mov	r0, r3
 8005950:	f002 f940 	bl	8007bd4 <RCCEx_PLL2_Config>
 8005954:	4603      	mov	r3, r0
 8005956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800595a:	e011      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800595c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005960:	3328      	adds	r3, #40	@ 0x28
 8005962:	2100      	movs	r1, #0
 8005964:	4618      	mov	r0, r3
 8005966:	f002 f9e7 	bl	8007d38 <RCCEx_PLL3_Config>
 800596a:	4603      	mov	r3, r0
 800596c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005970:	e006      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005978:	e002      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800597a:	bf00      	nop
 800597c:	e000      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800597e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005980:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005988:	4b37      	ldr	r3, [pc, #220]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800598a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800598c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005996:	4a34      	ldr	r2, [pc, #208]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005998:	430b      	orrs	r3, r1
 800599a:	6513      	str	r3, [r2, #80]	@ 0x50
 800599c:	e003      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80059a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80059b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059b6:	2300      	movs	r3, #0
 80059b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80059bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80059c0:	460b      	mov	r3, r1
 80059c2:	4313      	orrs	r3, r2
 80059c4:	d056      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80059c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059d0:	d033      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80059d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059d6:	d82c      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059dc:	d02f      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80059de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059e2:	d826      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059e8:	d02b      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80059ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059ee:	d820      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059f4:	d012      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80059f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059fa:	d81a      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d022      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a04:	d115      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f002 f8e0 	bl	8007bd4 <RCCEx_PLL2_Config>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a1a:	e015      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a20:	3328      	adds	r3, #40	@ 0x28
 8005a22:	2101      	movs	r1, #1
 8005a24:	4618      	mov	r0, r3
 8005a26:	f002 f987 	bl	8007d38 <RCCEx_PLL3_Config>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a30:	e00a      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a38:	e006      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a3a:	bf00      	nop
 8005a3c:	e004      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a3e:	bf00      	nop
 8005a40:	e002      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a42:	bf00      	nop
 8005a44:	e000      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10d      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a50:	4b05      	ldr	r3, [pc, #20]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a54:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a5e:	4a02      	ldr	r2, [pc, #8]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a60:	430b      	orrs	r3, r1
 8005a62:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a64:	e006      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005a66:	bf00      	nop
 8005a68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005a80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a84:	2300      	movs	r3, #0
 8005a86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a8a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4313      	orrs	r3, r2
 8005a92:	d055      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005aa0:	d033      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005aa6:	d82c      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aac:	d02f      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab2:	d826      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ab4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ab8:	d02b      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005aba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005abe:	d820      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ac0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ac4:	d012      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aca:	d81a      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d022      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005ad0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ad4:	d115      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ada:	3308      	adds	r3, #8
 8005adc:	2101      	movs	r1, #1
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f002 f878 	bl	8007bd4 <RCCEx_PLL2_Config>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005aea:	e015      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af0:	3328      	adds	r3, #40	@ 0x28
 8005af2:	2101      	movs	r1, #1
 8005af4:	4618      	mov	r0, r3
 8005af6:	f002 f91f 	bl	8007d38 <RCCEx_PLL3_Config>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b00:	e00a      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b08:	e006      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b0a:	bf00      	nop
 8005b0c:	e004      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b0e:	bf00      	nop
 8005b10:	e002      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b12:	bf00      	nop
 8005b14:	e000      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10b      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b20:	4ba3      	ldr	r3, [pc, #652]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b24:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b30:	4a9f      	ldr	r2, [pc, #636]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b32:	430b      	orrs	r3, r1
 8005b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b36:	e003      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b48:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005b4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b50:	2300      	movs	r3, #0
 8005b52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	d037      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b6a:	d00e      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005b6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b70:	d816      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d018      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005b76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b7a:	d111      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b7c:	4b8c      	ldr	r3, [pc, #560]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b80:	4a8b      	ldr	r2, [pc, #556]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b88:	e00f      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8e:	3308      	adds	r3, #8
 8005b90:	2101      	movs	r1, #1
 8005b92:	4618      	mov	r0, r3
 8005b94:	f002 f81e 	bl	8007bd4 <RCCEx_PLL2_Config>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b9e:	e004      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ba6:	e000      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10a      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005bb2:	4b7f      	ldr	r3, [pc, #508]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc0:	4a7b      	ldr	r2, [pc, #492]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bc6:	e003      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005be0:	2300      	movs	r3, #0
 8005be2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005be6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4313      	orrs	r3, r2
 8005bee:	d039      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d81c      	bhi.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8005c00 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c00:	08005c3d 	.word	0x08005c3d
 8005c04:	08005c11 	.word	0x08005c11
 8005c08:	08005c1f 	.word	0x08005c1f
 8005c0c:	08005c3d 	.word	0x08005c3d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c10:	4b67      	ldr	r3, [pc, #412]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c14:	4a66      	ldr	r2, [pc, #408]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c1c:	e00f      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c22:	3308      	adds	r3, #8
 8005c24:	2102      	movs	r1, #2
 8005c26:	4618      	mov	r0, r3
 8005c28:	f001 ffd4 	bl	8007bd4 <RCCEx_PLL2_Config>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c32:	e004      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c3a:	e000      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10a      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005c46:	4b5a      	ldr	r3, [pc, #360]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c4a:	f023 0103 	bic.w	r1, r3, #3
 8005c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c54:	4a56      	ldr	r2, [pc, #344]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c56:	430b      	orrs	r3, r1
 8005c58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c5a:	e003      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005c70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c74:	2300      	movs	r3, #0
 8005c76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4313      	orrs	r3, r2
 8005c82:	f000 809f 	beq.w	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c86:	4b4b      	ldr	r3, [pc, #300]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a4a      	ldr	r2, [pc, #296]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c92:	f7fb fc85 	bl	80015a0 <HAL_GetTick>
 8005c96:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c9a:	e00b      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c9c:	f7fb fc80 	bl	80015a0 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b64      	cmp	r3, #100	@ 0x64
 8005caa:	d903      	bls.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cb2:	e005      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cb4:	4b3f      	ldr	r3, [pc, #252]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0ed      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d179      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005cc8:	4b39      	ldr	r3, [pc, #228]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cd4:	4053      	eors	r3, r2
 8005cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d015      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cde:	4b34      	ldr	r3, [pc, #208]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ce6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cea:	4b31      	ldr	r3, [pc, #196]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cee:	4a30      	ldr	r2, [pc, #192]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cf4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cf6:	4b2e      	ldr	r3, [pc, #184]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cfa:	4a2d      	ldr	r2, [pc, #180]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d00:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d02:	4a2b      	ldr	r2, [pc, #172]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d08:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d16:	d118      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d18:	f7fb fc42 	bl	80015a0 <HAL_GetTick>
 8005d1c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d20:	e00d      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d22:	f7fb fc3d 	bl	80015a0 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005d2c:	1ad2      	subs	r2, r2, r3
 8005d2e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d903      	bls.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005d3c:	e005      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0eb      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d129      	bne.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d62:	d10e      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005d64:	4b12      	ldr	r3, [pc, #72]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d74:	091a      	lsrs	r2, r3, #4
 8005d76:	4b10      	ldr	r3, [pc, #64]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	6113      	str	r3, [r2, #16]
 8005d80:	e005      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005d82:	4b0b      	ldr	r3, [pc, #44]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	4a0a      	ldr	r2, [pc, #40]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d88:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d8c:	6113      	str	r3, [r2, #16]
 8005d8e:	4b08      	ldr	r3, [pc, #32]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d90:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d9e:	4a04      	ldr	r2, [pc, #16]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005da0:	430b      	orrs	r3, r1
 8005da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005da4:	e00e      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005daa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005dae:	e009      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005db0:	58024400 	.word	0x58024400
 8005db4:	58024800 	.word	0x58024800
 8005db8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f002 0301 	and.w	r3, r2, #1
 8005dd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005dda:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f000 8089 	beq.w	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dec:	2b28      	cmp	r3, #40	@ 0x28
 8005dee:	d86b      	bhi.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005df0:	a201      	add	r2, pc, #4	@ (adr r2, 8005df8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df6:	bf00      	nop
 8005df8:	08005ed1 	.word	0x08005ed1
 8005dfc:	08005ec9 	.word	0x08005ec9
 8005e00:	08005ec9 	.word	0x08005ec9
 8005e04:	08005ec9 	.word	0x08005ec9
 8005e08:	08005ec9 	.word	0x08005ec9
 8005e0c:	08005ec9 	.word	0x08005ec9
 8005e10:	08005ec9 	.word	0x08005ec9
 8005e14:	08005ec9 	.word	0x08005ec9
 8005e18:	08005e9d 	.word	0x08005e9d
 8005e1c:	08005ec9 	.word	0x08005ec9
 8005e20:	08005ec9 	.word	0x08005ec9
 8005e24:	08005ec9 	.word	0x08005ec9
 8005e28:	08005ec9 	.word	0x08005ec9
 8005e2c:	08005ec9 	.word	0x08005ec9
 8005e30:	08005ec9 	.word	0x08005ec9
 8005e34:	08005ec9 	.word	0x08005ec9
 8005e38:	08005eb3 	.word	0x08005eb3
 8005e3c:	08005ec9 	.word	0x08005ec9
 8005e40:	08005ec9 	.word	0x08005ec9
 8005e44:	08005ec9 	.word	0x08005ec9
 8005e48:	08005ec9 	.word	0x08005ec9
 8005e4c:	08005ec9 	.word	0x08005ec9
 8005e50:	08005ec9 	.word	0x08005ec9
 8005e54:	08005ec9 	.word	0x08005ec9
 8005e58:	08005ed1 	.word	0x08005ed1
 8005e5c:	08005ec9 	.word	0x08005ec9
 8005e60:	08005ec9 	.word	0x08005ec9
 8005e64:	08005ec9 	.word	0x08005ec9
 8005e68:	08005ec9 	.word	0x08005ec9
 8005e6c:	08005ec9 	.word	0x08005ec9
 8005e70:	08005ec9 	.word	0x08005ec9
 8005e74:	08005ec9 	.word	0x08005ec9
 8005e78:	08005ed1 	.word	0x08005ed1
 8005e7c:	08005ec9 	.word	0x08005ec9
 8005e80:	08005ec9 	.word	0x08005ec9
 8005e84:	08005ec9 	.word	0x08005ec9
 8005e88:	08005ec9 	.word	0x08005ec9
 8005e8c:	08005ec9 	.word	0x08005ec9
 8005e90:	08005ec9 	.word	0x08005ec9
 8005e94:	08005ec9 	.word	0x08005ec9
 8005e98:	08005ed1 	.word	0x08005ed1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f001 fe95 	bl	8007bd4 <RCCEx_PLL2_Config>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005eb0:	e00f      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb6:	3328      	adds	r3, #40	@ 0x28
 8005eb8:	2101      	movs	r1, #1
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f001 ff3c 	bl	8007d38 <RCCEx_PLL3_Config>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ec6:	e004      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ece:	e000      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10a      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005eda:	4bbf      	ldr	r3, [pc, #764]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ede:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ee8:	4abb      	ldr	r2, [pc, #748]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005eea:	430b      	orrs	r3, r1
 8005eec:	6553      	str	r3, [r2, #84]	@ 0x54
 8005eee:	e003      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ef4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f002 0302 	and.w	r3, r2, #2
 8005f04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005f0e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005f12:	460b      	mov	r3, r1
 8005f14:	4313      	orrs	r3, r2
 8005f16:	d041      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f1e:	2b05      	cmp	r3, #5
 8005f20:	d824      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005f22:	a201      	add	r2, pc, #4	@ (adr r2, 8005f28 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f28:	08005f75 	.word	0x08005f75
 8005f2c:	08005f41 	.word	0x08005f41
 8005f30:	08005f57 	.word	0x08005f57
 8005f34:	08005f75 	.word	0x08005f75
 8005f38:	08005f75 	.word	0x08005f75
 8005f3c:	08005f75 	.word	0x08005f75
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f44:	3308      	adds	r3, #8
 8005f46:	2101      	movs	r1, #1
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f001 fe43 	bl	8007bd4 <RCCEx_PLL2_Config>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f54:	e00f      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f5a:	3328      	adds	r3, #40	@ 0x28
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f001 feea 	bl	8007d38 <RCCEx_PLL3_Config>
 8005f64:	4603      	mov	r3, r0
 8005f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f6a:	e004      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f72:	e000      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10a      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f7e:	4b96      	ldr	r3, [pc, #600]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f82:	f023 0107 	bic.w	r1, r3, #7
 8005f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f8c:	4a92      	ldr	r2, [pc, #584]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f8e:	430b      	orrs	r3, r1
 8005f90:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f92:	e003      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa4:	f002 0304 	and.w	r3, r2, #4
 8005fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fac:	2300      	movs	r3, #0
 8005fae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fb2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	d044      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fc4:	2b05      	cmp	r3, #5
 8005fc6:	d825      	bhi.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fce:	bf00      	nop
 8005fd0:	0800601d 	.word	0x0800601d
 8005fd4:	08005fe9 	.word	0x08005fe9
 8005fd8:	08005fff 	.word	0x08005fff
 8005fdc:	0800601d 	.word	0x0800601d
 8005fe0:	0800601d 	.word	0x0800601d
 8005fe4:	0800601d 	.word	0x0800601d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fec:	3308      	adds	r3, #8
 8005fee:	2101      	movs	r1, #1
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f001 fdef 	bl	8007bd4 <RCCEx_PLL2_Config>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ffc:	e00f      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006002:	3328      	adds	r3, #40	@ 0x28
 8006004:	2101      	movs	r1, #1
 8006006:	4618      	mov	r0, r3
 8006008:	f001 fe96 	bl	8007d38 <RCCEx_PLL3_Config>
 800600c:	4603      	mov	r3, r0
 800600e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006012:	e004      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800601a:	e000      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800601c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800601e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10b      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006026:	4b6c      	ldr	r3, [pc, #432]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800602a:	f023 0107 	bic.w	r1, r3, #7
 800602e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006032:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006036:	4a68      	ldr	r2, [pc, #416]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006038:	430b      	orrs	r3, r1
 800603a:	6593      	str	r3, [r2, #88]	@ 0x58
 800603c:	e003      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006042:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f002 0320 	and.w	r3, r2, #32
 8006052:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006056:	2300      	movs	r3, #0
 8006058:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800605c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006060:	460b      	mov	r3, r1
 8006062:	4313      	orrs	r3, r2
 8006064:	d055      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800606e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006072:	d033      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006074:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006078:	d82c      	bhi.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800607a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800607e:	d02f      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006084:	d826      	bhi.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006086:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800608a:	d02b      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800608c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006090:	d820      	bhi.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006092:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006096:	d012      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006098:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800609c:	d81a      	bhi.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d022      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80060a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060a6:	d115      	bne.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ac:	3308      	adds	r3, #8
 80060ae:	2100      	movs	r1, #0
 80060b0:	4618      	mov	r0, r3
 80060b2:	f001 fd8f 	bl	8007bd4 <RCCEx_PLL2_Config>
 80060b6:	4603      	mov	r3, r0
 80060b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060bc:	e015      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c2:	3328      	adds	r3, #40	@ 0x28
 80060c4:	2102      	movs	r1, #2
 80060c6:	4618      	mov	r0, r3
 80060c8:	f001 fe36 	bl	8007d38 <RCCEx_PLL3_Config>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060d2:	e00a      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060da:	e006      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060dc:	bf00      	nop
 80060de:	e004      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060e0:	bf00      	nop
 80060e2:	e002      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060e4:	bf00      	nop
 80060e6:	e000      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10b      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060f2:	4b39      	ldr	r3, [pc, #228]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060f6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006102:	4a35      	ldr	r2, [pc, #212]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006104:	430b      	orrs	r3, r1
 8006106:	6553      	str	r3, [r2, #84]	@ 0x54
 8006108:	e003      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800610e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800611e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006122:	2300      	movs	r3, #0
 8006124:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006128:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800612c:	460b      	mov	r3, r1
 800612e:	4313      	orrs	r3, r2
 8006130:	d058      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006136:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800613a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800613e:	d033      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006140:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006144:	d82c      	bhi.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800614a:	d02f      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800614c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006150:	d826      	bhi.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006152:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006156:	d02b      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006158:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800615c:	d820      	bhi.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800615e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006162:	d012      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006168:	d81a      	bhi.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d022      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800616e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006172:	d115      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006178:	3308      	adds	r3, #8
 800617a:	2100      	movs	r1, #0
 800617c:	4618      	mov	r0, r3
 800617e:	f001 fd29 	bl	8007bd4 <RCCEx_PLL2_Config>
 8006182:	4603      	mov	r3, r0
 8006184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006188:	e015      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800618a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618e:	3328      	adds	r3, #40	@ 0x28
 8006190:	2102      	movs	r1, #2
 8006192:	4618      	mov	r0, r3
 8006194:	f001 fdd0 	bl	8007d38 <RCCEx_PLL3_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800619e:	e00a      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061a6:	e006      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061a8:	bf00      	nop
 80061aa:	e004      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061ac:	bf00      	nop
 80061ae:	e002      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061b0:	bf00      	nop
 80061b2:	e000      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10e      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061be:	4b06      	ldr	r3, [pc, #24]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061c2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80061c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061ce:	4a02      	ldr	r2, [pc, #8]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061d0:	430b      	orrs	r3, r1
 80061d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80061d4:	e006      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80061d6:	bf00      	nop
 80061d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80061e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80061f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061f4:	2300      	movs	r3, #0
 80061f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80061fe:	460b      	mov	r3, r1
 8006200:	4313      	orrs	r3, r2
 8006202:	d055      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006208:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800620c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006210:	d033      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006212:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006216:	d82c      	bhi.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006218:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800621c:	d02f      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800621e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006222:	d826      	bhi.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006224:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006228:	d02b      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800622a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800622e:	d820      	bhi.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006230:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006234:	d012      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006236:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800623a:	d81a      	bhi.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800623c:	2b00      	cmp	r3, #0
 800623e:	d022      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006240:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006244:	d115      	bne.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800624a:	3308      	adds	r3, #8
 800624c:	2100      	movs	r1, #0
 800624e:	4618      	mov	r0, r3
 8006250:	f001 fcc0 	bl	8007bd4 <RCCEx_PLL2_Config>
 8006254:	4603      	mov	r3, r0
 8006256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800625a:	e015      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800625c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006260:	3328      	adds	r3, #40	@ 0x28
 8006262:	2102      	movs	r1, #2
 8006264:	4618      	mov	r0, r3
 8006266:	f001 fd67 	bl	8007d38 <RCCEx_PLL3_Config>
 800626a:	4603      	mov	r3, r0
 800626c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006270:	e00a      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006278:	e006      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800627a:	bf00      	nop
 800627c:	e004      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800627e:	bf00      	nop
 8006280:	e002      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006282:	bf00      	nop
 8006284:	e000      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10b      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006290:	4ba1      	ldr	r3, [pc, #644]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006294:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80062a0:	4a9d      	ldr	r2, [pc, #628]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062a2:	430b      	orrs	r3, r1
 80062a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80062a6:	e003      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80062b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	f002 0308 	and.w	r3, r2, #8
 80062bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062c0:	2300      	movs	r3, #0
 80062c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80062c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80062ca:	460b      	mov	r3, r1
 80062cc:	4313      	orrs	r3, r2
 80062ce:	d01e      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80062d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062dc:	d10c      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e2:	3328      	adds	r3, #40	@ 0x28
 80062e4:	2102      	movs	r1, #2
 80062e6:	4618      	mov	r0, r3
 80062e8:	f001 fd26 	bl	8007d38 <RCCEx_PLL3_Config>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80062f8:	4b87      	ldr	r3, [pc, #540]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062fc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006304:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006308:	4a83      	ldr	r2, [pc, #524]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800630a:	430b      	orrs	r3, r1
 800630c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800630e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	f002 0310 	and.w	r3, r2, #16
 800631a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800631e:	2300      	movs	r3, #0
 8006320:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006324:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006328:	460b      	mov	r3, r1
 800632a:	4313      	orrs	r3, r2
 800632c:	d01e      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800632e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006332:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800633a:	d10c      	bne.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800633c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006340:	3328      	adds	r3, #40	@ 0x28
 8006342:	2102      	movs	r1, #2
 8006344:	4618      	mov	r0, r3
 8006346:	f001 fcf7 	bl	8007d38 <RCCEx_PLL3_Config>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006356:	4b70      	ldr	r3, [pc, #448]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800635e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006362:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006366:	4a6c      	ldr	r2, [pc, #432]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006368:	430b      	orrs	r3, r1
 800636a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800636c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006378:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800637c:	2300      	movs	r3, #0
 800637e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006382:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006386:	460b      	mov	r3, r1
 8006388:	4313      	orrs	r3, r2
 800638a:	d03e      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800638c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006390:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006394:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006398:	d022      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800639a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800639e:	d81b      	bhi.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d003      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80063a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063a8:	d00b      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80063aa:	e015      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b0:	3308      	adds	r3, #8
 80063b2:	2100      	movs	r1, #0
 80063b4:	4618      	mov	r0, r3
 80063b6:	f001 fc0d 	bl	8007bd4 <RCCEx_PLL2_Config>
 80063ba:	4603      	mov	r3, r0
 80063bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063c0:	e00f      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c6:	3328      	adds	r3, #40	@ 0x28
 80063c8:	2102      	movs	r1, #2
 80063ca:	4618      	mov	r0, r3
 80063cc:	f001 fcb4 	bl	8007d38 <RCCEx_PLL3_Config>
 80063d0:	4603      	mov	r3, r0
 80063d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063d6:	e004      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063de:	e000      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80063e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10b      	bne.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063ea:	4b4b      	ldr	r3, [pc, #300]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80063f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80063fa:	4a47      	ldr	r2, [pc, #284]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063fc:	430b      	orrs	r3, r1
 80063fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006400:	e003      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006406:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800640a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800640e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006412:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006416:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006418:	2300      	movs	r3, #0
 800641a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800641c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006420:	460b      	mov	r3, r1
 8006422:	4313      	orrs	r3, r2
 8006424:	d03b      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800642e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006432:	d01f      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006434:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006438:	d818      	bhi.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800643a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800643e:	d003      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006440:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006444:	d007      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006446:	e011      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006448:	4b33      	ldr	r3, [pc, #204]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800644a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644c:	4a32      	ldr	r2, [pc, #200]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800644e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006452:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006454:	e00f      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645a:	3328      	adds	r3, #40	@ 0x28
 800645c:	2101      	movs	r1, #1
 800645e:	4618      	mov	r0, r3
 8006460:	f001 fc6a 	bl	8007d38 <RCCEx_PLL3_Config>
 8006464:	4603      	mov	r3, r0
 8006466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800646a:	e004      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006472:	e000      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10b      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800647e:	4b26      	ldr	r3, [pc, #152]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006482:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648e:	4a22      	ldr	r2, [pc, #136]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006490:	430b      	orrs	r3, r1
 8006492:	6553      	str	r3, [r2, #84]	@ 0x54
 8006494:	e003      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800649a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800649e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80064aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80064ac:	2300      	movs	r3, #0
 80064ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80064b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80064b4:	460b      	mov	r3, r1
 80064b6:	4313      	orrs	r3, r2
 80064b8:	d034      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80064ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80064c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064c8:	d007      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80064ca:	e011      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064cc:	4b12      	ldr	r3, [pc, #72]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d0:	4a11      	ldr	r2, [pc, #68]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064d8:	e00e      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064de:	3308      	adds	r3, #8
 80064e0:	2102      	movs	r1, #2
 80064e2:	4618      	mov	r0, r3
 80064e4:	f001 fb76 	bl	8007bd4 <RCCEx_PLL2_Config>
 80064e8:	4603      	mov	r3, r0
 80064ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064ee:	e003      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10d      	bne.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006500:	4b05      	ldr	r3, [pc, #20]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006504:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800650c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800650e:	4a02      	ldr	r2, [pc, #8]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006510:	430b      	orrs	r3, r1
 8006512:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006514:	e006      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006516:	bf00      	nop
 8006518:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800651c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006520:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006530:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006532:	2300      	movs	r3, #0
 8006534:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006536:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800653a:	460b      	mov	r3, r1
 800653c:	4313      	orrs	r3, r2
 800653e:	d00c      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006544:	3328      	adds	r3, #40	@ 0x28
 8006546:	2102      	movs	r1, #2
 8006548:	4618      	mov	r0, r3
 800654a:	f001 fbf5 	bl	8007d38 <RCCEx_PLL3_Config>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800655a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800655e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006562:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006566:	663b      	str	r3, [r7, #96]	@ 0x60
 8006568:	2300      	movs	r3, #0
 800656a:	667b      	str	r3, [r7, #100]	@ 0x64
 800656c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006570:	460b      	mov	r3, r1
 8006572:	4313      	orrs	r3, r2
 8006574:	d038      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800657e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006582:	d018      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006584:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006588:	d811      	bhi.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800658a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800658e:	d014      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006594:	d80b      	bhi.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006596:	2b00      	cmp	r3, #0
 8006598:	d011      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800659a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800659e:	d106      	bne.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a0:	4bc3      	ldr	r3, [pc, #780]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a4:	4ac2      	ldr	r2, [pc, #776]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80065ac:	e008      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065b4:	e004      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065b6:	bf00      	nop
 80065b8:	e002      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065ba:	bf00      	nop
 80065bc:	e000      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10b      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065c8:	4bb9      	ldr	r3, [pc, #740]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065d8:	4ab5      	ldr	r2, [pc, #724]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065da:	430b      	orrs	r3, r1
 80065dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80065de:	e003      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80065f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065f6:	2300      	movs	r3, #0
 80065f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80065fe:	460b      	mov	r3, r1
 8006600:	4313      	orrs	r3, r2
 8006602:	d009      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006604:	4baa      	ldr	r3, [pc, #680]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006608:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800660c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006612:	4aa7      	ldr	r2, [pc, #668]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006614:	430b      	orrs	r3, r1
 8006616:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006624:	653b      	str	r3, [r7, #80]	@ 0x50
 8006626:	2300      	movs	r3, #0
 8006628:	657b      	str	r3, [r7, #84]	@ 0x54
 800662a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800662e:	460b      	mov	r3, r1
 8006630:	4313      	orrs	r3, r2
 8006632:	d00a      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006634:	4b9e      	ldr	r3, [pc, #632]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800663c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006640:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006644:	4a9a      	ldr	r2, [pc, #616]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006646:	430b      	orrs	r3, r1
 8006648:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800664a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006652:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006656:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006658:	2300      	movs	r3, #0
 800665a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800665c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006660:	460b      	mov	r3, r1
 8006662:	4313      	orrs	r3, r2
 8006664:	d009      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006666:	4b92      	ldr	r3, [pc, #584]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800666a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800666e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006674:	4a8e      	ldr	r2, [pc, #568]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006676:	430b      	orrs	r3, r1
 8006678:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800667a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006686:	643b      	str	r3, [r7, #64]	@ 0x40
 8006688:	2300      	movs	r3, #0
 800668a:	647b      	str	r3, [r7, #68]	@ 0x44
 800668c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006690:	460b      	mov	r3, r1
 8006692:	4313      	orrs	r3, r2
 8006694:	d00e      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006696:	4b86      	ldr	r3, [pc, #536]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	4a85      	ldr	r2, [pc, #532]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800669c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066a0:	6113      	str	r3, [r2, #16]
 80066a2:	4b83      	ldr	r3, [pc, #524]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066a4:	6919      	ldr	r1, [r3, #16]
 80066a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80066ae:	4a80      	ldr	r2, [pc, #512]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066b0:	430b      	orrs	r3, r1
 80066b2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80066b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80066c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066c2:	2300      	movs	r3, #0
 80066c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80066ca:	460b      	mov	r3, r1
 80066cc:	4313      	orrs	r3, r2
 80066ce:	d009      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80066d0:	4b77      	ldr	r3, [pc, #476]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066d4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80066d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066de:	4a74      	ldr	r2, [pc, #464]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066e0:	430b      	orrs	r3, r1
 80066e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80066f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80066f2:	2300      	movs	r3, #0
 80066f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80066f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80066fa:	460b      	mov	r3, r1
 80066fc:	4313      	orrs	r3, r2
 80066fe:	d00a      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006700:	4b6b      	ldr	r3, [pc, #428]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006704:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006710:	4a67      	ldr	r2, [pc, #412]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006712:	430b      	orrs	r3, r1
 8006714:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671e:	2100      	movs	r1, #0
 8006720:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006728:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800672c:	460b      	mov	r3, r1
 800672e:	4313      	orrs	r3, r2
 8006730:	d011      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006736:	3308      	adds	r3, #8
 8006738:	2100      	movs	r1, #0
 800673a:	4618      	mov	r0, r3
 800673c:	f001 fa4a 	bl	8007bd4 <RCCEx_PLL2_Config>
 8006740:	4603      	mov	r3, r0
 8006742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800674e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006752:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	2100      	movs	r1, #0
 8006760:	6239      	str	r1, [r7, #32]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	627b      	str	r3, [r7, #36]	@ 0x24
 8006768:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800676c:	460b      	mov	r3, r1
 800676e:	4313      	orrs	r3, r2
 8006770:	d011      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006776:	3308      	adds	r3, #8
 8006778:	2101      	movs	r1, #1
 800677a:	4618      	mov	r0, r3
 800677c:	f001 fa2a 	bl	8007bd4 <RCCEx_PLL2_Config>
 8006780:	4603      	mov	r3, r0
 8006782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006792:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679e:	2100      	movs	r1, #0
 80067a0:	61b9      	str	r1, [r7, #24]
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	61fb      	str	r3, [r7, #28]
 80067a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80067ac:	460b      	mov	r3, r1
 80067ae:	4313      	orrs	r3, r2
 80067b0:	d011      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b6:	3308      	adds	r3, #8
 80067b8:	2102      	movs	r1, #2
 80067ba:	4618      	mov	r0, r3
 80067bc:	f001 fa0a 	bl	8007bd4 <RCCEx_PLL2_Config>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80067c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80067d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	2100      	movs	r1, #0
 80067e0:	6139      	str	r1, [r7, #16]
 80067e2:	f003 0308 	and.w	r3, r3, #8
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80067ec:	460b      	mov	r3, r1
 80067ee:	4313      	orrs	r3, r2
 80067f0:	d011      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f6:	3328      	adds	r3, #40	@ 0x28
 80067f8:	2100      	movs	r1, #0
 80067fa:	4618      	mov	r0, r3
 80067fc:	f001 fa9c 	bl	8007d38 <RCCEx_PLL3_Config>
 8006800:	4603      	mov	r3, r0
 8006802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006812:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800681a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681e:	2100      	movs	r1, #0
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	f003 0310 	and.w	r3, r3, #16
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800682c:	460b      	mov	r3, r1
 800682e:	4313      	orrs	r3, r2
 8006830:	d011      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006836:	3328      	adds	r3, #40	@ 0x28
 8006838:	2101      	movs	r1, #1
 800683a:	4618      	mov	r0, r3
 800683c:	f001 fa7c 	bl	8007d38 <RCCEx_PLL3_Config>
 8006840:	4603      	mov	r3, r0
 8006842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	2100      	movs	r1, #0
 8006860:	6039      	str	r1, [r7, #0]
 8006862:	f003 0320 	and.w	r3, r3, #32
 8006866:	607b      	str	r3, [r7, #4]
 8006868:	e9d7 1200 	ldrd	r1, r2, [r7]
 800686c:	460b      	mov	r3, r1
 800686e:	4313      	orrs	r3, r2
 8006870:	d011      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006876:	3328      	adds	r3, #40	@ 0x28
 8006878:	2102      	movs	r1, #2
 800687a:	4618      	mov	r0, r3
 800687c:	f001 fa5c 	bl	8007d38 <RCCEx_PLL3_Config>
 8006880:	4603      	mov	r3, r0
 8006882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800688e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006896:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	e000      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80068aa:	46bd      	mov	sp, r7
 80068ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068b0:	58024400 	.word	0x58024400

080068b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b090      	sub	sp, #64	@ 0x40
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80068be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068c2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80068c6:	430b      	orrs	r3, r1
 80068c8:	f040 8094 	bne.w	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80068cc:	4b9e      	ldr	r3, [pc, #632]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068d0:	f003 0307 	and.w	r3, r3, #7
 80068d4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80068d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d8:	2b04      	cmp	r3, #4
 80068da:	f200 8087 	bhi.w	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80068de:	a201      	add	r2, pc, #4	@ (adr r2, 80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80068e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e4:	080068f9 	.word	0x080068f9
 80068e8:	08006921 	.word	0x08006921
 80068ec:	08006949 	.word	0x08006949
 80068f0:	080069e5 	.word	0x080069e5
 80068f4:	08006971 	.word	0x08006971
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068f8:	4b93      	ldr	r3, [pc, #588]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006900:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006904:	d108      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800690a:	4618      	mov	r0, r3
 800690c:	f001 f810 	bl	8007930 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006914:	f000 bd45 	b.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006918:	2300      	movs	r3, #0
 800691a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800691c:	f000 bd41 	b.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006920:	4b89      	ldr	r3, [pc, #548]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006928:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800692c:	d108      	bne.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800692e:	f107 0318 	add.w	r3, r7, #24
 8006932:	4618      	mov	r0, r3
 8006934:	f000 fd54 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800693c:	f000 bd31 	b.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006944:	f000 bd2d 	b.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006948:	4b7f      	ldr	r3, [pc, #508]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006950:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006954:	d108      	bne.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006956:	f107 030c 	add.w	r3, r7, #12
 800695a:	4618      	mov	r0, r3
 800695c:	f000 fe94 	bl	8007688 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006964:	f000 bd1d 	b.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006968:	2300      	movs	r3, #0
 800696a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800696c:	f000 bd19 	b.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006970:	4b75      	ldr	r3, [pc, #468]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006974:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006978:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800697a:	4b73      	ldr	r3, [pc, #460]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0304 	and.w	r3, r3, #4
 8006982:	2b04      	cmp	r3, #4
 8006984:	d10c      	bne.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006988:	2b00      	cmp	r3, #0
 800698a:	d109      	bne.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800698c:	4b6e      	ldr	r3, [pc, #440]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	08db      	lsrs	r3, r3, #3
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	4a6d      	ldr	r2, [pc, #436]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006998:	fa22 f303 	lsr.w	r3, r2, r3
 800699c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800699e:	e01f      	b.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069a0:	4b69      	ldr	r3, [pc, #420]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ac:	d106      	bne.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80069ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069b4:	d102      	bne.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069b6:	4b66      	ldr	r3, [pc, #408]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80069b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069ba:	e011      	b.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069bc:	4b62      	ldr	r3, [pc, #392]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069c8:	d106      	bne.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80069ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069d0:	d102      	bne.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80069d2:	4b60      	ldr	r3, [pc, #384]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80069d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069d6:	e003      	b.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80069d8:	2300      	movs	r3, #0
 80069da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80069dc:	f000 bce1 	b.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069e0:	f000 bcdf 	b.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80069e4:	4b5c      	ldr	r3, [pc, #368]	@ (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80069e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069e8:	f000 bcdb 	b.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069f0:	f000 bcd7 	b.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80069f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069f8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80069fc:	430b      	orrs	r3, r1
 80069fe:	f040 80ad 	bne.w	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006a02:	4b51      	ldr	r3, [pc, #324]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a06:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006a0a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a12:	d056      	beq.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a1a:	f200 8090 	bhi.w	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a20:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a22:	f000 8088 	beq.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a28:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a2a:	f200 8088 	bhi.w	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a30:	2b80      	cmp	r3, #128	@ 0x80
 8006a32:	d032      	beq.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a36:	2b80      	cmp	r3, #128	@ 0x80
 8006a38:	f200 8081 	bhi.w	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a44:	2b40      	cmp	r3, #64	@ 0x40
 8006a46:	d014      	beq.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006a48:	e079      	b.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a56:	d108      	bne.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 ff67 	bl	8007930 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a66:	f000 bc9c 	b.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a6e:	f000 bc98 	b.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a72:	4b35      	ldr	r3, [pc, #212]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a7e:	d108      	bne.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a80:	f107 0318 	add.w	r3, r7, #24
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 fcab 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a8e:	f000 bc88 	b.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a96:	f000 bc84 	b.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006aa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aa6:	d108      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aa8:	f107 030c 	add.w	r3, r7, #12
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 fdeb 	bl	8007688 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ab6:	f000 bc74 	b.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006aba:	2300      	movs	r3, #0
 8006abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006abe:	f000 bc70 	b.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ac2:	4b21      	ldr	r3, [pc, #132]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ac6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006aca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006acc:	4b1e      	ldr	r3, [pc, #120]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0304 	and.w	r3, r3, #4
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d10c      	bne.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d109      	bne.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ade:	4b1a      	ldr	r3, [pc, #104]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	08db      	lsrs	r3, r3, #3
 8006ae4:	f003 0303 	and.w	r3, r3, #3
 8006ae8:	4a18      	ldr	r2, [pc, #96]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006aea:	fa22 f303 	lsr.w	r3, r2, r3
 8006aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006af0:	e01f      	b.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006af2:	4b15      	ldr	r3, [pc, #84]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006afe:	d106      	bne.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b06:	d102      	bne.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b08:	4b11      	ldr	r3, [pc, #68]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b0c:	e011      	b.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b1a:	d106      	bne.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b22:	d102      	bne.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b24:	4b0b      	ldr	r3, [pc, #44]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b28:	e003      	b.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006b2e:	f000 bc38 	b.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b32:	f000 bc36 	b.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b36:	4b08      	ldr	r3, [pc, #32]	@ (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b3a:	f000 bc32 	b.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b42:	f000 bc2e 	b.w	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b46:	bf00      	nop
 8006b48:	58024400 	.word	0x58024400
 8006b4c:	03d09000 	.word	0x03d09000
 8006b50:	003d0900 	.word	0x003d0900
 8006b54:	007a1200 	.word	0x007a1200
 8006b58:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b60:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006b64:	430b      	orrs	r3, r1
 8006b66:	f040 809c 	bne.w	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006b6a:	4b9e      	ldr	r3, [pc, #632]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b6e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006b72:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b7a:	d054      	beq.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b82:	f200 808b 	bhi.w	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b88:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006b8c:	f000 8083 	beq.w	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b92:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006b96:	f200 8081 	bhi.w	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ba0:	d02f      	beq.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ba8:	d878      	bhi.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d004      	beq.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bb6:	d012      	beq.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006bb8:	e070      	b.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bba:	4b8a      	ldr	r3, [pc, #552]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bc6:	d107      	bne.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 feaf 	bl	8007930 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bd6:	e3e4      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bdc:	e3e1      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bde:	4b81      	ldr	r3, [pc, #516]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006be6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bea:	d107      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bec:	f107 0318 	add.w	r3, r7, #24
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 fbf5 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bfa:	e3d2      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c00:	e3cf      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c02:	4b78      	ldr	r3, [pc, #480]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c0e:	d107      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c10:	f107 030c 	add.w	r3, r7, #12
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 fd37 	bl	8007688 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c1e:	e3c0      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c24:	e3bd      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c26:	4b6f      	ldr	r3, [pc, #444]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c2e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c30:	4b6c      	ldr	r3, [pc, #432]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0304 	and.w	r3, r3, #4
 8006c38:	2b04      	cmp	r3, #4
 8006c3a:	d10c      	bne.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d109      	bne.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c42:	4b68      	ldr	r3, [pc, #416]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	08db      	lsrs	r3, r3, #3
 8006c48:	f003 0303 	and.w	r3, r3, #3
 8006c4c:	4a66      	ldr	r2, [pc, #408]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c54:	e01e      	b.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c56:	4b63      	ldr	r3, [pc, #396]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c62:	d106      	bne.n	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c6a:	d102      	bne.n	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c6c:	4b5f      	ldr	r3, [pc, #380]	@ (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c70:	e010      	b.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c72:	4b5c      	ldr	r3, [pc, #368]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c7e:	d106      	bne.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c86:	d102      	bne.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c88:	4b59      	ldr	r3, [pc, #356]	@ (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c8c:	e002      	b.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006c92:	e386      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c94:	e385      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c96:	4b57      	ldr	r3, [pc, #348]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c9a:	e382      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ca0:	e37f      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ca6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006caa:	430b      	orrs	r3, r1
 8006cac:	f040 80a7 	bne.w	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006cb0:	4b4c      	ldr	r3, [pc, #304]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cb4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006cb8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cc0:	d055      	beq.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cc8:	f200 8096 	bhi.w	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006cd2:	f000 8084 	beq.w	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006cdc:	f200 808c 	bhi.w	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ce6:	d030      	beq.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cee:	f200 8083 	bhi.w	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d004      	beq.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cfe:	d012      	beq.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006d00:	e07a      	b.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d02:	4b38      	ldr	r3, [pc, #224]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d0e:	d107      	bne.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d14:	4618      	mov	r0, r3
 8006d16:	f000 fe0b 	bl	8007930 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d1e:	e340      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d24:	e33d      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d26:	4b2f      	ldr	r3, [pc, #188]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d32:	d107      	bne.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d34:	f107 0318 	add.w	r3, r7, #24
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 fb51 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d42:	e32e      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d44:	2300      	movs	r3, #0
 8006d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d48:	e32b      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d4a:	4b26      	ldr	r3, [pc, #152]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d56:	d107      	bne.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d58:	f107 030c 	add.w	r3, r7, #12
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f000 fc93 	bl	8007688 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d66:	e31c      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d6c:	e319      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006d76:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d78:	4b1a      	ldr	r3, [pc, #104]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0304 	and.w	r3, r3, #4
 8006d80:	2b04      	cmp	r3, #4
 8006d82:	d10c      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d109      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d8a:	4b16      	ldr	r3, [pc, #88]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	08db      	lsrs	r3, r3, #3
 8006d90:	f003 0303 	and.w	r3, r3, #3
 8006d94:	4a14      	ldr	r2, [pc, #80]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006d96:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d9c:	e01e      	b.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d9e:	4b11      	ldr	r3, [pc, #68]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006daa:	d106      	bne.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006db2:	d102      	bne.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006db4:	4b0d      	ldr	r3, [pc, #52]	@ (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006db8:	e010      	b.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006dba:	4b0a      	ldr	r3, [pc, #40]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dc6:	d106      	bne.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dce:	d102      	bne.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006dd0:	4b07      	ldr	r3, [pc, #28]	@ (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dd4:	e002      	b.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006dda:	e2e2      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ddc:	e2e1      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006dde:	4b05      	ldr	r3, [pc, #20]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006de2:	e2de      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006de4:	58024400 	.word	0x58024400
 8006de8:	03d09000 	.word	0x03d09000
 8006dec:	003d0900 	.word	0x003d0900
 8006df0:	007a1200 	.word	0x007a1200
 8006df4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dfc:	e2d1      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006dfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e02:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006e06:	430b      	orrs	r3, r1
 8006e08:	f040 809c 	bne.w	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006e0c:	4b93      	ldr	r3, [pc, #588]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e10:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006e14:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e1c:	d054      	beq.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e24:	f200 808b 	bhi.w	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e2e:	f000 8083 	beq.w	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e38:	f200 8081 	bhi.w	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e42:	d02f      	beq.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e4a:	d878      	bhi.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d004      	beq.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e58:	d012      	beq.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006e5a:	e070      	b.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e5c:	4b7f      	ldr	r3, [pc, #508]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e68:	d107      	bne.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 fd5e 	bl	8007930 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e78:	e293      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e7e:	e290      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e80:	4b76      	ldr	r3, [pc, #472]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e8c:	d107      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e8e:	f107 0318 	add.w	r3, r7, #24
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 faa4 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e9c:	e281      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ea2:	e27e      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ea4:	4b6d      	ldr	r3, [pc, #436]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006eac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006eb0:	d107      	bne.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eb2:	f107 030c 	add.w	r3, r7, #12
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 fbe6 	bl	8007688 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ec0:	e26f      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ec6:	e26c      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ec8:	4b64      	ldr	r3, [pc, #400]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ecc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006ed0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ed2:	4b62      	ldr	r3, [pc, #392]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0304 	and.w	r3, r3, #4
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	d10c      	bne.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d109      	bne.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ee4:	4b5d      	ldr	r3, [pc, #372]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	08db      	lsrs	r3, r3, #3
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	4a5c      	ldr	r2, [pc, #368]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ef6:	e01e      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ef8:	4b58      	ldr	r3, [pc, #352]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f04:	d106      	bne.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f0c:	d102      	bne.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f0e:	4b55      	ldr	r3, [pc, #340]	@ (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f12:	e010      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f14:	4b51      	ldr	r3, [pc, #324]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f20:	d106      	bne.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f28:	d102      	bne.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f2a:	4b4f      	ldr	r3, [pc, #316]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f2e:	e002      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006f34:	e235      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f36:	e234      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f38:	4b4c      	ldr	r3, [pc, #304]	@ (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f3c:	e231      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f42:	e22e      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006f44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f48:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	f040 808f 	bne.w	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006f52:	4b42      	ldr	r3, [pc, #264]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f56:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f62:	d06b      	beq.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f6a:	d874      	bhi.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f72:	d056      	beq.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f7a:	d86c      	bhi.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f82:	d03b      	beq.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f8a:	d864      	bhi.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f92:	d021      	beq.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f9a:	d85c      	bhi.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d004      	beq.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fa8:	d004      	beq.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006faa:	e054      	b.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006fac:	f7fe fa4c 	bl	8005448 <HAL_RCC_GetPCLK1Freq>
 8006fb0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006fb2:	e1f6      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fb4:	4b29      	ldr	r3, [pc, #164]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fc0:	d107      	bne.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fc2:	f107 0318 	add.w	r3, r7, #24
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fa0a 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fd0:	e1e7      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fd6:	e1e4      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fd8:	4b20      	ldr	r3, [pc, #128]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fe0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fe4:	d107      	bne.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fe6:	f107 030c 	add.w	r3, r7, #12
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 fb4c 	bl	8007688 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ff4:	e1d5      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ffa:	e1d2      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ffc:	4b17      	ldr	r3, [pc, #92]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0304 	and.w	r3, r3, #4
 8007004:	2b04      	cmp	r3, #4
 8007006:	d109      	bne.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007008:	4b14      	ldr	r3, [pc, #80]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	08db      	lsrs	r3, r3, #3
 800700e:	f003 0303 	and.w	r3, r3, #3
 8007012:	4a13      	ldr	r2, [pc, #76]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007014:	fa22 f303 	lsr.w	r3, r2, r3
 8007018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800701a:	e1c2      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800701c:	2300      	movs	r3, #0
 800701e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007020:	e1bf      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007022:	4b0e      	ldr	r3, [pc, #56]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800702a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800702e:	d102      	bne.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007030:	4b0c      	ldr	r3, [pc, #48]	@ (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007034:	e1b5      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007036:	2300      	movs	r3, #0
 8007038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800703a:	e1b2      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800703c:	4b07      	ldr	r3, [pc, #28]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007044:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007048:	d102      	bne.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800704a:	4b07      	ldr	r3, [pc, #28]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800704c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800704e:	e1a8      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007050:	2300      	movs	r3, #0
 8007052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007054:	e1a5      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800705a:	e1a2      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800705c:	58024400 	.word	0x58024400
 8007060:	03d09000 	.word	0x03d09000
 8007064:	003d0900 	.word	0x003d0900
 8007068:	007a1200 	.word	0x007a1200
 800706c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007074:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007078:	430b      	orrs	r3, r1
 800707a:	d173      	bne.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800707c:	4b9c      	ldr	r3, [pc, #624]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800707e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007080:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007084:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007088:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800708c:	d02f      	beq.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800708e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007090:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007094:	d863      	bhi.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007098:	2b00      	cmp	r3, #0
 800709a:	d004      	beq.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800709c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070a2:	d012      	beq.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80070a4:	e05b      	b.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070a6:	4b92      	ldr	r3, [pc, #584]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070b2:	d107      	bne.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070b4:	f107 0318 	add.w	r3, r7, #24
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 f991 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070c2:	e16e      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070c4:	2300      	movs	r3, #0
 80070c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070c8:	e16b      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070ca:	4b89      	ldr	r3, [pc, #548]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070d6:	d107      	bne.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070d8:	f107 030c 	add.w	r3, r7, #12
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 fad3 	bl	8007688 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070e6:	e15c      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070e8:	2300      	movs	r3, #0
 80070ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070ec:	e159      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070ee:	4b80      	ldr	r3, [pc, #512]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80070f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070f8:	4b7d      	ldr	r3, [pc, #500]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b04      	cmp	r3, #4
 8007102:	d10c      	bne.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007106:	2b00      	cmp	r3, #0
 8007108:	d109      	bne.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800710a:	4b79      	ldr	r3, [pc, #484]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	08db      	lsrs	r3, r3, #3
 8007110:	f003 0303 	and.w	r3, r3, #3
 8007114:	4a77      	ldr	r2, [pc, #476]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007116:	fa22 f303 	lsr.w	r3, r2, r3
 800711a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800711c:	e01e      	b.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800711e:	4b74      	ldr	r3, [pc, #464]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800712a:	d106      	bne.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800712c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800712e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007132:	d102      	bne.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007134:	4b70      	ldr	r3, [pc, #448]	@ (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007138:	e010      	b.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800713a:	4b6d      	ldr	r3, [pc, #436]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007142:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007146:	d106      	bne.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800714a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800714e:	d102      	bne.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007150:	4b6a      	ldr	r3, [pc, #424]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007154:	e002      	b.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007156:	2300      	movs	r3, #0
 8007158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800715a:	e122      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800715c:	e121      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007162:	e11e      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007164:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007168:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800716c:	430b      	orrs	r3, r1
 800716e:	d133      	bne.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007170:	4b5f      	ldr	r3, [pc, #380]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007178:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800717a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717c:	2b00      	cmp	r3, #0
 800717e:	d004      	beq.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007182:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007186:	d012      	beq.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007188:	e023      	b.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800718a:	4b59      	ldr	r3, [pc, #356]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007192:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007196:	d107      	bne.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800719c:	4618      	mov	r0, r3
 800719e:	f000 fbc7 	bl	8007930 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071a6:	e0fc      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071ac:	e0f9      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071ae:	4b50      	ldr	r3, [pc, #320]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071ba:	d107      	bne.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071bc:	f107 0318 	add.w	r3, r7, #24
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 f90d 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071ca:	e0ea      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071cc:	2300      	movs	r3, #0
 80071ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071d0:	e0e7      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071d6:	e0e4      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80071d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071dc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80071e0:	430b      	orrs	r3, r1
 80071e2:	f040 808d 	bne.w	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80071e6:	4b42      	ldr	r3, [pc, #264]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ea:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80071ee:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80071f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80071f6:	d06b      	beq.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80071f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80071fe:	d874      	bhi.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007206:	d056      	beq.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800720e:	d86c      	bhi.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007212:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007216:	d03b      	beq.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800721a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800721e:	d864      	bhi.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007222:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007226:	d021      	beq.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800722a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800722e:	d85c      	bhi.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007232:	2b00      	cmp	r3, #0
 8007234:	d004      	beq.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007238:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800723c:	d004      	beq.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800723e:	e054      	b.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007240:	f000 f8b8 	bl	80073b4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007244:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007246:	e0ac      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007248:	4b29      	ldr	r3, [pc, #164]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007250:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007254:	d107      	bne.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007256:	f107 0318 	add.w	r3, r7, #24
 800725a:	4618      	mov	r0, r3
 800725c:	f000 f8c0 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007264:	e09d      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800726a:	e09a      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800726c:	4b20      	ldr	r3, [pc, #128]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007278:	d107      	bne.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800727a:	f107 030c 	add.w	r3, r7, #12
 800727e:	4618      	mov	r0, r3
 8007280:	f000 fa02 	bl	8007688 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007288:	e08b      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800728a:	2300      	movs	r3, #0
 800728c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800728e:	e088      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007290:	4b17      	ldr	r3, [pc, #92]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0304 	and.w	r3, r3, #4
 8007298:	2b04      	cmp	r3, #4
 800729a:	d109      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800729c:	4b14      	ldr	r3, [pc, #80]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	08db      	lsrs	r3, r3, #3
 80072a2:	f003 0303 	and.w	r3, r3, #3
 80072a6:	4a13      	ldr	r2, [pc, #76]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80072a8:	fa22 f303 	lsr.w	r3, r2, r3
 80072ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072ae:	e078      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072b4:	e075      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80072b6:	4b0e      	ldr	r3, [pc, #56]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072c2:	d102      	bne.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80072c4:	4b0c      	ldr	r3, [pc, #48]	@ (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80072c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072c8:	e06b      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072ca:	2300      	movs	r3, #0
 80072cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072ce:	e068      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80072d0:	4b07      	ldr	r3, [pc, #28]	@ (80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072dc:	d102      	bne.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80072de:	4b07      	ldr	r3, [pc, #28]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80072e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072e2:	e05e      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072e8:	e05b      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80072ea:	2300      	movs	r3, #0
 80072ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072ee:	e058      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072f0:	58024400 	.word	0x58024400
 80072f4:	03d09000 	.word	0x03d09000
 80072f8:	003d0900 	.word	0x003d0900
 80072fc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007304:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007308:	430b      	orrs	r3, r1
 800730a:	d148      	bne.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800730c:	4b27      	ldr	r3, [pc, #156]	@ (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800730e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007310:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007314:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007318:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800731c:	d02a      	beq.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800731e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007320:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007324:	d838      	bhi.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007328:	2b00      	cmp	r3, #0
 800732a:	d004      	beq.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800732c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007332:	d00d      	beq.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007334:	e030      	b.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007336:	4b1d      	ldr	r3, [pc, #116]	@ (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800733e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007342:	d102      	bne.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007344:	4b1a      	ldr	r3, [pc, #104]	@ (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007348:	e02b      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800734a:	2300      	movs	r3, #0
 800734c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800734e:	e028      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007350:	4b16      	ldr	r3, [pc, #88]	@ (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007358:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800735c:	d107      	bne.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800735e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007362:	4618      	mov	r0, r3
 8007364:	f000 fae4 	bl	8007930 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800736c:	e019      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800736e:	2300      	movs	r3, #0
 8007370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007372:	e016      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007374:	4b0d      	ldr	r3, [pc, #52]	@ (80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800737c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007380:	d107      	bne.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007382:	f107 0318 	add.w	r3, r7, #24
 8007386:	4618      	mov	r0, r3
 8007388:	f000 f82a 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007390:	e007      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007392:	2300      	movs	r3, #0
 8007394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007396:	e004      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007398:	2300      	movs	r3, #0
 800739a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800739c:	e001      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80073a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3740      	adds	r7, #64	@ 0x40
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	58024400 	.word	0x58024400
 80073b0:	007a1200 	.word	0x007a1200

080073b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80073b8:	f7fe f816 	bl	80053e8 <HAL_RCC_GetHCLKFreq>
 80073bc:	4602      	mov	r2, r0
 80073be:	4b06      	ldr	r3, [pc, #24]	@ (80073d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	091b      	lsrs	r3, r3, #4
 80073c4:	f003 0307 	and.w	r3, r3, #7
 80073c8:	4904      	ldr	r1, [pc, #16]	@ (80073dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80073ca:	5ccb      	ldrb	r3, [r1, r3]
 80073cc:	f003 031f 	and.w	r3, r3, #31
 80073d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	58024400 	.word	0x58024400
 80073dc:	080093dc 	.word	0x080093dc

080073e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b089      	sub	sp, #36	@ 0x24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073e8:	4ba1      	ldr	r3, [pc, #644]	@ (8007670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ec:	f003 0303 	and.w	r3, r3, #3
 80073f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80073f2:	4b9f      	ldr	r3, [pc, #636]	@ (8007670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f6:	0b1b      	lsrs	r3, r3, #12
 80073f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80073fe:	4b9c      	ldr	r3, [pc, #624]	@ (8007670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007402:	091b      	lsrs	r3, r3, #4
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800740a:	4b99      	ldr	r3, [pc, #612]	@ (8007670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800740c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800740e:	08db      	lsrs	r3, r3, #3
 8007410:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	fb02 f303 	mul.w	r3, r2, r3
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007422:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 8111 	beq.w	8007650 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	2b02      	cmp	r3, #2
 8007432:	f000 8083 	beq.w	800753c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	2b02      	cmp	r3, #2
 800743a:	f200 80a1 	bhi.w	8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d003      	beq.n	800744c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d056      	beq.n	80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800744a:	e099      	b.n	8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800744c:	4b88      	ldr	r3, [pc, #544]	@ (8007670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0320 	and.w	r3, r3, #32
 8007454:	2b00      	cmp	r3, #0
 8007456:	d02d      	beq.n	80074b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007458:	4b85      	ldr	r3, [pc, #532]	@ (8007670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	08db      	lsrs	r3, r3, #3
 800745e:	f003 0303 	and.w	r3, r3, #3
 8007462:	4a84      	ldr	r2, [pc, #528]	@ (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007464:	fa22 f303 	lsr.w	r3, r2, r3
 8007468:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	ee07 3a90 	vmov	s15, r3
 8007470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	ee07 3a90 	vmov	s15, r3
 800747a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007482:	4b7b      	ldr	r3, [pc, #492]	@ (8007670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007492:	ed97 6a03 	vldr	s12, [r7, #12]
 8007496:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007678 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800749a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800749e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80074b2:	e087      	b.n	80075c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	ee07 3a90 	vmov	s15, r3
 80074ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800767c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80074c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074c6:	4b6a      	ldr	r3, [pc, #424]	@ (8007670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007678 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074f6:	e065      	b.n	80075c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	ee07 3a90 	vmov	s15, r3
 80074fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007502:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750a:	4b59      	ldr	r3, [pc, #356]	@ (8007670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800750c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751a:	ed97 6a03 	vldr	s12, [r7, #12]
 800751e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007678 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800752e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800753a:	e043      	b.n	80075c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	ee07 3a90 	vmov	s15, r3
 8007542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007546:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800754a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800754e:	4b48      	ldr	r3, [pc, #288]	@ (8007670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800755e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007562:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007678 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800756e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800757e:	e021      	b.n	80075c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800758e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007592:	4b37      	ldr	r3, [pc, #220]	@ (8007670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007678 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80075c4:	4b2a      	ldr	r3, [pc, #168]	@ (8007670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c8:	0a5b      	lsrs	r3, r3, #9
 80075ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075de:	edd7 6a07 	vldr	s13, [r7, #28]
 80075e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ea:	ee17 2a90 	vmov	r2, s15
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80075f2:	4b1f      	ldr	r3, [pc, #124]	@ (8007670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f6:	0c1b      	lsrs	r3, r3, #16
 80075f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075fc:	ee07 3a90 	vmov	s15, r3
 8007600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007604:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007608:	ee37 7a87 	vadd.f32	s14, s15, s14
 800760c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007618:	ee17 2a90 	vmov	r2, s15
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007620:	4b13      	ldr	r3, [pc, #76]	@ (8007670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007624:	0e1b      	lsrs	r3, r3, #24
 8007626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800762a:	ee07 3a90 	vmov	s15, r3
 800762e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007632:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007636:	ee37 7a87 	vadd.f32	s14, s15, s14
 800763a:	edd7 6a07 	vldr	s13, [r7, #28]
 800763e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007646:	ee17 2a90 	vmov	r2, s15
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800764e:	e008      	b.n	8007662 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	609a      	str	r2, [r3, #8]
}
 8007662:	bf00      	nop
 8007664:	3724      	adds	r7, #36	@ 0x24
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	58024400 	.word	0x58024400
 8007674:	03d09000 	.word	0x03d09000
 8007678:	46000000 	.word	0x46000000
 800767c:	4c742400 	.word	0x4c742400
 8007680:	4a742400 	.word	0x4a742400
 8007684:	4af42400 	.word	0x4af42400

08007688 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007688:	b480      	push	{r7}
 800768a:	b089      	sub	sp, #36	@ 0x24
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007690:	4ba1      	ldr	r3, [pc, #644]	@ (8007918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007694:	f003 0303 	and.w	r3, r3, #3
 8007698:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800769a:	4b9f      	ldr	r3, [pc, #636]	@ (8007918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800769c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800769e:	0d1b      	lsrs	r3, r3, #20
 80076a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80076a6:	4b9c      	ldr	r3, [pc, #624]	@ (8007918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076aa:	0a1b      	lsrs	r3, r3, #8
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80076b2:	4b99      	ldr	r3, [pc, #612]	@ (8007918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076b6:	08db      	lsrs	r3, r3, #3
 80076b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	fb02 f303 	mul.w	r3, r2, r3
 80076c2:	ee07 3a90 	vmov	s15, r3
 80076c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 8111 	beq.w	80078f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	2b02      	cmp	r3, #2
 80076da:	f000 8083 	beq.w	80077e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	f200 80a1 	bhi.w	8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d056      	beq.n	80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80076f2:	e099      	b.n	8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076f4:	4b88      	ldr	r3, [pc, #544]	@ (8007918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0320 	and.w	r3, r3, #32
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d02d      	beq.n	800775c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007700:	4b85      	ldr	r3, [pc, #532]	@ (8007918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	08db      	lsrs	r3, r3, #3
 8007706:	f003 0303 	and.w	r3, r3, #3
 800770a:	4a84      	ldr	r2, [pc, #528]	@ (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800770c:	fa22 f303 	lsr.w	r3, r2, r3
 8007710:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	ee07 3a90 	vmov	s15, r3
 8007718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	ee07 3a90 	vmov	s15, r3
 8007722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800772a:	4b7b      	ldr	r3, [pc, #492]	@ (8007918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800772c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800772e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007732:	ee07 3a90 	vmov	s15, r3
 8007736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800773a:	ed97 6a03 	vldr	s12, [r7, #12]
 800773e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007920 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800774a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800774e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007756:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800775a:	e087      	b.n	800786c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	ee07 3a90 	vmov	s15, r3
 8007762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007766:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800776a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800776e:	4b6a      	ldr	r3, [pc, #424]	@ (8007918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800777e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007782:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007920 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800778a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800778e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800779a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800779e:	e065      	b.n	800786c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	ee07 3a90 	vmov	s15, r3
 80077a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007928 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077b2:	4b59      	ldr	r3, [pc, #356]	@ (8007918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ba:	ee07 3a90 	vmov	s15, r3
 80077be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007920 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077e2:	e043      	b.n	800786c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	ee07 3a90 	vmov	s15, r3
 80077ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800792c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80077f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077f6:	4b48      	ldr	r3, [pc, #288]	@ (8007918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077fe:	ee07 3a90 	vmov	s15, r3
 8007802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007806:	ed97 6a03 	vldr	s12, [r7, #12]
 800780a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007920 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800780e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800781a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800781e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007822:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007826:	e021      	b.n	800786c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	ee07 3a90 	vmov	s15, r3
 800782e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007832:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007928 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800783a:	4b37      	ldr	r3, [pc, #220]	@ (8007918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800783c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800783e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007842:	ee07 3a90 	vmov	s15, r3
 8007846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784a:	ed97 6a03 	vldr	s12, [r7, #12]
 800784e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007920 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800785a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800785e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007866:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800786a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800786c:	4b2a      	ldr	r3, [pc, #168]	@ (8007918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800786e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007870:	0a5b      	lsrs	r3, r3, #9
 8007872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007882:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007886:	edd7 6a07 	vldr	s13, [r7, #28]
 800788a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800788e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007892:	ee17 2a90 	vmov	r2, s15
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800789a:	4b1f      	ldr	r3, [pc, #124]	@ (8007918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800789c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789e:	0c1b      	lsrs	r3, r3, #16
 80078a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078a4:	ee07 3a90 	vmov	s15, r3
 80078a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80078b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078c0:	ee17 2a90 	vmov	r2, s15
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80078c8:	4b13      	ldr	r3, [pc, #76]	@ (8007918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078cc:	0e1b      	lsrs	r3, r3, #24
 80078ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80078e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ee:	ee17 2a90 	vmov	r2, s15
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80078f6:	e008      	b.n	800790a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	609a      	str	r2, [r3, #8]
}
 800790a:	bf00      	nop
 800790c:	3724      	adds	r7, #36	@ 0x24
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	58024400 	.word	0x58024400
 800791c:	03d09000 	.word	0x03d09000
 8007920:	46000000 	.word	0x46000000
 8007924:	4c742400 	.word	0x4c742400
 8007928:	4a742400 	.word	0x4a742400
 800792c:	4af42400 	.word	0x4af42400

08007930 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007930:	b480      	push	{r7}
 8007932:	b089      	sub	sp, #36	@ 0x24
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007938:	4ba0      	ldr	r3, [pc, #640]	@ (8007bbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800793a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800793c:	f003 0303 	and.w	r3, r3, #3
 8007940:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007942:	4b9e      	ldr	r3, [pc, #632]	@ (8007bbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007946:	091b      	lsrs	r3, r3, #4
 8007948:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800794c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800794e:	4b9b      	ldr	r3, [pc, #620]	@ (8007bbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007958:	4b98      	ldr	r3, [pc, #608]	@ (8007bbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800795a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800795c:	08db      	lsrs	r3, r3, #3
 800795e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	fb02 f303 	mul.w	r3, r2, r3
 8007968:	ee07 3a90 	vmov	s15, r3
 800796c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007970:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 8111 	beq.w	8007b9e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	2b02      	cmp	r3, #2
 8007980:	f000 8083 	beq.w	8007a8a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	2b02      	cmp	r3, #2
 8007988:	f200 80a1 	bhi.w	8007ace <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d056      	beq.n	8007a46 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007998:	e099      	b.n	8007ace <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800799a:	4b88      	ldr	r3, [pc, #544]	@ (8007bbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 0320 	and.w	r3, r3, #32
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d02d      	beq.n	8007a02 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079a6:	4b85      	ldr	r3, [pc, #532]	@ (8007bbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	08db      	lsrs	r3, r3, #3
 80079ac:	f003 0303 	and.w	r3, r3, #3
 80079b0:	4a83      	ldr	r2, [pc, #524]	@ (8007bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80079b2:	fa22 f303 	lsr.w	r3, r2, r3
 80079b6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	ee07 3a90 	vmov	s15, r3
 80079be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	ee07 3a90 	vmov	s15, r3
 80079c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079d0:	4b7a      	ldr	r3, [pc, #488]	@ (8007bbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079d8:	ee07 3a90 	vmov	s15, r3
 80079dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80079e4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079fc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a00:	e087      	b.n	8007b12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	ee07 3a90 	vmov	s15, r3
 8007a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a0c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a14:	4b69      	ldr	r3, [pc, #420]	@ (8007bbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a1c:	ee07 3a90 	vmov	s15, r3
 8007a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a24:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a28:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a44:	e065      	b.n	8007b12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	ee07 3a90 	vmov	s15, r3
 8007a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a50:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007bcc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007a54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a58:	4b58      	ldr	r3, [pc, #352]	@ (8007bbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a60:	ee07 3a90 	vmov	s15, r3
 8007a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a68:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a6c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a88:	e043      	b.n	8007b12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	ee07 3a90 	vmov	s15, r3
 8007a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a94:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007a98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a9c:	4b47      	ldr	r3, [pc, #284]	@ (8007bbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa4:	ee07 3a90 	vmov	s15, r3
 8007aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aac:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ab0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ab4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ab8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007abc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ac0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ac8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007acc:	e021      	b.n	8007b12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	ee07 3a90 	vmov	s15, r3
 8007ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007adc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ae0:	4b36      	ldr	r3, [pc, #216]	@ (8007bbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae8:	ee07 3a90 	vmov	s15, r3
 8007aec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007af0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007af4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007af8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007afc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b10:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007b12:	4b2a      	ldr	r3, [pc, #168]	@ (8007bbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b16:	0a5b      	lsrs	r3, r3, #9
 8007b18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b1c:	ee07 3a90 	vmov	s15, r3
 8007b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b38:	ee17 2a90 	vmov	r2, s15
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007b40:	4b1e      	ldr	r3, [pc, #120]	@ (8007bbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b44:	0c1b      	lsrs	r3, r3, #16
 8007b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b4a:	ee07 3a90 	vmov	s15, r3
 8007b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b66:	ee17 2a90 	vmov	r2, s15
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007b6e:	4b13      	ldr	r3, [pc, #76]	@ (8007bbc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b72:	0e1b      	lsrs	r3, r3, #24
 8007b74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b78:	ee07 3a90 	vmov	s15, r3
 8007b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b88:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b94:	ee17 2a90 	vmov	r2, s15
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007b9c:	e008      	b.n	8007bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	609a      	str	r2, [r3, #8]
}
 8007bb0:	bf00      	nop
 8007bb2:	3724      	adds	r7, #36	@ 0x24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	58024400 	.word	0x58024400
 8007bc0:	03d09000 	.word	0x03d09000
 8007bc4:	46000000 	.word	0x46000000
 8007bc8:	4c742400 	.word	0x4c742400
 8007bcc:	4a742400 	.word	0x4a742400
 8007bd0:	4af42400 	.word	0x4af42400

08007bd4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007be2:	4b53      	ldr	r3, [pc, #332]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be6:	f003 0303 	and.w	r3, r3, #3
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d101      	bne.n	8007bf2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e099      	b.n	8007d26 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007bf2:	4b4f      	ldr	r3, [pc, #316]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a4e      	ldr	r2, [pc, #312]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007bf8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007bfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bfe:	f7f9 fccf 	bl	80015a0 <HAL_GetTick>
 8007c02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c04:	e008      	b.n	8007c18 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c06:	f7f9 fccb 	bl	80015a0 <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d901      	bls.n	8007c18 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e086      	b.n	8007d26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c18:	4b45      	ldr	r3, [pc, #276]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1f0      	bne.n	8007c06 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c24:	4b42      	ldr	r3, [pc, #264]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c28:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	031b      	lsls	r3, r3, #12
 8007c32:	493f      	ldr	r1, [pc, #252]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007c34:	4313      	orrs	r3, r2
 8007c36:	628b      	str	r3, [r1, #40]	@ 0x28
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	025b      	lsls	r3, r3, #9
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	041b      	lsls	r3, r3, #16
 8007c56:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c5a:	431a      	orrs	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	3b01      	subs	r3, #1
 8007c62:	061b      	lsls	r3, r3, #24
 8007c64:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007c68:	4931      	ldr	r1, [pc, #196]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007c6e:	4b30      	ldr	r3, [pc, #192]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	492d      	ldr	r1, [pc, #180]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c80:	4b2b      	ldr	r3, [pc, #172]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c84:	f023 0220 	bic.w	r2, r3, #32
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	4928      	ldr	r1, [pc, #160]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007c92:	4b27      	ldr	r3, [pc, #156]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c96:	4a26      	ldr	r2, [pc, #152]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007c98:	f023 0310 	bic.w	r3, r3, #16
 8007c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007c9e:	4b24      	ldr	r3, [pc, #144]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007ca0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ca2:	4b24      	ldr	r3, [pc, #144]	@ (8007d34 <RCCEx_PLL2_Config+0x160>)
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	69d2      	ldr	r2, [r2, #28]
 8007caa:	00d2      	lsls	r2, r2, #3
 8007cac:	4920      	ldr	r1, [pc, #128]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007cb8:	f043 0310 	orr.w	r3, r3, #16
 8007cbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d106      	bne.n	8007cd2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc8:	4a19      	ldr	r2, [pc, #100]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007cca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007cce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007cd0:	e00f      	b.n	8007cf2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d106      	bne.n	8007ce6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007cd8:	4b15      	ldr	r3, [pc, #84]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cdc:	4a14      	ldr	r2, [pc, #80]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007cde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ce4:	e005      	b.n	8007cf2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007ce6:	4b12      	ldr	r3, [pc, #72]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cea:	4a11      	ldr	r2, [pc, #68]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007cec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007cf0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a0e      	ldr	r2, [pc, #56]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007cf8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007cfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cfe:	f7f9 fc4f 	bl	80015a0 <HAL_GetTick>
 8007d02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d04:	e008      	b.n	8007d18 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d06:	f7f9 fc4b 	bl	80015a0 <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d901      	bls.n	8007d18 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e006      	b.n	8007d26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d18:	4b05      	ldr	r3, [pc, #20]	@ (8007d30 <RCCEx_PLL2_Config+0x15c>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d0f0      	beq.n	8007d06 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	58024400 	.word	0x58024400
 8007d34:	ffff0007 	.word	0xffff0007

08007d38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d46:	4b53      	ldr	r3, [pc, #332]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d4a:	f003 0303 	and.w	r3, r3, #3
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d101      	bne.n	8007d56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e099      	b.n	8007e8a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d56:	4b4f      	ldr	r3, [pc, #316]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a4e      	ldr	r2, [pc, #312]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007d5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d62:	f7f9 fc1d 	bl	80015a0 <HAL_GetTick>
 8007d66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d68:	e008      	b.n	8007d7c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d6a:	f7f9 fc19 	bl	80015a0 <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d901      	bls.n	8007d7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e086      	b.n	8007e8a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d7c:	4b45      	ldr	r3, [pc, #276]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1f0      	bne.n	8007d6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007d88:	4b42      	ldr	r3, [pc, #264]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d8c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	051b      	lsls	r3, r3, #20
 8007d96:	493f      	ldr	r1, [pc, #252]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	3b01      	subs	r3, #1
 8007da2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	3b01      	subs	r3, #1
 8007dac:	025b      	lsls	r3, r3, #9
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	431a      	orrs	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	3b01      	subs	r3, #1
 8007db8:	041b      	lsls	r3, r3, #16
 8007dba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	061b      	lsls	r3, r3, #24
 8007dc8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007dcc:	4931      	ldr	r1, [pc, #196]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007dd2:	4b30      	ldr	r3, [pc, #192]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	492d      	ldr	r1, [pc, #180]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007de4:	4b2b      	ldr	r3, [pc, #172]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	4928      	ldr	r1, [pc, #160]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007df6:	4b27      	ldr	r3, [pc, #156]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfa:	4a26      	ldr	r2, [pc, #152]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e02:	4b24      	ldr	r3, [pc, #144]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007e04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e06:	4b24      	ldr	r3, [pc, #144]	@ (8007e98 <RCCEx_PLL3_Config+0x160>)
 8007e08:	4013      	ands	r3, r2
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	69d2      	ldr	r2, [r2, #28]
 8007e0e:	00d2      	lsls	r2, r2, #3
 8007e10:	4920      	ldr	r1, [pc, #128]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007e16:	4b1f      	ldr	r3, [pc, #124]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d106      	bne.n	8007e36 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e28:	4b1a      	ldr	r3, [pc, #104]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e2c:	4a19      	ldr	r2, [pc, #100]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007e2e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007e32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007e34:	e00f      	b.n	8007e56 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d106      	bne.n	8007e4a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007e3c:	4b15      	ldr	r3, [pc, #84]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e40:	4a14      	ldr	r2, [pc, #80]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007e42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007e46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007e48:	e005      	b.n	8007e56 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007e4a:	4b12      	ldr	r3, [pc, #72]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4e:	4a11      	ldr	r2, [pc, #68]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007e50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e54:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e56:	4b0f      	ldr	r3, [pc, #60]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a0e      	ldr	r2, [pc, #56]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e62:	f7f9 fb9d 	bl	80015a0 <HAL_GetTick>
 8007e66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e68:	e008      	b.n	8007e7c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e6a:	f7f9 fb99 	bl	80015a0 <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d901      	bls.n	8007e7c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e006      	b.n	8007e8a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e7c:	4b05      	ldr	r3, [pc, #20]	@ (8007e94 <RCCEx_PLL3_Config+0x15c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d0f0      	beq.n	8007e6a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	58024400 	.word	0x58024400
 8007e98:	ffff0007 	.word	0xffff0007

08007e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e049      	b.n	8007f42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d106      	bne.n	8007ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7f9 f924 	bl	8001110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	4619      	mov	r1, r3
 8007eda:	4610      	mov	r0, r2
 8007edc:	f000 f836 	bl	8007f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
	...

08007f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a46      	ldr	r2, [pc, #280]	@ (8008078 <TIM_Base_SetConfig+0x12c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d013      	beq.n	8007f8c <TIM_Base_SetConfig+0x40>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f6a:	d00f      	beq.n	8007f8c <TIM_Base_SetConfig+0x40>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a43      	ldr	r2, [pc, #268]	@ (800807c <TIM_Base_SetConfig+0x130>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d00b      	beq.n	8007f8c <TIM_Base_SetConfig+0x40>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a42      	ldr	r2, [pc, #264]	@ (8008080 <TIM_Base_SetConfig+0x134>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d007      	beq.n	8007f8c <TIM_Base_SetConfig+0x40>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a41      	ldr	r2, [pc, #260]	@ (8008084 <TIM_Base_SetConfig+0x138>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d003      	beq.n	8007f8c <TIM_Base_SetConfig+0x40>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a40      	ldr	r2, [pc, #256]	@ (8008088 <TIM_Base_SetConfig+0x13c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d108      	bne.n	8007f9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a35      	ldr	r2, [pc, #212]	@ (8008078 <TIM_Base_SetConfig+0x12c>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d01f      	beq.n	8007fe6 <TIM_Base_SetConfig+0x9a>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fac:	d01b      	beq.n	8007fe6 <TIM_Base_SetConfig+0x9a>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a32      	ldr	r2, [pc, #200]	@ (800807c <TIM_Base_SetConfig+0x130>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d017      	beq.n	8007fe6 <TIM_Base_SetConfig+0x9a>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a31      	ldr	r2, [pc, #196]	@ (8008080 <TIM_Base_SetConfig+0x134>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d013      	beq.n	8007fe6 <TIM_Base_SetConfig+0x9a>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a30      	ldr	r2, [pc, #192]	@ (8008084 <TIM_Base_SetConfig+0x138>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d00f      	beq.n	8007fe6 <TIM_Base_SetConfig+0x9a>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a2f      	ldr	r2, [pc, #188]	@ (8008088 <TIM_Base_SetConfig+0x13c>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d00b      	beq.n	8007fe6 <TIM_Base_SetConfig+0x9a>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a2e      	ldr	r2, [pc, #184]	@ (800808c <TIM_Base_SetConfig+0x140>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d007      	beq.n	8007fe6 <TIM_Base_SetConfig+0x9a>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a2d      	ldr	r2, [pc, #180]	@ (8008090 <TIM_Base_SetConfig+0x144>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d003      	beq.n	8007fe6 <TIM_Base_SetConfig+0x9a>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a2c      	ldr	r2, [pc, #176]	@ (8008094 <TIM_Base_SetConfig+0x148>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d108      	bne.n	8007ff8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	4313      	orrs	r3, r2
 8008004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	689a      	ldr	r2, [r3, #8]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a16      	ldr	r2, [pc, #88]	@ (8008078 <TIM_Base_SetConfig+0x12c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d00f      	beq.n	8008044 <TIM_Base_SetConfig+0xf8>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a18      	ldr	r2, [pc, #96]	@ (8008088 <TIM_Base_SetConfig+0x13c>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d00b      	beq.n	8008044 <TIM_Base_SetConfig+0xf8>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a17      	ldr	r2, [pc, #92]	@ (800808c <TIM_Base_SetConfig+0x140>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d007      	beq.n	8008044 <TIM_Base_SetConfig+0xf8>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a16      	ldr	r2, [pc, #88]	@ (8008090 <TIM_Base_SetConfig+0x144>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d003      	beq.n	8008044 <TIM_Base_SetConfig+0xf8>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a15      	ldr	r2, [pc, #84]	@ (8008094 <TIM_Base_SetConfig+0x148>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d103      	bne.n	800804c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	691a      	ldr	r2, [r3, #16]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b01      	cmp	r3, #1
 800805c:	d105      	bne.n	800806a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f023 0201 	bic.w	r2, r3, #1
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	611a      	str	r2, [r3, #16]
  }
}
 800806a:	bf00      	nop
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	40010000 	.word	0x40010000
 800807c:	40000400 	.word	0x40000400
 8008080:	40000800 	.word	0x40000800
 8008084:	40000c00 	.word	0x40000c00
 8008088:	40010400 	.word	0x40010400
 800808c:	40014000 	.word	0x40014000
 8008090:	40014400 	.word	0x40014400
 8008094:	40014800 	.word	0x40014800

08008098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d101      	bne.n	80080b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080ac:	2302      	movs	r3, #2
 80080ae:	e06d      	b.n	800818c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2202      	movs	r2, #2
 80080bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a30      	ldr	r2, [pc, #192]	@ (8008198 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d004      	beq.n	80080e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a2f      	ldr	r2, [pc, #188]	@ (800819c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d108      	bne.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80080ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	4313      	orrs	r3, r2
 8008106:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a20      	ldr	r2, [pc, #128]	@ (8008198 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d022      	beq.n	8008160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008122:	d01d      	beq.n	8008160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a1d      	ldr	r2, [pc, #116]	@ (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d018      	beq.n	8008160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a1c      	ldr	r2, [pc, #112]	@ (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d013      	beq.n	8008160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a1a      	ldr	r2, [pc, #104]	@ (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d00e      	beq.n	8008160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a15      	ldr	r2, [pc, #84]	@ (800819c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d009      	beq.n	8008160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a16      	ldr	r2, [pc, #88]	@ (80081ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d004      	beq.n	8008160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a15      	ldr	r2, [pc, #84]	@ (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d10c      	bne.n	800817a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008166:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	4313      	orrs	r3, r2
 8008170:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr
 8008198:	40010000 	.word	0x40010000
 800819c:	40010400 	.word	0x40010400
 80081a0:	40000400 	.word	0x40000400
 80081a4:	40000800 	.word	0x40000800
 80081a8:	40000c00 	.word	0x40000c00
 80081ac:	40001800 	.word	0x40001800
 80081b0:	40014000 	.word	0x40014000

080081b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d101      	bne.n	80081c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e042      	b.n	800824c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d106      	bne.n	80081de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7f8 ffbb 	bl	8001154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2224      	movs	r2, #36	@ 0x24
 80081e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f022 0201 	bic.w	r2, r2, #1
 80081f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d002      	beq.n	8008204 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fd90 	bl	8008d24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f825 	bl	8008254 <UART_SetConfig>
 800820a:	4603      	mov	r3, r0
 800820c:	2b01      	cmp	r3, #1
 800820e:	d101      	bne.n	8008214 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e01b      	b.n	800824c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	689a      	ldr	r2, [r3, #8]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f042 0201 	orr.w	r2, r2, #1
 8008242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fe0f 	bl	8008e68 <UART_CheckIdleState>
 800824a:	4603      	mov	r3, r0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008258:	b092      	sub	sp, #72	@ 0x48
 800825a:	af00      	add	r7, sp, #0
 800825c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	689a      	ldr	r2, [r3, #8]
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	431a      	orrs	r2, r3
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	431a      	orrs	r2, r3
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	69db      	ldr	r3, [r3, #28]
 8008278:	4313      	orrs	r3, r2
 800827a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	4bbe      	ldr	r3, [pc, #760]	@ (800857c <UART_SetConfig+0x328>)
 8008284:	4013      	ands	r3, r2
 8008286:	697a      	ldr	r2, [r7, #20]
 8008288:	6812      	ldr	r2, [r2, #0]
 800828a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800828c:	430b      	orrs	r3, r1
 800828e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	68da      	ldr	r2, [r3, #12]
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	430a      	orrs	r2, r1
 80082a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4ab3      	ldr	r2, [pc, #716]	@ (8008580 <UART_SetConfig+0x32c>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d004      	beq.n	80082c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082bc:	4313      	orrs	r3, r2
 80082be:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689a      	ldr	r2, [r3, #8]
 80082c6:	4baf      	ldr	r3, [pc, #700]	@ (8008584 <UART_SetConfig+0x330>)
 80082c8:	4013      	ands	r3, r2
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	6812      	ldr	r2, [r2, #0]
 80082ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80082d0:	430b      	orrs	r3, r1
 80082d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082da:	f023 010f 	bic.w	r1, r3, #15
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	430a      	orrs	r2, r1
 80082e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4aa6      	ldr	r2, [pc, #664]	@ (8008588 <UART_SetConfig+0x334>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d177      	bne.n	80083e4 <UART_SetConfig+0x190>
 80082f4:	4ba5      	ldr	r3, [pc, #660]	@ (800858c <UART_SetConfig+0x338>)
 80082f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082fc:	2b28      	cmp	r3, #40	@ 0x28
 80082fe:	d86d      	bhi.n	80083dc <UART_SetConfig+0x188>
 8008300:	a201      	add	r2, pc, #4	@ (adr r2, 8008308 <UART_SetConfig+0xb4>)
 8008302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008306:	bf00      	nop
 8008308:	080083ad 	.word	0x080083ad
 800830c:	080083dd 	.word	0x080083dd
 8008310:	080083dd 	.word	0x080083dd
 8008314:	080083dd 	.word	0x080083dd
 8008318:	080083dd 	.word	0x080083dd
 800831c:	080083dd 	.word	0x080083dd
 8008320:	080083dd 	.word	0x080083dd
 8008324:	080083dd 	.word	0x080083dd
 8008328:	080083b5 	.word	0x080083b5
 800832c:	080083dd 	.word	0x080083dd
 8008330:	080083dd 	.word	0x080083dd
 8008334:	080083dd 	.word	0x080083dd
 8008338:	080083dd 	.word	0x080083dd
 800833c:	080083dd 	.word	0x080083dd
 8008340:	080083dd 	.word	0x080083dd
 8008344:	080083dd 	.word	0x080083dd
 8008348:	080083bd 	.word	0x080083bd
 800834c:	080083dd 	.word	0x080083dd
 8008350:	080083dd 	.word	0x080083dd
 8008354:	080083dd 	.word	0x080083dd
 8008358:	080083dd 	.word	0x080083dd
 800835c:	080083dd 	.word	0x080083dd
 8008360:	080083dd 	.word	0x080083dd
 8008364:	080083dd 	.word	0x080083dd
 8008368:	080083c5 	.word	0x080083c5
 800836c:	080083dd 	.word	0x080083dd
 8008370:	080083dd 	.word	0x080083dd
 8008374:	080083dd 	.word	0x080083dd
 8008378:	080083dd 	.word	0x080083dd
 800837c:	080083dd 	.word	0x080083dd
 8008380:	080083dd 	.word	0x080083dd
 8008384:	080083dd 	.word	0x080083dd
 8008388:	080083cd 	.word	0x080083cd
 800838c:	080083dd 	.word	0x080083dd
 8008390:	080083dd 	.word	0x080083dd
 8008394:	080083dd 	.word	0x080083dd
 8008398:	080083dd 	.word	0x080083dd
 800839c:	080083dd 	.word	0x080083dd
 80083a0:	080083dd 	.word	0x080083dd
 80083a4:	080083dd 	.word	0x080083dd
 80083a8:	080083d5 	.word	0x080083d5
 80083ac:	2301      	movs	r3, #1
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083b2:	e222      	b.n	80087fa <UART_SetConfig+0x5a6>
 80083b4:	2304      	movs	r3, #4
 80083b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ba:	e21e      	b.n	80087fa <UART_SetConfig+0x5a6>
 80083bc:	2308      	movs	r3, #8
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083c2:	e21a      	b.n	80087fa <UART_SetConfig+0x5a6>
 80083c4:	2310      	movs	r3, #16
 80083c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ca:	e216      	b.n	80087fa <UART_SetConfig+0x5a6>
 80083cc:	2320      	movs	r3, #32
 80083ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083d2:	e212      	b.n	80087fa <UART_SetConfig+0x5a6>
 80083d4:	2340      	movs	r3, #64	@ 0x40
 80083d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083da:	e20e      	b.n	80087fa <UART_SetConfig+0x5a6>
 80083dc:	2380      	movs	r3, #128	@ 0x80
 80083de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083e2:	e20a      	b.n	80087fa <UART_SetConfig+0x5a6>
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a69      	ldr	r2, [pc, #420]	@ (8008590 <UART_SetConfig+0x33c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d130      	bne.n	8008450 <UART_SetConfig+0x1fc>
 80083ee:	4b67      	ldr	r3, [pc, #412]	@ (800858c <UART_SetConfig+0x338>)
 80083f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083f2:	f003 0307 	and.w	r3, r3, #7
 80083f6:	2b05      	cmp	r3, #5
 80083f8:	d826      	bhi.n	8008448 <UART_SetConfig+0x1f4>
 80083fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008400 <UART_SetConfig+0x1ac>)
 80083fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008400:	08008419 	.word	0x08008419
 8008404:	08008421 	.word	0x08008421
 8008408:	08008429 	.word	0x08008429
 800840c:	08008431 	.word	0x08008431
 8008410:	08008439 	.word	0x08008439
 8008414:	08008441 	.word	0x08008441
 8008418:	2300      	movs	r3, #0
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800841e:	e1ec      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008420:	2304      	movs	r3, #4
 8008422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008426:	e1e8      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008428:	2308      	movs	r3, #8
 800842a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800842e:	e1e4      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008430:	2310      	movs	r3, #16
 8008432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008436:	e1e0      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008438:	2320      	movs	r3, #32
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800843e:	e1dc      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008440:	2340      	movs	r3, #64	@ 0x40
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008446:	e1d8      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008448:	2380      	movs	r3, #128	@ 0x80
 800844a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800844e:	e1d4      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a4f      	ldr	r2, [pc, #316]	@ (8008594 <UART_SetConfig+0x340>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d130      	bne.n	80084bc <UART_SetConfig+0x268>
 800845a:	4b4c      	ldr	r3, [pc, #304]	@ (800858c <UART_SetConfig+0x338>)
 800845c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800845e:	f003 0307 	and.w	r3, r3, #7
 8008462:	2b05      	cmp	r3, #5
 8008464:	d826      	bhi.n	80084b4 <UART_SetConfig+0x260>
 8008466:	a201      	add	r2, pc, #4	@ (adr r2, 800846c <UART_SetConfig+0x218>)
 8008468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846c:	08008485 	.word	0x08008485
 8008470:	0800848d 	.word	0x0800848d
 8008474:	08008495 	.word	0x08008495
 8008478:	0800849d 	.word	0x0800849d
 800847c:	080084a5 	.word	0x080084a5
 8008480:	080084ad 	.word	0x080084ad
 8008484:	2300      	movs	r3, #0
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800848a:	e1b6      	b.n	80087fa <UART_SetConfig+0x5a6>
 800848c:	2304      	movs	r3, #4
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008492:	e1b2      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008494:	2308      	movs	r3, #8
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800849a:	e1ae      	b.n	80087fa <UART_SetConfig+0x5a6>
 800849c:	2310      	movs	r3, #16
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084a2:	e1aa      	b.n	80087fa <UART_SetConfig+0x5a6>
 80084a4:	2320      	movs	r3, #32
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084aa:	e1a6      	b.n	80087fa <UART_SetConfig+0x5a6>
 80084ac:	2340      	movs	r3, #64	@ 0x40
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084b2:	e1a2      	b.n	80087fa <UART_SetConfig+0x5a6>
 80084b4:	2380      	movs	r3, #128	@ 0x80
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ba:	e19e      	b.n	80087fa <UART_SetConfig+0x5a6>
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a35      	ldr	r2, [pc, #212]	@ (8008598 <UART_SetConfig+0x344>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d130      	bne.n	8008528 <UART_SetConfig+0x2d4>
 80084c6:	4b31      	ldr	r3, [pc, #196]	@ (800858c <UART_SetConfig+0x338>)
 80084c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084ca:	f003 0307 	and.w	r3, r3, #7
 80084ce:	2b05      	cmp	r3, #5
 80084d0:	d826      	bhi.n	8008520 <UART_SetConfig+0x2cc>
 80084d2:	a201      	add	r2, pc, #4	@ (adr r2, 80084d8 <UART_SetConfig+0x284>)
 80084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d8:	080084f1 	.word	0x080084f1
 80084dc:	080084f9 	.word	0x080084f9
 80084e0:	08008501 	.word	0x08008501
 80084e4:	08008509 	.word	0x08008509
 80084e8:	08008511 	.word	0x08008511
 80084ec:	08008519 	.word	0x08008519
 80084f0:	2300      	movs	r3, #0
 80084f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084f6:	e180      	b.n	80087fa <UART_SetConfig+0x5a6>
 80084f8:	2304      	movs	r3, #4
 80084fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084fe:	e17c      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008500:	2308      	movs	r3, #8
 8008502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008506:	e178      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008508:	2310      	movs	r3, #16
 800850a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800850e:	e174      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008510:	2320      	movs	r3, #32
 8008512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008516:	e170      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008518:	2340      	movs	r3, #64	@ 0x40
 800851a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800851e:	e16c      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008520:	2380      	movs	r3, #128	@ 0x80
 8008522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008526:	e168      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a1b      	ldr	r2, [pc, #108]	@ (800859c <UART_SetConfig+0x348>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d142      	bne.n	80085b8 <UART_SetConfig+0x364>
 8008532:	4b16      	ldr	r3, [pc, #88]	@ (800858c <UART_SetConfig+0x338>)
 8008534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008536:	f003 0307 	and.w	r3, r3, #7
 800853a:	2b05      	cmp	r3, #5
 800853c:	d838      	bhi.n	80085b0 <UART_SetConfig+0x35c>
 800853e:	a201      	add	r2, pc, #4	@ (adr r2, 8008544 <UART_SetConfig+0x2f0>)
 8008540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008544:	0800855d 	.word	0x0800855d
 8008548:	08008565 	.word	0x08008565
 800854c:	0800856d 	.word	0x0800856d
 8008550:	08008575 	.word	0x08008575
 8008554:	080085a1 	.word	0x080085a1
 8008558:	080085a9 	.word	0x080085a9
 800855c:	2300      	movs	r3, #0
 800855e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008562:	e14a      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008564:	2304      	movs	r3, #4
 8008566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800856a:	e146      	b.n	80087fa <UART_SetConfig+0x5a6>
 800856c:	2308      	movs	r3, #8
 800856e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008572:	e142      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008574:	2310      	movs	r3, #16
 8008576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800857a:	e13e      	b.n	80087fa <UART_SetConfig+0x5a6>
 800857c:	cfff69f3 	.word	0xcfff69f3
 8008580:	58000c00 	.word	0x58000c00
 8008584:	11fff4ff 	.word	0x11fff4ff
 8008588:	40011000 	.word	0x40011000
 800858c:	58024400 	.word	0x58024400
 8008590:	40004400 	.word	0x40004400
 8008594:	40004800 	.word	0x40004800
 8008598:	40004c00 	.word	0x40004c00
 800859c:	40005000 	.word	0x40005000
 80085a0:	2320      	movs	r3, #32
 80085a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a6:	e128      	b.n	80087fa <UART_SetConfig+0x5a6>
 80085a8:	2340      	movs	r3, #64	@ 0x40
 80085aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ae:	e124      	b.n	80087fa <UART_SetConfig+0x5a6>
 80085b0:	2380      	movs	r3, #128	@ 0x80
 80085b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b6:	e120      	b.n	80087fa <UART_SetConfig+0x5a6>
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4acb      	ldr	r2, [pc, #812]	@ (80088ec <UART_SetConfig+0x698>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d176      	bne.n	80086b0 <UART_SetConfig+0x45c>
 80085c2:	4bcb      	ldr	r3, [pc, #812]	@ (80088f0 <UART_SetConfig+0x69c>)
 80085c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80085ca:	2b28      	cmp	r3, #40	@ 0x28
 80085cc:	d86c      	bhi.n	80086a8 <UART_SetConfig+0x454>
 80085ce:	a201      	add	r2, pc, #4	@ (adr r2, 80085d4 <UART_SetConfig+0x380>)
 80085d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d4:	08008679 	.word	0x08008679
 80085d8:	080086a9 	.word	0x080086a9
 80085dc:	080086a9 	.word	0x080086a9
 80085e0:	080086a9 	.word	0x080086a9
 80085e4:	080086a9 	.word	0x080086a9
 80085e8:	080086a9 	.word	0x080086a9
 80085ec:	080086a9 	.word	0x080086a9
 80085f0:	080086a9 	.word	0x080086a9
 80085f4:	08008681 	.word	0x08008681
 80085f8:	080086a9 	.word	0x080086a9
 80085fc:	080086a9 	.word	0x080086a9
 8008600:	080086a9 	.word	0x080086a9
 8008604:	080086a9 	.word	0x080086a9
 8008608:	080086a9 	.word	0x080086a9
 800860c:	080086a9 	.word	0x080086a9
 8008610:	080086a9 	.word	0x080086a9
 8008614:	08008689 	.word	0x08008689
 8008618:	080086a9 	.word	0x080086a9
 800861c:	080086a9 	.word	0x080086a9
 8008620:	080086a9 	.word	0x080086a9
 8008624:	080086a9 	.word	0x080086a9
 8008628:	080086a9 	.word	0x080086a9
 800862c:	080086a9 	.word	0x080086a9
 8008630:	080086a9 	.word	0x080086a9
 8008634:	08008691 	.word	0x08008691
 8008638:	080086a9 	.word	0x080086a9
 800863c:	080086a9 	.word	0x080086a9
 8008640:	080086a9 	.word	0x080086a9
 8008644:	080086a9 	.word	0x080086a9
 8008648:	080086a9 	.word	0x080086a9
 800864c:	080086a9 	.word	0x080086a9
 8008650:	080086a9 	.word	0x080086a9
 8008654:	08008699 	.word	0x08008699
 8008658:	080086a9 	.word	0x080086a9
 800865c:	080086a9 	.word	0x080086a9
 8008660:	080086a9 	.word	0x080086a9
 8008664:	080086a9 	.word	0x080086a9
 8008668:	080086a9 	.word	0x080086a9
 800866c:	080086a9 	.word	0x080086a9
 8008670:	080086a9 	.word	0x080086a9
 8008674:	080086a1 	.word	0x080086a1
 8008678:	2301      	movs	r3, #1
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800867e:	e0bc      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008680:	2304      	movs	r3, #4
 8008682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008686:	e0b8      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008688:	2308      	movs	r3, #8
 800868a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800868e:	e0b4      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008690:	2310      	movs	r3, #16
 8008692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008696:	e0b0      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008698:	2320      	movs	r3, #32
 800869a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800869e:	e0ac      	b.n	80087fa <UART_SetConfig+0x5a6>
 80086a0:	2340      	movs	r3, #64	@ 0x40
 80086a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086a6:	e0a8      	b.n	80087fa <UART_SetConfig+0x5a6>
 80086a8:	2380      	movs	r3, #128	@ 0x80
 80086aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ae:	e0a4      	b.n	80087fa <UART_SetConfig+0x5a6>
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a8f      	ldr	r2, [pc, #572]	@ (80088f4 <UART_SetConfig+0x6a0>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d130      	bne.n	800871c <UART_SetConfig+0x4c8>
 80086ba:	4b8d      	ldr	r3, [pc, #564]	@ (80088f0 <UART_SetConfig+0x69c>)
 80086bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086be:	f003 0307 	and.w	r3, r3, #7
 80086c2:	2b05      	cmp	r3, #5
 80086c4:	d826      	bhi.n	8008714 <UART_SetConfig+0x4c0>
 80086c6:	a201      	add	r2, pc, #4	@ (adr r2, 80086cc <UART_SetConfig+0x478>)
 80086c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086cc:	080086e5 	.word	0x080086e5
 80086d0:	080086ed 	.word	0x080086ed
 80086d4:	080086f5 	.word	0x080086f5
 80086d8:	080086fd 	.word	0x080086fd
 80086dc:	08008705 	.word	0x08008705
 80086e0:	0800870d 	.word	0x0800870d
 80086e4:	2300      	movs	r3, #0
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ea:	e086      	b.n	80087fa <UART_SetConfig+0x5a6>
 80086ec:	2304      	movs	r3, #4
 80086ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086f2:	e082      	b.n	80087fa <UART_SetConfig+0x5a6>
 80086f4:	2308      	movs	r3, #8
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086fa:	e07e      	b.n	80087fa <UART_SetConfig+0x5a6>
 80086fc:	2310      	movs	r3, #16
 80086fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008702:	e07a      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008704:	2320      	movs	r3, #32
 8008706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800870a:	e076      	b.n	80087fa <UART_SetConfig+0x5a6>
 800870c:	2340      	movs	r3, #64	@ 0x40
 800870e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008712:	e072      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008714:	2380      	movs	r3, #128	@ 0x80
 8008716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800871a:	e06e      	b.n	80087fa <UART_SetConfig+0x5a6>
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a75      	ldr	r2, [pc, #468]	@ (80088f8 <UART_SetConfig+0x6a4>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d130      	bne.n	8008788 <UART_SetConfig+0x534>
 8008726:	4b72      	ldr	r3, [pc, #456]	@ (80088f0 <UART_SetConfig+0x69c>)
 8008728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800872a:	f003 0307 	and.w	r3, r3, #7
 800872e:	2b05      	cmp	r3, #5
 8008730:	d826      	bhi.n	8008780 <UART_SetConfig+0x52c>
 8008732:	a201      	add	r2, pc, #4	@ (adr r2, 8008738 <UART_SetConfig+0x4e4>)
 8008734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008738:	08008751 	.word	0x08008751
 800873c:	08008759 	.word	0x08008759
 8008740:	08008761 	.word	0x08008761
 8008744:	08008769 	.word	0x08008769
 8008748:	08008771 	.word	0x08008771
 800874c:	08008779 	.word	0x08008779
 8008750:	2300      	movs	r3, #0
 8008752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008756:	e050      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008758:	2304      	movs	r3, #4
 800875a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800875e:	e04c      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008760:	2308      	movs	r3, #8
 8008762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008766:	e048      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008768:	2310      	movs	r3, #16
 800876a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800876e:	e044      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008770:	2320      	movs	r3, #32
 8008772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008776:	e040      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008778:	2340      	movs	r3, #64	@ 0x40
 800877a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800877e:	e03c      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008780:	2380      	movs	r3, #128	@ 0x80
 8008782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008786:	e038      	b.n	80087fa <UART_SetConfig+0x5a6>
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a5b      	ldr	r2, [pc, #364]	@ (80088fc <UART_SetConfig+0x6a8>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d130      	bne.n	80087f4 <UART_SetConfig+0x5a0>
 8008792:	4b57      	ldr	r3, [pc, #348]	@ (80088f0 <UART_SetConfig+0x69c>)
 8008794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008796:	f003 0307 	and.w	r3, r3, #7
 800879a:	2b05      	cmp	r3, #5
 800879c:	d826      	bhi.n	80087ec <UART_SetConfig+0x598>
 800879e:	a201      	add	r2, pc, #4	@ (adr r2, 80087a4 <UART_SetConfig+0x550>)
 80087a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a4:	080087bd 	.word	0x080087bd
 80087a8:	080087c5 	.word	0x080087c5
 80087ac:	080087cd 	.word	0x080087cd
 80087b0:	080087d5 	.word	0x080087d5
 80087b4:	080087dd 	.word	0x080087dd
 80087b8:	080087e5 	.word	0x080087e5
 80087bc:	2302      	movs	r3, #2
 80087be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087c2:	e01a      	b.n	80087fa <UART_SetConfig+0x5a6>
 80087c4:	2304      	movs	r3, #4
 80087c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ca:	e016      	b.n	80087fa <UART_SetConfig+0x5a6>
 80087cc:	2308      	movs	r3, #8
 80087ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087d2:	e012      	b.n	80087fa <UART_SetConfig+0x5a6>
 80087d4:	2310      	movs	r3, #16
 80087d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087da:	e00e      	b.n	80087fa <UART_SetConfig+0x5a6>
 80087dc:	2320      	movs	r3, #32
 80087de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087e2:	e00a      	b.n	80087fa <UART_SetConfig+0x5a6>
 80087e4:	2340      	movs	r3, #64	@ 0x40
 80087e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ea:	e006      	b.n	80087fa <UART_SetConfig+0x5a6>
 80087ec:	2380      	movs	r3, #128	@ 0x80
 80087ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087f2:	e002      	b.n	80087fa <UART_SetConfig+0x5a6>
 80087f4:	2380      	movs	r3, #128	@ 0x80
 80087f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a3f      	ldr	r2, [pc, #252]	@ (80088fc <UART_SetConfig+0x6a8>)
 8008800:	4293      	cmp	r3, r2
 8008802:	f040 80f8 	bne.w	80089f6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008806:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800880a:	2b20      	cmp	r3, #32
 800880c:	dc46      	bgt.n	800889c <UART_SetConfig+0x648>
 800880e:	2b02      	cmp	r3, #2
 8008810:	f2c0 8082 	blt.w	8008918 <UART_SetConfig+0x6c4>
 8008814:	3b02      	subs	r3, #2
 8008816:	2b1e      	cmp	r3, #30
 8008818:	d87e      	bhi.n	8008918 <UART_SetConfig+0x6c4>
 800881a:	a201      	add	r2, pc, #4	@ (adr r2, 8008820 <UART_SetConfig+0x5cc>)
 800881c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008820:	080088a3 	.word	0x080088a3
 8008824:	08008919 	.word	0x08008919
 8008828:	080088ab 	.word	0x080088ab
 800882c:	08008919 	.word	0x08008919
 8008830:	08008919 	.word	0x08008919
 8008834:	08008919 	.word	0x08008919
 8008838:	080088bb 	.word	0x080088bb
 800883c:	08008919 	.word	0x08008919
 8008840:	08008919 	.word	0x08008919
 8008844:	08008919 	.word	0x08008919
 8008848:	08008919 	.word	0x08008919
 800884c:	08008919 	.word	0x08008919
 8008850:	08008919 	.word	0x08008919
 8008854:	08008919 	.word	0x08008919
 8008858:	080088cb 	.word	0x080088cb
 800885c:	08008919 	.word	0x08008919
 8008860:	08008919 	.word	0x08008919
 8008864:	08008919 	.word	0x08008919
 8008868:	08008919 	.word	0x08008919
 800886c:	08008919 	.word	0x08008919
 8008870:	08008919 	.word	0x08008919
 8008874:	08008919 	.word	0x08008919
 8008878:	08008919 	.word	0x08008919
 800887c:	08008919 	.word	0x08008919
 8008880:	08008919 	.word	0x08008919
 8008884:	08008919 	.word	0x08008919
 8008888:	08008919 	.word	0x08008919
 800888c:	08008919 	.word	0x08008919
 8008890:	08008919 	.word	0x08008919
 8008894:	08008919 	.word	0x08008919
 8008898:	0800890b 	.word	0x0800890b
 800889c:	2b40      	cmp	r3, #64	@ 0x40
 800889e:	d037      	beq.n	8008910 <UART_SetConfig+0x6bc>
 80088a0:	e03a      	b.n	8008918 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80088a2:	f7fe fd87 	bl	80073b4 <HAL_RCCEx_GetD3PCLK1Freq>
 80088a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80088a8:	e03c      	b.n	8008924 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fd96 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80088b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088b8:	e034      	b.n	8008924 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088ba:	f107 0318 	add.w	r3, r7, #24
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fe fee2 	bl	8007688 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088c8:	e02c      	b.n	8008924 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088ca:	4b09      	ldr	r3, [pc, #36]	@ (80088f0 <UART_SetConfig+0x69c>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 0320 	and.w	r3, r3, #32
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d016      	beq.n	8008904 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088d6:	4b06      	ldr	r3, [pc, #24]	@ (80088f0 <UART_SetConfig+0x69c>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	08db      	lsrs	r3, r3, #3
 80088dc:	f003 0303 	and.w	r3, r3, #3
 80088e0:	4a07      	ldr	r2, [pc, #28]	@ (8008900 <UART_SetConfig+0x6ac>)
 80088e2:	fa22 f303 	lsr.w	r3, r2, r3
 80088e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088e8:	e01c      	b.n	8008924 <UART_SetConfig+0x6d0>
 80088ea:	bf00      	nop
 80088ec:	40011400 	.word	0x40011400
 80088f0:	58024400 	.word	0x58024400
 80088f4:	40007800 	.word	0x40007800
 80088f8:	40007c00 	.word	0x40007c00
 80088fc:	58000c00 	.word	0x58000c00
 8008900:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008904:	4b9d      	ldr	r3, [pc, #628]	@ (8008b7c <UART_SetConfig+0x928>)
 8008906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008908:	e00c      	b.n	8008924 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800890a:	4b9d      	ldr	r3, [pc, #628]	@ (8008b80 <UART_SetConfig+0x92c>)
 800890c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800890e:	e009      	b.n	8008924 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008910:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008916:	e005      	b.n	8008924 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008918:	2300      	movs	r3, #0
 800891a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008922:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008926:	2b00      	cmp	r3, #0
 8008928:	f000 81de 	beq.w	8008ce8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008930:	4a94      	ldr	r2, [pc, #592]	@ (8008b84 <UART_SetConfig+0x930>)
 8008932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008936:	461a      	mov	r2, r3
 8008938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800893a:	fbb3 f3f2 	udiv	r3, r3, r2
 800893e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	4613      	mov	r3, r2
 8008946:	005b      	lsls	r3, r3, #1
 8008948:	4413      	add	r3, r2
 800894a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800894c:	429a      	cmp	r2, r3
 800894e:	d305      	bcc.n	800895c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008958:	429a      	cmp	r2, r3
 800895a:	d903      	bls.n	8008964 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008962:	e1c1      	b.n	8008ce8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008966:	2200      	movs	r2, #0
 8008968:	60bb      	str	r3, [r7, #8]
 800896a:	60fa      	str	r2, [r7, #12]
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008970:	4a84      	ldr	r2, [pc, #528]	@ (8008b84 <UART_SetConfig+0x930>)
 8008972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008976:	b29b      	uxth	r3, r3
 8008978:	2200      	movs	r2, #0
 800897a:	603b      	str	r3, [r7, #0]
 800897c:	607a      	str	r2, [r7, #4]
 800897e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008982:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008986:	f7f7 fca7 	bl	80002d8 <__aeabi_uldivmod>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	4610      	mov	r0, r2
 8008990:	4619      	mov	r1, r3
 8008992:	f04f 0200 	mov.w	r2, #0
 8008996:	f04f 0300 	mov.w	r3, #0
 800899a:	020b      	lsls	r3, r1, #8
 800899c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80089a0:	0202      	lsls	r2, r0, #8
 80089a2:	6979      	ldr	r1, [r7, #20]
 80089a4:	6849      	ldr	r1, [r1, #4]
 80089a6:	0849      	lsrs	r1, r1, #1
 80089a8:	2000      	movs	r0, #0
 80089aa:	460c      	mov	r4, r1
 80089ac:	4605      	mov	r5, r0
 80089ae:	eb12 0804 	adds.w	r8, r2, r4
 80089b2:	eb43 0905 	adc.w	r9, r3, r5
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	469a      	mov	sl, r3
 80089be:	4693      	mov	fp, r2
 80089c0:	4652      	mov	r2, sl
 80089c2:	465b      	mov	r3, fp
 80089c4:	4640      	mov	r0, r8
 80089c6:	4649      	mov	r1, r9
 80089c8:	f7f7 fc86 	bl	80002d8 <__aeabi_uldivmod>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	4613      	mov	r3, r2
 80089d2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089da:	d308      	bcc.n	80089ee <UART_SetConfig+0x79a>
 80089dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089e2:	d204      	bcs.n	80089ee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089ea:	60da      	str	r2, [r3, #12]
 80089ec:	e17c      	b.n	8008ce8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80089f4:	e178      	b.n	8008ce8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089fe:	f040 80c5 	bne.w	8008b8c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008a02:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008a06:	2b20      	cmp	r3, #32
 8008a08:	dc48      	bgt.n	8008a9c <UART_SetConfig+0x848>
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	db7b      	blt.n	8008b06 <UART_SetConfig+0x8b2>
 8008a0e:	2b20      	cmp	r3, #32
 8008a10:	d879      	bhi.n	8008b06 <UART_SetConfig+0x8b2>
 8008a12:	a201      	add	r2, pc, #4	@ (adr r2, 8008a18 <UART_SetConfig+0x7c4>)
 8008a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a18:	08008aa3 	.word	0x08008aa3
 8008a1c:	08008aab 	.word	0x08008aab
 8008a20:	08008b07 	.word	0x08008b07
 8008a24:	08008b07 	.word	0x08008b07
 8008a28:	08008ab3 	.word	0x08008ab3
 8008a2c:	08008b07 	.word	0x08008b07
 8008a30:	08008b07 	.word	0x08008b07
 8008a34:	08008b07 	.word	0x08008b07
 8008a38:	08008ac3 	.word	0x08008ac3
 8008a3c:	08008b07 	.word	0x08008b07
 8008a40:	08008b07 	.word	0x08008b07
 8008a44:	08008b07 	.word	0x08008b07
 8008a48:	08008b07 	.word	0x08008b07
 8008a4c:	08008b07 	.word	0x08008b07
 8008a50:	08008b07 	.word	0x08008b07
 8008a54:	08008b07 	.word	0x08008b07
 8008a58:	08008ad3 	.word	0x08008ad3
 8008a5c:	08008b07 	.word	0x08008b07
 8008a60:	08008b07 	.word	0x08008b07
 8008a64:	08008b07 	.word	0x08008b07
 8008a68:	08008b07 	.word	0x08008b07
 8008a6c:	08008b07 	.word	0x08008b07
 8008a70:	08008b07 	.word	0x08008b07
 8008a74:	08008b07 	.word	0x08008b07
 8008a78:	08008b07 	.word	0x08008b07
 8008a7c:	08008b07 	.word	0x08008b07
 8008a80:	08008b07 	.word	0x08008b07
 8008a84:	08008b07 	.word	0x08008b07
 8008a88:	08008b07 	.word	0x08008b07
 8008a8c:	08008b07 	.word	0x08008b07
 8008a90:	08008b07 	.word	0x08008b07
 8008a94:	08008b07 	.word	0x08008b07
 8008a98:	08008af9 	.word	0x08008af9
 8008a9c:	2b40      	cmp	r3, #64	@ 0x40
 8008a9e:	d02e      	beq.n	8008afe <UART_SetConfig+0x8aa>
 8008aa0:	e031      	b.n	8008b06 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008aa2:	f7fc fcd1 	bl	8005448 <HAL_RCC_GetPCLK1Freq>
 8008aa6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008aa8:	e033      	b.n	8008b12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008aaa:	f7fc fce3 	bl	8005474 <HAL_RCC_GetPCLK2Freq>
 8008aae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ab0:	e02f      	b.n	8008b12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe fc92 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ac0:	e027      	b.n	8008b12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ac2:	f107 0318 	add.w	r3, r7, #24
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7fe fdde 	bl	8007688 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ad0:	e01f      	b.n	8008b12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ad2:	4b2d      	ldr	r3, [pc, #180]	@ (8008b88 <UART_SetConfig+0x934>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0320 	and.w	r3, r3, #32
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d009      	beq.n	8008af2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ade:	4b2a      	ldr	r3, [pc, #168]	@ (8008b88 <UART_SetConfig+0x934>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	08db      	lsrs	r3, r3, #3
 8008ae4:	f003 0303 	and.w	r3, r3, #3
 8008ae8:	4a24      	ldr	r2, [pc, #144]	@ (8008b7c <UART_SetConfig+0x928>)
 8008aea:	fa22 f303 	lsr.w	r3, r2, r3
 8008aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008af0:	e00f      	b.n	8008b12 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008af2:	4b22      	ldr	r3, [pc, #136]	@ (8008b7c <UART_SetConfig+0x928>)
 8008af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008af6:	e00c      	b.n	8008b12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008af8:	4b21      	ldr	r3, [pc, #132]	@ (8008b80 <UART_SetConfig+0x92c>)
 8008afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008afc:	e009      	b.n	8008b12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b04:	e005      	b.n	8008b12 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008b10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f000 80e7 	beq.w	8008ce8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b1e:	4a19      	ldr	r2, [pc, #100]	@ (8008b84 <UART_SetConfig+0x930>)
 8008b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b24:	461a      	mov	r2, r3
 8008b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b2c:	005a      	lsls	r2, r3, #1
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	085b      	lsrs	r3, r3, #1
 8008b34:	441a      	add	r2, r3
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b42:	2b0f      	cmp	r3, #15
 8008b44:	d916      	bls.n	8008b74 <UART_SetConfig+0x920>
 8008b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b4c:	d212      	bcs.n	8008b74 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	f023 030f 	bic.w	r3, r3, #15
 8008b56:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5a:	085b      	lsrs	r3, r3, #1
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	f003 0307 	and.w	r3, r3, #7
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008b66:	4313      	orrs	r3, r2
 8008b68:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008b70:	60da      	str	r2, [r3, #12]
 8008b72:	e0b9      	b.n	8008ce8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008b7a:	e0b5      	b.n	8008ce8 <UART_SetConfig+0xa94>
 8008b7c:	03d09000 	.word	0x03d09000
 8008b80:	003d0900 	.word	0x003d0900
 8008b84:	080093f4 	.word	0x080093f4
 8008b88:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b8c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008b90:	2b20      	cmp	r3, #32
 8008b92:	dc49      	bgt.n	8008c28 <UART_SetConfig+0x9d4>
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	db7c      	blt.n	8008c92 <UART_SetConfig+0xa3e>
 8008b98:	2b20      	cmp	r3, #32
 8008b9a:	d87a      	bhi.n	8008c92 <UART_SetConfig+0xa3e>
 8008b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba4 <UART_SetConfig+0x950>)
 8008b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba2:	bf00      	nop
 8008ba4:	08008c2f 	.word	0x08008c2f
 8008ba8:	08008c37 	.word	0x08008c37
 8008bac:	08008c93 	.word	0x08008c93
 8008bb0:	08008c93 	.word	0x08008c93
 8008bb4:	08008c3f 	.word	0x08008c3f
 8008bb8:	08008c93 	.word	0x08008c93
 8008bbc:	08008c93 	.word	0x08008c93
 8008bc0:	08008c93 	.word	0x08008c93
 8008bc4:	08008c4f 	.word	0x08008c4f
 8008bc8:	08008c93 	.word	0x08008c93
 8008bcc:	08008c93 	.word	0x08008c93
 8008bd0:	08008c93 	.word	0x08008c93
 8008bd4:	08008c93 	.word	0x08008c93
 8008bd8:	08008c93 	.word	0x08008c93
 8008bdc:	08008c93 	.word	0x08008c93
 8008be0:	08008c93 	.word	0x08008c93
 8008be4:	08008c5f 	.word	0x08008c5f
 8008be8:	08008c93 	.word	0x08008c93
 8008bec:	08008c93 	.word	0x08008c93
 8008bf0:	08008c93 	.word	0x08008c93
 8008bf4:	08008c93 	.word	0x08008c93
 8008bf8:	08008c93 	.word	0x08008c93
 8008bfc:	08008c93 	.word	0x08008c93
 8008c00:	08008c93 	.word	0x08008c93
 8008c04:	08008c93 	.word	0x08008c93
 8008c08:	08008c93 	.word	0x08008c93
 8008c0c:	08008c93 	.word	0x08008c93
 8008c10:	08008c93 	.word	0x08008c93
 8008c14:	08008c93 	.word	0x08008c93
 8008c18:	08008c93 	.word	0x08008c93
 8008c1c:	08008c93 	.word	0x08008c93
 8008c20:	08008c93 	.word	0x08008c93
 8008c24:	08008c85 	.word	0x08008c85
 8008c28:	2b40      	cmp	r3, #64	@ 0x40
 8008c2a:	d02e      	beq.n	8008c8a <UART_SetConfig+0xa36>
 8008c2c:	e031      	b.n	8008c92 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c2e:	f7fc fc0b 	bl	8005448 <HAL_RCC_GetPCLK1Freq>
 8008c32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c34:	e033      	b.n	8008c9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c36:	f7fc fc1d 	bl	8005474 <HAL_RCC_GetPCLK2Freq>
 8008c3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c3c:	e02f      	b.n	8008c9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fe fbcc 	bl	80073e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c4c:	e027      	b.n	8008c9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c4e:	f107 0318 	add.w	r3, r7, #24
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7fe fd18 	bl	8007688 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c5c:	e01f      	b.n	8008c9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8008d14 <UART_SetConfig+0xac0>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0320 	and.w	r3, r3, #32
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d009      	beq.n	8008c7e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8008d14 <UART_SetConfig+0xac0>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	08db      	lsrs	r3, r3, #3
 8008c70:	f003 0303 	and.w	r3, r3, #3
 8008c74:	4a28      	ldr	r2, [pc, #160]	@ (8008d18 <UART_SetConfig+0xac4>)
 8008c76:	fa22 f303 	lsr.w	r3, r2, r3
 8008c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c7c:	e00f      	b.n	8008c9e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008c7e:	4b26      	ldr	r3, [pc, #152]	@ (8008d18 <UART_SetConfig+0xac4>)
 8008c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c82:	e00c      	b.n	8008c9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c84:	4b25      	ldr	r3, [pc, #148]	@ (8008d1c <UART_SetConfig+0xac8>)
 8008c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c88:	e009      	b.n	8008c9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c90:	e005      	b.n	8008c9e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008c92:	2300      	movs	r3, #0
 8008c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008c9c:	bf00      	nop
    }

    if (pclk != 0U)
 8008c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d021      	beq.n	8008ce8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8008d20 <UART_SetConfig+0xacc>)
 8008caa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cb2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	085b      	lsrs	r3, r3, #1
 8008cbc:	441a      	add	r2, r3
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cca:	2b0f      	cmp	r3, #15
 8008ccc:	d909      	bls.n	8008ce2 <UART_SetConfig+0xa8e>
 8008cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cd4:	d205      	bcs.n	8008ce2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	60da      	str	r2, [r3, #12]
 8008ce0:	e002      	b.n	8008ce8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	2200      	movs	r2, #0
 8008d02:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008d04:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3748      	adds	r7, #72	@ 0x48
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d12:	bf00      	nop
 8008d14:	58024400 	.word	0x58024400
 8008d18:	03d09000 	.word	0x03d09000
 8008d1c:	003d0900 	.word	0x003d0900
 8008d20:	080093f4 	.word	0x080093f4

08008d24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d30:	f003 0308 	and.w	r3, r3, #8
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00a      	beq.n	8008d4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	430a      	orrs	r2, r1
 8008d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00a      	beq.n	8008d70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	430a      	orrs	r2, r1
 8008d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d74:	f003 0302 	and.w	r3, r3, #2
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00a      	beq.n	8008d92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	430a      	orrs	r2, r1
 8008d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d96:	f003 0304 	and.w	r3, r3, #4
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00a      	beq.n	8008db4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	430a      	orrs	r2, r1
 8008db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db8:	f003 0310 	and.w	r3, r3, #16
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00a      	beq.n	8008dd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dda:	f003 0320 	and.w	r3, r3, #32
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00a      	beq.n	8008df8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d01a      	beq.n	8008e3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	430a      	orrs	r2, r1
 8008e18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e22:	d10a      	bne.n	8008e3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	430a      	orrs	r2, r1
 8008e38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00a      	beq.n	8008e5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	605a      	str	r2, [r3, #4]
  }
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b098      	sub	sp, #96	@ 0x60
 8008e6c:	af02      	add	r7, sp, #8
 8008e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e78:	f7f8 fb92 	bl	80015a0 <HAL_GetTick>
 8008e7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0308 	and.w	r3, r3, #8
 8008e88:	2b08      	cmp	r3, #8
 8008e8a:	d12f      	bne.n	8008eec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e94:	2200      	movs	r2, #0
 8008e96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 f88e 	bl	8008fbc <UART_WaitOnFlagUntilTimeout>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d022      	beq.n	8008eec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eae:	e853 3f00 	ldrex	r3, [r3]
 8008eb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008eba:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ec6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008eca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e6      	bne.n	8008ea6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2220      	movs	r2, #32
 8008edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e063      	b.n	8008fb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0304 	and.w	r3, r3, #4
 8008ef6:	2b04      	cmp	r3, #4
 8008ef8:	d149      	bne.n	8008f8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008efa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f02:	2200      	movs	r2, #0
 8008f04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f857 	bl	8008fbc <UART_WaitOnFlagUntilTimeout>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d03c      	beq.n	8008f8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f1c:	e853 3f00 	ldrex	r3, [r3]
 8008f20:	623b      	str	r3, [r7, #32]
   return(result);
 8008f22:	6a3b      	ldr	r3, [r7, #32]
 8008f24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f32:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f3a:	e841 2300 	strex	r3, r2, [r1]
 8008f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1e6      	bne.n	8008f14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3308      	adds	r3, #8
 8008f4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	e853 3f00 	ldrex	r3, [r3]
 8008f54:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f023 0301 	bic.w	r3, r3, #1
 8008f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3308      	adds	r3, #8
 8008f64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f66:	61fa      	str	r2, [r7, #28]
 8008f68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6a:	69b9      	ldr	r1, [r7, #24]
 8008f6c:	69fa      	ldr	r2, [r7, #28]
 8008f6e:	e841 2300 	strex	r3, r2, [r1]
 8008f72:	617b      	str	r3, [r7, #20]
   return(result);
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1e5      	bne.n	8008f46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2220      	movs	r2, #32
 8008f7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	e012      	b.n	8008fb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2220      	movs	r2, #32
 8008f92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2220      	movs	r2, #32
 8008f9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3758      	adds	r7, #88	@ 0x58
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	603b      	str	r3, [r7, #0]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fcc:	e04f      	b.n	800906e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd4:	d04b      	beq.n	800906e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fd6:	f7f8 fae3 	bl	80015a0 <HAL_GetTick>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	69ba      	ldr	r2, [r7, #24]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d302      	bcc.n	8008fec <UART_WaitOnFlagUntilTimeout+0x30>
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d101      	bne.n	8008ff0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e04e      	b.n	800908e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0304 	and.w	r3, r3, #4
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d037      	beq.n	800906e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	2b80      	cmp	r3, #128	@ 0x80
 8009002:	d034      	beq.n	800906e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	2b40      	cmp	r3, #64	@ 0x40
 8009008:	d031      	beq.n	800906e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	69db      	ldr	r3, [r3, #28]
 8009010:	f003 0308 	and.w	r3, r3, #8
 8009014:	2b08      	cmp	r3, #8
 8009016:	d110      	bne.n	800903a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2208      	movs	r2, #8
 800901e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f000 f839 	bl	8009098 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2208      	movs	r2, #8
 800902a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e029      	b.n	800908e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	69db      	ldr	r3, [r3, #28]
 8009040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009044:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009048:	d111      	bne.n	800906e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f000 f81f 	bl	8009098 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2220      	movs	r2, #32
 800905e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e00f      	b.n	800908e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	69da      	ldr	r2, [r3, #28]
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	4013      	ands	r3, r2
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	429a      	cmp	r2, r3
 800907c:	bf0c      	ite	eq
 800907e:	2301      	moveq	r3, #1
 8009080:	2300      	movne	r3, #0
 8009082:	b2db      	uxtb	r3, r3
 8009084:	461a      	mov	r2, r3
 8009086:	79fb      	ldrb	r3, [r7, #7]
 8009088:	429a      	cmp	r2, r3
 800908a:	d0a0      	beq.n	8008fce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009098:	b480      	push	{r7}
 800909a:	b095      	sub	sp, #84	@ 0x54
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090a8:	e853 3f00 	ldrex	r3, [r3]
 80090ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80090ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	461a      	mov	r2, r3
 80090bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090be:	643b      	str	r3, [r7, #64]	@ 0x40
 80090c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80090c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80090c6:	e841 2300 	strex	r3, r2, [r1]
 80090ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1e6      	bne.n	80090a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	3308      	adds	r3, #8
 80090d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	e853 3f00 	ldrex	r3, [r3]
 80090e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80090e2:	69fa      	ldr	r2, [r7, #28]
 80090e4:	4b1e      	ldr	r3, [pc, #120]	@ (8009160 <UART_EndRxTransfer+0xc8>)
 80090e6:	4013      	ands	r3, r2
 80090e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	3308      	adds	r3, #8
 80090f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1e5      	bne.n	80090d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800910a:	2b01      	cmp	r3, #1
 800910c:	d118      	bne.n	8009140 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	e853 3f00 	ldrex	r3, [r3]
 800911a:	60bb      	str	r3, [r7, #8]
   return(result);
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f023 0310 	bic.w	r3, r3, #16
 8009122:	647b      	str	r3, [r7, #68]	@ 0x44
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	461a      	mov	r2, r3
 800912a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800912c:	61bb      	str	r3, [r7, #24]
 800912e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009130:	6979      	ldr	r1, [r7, #20]
 8009132:	69ba      	ldr	r2, [r7, #24]
 8009134:	e841 2300 	strex	r3, r2, [r1]
 8009138:	613b      	str	r3, [r7, #16]
   return(result);
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1e6      	bne.n	800910e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2220      	movs	r2, #32
 8009144:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009154:	bf00      	nop
 8009156:	3754      	adds	r7, #84	@ 0x54
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	effffffe 	.word	0xeffffffe

08009164 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009164:	b480      	push	{r7}
 8009166:	b085      	sub	sp, #20
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009172:	2b01      	cmp	r3, #1
 8009174:	d101      	bne.n	800917a <HAL_UARTEx_DisableFifoMode+0x16>
 8009176:	2302      	movs	r3, #2
 8009178:	e027      	b.n	80091ca <HAL_UARTEx_DisableFifoMode+0x66>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2224      	movs	r2, #36	@ 0x24
 8009186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f022 0201 	bic.w	r2, r2, #1
 80091a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80091a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2220      	movs	r2, #32
 80091bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b084      	sub	sp, #16
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d101      	bne.n	80091ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80091ea:	2302      	movs	r3, #2
 80091ec:	e02d      	b.n	800924a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2224      	movs	r2, #36	@ 0x24
 80091fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f022 0201 	bic.w	r2, r2, #1
 8009214:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	683a      	ldr	r2, [r7, #0]
 8009226:	430a      	orrs	r2, r1
 8009228:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f850 	bl	80092d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2220      	movs	r2, #32
 800923c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b084      	sub	sp, #16
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009262:	2b01      	cmp	r3, #1
 8009264:	d101      	bne.n	800926a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009266:	2302      	movs	r3, #2
 8009268:	e02d      	b.n	80092c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2201      	movs	r2, #1
 800926e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2224      	movs	r2, #36	@ 0x24
 8009276:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f022 0201 	bic.w	r2, r2, #1
 8009290:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	683a      	ldr	r2, [r7, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f812 	bl	80092d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2220      	movs	r2, #32
 80092b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
	...

080092d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d108      	bne.n	80092f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092f0:	e031      	b.n	8009356 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092f2:	2310      	movs	r3, #16
 80092f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092f6:	2310      	movs	r3, #16
 80092f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	0e5b      	lsrs	r3, r3, #25
 8009302:	b2db      	uxtb	r3, r3
 8009304:	f003 0307 	and.w	r3, r3, #7
 8009308:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	0f5b      	lsrs	r3, r3, #29
 8009312:	b2db      	uxtb	r3, r3
 8009314:	f003 0307 	and.w	r3, r3, #7
 8009318:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800931a:	7bbb      	ldrb	r3, [r7, #14]
 800931c:	7b3a      	ldrb	r2, [r7, #12]
 800931e:	4911      	ldr	r1, [pc, #68]	@ (8009364 <UARTEx_SetNbDataToProcess+0x94>)
 8009320:	5c8a      	ldrb	r2, [r1, r2]
 8009322:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009326:	7b3a      	ldrb	r2, [r7, #12]
 8009328:	490f      	ldr	r1, [pc, #60]	@ (8009368 <UARTEx_SetNbDataToProcess+0x98>)
 800932a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800932c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009330:	b29a      	uxth	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009338:	7bfb      	ldrb	r3, [r7, #15]
 800933a:	7b7a      	ldrb	r2, [r7, #13]
 800933c:	4909      	ldr	r1, [pc, #36]	@ (8009364 <UARTEx_SetNbDataToProcess+0x94>)
 800933e:	5c8a      	ldrb	r2, [r1, r2]
 8009340:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009344:	7b7a      	ldrb	r2, [r7, #13]
 8009346:	4908      	ldr	r1, [pc, #32]	@ (8009368 <UARTEx_SetNbDataToProcess+0x98>)
 8009348:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800934a:	fb93 f3f2 	sdiv	r3, r3, r2
 800934e:	b29a      	uxth	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009356:	bf00      	nop
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	0800940c 	.word	0x0800940c
 8009368:	08009414 	.word	0x08009414

0800936c <memset>:
 800936c:	4402      	add	r2, r0
 800936e:	4603      	mov	r3, r0
 8009370:	4293      	cmp	r3, r2
 8009372:	d100      	bne.n	8009376 <memset+0xa>
 8009374:	4770      	bx	lr
 8009376:	f803 1b01 	strb.w	r1, [r3], #1
 800937a:	e7f9      	b.n	8009370 <memset+0x4>

0800937c <__libc_init_array>:
 800937c:	b570      	push	{r4, r5, r6, lr}
 800937e:	4d0d      	ldr	r5, [pc, #52]	@ (80093b4 <__libc_init_array+0x38>)
 8009380:	4c0d      	ldr	r4, [pc, #52]	@ (80093b8 <__libc_init_array+0x3c>)
 8009382:	1b64      	subs	r4, r4, r5
 8009384:	10a4      	asrs	r4, r4, #2
 8009386:	2600      	movs	r6, #0
 8009388:	42a6      	cmp	r6, r4
 800938a:	d109      	bne.n	80093a0 <__libc_init_array+0x24>
 800938c:	4d0b      	ldr	r5, [pc, #44]	@ (80093bc <__libc_init_array+0x40>)
 800938e:	4c0c      	ldr	r4, [pc, #48]	@ (80093c0 <__libc_init_array+0x44>)
 8009390:	f000 f818 	bl	80093c4 <_init>
 8009394:	1b64      	subs	r4, r4, r5
 8009396:	10a4      	asrs	r4, r4, #2
 8009398:	2600      	movs	r6, #0
 800939a:	42a6      	cmp	r6, r4
 800939c:	d105      	bne.n	80093aa <__libc_init_array+0x2e>
 800939e:	bd70      	pop	{r4, r5, r6, pc}
 80093a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80093a4:	4798      	blx	r3
 80093a6:	3601      	adds	r6, #1
 80093a8:	e7ee      	b.n	8009388 <__libc_init_array+0xc>
 80093aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80093ae:	4798      	blx	r3
 80093b0:	3601      	adds	r6, #1
 80093b2:	e7f2      	b.n	800939a <__libc_init_array+0x1e>
 80093b4:	08009424 	.word	0x08009424
 80093b8:	08009424 	.word	0x08009424
 80093bc:	08009424 	.word	0x08009424
 80093c0:	08009428 	.word	0x08009428

080093c4 <_init>:
 80093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c6:	bf00      	nop
 80093c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ca:	bc08      	pop	{r3}
 80093cc:	469e      	mov	lr, r3
 80093ce:	4770      	bx	lr

080093d0 <_fini>:
 80093d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d2:	bf00      	nop
 80093d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093d6:	bc08      	pop	{r3}
 80093d8:	469e      	mov	lr, r3
 80093da:	4770      	bx	lr
