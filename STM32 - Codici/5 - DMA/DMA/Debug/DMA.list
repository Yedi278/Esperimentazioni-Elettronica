
DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009148  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080093e0  080093e0  0000a3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009420  08009420  0000a420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009428  08009428  0000a428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800942c  0800942c  0000a42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08009430  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a28  24000010  08009440  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000a38  08009440  0000ba38  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018a22  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b79  00000000  00000000  00023a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001308  00000000  00000000  000265e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ede  00000000  00000000  000278e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003921f  00000000  00000000  000287c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ae6d  00000000  00000000  000619e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00176544  00000000  00000000  0007c852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f2d96  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005148  00000000  00000000  001f2ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  001f7f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080093c8 	.word	0x080093c8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080093c8 	.word	0x080093c8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADC_custom_init>:

bool triggd = false;
bool pre_triggd = false;
uint16_t trig_indx = 0;

void ADC_custom_init(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

	ADC3->SQR1=0; // Resetto il registro per cancellare modifice dell'IDE
 80005cc:	4b33      	ldr	r3, [pc, #204]	@ (800069c <ADC_custom_init+0xd4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere (0 = 1 canale)
 80005d2:	4b32      	ldr	r3, [pc, #200]	@ (800069c <ADC_custom_init+0xd4>)
 80005d4:	4a31      	ldr	r2, [pc, #196]	@ (800069c <ADC_custom_init+0xd4>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_SQ1_Pos);	// Inidco i canali da accendere
 80005da:	4b30      	ldr	r3, [pc, #192]	@ (800069c <ADC_custom_init+0xd4>)
 80005dc:	4a2f      	ldr	r2, [pc, #188]	@ (800069c <ADC_custom_init+0xd4>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->PCSEL |= ADC_PCSEL_PCSEL_0;		// Selezioni i canali da leggere
 80005e2:	4b2e      	ldr	r3, [pc, #184]	@ (800069c <ADC_custom_init+0xd4>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a2d      	ldr	r2, [pc, #180]	@ (800069c <ADC_custom_init+0xd4>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	61d3      	str	r3, [r2, #28]

	/* Fase di calibrazione */
	ADC3->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 80005ee:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <ADC_custom_init+0xd4>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	4a2a      	ldr	r2, [pc, #168]	@ (800069c <ADC_custom_init+0xd4>)
 80005f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80005f8:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 80005fa:	4b28      	ldr	r3, [pc, #160]	@ (800069c <ADC_custom_init+0xd4>)
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	4a27      	ldr	r2, [pc, #156]	@ (800069c <ADC_custom_init+0xd4>)
 8000600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000604:	6093      	str	r3, [r2, #8]
	ADC3->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 8000606:	4b25      	ldr	r3, [pc, #148]	@ (800069c <ADC_custom_init+0xd4>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	4a24      	ldr	r2, [pc, #144]	@ (800069c <ADC_custom_init+0xd4>)
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 8000612:	4b22      	ldr	r3, [pc, #136]	@ (800069c <ADC_custom_init+0xd4>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	4a21      	ldr	r2, [pc, #132]	@ (800069c <ADC_custom_init+0xd4>)
 8000618:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800061c:	6093      	str	r3, [r2, #8]

	while((ADC3->CR & ADC_CR_ADCAL) != 0){};
 800061e:	bf00      	nop
 8000620:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <ADC_custom_init+0xd4>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	2b00      	cmp	r3, #0
 8000626:	dbfb      	blt.n	8000620 <ADC_custom_init+0x58>
	/* Fine fase di calibrazione */

	/* Accensione ADC */
	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000628:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <ADC_custom_init+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1b      	ldr	r2, [pc, #108]	@ (800069c <ADC_custom_init+0xd4>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]
	ADC3->CR |= ADC_CR_ADEN;		// Abilito l'ADC
 8000634:	4b19      	ldr	r3, [pc, #100]	@ (800069c <ADC_custom_init+0xd4>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	4a18      	ldr	r2, [pc, #96]	@ (800069c <ADC_custom_init+0xd4>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6093      	str	r3, [r2, #8]

	while((ADC3->ISR & ADC_ISR_ADRDY) != 0){}	// Aspetto che il flag cambi
 8000640:	bf00      	nop
 8000642:	4b16      	ldr	r3, [pc, #88]	@ (800069c <ADC_custom_init+0xd4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f9      	bne.n	8000642 <ADC_custom_init+0x7a>

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 800064e:	4b13      	ldr	r3, [pc, #76]	@ (800069c <ADC_custom_init+0xd4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a12      	ldr	r2, [pc, #72]	@ (800069c <ADC_custom_init+0xd4>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6013      	str	r3, [r2, #0]
	/* Fine istruzioni per l'accensione */

	/* Impostazioni TIMER per triggerare l'nizio della misura */
	TIM6->PSC = 12;	// 240/12 = 20Mhz
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <ADC_custom_init+0xd8>)
 800065c:	220c      	movs	r2, #12
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 20;	// 20Mhz / 10 = 2Mhz
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <ADC_custom_init+0xd8>)
 8000662:	2214      	movs	r2, #20
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CNT = 0;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <ADC_custom_init+0xd8>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->DIER &= ~TIM_DIER_UIE;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <ADC_custom_init+0xd8>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	4a0b      	ldr	r2, [pc, #44]	@ (80006a0 <ADC_custom_init+0xd8>)
 8000672:	f023 0301 	bic.w	r3, r3, #1
 8000676:	60d3      	str	r3, [r2, #12]
	TIM6->CR1 &= ~TIM_CR1_CEN;
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <ADC_custom_init+0xd8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a08      	ldr	r2, [pc, #32]	@ (80006a0 <ADC_custom_init+0xd8>)
 800067e:	f023 0301 	bic.w	r3, r3, #1
 8000682:	6013      	str	r3, [r2, #0]
	/* Fine sett. TImer */

	ADC3->IER |= ADC_IER_EOCIE;		// Abilito l'interrupt di fine conversione
 8000684:	4b05      	ldr	r3, [pc, #20]	@ (800069c <ADC_custom_init+0xd4>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	4a04      	ldr	r2, [pc, #16]	@ (800069c <ADC_custom_init+0xd4>)
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	6053      	str	r3, [r2, #4]
//	ADC3->CR  |= ADC_CR_ADSTART;	// Inizio le misurazioni
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	58026000 	.word	0x58026000
 80006a0:	40001000 	.word	0x40001000

080006a4 <ADC_custom_interrupt>:

void ADC_custom_interrupt(){
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

	if(triggd && (DMA1_Stream0->NDTR == trig_indx)){
 80006a8:	4b30      	ldr	r3, [pc, #192]	@ (800076c <ADC_custom_interrupt+0xc8>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d018      	beq.n	80006e2 <ADC_custom_interrupt+0x3e>
 80006b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000770 <ADC_custom_interrupt+0xcc>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	4a2f      	ldr	r2, [pc, #188]	@ (8000774 <ADC_custom_interrupt+0xd0>)
 80006b6:	8812      	ldrh	r2, [r2, #0]
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d112      	bne.n	80006e2 <ADC_custom_interrupt+0x3e>

		TIM6->CR1 &= ~TIM_CR1_CEN;
 80006bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000778 <ADC_custom_interrupt+0xd4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a2d      	ldr	r2, [pc, #180]	@ (8000778 <ADC_custom_interrupt+0xd4>)
 80006c2:	f023 0301 	bic.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

		triggd = 0;
 80006c8:	4b28      	ldr	r3, [pc, #160]	@ (800076c <ADC_custom_interrupt+0xc8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
		pre_triggd = 0;
 80006ce:	4b2b      	ldr	r3, [pc, #172]	@ (800077c <ADC_custom_interrupt+0xd8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]

		USART3->CR3 |= USART_CR3_DMAT;
 80006d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000780 <ADC_custom_interrupt+0xdc>)
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	4a29      	ldr	r2, [pc, #164]	@ (8000780 <ADC_custom_interrupt+0xdc>)
 80006da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006de:	6093      	str	r3, [r2, #8]
		return;
 80006e0:	e03f      	b.n	8000762 <ADC_custom_interrupt+0xbe>
	}

	else if(!triggd && (ADC3->DR < PRETRIG_VALUE) ){
 80006e2:	4b22      	ldr	r3, [pc, #136]	@ (800076c <ADC_custom_interrupt+0xc8>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	f083 0301 	eor.w	r3, r3, #1
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d009      	beq.n	8000704 <ADC_custom_interrupt+0x60>
 80006f0:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <ADC_custom_interrupt+0xe0>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	f240 424b 	movw	r2, #1099	@ 0x44b
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d803      	bhi.n	8000704 <ADC_custom_interrupt+0x60>
		pre_triggd = 1;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <ADC_custom_interrupt+0xd8>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
		return;
 8000702:	e02e      	b.n	8000762 <ADC_custom_interrupt+0xbe>
	}

	else if(pre_triggd && !triggd && (ADC3->DR > TRIG_VALUE)){
 8000704:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <ADC_custom_interrupt+0xd8>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d024      	beq.n	8000756 <ADC_custom_interrupt+0xb2>
 800070c:	4b17      	ldr	r3, [pc, #92]	@ (800076c <ADC_custom_interrupt+0xc8>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f083 0301 	eor.w	r3, r3, #1
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d01d      	beq.n	8000756 <ADC_custom_interrupt+0xb2>
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <ADC_custom_interrupt+0xe0>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071e:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8000722:	d918      	bls.n	8000756 <ADC_custom_interrupt+0xb2>
		triggd = 1;
 8000724:	4b11      	ldr	r3, [pc, #68]	@ (800076c <ADC_custom_interrupt+0xc8>)
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
		pre_triggd = 0;
 800072a:	4b14      	ldr	r3, [pc, #80]	@ (800077c <ADC_custom_interrupt+0xd8>)
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
//		trig_indx = DMA1_Stream0->NDTR;
		trig_indx = (DMA1_Stream0->NDTR + 10UL)%1000UL + 1UL;	// conservo 100 dati prima del trigger
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <ADC_custom_interrupt+0xcc>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	f103 020a 	add.w	r2, r3, #10
 8000738:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <ADC_custom_interrupt+0xe4>)
 800073a:	fba3 1302 	umull	r1, r3, r3, r2
 800073e:	099b      	lsrs	r3, r3, #6
 8000740:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000744:	fb01 f303 	mul.w	r3, r1, r3
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	b29b      	uxth	r3, r3
 800074c:	3301      	adds	r3, #1
 800074e:	b29a      	uxth	r2, r3
 8000750:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <ADC_custom_interrupt+0xd0>)
 8000752:	801a      	strh	r2, [r3, #0]
		return;
 8000754:	e005      	b.n	8000762 <ADC_custom_interrupt+0xbe>
	}

	ADC3->ISR |= ADC_ISR_EOC;
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <ADC_custom_interrupt+0xe0>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a0a      	ldr	r2, [pc, #40]	@ (8000784 <ADC_custom_interrupt+0xe0>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6013      	str	r3, [r2, #0]
}
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	2400002c 	.word	0x2400002c
 8000770:	40020010 	.word	0x40020010
 8000774:	2400002e 	.word	0x2400002e
 8000778:	40001000 	.word	0x40001000
 800077c:	2400002d 	.word	0x2400002d
 8000780:	40004800 	.word	0x40004800
 8000784:	58026000 	.word	0x58026000
 8000788:	10624dd3 	.word	0x10624dd3

0800078c <DMA_custom_init>:

#define DMA_DATA_BUFF_SIZE 1000

uint16_t DMA_data_buffer[DMA_DATA_BUFF_SIZE];

void DMA_custom_init(){
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0

	DMA1_Stream0->M0AR = (uint32_t) (&DMA_data_buffer);	// inidico l'indirizzo dello storarge di dati
 8000792:	4b20      	ldr	r3, [pc, #128]	@ (8000814 <DMA_custom_init+0x88>)
 8000794:	4a20      	ldr	r2, [pc, #128]	@ (8000818 <DMA_custom_init+0x8c>)
 8000796:	60da      	str	r2, [r3, #12]
	DMA1_Stream1->M0AR = (uint32_t) (&DMA_data_buffer);
 8000798:	4b20      	ldr	r3, [pc, #128]	@ (800081c <DMA_custom_init+0x90>)
 800079a:	4a1f      	ldr	r2, [pc, #124]	@ (8000818 <DMA_custom_init+0x8c>)
 800079c:	60da      	str	r2, [r3, #12]

	DMA1_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
 800079e:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <DMA_custom_init+0x88>)
 80007a0:	4a1f      	ldr	r2, [pc, #124]	@ (8000820 <DMA_custom_init+0x94>)
 80007a2:	609a      	str	r2, [r3, #8]
	DMA1_Stream1->PAR = (uint32_t) (&USART3->TDR);
 80007a4:	4b1d      	ldr	r3, [pc, #116]	@ (800081c <DMA_custom_init+0x90>)
 80007a6:	4a1f      	ldr	r2, [pc, #124]	@ (8000824 <DMA_custom_init+0x98>)
 80007a8:	609a      	str	r2, [r3, #8]

	uint32_t n_misure = DMA_DATA_BUFF_SIZE;
 80007aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ae:	607b      	str	r3, [r7, #4]

	DMA1_Stream0->NDTR = n_misure;			// numero elementi da prendere da ADC3
 80007b0:	4a18      	ldr	r2, [pc, #96]	@ (8000814 <DMA_custom_init+0x88>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6053      	str	r3, [r2, #4]
	DMA1_Stream1->NDTR = n_misure*2;			// numero elementi da mandare a USART3
 80007b6:	4a19      	ldr	r2, [pc, #100]	@ (800081c <DMA_custom_init+0x90>)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	6053      	str	r3, [r2, #4]

	DMA1_Stream0->CR &= ~DMA_SxCR_TCIE;		// disablilito interrupt di fine ricezione
 80007be:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <DMA_custom_init+0x88>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a14      	ldr	r2, [pc, #80]	@ (8000814 <DMA_custom_init+0x88>)
 80007c4:	f023 0310 	bic.w	r3, r3, #16
 80007c8:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine trasmissione
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <DMA_custom_init+0x90>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a13      	ldr	r2, [pc, #76]	@ (800081c <DMA_custom_init+0x90>)
 80007d0:	f043 0310 	orr.w	r3, r3, #16
 80007d4:	6013      	str	r3, [r2, #0]

	ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);	// DMA in cont mode
 80007d6:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <DMA_custom_init+0x9c>)
 80007d8:	68db      	ldr	r3, [r3, #12]
 80007da:	4a13      	ldr	r2, [pc, #76]	@ (8000828 <DMA_custom_init+0x9c>)
 80007dc:	f043 0303 	orr.w	r3, r3, #3
 80007e0:	60d3      	str	r3, [r2, #12]

	DMA1_Stream0->CR |= DMA_SxCR_EN;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <DMA_custom_init+0x88>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000814 <DMA_custom_init+0x88>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <DMA_custom_init+0x90>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a0a      	ldr	r2, [pc, #40]	@ (800081c <DMA_custom_init+0x90>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6013      	str	r3, [r2, #0]

	ADC3->CR  |= ADC_CR_ADSTART;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <DMA_custom_init+0x9c>)
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000828 <DMA_custom_init+0x9c>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6093      	str	r3, [r2, #8]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40020010 	.word	0x40020010
 8000818:	24000030 	.word	0x24000030
 800081c:	40020028 	.word	0x40020028
 8000820:	58026040 	.word	0x58026040
 8000824:	40004828 	.word	0x40004828
 8000828:	58026000 	.word	0x58026000

0800082c <DMA_custom_interrupt_tx>:


void DMA_custom_interrupt_tx(){
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 8000830:	4b1e      	ldr	r3, [pc, #120]	@ (80008ac <DMA_custom_interrupt_tx+0x80>)
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	4a1d      	ldr	r2, [pc, #116]	@ (80008ac <DMA_custom_interrupt_tx+0x80>)
 8000836:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800083a:	6093      	str	r3, [r2, #8]

	DMA1->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 800083c:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <DMA_custom_interrupt_tx+0x84>)
 800083e:	f04f 32ff 	mov.w	r2, #4294967295
 8000842:	609a      	str	r2, [r3, #8]
	DMA1->HIFCR = 0xffffffff;
 8000844:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <DMA_custom_interrupt_tx+0x84>)
 8000846:	f04f 32ff 	mov.w	r2, #4294967295
 800084a:	60da      	str	r2, [r3, #12]

	DMA1_Stream0->CR |= DMA_SxCR_EN;
 800084c:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <DMA_custom_interrupt_tx+0x88>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a18      	ldr	r2, [pc, #96]	@ (80008b4 <DMA_custom_interrupt_tx+0x88>)
 8000852:	f043 0301 	orr.w	r3, r3, #1
 8000856:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 8000858:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <DMA_custom_interrupt_tx+0x8c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <DMA_custom_interrupt_tx+0x8c>)
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	6013      	str	r3, [r2, #0]

	// invio come ultimo elemento l'indice di trigger
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 8000864:	bf00      	nop
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <DMA_custom_interrupt_tx+0x80>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0f9      	beq.n	8000866 <DMA_custom_interrupt_tx+0x3a>
	USART3->TDR = (unsigned char)(trig_indx & 0xFF );
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <DMA_custom_interrupt_tx+0x90>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <DMA_custom_interrupt_tx+0x80>)
 800087a:	629a      	str	r2, [r3, #40]	@ 0x28
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 800087c:	bf00      	nop
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <DMA_custom_interrupt_tx+0x80>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000886:	2b00      	cmp	r3, #0
 8000888:	d0f9      	beq.n	800087e <DMA_custom_interrupt_tx+0x52>
	USART3->TDR = *((unsigned char*)&trig_indx + 1);
 800088a:	4b0d      	ldr	r3, [pc, #52]	@ (80008c0 <DMA_custom_interrupt_tx+0x94>)
 800088c:	781a      	ldrb	r2, [r3, #0]
 800088e:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <DMA_custom_interrupt_tx+0x80>)
 8000890:	629a      	str	r2, [r3, #40]	@ 0x28
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 8000892:	bf00      	nop
 8000894:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <DMA_custom_interrupt_tx+0x80>)
 8000896:	69db      	ldr	r3, [r3, #28]
 8000898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800089c:	2b00      	cmp	r3, #0
 800089e:	d0f9      	beq.n	8000894 <DMA_custom_interrupt_tx+0x68>
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	40004800 	.word	0x40004800
 80008b0:	40020000 	.word	0x40020000
 80008b4:	40020010 	.word	0x40020010
 80008b8:	40020028 	.word	0x40020028
 80008bc:	2400002e 	.word	0x2400002e
 80008c0:	2400002f 	.word	0x2400002f

080008c4 <USART_init>:
 *      Author: yehan
 */

#include "Custom_USART.h"

void USART_init(){
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

	USART3->CR1 |= USART_CR1_TE;
 80008c8:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <USART_init+0x4c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a10      	ldr	r2, [pc, #64]	@ (8000910 <USART_init+0x4c>)
 80008ce:	f043 0308 	orr.w	r3, r3, #8
 80008d2:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_RE;
 80008d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <USART_init+0x4c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000910 <USART_init+0x4c>)
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	6013      	str	r3, [r2, #0]

	USART3->CR1 &= ~USART_CR1_TXEIE;
 80008e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <USART_init+0x4c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000910 <USART_init+0x4c>)
 80008e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80008ea:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_RXNEIE;
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <USART_init+0x4c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a07      	ldr	r2, [pc, #28]	@ (8000910 <USART_init+0x4c>)
 80008f2:	f043 0320 	orr.w	r3, r3, #32
 80008f6:	6013      	str	r3, [r2, #0]

	USART3->CR1 |= USART_CR1_UE;
 80008f8:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <USART_init+0x4c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a04      	ldr	r2, [pc, #16]	@ (8000910 <USART_init+0x4c>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6013      	str	r3, [r2, #0]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40004800 	.word	0x40004800

08000914 <USART_custom_interrupt>:

void USART_custom_interrupt(){
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0

	char data = USART3->RDR;
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <USART_custom_interrupt+0x5c>)
 800091c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800091e:	71fb      	strb	r3, [r7, #7]

	if(data == '?'){
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	2b3f      	cmp	r3, #63	@ 0x3f
 8000924:	d10b      	bne.n	800093e <USART_custom_interrupt+0x2a>

		USART3->CR3 &= ~USART_CR3_DMAT;	// spengo l'usart
 8000926:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <USART_custom_interrupt+0x5c>)
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	4a11      	ldr	r2, [pc, #68]	@ (8000970 <USART_custom_interrupt+0x5c>)
 800092c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000930:	6093      	str	r3, [r2, #8]
		TIM6->CR1 |= TIM_CR1_CEN;		// accendo l'adc
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <USART_custom_interrupt+0x60>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a0f      	ldr	r2, [pc, #60]	@ (8000974 <USART_custom_interrupt+0x60>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6013      	str	r3, [r2, #0]
	}

	USART3->ICR |= USART_ICR_ORECF;  //Cancella l'overrun. Capita quando si entra in debug
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <USART_custom_interrupt+0x5c>)
 8000940:	6a1b      	ldr	r3, [r3, #32]
 8000942:	4a0b      	ldr	r2, [pc, #44]	@ (8000970 <USART_custom_interrupt+0x5c>)
 8000944:	f043 0308 	orr.w	r3, r3, #8
 8000948:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF;   //Azzeramento flag interrupt trasmissione
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <USART_custom_interrupt+0x5c>)
 800094c:	6a1b      	ldr	r3, [r3, #32]
 800094e:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <USART_custom_interrupt+0x5c>)
 8000950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000954:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <USART_custom_interrupt+0x5c>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	4a05      	ldr	r2, [pc, #20]	@ (8000970 <USART_custom_interrupt+0x5c>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6193      	str	r3, [r2, #24]
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40004800 	.word	0x40004800
 8000974:	40001000 	.word	0x40001000

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097c:	f000 fd8c 	bl	8001498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000980:	f000 f812 	bl	80009a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000984:	f000 f9da 	bl	8000d3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000988:	f000 f9b0 	bl	8000cec <MX_DMA_Init>
  MX_ADC3_Init();
 800098c:	f000 f8ba 	bl	8000b04 <MX_ADC3_Init>
  MX_TIM6_Init();
 8000990:	f000 f928 	bl	8000be4 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8000994:	f000 f95c 	bl	8000c50 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  ADC_custom_init();
 8000998:	f7ff fe16 	bl	80005c8 <ADC_custom_init>
  USART_init();
 800099c:	f7ff ff92 	bl	80008c4 <USART_init>
  DMA_custom_init();
 80009a0:	f7ff fef4 	bl	800078c <DMA_custom_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <main+0x2c>

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b09e      	sub	sp, #120	@ 0x78
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009b2:	224c      	movs	r2, #76	@ 0x4c
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f008 fcda 	bl	8009370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	2220      	movs	r2, #32
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f008 fcd3 	bl	8009370 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009ca:	2002      	movs	r0, #2
 80009cc:	f003 fd4a 	bl	8004464 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	4b48      	ldr	r3, [pc, #288]	@ (8000af8 <SystemClock_Config+0x150>)
 80009d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009d8:	4a47      	ldr	r2, [pc, #284]	@ (8000af8 <SystemClock_Config+0x150>)
 80009da:	f023 0301 	bic.w	r3, r3, #1
 80009de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009e0:	4b45      	ldr	r3, [pc, #276]	@ (8000af8 <SystemClock_Config+0x150>)
 80009e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b44      	ldr	r3, [pc, #272]	@ (8000afc <SystemClock_Config+0x154>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4a43      	ldr	r2, [pc, #268]	@ (8000afc <SystemClock_Config+0x154>)
 80009f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009f4:	6193      	str	r3, [r2, #24]
 80009f6:	4b41      	ldr	r3, [pc, #260]	@ (8000afc <SystemClock_Config+0x154>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a02:	bf00      	nop
 8000a04:	4b3d      	ldr	r3, [pc, #244]	@ (8000afc <SystemClock_Config+0x154>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a10:	d1f8      	bne.n	8000a04 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b3b      	ldr	r3, [pc, #236]	@ (8000b00 <SystemClock_Config+0x158>)
 8000a14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a18:	4a39      	ldr	r2, [pc, #228]	@ (8000b00 <SystemClock_Config+0x158>)
 8000a1a:	f043 0302 	orr.w	r3, r3, #2
 8000a1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a22:	4b37      	ldr	r3, [pc, #220]	@ (8000b00 <SystemClock_Config+0x158>)
 8000a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a30:	2300      	movs	r3, #0
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	4b31      	ldr	r3, [pc, #196]	@ (8000afc <SystemClock_Config+0x154>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a30      	ldr	r2, [pc, #192]	@ (8000afc <SystemClock_Config+0x154>)
 8000a3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b2e      	ldr	r3, [pc, #184]	@ (8000afc <SystemClock_Config+0x154>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000af8 <SystemClock_Config+0x150>)
 8000a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8000af8 <SystemClock_Config+0x150>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a56:	4b28      	ldr	r3, [pc, #160]	@ (8000af8 <SystemClock_Config+0x150>)
 8000a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a62:	bf00      	nop
 8000a64:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <SystemClock_Config+0x154>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a70:	d1f8      	bne.n	8000a64 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a72:	2301      	movs	r3, #1
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a76:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a7a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a80:	2302      	movs	r3, #2
 8000a82:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000a88:	2378      	movs	r3, #120	@ 0x78
 8000a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a90:	2304      	movs	r3, #4
 8000a92:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f003 fd15 	bl	80044d8 <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000ab4:	f000 fa72 	bl	8000f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab8:	233f      	movs	r3, #63	@ 0x3f
 8000aba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abc:	2303      	movs	r3, #3
 8000abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ac8:	2340      	movs	r3, #64	@ 0x40
 8000aca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000acc:	2340      	movs	r3, #64	@ 0x40
 8000ace:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ad6:	2340      	movs	r3, #64	@ 0x40
 8000ad8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2104      	movs	r1, #4
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f004 f953 	bl	8004d8c <HAL_RCC_ClockConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000aec:	f000 fa56 	bl	8000f9c <Error_Handler>
  }
}
 8000af0:	bf00      	nop
 8000af2:	3778      	adds	r7, #120	@ 0x78
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	58000400 	.word	0x58000400
 8000afc:	58024800 	.word	0x58024800
 8000b00:	58024400 	.word	0x58024400

08000b04 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	615a      	str	r2, [r3, #20]
 8000b1a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000bdc <MX_ADC3_Init+0xd8>)
 8000b1e:	4a30      	ldr	r2, [pc, #192]	@ (8000be0 <MX_ADC3_Init+0xdc>)
 8000b20:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b22:	4b2e      	ldr	r3, [pc, #184]	@ (8000bdc <MX_ADC3_Init+0xd8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b28:	4b2c      	ldr	r3, [pc, #176]	@ (8000bdc <MX_ADC3_Init+0xd8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bdc <MX_ADC3_Init+0xd8>)
 8000b30:	2204      	movs	r2, #4
 8000b32:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b34:	4b29      	ldr	r3, [pc, #164]	@ (8000bdc <MX_ADC3_Init+0xd8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b3a:	4b28      	ldr	r3, [pc, #160]	@ (8000bdc <MX_ADC3_Init+0xd8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000b40:	4b26      	ldr	r3, [pc, #152]	@ (8000bdc <MX_ADC3_Init+0xd8>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b46:	4b25      	ldr	r3, [pc, #148]	@ (8000bdc <MX_ADC3_Init+0xd8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000b4c:	4b23      	ldr	r3, [pc, #140]	@ (8000bdc <MX_ADC3_Init+0xd8>)
 8000b4e:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000b52:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b54:	4b21      	ldr	r3, [pc, #132]	@ (8000bdc <MX_ADC3_Init+0xd8>)
 8000b56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bdc <MX_ADC3_Init+0xd8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b62:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <MX_ADC3_Init+0xd8>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b68:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <MX_ADC3_Init+0xd8>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <MX_ADC3_Init+0xd8>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000b76:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <MX_ADC3_Init+0xd8>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b7c:	4817      	ldr	r0, [pc, #92]	@ (8000bdc <MX_ADC3_Init+0xd8>)
 8000b7e:	f000 fecb 	bl	8001918 <HAL_ADC_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000b88:	f000 fa08 	bl	8000f9c <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000b8c:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <MX_ADC3_Init+0xd8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b92:	4812      	ldr	r0, [pc, #72]	@ (8000bdc <MX_ADC3_Init+0xd8>)
 8000b94:	f000 fec0 	bl	8001918 <HAL_ADC_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000b9e:	f000 f9fd 	bl	8000f9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ba6:	2306      	movs	r3, #6
 8000ba8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bae:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000bb2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_ADC3_Init+0xd8>)
 8000bc6:	f001 f849 	bl	8001c5c <HAL_ADC_ConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000bd0:	f000 f9e4 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	3720      	adds	r7, #32
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	24000800 	.word	0x24000800
 8000be0:	58026000 	.word	0x58026000

08000be4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <MX_TIM6_Init+0x64>)
 8000bf6:	4a15      	ldr	r2, [pc, #84]	@ (8000c4c <MX_TIM6_Init+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <MX_TIM6_Init+0x64>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_TIM6_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <MX_TIM6_Init+0x64>)
 8000c08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c0c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_TIM6_Init+0x64>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c14:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <MX_TIM6_Init+0x64>)
 8000c16:	f007 f943 	bl	8007ea0 <HAL_TIM_Base_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c20:	f000 f9bc 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c24:	2320      	movs	r3, #32
 8000c26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_TIM6_Init+0x64>)
 8000c32:	f007 fa33 	bl	800809c <HAL_TIMEx_MasterConfigSynchronization>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c3c:	f000 f9ae 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	240008dc 	.word	0x240008dc
 8000c4c:	40001000 	.word	0x40001000

08000c50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c54:	4b22      	ldr	r3, [pc, #136]	@ (8000ce0 <MX_USART3_UART_Init+0x90>)
 8000c56:	4a23      	ldr	r2, [pc, #140]	@ (8000ce4 <MX_USART3_UART_Init+0x94>)
 8000c58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	@ (8000ce0 <MX_USART3_UART_Init+0x90>)
 8000c5c:	4a22      	ldr	r2, [pc, #136]	@ (8000ce8 <MX_USART3_UART_Init+0x98>)
 8000c5e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce0 <MX_USART3_UART_Init+0x90>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce0 <MX_USART3_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce0 <MX_USART3_UART_Init+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce0 <MX_USART3_UART_Init+0x90>)
 8000c74:	220c      	movs	r2, #12
 8000c76:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c78:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <MX_USART3_UART_Init+0x90>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <MX_USART3_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c84:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <MX_USART3_UART_Init+0x90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <MX_USART3_UART_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c90:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <MX_USART3_UART_Init+0x90>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c96:	4812      	ldr	r0, [pc, #72]	@ (8000ce0 <MX_USART3_UART_Init+0x90>)
 8000c98:	f007 fa8e 	bl	80081b8 <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000ca2:	f000 f97b 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	480d      	ldr	r0, [pc, #52]	@ (8000ce0 <MX_USART3_UART_Init+0x90>)
 8000caa:	f008 fa96 	bl	80091da <HAL_UARTEx_SetTxFifoThreshold>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000cb4:	f000 f972 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4809      	ldr	r0, [pc, #36]	@ (8000ce0 <MX_USART3_UART_Init+0x90>)
 8000cbc:	f008 facb 	bl	8009256 <HAL_UARTEx_SetRxFifoThreshold>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000cc6:	f000 f969 	bl	8000f9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	@ (8000ce0 <MX_USART3_UART_Init+0x90>)
 8000ccc:	f008 fa4c 	bl	8009168 <HAL_UARTEx_DisableFifoMode>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000cd6:	f000 f961 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	24000928 	.word	0x24000928
 8000ce4:	40004800 	.word	0x40004800
 8000ce8:	000f4240 	.word	0x000f4240

08000cec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <MX_DMA_Init+0x4c>)
 8000cf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cf8:	4a0f      	ldr	r2, [pc, #60]	@ (8000d38 <MX_DMA_Init+0x4c>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d02:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <MX_DMA_Init+0x4c>)
 8000d04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	200b      	movs	r0, #11
 8000d16:	f001 fce4 	bl	80026e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d1a:	200b      	movs	r0, #11
 8000d1c:	f001 fcfb 	bl	8002716 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	200c      	movs	r0, #12
 8000d26:	f001 fcdc 	bl	80026e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d2a:	200c      	movs	r0, #12
 8000d2c:	f001 fcf3 	bl	8002716 <HAL_NVIC_EnableIRQ>

}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	58024400 	.word	0x58024400

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	@ 0x30
 8000d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d52:	4b8b      	ldr	r3, [pc, #556]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d58:	4a89      	ldr	r2, [pc, #548]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000d5a:	f043 0304 	orr.w	r3, r3, #4
 8000d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d62:	4b87      	ldr	r3, [pc, #540]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d68:	f003 0304 	and.w	r3, r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
 8000d6e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d70:	4b83      	ldr	r3, [pc, #524]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d76:	4a82      	ldr	r2, [pc, #520]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d80:	4b7f      	ldr	r3, [pc, #508]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b7c      	ldr	r3, [pc, #496]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d94:	4a7a      	ldr	r2, [pc, #488]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d9e:	4b78      	ldr	r3, [pc, #480]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dac:	4b74      	ldr	r3, [pc, #464]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db2:	4a73      	ldr	r2, [pc, #460]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dbc:	4b70      	ldr	r3, [pc, #448]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dca:	4b6d      	ldr	r3, [pc, #436]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd0:	4a6b      	ldr	r2, [pc, #428]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000dd2:	f043 0308 	orr.w	r3, r3, #8
 8000dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dda:	4b69      	ldr	r3, [pc, #420]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de0:	f003 0308 	and.w	r3, r3, #8
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de8:	4b65      	ldr	r3, [pc, #404]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dee:	4a64      	ldr	r2, [pc, #400]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000df0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000df4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df8:	4b61      	ldr	r3, [pc, #388]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e06:	4b5e      	ldr	r3, [pc, #376]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0c:	4a5c      	ldr	r2, [pc, #368]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e16:	4b5a      	ldr	r3, [pc, #360]	@ (8000f80 <MX_GPIO_Init+0x244>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1c:	f003 0310 	and.w	r3, r3, #16
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000e2a:	4856      	ldr	r0, [pc, #344]	@ (8000f84 <MX_GPIO_Init+0x248>)
 8000e2c:	f003 fb00 	bl	8004430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e36:	4854      	ldr	r0, [pc, #336]	@ (8000f88 <MX_GPIO_Init+0x24c>)
 8000e38:	f003 fafa 	bl	8004430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2102      	movs	r1, #2
 8000e40:	4852      	ldr	r0, [pc, #328]	@ (8000f8c <MX_GPIO_Init+0x250>)
 8000e42:	f003 faf5 	bl	8004430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	484d      	ldr	r0, [pc, #308]	@ (8000f90 <MX_GPIO_Init+0x254>)
 8000e5c:	f003 f938 	bl	80040d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e60:	2332      	movs	r3, #50	@ 0x32
 8000e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e70:	230b      	movs	r3, #11
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4845      	ldr	r0, [pc, #276]	@ (8000f90 <MX_GPIO_Init+0x254>)
 8000e7c:	f003 f928 	bl	80040d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e80:	2386      	movs	r3, #134	@ 0x86
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e90:	230b      	movs	r3, #11
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4619      	mov	r1, r3
 8000e9a:	483e      	ldr	r0, [pc, #248]	@ (8000f94 <MX_GPIO_Init+0x258>)
 8000e9c:	f003 f918 	bl	80040d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ea0:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4832      	ldr	r0, [pc, #200]	@ (8000f84 <MX_GPIO_Init+0x248>)
 8000eba:	f003 f909 	bl	80040d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ebe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed0:	230b      	movs	r3, #11
 8000ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	482a      	ldr	r0, [pc, #168]	@ (8000f84 <MX_GPIO_Init+0x248>)
 8000edc:	f003 f8f8 	bl	80040d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ee0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4823      	ldr	r0, [pc, #140]	@ (8000f88 <MX_GPIO_Init+0x24c>)
 8000efa:	f003 f8e9 	bl	80040d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000efe:	2380      	movs	r3, #128	@ 0x80
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	4821      	ldr	r0, [pc, #132]	@ (8000f98 <MX_GPIO_Init+0x25c>)
 8000f14:	f003 f8dc 	bl	80040d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f18:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	4817      	ldr	r0, [pc, #92]	@ (8000f94 <MX_GPIO_Init+0x258>)
 8000f36:	f003 f8cb 	bl	80040d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f3a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f4c:	230b      	movs	r3, #11
 8000f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	4810      	ldr	r0, [pc, #64]	@ (8000f98 <MX_GPIO_Init+0x25c>)
 8000f58:	f003 f8ba 	bl	80040d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4806      	ldr	r0, [pc, #24]	@ (8000f8c <MX_GPIO_Init+0x250>)
 8000f74:	f003 f8ac 	bl	80040d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f78:	bf00      	nop
 8000f7a:	3730      	adds	r7, #48	@ 0x30
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	58024400 	.word	0x58024400
 8000f84:	58020400 	.word	0x58020400
 8000f88:	58020c00 	.word	0x58020c00
 8000f8c:	58021000 	.word	0x58021000
 8000f90:	58020800 	.word	0x58020800
 8000f94:	58020000 	.word	0x58020000
 8000f98:	58021800 	.word	0x58021800

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <Error_Handler+0x8>

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <HAL_MspInit+0x30>)
 8000fb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fb4:	4a08      	ldr	r2, [pc, #32]	@ (8000fd8 <HAL_MspInit+0x30>)
 8000fb6:	f043 0302 	orr.w	r3, r3, #2
 8000fba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_MspInit+0x30>)
 8000fc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	58024400 	.word	0x58024400

08000fdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b0b4      	sub	sp, #208	@ 0xd0
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	22c0      	movs	r2, #192	@ 0xc0
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f008 f9bf 	bl	8009370 <memset>
  if(hadc->Instance==ADC3)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a43      	ldr	r2, [pc, #268]	@ (8001104 <HAL_ADC_MspInit+0x128>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d17e      	bne.n	80010fa <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ffc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001008:	2302      	movs	r3, #2
 800100a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 50;
 800100c:	2332      	movs	r3, #50	@ 0x32
 800100e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001010:	2302      	movs	r3, #2
 8001012:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001014:	2302      	movs	r3, #2
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001018:	2302      	movs	r3, #2
 800101a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800101c:	2380      	movs	r3, #128	@ 0x80
 800101e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001020:	2300      	movs	r3, #0
 8001022:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102e:	f107 0310 	add.w	r3, r7, #16
 8001032:	4618      	mov	r0, r3
 8001034:	f004 fa36 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 800103e:	f7ff ffad 	bl	8000f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001042:	4b31      	ldr	r3, [pc, #196]	@ (8001108 <HAL_ADC_MspInit+0x12c>)
 8001044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001048:	4a2f      	ldr	r2, [pc, #188]	@ (8001108 <HAL_ADC_MspInit+0x12c>)
 800104a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800104e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001052:	4b2d      	ldr	r3, [pc, #180]	@ (8001108 <HAL_ADC_MspInit+0x12c>)
 8001054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001058:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001060:	4b29      	ldr	r3, [pc, #164]	@ (8001108 <HAL_ADC_MspInit+0x12c>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001066:	4a28      	ldr	r2, [pc, #160]	@ (8001108 <HAL_ADC_MspInit+0x12c>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001070:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <HAL_ADC_MspInit+0x12c>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800107e:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001082:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001086:	f000 faa5 	bl	80015d4 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 800108a:	4b20      	ldr	r3, [pc, #128]	@ (800110c <HAL_ADC_MspInit+0x130>)
 800108c:	4a20      	ldr	r2, [pc, #128]	@ (8001110 <HAL_ADC_MspInit+0x134>)
 800108e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001090:	4b1e      	ldr	r3, [pc, #120]	@ (800110c <HAL_ADC_MspInit+0x130>)
 8001092:	2273      	movs	r2, #115	@ 0x73
 8001094:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001096:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <HAL_ADC_MspInit+0x130>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800109c:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <HAL_ADC_MspInit+0x130>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <HAL_ADC_MspInit+0x130>)
 80010a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010a8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010aa:	4b18      	ldr	r3, [pc, #96]	@ (800110c <HAL_ADC_MspInit+0x130>)
 80010ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010b0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010b2:	4b16      	ldr	r3, [pc, #88]	@ (800110c <HAL_ADC_MspInit+0x130>)
 80010b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80010ba:	4b14      	ldr	r3, [pc, #80]	@ (800110c <HAL_ADC_MspInit+0x130>)
 80010bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010c0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80010c2:	4b12      	ldr	r3, [pc, #72]	@ (800110c <HAL_ADC_MspInit+0x130>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010c8:	4b10      	ldr	r3, [pc, #64]	@ (800110c <HAL_ADC_MspInit+0x130>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80010ce:	480f      	ldr	r0, [pc, #60]	@ (800110c <HAL_ADC_MspInit+0x130>)
 80010d0:	f001 fb3c 	bl	800274c <HAL_DMA_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80010da:	f7ff ff5f 	bl	8000f9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <HAL_ADC_MspInit+0x130>)
 80010e2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80010e4:	4a09      	ldr	r2, [pc, #36]	@ (800110c <HAL_ADC_MspInit+0x130>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	207f      	movs	r0, #127	@ 0x7f
 80010f0:	f001 faf7 	bl	80026e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80010f4:	207f      	movs	r0, #127	@ 0x7f
 80010f6:	f001 fb0e 	bl	8002716 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 80010fa:	bf00      	nop
 80010fc:	37d0      	adds	r7, #208	@ 0xd0
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	58026000 	.word	0x58026000
 8001108:	58024400 	.word	0x58024400
 800110c:	24000864 	.word	0x24000864
 8001110:	40020010 	.word	0x40020010

08001114 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0b      	ldr	r2, [pc, #44]	@ (8001150 <HAL_TIM_Base_MspInit+0x3c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d10e      	bne.n	8001144 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <HAL_TIM_Base_MspInit+0x40>)
 8001128:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800112c:	4a09      	ldr	r2, [pc, #36]	@ (8001154 <HAL_TIM_Base_MspInit+0x40>)
 800112e:	f043 0310 	orr.w	r3, r3, #16
 8001132:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001136:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <HAL_TIM_Base_MspInit+0x40>)
 8001138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800113c:	f003 0310 	and.w	r3, r3, #16
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	40001000 	.word	0x40001000
 8001154:	58024400 	.word	0x58024400

08001158 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b0ba      	sub	sp, #232	@ 0xe8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	22c0      	movs	r2, #192	@ 0xc0
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f008 f8f9 	bl	8009370 <memset>
  if(huart->Instance==USART3)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a41      	ldr	r2, [pc, #260]	@ (8001288 <HAL_UART_MspInit+0x130>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d17b      	bne.n	8001280 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001188:	f04f 0202 	mov.w	r2, #2
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	4618      	mov	r0, r3
 80011a0:	f004 f980 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80011aa:	f7ff fef7 	bl	8000f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ae:	4b37      	ldr	r3, [pc, #220]	@ (800128c <HAL_UART_MspInit+0x134>)
 80011b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011b4:	4a35      	ldr	r2, [pc, #212]	@ (800128c <HAL_UART_MspInit+0x134>)
 80011b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011be:	4b33      	ldr	r3, [pc, #204]	@ (800128c <HAL_UART_MspInit+0x134>)
 80011c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011cc:	4b2f      	ldr	r3, [pc, #188]	@ (800128c <HAL_UART_MspInit+0x134>)
 80011ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d2:	4a2e      	ldr	r2, [pc, #184]	@ (800128c <HAL_UART_MspInit+0x134>)
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011dc:	4b2b      	ldr	r3, [pc, #172]	@ (800128c <HAL_UART_MspInit+0x134>)
 80011de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001204:	2307      	movs	r3, #7
 8001206:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800120e:	4619      	mov	r1, r3
 8001210:	481f      	ldr	r0, [pc, #124]	@ (8001290 <HAL_UART_MspInit+0x138>)
 8001212:	f002 ff5d 	bl	80040d0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001216:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <HAL_UART_MspInit+0x13c>)
 8001218:	4a1f      	ldr	r2, [pc, #124]	@ (8001298 <HAL_UART_MspInit+0x140>)
 800121a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800121c:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <HAL_UART_MspInit+0x13c>)
 800121e:	222e      	movs	r2, #46	@ 0x2e
 8001220:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001222:	4b1c      	ldr	r3, [pc, #112]	@ (8001294 <HAL_UART_MspInit+0x13c>)
 8001224:	2240      	movs	r2, #64	@ 0x40
 8001226:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001228:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <HAL_UART_MspInit+0x13c>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800122e:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <HAL_UART_MspInit+0x13c>)
 8001230:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001234:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001236:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <HAL_UART_MspInit+0x13c>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800123c:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <HAL_UART_MspInit+0x13c>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001242:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <HAL_UART_MspInit+0x13c>)
 8001244:	2200      	movs	r2, #0
 8001246:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001248:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <HAL_UART_MspInit+0x13c>)
 800124a:	2200      	movs	r2, #0
 800124c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800124e:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <HAL_UART_MspInit+0x13c>)
 8001250:	2200      	movs	r2, #0
 8001252:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001254:	480f      	ldr	r0, [pc, #60]	@ (8001294 <HAL_UART_MspInit+0x13c>)
 8001256:	f001 fa79 	bl	800274c <HAL_DMA_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001260:	f7ff fe9c 	bl	8000f9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a0b      	ldr	r2, [pc, #44]	@ (8001294 <HAL_UART_MspInit+0x13c>)
 8001268:	67da      	str	r2, [r3, #124]	@ 0x7c
 800126a:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <HAL_UART_MspInit+0x13c>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2100      	movs	r1, #0
 8001274:	2027      	movs	r0, #39	@ 0x27
 8001276:	f001 fa34 	bl	80026e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800127a:	2027      	movs	r0, #39	@ 0x27
 800127c:	f001 fa4b 	bl	8002716 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001280:	bf00      	nop
 8001282:	37e8      	adds	r7, #232	@ 0xe8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40004800 	.word	0x40004800
 800128c:	58024400 	.word	0x58024400
 8001290:	58020c00 	.word	0x58020c00
 8001294:	240009bc 	.word	0x240009bc
 8001298:	40020028 	.word	0x40020028

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <NMI_Handler+0x4>

080012a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <MemManage_Handler+0x4>

080012b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <BusFault_Handler+0x4>

080012bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <UsageFault_Handler+0x4>

080012c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f2:	f000 f943 	bl	800157c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001300:	4802      	ldr	r0, [pc, #8]	@ (800130c <DMA1_Stream0_IRQHandler+0x10>)
 8001302:	f001 fd7f 	bl	8002e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	24000864 	.word	0x24000864

08001310 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
	DMA_custom_interrupt_tx();
 8001314:	f7ff fa8a 	bl	800082c <DMA_custom_interrupt_tx>
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
	}
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	USART_custom_interrupt();
 8001320:	f7ff faf8 	bl	8000914 <USART_custom_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}

08001328 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	ADC_custom_interrupt();
 800132c:	f7ff f9ba 	bl	80006a4 <ADC_custom_interrupt>
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}
  /* USER CODE END ADC3_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}

08001334 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001338:	4b37      	ldr	r3, [pc, #220]	@ (8001418 <SystemInit+0xe4>)
 800133a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800133e:	4a36      	ldr	r2, [pc, #216]	@ (8001418 <SystemInit+0xe4>)
 8001340:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001344:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001348:	4b34      	ldr	r3, [pc, #208]	@ (800141c <SystemInit+0xe8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 030f 	and.w	r3, r3, #15
 8001350:	2b06      	cmp	r3, #6
 8001352:	d807      	bhi.n	8001364 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001354:	4b31      	ldr	r3, [pc, #196]	@ (800141c <SystemInit+0xe8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f023 030f 	bic.w	r3, r3, #15
 800135c:	4a2f      	ldr	r2, [pc, #188]	@ (800141c <SystemInit+0xe8>)
 800135e:	f043 0307 	orr.w	r3, r3, #7
 8001362:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001364:	4b2e      	ldr	r3, [pc, #184]	@ (8001420 <SystemInit+0xec>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a2d      	ldr	r2, [pc, #180]	@ (8001420 <SystemInit+0xec>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001370:	4b2b      	ldr	r3, [pc, #172]	@ (8001420 <SystemInit+0xec>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001376:	4b2a      	ldr	r3, [pc, #168]	@ (8001420 <SystemInit+0xec>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4929      	ldr	r1, [pc, #164]	@ (8001420 <SystemInit+0xec>)
 800137c:	4b29      	ldr	r3, [pc, #164]	@ (8001424 <SystemInit+0xf0>)
 800137e:	4013      	ands	r3, r2
 8001380:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001382:	4b26      	ldr	r3, [pc, #152]	@ (800141c <SystemInit+0xe8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	d007      	beq.n	800139e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800138e:	4b23      	ldr	r3, [pc, #140]	@ (800141c <SystemInit+0xe8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 030f 	bic.w	r3, r3, #15
 8001396:	4a21      	ldr	r2, [pc, #132]	@ (800141c <SystemInit+0xe8>)
 8001398:	f043 0307 	orr.w	r3, r3, #7
 800139c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800139e:	4b20      	ldr	r3, [pc, #128]	@ (8001420 <SystemInit+0xec>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001420 <SystemInit+0xec>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <SystemInit+0xec>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001420 <SystemInit+0xec>)
 80013b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001428 <SystemInit+0xf4>)
 80013b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <SystemInit+0xec>)
 80013b8:	4a1c      	ldr	r2, [pc, #112]	@ (800142c <SystemInit+0xf8>)
 80013ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013bc:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <SystemInit+0xec>)
 80013be:	4a1c      	ldr	r2, [pc, #112]	@ (8001430 <SystemInit+0xfc>)
 80013c0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013c2:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <SystemInit+0xec>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013c8:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <SystemInit+0xec>)
 80013ca:	4a19      	ldr	r2, [pc, #100]	@ (8001430 <SystemInit+0xfc>)
 80013cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013ce:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <SystemInit+0xec>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013d4:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <SystemInit+0xec>)
 80013d6:	4a16      	ldr	r2, [pc, #88]	@ (8001430 <SystemInit+0xfc>)
 80013d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013da:	4b11      	ldr	r3, [pc, #68]	@ (8001420 <SystemInit+0xec>)
 80013dc:	2200      	movs	r2, #0
 80013de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <SystemInit+0xec>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001420 <SystemInit+0xec>)
 80013e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <SystemInit+0xec>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <SystemInit+0x100>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <SystemInit+0x104>)
 80013f8:	4013      	ands	r3, r2
 80013fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013fe:	d202      	bcs.n	8001406 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001400:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <SystemInit+0x108>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001406:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <SystemInit+0x10c>)
 8001408:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800140c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00
 800141c:	52002000 	.word	0x52002000
 8001420:	58024400 	.word	0x58024400
 8001424:	eaf6ed7f 	.word	0xeaf6ed7f
 8001428:	02020200 	.word	0x02020200
 800142c:	01ff0000 	.word	0x01ff0000
 8001430:	01010280 	.word	0x01010280
 8001434:	5c001000 	.word	0x5c001000
 8001438:	ffff0000 	.word	0xffff0000
 800143c:	51008108 	.word	0x51008108
 8001440:	52004000 	.word	0x52004000

08001444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001444:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800147c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001448:	f7ff ff74 	bl	8001334 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800144c:	480c      	ldr	r0, [pc, #48]	@ (8001480 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800144e:	490d      	ldr	r1, [pc, #52]	@ (8001484 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001450:	4a0d      	ldr	r2, [pc, #52]	@ (8001488 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001454:	e002      	b.n	800145c <LoopCopyDataInit>

08001456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145a:	3304      	adds	r3, #4

0800145c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800145c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001460:	d3f9      	bcc.n	8001456 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001462:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001464:	4c0a      	ldr	r4, [pc, #40]	@ (8001490 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001468:	e001      	b.n	800146e <LoopFillZerobss>

0800146a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800146c:	3204      	adds	r2, #4

0800146e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001470:	d3fb      	bcc.n	800146a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001472:	f007 ff85 	bl	8009380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001476:	f7ff fa7f 	bl	8000978 <main>
  bx  lr
 800147a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800147c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001480:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001484:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001488:	08009430 	.word	0x08009430
  ldr r2, =_sbss
 800148c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001490:	24000a38 	.word	0x24000a38

08001494 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC_IRQHandler>
	...

08001498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149e:	2003      	movs	r0, #3
 80014a0:	f001 f914 	bl	80026cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014a4:	f003 fe28 	bl	80050f8 <HAL_RCC_GetSysClockFreq>
 80014a8:	4602      	mov	r2, r0
 80014aa:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <HAL_Init+0x68>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	0a1b      	lsrs	r3, r3, #8
 80014b0:	f003 030f 	and.w	r3, r3, #15
 80014b4:	4913      	ldr	r1, [pc, #76]	@ (8001504 <HAL_Init+0x6c>)
 80014b6:	5ccb      	ldrb	r3, [r1, r3]
 80014b8:	f003 031f 	and.w	r3, r3, #31
 80014bc:	fa22 f303 	lsr.w	r3, r2, r3
 80014c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <HAL_Init+0x68>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001504 <HAL_Init+0x6c>)
 80014cc:	5cd3      	ldrb	r3, [r2, r3]
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	fa22 f303 	lsr.w	r3, r2, r3
 80014d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001508 <HAL_Init+0x70>)
 80014da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014dc:	4a0b      	ldr	r2, [pc, #44]	@ (800150c <HAL_Init+0x74>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 f814 	bl	8001510 <HAL_InitTick>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e002      	b.n	80014f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014f2:	f7ff fd59 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	58024400 	.word	0x58024400
 8001504:	080093e0 	.word	0x080093e0
 8001508:	24000004 	.word	0x24000004
 800150c:	24000000 	.word	0x24000000

08001510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001518:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <HAL_InitTick+0x60>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e021      	b.n	8001568 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001524:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <HAL_InitTick+0x64>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <HAL_InitTick+0x60>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001532:	fbb3 f3f1 	udiv	r3, r3, r1
 8001536:	fbb2 f3f3 	udiv	r3, r2, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f001 f8f9 	bl	8002732 <HAL_SYSTICK_Config>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e00e      	b.n	8001568 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b0f      	cmp	r3, #15
 800154e:	d80a      	bhi.n	8001566 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001550:	2200      	movs	r2, #0
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	f001 f8c3 	bl	80026e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800155c:	4a06      	ldr	r2, [pc, #24]	@ (8001578 <HAL_InitTick+0x68>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	e000      	b.n	8001568 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2400000c 	.word	0x2400000c
 8001574:	24000000 	.word	0x24000000
 8001578:	24000008 	.word	0x24000008

0800157c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_IncTick+0x20>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_IncTick+0x24>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	4a04      	ldr	r2, [pc, #16]	@ (80015a0 <HAL_IncTick+0x24>)
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	2400000c 	.word	0x2400000c
 80015a0:	24000a34 	.word	0x24000a34

080015a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return uwTick;
 80015a8:	4b03      	ldr	r3, [pc, #12]	@ (80015b8 <HAL_GetTick+0x14>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	24000a34 	.word	0x24000a34

080015bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015c0:	4b03      	ldr	r3, [pc, #12]	@ (80015d0 <HAL_GetREVID+0x14>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	0c1b      	lsrs	r3, r3, #16
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	5c001000 	.word	0x5c001000

080015d4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80015de:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	401a      	ands	r2, r3
 80015e8:	4904      	ldr	r1, [pc, #16]	@ (80015fc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	58000400 	.word	0x58000400

08001600 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	431a      	orrs	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	609a      	str	r2, [r3, #8]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	609a      	str	r2, [r3, #8]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	3360      	adds	r3, #96	@ 0x60
 800167a:	461a      	mov	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	430b      	orrs	r3, r1
 8001696:	431a      	orrs	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800169c:	bf00      	nop
 800169e:	371c      	adds	r7, #28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	f003 031f 	and.w	r3, r3, #31
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	fa01 f303 	lsl.w	r3, r1, r3
 80016c8:	431a      	orrs	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	611a      	str	r2, [r3, #16]
}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80016da:	b480      	push	{r7}
 80016dc:	b087      	sub	sp, #28
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3360      	adds	r3, #96	@ 0x60
 80016ea:	461a      	mov	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	431a      	orrs	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	601a      	str	r2, [r3, #0]
  }
}
 8001704:	bf00      	nop
 8001706:	371c      	adds	r7, #28
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	3330      	adds	r3, #48	@ 0x30
 8001720:	461a      	mov	r2, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	4413      	add	r3, r2
 800172e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	211f      	movs	r1, #31
 800173c:	fa01 f303 	lsl.w	r3, r1, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	401a      	ands	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	0e9b      	lsrs	r3, r3, #26
 8001748:	f003 011f 	and.w	r1, r3, #31
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	f003 031f 	and.w	r3, r3, #31
 8001752:	fa01 f303 	lsl.w	r3, r1, r3
 8001756:	431a      	orrs	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800175c:	bf00      	nop
 800175e:	371c      	adds	r7, #28
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3314      	adds	r3, #20
 8001778:	461a      	mov	r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	0e5b      	lsrs	r3, r3, #25
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	4413      	add	r3, r2
 8001786:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	0d1b      	lsrs	r3, r3, #20
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	2107      	movs	r1, #7
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	401a      	ands	r2, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	0d1b      	lsrs	r3, r3, #20
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	431a      	orrs	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017b2:	bf00      	nop
 80017b4:	371c      	adds	r7, #28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017d8:	43db      	mvns	r3, r3
 80017da:	401a      	ands	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0318 	and.w	r3, r3, #24
 80017e2:	4908      	ldr	r1, [pc, #32]	@ (8001804 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017e4:	40d9      	lsrs	r1, r3
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	400b      	ands	r3, r1
 80017ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017ee:	431a      	orrs	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80017f6:	bf00      	nop
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	000fffff 	.word	0x000fffff

08001808 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001816:	4013      	ands	r3, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6093      	str	r3, [r2, #8]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	5fffffc0 	.word	0x5fffffc0

0800182c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800183c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001840:	d101      	bne.n	8001846 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <LL_ADC_EnableInternalRegulator+0x24>)
 8001862:	4013      	ands	r3, r2
 8001864:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	6fffffc0 	.word	0x6fffffc0

0800187c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001890:	d101      	bne.n	8001896 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <LL_ADC_IsEnabled+0x18>
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <LL_ADC_IsEnabled+0x1a>
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d101      	bne.n	80018e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b08      	cmp	r3, #8
 8001902:	d101      	bne.n	8001908 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b089      	sub	sp, #36	@ 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e18f      	b.n	8001c52 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800193c:	2b00      	cmp	r3, #0
 800193e:	d109      	bne.n	8001954 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff fb4b 	bl	8000fdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff67 	bl	800182c <LL_ADC_IsDeepPowerDownEnabled>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff4d 	bl	8001808 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff82 	bl	800187c <LL_ADC_IsInternalRegulatorEnabled>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d114      	bne.n	80019a8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ff66 	bl	8001854 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001988:	4b87      	ldr	r3, [pc, #540]	@ (8001ba8 <HAL_ADC_Init+0x290>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	099b      	lsrs	r3, r3, #6
 800198e:	4a87      	ldr	r2, [pc, #540]	@ (8001bac <HAL_ADC_Init+0x294>)
 8001990:	fba2 2303 	umull	r2, r3, r2, r3
 8001994:	099b      	lsrs	r3, r3, #6
 8001996:	3301      	adds	r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800199a:	e002      	b.n	80019a2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	3b01      	subs	r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f9      	bne.n	800199c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff65 	bl	800187c <LL_ADC_IsInternalRegulatorEnabled>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10d      	bne.n	80019d4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019bc:	f043 0210 	orr.w	r2, r3, #16
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c8:	f043 0201 	orr.w	r2, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff76 	bl	80018ca <LL_ADC_REG_IsConversionOngoing>
 80019de:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e4:	f003 0310 	and.w	r3, r3, #16
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f040 8129 	bne.w	8001c40 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f040 8125 	bne.w	8001c40 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019fa:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019fe:	f043 0202 	orr.w	r2, r3, #2
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff4a 	bl	80018a4 <LL_ADC_IsEnabled>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d136      	bne.n	8001a84 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a65      	ldr	r2, [pc, #404]	@ (8001bb0 <HAL_ADC_Init+0x298>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d004      	beq.n	8001a2a <HAL_ADC_Init+0x112>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a63      	ldr	r2, [pc, #396]	@ (8001bb4 <HAL_ADC_Init+0x29c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d10e      	bne.n	8001a48 <HAL_ADC_Init+0x130>
 8001a2a:	4861      	ldr	r0, [pc, #388]	@ (8001bb0 <HAL_ADC_Init+0x298>)
 8001a2c:	f7ff ff3a 	bl	80018a4 <LL_ADC_IsEnabled>
 8001a30:	4604      	mov	r4, r0
 8001a32:	4860      	ldr	r0, [pc, #384]	@ (8001bb4 <HAL_ADC_Init+0x29c>)
 8001a34:	f7ff ff36 	bl	80018a4 <LL_ADC_IsEnabled>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4323      	orrs	r3, r4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf0c      	ite	eq
 8001a40:	2301      	moveq	r3, #1
 8001a42:	2300      	movne	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	e008      	b.n	8001a5a <HAL_ADC_Init+0x142>
 8001a48:	485b      	ldr	r0, [pc, #364]	@ (8001bb8 <HAL_ADC_Init+0x2a0>)
 8001a4a:	f7ff ff2b 	bl	80018a4 <LL_ADC_IsEnabled>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	bf0c      	ite	eq
 8001a54:	2301      	moveq	r3, #1
 8001a56:	2300      	movne	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d012      	beq.n	8001a84 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a53      	ldr	r2, [pc, #332]	@ (8001bb0 <HAL_ADC_Init+0x298>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d004      	beq.n	8001a72 <HAL_ADC_Init+0x15a>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a51      	ldr	r2, [pc, #324]	@ (8001bb4 <HAL_ADC_Init+0x29c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d101      	bne.n	8001a76 <HAL_ADC_Init+0x15e>
 8001a72:	4a52      	ldr	r2, [pc, #328]	@ (8001bbc <HAL_ADC_Init+0x2a4>)
 8001a74:	e000      	b.n	8001a78 <HAL_ADC_Init+0x160>
 8001a76:	4a52      	ldr	r2, [pc, #328]	@ (8001bc0 <HAL_ADC_Init+0x2a8>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4610      	mov	r0, r2
 8001a80:	f7ff fdbe 	bl	8001600 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001a84:	f7ff fd9a 	bl	80015bc <HAL_GetREVID>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d914      	bls.n	8001abc <HAL_ADC_Init+0x1a4>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b10      	cmp	r3, #16
 8001a98:	d110      	bne.n	8001abc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	7d5b      	ldrb	r3, [r3, #21]
 8001a9e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001aa4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001aaa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7f1b      	ldrb	r3, [r3, #28]
 8001ab0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001ab2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ab4:	f043 030c 	orr.w	r3, r3, #12
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	e00d      	b.n	8001ad8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	7d5b      	ldrb	r3, [r3, #21]
 8001ac0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ac6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001acc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7f1b      	ldrb	r3, [r3, #28]
 8001ad2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7f1b      	ldrb	r3, [r3, #28]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d106      	bne.n	8001aee <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	045b      	lsls	r3, r3, #17
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afa:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b02:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc4 <HAL_ADC_Init+0x2ac>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	69b9      	ldr	r1, [r7, #24]
 8001b1a:	430b      	orrs	r3, r1
 8001b1c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fed1 	bl	80018ca <LL_ADC_REG_IsConversionOngoing>
 8001b28:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fede 	bl	80018f0 <LL_ADC_INJ_IsConversionOngoing>
 8001b34:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d15f      	bne.n	8001bfc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d15c      	bne.n	8001bfc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	7d1b      	ldrb	r3, [r3, #20]
 8001b46:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc8 <HAL_ADC_Init+0x2b0>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6812      	ldr	r2, [r2, #0]
 8001b5e:	69b9      	ldr	r1, [r7, #24]
 8001b60:	430b      	orrs	r3, r1
 8001b62:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d130      	bne.n	8001bd0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b72:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691a      	ldr	r2, [r3, #16]
 8001b7a:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <HAL_ADC_Init+0x2b4>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b82:	3a01      	subs	r2, #1
 8001b84:	0411      	lsls	r1, r2, #16
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b8a:	4311      	orrs	r1, r2
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b90:	4311      	orrs	r1, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b96:	430a      	orrs	r2, r1
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	611a      	str	r2, [r3, #16]
 8001ba4:	e01c      	b.n	8001be0 <HAL_ADC_Init+0x2c8>
 8001ba6:	bf00      	nop
 8001ba8:	24000000 	.word	0x24000000
 8001bac:	053e2d63 	.word	0x053e2d63
 8001bb0:	40022000 	.word	0x40022000
 8001bb4:	40022100 	.word	0x40022100
 8001bb8:	58026000 	.word	0x58026000
 8001bbc:	40022300 	.word	0x40022300
 8001bc0:	58026300 	.word	0x58026300
 8001bc4:	fff0c003 	.word	0xfff0c003
 8001bc8:	ffffbffc 	.word	0xffffbffc
 8001bcc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fb8c 	bl	8002314 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d10c      	bne.n	8001c1e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	f023 010f 	bic.w	r1, r3, #15
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	1e5a      	subs	r2, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c1c:	e007      	b.n	8001c2e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 020f 	bic.w	r2, r2, #15
 8001c2c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c32:	f023 0303 	bic.w	r3, r3, #3
 8001c36:	f043 0201 	orr.w	r2, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c3e:	e007      	b.n	8001c50 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c44:	f043 0210 	orr.w	r2, r3, #16
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c50:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	@ 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd90      	pop	{r4, r7, pc}
 8001c5a:	bf00      	nop

08001c5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b0a1      	sub	sp, #132	@ 0x84
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4a65      	ldr	r2, [pc, #404]	@ (8001e0c <HAL_ADC_ConfigChannel+0x1b0>)
 8001c76:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x2a>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e32e      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x688>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fe19 	bl	80018ca <LL_ADC_REG_IsConversionOngoing>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f040 8313 	bne.w	80022c6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	db2c      	blt.n	8001d02 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d108      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x6a>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	0e9b      	lsrs	r3, r3, #26
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	e016      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x98>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cd6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001cde:	2320      	movs	r3, #32
 8001ce0:	e003      	b.n	8001cea <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001ce2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ce4:	fab3 f383 	clz	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	f003 031f 	and.w	r3, r3, #31
 8001cee:	2201      	movs	r2, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	69d1      	ldr	r1, [r2, #28]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	430b      	orrs	r3, r1
 8001d00:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6859      	ldr	r1, [r3, #4]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	f7ff fcfe 	bl	8001710 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fdd6 	bl	80018ca <LL_ADC_REG_IsConversionOngoing>
 8001d1e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fde3 	bl	80018f0 <LL_ADC_INJ_IsConversionOngoing>
 8001d2a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 80b8 	bne.w	8001ea4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f040 80b4 	bne.w	8001ea4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6819      	ldr	r1, [r3, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	f7ff fd0d 	bl	8001768 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d4e:	4b30      	ldr	r3, [pc, #192]	@ (8001e10 <HAL_ADC_ConfigChannel+0x1b4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001d56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d5a:	d10b      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x118>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	695a      	ldr	r2, [r3, #20]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	e01d      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x154>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10b      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x13e>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	695a      	ldr	r2, [r3, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	e00a      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x154>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	695a      	ldr	r2, [r3, #20]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	089b      	lsrs	r3, r3, #2
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d02c      	beq.n	8001e14 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	6919      	ldr	r1, [r3, #16]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001dc8:	f7ff fc4e 	bl	8001668 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	6919      	ldr	r1, [r3, #16]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	7e5b      	ldrb	r3, [r3, #25]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d102      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x186>
 8001ddc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001de0:	e000      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x188>
 8001de2:	2300      	movs	r3, #0
 8001de4:	461a      	mov	r2, r3
 8001de6:	f7ff fc78 	bl	80016da <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6919      	ldr	r1, [r3, #16]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	7e1b      	ldrb	r3, [r3, #24]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d102      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x1a4>
 8001dfa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001dfe:	e000      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x1a6>
 8001e00:	2300      	movs	r3, #0
 8001e02:	461a      	mov	r2, r3
 8001e04:	f7ff fc50 	bl	80016a8 <LL_ADC_SetDataRightShift>
 8001e08:	e04c      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x248>
 8001e0a:	bf00      	nop
 8001e0c:	47ff0000 	.word	0x47ff0000
 8001e10:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	069b      	lsls	r3, r3, #26
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d107      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e36:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	069b      	lsls	r3, r3, #26
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d107      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e5a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	069b      	lsls	r3, r3, #26
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d107      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e7e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	069b      	lsls	r3, r3, #26
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d107      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ea2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fcfb 	bl	80018a4 <LL_ADC_IsEnabled>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f040 8211 	bne.w	80022d8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	6819      	ldr	r1, [r3, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f7ff fc7c 	bl	80017c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4aa1      	ldr	r2, [pc, #644]	@ (8002154 <HAL_ADC_ConfigChannel+0x4f8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	f040 812e 	bne.w	8002130 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10b      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x2a0>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	0e9b      	lsrs	r3, r3, #26
 8001eea:	3301      	adds	r3, #1
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	2b09      	cmp	r3, #9
 8001ef2:	bf94      	ite	ls
 8001ef4:	2301      	movls	r3, #1
 8001ef6:	2300      	movhi	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	e019      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x2d4>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f04:	fa93 f3a3 	rbit	r3, r3
 8001f08:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001f0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8001f14:	2320      	movs	r3, #32
 8001f16:	e003      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8001f18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f1a:	fab3 f383 	clz	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	3301      	adds	r3, #1
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	2b09      	cmp	r3, #9
 8001f28:	bf94      	ite	ls
 8001f2a:	2301      	movls	r3, #1
 8001f2c:	2300      	movhi	r3, #0
 8001f2e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d079      	beq.n	8002028 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d107      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x2f4>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	0e9b      	lsrs	r3, r3, #26
 8001f46:	3301      	adds	r3, #1
 8001f48:	069b      	lsls	r3, r3, #26
 8001f4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f4e:	e015      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x320>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f60:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001f62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8001f68:	2320      	movs	r3, #32
 8001f6a:	e003      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8001f6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	069b      	lsls	r3, r3, #26
 8001f78:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d109      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x340>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	0e9b      	lsrs	r3, r3, #26
 8001f8e:	3301      	adds	r3, #1
 8001f90:	f003 031f 	and.w	r3, r3, #31
 8001f94:	2101      	movs	r1, #1
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	e017      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x370>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fa4:	fa93 f3a3 	rbit	r3, r3
 8001fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fac:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001fae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8001fb4:	2320      	movs	r3, #32
 8001fb6:	e003      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8001fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	ea42 0103 	orr.w	r1, r2, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10a      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x396>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0e9b      	lsrs	r3, r3, #26
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	f003 021f 	and.w	r2, r3, #31
 8001fe8:	4613      	mov	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	051b      	lsls	r3, r3, #20
 8001ff0:	e018      	b.n	8002024 <HAL_ADC_ConfigChannel+0x3c8>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002002:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800200a:	2320      	movs	r3, #32
 800200c:	e003      	b.n	8002016 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800200e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	3301      	adds	r3, #1
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	4613      	mov	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002024:	430b      	orrs	r3, r1
 8002026:	e07e      	b.n	8002126 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002030:	2b00      	cmp	r3, #0
 8002032:	d107      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x3e8>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	0e9b      	lsrs	r3, r3, #26
 800203a:	3301      	adds	r3, #1
 800203c:	069b      	lsls	r3, r3, #26
 800203e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002042:	e015      	b.n	8002070 <HAL_ADC_ConfigChannel+0x414>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800205c:	2320      	movs	r3, #32
 800205e:	e003      	b.n	8002068 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	3301      	adds	r3, #1
 800206a:	069b      	lsls	r3, r3, #26
 800206c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002078:	2b00      	cmp	r3, #0
 800207a:	d109      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x434>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0e9b      	lsrs	r3, r3, #26
 8002082:	3301      	adds	r3, #1
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	2101      	movs	r1, #1
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	e017      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x464>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa93 f3a3 	rbit	r3, r3
 800209c:	61bb      	str	r3, [r7, #24]
  return result;
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80020a8:	2320      	movs	r3, #32
 80020aa:	e003      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	3301      	adds	r3, #1
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	2101      	movs	r1, #1
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	ea42 0103 	orr.w	r1, r2, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10d      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x490>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	0e9b      	lsrs	r3, r3, #26
 80020d6:	3301      	adds	r3, #1
 80020d8:	f003 021f 	and.w	r2, r3, #31
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	3b1e      	subs	r3, #30
 80020e4:	051b      	lsls	r3, r3, #20
 80020e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020ea:	e01b      	b.n	8002124 <HAL_ADC_ConfigChannel+0x4c8>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	60fb      	str	r3, [r7, #12]
  return result;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002104:	2320      	movs	r3, #32
 8002106:	e003      	b.n	8002110 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	3301      	adds	r3, #1
 8002112:	f003 021f 	and.w	r2, r3, #31
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	3b1e      	subs	r3, #30
 800211e:	051b      	lsls	r3, r3, #20
 8002120:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002124:	430b      	orrs	r3, r1
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	6892      	ldr	r2, [r2, #8]
 800212a:	4619      	mov	r1, r3
 800212c:	f7ff fb1c 	bl	8001768 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	f280 80cf 	bge.w	80022d8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a06      	ldr	r2, [pc, #24]	@ (8002158 <HAL_ADC_ConfigChannel+0x4fc>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d004      	beq.n	800214e <HAL_ADC_ConfigChannel+0x4f2>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a04      	ldr	r2, [pc, #16]	@ (800215c <HAL_ADC_ConfigChannel+0x500>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d10a      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x508>
 800214e:	4b04      	ldr	r3, [pc, #16]	@ (8002160 <HAL_ADC_ConfigChannel+0x504>)
 8002150:	e009      	b.n	8002166 <HAL_ADC_ConfigChannel+0x50a>
 8002152:	bf00      	nop
 8002154:	47ff0000 	.word	0x47ff0000
 8002158:	40022000 	.word	0x40022000
 800215c:	40022100 	.word	0x40022100
 8002160:	40022300 	.word	0x40022300
 8002164:	4b61      	ldr	r3, [pc, #388]	@ (80022ec <HAL_ADC_ConfigChannel+0x690>)
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fa70 	bl	800164c <LL_ADC_GetCommonPathInternalCh>
 800216c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a5f      	ldr	r2, [pc, #380]	@ (80022f0 <HAL_ADC_ConfigChannel+0x694>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d004      	beq.n	8002182 <HAL_ADC_ConfigChannel+0x526>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a5d      	ldr	r2, [pc, #372]	@ (80022f4 <HAL_ADC_ConfigChannel+0x698>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d10e      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x544>
 8002182:	485b      	ldr	r0, [pc, #364]	@ (80022f0 <HAL_ADC_ConfigChannel+0x694>)
 8002184:	f7ff fb8e 	bl	80018a4 <LL_ADC_IsEnabled>
 8002188:	4604      	mov	r4, r0
 800218a:	485a      	ldr	r0, [pc, #360]	@ (80022f4 <HAL_ADC_ConfigChannel+0x698>)
 800218c:	f7ff fb8a 	bl	80018a4 <LL_ADC_IsEnabled>
 8002190:	4603      	mov	r3, r0
 8002192:	4323      	orrs	r3, r4
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf0c      	ite	eq
 8002198:	2301      	moveq	r3, #1
 800219a:	2300      	movne	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	e008      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x556>
 80021a0:	4855      	ldr	r0, [pc, #340]	@ (80022f8 <HAL_ADC_ConfigChannel+0x69c>)
 80021a2:	f7ff fb7f 	bl	80018a4 <LL_ADC_IsEnabled>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d07d      	beq.n	80022b2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a50      	ldr	r2, [pc, #320]	@ (80022fc <HAL_ADC_ConfigChannel+0x6a0>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d130      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x5c6>
 80021c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d12b      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a4a      	ldr	r2, [pc, #296]	@ (80022f8 <HAL_ADC_ConfigChannel+0x69c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	f040 8081 	bne.w	80022d8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a45      	ldr	r2, [pc, #276]	@ (80022f0 <HAL_ADC_ConfigChannel+0x694>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d004      	beq.n	80021ea <HAL_ADC_ConfigChannel+0x58e>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a43      	ldr	r2, [pc, #268]	@ (80022f4 <HAL_ADC_ConfigChannel+0x698>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x592>
 80021ea:	4a45      	ldr	r2, [pc, #276]	@ (8002300 <HAL_ADC_ConfigChannel+0x6a4>)
 80021ec:	e000      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x594>
 80021ee:	4a3f      	ldr	r2, [pc, #252]	@ (80022ec <HAL_ADC_ConfigChannel+0x690>)
 80021f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021f6:	4619      	mov	r1, r3
 80021f8:	4610      	mov	r0, r2
 80021fa:	f7ff fa14 	bl	8001626 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021fe:	4b41      	ldr	r3, [pc, #260]	@ (8002304 <HAL_ADC_ConfigChannel+0x6a8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	099b      	lsrs	r3, r3, #6
 8002204:	4a40      	ldr	r2, [pc, #256]	@ (8002308 <HAL_ADC_ConfigChannel+0x6ac>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	099b      	lsrs	r3, r3, #6
 800220c:	3301      	adds	r3, #1
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002212:	e002      	b.n	800221a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	3b01      	subs	r3, #1
 8002218:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f9      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002220:	e05a      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a39      	ldr	r2, [pc, #228]	@ (800230c <HAL_ADC_ConfigChannel+0x6b0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d11e      	bne.n	800226a <HAL_ADC_ConfigChannel+0x60e>
 800222c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800222e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d119      	bne.n	800226a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a2f      	ldr	r2, [pc, #188]	@ (80022f8 <HAL_ADC_ConfigChannel+0x69c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d14b      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a2a      	ldr	r2, [pc, #168]	@ (80022f0 <HAL_ADC_ConfigChannel+0x694>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d004      	beq.n	8002254 <HAL_ADC_ConfigChannel+0x5f8>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a29      	ldr	r2, [pc, #164]	@ (80022f4 <HAL_ADC_ConfigChannel+0x698>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d101      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x5fc>
 8002254:	4a2a      	ldr	r2, [pc, #168]	@ (8002300 <HAL_ADC_ConfigChannel+0x6a4>)
 8002256:	e000      	b.n	800225a <HAL_ADC_ConfigChannel+0x5fe>
 8002258:	4a24      	ldr	r2, [pc, #144]	@ (80022ec <HAL_ADC_ConfigChannel+0x690>)
 800225a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800225c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002260:	4619      	mov	r1, r3
 8002262:	4610      	mov	r0, r2
 8002264:	f7ff f9df 	bl	8001626 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002268:	e036      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a28      	ldr	r2, [pc, #160]	@ (8002310 <HAL_ADC_ConfigChannel+0x6b4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d131      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x67c>
 8002274:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d12c      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a1d      	ldr	r2, [pc, #116]	@ (80022f8 <HAL_ADC_ConfigChannel+0x69c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d127      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a18      	ldr	r2, [pc, #96]	@ (80022f0 <HAL_ADC_ConfigChannel+0x694>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d004      	beq.n	800229c <HAL_ADC_ConfigChannel+0x640>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a17      	ldr	r2, [pc, #92]	@ (80022f4 <HAL_ADC_ConfigChannel+0x698>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d101      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x644>
 800229c:	4a18      	ldr	r2, [pc, #96]	@ (8002300 <HAL_ADC_ConfigChannel+0x6a4>)
 800229e:	e000      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x646>
 80022a0:	4a12      	ldr	r2, [pc, #72]	@ (80022ec <HAL_ADC_ConfigChannel+0x690>)
 80022a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022a8:	4619      	mov	r1, r3
 80022aa:	4610      	mov	r0, r2
 80022ac:	f7ff f9bb 	bl	8001626 <LL_ADC_SetCommonPathInternalCh>
 80022b0:	e012      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b6:	f043 0220 	orr.w	r2, r3, #32
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80022c4:	e008      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ca:	f043 0220 	orr.w	r2, r3, #32
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80022e0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3784      	adds	r7, #132	@ 0x84
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd90      	pop	{r4, r7, pc}
 80022ec:	58026300 	.word	0x58026300
 80022f0:	40022000 	.word	0x40022000
 80022f4:	40022100 	.word	0x40022100
 80022f8:	58026000 	.word	0x58026000
 80022fc:	cb840000 	.word	0xcb840000
 8002300:	40022300 	.word	0x40022300
 8002304:	24000000 	.word	0x24000000
 8002308:	053e2d63 	.word	0x053e2d63
 800230c:	c7520000 	.word	0xc7520000
 8002310:	cfb80000 	.word	0xcfb80000

08002314 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a7a      	ldr	r2, [pc, #488]	@ (800250c <ADC_ConfigureBoostMode+0x1f8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d004      	beq.n	8002330 <ADC_ConfigureBoostMode+0x1c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a79      	ldr	r2, [pc, #484]	@ (8002510 <ADC_ConfigureBoostMode+0x1fc>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d109      	bne.n	8002344 <ADC_ConfigureBoostMode+0x30>
 8002330:	4b78      	ldr	r3, [pc, #480]	@ (8002514 <ADC_ConfigureBoostMode+0x200>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002338:	2b00      	cmp	r3, #0
 800233a:	bf14      	ite	ne
 800233c:	2301      	movne	r3, #1
 800233e:	2300      	moveq	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	e008      	b.n	8002356 <ADC_ConfigureBoostMode+0x42>
 8002344:	4b74      	ldr	r3, [pc, #464]	@ (8002518 <ADC_ConfigureBoostMode+0x204>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800234c:	2b00      	cmp	r3, #0
 800234e:	bf14      	ite	ne
 8002350:	2301      	movne	r3, #1
 8002352:	2300      	moveq	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d01c      	beq.n	8002394 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800235a:	f003 f847 	bl	80053ec <HAL_RCC_GetHCLKFreq>
 800235e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002368:	d010      	beq.n	800238c <ADC_ConfigureBoostMode+0x78>
 800236a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800236e:	d873      	bhi.n	8002458 <ADC_ConfigureBoostMode+0x144>
 8002370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002374:	d002      	beq.n	800237c <ADC_ConfigureBoostMode+0x68>
 8002376:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800237a:	d16d      	bne.n	8002458 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	0c1b      	lsrs	r3, r3, #16
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	fbb2 f3f3 	udiv	r3, r2, r3
 8002388:	60fb      	str	r3, [r7, #12]
        break;
 800238a:	e068      	b.n	800245e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	60fb      	str	r3, [r7, #12]
        break;
 8002392:	e064      	b.n	800245e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002394:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002398:	f04f 0100 	mov.w	r1, #0
 800239c:	f004 fa8c 	bl	80068b8 <HAL_RCCEx_GetPeriphCLKFreq>
 80023a0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80023aa:	d051      	beq.n	8002450 <ADC_ConfigureBoostMode+0x13c>
 80023ac:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80023b0:	d854      	bhi.n	800245c <ADC_ConfigureBoostMode+0x148>
 80023b2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80023b6:	d047      	beq.n	8002448 <ADC_ConfigureBoostMode+0x134>
 80023b8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80023bc:	d84e      	bhi.n	800245c <ADC_ConfigureBoostMode+0x148>
 80023be:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80023c2:	d03d      	beq.n	8002440 <ADC_ConfigureBoostMode+0x12c>
 80023c4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80023c8:	d848      	bhi.n	800245c <ADC_ConfigureBoostMode+0x148>
 80023ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023ce:	d033      	beq.n	8002438 <ADC_ConfigureBoostMode+0x124>
 80023d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023d4:	d842      	bhi.n	800245c <ADC_ConfigureBoostMode+0x148>
 80023d6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80023da:	d029      	beq.n	8002430 <ADC_ConfigureBoostMode+0x11c>
 80023dc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80023e0:	d83c      	bhi.n	800245c <ADC_ConfigureBoostMode+0x148>
 80023e2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80023e6:	d01a      	beq.n	800241e <ADC_ConfigureBoostMode+0x10a>
 80023e8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80023ec:	d836      	bhi.n	800245c <ADC_ConfigureBoostMode+0x148>
 80023ee:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80023f2:	d014      	beq.n	800241e <ADC_ConfigureBoostMode+0x10a>
 80023f4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80023f8:	d830      	bhi.n	800245c <ADC_ConfigureBoostMode+0x148>
 80023fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023fe:	d00e      	beq.n	800241e <ADC_ConfigureBoostMode+0x10a>
 8002400:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002404:	d82a      	bhi.n	800245c <ADC_ConfigureBoostMode+0x148>
 8002406:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800240a:	d008      	beq.n	800241e <ADC_ConfigureBoostMode+0x10a>
 800240c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002410:	d824      	bhi.n	800245c <ADC_ConfigureBoostMode+0x148>
 8002412:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002416:	d002      	beq.n	800241e <ADC_ConfigureBoostMode+0x10a>
 8002418:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800241c:	d11e      	bne.n	800245c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	0c9b      	lsrs	r3, r3, #18
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	60fb      	str	r3, [r7, #12]
        break;
 800242e:	e016      	b.n	800245e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	091b      	lsrs	r3, r3, #4
 8002434:	60fb      	str	r3, [r7, #12]
        break;
 8002436:	e012      	b.n	800245e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	60fb      	str	r3, [r7, #12]
        break;
 800243e:	e00e      	b.n	800245e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	099b      	lsrs	r3, r3, #6
 8002444:	60fb      	str	r3, [r7, #12]
        break;
 8002446:	e00a      	b.n	800245e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	09db      	lsrs	r3, r3, #7
 800244c:	60fb      	str	r3, [r7, #12]
        break;
 800244e:	e006      	b.n	800245e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	0a1b      	lsrs	r3, r3, #8
 8002454:	60fb      	str	r3, [r7, #12]
        break;
 8002456:	e002      	b.n	800245e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002458:	bf00      	nop
 800245a:	e000      	b.n	800245e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800245c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800245e:	f7ff f8ad 	bl	80015bc <HAL_GetREVID>
 8002462:	4603      	mov	r3, r0
 8002464:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002468:	4293      	cmp	r3, r2
 800246a:	d815      	bhi.n	8002498 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4a2b      	ldr	r2, [pc, #172]	@ (800251c <ADC_ConfigureBoostMode+0x208>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d908      	bls.n	8002486 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002482:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002484:	e03e      	b.n	8002504 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002494:	609a      	str	r2, [r3, #8]
}
 8002496:	e035      	b.n	8002504 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	085b      	lsrs	r3, r3, #1
 800249c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002520 <ADC_ConfigureBoostMode+0x20c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d808      	bhi.n	80024b8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80024b4:	609a      	str	r2, [r3, #8]
}
 80024b6:	e025      	b.n	8002504 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002524 <ADC_ConfigureBoostMode+0x210>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d80a      	bhi.n	80024d6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024d2:	609a      	str	r2, [r3, #8]
}
 80024d4:	e016      	b.n	8002504 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4a13      	ldr	r2, [pc, #76]	@ (8002528 <ADC_ConfigureBoostMode+0x214>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d80a      	bhi.n	80024f4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024f0:	609a      	str	r2, [r3, #8]
}
 80024f2:	e007      	b.n	8002504 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002502:	609a      	str	r2, [r3, #8]
}
 8002504:	bf00      	nop
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40022000 	.word	0x40022000
 8002510:	40022100 	.word	0x40022100
 8002514:	40022300 	.word	0x40022300
 8002518:	58026300 	.word	0x58026300
 800251c:	01312d00 	.word	0x01312d00
 8002520:	005f5e10 	.word	0x005f5e10
 8002524:	00bebc20 	.word	0x00bebc20
 8002528:	017d7840 	.word	0x017d7840

0800252c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800253c:	4b0b      	ldr	r3, [pc, #44]	@ (800256c <__NVIC_SetPriorityGrouping+0x40>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002548:	4013      	ands	r3, r2
 800254a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002554:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <__NVIC_SetPriorityGrouping+0x44>)
 8002556:	4313      	orrs	r3, r2
 8002558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255a:	4a04      	ldr	r2, [pc, #16]	@ (800256c <__NVIC_SetPriorityGrouping+0x40>)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	60d3      	str	r3, [r2, #12]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00
 8002570:	05fa0000 	.word	0x05fa0000

08002574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002578:	4b04      	ldr	r3, [pc, #16]	@ (800258c <__NVIC_GetPriorityGrouping+0x18>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	f003 0307 	and.w	r3, r3, #7
}
 8002582:	4618      	mov	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800259a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	db0b      	blt.n	80025ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	f003 021f 	and.w	r2, r3, #31
 80025a8:	4907      	ldr	r1, [pc, #28]	@ (80025c8 <__NVIC_EnableIRQ+0x38>)
 80025aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	2001      	movs	r0, #1
 80025b2:	fa00 f202 	lsl.w	r2, r0, r2
 80025b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000e100 	.word	0xe000e100

080025cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	6039      	str	r1, [r7, #0]
 80025d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	db0a      	blt.n	80025f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	490c      	ldr	r1, [pc, #48]	@ (8002618 <__NVIC_SetPriority+0x4c>)
 80025e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ea:	0112      	lsls	r2, r2, #4
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	440b      	add	r3, r1
 80025f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f4:	e00a      	b.n	800260c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4908      	ldr	r1, [pc, #32]	@ (800261c <__NVIC_SetPriority+0x50>)
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	3b04      	subs	r3, #4
 8002604:	0112      	lsls	r2, r2, #4
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	440b      	add	r3, r1
 800260a:	761a      	strb	r2, [r3, #24]
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000e100 	.word	0xe000e100
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	@ 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f1c3 0307 	rsb	r3, r3, #7
 800263a:	2b04      	cmp	r3, #4
 800263c:	bf28      	it	cs
 800263e:	2304      	movcs	r3, #4
 8002640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3304      	adds	r3, #4
 8002646:	2b06      	cmp	r3, #6
 8002648:	d902      	bls.n	8002650 <NVIC_EncodePriority+0x30>
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3b03      	subs	r3, #3
 800264e:	e000      	b.n	8002652 <NVIC_EncodePriority+0x32>
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	f04f 32ff 	mov.w	r2, #4294967295
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43da      	mvns	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	401a      	ands	r2, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002668:	f04f 31ff 	mov.w	r1, #4294967295
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	43d9      	mvns	r1, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	4313      	orrs	r3, r2
         );
}
 800267a:	4618      	mov	r0, r3
 800267c:	3724      	adds	r7, #36	@ 0x24
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3b01      	subs	r3, #1
 8002694:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002698:	d301      	bcc.n	800269e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800269a:	2301      	movs	r3, #1
 800269c:	e00f      	b.n	80026be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269e:	4a0a      	ldr	r2, [pc, #40]	@ (80026c8 <SysTick_Config+0x40>)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a6:	210f      	movs	r1, #15
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ac:	f7ff ff8e 	bl	80025cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b0:	4b05      	ldr	r3, [pc, #20]	@ (80026c8 <SysTick_Config+0x40>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b6:	4b04      	ldr	r3, [pc, #16]	@ (80026c8 <SysTick_Config+0x40>)
 80026b8:	2207      	movs	r2, #7
 80026ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	e000e010 	.word	0xe000e010

080026cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff ff29 	bl	800252c <__NVIC_SetPriorityGrouping>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b086      	sub	sp, #24
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	4603      	mov	r3, r0
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026f0:	f7ff ff40 	bl	8002574 <__NVIC_GetPriorityGrouping>
 80026f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	6978      	ldr	r0, [r7, #20]
 80026fc:	f7ff ff90 	bl	8002620 <NVIC_EncodePriority>
 8002700:	4602      	mov	r2, r0
 8002702:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff5f 	bl	80025cc <__NVIC_SetPriority>
}
 800270e:	bf00      	nop
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002720:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff33 	bl	8002590 <__NVIC_EnableIRQ>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ffa4 	bl	8002688 <SysTick_Config>
 8002740:	4603      	mov	r3, r0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002754:	f7fe ff26 	bl	80015a4 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e316      	b.n	8002d92 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a66      	ldr	r2, [pc, #408]	@ (8002904 <HAL_DMA_Init+0x1b8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d04a      	beq.n	8002804 <HAL_DMA_Init+0xb8>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a65      	ldr	r2, [pc, #404]	@ (8002908 <HAL_DMA_Init+0x1bc>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d045      	beq.n	8002804 <HAL_DMA_Init+0xb8>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a63      	ldr	r2, [pc, #396]	@ (800290c <HAL_DMA_Init+0x1c0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d040      	beq.n	8002804 <HAL_DMA_Init+0xb8>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a62      	ldr	r2, [pc, #392]	@ (8002910 <HAL_DMA_Init+0x1c4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d03b      	beq.n	8002804 <HAL_DMA_Init+0xb8>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a60      	ldr	r2, [pc, #384]	@ (8002914 <HAL_DMA_Init+0x1c8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d036      	beq.n	8002804 <HAL_DMA_Init+0xb8>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a5f      	ldr	r2, [pc, #380]	@ (8002918 <HAL_DMA_Init+0x1cc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d031      	beq.n	8002804 <HAL_DMA_Init+0xb8>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a5d      	ldr	r2, [pc, #372]	@ (800291c <HAL_DMA_Init+0x1d0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d02c      	beq.n	8002804 <HAL_DMA_Init+0xb8>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a5c      	ldr	r2, [pc, #368]	@ (8002920 <HAL_DMA_Init+0x1d4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d027      	beq.n	8002804 <HAL_DMA_Init+0xb8>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a5a      	ldr	r2, [pc, #360]	@ (8002924 <HAL_DMA_Init+0x1d8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d022      	beq.n	8002804 <HAL_DMA_Init+0xb8>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a59      	ldr	r2, [pc, #356]	@ (8002928 <HAL_DMA_Init+0x1dc>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d01d      	beq.n	8002804 <HAL_DMA_Init+0xb8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a57      	ldr	r2, [pc, #348]	@ (800292c <HAL_DMA_Init+0x1e0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d018      	beq.n	8002804 <HAL_DMA_Init+0xb8>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a56      	ldr	r2, [pc, #344]	@ (8002930 <HAL_DMA_Init+0x1e4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d013      	beq.n	8002804 <HAL_DMA_Init+0xb8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a54      	ldr	r2, [pc, #336]	@ (8002934 <HAL_DMA_Init+0x1e8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00e      	beq.n	8002804 <HAL_DMA_Init+0xb8>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a53      	ldr	r2, [pc, #332]	@ (8002938 <HAL_DMA_Init+0x1ec>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d009      	beq.n	8002804 <HAL_DMA_Init+0xb8>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a51      	ldr	r2, [pc, #324]	@ (800293c <HAL_DMA_Init+0x1f0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d004      	beq.n	8002804 <HAL_DMA_Init+0xb8>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a50      	ldr	r2, [pc, #320]	@ (8002940 <HAL_DMA_Init+0x1f4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d101      	bne.n	8002808 <HAL_DMA_Init+0xbc>
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <HAL_DMA_Init+0xbe>
 8002808:	2300      	movs	r3, #0
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 813b 	beq.w	8002a86 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a37      	ldr	r2, [pc, #220]	@ (8002904 <HAL_DMA_Init+0x1b8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d04a      	beq.n	80028c0 <HAL_DMA_Init+0x174>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a36      	ldr	r2, [pc, #216]	@ (8002908 <HAL_DMA_Init+0x1bc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d045      	beq.n	80028c0 <HAL_DMA_Init+0x174>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a34      	ldr	r2, [pc, #208]	@ (800290c <HAL_DMA_Init+0x1c0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d040      	beq.n	80028c0 <HAL_DMA_Init+0x174>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a33      	ldr	r2, [pc, #204]	@ (8002910 <HAL_DMA_Init+0x1c4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d03b      	beq.n	80028c0 <HAL_DMA_Init+0x174>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a31      	ldr	r2, [pc, #196]	@ (8002914 <HAL_DMA_Init+0x1c8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d036      	beq.n	80028c0 <HAL_DMA_Init+0x174>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a30      	ldr	r2, [pc, #192]	@ (8002918 <HAL_DMA_Init+0x1cc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d031      	beq.n	80028c0 <HAL_DMA_Init+0x174>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a2e      	ldr	r2, [pc, #184]	@ (800291c <HAL_DMA_Init+0x1d0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d02c      	beq.n	80028c0 <HAL_DMA_Init+0x174>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a2d      	ldr	r2, [pc, #180]	@ (8002920 <HAL_DMA_Init+0x1d4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d027      	beq.n	80028c0 <HAL_DMA_Init+0x174>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a2b      	ldr	r2, [pc, #172]	@ (8002924 <HAL_DMA_Init+0x1d8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d022      	beq.n	80028c0 <HAL_DMA_Init+0x174>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a2a      	ldr	r2, [pc, #168]	@ (8002928 <HAL_DMA_Init+0x1dc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d01d      	beq.n	80028c0 <HAL_DMA_Init+0x174>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a28      	ldr	r2, [pc, #160]	@ (800292c <HAL_DMA_Init+0x1e0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d018      	beq.n	80028c0 <HAL_DMA_Init+0x174>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a27      	ldr	r2, [pc, #156]	@ (8002930 <HAL_DMA_Init+0x1e4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d013      	beq.n	80028c0 <HAL_DMA_Init+0x174>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a25      	ldr	r2, [pc, #148]	@ (8002934 <HAL_DMA_Init+0x1e8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00e      	beq.n	80028c0 <HAL_DMA_Init+0x174>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a24      	ldr	r2, [pc, #144]	@ (8002938 <HAL_DMA_Init+0x1ec>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d009      	beq.n	80028c0 <HAL_DMA_Init+0x174>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a22      	ldr	r2, [pc, #136]	@ (800293c <HAL_DMA_Init+0x1f0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d004      	beq.n	80028c0 <HAL_DMA_Init+0x174>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a21      	ldr	r2, [pc, #132]	@ (8002940 <HAL_DMA_Init+0x1f4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d108      	bne.n	80028d2 <HAL_DMA_Init+0x186>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e007      	b.n	80028e2 <HAL_DMA_Init+0x196>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0201 	bic.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028e2:	e02f      	b.n	8002944 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028e4:	f7fe fe5e 	bl	80015a4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	d928      	bls.n	8002944 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2220      	movs	r2, #32
 80028f6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2203      	movs	r2, #3
 80028fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e246      	b.n	8002d92 <HAL_DMA_Init+0x646>
 8002904:	40020010 	.word	0x40020010
 8002908:	40020028 	.word	0x40020028
 800290c:	40020040 	.word	0x40020040
 8002910:	40020058 	.word	0x40020058
 8002914:	40020070 	.word	0x40020070
 8002918:	40020088 	.word	0x40020088
 800291c:	400200a0 	.word	0x400200a0
 8002920:	400200b8 	.word	0x400200b8
 8002924:	40020410 	.word	0x40020410
 8002928:	40020428 	.word	0x40020428
 800292c:	40020440 	.word	0x40020440
 8002930:	40020458 	.word	0x40020458
 8002934:	40020470 	.word	0x40020470
 8002938:	40020488 	.word	0x40020488
 800293c:	400204a0 	.word	0x400204a0
 8002940:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1c8      	bne.n	80028e4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4b83      	ldr	r3, [pc, #524]	@ (8002b6c <HAL_DMA_Init+0x420>)
 800295e:	4013      	ands	r3, r2
 8002960:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800296a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002976:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002982:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4313      	orrs	r3, r2
 800298e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	2b04      	cmp	r3, #4
 8002996:	d107      	bne.n	80029a8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a0:	4313      	orrs	r3, r2
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80029a8:	4b71      	ldr	r3, [pc, #452]	@ (8002b70 <HAL_DMA_Init+0x424>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b71      	ldr	r3, [pc, #452]	@ (8002b74 <HAL_DMA_Init+0x428>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029b4:	d328      	bcc.n	8002a08 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b28      	cmp	r3, #40	@ 0x28
 80029bc:	d903      	bls.n	80029c6 <HAL_DMA_Init+0x27a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80029c4:	d917      	bls.n	80029f6 <HAL_DMA_Init+0x2aa>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80029cc:	d903      	bls.n	80029d6 <HAL_DMA_Init+0x28a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b42      	cmp	r3, #66	@ 0x42
 80029d4:	d90f      	bls.n	80029f6 <HAL_DMA_Init+0x2aa>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b46      	cmp	r3, #70	@ 0x46
 80029dc:	d903      	bls.n	80029e6 <HAL_DMA_Init+0x29a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b48      	cmp	r3, #72	@ 0x48
 80029e4:	d907      	bls.n	80029f6 <HAL_DMA_Init+0x2aa>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b4e      	cmp	r3, #78	@ 0x4e
 80029ec:	d905      	bls.n	80029fa <HAL_DMA_Init+0x2ae>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b52      	cmp	r3, #82	@ 0x52
 80029f4:	d801      	bhi.n	80029fa <HAL_DMA_Init+0x2ae>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <HAL_DMA_Init+0x2b0>
 80029fa:	2300      	movs	r3, #0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a06:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f023 0307 	bic.w	r3, r3, #7
 8002a1e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d117      	bne.n	8002a62 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00e      	beq.n	8002a62 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f001 f9b9 	bl	8003dbc <DMA_CheckFifoParam>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2240      	movs	r2, #64	@ 0x40
 8002a54:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e197      	b.n	8002d92 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f001 f8f4 	bl	8003c58 <DMA_CalcBaseAndBitshift>
 8002a70:	4603      	mov	r3, r0
 8002a72:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	223f      	movs	r2, #63	@ 0x3f
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	e0cd      	b.n	8002c22 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a3b      	ldr	r2, [pc, #236]	@ (8002b78 <HAL_DMA_Init+0x42c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d022      	beq.n	8002ad6 <HAL_DMA_Init+0x38a>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a39      	ldr	r2, [pc, #228]	@ (8002b7c <HAL_DMA_Init+0x430>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d01d      	beq.n	8002ad6 <HAL_DMA_Init+0x38a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a38      	ldr	r2, [pc, #224]	@ (8002b80 <HAL_DMA_Init+0x434>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d018      	beq.n	8002ad6 <HAL_DMA_Init+0x38a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a36      	ldr	r2, [pc, #216]	@ (8002b84 <HAL_DMA_Init+0x438>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d013      	beq.n	8002ad6 <HAL_DMA_Init+0x38a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a35      	ldr	r2, [pc, #212]	@ (8002b88 <HAL_DMA_Init+0x43c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00e      	beq.n	8002ad6 <HAL_DMA_Init+0x38a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a33      	ldr	r2, [pc, #204]	@ (8002b8c <HAL_DMA_Init+0x440>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d009      	beq.n	8002ad6 <HAL_DMA_Init+0x38a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a32      	ldr	r2, [pc, #200]	@ (8002b90 <HAL_DMA_Init+0x444>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d004      	beq.n	8002ad6 <HAL_DMA_Init+0x38a>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a30      	ldr	r2, [pc, #192]	@ (8002b94 <HAL_DMA_Init+0x448>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d101      	bne.n	8002ada <HAL_DMA_Init+0x38e>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <HAL_DMA_Init+0x390>
 8002ada:	2300      	movs	r3, #0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8097 	beq.w	8002c10 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a24      	ldr	r2, [pc, #144]	@ (8002b78 <HAL_DMA_Init+0x42c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d021      	beq.n	8002b30 <HAL_DMA_Init+0x3e4>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a22      	ldr	r2, [pc, #136]	@ (8002b7c <HAL_DMA_Init+0x430>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d01c      	beq.n	8002b30 <HAL_DMA_Init+0x3e4>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a21      	ldr	r2, [pc, #132]	@ (8002b80 <HAL_DMA_Init+0x434>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d017      	beq.n	8002b30 <HAL_DMA_Init+0x3e4>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a1f      	ldr	r2, [pc, #124]	@ (8002b84 <HAL_DMA_Init+0x438>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d012      	beq.n	8002b30 <HAL_DMA_Init+0x3e4>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002b88 <HAL_DMA_Init+0x43c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d00d      	beq.n	8002b30 <HAL_DMA_Init+0x3e4>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a1c      	ldr	r2, [pc, #112]	@ (8002b8c <HAL_DMA_Init+0x440>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d008      	beq.n	8002b30 <HAL_DMA_Init+0x3e4>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1b      	ldr	r2, [pc, #108]	@ (8002b90 <HAL_DMA_Init+0x444>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d003      	beq.n	8002b30 <HAL_DMA_Init+0x3e4>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a19      	ldr	r2, [pc, #100]	@ (8002b94 <HAL_DMA_Init+0x448>)
 8002b2e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	4b13      	ldr	r3, [pc, #76]	@ (8002b98 <HAL_DMA_Init+0x44c>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b40      	cmp	r3, #64	@ 0x40
 8002b56:	d021      	beq.n	8002b9c <HAL_DMA_Init+0x450>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b80      	cmp	r3, #128	@ 0x80
 8002b5e:	d102      	bne.n	8002b66 <HAL_DMA_Init+0x41a>
 8002b60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b64:	e01b      	b.n	8002b9e <HAL_DMA_Init+0x452>
 8002b66:	2300      	movs	r3, #0
 8002b68:	e019      	b.n	8002b9e <HAL_DMA_Init+0x452>
 8002b6a:	bf00      	nop
 8002b6c:	fe10803f 	.word	0xfe10803f
 8002b70:	5c001000 	.word	0x5c001000
 8002b74:	ffff0000 	.word	0xffff0000
 8002b78:	58025408 	.word	0x58025408
 8002b7c:	5802541c 	.word	0x5802541c
 8002b80:	58025430 	.word	0x58025430
 8002b84:	58025444 	.word	0x58025444
 8002b88:	58025458 	.word	0x58025458
 8002b8c:	5802546c 	.word	0x5802546c
 8002b90:	58025480 	.word	0x58025480
 8002b94:	58025494 	.word	0x58025494
 8002b98:	fffe000f 	.word	0xfffe000f
 8002b9c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68d2      	ldr	r2, [r2, #12]
 8002ba2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ba4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002bac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002bb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002bbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002bc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002bcc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	4b6e      	ldr	r3, [pc, #440]	@ (8002d9c <HAL_DMA_Init+0x650>)
 8002be4:	4413      	add	r3, r2
 8002be6:	4a6e      	ldr	r2, [pc, #440]	@ (8002da0 <HAL_DMA_Init+0x654>)
 8002be8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	009a      	lsls	r2, r3, #2
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f001 f82f 	bl	8003c58 <DMA_CalcBaseAndBitshift>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	2201      	movs	r2, #1
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	e008      	b.n	8002c22 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2240      	movs	r2, #64	@ 0x40
 8002c14:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2203      	movs	r2, #3
 8002c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e0b7      	b.n	8002d92 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a5f      	ldr	r2, [pc, #380]	@ (8002da4 <HAL_DMA_Init+0x658>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d072      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a5d      	ldr	r2, [pc, #372]	@ (8002da8 <HAL_DMA_Init+0x65c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d06d      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a5c      	ldr	r2, [pc, #368]	@ (8002dac <HAL_DMA_Init+0x660>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d068      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a5a      	ldr	r2, [pc, #360]	@ (8002db0 <HAL_DMA_Init+0x664>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d063      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a59      	ldr	r2, [pc, #356]	@ (8002db4 <HAL_DMA_Init+0x668>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d05e      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a57      	ldr	r2, [pc, #348]	@ (8002db8 <HAL_DMA_Init+0x66c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d059      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a56      	ldr	r2, [pc, #344]	@ (8002dbc <HAL_DMA_Init+0x670>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d054      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a54      	ldr	r2, [pc, #336]	@ (8002dc0 <HAL_DMA_Init+0x674>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d04f      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a53      	ldr	r2, [pc, #332]	@ (8002dc4 <HAL_DMA_Init+0x678>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d04a      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a51      	ldr	r2, [pc, #324]	@ (8002dc8 <HAL_DMA_Init+0x67c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d045      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a50      	ldr	r2, [pc, #320]	@ (8002dcc <HAL_DMA_Init+0x680>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d040      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a4e      	ldr	r2, [pc, #312]	@ (8002dd0 <HAL_DMA_Init+0x684>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d03b      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a4d      	ldr	r2, [pc, #308]	@ (8002dd4 <HAL_DMA_Init+0x688>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d036      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a4b      	ldr	r2, [pc, #300]	@ (8002dd8 <HAL_DMA_Init+0x68c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d031      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a4a      	ldr	r2, [pc, #296]	@ (8002ddc <HAL_DMA_Init+0x690>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d02c      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a48      	ldr	r2, [pc, #288]	@ (8002de0 <HAL_DMA_Init+0x694>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d027      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a47      	ldr	r2, [pc, #284]	@ (8002de4 <HAL_DMA_Init+0x698>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d022      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a45      	ldr	r2, [pc, #276]	@ (8002de8 <HAL_DMA_Init+0x69c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d01d      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a44      	ldr	r2, [pc, #272]	@ (8002dec <HAL_DMA_Init+0x6a0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d018      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a42      	ldr	r2, [pc, #264]	@ (8002df0 <HAL_DMA_Init+0x6a4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a41      	ldr	r2, [pc, #260]	@ (8002df4 <HAL_DMA_Init+0x6a8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00e      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a3f      	ldr	r2, [pc, #252]	@ (8002df8 <HAL_DMA_Init+0x6ac>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d009      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a3e      	ldr	r2, [pc, #248]	@ (8002dfc <HAL_DMA_Init+0x6b0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_DMA_Init+0x5c6>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a3c      	ldr	r2, [pc, #240]	@ (8002e00 <HAL_DMA_Init+0x6b4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d101      	bne.n	8002d16 <HAL_DMA_Init+0x5ca>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_DMA_Init+0x5cc>
 8002d16:	2300      	movs	r3, #0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d032      	beq.n	8002d82 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f001 f8c9 	bl	8003eb4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b80      	cmp	r3, #128	@ 0x80
 8002d28:	d102      	bne.n	8002d30 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d44:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d010      	beq.n	8002d70 <HAL_DMA_Init+0x624>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d80c      	bhi.n	8002d70 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f001 f946 	bl	8003fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	e008      	b.n	8002d82 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	a7fdabf8 	.word	0xa7fdabf8
 8002da0:	cccccccd 	.word	0xcccccccd
 8002da4:	40020010 	.word	0x40020010
 8002da8:	40020028 	.word	0x40020028
 8002dac:	40020040 	.word	0x40020040
 8002db0:	40020058 	.word	0x40020058
 8002db4:	40020070 	.word	0x40020070
 8002db8:	40020088 	.word	0x40020088
 8002dbc:	400200a0 	.word	0x400200a0
 8002dc0:	400200b8 	.word	0x400200b8
 8002dc4:	40020410 	.word	0x40020410
 8002dc8:	40020428 	.word	0x40020428
 8002dcc:	40020440 	.word	0x40020440
 8002dd0:	40020458 	.word	0x40020458
 8002dd4:	40020470 	.word	0x40020470
 8002dd8:	40020488 	.word	0x40020488
 8002ddc:	400204a0 	.word	0x400204a0
 8002de0:	400204b8 	.word	0x400204b8
 8002de4:	58025408 	.word	0x58025408
 8002de8:	5802541c 	.word	0x5802541c
 8002dec:	58025430 	.word	0x58025430
 8002df0:	58025444 	.word	0x58025444
 8002df4:	58025458 	.word	0x58025458
 8002df8:	5802546c 	.word	0x5802546c
 8002dfc:	58025480 	.word	0x58025480
 8002e00:	58025494 	.word	0x58025494

08002e04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	@ 0x28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e10:	4b67      	ldr	r3, [pc, #412]	@ (8002fb0 <HAL_DMA_IRQHandler+0x1ac>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a67      	ldr	r2, [pc, #412]	@ (8002fb4 <HAL_DMA_IRQHandler+0x1b0>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	0a9b      	lsrs	r3, r3, #10
 8002e1c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e22:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e28:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a5f      	ldr	r2, [pc, #380]	@ (8002fb8 <HAL_DMA_IRQHandler+0x1b4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d04a      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0xd2>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a5d      	ldr	r2, [pc, #372]	@ (8002fbc <HAL_DMA_IRQHandler+0x1b8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d045      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0xd2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a5c      	ldr	r2, [pc, #368]	@ (8002fc0 <HAL_DMA_IRQHandler+0x1bc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d040      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0xd2>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a5a      	ldr	r2, [pc, #360]	@ (8002fc4 <HAL_DMA_IRQHandler+0x1c0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d03b      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0xd2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a59      	ldr	r2, [pc, #356]	@ (8002fc8 <HAL_DMA_IRQHandler+0x1c4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d036      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0xd2>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a57      	ldr	r2, [pc, #348]	@ (8002fcc <HAL_DMA_IRQHandler+0x1c8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d031      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0xd2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a56      	ldr	r2, [pc, #344]	@ (8002fd0 <HAL_DMA_IRQHandler+0x1cc>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d02c      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0xd2>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a54      	ldr	r2, [pc, #336]	@ (8002fd4 <HAL_DMA_IRQHandler+0x1d0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d027      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0xd2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a53      	ldr	r2, [pc, #332]	@ (8002fd8 <HAL_DMA_IRQHandler+0x1d4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d022      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0xd2>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a51      	ldr	r2, [pc, #324]	@ (8002fdc <HAL_DMA_IRQHandler+0x1d8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d01d      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0xd2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a50      	ldr	r2, [pc, #320]	@ (8002fe0 <HAL_DMA_IRQHandler+0x1dc>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d018      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0xd2>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a4e      	ldr	r2, [pc, #312]	@ (8002fe4 <HAL_DMA_IRQHandler+0x1e0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d013      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0xd2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a4d      	ldr	r2, [pc, #308]	@ (8002fe8 <HAL_DMA_IRQHandler+0x1e4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00e      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0xd2>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a4b      	ldr	r2, [pc, #300]	@ (8002fec <HAL_DMA_IRQHandler+0x1e8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d009      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0xd2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a4a      	ldr	r2, [pc, #296]	@ (8002ff0 <HAL_DMA_IRQHandler+0x1ec>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d004      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0xd2>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a48      	ldr	r2, [pc, #288]	@ (8002ff4 <HAL_DMA_IRQHandler+0x1f0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d101      	bne.n	8002eda <HAL_DMA_IRQHandler+0xd6>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <HAL_DMA_IRQHandler+0xd8>
 8002eda:	2300      	movs	r3, #0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 842b 	beq.w	8003738 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	2208      	movs	r2, #8
 8002eec:	409a      	lsls	r2, r3
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 80a2 	beq.w	800303c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a2e      	ldr	r2, [pc, #184]	@ (8002fb8 <HAL_DMA_IRQHandler+0x1b4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d04a      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x194>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a2d      	ldr	r2, [pc, #180]	@ (8002fbc <HAL_DMA_IRQHandler+0x1b8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d045      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x194>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a2b      	ldr	r2, [pc, #172]	@ (8002fc0 <HAL_DMA_IRQHandler+0x1bc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d040      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x194>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a2a      	ldr	r2, [pc, #168]	@ (8002fc4 <HAL_DMA_IRQHandler+0x1c0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d03b      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x194>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a28      	ldr	r2, [pc, #160]	@ (8002fc8 <HAL_DMA_IRQHandler+0x1c4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d036      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x194>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a27      	ldr	r2, [pc, #156]	@ (8002fcc <HAL_DMA_IRQHandler+0x1c8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d031      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x194>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a25      	ldr	r2, [pc, #148]	@ (8002fd0 <HAL_DMA_IRQHandler+0x1cc>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d02c      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x194>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a24      	ldr	r2, [pc, #144]	@ (8002fd4 <HAL_DMA_IRQHandler+0x1d0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d027      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x194>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a22      	ldr	r2, [pc, #136]	@ (8002fd8 <HAL_DMA_IRQHandler+0x1d4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d022      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x194>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a21      	ldr	r2, [pc, #132]	@ (8002fdc <HAL_DMA_IRQHandler+0x1d8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d01d      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x194>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe0 <HAL_DMA_IRQHandler+0x1dc>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d018      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x194>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe4 <HAL_DMA_IRQHandler+0x1e0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d013      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x194>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe8 <HAL_DMA_IRQHandler+0x1e4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d00e      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x194>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8002fec <HAL_DMA_IRQHandler+0x1e8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d009      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x194>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a19      	ldr	r2, [pc, #100]	@ (8002ff0 <HAL_DMA_IRQHandler+0x1ec>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d004      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x194>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a18      	ldr	r2, [pc, #96]	@ (8002ff4 <HAL_DMA_IRQHandler+0x1f0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d12f      	bne.n	8002ff8 <HAL_DMA_IRQHandler+0x1f4>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bf14      	ite	ne
 8002fa6:	2301      	movne	r3, #1
 8002fa8:	2300      	moveq	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	e02e      	b.n	800300c <HAL_DMA_IRQHandler+0x208>
 8002fae:	bf00      	nop
 8002fb0:	24000000 	.word	0x24000000
 8002fb4:	1b4e81b5 	.word	0x1b4e81b5
 8002fb8:	40020010 	.word	0x40020010
 8002fbc:	40020028 	.word	0x40020028
 8002fc0:	40020040 	.word	0x40020040
 8002fc4:	40020058 	.word	0x40020058
 8002fc8:	40020070 	.word	0x40020070
 8002fcc:	40020088 	.word	0x40020088
 8002fd0:	400200a0 	.word	0x400200a0
 8002fd4:	400200b8 	.word	0x400200b8
 8002fd8:	40020410 	.word	0x40020410
 8002fdc:	40020428 	.word	0x40020428
 8002fe0:	40020440 	.word	0x40020440
 8002fe4:	40020458 	.word	0x40020458
 8002fe8:	40020470 	.word	0x40020470
 8002fec:	40020488 	.word	0x40020488
 8002ff0:	400204a0 	.word	0x400204a0
 8002ff4:	400204b8 	.word	0x400204b8
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	bf14      	ite	ne
 8003006:	2301      	movne	r3, #1
 8003008:	2300      	moveq	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d015      	beq.n	800303c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0204 	bic.w	r2, r2, #4
 800301e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	2208      	movs	r2, #8
 800302a:	409a      	lsls	r2, r3
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003034:	f043 0201 	orr.w	r2, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	fa22 f303 	lsr.w	r3, r2, r3
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d06e      	beq.n	8003130 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a69      	ldr	r2, [pc, #420]	@ (80031fc <HAL_DMA_IRQHandler+0x3f8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d04a      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x2ee>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a67      	ldr	r2, [pc, #412]	@ (8003200 <HAL_DMA_IRQHandler+0x3fc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d045      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x2ee>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a66      	ldr	r2, [pc, #408]	@ (8003204 <HAL_DMA_IRQHandler+0x400>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d040      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x2ee>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a64      	ldr	r2, [pc, #400]	@ (8003208 <HAL_DMA_IRQHandler+0x404>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d03b      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x2ee>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a63      	ldr	r2, [pc, #396]	@ (800320c <HAL_DMA_IRQHandler+0x408>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d036      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x2ee>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a61      	ldr	r2, [pc, #388]	@ (8003210 <HAL_DMA_IRQHandler+0x40c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d031      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x2ee>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a60      	ldr	r2, [pc, #384]	@ (8003214 <HAL_DMA_IRQHandler+0x410>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d02c      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x2ee>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a5e      	ldr	r2, [pc, #376]	@ (8003218 <HAL_DMA_IRQHandler+0x414>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d027      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x2ee>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a5d      	ldr	r2, [pc, #372]	@ (800321c <HAL_DMA_IRQHandler+0x418>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d022      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x2ee>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a5b      	ldr	r2, [pc, #364]	@ (8003220 <HAL_DMA_IRQHandler+0x41c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d01d      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x2ee>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a5a      	ldr	r2, [pc, #360]	@ (8003224 <HAL_DMA_IRQHandler+0x420>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d018      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x2ee>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a58      	ldr	r2, [pc, #352]	@ (8003228 <HAL_DMA_IRQHandler+0x424>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d013      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x2ee>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a57      	ldr	r2, [pc, #348]	@ (800322c <HAL_DMA_IRQHandler+0x428>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00e      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x2ee>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a55      	ldr	r2, [pc, #340]	@ (8003230 <HAL_DMA_IRQHandler+0x42c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d009      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x2ee>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a54      	ldr	r2, [pc, #336]	@ (8003234 <HAL_DMA_IRQHandler+0x430>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d004      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x2ee>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a52      	ldr	r2, [pc, #328]	@ (8003238 <HAL_DMA_IRQHandler+0x434>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10a      	bne.n	8003108 <HAL_DMA_IRQHandler+0x304>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	e003      	b.n	8003110 <HAL_DMA_IRQHandler+0x30c>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2300      	movs	r3, #0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00d      	beq.n	8003130 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	2201      	movs	r2, #1
 800311e:	409a      	lsls	r2, r3
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003128:	f043 0202 	orr.w	r2, r3, #2
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	2204      	movs	r2, #4
 800313a:	409a      	lsls	r2, r3
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	4013      	ands	r3, r2
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 808f 	beq.w	8003264 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a2c      	ldr	r2, [pc, #176]	@ (80031fc <HAL_DMA_IRQHandler+0x3f8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d04a      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x3e2>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a2a      	ldr	r2, [pc, #168]	@ (8003200 <HAL_DMA_IRQHandler+0x3fc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d045      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x3e2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a29      	ldr	r2, [pc, #164]	@ (8003204 <HAL_DMA_IRQHandler+0x400>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d040      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x3e2>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a27      	ldr	r2, [pc, #156]	@ (8003208 <HAL_DMA_IRQHandler+0x404>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d03b      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x3e2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a26      	ldr	r2, [pc, #152]	@ (800320c <HAL_DMA_IRQHandler+0x408>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d036      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x3e2>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a24      	ldr	r2, [pc, #144]	@ (8003210 <HAL_DMA_IRQHandler+0x40c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d031      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x3e2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a23      	ldr	r2, [pc, #140]	@ (8003214 <HAL_DMA_IRQHandler+0x410>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d02c      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x3e2>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a21      	ldr	r2, [pc, #132]	@ (8003218 <HAL_DMA_IRQHandler+0x414>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d027      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x3e2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a20      	ldr	r2, [pc, #128]	@ (800321c <HAL_DMA_IRQHandler+0x418>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d022      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x3e2>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003220 <HAL_DMA_IRQHandler+0x41c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d01d      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x3e2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003224 <HAL_DMA_IRQHandler+0x420>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d018      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x3e2>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003228 <HAL_DMA_IRQHandler+0x424>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x3e2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1a      	ldr	r2, [pc, #104]	@ (800322c <HAL_DMA_IRQHandler+0x428>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00e      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x3e2>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a18      	ldr	r2, [pc, #96]	@ (8003230 <HAL_DMA_IRQHandler+0x42c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d009      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x3e2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a17      	ldr	r2, [pc, #92]	@ (8003234 <HAL_DMA_IRQHandler+0x430>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d004      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x3e2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a15      	ldr	r2, [pc, #84]	@ (8003238 <HAL_DMA_IRQHandler+0x434>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d12a      	bne.n	800323c <HAL_DMA_IRQHandler+0x438>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e023      	b.n	8003244 <HAL_DMA_IRQHandler+0x440>
 80031fc:	40020010 	.word	0x40020010
 8003200:	40020028 	.word	0x40020028
 8003204:	40020040 	.word	0x40020040
 8003208:	40020058 	.word	0x40020058
 800320c:	40020070 	.word	0x40020070
 8003210:	40020088 	.word	0x40020088
 8003214:	400200a0 	.word	0x400200a0
 8003218:	400200b8 	.word	0x400200b8
 800321c:	40020410 	.word	0x40020410
 8003220:	40020428 	.word	0x40020428
 8003224:	40020440 	.word	0x40020440
 8003228:	40020458 	.word	0x40020458
 800322c:	40020470 	.word	0x40020470
 8003230:	40020488 	.word	0x40020488
 8003234:	400204a0 	.word	0x400204a0
 8003238:	400204b8 	.word	0x400204b8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2300      	movs	r3, #0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00d      	beq.n	8003264 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324c:	f003 031f 	and.w	r3, r3, #31
 8003250:	2204      	movs	r2, #4
 8003252:	409a      	lsls	r2, r3
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325c:	f043 0204 	orr.w	r2, r3, #4
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	2210      	movs	r2, #16
 800326e:	409a      	lsls	r2, r3
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80a6 	beq.w	80033c6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a85      	ldr	r2, [pc, #532]	@ (8003494 <HAL_DMA_IRQHandler+0x690>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d04a      	beq.n	800331a <HAL_DMA_IRQHandler+0x516>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a83      	ldr	r2, [pc, #524]	@ (8003498 <HAL_DMA_IRQHandler+0x694>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d045      	beq.n	800331a <HAL_DMA_IRQHandler+0x516>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a82      	ldr	r2, [pc, #520]	@ (800349c <HAL_DMA_IRQHandler+0x698>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d040      	beq.n	800331a <HAL_DMA_IRQHandler+0x516>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a80      	ldr	r2, [pc, #512]	@ (80034a0 <HAL_DMA_IRQHandler+0x69c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d03b      	beq.n	800331a <HAL_DMA_IRQHandler+0x516>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a7f      	ldr	r2, [pc, #508]	@ (80034a4 <HAL_DMA_IRQHandler+0x6a0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d036      	beq.n	800331a <HAL_DMA_IRQHandler+0x516>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a7d      	ldr	r2, [pc, #500]	@ (80034a8 <HAL_DMA_IRQHandler+0x6a4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d031      	beq.n	800331a <HAL_DMA_IRQHandler+0x516>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a7c      	ldr	r2, [pc, #496]	@ (80034ac <HAL_DMA_IRQHandler+0x6a8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d02c      	beq.n	800331a <HAL_DMA_IRQHandler+0x516>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a7a      	ldr	r2, [pc, #488]	@ (80034b0 <HAL_DMA_IRQHandler+0x6ac>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d027      	beq.n	800331a <HAL_DMA_IRQHandler+0x516>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a79      	ldr	r2, [pc, #484]	@ (80034b4 <HAL_DMA_IRQHandler+0x6b0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d022      	beq.n	800331a <HAL_DMA_IRQHandler+0x516>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a77      	ldr	r2, [pc, #476]	@ (80034b8 <HAL_DMA_IRQHandler+0x6b4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01d      	beq.n	800331a <HAL_DMA_IRQHandler+0x516>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a76      	ldr	r2, [pc, #472]	@ (80034bc <HAL_DMA_IRQHandler+0x6b8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d018      	beq.n	800331a <HAL_DMA_IRQHandler+0x516>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a74      	ldr	r2, [pc, #464]	@ (80034c0 <HAL_DMA_IRQHandler+0x6bc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_DMA_IRQHandler+0x516>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a73      	ldr	r2, [pc, #460]	@ (80034c4 <HAL_DMA_IRQHandler+0x6c0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00e      	beq.n	800331a <HAL_DMA_IRQHandler+0x516>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a71      	ldr	r2, [pc, #452]	@ (80034c8 <HAL_DMA_IRQHandler+0x6c4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d009      	beq.n	800331a <HAL_DMA_IRQHandler+0x516>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a70      	ldr	r2, [pc, #448]	@ (80034cc <HAL_DMA_IRQHandler+0x6c8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d004      	beq.n	800331a <HAL_DMA_IRQHandler+0x516>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a6e      	ldr	r2, [pc, #440]	@ (80034d0 <HAL_DMA_IRQHandler+0x6cc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d10a      	bne.n	8003330 <HAL_DMA_IRQHandler+0x52c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf14      	ite	ne
 8003328:	2301      	movne	r3, #1
 800332a:	2300      	moveq	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	e009      	b.n	8003344 <HAL_DMA_IRQHandler+0x540>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b00      	cmp	r3, #0
 800333c:	bf14      	ite	ne
 800333e:	2301      	movne	r3, #1
 8003340:	2300      	moveq	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d03e      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	2210      	movs	r2, #16
 8003352:	409a      	lsls	r2, r3
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d018      	beq.n	8003398 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d108      	bne.n	8003386 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d024      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	4798      	blx	r3
 8003384:	e01f      	b.n	80033c6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01b      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	4798      	blx	r3
 8003396:	e016      	b.n	80033c6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d107      	bne.n	80033b6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0208 	bic.w	r2, r2, #8
 80033b4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	2220      	movs	r2, #32
 80033d0:	409a      	lsls	r2, r3
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8110 	beq.w	80035fc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003494 <HAL_DMA_IRQHandler+0x690>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d04a      	beq.n	800347c <HAL_DMA_IRQHandler+0x678>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a2b      	ldr	r2, [pc, #172]	@ (8003498 <HAL_DMA_IRQHandler+0x694>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d045      	beq.n	800347c <HAL_DMA_IRQHandler+0x678>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a29      	ldr	r2, [pc, #164]	@ (800349c <HAL_DMA_IRQHandler+0x698>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d040      	beq.n	800347c <HAL_DMA_IRQHandler+0x678>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a28      	ldr	r2, [pc, #160]	@ (80034a0 <HAL_DMA_IRQHandler+0x69c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d03b      	beq.n	800347c <HAL_DMA_IRQHandler+0x678>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a26      	ldr	r2, [pc, #152]	@ (80034a4 <HAL_DMA_IRQHandler+0x6a0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d036      	beq.n	800347c <HAL_DMA_IRQHandler+0x678>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a25      	ldr	r2, [pc, #148]	@ (80034a8 <HAL_DMA_IRQHandler+0x6a4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d031      	beq.n	800347c <HAL_DMA_IRQHandler+0x678>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a23      	ldr	r2, [pc, #140]	@ (80034ac <HAL_DMA_IRQHandler+0x6a8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d02c      	beq.n	800347c <HAL_DMA_IRQHandler+0x678>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a22      	ldr	r2, [pc, #136]	@ (80034b0 <HAL_DMA_IRQHandler+0x6ac>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d027      	beq.n	800347c <HAL_DMA_IRQHandler+0x678>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a20      	ldr	r2, [pc, #128]	@ (80034b4 <HAL_DMA_IRQHandler+0x6b0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d022      	beq.n	800347c <HAL_DMA_IRQHandler+0x678>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a1f      	ldr	r2, [pc, #124]	@ (80034b8 <HAL_DMA_IRQHandler+0x6b4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d01d      	beq.n	800347c <HAL_DMA_IRQHandler+0x678>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a1d      	ldr	r2, [pc, #116]	@ (80034bc <HAL_DMA_IRQHandler+0x6b8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d018      	beq.n	800347c <HAL_DMA_IRQHandler+0x678>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1c      	ldr	r2, [pc, #112]	@ (80034c0 <HAL_DMA_IRQHandler+0x6bc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <HAL_DMA_IRQHandler+0x678>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1a      	ldr	r2, [pc, #104]	@ (80034c4 <HAL_DMA_IRQHandler+0x6c0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00e      	beq.n	800347c <HAL_DMA_IRQHandler+0x678>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a19      	ldr	r2, [pc, #100]	@ (80034c8 <HAL_DMA_IRQHandler+0x6c4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d009      	beq.n	800347c <HAL_DMA_IRQHandler+0x678>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a17      	ldr	r2, [pc, #92]	@ (80034cc <HAL_DMA_IRQHandler+0x6c8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d004      	beq.n	800347c <HAL_DMA_IRQHandler+0x678>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a16      	ldr	r2, [pc, #88]	@ (80034d0 <HAL_DMA_IRQHandler+0x6cc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d12b      	bne.n	80034d4 <HAL_DMA_IRQHandler+0x6d0>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	2b00      	cmp	r3, #0
 8003488:	bf14      	ite	ne
 800348a:	2301      	movne	r3, #1
 800348c:	2300      	moveq	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	e02a      	b.n	80034e8 <HAL_DMA_IRQHandler+0x6e4>
 8003492:	bf00      	nop
 8003494:	40020010 	.word	0x40020010
 8003498:	40020028 	.word	0x40020028
 800349c:	40020040 	.word	0x40020040
 80034a0:	40020058 	.word	0x40020058
 80034a4:	40020070 	.word	0x40020070
 80034a8:	40020088 	.word	0x40020088
 80034ac:	400200a0 	.word	0x400200a0
 80034b0:	400200b8 	.word	0x400200b8
 80034b4:	40020410 	.word	0x40020410
 80034b8:	40020428 	.word	0x40020428
 80034bc:	40020440 	.word	0x40020440
 80034c0:	40020458 	.word	0x40020458
 80034c4:	40020470 	.word	0x40020470
 80034c8:	40020488 	.word	0x40020488
 80034cc:	400204a0 	.word	0x400204a0
 80034d0:	400204b8 	.word	0x400204b8
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	bf14      	ite	ne
 80034e2:	2301      	movne	r3, #1
 80034e4:	2300      	moveq	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 8087 	beq.w	80035fc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	2220      	movs	r2, #32
 80034f8:	409a      	lsls	r2, r3
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b04      	cmp	r3, #4
 8003508:	d139      	bne.n	800357e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0216 	bic.w	r2, r2, #22
 8003518:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003528:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	d103      	bne.n	800353a <HAL_DMA_IRQHandler+0x736>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003536:	2b00      	cmp	r3, #0
 8003538:	d007      	beq.n	800354a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0208 	bic.w	r2, r2, #8
 8003548:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	223f      	movs	r2, #63	@ 0x3f
 8003554:	409a      	lsls	r2, r3
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 834a 	beq.w	8003c08 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4798      	blx	r3
          }
          return;
 800357c:	e344      	b.n	8003c08 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d018      	beq.n	80035be <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d108      	bne.n	80035ac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d02c      	beq.n	80035fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	4798      	blx	r3
 80035aa:	e027      	b.n	80035fc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d023      	beq.n	80035fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	4798      	blx	r3
 80035bc:	e01e      	b.n	80035fc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10f      	bne.n	80035ec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0210 	bic.w	r2, r2, #16
 80035da:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 8306 	beq.w	8003c12 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 8088 	beq.w	8003724 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2204      	movs	r2, #4
 8003618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a7a      	ldr	r2, [pc, #488]	@ (800380c <HAL_DMA_IRQHandler+0xa08>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d04a      	beq.n	80036bc <HAL_DMA_IRQHandler+0x8b8>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a79      	ldr	r2, [pc, #484]	@ (8003810 <HAL_DMA_IRQHandler+0xa0c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d045      	beq.n	80036bc <HAL_DMA_IRQHandler+0x8b8>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a77      	ldr	r2, [pc, #476]	@ (8003814 <HAL_DMA_IRQHandler+0xa10>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d040      	beq.n	80036bc <HAL_DMA_IRQHandler+0x8b8>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a76      	ldr	r2, [pc, #472]	@ (8003818 <HAL_DMA_IRQHandler+0xa14>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d03b      	beq.n	80036bc <HAL_DMA_IRQHandler+0x8b8>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a74      	ldr	r2, [pc, #464]	@ (800381c <HAL_DMA_IRQHandler+0xa18>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d036      	beq.n	80036bc <HAL_DMA_IRQHandler+0x8b8>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a73      	ldr	r2, [pc, #460]	@ (8003820 <HAL_DMA_IRQHandler+0xa1c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d031      	beq.n	80036bc <HAL_DMA_IRQHandler+0x8b8>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a71      	ldr	r2, [pc, #452]	@ (8003824 <HAL_DMA_IRQHandler+0xa20>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d02c      	beq.n	80036bc <HAL_DMA_IRQHandler+0x8b8>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a70      	ldr	r2, [pc, #448]	@ (8003828 <HAL_DMA_IRQHandler+0xa24>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d027      	beq.n	80036bc <HAL_DMA_IRQHandler+0x8b8>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a6e      	ldr	r2, [pc, #440]	@ (800382c <HAL_DMA_IRQHandler+0xa28>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d022      	beq.n	80036bc <HAL_DMA_IRQHandler+0x8b8>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a6d      	ldr	r2, [pc, #436]	@ (8003830 <HAL_DMA_IRQHandler+0xa2c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d01d      	beq.n	80036bc <HAL_DMA_IRQHandler+0x8b8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a6b      	ldr	r2, [pc, #428]	@ (8003834 <HAL_DMA_IRQHandler+0xa30>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d018      	beq.n	80036bc <HAL_DMA_IRQHandler+0x8b8>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a6a      	ldr	r2, [pc, #424]	@ (8003838 <HAL_DMA_IRQHandler+0xa34>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d013      	beq.n	80036bc <HAL_DMA_IRQHandler+0x8b8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a68      	ldr	r2, [pc, #416]	@ (800383c <HAL_DMA_IRQHandler+0xa38>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00e      	beq.n	80036bc <HAL_DMA_IRQHandler+0x8b8>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a67      	ldr	r2, [pc, #412]	@ (8003840 <HAL_DMA_IRQHandler+0xa3c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d009      	beq.n	80036bc <HAL_DMA_IRQHandler+0x8b8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a65      	ldr	r2, [pc, #404]	@ (8003844 <HAL_DMA_IRQHandler+0xa40>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d004      	beq.n	80036bc <HAL_DMA_IRQHandler+0x8b8>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a64      	ldr	r2, [pc, #400]	@ (8003848 <HAL_DMA_IRQHandler+0xa44>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d108      	bne.n	80036ce <HAL_DMA_IRQHandler+0x8ca>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	e007      	b.n	80036de <HAL_DMA_IRQHandler+0x8da>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0201 	bic.w	r2, r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	3301      	adds	r3, #1
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d307      	bcc.n	80036fa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f2      	bne.n	80036de <HAL_DMA_IRQHandler+0x8da>
 80036f8:	e000      	b.n	80036fc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80036fa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d004      	beq.n	8003714 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2203      	movs	r2, #3
 800370e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003712:	e003      	b.n	800371c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8272 	beq.w	8003c12 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	4798      	blx	r3
 8003736:	e26c      	b.n	8003c12 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a43      	ldr	r2, [pc, #268]	@ (800384c <HAL_DMA_IRQHandler+0xa48>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <HAL_DMA_IRQHandler+0x984>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a42      	ldr	r2, [pc, #264]	@ (8003850 <HAL_DMA_IRQHandler+0xa4c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d01d      	beq.n	8003788 <HAL_DMA_IRQHandler+0x984>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a40      	ldr	r2, [pc, #256]	@ (8003854 <HAL_DMA_IRQHandler+0xa50>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d018      	beq.n	8003788 <HAL_DMA_IRQHandler+0x984>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a3f      	ldr	r2, [pc, #252]	@ (8003858 <HAL_DMA_IRQHandler+0xa54>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_DMA_IRQHandler+0x984>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a3d      	ldr	r2, [pc, #244]	@ (800385c <HAL_DMA_IRQHandler+0xa58>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <HAL_DMA_IRQHandler+0x984>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a3c      	ldr	r2, [pc, #240]	@ (8003860 <HAL_DMA_IRQHandler+0xa5c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_DMA_IRQHandler+0x984>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a3a      	ldr	r2, [pc, #232]	@ (8003864 <HAL_DMA_IRQHandler+0xa60>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_DMA_IRQHandler+0x984>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a39      	ldr	r2, [pc, #228]	@ (8003868 <HAL_DMA_IRQHandler+0xa64>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d101      	bne.n	800378c <HAL_DMA_IRQHandler+0x988>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <HAL_DMA_IRQHandler+0x98a>
 800378c:	2300      	movs	r3, #0
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 823f 	beq.w	8003c12 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a0:	f003 031f 	and.w	r3, r3, #31
 80037a4:	2204      	movs	r2, #4
 80037a6:	409a      	lsls	r2, r3
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	4013      	ands	r3, r2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80cd 	beq.w	800394c <HAL_DMA_IRQHandler+0xb48>
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 80c7 	beq.w	800394c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	2204      	movs	r2, #4
 80037c8:	409a      	lsls	r2, r3
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d049      	beq.n	800386c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 8210 	beq.w	8003c0c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037f4:	e20a      	b.n	8003c0c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 8206 	beq.w	8003c0c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003808:	e200      	b.n	8003c0c <HAL_DMA_IRQHandler+0xe08>
 800380a:	bf00      	nop
 800380c:	40020010 	.word	0x40020010
 8003810:	40020028 	.word	0x40020028
 8003814:	40020040 	.word	0x40020040
 8003818:	40020058 	.word	0x40020058
 800381c:	40020070 	.word	0x40020070
 8003820:	40020088 	.word	0x40020088
 8003824:	400200a0 	.word	0x400200a0
 8003828:	400200b8 	.word	0x400200b8
 800382c:	40020410 	.word	0x40020410
 8003830:	40020428 	.word	0x40020428
 8003834:	40020440 	.word	0x40020440
 8003838:	40020458 	.word	0x40020458
 800383c:	40020470 	.word	0x40020470
 8003840:	40020488 	.word	0x40020488
 8003844:	400204a0 	.word	0x400204a0
 8003848:	400204b8 	.word	0x400204b8
 800384c:	58025408 	.word	0x58025408
 8003850:	5802541c 	.word	0x5802541c
 8003854:	58025430 	.word	0x58025430
 8003858:	58025444 	.word	0x58025444
 800385c:	58025458 	.word	0x58025458
 8003860:	5802546c 	.word	0x5802546c
 8003864:	58025480 	.word	0x58025480
 8003868:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	d160      	bne.n	8003938 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a7f      	ldr	r2, [pc, #508]	@ (8003a78 <HAL_DMA_IRQHandler+0xc74>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d04a      	beq.n	8003916 <HAL_DMA_IRQHandler+0xb12>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a7d      	ldr	r2, [pc, #500]	@ (8003a7c <HAL_DMA_IRQHandler+0xc78>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d045      	beq.n	8003916 <HAL_DMA_IRQHandler+0xb12>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a7c      	ldr	r2, [pc, #496]	@ (8003a80 <HAL_DMA_IRQHandler+0xc7c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d040      	beq.n	8003916 <HAL_DMA_IRQHandler+0xb12>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a7a      	ldr	r2, [pc, #488]	@ (8003a84 <HAL_DMA_IRQHandler+0xc80>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d03b      	beq.n	8003916 <HAL_DMA_IRQHandler+0xb12>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a79      	ldr	r2, [pc, #484]	@ (8003a88 <HAL_DMA_IRQHandler+0xc84>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d036      	beq.n	8003916 <HAL_DMA_IRQHandler+0xb12>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a77      	ldr	r2, [pc, #476]	@ (8003a8c <HAL_DMA_IRQHandler+0xc88>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d031      	beq.n	8003916 <HAL_DMA_IRQHandler+0xb12>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a76      	ldr	r2, [pc, #472]	@ (8003a90 <HAL_DMA_IRQHandler+0xc8c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d02c      	beq.n	8003916 <HAL_DMA_IRQHandler+0xb12>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a74      	ldr	r2, [pc, #464]	@ (8003a94 <HAL_DMA_IRQHandler+0xc90>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d027      	beq.n	8003916 <HAL_DMA_IRQHandler+0xb12>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a73      	ldr	r2, [pc, #460]	@ (8003a98 <HAL_DMA_IRQHandler+0xc94>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d022      	beq.n	8003916 <HAL_DMA_IRQHandler+0xb12>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a71      	ldr	r2, [pc, #452]	@ (8003a9c <HAL_DMA_IRQHandler+0xc98>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01d      	beq.n	8003916 <HAL_DMA_IRQHandler+0xb12>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a70      	ldr	r2, [pc, #448]	@ (8003aa0 <HAL_DMA_IRQHandler+0xc9c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d018      	beq.n	8003916 <HAL_DMA_IRQHandler+0xb12>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a6e      	ldr	r2, [pc, #440]	@ (8003aa4 <HAL_DMA_IRQHandler+0xca0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d013      	beq.n	8003916 <HAL_DMA_IRQHandler+0xb12>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a6d      	ldr	r2, [pc, #436]	@ (8003aa8 <HAL_DMA_IRQHandler+0xca4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00e      	beq.n	8003916 <HAL_DMA_IRQHandler+0xb12>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a6b      	ldr	r2, [pc, #428]	@ (8003aac <HAL_DMA_IRQHandler+0xca8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d009      	beq.n	8003916 <HAL_DMA_IRQHandler+0xb12>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a6a      	ldr	r2, [pc, #424]	@ (8003ab0 <HAL_DMA_IRQHandler+0xcac>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d004      	beq.n	8003916 <HAL_DMA_IRQHandler+0xb12>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a68      	ldr	r2, [pc, #416]	@ (8003ab4 <HAL_DMA_IRQHandler+0xcb0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d108      	bne.n	8003928 <HAL_DMA_IRQHandler+0xb24>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0208 	bic.w	r2, r2, #8
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	e007      	b.n	8003938 <HAL_DMA_IRQHandler+0xb34>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0204 	bic.w	r2, r2, #4
 8003936:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8165 	beq.w	8003c0c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800394a:	e15f      	b.n	8003c0c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	2202      	movs	r2, #2
 8003956:	409a      	lsls	r2, r3
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80c5 	beq.w	8003aec <HAL_DMA_IRQHandler+0xce8>
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80bf 	beq.w	8003aec <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003972:	f003 031f 	and.w	r3, r3, #31
 8003976:	2202      	movs	r2, #2
 8003978:	409a      	lsls	r2, r3
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d018      	beq.n	80039ba <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d109      	bne.n	80039a6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 813a 	beq.w	8003c10 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039a4:	e134      	b.n	8003c10 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8130 	beq.w	8003c10 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039b8:	e12a      	b.n	8003c10 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f040 8089 	bne.w	8003ad8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003a78 <HAL_DMA_IRQHandler+0xc74>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d04a      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xc62>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a29      	ldr	r2, [pc, #164]	@ (8003a7c <HAL_DMA_IRQHandler+0xc78>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d045      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xc62>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a28      	ldr	r2, [pc, #160]	@ (8003a80 <HAL_DMA_IRQHandler+0xc7c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d040      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xc62>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a26      	ldr	r2, [pc, #152]	@ (8003a84 <HAL_DMA_IRQHandler+0xc80>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d03b      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xc62>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a25      	ldr	r2, [pc, #148]	@ (8003a88 <HAL_DMA_IRQHandler+0xc84>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d036      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xc62>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a23      	ldr	r2, [pc, #140]	@ (8003a8c <HAL_DMA_IRQHandler+0xc88>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d031      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xc62>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a22      	ldr	r2, [pc, #136]	@ (8003a90 <HAL_DMA_IRQHandler+0xc8c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d02c      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xc62>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a20      	ldr	r2, [pc, #128]	@ (8003a94 <HAL_DMA_IRQHandler+0xc90>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d027      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xc62>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8003a98 <HAL_DMA_IRQHandler+0xc94>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d022      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xc62>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1d      	ldr	r2, [pc, #116]	@ (8003a9c <HAL_DMA_IRQHandler+0xc98>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d01d      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xc62>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa0 <HAL_DMA_IRQHandler+0xc9c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d018      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xc62>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa4 <HAL_DMA_IRQHandler+0xca0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xc62>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a19      	ldr	r2, [pc, #100]	@ (8003aa8 <HAL_DMA_IRQHandler+0xca4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00e      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xc62>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a17      	ldr	r2, [pc, #92]	@ (8003aac <HAL_DMA_IRQHandler+0xca8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d009      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xc62>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a16      	ldr	r2, [pc, #88]	@ (8003ab0 <HAL_DMA_IRQHandler+0xcac>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xc62>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a14      	ldr	r2, [pc, #80]	@ (8003ab4 <HAL_DMA_IRQHandler+0xcb0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d128      	bne.n	8003ab8 <HAL_DMA_IRQHandler+0xcb4>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0214 	bic.w	r2, r2, #20
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	e027      	b.n	8003ac8 <HAL_DMA_IRQHandler+0xcc4>
 8003a78:	40020010 	.word	0x40020010
 8003a7c:	40020028 	.word	0x40020028
 8003a80:	40020040 	.word	0x40020040
 8003a84:	40020058 	.word	0x40020058
 8003a88:	40020070 	.word	0x40020070
 8003a8c:	40020088 	.word	0x40020088
 8003a90:	400200a0 	.word	0x400200a0
 8003a94:	400200b8 	.word	0x400200b8
 8003a98:	40020410 	.word	0x40020410
 8003a9c:	40020428 	.word	0x40020428
 8003aa0:	40020440 	.word	0x40020440
 8003aa4:	40020458 	.word	0x40020458
 8003aa8:	40020470 	.word	0x40020470
 8003aac:	40020488 	.word	0x40020488
 8003ab0:	400204a0 	.word	0x400204a0
 8003ab4:	400204b8 	.word	0x400204b8
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 020a 	bic.w	r2, r2, #10
 8003ac6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8097 	beq.w	8003c10 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aea:	e091      	b.n	8003c10 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	2208      	movs	r2, #8
 8003af6:	409a      	lsls	r2, r3
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 8088 	beq.w	8003c12 <HAL_DMA_IRQHandler+0xe0e>
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 8082 	beq.w	8003c12 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a41      	ldr	r2, [pc, #260]	@ (8003c18 <HAL_DMA_IRQHandler+0xe14>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d04a      	beq.n	8003bae <HAL_DMA_IRQHandler+0xdaa>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a3f      	ldr	r2, [pc, #252]	@ (8003c1c <HAL_DMA_IRQHandler+0xe18>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d045      	beq.n	8003bae <HAL_DMA_IRQHandler+0xdaa>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a3e      	ldr	r2, [pc, #248]	@ (8003c20 <HAL_DMA_IRQHandler+0xe1c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d040      	beq.n	8003bae <HAL_DMA_IRQHandler+0xdaa>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a3c      	ldr	r2, [pc, #240]	@ (8003c24 <HAL_DMA_IRQHandler+0xe20>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d03b      	beq.n	8003bae <HAL_DMA_IRQHandler+0xdaa>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a3b      	ldr	r2, [pc, #236]	@ (8003c28 <HAL_DMA_IRQHandler+0xe24>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d036      	beq.n	8003bae <HAL_DMA_IRQHandler+0xdaa>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a39      	ldr	r2, [pc, #228]	@ (8003c2c <HAL_DMA_IRQHandler+0xe28>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d031      	beq.n	8003bae <HAL_DMA_IRQHandler+0xdaa>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a38      	ldr	r2, [pc, #224]	@ (8003c30 <HAL_DMA_IRQHandler+0xe2c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d02c      	beq.n	8003bae <HAL_DMA_IRQHandler+0xdaa>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a36      	ldr	r2, [pc, #216]	@ (8003c34 <HAL_DMA_IRQHandler+0xe30>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d027      	beq.n	8003bae <HAL_DMA_IRQHandler+0xdaa>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a35      	ldr	r2, [pc, #212]	@ (8003c38 <HAL_DMA_IRQHandler+0xe34>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d022      	beq.n	8003bae <HAL_DMA_IRQHandler+0xdaa>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a33      	ldr	r2, [pc, #204]	@ (8003c3c <HAL_DMA_IRQHandler+0xe38>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d01d      	beq.n	8003bae <HAL_DMA_IRQHandler+0xdaa>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a32      	ldr	r2, [pc, #200]	@ (8003c40 <HAL_DMA_IRQHandler+0xe3c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d018      	beq.n	8003bae <HAL_DMA_IRQHandler+0xdaa>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a30      	ldr	r2, [pc, #192]	@ (8003c44 <HAL_DMA_IRQHandler+0xe40>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d013      	beq.n	8003bae <HAL_DMA_IRQHandler+0xdaa>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a2f      	ldr	r2, [pc, #188]	@ (8003c48 <HAL_DMA_IRQHandler+0xe44>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d00e      	beq.n	8003bae <HAL_DMA_IRQHandler+0xdaa>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a2d      	ldr	r2, [pc, #180]	@ (8003c4c <HAL_DMA_IRQHandler+0xe48>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d009      	beq.n	8003bae <HAL_DMA_IRQHandler+0xdaa>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a2c      	ldr	r2, [pc, #176]	@ (8003c50 <HAL_DMA_IRQHandler+0xe4c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d004      	beq.n	8003bae <HAL_DMA_IRQHandler+0xdaa>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8003c54 <HAL_DMA_IRQHandler+0xe50>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d108      	bne.n	8003bc0 <HAL_DMA_IRQHandler+0xdbc>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 021c 	bic.w	r2, r2, #28
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	e007      	b.n	8003bd0 <HAL_DMA_IRQHandler+0xdcc>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 020e 	bic.w	r2, r2, #14
 8003bce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	2201      	movs	r2, #1
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	4798      	blx	r3
 8003c06:	e004      	b.n	8003c12 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003c08:	bf00      	nop
 8003c0a:	e002      	b.n	8003c12 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c0c:	bf00      	nop
 8003c0e:	e000      	b.n	8003c12 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c10:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c12:	3728      	adds	r7, #40	@ 0x28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40020010 	.word	0x40020010
 8003c1c:	40020028 	.word	0x40020028
 8003c20:	40020040 	.word	0x40020040
 8003c24:	40020058 	.word	0x40020058
 8003c28:	40020070 	.word	0x40020070
 8003c2c:	40020088 	.word	0x40020088
 8003c30:	400200a0 	.word	0x400200a0
 8003c34:	400200b8 	.word	0x400200b8
 8003c38:	40020410 	.word	0x40020410
 8003c3c:	40020428 	.word	0x40020428
 8003c40:	40020440 	.word	0x40020440
 8003c44:	40020458 	.word	0x40020458
 8003c48:	40020470 	.word	0x40020470
 8003c4c:	40020488 	.word	0x40020488
 8003c50:	400204a0 	.word	0x400204a0
 8003c54:	400204b8 	.word	0x400204b8

08003c58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a42      	ldr	r2, [pc, #264]	@ (8003d70 <DMA_CalcBaseAndBitshift+0x118>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d04a      	beq.n	8003d00 <DMA_CalcBaseAndBitshift+0xa8>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a41      	ldr	r2, [pc, #260]	@ (8003d74 <DMA_CalcBaseAndBitshift+0x11c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d045      	beq.n	8003d00 <DMA_CalcBaseAndBitshift+0xa8>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a3f      	ldr	r2, [pc, #252]	@ (8003d78 <DMA_CalcBaseAndBitshift+0x120>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d040      	beq.n	8003d00 <DMA_CalcBaseAndBitshift+0xa8>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a3e      	ldr	r2, [pc, #248]	@ (8003d7c <DMA_CalcBaseAndBitshift+0x124>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d03b      	beq.n	8003d00 <DMA_CalcBaseAndBitshift+0xa8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d80 <DMA_CalcBaseAndBitshift+0x128>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d036      	beq.n	8003d00 <DMA_CalcBaseAndBitshift+0xa8>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a3b      	ldr	r2, [pc, #236]	@ (8003d84 <DMA_CalcBaseAndBitshift+0x12c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d031      	beq.n	8003d00 <DMA_CalcBaseAndBitshift+0xa8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a39      	ldr	r2, [pc, #228]	@ (8003d88 <DMA_CalcBaseAndBitshift+0x130>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d02c      	beq.n	8003d00 <DMA_CalcBaseAndBitshift+0xa8>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a38      	ldr	r2, [pc, #224]	@ (8003d8c <DMA_CalcBaseAndBitshift+0x134>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d027      	beq.n	8003d00 <DMA_CalcBaseAndBitshift+0xa8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a36      	ldr	r2, [pc, #216]	@ (8003d90 <DMA_CalcBaseAndBitshift+0x138>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d022      	beq.n	8003d00 <DMA_CalcBaseAndBitshift+0xa8>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a35      	ldr	r2, [pc, #212]	@ (8003d94 <DMA_CalcBaseAndBitshift+0x13c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d01d      	beq.n	8003d00 <DMA_CalcBaseAndBitshift+0xa8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a33      	ldr	r2, [pc, #204]	@ (8003d98 <DMA_CalcBaseAndBitshift+0x140>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d018      	beq.n	8003d00 <DMA_CalcBaseAndBitshift+0xa8>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a32      	ldr	r2, [pc, #200]	@ (8003d9c <DMA_CalcBaseAndBitshift+0x144>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d013      	beq.n	8003d00 <DMA_CalcBaseAndBitshift+0xa8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a30      	ldr	r2, [pc, #192]	@ (8003da0 <DMA_CalcBaseAndBitshift+0x148>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00e      	beq.n	8003d00 <DMA_CalcBaseAndBitshift+0xa8>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a2f      	ldr	r2, [pc, #188]	@ (8003da4 <DMA_CalcBaseAndBitshift+0x14c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d009      	beq.n	8003d00 <DMA_CalcBaseAndBitshift+0xa8>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a2d      	ldr	r2, [pc, #180]	@ (8003da8 <DMA_CalcBaseAndBitshift+0x150>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d004      	beq.n	8003d00 <DMA_CalcBaseAndBitshift+0xa8>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a2c      	ldr	r2, [pc, #176]	@ (8003dac <DMA_CalcBaseAndBitshift+0x154>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d101      	bne.n	8003d04 <DMA_CalcBaseAndBitshift+0xac>
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <DMA_CalcBaseAndBitshift+0xae>
 8003d04:	2300      	movs	r3, #0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d024      	beq.n	8003d54 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	3b10      	subs	r3, #16
 8003d12:	4a27      	ldr	r2, [pc, #156]	@ (8003db0 <DMA_CalcBaseAndBitshift+0x158>)
 8003d14:	fba2 2303 	umull	r2, r3, r2, r3
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	4a24      	ldr	r2, [pc, #144]	@ (8003db4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003d24:	5cd3      	ldrb	r3, [r2, r3]
 8003d26:	461a      	mov	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d908      	bls.n	8003d44 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	4b1f      	ldr	r3, [pc, #124]	@ (8003db8 <DMA_CalcBaseAndBitshift+0x160>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	1d1a      	adds	r2, r3, #4
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d42:	e00d      	b.n	8003d60 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003db8 <DMA_CalcBaseAndBitshift+0x160>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d52:	e005      	b.n	8003d60 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	40020010 	.word	0x40020010
 8003d74:	40020028 	.word	0x40020028
 8003d78:	40020040 	.word	0x40020040
 8003d7c:	40020058 	.word	0x40020058
 8003d80:	40020070 	.word	0x40020070
 8003d84:	40020088 	.word	0x40020088
 8003d88:	400200a0 	.word	0x400200a0
 8003d8c:	400200b8 	.word	0x400200b8
 8003d90:	40020410 	.word	0x40020410
 8003d94:	40020428 	.word	0x40020428
 8003d98:	40020440 	.word	0x40020440
 8003d9c:	40020458 	.word	0x40020458
 8003da0:	40020470 	.word	0x40020470
 8003da4:	40020488 	.word	0x40020488
 8003da8:	400204a0 	.word	0x400204a0
 8003dac:	400204b8 	.word	0x400204b8
 8003db0:	aaaaaaab 	.word	0xaaaaaaab
 8003db4:	080093f0 	.word	0x080093f0
 8003db8:	fffffc00 	.word	0xfffffc00

08003dbc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d120      	bne.n	8003e12 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d858      	bhi.n	8003e8a <DMA_CheckFifoParam+0xce>
 8003dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003de0 <DMA_CheckFifoParam+0x24>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003df1 	.word	0x08003df1
 8003de4:	08003e03 	.word	0x08003e03
 8003de8:	08003df1 	.word	0x08003df1
 8003dec:	08003e8b 	.word	0x08003e8b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d048      	beq.n	8003e8e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e00:	e045      	b.n	8003e8e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e06:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e0a:	d142      	bne.n	8003e92 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e10:	e03f      	b.n	8003e92 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e1a:	d123      	bne.n	8003e64 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d838      	bhi.n	8003e96 <DMA_CheckFifoParam+0xda>
 8003e24:	a201      	add	r2, pc, #4	@ (adr r2, 8003e2c <DMA_CheckFifoParam+0x70>)
 8003e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2a:	bf00      	nop
 8003e2c:	08003e3d 	.word	0x08003e3d
 8003e30:	08003e43 	.word	0x08003e43
 8003e34:	08003e3d 	.word	0x08003e3d
 8003e38:	08003e55 	.word	0x08003e55
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
        break;
 8003e40:	e030      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d025      	beq.n	8003e9a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e52:	e022      	b.n	8003e9a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e58:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e5c:	d11f      	bne.n	8003e9e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e62:	e01c      	b.n	8003e9e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d902      	bls.n	8003e72 <DMA_CheckFifoParam+0xb6>
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d003      	beq.n	8003e78 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003e70:	e018      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	73fb      	strb	r3, [r7, #15]
        break;
 8003e76:	e015      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00e      	beq.n	8003ea2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	73fb      	strb	r3, [r7, #15]
    break;
 8003e88:	e00b      	b.n	8003ea2 <DMA_CheckFifoParam+0xe6>
        break;
 8003e8a:	bf00      	nop
 8003e8c:	e00a      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
        break;
 8003e8e:	bf00      	nop
 8003e90:	e008      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
        break;
 8003e92:	bf00      	nop
 8003e94:	e006      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
        break;
 8003e96:	bf00      	nop
 8003e98:	e004      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
        break;
 8003e9a:	bf00      	nop
 8003e9c:	e002      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
        break;
 8003e9e:	bf00      	nop
 8003ea0:	e000      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
    break;
 8003ea2:	bf00      	nop
    }
  }

  return status;
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop

08003eb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a38      	ldr	r2, [pc, #224]	@ (8003fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d022      	beq.n	8003f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a36      	ldr	r2, [pc, #216]	@ (8003fac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01d      	beq.n	8003f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a35      	ldr	r2, [pc, #212]	@ (8003fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d018      	beq.n	8003f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a33      	ldr	r2, [pc, #204]	@ (8003fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d013      	beq.n	8003f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a32      	ldr	r2, [pc, #200]	@ (8003fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00e      	beq.n	8003f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a30      	ldr	r2, [pc, #192]	@ (8003fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d009      	beq.n	8003f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a2f      	ldr	r2, [pc, #188]	@ (8003fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d004      	beq.n	8003f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8003fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d101      	bne.n	8003f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003f16:	2300      	movs	r3, #0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01a      	beq.n	8003f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	3b08      	subs	r3, #8
 8003f24:	4a28      	ldr	r2, [pc, #160]	@ (8003fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	091b      	lsrs	r3, r3, #4
 8003f2c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4b26      	ldr	r3, [pc, #152]	@ (8003fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	461a      	mov	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a24      	ldr	r2, [pc, #144]	@ (8003fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003f40:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f003 031f 	and.w	r3, r3, #31
 8003f48:	2201      	movs	r2, #1
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003f50:	e024      	b.n	8003f9c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	3b10      	subs	r3, #16
 8003f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8003fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f60:	091b      	lsrs	r3, r3, #4
 8003f62:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4a1c      	ldr	r2, [pc, #112]	@ (8003fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d806      	bhi.n	8003f7a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4a1b      	ldr	r2, [pc, #108]	@ (8003fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d902      	bls.n	8003f7a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	3308      	adds	r3, #8
 8003f78:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4b18      	ldr	r3, [pc, #96]	@ (8003fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	461a      	mov	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a16      	ldr	r2, [pc, #88]	@ (8003fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003f8c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	2201      	movs	r2, #1
 8003f96:	409a      	lsls	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f9c:	bf00      	nop
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	58025408 	.word	0x58025408
 8003fac:	5802541c 	.word	0x5802541c
 8003fb0:	58025430 	.word	0x58025430
 8003fb4:	58025444 	.word	0x58025444
 8003fb8:	58025458 	.word	0x58025458
 8003fbc:	5802546c 	.word	0x5802546c
 8003fc0:	58025480 	.word	0x58025480
 8003fc4:	58025494 	.word	0x58025494
 8003fc8:	cccccccd 	.word	0xcccccccd
 8003fcc:	16009600 	.word	0x16009600
 8003fd0:	58025880 	.word	0x58025880
 8003fd4:	aaaaaaab 	.word	0xaaaaaaab
 8003fd8:	400204b8 	.word	0x400204b8
 8003fdc:	4002040f 	.word	0x4002040f
 8003fe0:	10008200 	.word	0x10008200
 8003fe4:	40020880 	.word	0x40020880

08003fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d04a      	beq.n	8004094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2b08      	cmp	r3, #8
 8004002:	d847      	bhi.n	8004094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a25      	ldr	r2, [pc, #148]	@ (80040a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d022      	beq.n	8004054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a24      	ldr	r2, [pc, #144]	@ (80040a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d01d      	beq.n	8004054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a22      	ldr	r2, [pc, #136]	@ (80040a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d018      	beq.n	8004054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a21      	ldr	r2, [pc, #132]	@ (80040ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d013      	beq.n	8004054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a1f      	ldr	r2, [pc, #124]	@ (80040b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00e      	beq.n	8004054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a1e      	ldr	r2, [pc, #120]	@ (80040b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d009      	beq.n	8004054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a1c      	ldr	r2, [pc, #112]	@ (80040b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d004      	beq.n	8004054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a1b      	ldr	r2, [pc, #108]	@ (80040bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d101      	bne.n	8004058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004058:	2300      	movs	r3, #0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4b17      	ldr	r3, [pc, #92]	@ (80040c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004062:	4413      	add	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	461a      	mov	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a15      	ldr	r2, [pc, #84]	@ (80040c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004070:	671a      	str	r2, [r3, #112]	@ 0x70
 8004072:	e009      	b.n	8004088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4b14      	ldr	r3, [pc, #80]	@ (80040c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	461a      	mov	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a11      	ldr	r2, [pc, #68]	@ (80040cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004086:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3b01      	subs	r3, #1
 800408c:	2201      	movs	r2, #1
 800408e:	409a      	lsls	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	58025408 	.word	0x58025408
 80040a4:	5802541c 	.word	0x5802541c
 80040a8:	58025430 	.word	0x58025430
 80040ac:	58025444 	.word	0x58025444
 80040b0:	58025458 	.word	0x58025458
 80040b4:	5802546c 	.word	0x5802546c
 80040b8:	58025480 	.word	0x58025480
 80040bc:	58025494 	.word	0x58025494
 80040c0:	1600963f 	.word	0x1600963f
 80040c4:	58025940 	.word	0x58025940
 80040c8:	1000823f 	.word	0x1000823f
 80040cc:	40020940 	.word	0x40020940

080040d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b089      	sub	sp, #36	@ 0x24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040da:	2300      	movs	r3, #0
 80040dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80040de:	4b89      	ldr	r3, [pc, #548]	@ (8004304 <HAL_GPIO_Init+0x234>)
 80040e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040e2:	e194      	b.n	800440e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	2101      	movs	r1, #1
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	fa01 f303 	lsl.w	r3, r1, r3
 80040f0:	4013      	ands	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 8186 	beq.w	8004408 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	2b01      	cmp	r3, #1
 8004106:	d005      	beq.n	8004114 <HAL_GPIO_Init+0x44>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d130      	bne.n	8004176 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	2203      	movs	r2, #3
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4013      	ands	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4313      	orrs	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800414a:	2201      	movs	r2, #1
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43db      	mvns	r3, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4013      	ands	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	091b      	lsrs	r3, r3, #4
 8004160:	f003 0201 	and.w	r2, r3, #1
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4313      	orrs	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	2b03      	cmp	r3, #3
 8004180:	d017      	beq.n	80041b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	2203      	movs	r2, #3
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	43db      	mvns	r3, r3
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	4013      	ands	r3, r2
 8004198:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d123      	bne.n	8004206 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	08da      	lsrs	r2, r3, #3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3208      	adds	r2, #8
 80041c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	220f      	movs	r2, #15
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43db      	mvns	r3, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	4013      	ands	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	691a      	ldr	r2, [r3, #16]
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	08da      	lsrs	r2, r3, #3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3208      	adds	r2, #8
 8004200:	69b9      	ldr	r1, [r7, #24]
 8004202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	2203      	movs	r2, #3
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	4013      	ands	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f003 0203 	and.w	r2, r3, #3
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4313      	orrs	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 80e0 	beq.w	8004408 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004248:	4b2f      	ldr	r3, [pc, #188]	@ (8004308 <HAL_GPIO_Init+0x238>)
 800424a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800424e:	4a2e      	ldr	r2, [pc, #184]	@ (8004308 <HAL_GPIO_Init+0x238>)
 8004250:	f043 0302 	orr.w	r3, r3, #2
 8004254:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004258:	4b2b      	ldr	r3, [pc, #172]	@ (8004308 <HAL_GPIO_Init+0x238>)
 800425a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004266:	4a29      	ldr	r2, [pc, #164]	@ (800430c <HAL_GPIO_Init+0x23c>)
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	089b      	lsrs	r3, r3, #2
 800426c:	3302      	adds	r3, #2
 800426e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	220f      	movs	r2, #15
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43db      	mvns	r3, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4013      	ands	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a20      	ldr	r2, [pc, #128]	@ (8004310 <HAL_GPIO_Init+0x240>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d052      	beq.n	8004338 <HAL_GPIO_Init+0x268>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a1f      	ldr	r2, [pc, #124]	@ (8004314 <HAL_GPIO_Init+0x244>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d031      	beq.n	80042fe <HAL_GPIO_Init+0x22e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a1e      	ldr	r2, [pc, #120]	@ (8004318 <HAL_GPIO_Init+0x248>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d02b      	beq.n	80042fa <HAL_GPIO_Init+0x22a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a1d      	ldr	r2, [pc, #116]	@ (800431c <HAL_GPIO_Init+0x24c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d025      	beq.n	80042f6 <HAL_GPIO_Init+0x226>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004320 <HAL_GPIO_Init+0x250>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d01f      	beq.n	80042f2 <HAL_GPIO_Init+0x222>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004324 <HAL_GPIO_Init+0x254>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d019      	beq.n	80042ee <HAL_GPIO_Init+0x21e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004328 <HAL_GPIO_Init+0x258>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d013      	beq.n	80042ea <HAL_GPIO_Init+0x21a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a19      	ldr	r2, [pc, #100]	@ (800432c <HAL_GPIO_Init+0x25c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00d      	beq.n	80042e6 <HAL_GPIO_Init+0x216>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a18      	ldr	r2, [pc, #96]	@ (8004330 <HAL_GPIO_Init+0x260>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d007      	beq.n	80042e2 <HAL_GPIO_Init+0x212>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a17      	ldr	r2, [pc, #92]	@ (8004334 <HAL_GPIO_Init+0x264>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d101      	bne.n	80042de <HAL_GPIO_Init+0x20e>
 80042da:	2309      	movs	r3, #9
 80042dc:	e02d      	b.n	800433a <HAL_GPIO_Init+0x26a>
 80042de:	230a      	movs	r3, #10
 80042e0:	e02b      	b.n	800433a <HAL_GPIO_Init+0x26a>
 80042e2:	2308      	movs	r3, #8
 80042e4:	e029      	b.n	800433a <HAL_GPIO_Init+0x26a>
 80042e6:	2307      	movs	r3, #7
 80042e8:	e027      	b.n	800433a <HAL_GPIO_Init+0x26a>
 80042ea:	2306      	movs	r3, #6
 80042ec:	e025      	b.n	800433a <HAL_GPIO_Init+0x26a>
 80042ee:	2305      	movs	r3, #5
 80042f0:	e023      	b.n	800433a <HAL_GPIO_Init+0x26a>
 80042f2:	2304      	movs	r3, #4
 80042f4:	e021      	b.n	800433a <HAL_GPIO_Init+0x26a>
 80042f6:	2303      	movs	r3, #3
 80042f8:	e01f      	b.n	800433a <HAL_GPIO_Init+0x26a>
 80042fa:	2302      	movs	r3, #2
 80042fc:	e01d      	b.n	800433a <HAL_GPIO_Init+0x26a>
 80042fe:	2301      	movs	r3, #1
 8004300:	e01b      	b.n	800433a <HAL_GPIO_Init+0x26a>
 8004302:	bf00      	nop
 8004304:	58000080 	.word	0x58000080
 8004308:	58024400 	.word	0x58024400
 800430c:	58000400 	.word	0x58000400
 8004310:	58020000 	.word	0x58020000
 8004314:	58020400 	.word	0x58020400
 8004318:	58020800 	.word	0x58020800
 800431c:	58020c00 	.word	0x58020c00
 8004320:	58021000 	.word	0x58021000
 8004324:	58021400 	.word	0x58021400
 8004328:	58021800 	.word	0x58021800
 800432c:	58021c00 	.word	0x58021c00
 8004330:	58022000 	.word	0x58022000
 8004334:	58022400 	.word	0x58022400
 8004338:	2300      	movs	r3, #0
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	f002 0203 	and.w	r2, r2, #3
 8004340:	0092      	lsls	r2, r2, #2
 8004342:	4093      	lsls	r3, r2
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4313      	orrs	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800434a:	4938      	ldr	r1, [pc, #224]	@ (800442c <HAL_GPIO_Init+0x35c>)
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	089b      	lsrs	r3, r3, #2
 8004350:	3302      	adds	r3, #2
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	43db      	mvns	r3, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4013      	ands	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800437e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	43db      	mvns	r3, r3
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	4013      	ands	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80043ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	43db      	mvns	r3, r3
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4013      	ands	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	43db      	mvns	r3, r3
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4013      	ands	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	3301      	adds	r3, #1
 800440c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	f47f ae63 	bne.w	80040e4 <HAL_GPIO_Init+0x14>
  }
}
 800441e:	bf00      	nop
 8004420:	bf00      	nop
 8004422:	3724      	adds	r7, #36	@ 0x24
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	58000400 	.word	0x58000400

08004430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	807b      	strh	r3, [r7, #2]
 800443c:	4613      	mov	r3, r2
 800443e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004440:	787b      	ldrb	r3, [r7, #1]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004446:	887a      	ldrh	r2, [r7, #2]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800444c:	e003      	b.n	8004456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800444e:	887b      	ldrh	r3, [r7, #2]
 8004450:	041a      	lsls	r2, r3, #16
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	619a      	str	r2, [r3, #24]
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
	...

08004464 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800446c:	4b19      	ldr	r3, [pc, #100]	@ (80044d4 <HAL_PWREx_ConfigSupply+0x70>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b04      	cmp	r3, #4
 8004476:	d00a      	beq.n	800448e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004478:	4b16      	ldr	r3, [pc, #88]	@ (80044d4 <HAL_PWREx_ConfigSupply+0x70>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	429a      	cmp	r2, r3
 8004484:	d001      	beq.n	800448a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e01f      	b.n	80044ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	e01d      	b.n	80044ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800448e:	4b11      	ldr	r3, [pc, #68]	@ (80044d4 <HAL_PWREx_ConfigSupply+0x70>)
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f023 0207 	bic.w	r2, r3, #7
 8004496:	490f      	ldr	r1, [pc, #60]	@ (80044d4 <HAL_PWREx_ConfigSupply+0x70>)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4313      	orrs	r3, r2
 800449c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800449e:	f7fd f881 	bl	80015a4 <HAL_GetTick>
 80044a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044a4:	e009      	b.n	80044ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80044a6:	f7fd f87d 	bl	80015a4 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044b4:	d901      	bls.n	80044ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e007      	b.n	80044ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044ba:	4b06      	ldr	r3, [pc, #24]	@ (80044d4 <HAL_PWREx_ConfigSupply+0x70>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044c6:	d1ee      	bne.n	80044a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	58024800 	.word	0x58024800

080044d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08c      	sub	sp, #48	@ 0x30
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d102      	bne.n	80044ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	f000 bc48 	b.w	8004d7c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8088 	beq.w	800460a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044fa:	4b99      	ldr	r3, [pc, #612]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004502:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004504:	4b96      	ldr	r3, [pc, #600]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 8004506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004508:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800450a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450c:	2b10      	cmp	r3, #16
 800450e:	d007      	beq.n	8004520 <HAL_RCC_OscConfig+0x48>
 8004510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004512:	2b18      	cmp	r3, #24
 8004514:	d111      	bne.n	800453a <HAL_RCC_OscConfig+0x62>
 8004516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d10c      	bne.n	800453a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004520:	4b8f      	ldr	r3, [pc, #572]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d06d      	beq.n	8004608 <HAL_RCC_OscConfig+0x130>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d169      	bne.n	8004608 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	f000 bc21 	b.w	8004d7c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004542:	d106      	bne.n	8004552 <HAL_RCC_OscConfig+0x7a>
 8004544:	4b86      	ldr	r3, [pc, #536]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a85      	ldr	r2, [pc, #532]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 800454a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	e02e      	b.n	80045b0 <HAL_RCC_OscConfig+0xd8>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10c      	bne.n	8004574 <HAL_RCC_OscConfig+0x9c>
 800455a:	4b81      	ldr	r3, [pc, #516]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a80      	ldr	r2, [pc, #512]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 8004560:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	4b7e      	ldr	r3, [pc, #504]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a7d      	ldr	r2, [pc, #500]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 800456c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	e01d      	b.n	80045b0 <HAL_RCC_OscConfig+0xd8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800457c:	d10c      	bne.n	8004598 <HAL_RCC_OscConfig+0xc0>
 800457e:	4b78      	ldr	r3, [pc, #480]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a77      	ldr	r2, [pc, #476]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 8004584:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	4b75      	ldr	r3, [pc, #468]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a74      	ldr	r2, [pc, #464]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 8004590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e00b      	b.n	80045b0 <HAL_RCC_OscConfig+0xd8>
 8004598:	4b71      	ldr	r3, [pc, #452]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a70      	ldr	r2, [pc, #448]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 800459e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	4b6e      	ldr	r3, [pc, #440]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a6d      	ldr	r2, [pc, #436]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 80045aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d013      	beq.n	80045e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b8:	f7fc fff4 	bl	80015a4 <HAL_GetTick>
 80045bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c0:	f7fc fff0 	bl	80015a4 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b64      	cmp	r3, #100	@ 0x64
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e3d4      	b.n	8004d7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045d2:	4b63      	ldr	r3, [pc, #396]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f0      	beq.n	80045c0 <HAL_RCC_OscConfig+0xe8>
 80045de:	e014      	b.n	800460a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7fc ffe0 	bl	80015a4 <HAL_GetTick>
 80045e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e8:	f7fc ffdc 	bl	80015a4 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	@ 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e3c0      	b.n	8004d7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045fa:	4b59      	ldr	r3, [pc, #356]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f0      	bne.n	80045e8 <HAL_RCC_OscConfig+0x110>
 8004606:	e000      	b.n	800460a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 80ca 	beq.w	80047ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004618:	4b51      	ldr	r3, [pc, #324]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004620:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004622:	4b4f      	ldr	r3, [pc, #316]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 8004624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004626:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <HAL_RCC_OscConfig+0x166>
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	2b18      	cmp	r3, #24
 8004632:	d156      	bne.n	80046e2 <HAL_RCC_OscConfig+0x20a>
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d151      	bne.n	80046e2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800463e:	4b48      	ldr	r3, [pc, #288]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <HAL_RCC_OscConfig+0x17e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e392      	b.n	8004d7c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004656:	4b42      	ldr	r3, [pc, #264]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f023 0219 	bic.w	r2, r3, #25
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	493f      	ldr	r1, [pc, #252]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 8004664:	4313      	orrs	r3, r2
 8004666:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004668:	f7fc ff9c 	bl	80015a4 <HAL_GetTick>
 800466c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004670:	f7fc ff98 	bl	80015a4 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e37c      	b.n	8004d7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004682:	4b37      	ldr	r3, [pc, #220]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f0      	beq.n	8004670 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468e:	f7fc ff95 	bl	80015bc <HAL_GetREVID>
 8004692:	4603      	mov	r3, r0
 8004694:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004698:	4293      	cmp	r3, r2
 800469a:	d817      	bhi.n	80046cc <HAL_RCC_OscConfig+0x1f4>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	2b40      	cmp	r3, #64	@ 0x40
 80046a2:	d108      	bne.n	80046b6 <HAL_RCC_OscConfig+0x1de>
 80046a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80046ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 80046ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046b2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046b4:	e07a      	b.n	80047ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b6:	4b2a      	ldr	r3, [pc, #168]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	031b      	lsls	r3, r3, #12
 80046c4:	4926      	ldr	r1, [pc, #152]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046ca:	e06f      	b.n	80047ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046cc:	4b24      	ldr	r3, [pc, #144]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	061b      	lsls	r3, r3, #24
 80046da:	4921      	ldr	r1, [pc, #132]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046e0:	e064      	b.n	80047ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d047      	beq.n	800477a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 0219 	bic.w	r2, r3, #25
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	491a      	ldr	r1, [pc, #104]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7fc ff52 	bl	80015a4 <HAL_GetTick>
 8004700:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004704:	f7fc ff4e 	bl	80015a4 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e332      	b.n	8004d7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004716:	4b12      	ldr	r3, [pc, #72]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004722:	f7fc ff4b 	bl	80015bc <HAL_GetREVID>
 8004726:	4603      	mov	r3, r0
 8004728:	f241 0203 	movw	r2, #4099	@ 0x1003
 800472c:	4293      	cmp	r3, r2
 800472e:	d819      	bhi.n	8004764 <HAL_RCC_OscConfig+0x28c>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	2b40      	cmp	r3, #64	@ 0x40
 8004736:	d108      	bne.n	800474a <HAL_RCC_OscConfig+0x272>
 8004738:	4b09      	ldr	r3, [pc, #36]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004740:	4a07      	ldr	r2, [pc, #28]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 8004742:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004746:	6053      	str	r3, [r2, #4]
 8004748:	e030      	b.n	80047ac <HAL_RCC_OscConfig+0x2d4>
 800474a:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	031b      	lsls	r3, r3, #12
 8004758:	4901      	ldr	r1, [pc, #4]	@ (8004760 <HAL_RCC_OscConfig+0x288>)
 800475a:	4313      	orrs	r3, r2
 800475c:	604b      	str	r3, [r1, #4]
 800475e:	e025      	b.n	80047ac <HAL_RCC_OscConfig+0x2d4>
 8004760:	58024400 	.word	0x58024400
 8004764:	4b9a      	ldr	r3, [pc, #616]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	061b      	lsls	r3, r3, #24
 8004772:	4997      	ldr	r1, [pc, #604]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 8004774:	4313      	orrs	r3, r2
 8004776:	604b      	str	r3, [r1, #4]
 8004778:	e018      	b.n	80047ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800477a:	4b95      	ldr	r3, [pc, #596]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a94      	ldr	r2, [pc, #592]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 8004780:	f023 0301 	bic.w	r3, r3, #1
 8004784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004786:	f7fc ff0d 	bl	80015a4 <HAL_GetTick>
 800478a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800478e:	f7fc ff09 	bl	80015a4 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e2ed      	b.n	8004d7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047a0:	4b8b      	ldr	r3, [pc, #556]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f0      	bne.n	800478e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80a9 	beq.w	800490c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ba:	4b85      	ldr	r3, [pc, #532]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047c4:	4b82      	ldr	r3, [pc, #520]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 80047c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d007      	beq.n	80047e0 <HAL_RCC_OscConfig+0x308>
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b18      	cmp	r3, #24
 80047d4:	d13a      	bne.n	800484c <HAL_RCC_OscConfig+0x374>
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d135      	bne.n	800484c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047e0:	4b7b      	ldr	r3, [pc, #492]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_RCC_OscConfig+0x320>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	2b80      	cmp	r3, #128	@ 0x80
 80047f2:	d001      	beq.n	80047f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e2c1      	b.n	8004d7c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047f8:	f7fc fee0 	bl	80015bc <HAL_GetREVID>
 80047fc:	4603      	mov	r3, r0
 80047fe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004802:	4293      	cmp	r3, r2
 8004804:	d817      	bhi.n	8004836 <HAL_RCC_OscConfig+0x35e>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	2b20      	cmp	r3, #32
 800480c:	d108      	bne.n	8004820 <HAL_RCC_OscConfig+0x348>
 800480e:	4b70      	ldr	r3, [pc, #448]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004816:	4a6e      	ldr	r2, [pc, #440]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 8004818:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800481c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800481e:	e075      	b.n	800490c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004820:	4b6b      	ldr	r3, [pc, #428]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	069b      	lsls	r3, r3, #26
 800482e:	4968      	ldr	r1, [pc, #416]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 8004830:	4313      	orrs	r3, r2
 8004832:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004834:	e06a      	b.n	800490c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004836:	4b66      	ldr	r3, [pc, #408]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	061b      	lsls	r3, r3, #24
 8004844:	4962      	ldr	r1, [pc, #392]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 8004846:	4313      	orrs	r3, r2
 8004848:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800484a:	e05f      	b.n	800490c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d042      	beq.n	80048da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004854:	4b5e      	ldr	r3, [pc, #376]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a5d      	ldr	r2, [pc, #372]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 800485a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800485e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7fc fea0 	bl	80015a4 <HAL_GetTick>
 8004864:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004868:	f7fc fe9c 	bl	80015a4 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e280      	b.n	8004d7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800487a:	4b55      	ldr	r3, [pc, #340]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004886:	f7fc fe99 	bl	80015bc <HAL_GetREVID>
 800488a:	4603      	mov	r3, r0
 800488c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004890:	4293      	cmp	r3, r2
 8004892:	d817      	bhi.n	80048c4 <HAL_RCC_OscConfig+0x3ec>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	2b20      	cmp	r3, #32
 800489a:	d108      	bne.n	80048ae <HAL_RCC_OscConfig+0x3d6>
 800489c:	4b4c      	ldr	r3, [pc, #304]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80048a4:	4a4a      	ldr	r2, [pc, #296]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 80048a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048aa:	6053      	str	r3, [r2, #4]
 80048ac:	e02e      	b.n	800490c <HAL_RCC_OscConfig+0x434>
 80048ae:	4b48      	ldr	r3, [pc, #288]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	069b      	lsls	r3, r3, #26
 80048bc:	4944      	ldr	r1, [pc, #272]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	604b      	str	r3, [r1, #4]
 80048c2:	e023      	b.n	800490c <HAL_RCC_OscConfig+0x434>
 80048c4:	4b42      	ldr	r3, [pc, #264]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	061b      	lsls	r3, r3, #24
 80048d2:	493f      	ldr	r1, [pc, #252]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60cb      	str	r3, [r1, #12]
 80048d8:	e018      	b.n	800490c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80048da:	4b3d      	ldr	r3, [pc, #244]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a3c      	ldr	r2, [pc, #240]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 80048e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e6:	f7fc fe5d 	bl	80015a4 <HAL_GetTick>
 80048ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048ee:	f7fc fe59 	bl	80015a4 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e23d      	b.n	8004d7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004900:	4b33      	ldr	r3, [pc, #204]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1f0      	bne.n	80048ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b00      	cmp	r3, #0
 8004916:	d036      	beq.n	8004986 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d019      	beq.n	8004954 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004920:	4b2b      	ldr	r3, [pc, #172]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 8004922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004924:	4a2a      	ldr	r2, [pc, #168]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 8004926:	f043 0301 	orr.w	r3, r3, #1
 800492a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492c:	f7fc fe3a 	bl	80015a4 <HAL_GetTick>
 8004930:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004934:	f7fc fe36 	bl	80015a4 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e21a      	b.n	8004d7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004946:	4b22      	ldr	r3, [pc, #136]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 8004948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f0      	beq.n	8004934 <HAL_RCC_OscConfig+0x45c>
 8004952:	e018      	b.n	8004986 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004954:	4b1e      	ldr	r3, [pc, #120]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 8004956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004958:	4a1d      	ldr	r2, [pc, #116]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 800495a:	f023 0301 	bic.w	r3, r3, #1
 800495e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004960:	f7fc fe20 	bl	80015a4 <HAL_GetTick>
 8004964:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004968:	f7fc fe1c 	bl	80015a4 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e200      	b.n	8004d7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800497a:	4b15      	ldr	r3, [pc, #84]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 800497c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b00      	cmp	r3, #0
 8004990:	d039      	beq.n	8004a06 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d01c      	beq.n	80049d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800499a:	4b0d      	ldr	r3, [pc, #52]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a0c      	ldr	r2, [pc, #48]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 80049a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80049a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049a6:	f7fc fdfd 	bl	80015a4 <HAL_GetTick>
 80049aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049ae:	f7fc fdf9 	bl	80015a4 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e1dd      	b.n	8004d7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049c0:	4b03      	ldr	r3, [pc, #12]	@ (80049d0 <HAL_RCC_OscConfig+0x4f8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f0      	beq.n	80049ae <HAL_RCC_OscConfig+0x4d6>
 80049cc:	e01b      	b.n	8004a06 <HAL_RCC_OscConfig+0x52e>
 80049ce:	bf00      	nop
 80049d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049d4:	4b9b      	ldr	r3, [pc, #620]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a9a      	ldr	r2, [pc, #616]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 80049da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049e0:	f7fc fde0 	bl	80015a4 <HAL_GetTick>
 80049e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049e8:	f7fc fddc 	bl	80015a4 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e1c0      	b.n	8004d7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049fa:	4b92      	ldr	r3, [pc, #584]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f0      	bne.n	80049e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 8081 	beq.w	8004b16 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a14:	4b8c      	ldr	r3, [pc, #560]	@ (8004c48 <HAL_RCC_OscConfig+0x770>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a8b      	ldr	r2, [pc, #556]	@ (8004c48 <HAL_RCC_OscConfig+0x770>)
 8004a1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a20:	f7fc fdc0 	bl	80015a4 <HAL_GetTick>
 8004a24:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a28:	f7fc fdbc 	bl	80015a4 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b64      	cmp	r3, #100	@ 0x64
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e1a0      	b.n	8004d7c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a3a:	4b83      	ldr	r3, [pc, #524]	@ (8004c48 <HAL_RCC_OscConfig+0x770>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d106      	bne.n	8004a5c <HAL_RCC_OscConfig+0x584>
 8004a4e:	4b7d      	ldr	r3, [pc, #500]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a52:	4a7c      	ldr	r2, [pc, #496]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a5a:	e02d      	b.n	8004ab8 <HAL_RCC_OscConfig+0x5e0>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10c      	bne.n	8004a7e <HAL_RCC_OscConfig+0x5a6>
 8004a64:	4b77      	ldr	r3, [pc, #476]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a68:	4a76      	ldr	r2, [pc, #472]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004a6a:	f023 0301 	bic.w	r3, r3, #1
 8004a6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a70:	4b74      	ldr	r3, [pc, #464]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a74:	4a73      	ldr	r2, [pc, #460]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004a76:	f023 0304 	bic.w	r3, r3, #4
 8004a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a7c:	e01c      	b.n	8004ab8 <HAL_RCC_OscConfig+0x5e0>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b05      	cmp	r3, #5
 8004a84:	d10c      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x5c8>
 8004a86:	4b6f      	ldr	r3, [pc, #444]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a8a:	4a6e      	ldr	r2, [pc, #440]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004a8c:	f043 0304 	orr.w	r3, r3, #4
 8004a90:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a92:	4b6c      	ldr	r3, [pc, #432]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a96:	4a6b      	ldr	r2, [pc, #428]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a9e:	e00b      	b.n	8004ab8 <HAL_RCC_OscConfig+0x5e0>
 8004aa0:	4b68      	ldr	r3, [pc, #416]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa4:	4a67      	ldr	r2, [pc, #412]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004aa6:	f023 0301 	bic.w	r3, r3, #1
 8004aaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aac:	4b65      	ldr	r3, [pc, #404]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab0:	4a64      	ldr	r2, [pc, #400]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004ab2:	f023 0304 	bic.w	r3, r3, #4
 8004ab6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d015      	beq.n	8004aec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac0:	f7fc fd70 	bl	80015a4 <HAL_GetTick>
 8004ac4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ac6:	e00a      	b.n	8004ade <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac8:	f7fc fd6c 	bl	80015a4 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e14e      	b.n	8004d7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ade:	4b59      	ldr	r3, [pc, #356]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0ee      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x5f0>
 8004aea:	e014      	b.n	8004b16 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aec:	f7fc fd5a 	bl	80015a4 <HAL_GetTick>
 8004af0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004af2:	e00a      	b.n	8004b0a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af4:	f7fc fd56 	bl	80015a4 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e138      	b.n	8004d7c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b0a:	4b4e      	ldr	r3, [pc, #312]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1ee      	bne.n	8004af4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 812d 	beq.w	8004d7a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b20:	4b48      	ldr	r3, [pc, #288]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b28:	2b18      	cmp	r3, #24
 8004b2a:	f000 80bd 	beq.w	8004ca8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	f040 809e 	bne.w	8004c74 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b38:	4b42      	ldr	r3, [pc, #264]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a41      	ldr	r2, [pc, #260]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004b3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7fc fd2e 	bl	80015a4 <HAL_GetTick>
 8004b48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b4c:	f7fc fd2a 	bl	80015a4 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e10e      	b.n	8004d7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b5e:	4b39      	ldr	r3, [pc, #228]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f0      	bne.n	8004b4c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b6a:	4b36      	ldr	r3, [pc, #216]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004b6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b6e:	4b37      	ldr	r3, [pc, #220]	@ (8004c4c <HAL_RCC_OscConfig+0x774>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b7a:	0112      	lsls	r2, r2, #4
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	4931      	ldr	r1, [pc, #196]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b92:	3b01      	subs	r3, #1
 8004b94:	025b      	lsls	r3, r3, #9
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	041b      	lsls	r3, r3, #16
 8004ba2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bac:	3b01      	subs	r3, #1
 8004bae:	061b      	lsls	r3, r3, #24
 8004bb0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004bb4:	4923      	ldr	r1, [pc, #140]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004bba:	4b22      	ldr	r3, [pc, #136]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbe:	4a21      	ldr	r2, [pc, #132]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004bc0:	f023 0301 	bic.w	r3, r3, #1
 8004bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004bc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bca:	4b21      	ldr	r3, [pc, #132]	@ (8004c50 <HAL_RCC_OscConfig+0x778>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004bd2:	00d2      	lsls	r2, r2, #3
 8004bd4:	491b      	ldr	r1, [pc, #108]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004bda:	4b1a      	ldr	r3, [pc, #104]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bde:	f023 020c 	bic.w	r2, r3, #12
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	4917      	ldr	r1, [pc, #92]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004bec:	4b15      	ldr	r3, [pc, #84]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf0:	f023 0202 	bic.w	r2, r3, #2
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf8:	4912      	ldr	r1, [pc, #72]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004bfe:	4b11      	ldr	r3, [pc, #68]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c02:	4a10      	ldr	r2, [pc, #64]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c16:	4b0b      	ldr	r3, [pc, #44]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004c1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004c22:	4b08      	ldr	r3, [pc, #32]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c26:	4a07      	ldr	r2, [pc, #28]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004c28:	f043 0301 	orr.w	r3, r3, #1
 8004c2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c2e:	4b05      	ldr	r3, [pc, #20]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a04      	ldr	r2, [pc, #16]	@ (8004c44 <HAL_RCC_OscConfig+0x76c>)
 8004c34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3a:	f7fc fcb3 	bl	80015a4 <HAL_GetTick>
 8004c3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c40:	e011      	b.n	8004c66 <HAL_RCC_OscConfig+0x78e>
 8004c42:	bf00      	nop
 8004c44:	58024400 	.word	0x58024400
 8004c48:	58024800 	.word	0x58024800
 8004c4c:	fffffc0c 	.word	0xfffffc0c
 8004c50:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c54:	f7fc fca6 	bl	80015a4 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e08a      	b.n	8004d7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c66:	4b47      	ldr	r3, [pc, #284]	@ (8004d84 <HAL_RCC_OscConfig+0x8ac>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCC_OscConfig+0x77c>
 8004c72:	e082      	b.n	8004d7a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c74:	4b43      	ldr	r3, [pc, #268]	@ (8004d84 <HAL_RCC_OscConfig+0x8ac>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a42      	ldr	r2, [pc, #264]	@ (8004d84 <HAL_RCC_OscConfig+0x8ac>)
 8004c7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7fc fc90 	bl	80015a4 <HAL_GetTick>
 8004c84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c88:	f7fc fc8c 	bl	80015a4 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e070      	b.n	8004d7c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8004d84 <HAL_RCC_OscConfig+0x8ac>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x7b0>
 8004ca6:	e068      	b.n	8004d7a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ca8:	4b36      	ldr	r3, [pc, #216]	@ (8004d84 <HAL_RCC_OscConfig+0x8ac>)
 8004caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004cae:	4b35      	ldr	r3, [pc, #212]	@ (8004d84 <HAL_RCC_OscConfig+0x8ac>)
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d031      	beq.n	8004d20 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f003 0203 	and.w	r2, r3, #3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d12a      	bne.n	8004d20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	091b      	lsrs	r3, r3, #4
 8004cce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d122      	bne.n	8004d20 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d11a      	bne.n	8004d20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	0a5b      	lsrs	r3, r3, #9
 8004cee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d111      	bne.n	8004d20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	0c1b      	lsrs	r3, r3, #16
 8004d00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d108      	bne.n	8004d20 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	0e1b      	lsrs	r3, r3, #24
 8004d12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e02b      	b.n	8004d7c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004d24:	4b17      	ldr	r3, [pc, #92]	@ (8004d84 <HAL_RCC_OscConfig+0x8ac>)
 8004d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d28:	08db      	lsrs	r3, r3, #3
 8004d2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d2e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d01f      	beq.n	8004d7a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004d3a:	4b12      	ldr	r3, [pc, #72]	@ (8004d84 <HAL_RCC_OscConfig+0x8ac>)
 8004d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3e:	4a11      	ldr	r2, [pc, #68]	@ (8004d84 <HAL_RCC_OscConfig+0x8ac>)
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d46:	f7fc fc2d 	bl	80015a4 <HAL_GetTick>
 8004d4a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004d4c:	bf00      	nop
 8004d4e:	f7fc fc29 	bl	80015a4 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d0f9      	beq.n	8004d4e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d84 <HAL_RCC_OscConfig+0x8ac>)
 8004d5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d88 <HAL_RCC_OscConfig+0x8b0>)
 8004d60:	4013      	ands	r3, r2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d66:	00d2      	lsls	r2, r2, #3
 8004d68:	4906      	ldr	r1, [pc, #24]	@ (8004d84 <HAL_RCC_OscConfig+0x8ac>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004d6e:	4b05      	ldr	r3, [pc, #20]	@ (8004d84 <HAL_RCC_OscConfig+0x8ac>)
 8004d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d72:	4a04      	ldr	r2, [pc, #16]	@ (8004d84 <HAL_RCC_OscConfig+0x8ac>)
 8004d74:	f043 0301 	orr.w	r3, r3, #1
 8004d78:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3730      	adds	r7, #48	@ 0x30
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	58024400 	.word	0x58024400
 8004d88:	ffff0007 	.word	0xffff0007

08004d8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e19c      	b.n	80050da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004da0:	4b8a      	ldr	r3, [pc, #552]	@ (8004fcc <HAL_RCC_ClockConfig+0x240>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d910      	bls.n	8004dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dae:	4b87      	ldr	r3, [pc, #540]	@ (8004fcc <HAL_RCC_ClockConfig+0x240>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 020f 	bic.w	r2, r3, #15
 8004db6:	4985      	ldr	r1, [pc, #532]	@ (8004fcc <HAL_RCC_ClockConfig+0x240>)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dbe:	4b83      	ldr	r3, [pc, #524]	@ (8004fcc <HAL_RCC_ClockConfig+0x240>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d001      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e184      	b.n	80050da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d010      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	4b7b      	ldr	r3, [pc, #492]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d908      	bls.n	8004dfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004dec:	4b78      	ldr	r3, [pc, #480]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	4975      	ldr	r1, [pc, #468]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d010      	beq.n	8004e2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695a      	ldr	r2, [r3, #20]
 8004e0e:	4b70      	ldr	r3, [pc, #448]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d908      	bls.n	8004e2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e1a:	4b6d      	ldr	r3, [pc, #436]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	496a      	ldr	r1, [pc, #424]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d010      	beq.n	8004e5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699a      	ldr	r2, [r3, #24]
 8004e3c:	4b64      	ldr	r3, [pc, #400]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d908      	bls.n	8004e5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e48:	4b61      	ldr	r3, [pc, #388]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	495e      	ldr	r1, [pc, #376]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d010      	beq.n	8004e88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69da      	ldr	r2, [r3, #28]
 8004e6a:	4b59      	ldr	r3, [pc, #356]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d908      	bls.n	8004e88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e76:	4b56      	ldr	r3, [pc, #344]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	4953      	ldr	r1, [pc, #332]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d010      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	4b4d      	ldr	r3, [pc, #308]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d908      	bls.n	8004eb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ea4:	4b4a      	ldr	r3, [pc, #296]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	f023 020f 	bic.w	r2, r3, #15
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	4947      	ldr	r1, [pc, #284]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d055      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ec2:	4b43      	ldr	r3, [pc, #268]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	4940      	ldr	r1, [pc, #256]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d107      	bne.n	8004eec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004edc:	4b3c      	ldr	r3, [pc, #240]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d121      	bne.n	8004f2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0f6      	b.n	80050da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d107      	bne.n	8004f04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ef4:	4b36      	ldr	r3, [pc, #216]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d115      	bne.n	8004f2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e0ea      	b.n	80050da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d107      	bne.n	8004f1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f0c:	4b30      	ldr	r3, [pc, #192]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d109      	bne.n	8004f2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e0de      	b.n	80050da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e0d6      	b.n	80050da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f2c:	4b28      	ldr	r3, [pc, #160]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	f023 0207 	bic.w	r2, r3, #7
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	4925      	ldr	r1, [pc, #148]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f3e:	f7fc fb31 	bl	80015a4 <HAL_GetTick>
 8004f42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f44:	e00a      	b.n	8004f5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f46:	f7fc fb2d 	bl	80015a4 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e0be      	b.n	80050da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d1eb      	bne.n	8004f46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d010      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	4b14      	ldr	r3, [pc, #80]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d208      	bcs.n	8004f9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f8a:	4b11      	ldr	r3, [pc, #68]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	f023 020f 	bic.w	r2, r3, #15
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	490e      	ldr	r1, [pc, #56]	@ (8004fd0 <HAL_RCC_ClockConfig+0x244>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fcc <HAL_RCC_ClockConfig+0x240>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d214      	bcs.n	8004fd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004faa:	4b08      	ldr	r3, [pc, #32]	@ (8004fcc <HAL_RCC_ClockConfig+0x240>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f023 020f 	bic.w	r2, r3, #15
 8004fb2:	4906      	ldr	r1, [pc, #24]	@ (8004fcc <HAL_RCC_ClockConfig+0x240>)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fba:	4b04      	ldr	r3, [pc, #16]	@ (8004fcc <HAL_RCC_ClockConfig+0x240>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d005      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e086      	b.n	80050da <HAL_RCC_ClockConfig+0x34e>
 8004fcc:	52002000 	.word	0x52002000
 8004fd0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d010      	beq.n	8005002 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	4b3f      	ldr	r3, [pc, #252]	@ (80050e4 <HAL_RCC_ClockConfig+0x358>)
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d208      	bcs.n	8005002 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ff0:	4b3c      	ldr	r3, [pc, #240]	@ (80050e4 <HAL_RCC_ClockConfig+0x358>)
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	4939      	ldr	r1, [pc, #228]	@ (80050e4 <HAL_RCC_ClockConfig+0x358>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d010      	beq.n	8005030 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695a      	ldr	r2, [r3, #20]
 8005012:	4b34      	ldr	r3, [pc, #208]	@ (80050e4 <HAL_RCC_ClockConfig+0x358>)
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800501a:	429a      	cmp	r2, r3
 800501c:	d208      	bcs.n	8005030 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800501e:	4b31      	ldr	r3, [pc, #196]	@ (80050e4 <HAL_RCC_ClockConfig+0x358>)
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	492e      	ldr	r1, [pc, #184]	@ (80050e4 <HAL_RCC_ClockConfig+0x358>)
 800502c:	4313      	orrs	r3, r2
 800502e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0310 	and.w	r3, r3, #16
 8005038:	2b00      	cmp	r3, #0
 800503a:	d010      	beq.n	800505e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699a      	ldr	r2, [r3, #24]
 8005040:	4b28      	ldr	r3, [pc, #160]	@ (80050e4 <HAL_RCC_ClockConfig+0x358>)
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005048:	429a      	cmp	r2, r3
 800504a:	d208      	bcs.n	800505e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800504c:	4b25      	ldr	r3, [pc, #148]	@ (80050e4 <HAL_RCC_ClockConfig+0x358>)
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	4922      	ldr	r1, [pc, #136]	@ (80050e4 <HAL_RCC_ClockConfig+0x358>)
 800505a:	4313      	orrs	r3, r2
 800505c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d010      	beq.n	800508c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69da      	ldr	r2, [r3, #28]
 800506e:	4b1d      	ldr	r3, [pc, #116]	@ (80050e4 <HAL_RCC_ClockConfig+0x358>)
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005076:	429a      	cmp	r2, r3
 8005078:	d208      	bcs.n	800508c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800507a:	4b1a      	ldr	r3, [pc, #104]	@ (80050e4 <HAL_RCC_ClockConfig+0x358>)
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	4917      	ldr	r1, [pc, #92]	@ (80050e4 <HAL_RCC_ClockConfig+0x358>)
 8005088:	4313      	orrs	r3, r2
 800508a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800508c:	f000 f834 	bl	80050f8 <HAL_RCC_GetSysClockFreq>
 8005090:	4602      	mov	r2, r0
 8005092:	4b14      	ldr	r3, [pc, #80]	@ (80050e4 <HAL_RCC_ClockConfig+0x358>)
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	0a1b      	lsrs	r3, r3, #8
 8005098:	f003 030f 	and.w	r3, r3, #15
 800509c:	4912      	ldr	r1, [pc, #72]	@ (80050e8 <HAL_RCC_ClockConfig+0x35c>)
 800509e:	5ccb      	ldrb	r3, [r1, r3]
 80050a0:	f003 031f 	and.w	r3, r3, #31
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
 80050a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050aa:	4b0e      	ldr	r3, [pc, #56]	@ (80050e4 <HAL_RCC_ClockConfig+0x358>)
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	4a0d      	ldr	r2, [pc, #52]	@ (80050e8 <HAL_RCC_ClockConfig+0x35c>)
 80050b4:	5cd3      	ldrb	r3, [r2, r3]
 80050b6:	f003 031f 	and.w	r3, r3, #31
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
 80050c0:	4a0a      	ldr	r2, [pc, #40]	@ (80050ec <HAL_RCC_ClockConfig+0x360>)
 80050c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050c4:	4a0a      	ldr	r2, [pc, #40]	@ (80050f0 <HAL_RCC_ClockConfig+0x364>)
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80050ca:	4b0a      	ldr	r3, [pc, #40]	@ (80050f4 <HAL_RCC_ClockConfig+0x368>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fc fa1e 	bl	8001510 <HAL_InitTick>
 80050d4:	4603      	mov	r3, r0
 80050d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	58024400 	.word	0x58024400
 80050e8:	080093e0 	.word	0x080093e0
 80050ec:	24000004 	.word	0x24000004
 80050f0:	24000000 	.word	0x24000000
 80050f4:	24000008 	.word	0x24000008

080050f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b089      	sub	sp, #36	@ 0x24
 80050fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050fe:	4bb3      	ldr	r3, [pc, #716]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005106:	2b18      	cmp	r3, #24
 8005108:	f200 8155 	bhi.w	80053b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800510c:	a201      	add	r2, pc, #4	@ (adr r2, 8005114 <HAL_RCC_GetSysClockFreq+0x1c>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	08005179 	.word	0x08005179
 8005118:	080053b7 	.word	0x080053b7
 800511c:	080053b7 	.word	0x080053b7
 8005120:	080053b7 	.word	0x080053b7
 8005124:	080053b7 	.word	0x080053b7
 8005128:	080053b7 	.word	0x080053b7
 800512c:	080053b7 	.word	0x080053b7
 8005130:	080053b7 	.word	0x080053b7
 8005134:	0800519f 	.word	0x0800519f
 8005138:	080053b7 	.word	0x080053b7
 800513c:	080053b7 	.word	0x080053b7
 8005140:	080053b7 	.word	0x080053b7
 8005144:	080053b7 	.word	0x080053b7
 8005148:	080053b7 	.word	0x080053b7
 800514c:	080053b7 	.word	0x080053b7
 8005150:	080053b7 	.word	0x080053b7
 8005154:	080051a5 	.word	0x080051a5
 8005158:	080053b7 	.word	0x080053b7
 800515c:	080053b7 	.word	0x080053b7
 8005160:	080053b7 	.word	0x080053b7
 8005164:	080053b7 	.word	0x080053b7
 8005168:	080053b7 	.word	0x080053b7
 800516c:	080053b7 	.word	0x080053b7
 8005170:	080053b7 	.word	0x080053b7
 8005174:	080051ab 	.word	0x080051ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005178:	4b94      	ldr	r3, [pc, #592]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b00      	cmp	r3, #0
 8005182:	d009      	beq.n	8005198 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005184:	4b91      	ldr	r3, [pc, #580]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	08db      	lsrs	r3, r3, #3
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	4a90      	ldr	r2, [pc, #576]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
 8005194:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005196:	e111      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005198:	4b8d      	ldr	r3, [pc, #564]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800519a:	61bb      	str	r3, [r7, #24]
      break;
 800519c:	e10e      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800519e:	4b8d      	ldr	r3, [pc, #564]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051a0:	61bb      	str	r3, [r7, #24]
      break;
 80051a2:	e10b      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80051a4:	4b8c      	ldr	r3, [pc, #560]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80051a6:	61bb      	str	r3, [r7, #24]
      break;
 80051a8:	e108      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051aa:	4b88      	ldr	r3, [pc, #544]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80051b4:	4b85      	ldr	r3, [pc, #532]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b8:	091b      	lsrs	r3, r3, #4
 80051ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80051c0:	4b82      	ldr	r3, [pc, #520]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80051ca:	4b80      	ldr	r3, [pc, #512]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ce:	08db      	lsrs	r3, r3, #3
 80051d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	fb02 f303 	mul.w	r3, r2, r3
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 80e1 	beq.w	80053b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	f000 8083 	beq.w	80052fc <HAL_RCC_GetSysClockFreq+0x204>
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	f200 80a1 	bhi.w	8005340 <HAL_RCC_GetSysClockFreq+0x248>
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <HAL_RCC_GetSysClockFreq+0x114>
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d056      	beq.n	80052b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800520a:	e099      	b.n	8005340 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800520c:	4b6f      	ldr	r3, [pc, #444]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0320 	and.w	r3, r3, #32
 8005214:	2b00      	cmp	r3, #0
 8005216:	d02d      	beq.n	8005274 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005218:	4b6c      	ldr	r3, [pc, #432]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	08db      	lsrs	r3, r3, #3
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	4a6b      	ldr	r2, [pc, #428]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005224:	fa22 f303 	lsr.w	r3, r2, r3
 8005228:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	ee07 3a90 	vmov	s15, r3
 8005230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005242:	4b62      	ldr	r3, [pc, #392]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800524a:	ee07 3a90 	vmov	s15, r3
 800524e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005252:	ed97 6a02 	vldr	s12, [r7, #8]
 8005256:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80053dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800525a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800525e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800526a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800526e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005272:	e087      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80053e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005286:	4b51      	ldr	r3, [pc, #324]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005296:	ed97 6a02 	vldr	s12, [r7, #8]
 800529a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80053dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800529e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052b6:	e065      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	ee07 3a90 	vmov	s15, r3
 80052be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80053e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80052c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ca:	4b40      	ldr	r3, [pc, #256]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052da:	ed97 6a02 	vldr	s12, [r7, #8]
 80052de:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80053dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80052e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052fa:	e043      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005306:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80053e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800530a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800530e:	4b2f      	ldr	r3, [pc, #188]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005316:	ee07 3a90 	vmov	s15, r3
 800531a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800531e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005322:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80053dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800532a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800532e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800533a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800533e:	e021      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80053e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800534e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005352:	4b1e      	ldr	r3, [pc, #120]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800535a:	ee07 3a90 	vmov	s15, r3
 800535e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005362:	ed97 6a02 	vldr	s12, [r7, #8]
 8005366:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80053dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800536a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800536e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800537a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005382:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005384:	4b11      	ldr	r3, [pc, #68]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005388:	0a5b      	lsrs	r3, r3, #9
 800538a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800538e:	3301      	adds	r3, #1
 8005390:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	ee07 3a90 	vmov	s15, r3
 8005398:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800539c:	edd7 6a07 	vldr	s13, [r7, #28]
 80053a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053a8:	ee17 3a90 	vmov	r3, s15
 80053ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80053ae:	e005      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	61bb      	str	r3, [r7, #24]
      break;
 80053b4:	e002      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80053b6:	4b07      	ldr	r3, [pc, #28]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053b8:	61bb      	str	r3, [r7, #24]
      break;
 80053ba:	bf00      	nop
  }

  return sysclockfreq;
 80053bc:	69bb      	ldr	r3, [r7, #24]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3724      	adds	r7, #36	@ 0x24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	58024400 	.word	0x58024400
 80053d0:	03d09000 	.word	0x03d09000
 80053d4:	003d0900 	.word	0x003d0900
 80053d8:	007a1200 	.word	0x007a1200
 80053dc:	46000000 	.word	0x46000000
 80053e0:	4c742400 	.word	0x4c742400
 80053e4:	4a742400 	.word	0x4a742400
 80053e8:	4af42400 	.word	0x4af42400

080053ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80053f2:	f7ff fe81 	bl	80050f8 <HAL_RCC_GetSysClockFreq>
 80053f6:	4602      	mov	r2, r0
 80053f8:	4b10      	ldr	r3, [pc, #64]	@ (800543c <HAL_RCC_GetHCLKFreq+0x50>)
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	0a1b      	lsrs	r3, r3, #8
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	490f      	ldr	r1, [pc, #60]	@ (8005440 <HAL_RCC_GetHCLKFreq+0x54>)
 8005404:	5ccb      	ldrb	r3, [r1, r3]
 8005406:	f003 031f 	and.w	r3, r3, #31
 800540a:	fa22 f303 	lsr.w	r3, r2, r3
 800540e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005410:	4b0a      	ldr	r3, [pc, #40]	@ (800543c <HAL_RCC_GetHCLKFreq+0x50>)
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	4a09      	ldr	r2, [pc, #36]	@ (8005440 <HAL_RCC_GetHCLKFreq+0x54>)
 800541a:	5cd3      	ldrb	r3, [r2, r3]
 800541c:	f003 031f 	and.w	r3, r3, #31
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	fa22 f303 	lsr.w	r3, r2, r3
 8005426:	4a07      	ldr	r2, [pc, #28]	@ (8005444 <HAL_RCC_GetHCLKFreq+0x58>)
 8005428:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800542a:	4a07      	ldr	r2, [pc, #28]	@ (8005448 <HAL_RCC_GetHCLKFreq+0x5c>)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005430:	4b04      	ldr	r3, [pc, #16]	@ (8005444 <HAL_RCC_GetHCLKFreq+0x58>)
 8005432:	681b      	ldr	r3, [r3, #0]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	58024400 	.word	0x58024400
 8005440:	080093e0 	.word	0x080093e0
 8005444:	24000004 	.word	0x24000004
 8005448:	24000000 	.word	0x24000000

0800544c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005450:	f7ff ffcc 	bl	80053ec <HAL_RCC_GetHCLKFreq>
 8005454:	4602      	mov	r2, r0
 8005456:	4b06      	ldr	r3, [pc, #24]	@ (8005470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	091b      	lsrs	r3, r3, #4
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	4904      	ldr	r1, [pc, #16]	@ (8005474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005462:	5ccb      	ldrb	r3, [r1, r3]
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800546c:	4618      	mov	r0, r3
 800546e:	bd80      	pop	{r7, pc}
 8005470:	58024400 	.word	0x58024400
 8005474:	080093e0 	.word	0x080093e0

08005478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800547c:	f7ff ffb6 	bl	80053ec <HAL_RCC_GetHCLKFreq>
 8005480:	4602      	mov	r2, r0
 8005482:	4b06      	ldr	r3, [pc, #24]	@ (800549c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	0a1b      	lsrs	r3, r3, #8
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	4904      	ldr	r1, [pc, #16]	@ (80054a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800548e:	5ccb      	ldrb	r3, [r1, r3]
 8005490:	f003 031f 	and.w	r3, r3, #31
 8005494:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005498:	4618      	mov	r0, r3
 800549a:	bd80      	pop	{r7, pc}
 800549c:	58024400 	.word	0x58024400
 80054a0:	080093e0 	.word	0x080093e0

080054a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054a8:	b0ca      	sub	sp, #296	@ 0x128
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054b0:	2300      	movs	r3, #0
 80054b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054b6:	2300      	movs	r3, #0
 80054b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80054c8:	2500      	movs	r5, #0
 80054ca:	ea54 0305 	orrs.w	r3, r4, r5
 80054ce:	d049      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80054d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054da:	d02f      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80054dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054e0:	d828      	bhi.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80054e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054e6:	d01a      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80054e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054ec:	d822      	bhi.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80054f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054f6:	d007      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80054f8:	e01c      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054fa:	4bb8      	ldr	r3, [pc, #736]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fe:	4ab7      	ldr	r2, [pc, #732]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005504:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005506:	e01a      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800550c:	3308      	adds	r3, #8
 800550e:	2102      	movs	r1, #2
 8005510:	4618      	mov	r0, r3
 8005512:	f002 fb61 	bl	8007bd8 <RCCEx_PLL2_Config>
 8005516:	4603      	mov	r3, r0
 8005518:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800551c:	e00f      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800551e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005522:	3328      	adds	r3, #40	@ 0x28
 8005524:	2102      	movs	r1, #2
 8005526:	4618      	mov	r0, r3
 8005528:	f002 fc08 	bl	8007d3c <RCCEx_PLL3_Config>
 800552c:	4603      	mov	r3, r0
 800552e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005532:	e004      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800553a:	e000      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800553c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800553e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10a      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005546:	4ba5      	ldr	r3, [pc, #660]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800554a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800554e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005552:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005554:	4aa1      	ldr	r2, [pc, #644]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005556:	430b      	orrs	r3, r1
 8005558:	6513      	str	r3, [r2, #80]	@ 0x50
 800555a:	e003      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005560:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005570:	f04f 0900 	mov.w	r9, #0
 8005574:	ea58 0309 	orrs.w	r3, r8, r9
 8005578:	d047      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800557a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800557e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005580:	2b04      	cmp	r3, #4
 8005582:	d82a      	bhi.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005584:	a201      	add	r2, pc, #4	@ (adr r2, 800558c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558a:	bf00      	nop
 800558c:	080055a1 	.word	0x080055a1
 8005590:	080055af 	.word	0x080055af
 8005594:	080055c5 	.word	0x080055c5
 8005598:	080055e3 	.word	0x080055e3
 800559c:	080055e3 	.word	0x080055e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055a0:	4b8e      	ldr	r3, [pc, #568]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a4:	4a8d      	ldr	r2, [pc, #564]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055ac:	e01a      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b2:	3308      	adds	r3, #8
 80055b4:	2100      	movs	r1, #0
 80055b6:	4618      	mov	r0, r3
 80055b8:	f002 fb0e 	bl	8007bd8 <RCCEx_PLL2_Config>
 80055bc:	4603      	mov	r3, r0
 80055be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055c2:	e00f      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c8:	3328      	adds	r3, #40	@ 0x28
 80055ca:	2100      	movs	r1, #0
 80055cc:	4618      	mov	r0, r3
 80055ce:	f002 fbb5 	bl	8007d3c <RCCEx_PLL3_Config>
 80055d2:	4603      	mov	r3, r0
 80055d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055d8:	e004      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055e0:	e000      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80055e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10a      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055ec:	4b7b      	ldr	r3, [pc, #492]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055f0:	f023 0107 	bic.w	r1, r3, #7
 80055f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055fa:	4a78      	ldr	r2, [pc, #480]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055fc:	430b      	orrs	r3, r1
 80055fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8005600:	e003      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005606:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800560a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800560e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005612:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005616:	f04f 0b00 	mov.w	fp, #0
 800561a:	ea5a 030b 	orrs.w	r3, sl, fp
 800561e:	d04c      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800562a:	d030      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800562c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005630:	d829      	bhi.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005632:	2bc0      	cmp	r3, #192	@ 0xc0
 8005634:	d02d      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005636:	2bc0      	cmp	r3, #192	@ 0xc0
 8005638:	d825      	bhi.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800563a:	2b80      	cmp	r3, #128	@ 0x80
 800563c:	d018      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800563e:	2b80      	cmp	r3, #128	@ 0x80
 8005640:	d821      	bhi.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005646:	2b40      	cmp	r3, #64	@ 0x40
 8005648:	d007      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800564a:	e01c      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800564c:	4b63      	ldr	r3, [pc, #396]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800564e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005650:	4a62      	ldr	r2, [pc, #392]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005652:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005656:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005658:	e01c      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800565a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565e:	3308      	adds	r3, #8
 8005660:	2100      	movs	r1, #0
 8005662:	4618      	mov	r0, r3
 8005664:	f002 fab8 	bl	8007bd8 <RCCEx_PLL2_Config>
 8005668:	4603      	mov	r3, r0
 800566a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800566e:	e011      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005674:	3328      	adds	r3, #40	@ 0x28
 8005676:	2100      	movs	r1, #0
 8005678:	4618      	mov	r0, r3
 800567a:	f002 fb5f 	bl	8007d3c <RCCEx_PLL3_Config>
 800567e:	4603      	mov	r3, r0
 8005680:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005684:	e006      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800568c:	e002      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800568e:	bf00      	nop
 8005690:	e000      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005694:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10a      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800569c:	4b4f      	ldr	r3, [pc, #316]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800569e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056a0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80056a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056aa:	4a4c      	ldr	r2, [pc, #304]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056ac:	430b      	orrs	r3, r1
 80056ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80056b0:	e003      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80056ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80056c6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80056ca:	2300      	movs	r3, #0
 80056cc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80056d0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80056d4:	460b      	mov	r3, r1
 80056d6:	4313      	orrs	r3, r2
 80056d8:	d053      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80056da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80056e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056e6:	d035      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80056e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056ec:	d82e      	bhi.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80056ee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80056f2:	d031      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80056f4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80056f8:	d828      	bhi.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80056fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056fe:	d01a      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005700:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005704:	d822      	bhi.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800570a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800570e:	d007      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005710:	e01c      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005712:	4b32      	ldr	r3, [pc, #200]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005716:	4a31      	ldr	r2, [pc, #196]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800571c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800571e:	e01c      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005724:	3308      	adds	r3, #8
 8005726:	2100      	movs	r1, #0
 8005728:	4618      	mov	r0, r3
 800572a:	f002 fa55 	bl	8007bd8 <RCCEx_PLL2_Config>
 800572e:	4603      	mov	r3, r0
 8005730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005734:	e011      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800573a:	3328      	adds	r3, #40	@ 0x28
 800573c:	2100      	movs	r1, #0
 800573e:	4618      	mov	r0, r3
 8005740:	f002 fafc 	bl	8007d3c <RCCEx_PLL3_Config>
 8005744:	4603      	mov	r3, r0
 8005746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800574a:	e006      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005752:	e002      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005754:	bf00      	nop
 8005756:	e000      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800575a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10b      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005762:	4b1e      	ldr	r3, [pc, #120]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005766:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800576a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005772:	4a1a      	ldr	r2, [pc, #104]	@ (80057dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005774:	430b      	orrs	r3, r1
 8005776:	6593      	str	r3, [r2, #88]	@ 0x58
 8005778:	e003      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800577e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800578e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005792:	2300      	movs	r3, #0
 8005794:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005798:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800579c:	460b      	mov	r3, r1
 800579e:	4313      	orrs	r3, r2
 80057a0:	d056      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80057a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80057aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057ae:	d038      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80057b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057b4:	d831      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057ba:	d034      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80057bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057c0:	d82b      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057c6:	d01d      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80057c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057cc:	d825      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d006      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80057d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057d6:	d00a      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80057d8:	e01f      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057da:	bf00      	nop
 80057dc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e0:	4ba2      	ldr	r3, [pc, #648]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e4:	4aa1      	ldr	r2, [pc, #644]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057ec:	e01c      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f2:	3308      	adds	r3, #8
 80057f4:	2100      	movs	r1, #0
 80057f6:	4618      	mov	r0, r3
 80057f8:	f002 f9ee 	bl	8007bd8 <RCCEx_PLL2_Config>
 80057fc:	4603      	mov	r3, r0
 80057fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005802:	e011      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005808:	3328      	adds	r3, #40	@ 0x28
 800580a:	2100      	movs	r1, #0
 800580c:	4618      	mov	r0, r3
 800580e:	f002 fa95 	bl	8007d3c <RCCEx_PLL3_Config>
 8005812:	4603      	mov	r3, r0
 8005814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005818:	e006      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005820:	e002      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005822:	bf00      	nop
 8005824:	e000      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10b      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005830:	4b8e      	ldr	r3, [pc, #568]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005834:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800583c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005840:	4a8a      	ldr	r2, [pc, #552]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005842:	430b      	orrs	r3, r1
 8005844:	6593      	str	r3, [r2, #88]	@ 0x58
 8005846:	e003      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800584c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800585c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005860:	2300      	movs	r3, #0
 8005862:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005866:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800586a:	460b      	mov	r3, r1
 800586c:	4313      	orrs	r3, r2
 800586e:	d03a      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005876:	2b30      	cmp	r3, #48	@ 0x30
 8005878:	d01f      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x416>
 800587a:	2b30      	cmp	r3, #48	@ 0x30
 800587c:	d819      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800587e:	2b20      	cmp	r3, #32
 8005880:	d00c      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005882:	2b20      	cmp	r3, #32
 8005884:	d815      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005886:	2b00      	cmp	r3, #0
 8005888:	d019      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800588a:	2b10      	cmp	r3, #16
 800588c:	d111      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800588e:	4b77      	ldr	r3, [pc, #476]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005892:	4a76      	ldr	r2, [pc, #472]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005898:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800589a:	e011      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800589c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a0:	3308      	adds	r3, #8
 80058a2:	2102      	movs	r1, #2
 80058a4:	4618      	mov	r0, r3
 80058a6:	f002 f997 	bl	8007bd8 <RCCEx_PLL2_Config>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80058b0:	e006      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058b8:	e002      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80058ba:	bf00      	nop
 80058bc:	e000      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80058be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80058c8:	4b68      	ldr	r3, [pc, #416]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058cc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80058d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058d6:	4a65      	ldr	r2, [pc, #404]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058d8:	430b      	orrs	r3, r1
 80058da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058dc:	e003      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80058e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80058f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058f6:	2300      	movs	r3, #0
 80058f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005900:	460b      	mov	r3, r1
 8005902:	4313      	orrs	r3, r2
 8005904:	d051      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800590c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005910:	d035      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005912:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005916:	d82e      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005918:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800591c:	d031      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800591e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005922:	d828      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005928:	d01a      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800592a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800592e:	d822      	bhi.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005934:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005938:	d007      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800593a:	e01c      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800593c:	4b4b      	ldr	r3, [pc, #300]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800593e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005940:	4a4a      	ldr	r2, [pc, #296]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005948:	e01c      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800594a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594e:	3308      	adds	r3, #8
 8005950:	2100      	movs	r1, #0
 8005952:	4618      	mov	r0, r3
 8005954:	f002 f940 	bl	8007bd8 <RCCEx_PLL2_Config>
 8005958:	4603      	mov	r3, r0
 800595a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800595e:	e011      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005964:	3328      	adds	r3, #40	@ 0x28
 8005966:	2100      	movs	r1, #0
 8005968:	4618      	mov	r0, r3
 800596a:	f002 f9e7 	bl	8007d3c <RCCEx_PLL3_Config>
 800596e:	4603      	mov	r3, r0
 8005970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005974:	e006      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800597c:	e002      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800597e:	bf00      	nop
 8005980:	e000      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10a      	bne.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800598c:	4b37      	ldr	r3, [pc, #220]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800598e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005990:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800599a:	4a34      	ldr	r2, [pc, #208]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800599c:	430b      	orrs	r3, r1
 800599e:	6513      	str	r3, [r2, #80]	@ 0x50
 80059a0:	e003      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80059aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80059b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059ba:	2300      	movs	r3, #0
 80059bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80059c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80059c4:	460b      	mov	r3, r1
 80059c6:	4313      	orrs	r3, r2
 80059c8:	d056      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80059ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059d4:	d033      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80059d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059da:	d82c      	bhi.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059e0:	d02f      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80059e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059e6:	d826      	bhi.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059ec:	d02b      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80059ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059f2:	d820      	bhi.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059f8:	d012      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80059fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059fe:	d81a      	bhi.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d022      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a08:	d115      	bne.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a0e:	3308      	adds	r3, #8
 8005a10:	2101      	movs	r1, #1
 8005a12:	4618      	mov	r0, r3
 8005a14:	f002 f8e0 	bl	8007bd8 <RCCEx_PLL2_Config>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a1e:	e015      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a24:	3328      	adds	r3, #40	@ 0x28
 8005a26:	2101      	movs	r1, #1
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f002 f987 	bl	8007d3c <RCCEx_PLL3_Config>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a34:	e00a      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a3c:	e006      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a3e:	bf00      	nop
 8005a40:	e004      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a42:	bf00      	nop
 8005a44:	e002      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a46:	bf00      	nop
 8005a48:	e000      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10d      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a54:	4b05      	ldr	r3, [pc, #20]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a58:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a62:	4a02      	ldr	r2, [pc, #8]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a64:	430b      	orrs	r3, r1
 8005a66:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a68:	e006      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005a6a:	bf00      	nop
 8005a6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a80:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005a84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a8e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005a92:	460b      	mov	r3, r1
 8005a94:	4313      	orrs	r3, r2
 8005a96:	d055      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005aa4:	d033      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005aaa:	d82c      	bhi.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab0:	d02f      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab6:	d826      	bhi.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ab8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005abc:	d02b      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005abe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ac2:	d820      	bhi.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ac4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ac8:	d012      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005aca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ace:	d81a      	bhi.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d022      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005ad4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ad8:	d115      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ade:	3308      	adds	r3, #8
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f002 f878 	bl	8007bd8 <RCCEx_PLL2_Config>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005aee:	e015      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af4:	3328      	adds	r3, #40	@ 0x28
 8005af6:	2101      	movs	r1, #1
 8005af8:	4618      	mov	r0, r3
 8005afa:	f002 f91f 	bl	8007d3c <RCCEx_PLL3_Config>
 8005afe:	4603      	mov	r3, r0
 8005b00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b04:	e00a      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b0c:	e006      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b0e:	bf00      	nop
 8005b10:	e004      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b12:	bf00      	nop
 8005b14:	e002      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b16:	bf00      	nop
 8005b18:	e000      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10b      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b24:	4ba3      	ldr	r3, [pc, #652]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b28:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b34:	4a9f      	ldr	r2, [pc, #636]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b36:	430b      	orrs	r3, r1
 8005b38:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b3a:	e003      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005b50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b54:	2300      	movs	r3, #0
 8005b56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4313      	orrs	r3, r2
 8005b62:	d037      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b6e:	d00e      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005b70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b74:	d816      	bhi.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d018      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005b7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b7e:	d111      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b80:	4b8c      	ldr	r3, [pc, #560]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b84:	4a8b      	ldr	r2, [pc, #556]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b8c:	e00f      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b92:	3308      	adds	r3, #8
 8005b94:	2101      	movs	r1, #1
 8005b96:	4618      	mov	r0, r3
 8005b98:	f002 f81e 	bl	8007bd8 <RCCEx_PLL2_Config>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ba2:	e004      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005baa:	e000      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10a      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005bb6:	4b7f      	ldr	r3, [pc, #508]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc4:	4a7b      	ldr	r2, [pc, #492]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc6:	430b      	orrs	r3, r1
 8005bc8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bca:	e003      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005be0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005be4:	2300      	movs	r3, #0
 8005be6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005bea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	d039      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	d81c      	bhi.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8005c04 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c04:	08005c41 	.word	0x08005c41
 8005c08:	08005c15 	.word	0x08005c15
 8005c0c:	08005c23 	.word	0x08005c23
 8005c10:	08005c41 	.word	0x08005c41
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c14:	4b67      	ldr	r3, [pc, #412]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c18:	4a66      	ldr	r2, [pc, #408]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c20:	e00f      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c26:	3308      	adds	r3, #8
 8005c28:	2102      	movs	r1, #2
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f001 ffd4 	bl	8007bd8 <RCCEx_PLL2_Config>
 8005c30:	4603      	mov	r3, r0
 8005c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c36:	e004      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c3e:	e000      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10a      	bne.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005c4a:	4b5a      	ldr	r3, [pc, #360]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c4e:	f023 0103 	bic.w	r1, r3, #3
 8005c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c58:	4a56      	ldr	r2, [pc, #344]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c5a:	430b      	orrs	r3, r1
 8005c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c5e:	e003      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c70:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005c74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c7e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005c82:	460b      	mov	r3, r1
 8005c84:	4313      	orrs	r3, r2
 8005c86:	f000 809f 	beq.w	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c8a:	4b4b      	ldr	r3, [pc, #300]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a4a      	ldr	r2, [pc, #296]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c96:	f7fb fc85 	bl	80015a4 <HAL_GetTick>
 8005c9a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c9e:	e00b      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ca0:	f7fb fc80 	bl	80015a4 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b64      	cmp	r3, #100	@ 0x64
 8005cae:	d903      	bls.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cb6:	e005      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0ed      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d179      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005ccc:	4b39      	ldr	r3, [pc, #228]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cd8:	4053      	eors	r3, r2
 8005cda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d015      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ce2:	4b34      	ldr	r3, [pc, #208]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cee:	4b31      	ldr	r3, [pc, #196]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf2:	4a30      	ldr	r2, [pc, #192]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cf8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cfa:	4b2e      	ldr	r3, [pc, #184]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cfe:	4a2d      	ldr	r2, [pc, #180]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d04:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d06:	4a2b      	ldr	r2, [pc, #172]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d0c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d1a:	d118      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1c:	f7fb fc42 	bl	80015a4 <HAL_GetTick>
 8005d20:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d24:	e00d      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d26:	f7fb fc3d 	bl	80015a4 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005d30:	1ad2      	subs	r2, r2, r3
 8005d32:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d903      	bls.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005d40:	e005      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d42:	4b1c      	ldr	r3, [pc, #112]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0eb      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d129      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d66:	d10e      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005d68:	4b12      	ldr	r3, [pc, #72]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d78:	091a      	lsrs	r2, r3, #4
 8005d7a:	4b10      	ldr	r3, [pc, #64]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d80:	430b      	orrs	r3, r1
 8005d82:	6113      	str	r3, [r2, #16]
 8005d84:	e005      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005d86:	4b0b      	ldr	r3, [pc, #44]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d8c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d90:	6113      	str	r3, [r2, #16]
 8005d92:	4b08      	ldr	r3, [pc, #32]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d94:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005da2:	4a04      	ldr	r2, [pc, #16]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005da4:	430b      	orrs	r3, r1
 8005da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005da8:	e00e      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005db2:	e009      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005db4:	58024400 	.word	0x58024400
 8005db8:	58024800 	.word	0x58024800
 8005dbc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd0:	f002 0301 	and.w	r3, r2, #1
 8005dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005dde:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4313      	orrs	r3, r2
 8005de6:	f000 8089 	beq.w	8005efc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005df0:	2b28      	cmp	r3, #40	@ 0x28
 8005df2:	d86b      	bhi.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005df4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfa:	bf00      	nop
 8005dfc:	08005ed5 	.word	0x08005ed5
 8005e00:	08005ecd 	.word	0x08005ecd
 8005e04:	08005ecd 	.word	0x08005ecd
 8005e08:	08005ecd 	.word	0x08005ecd
 8005e0c:	08005ecd 	.word	0x08005ecd
 8005e10:	08005ecd 	.word	0x08005ecd
 8005e14:	08005ecd 	.word	0x08005ecd
 8005e18:	08005ecd 	.word	0x08005ecd
 8005e1c:	08005ea1 	.word	0x08005ea1
 8005e20:	08005ecd 	.word	0x08005ecd
 8005e24:	08005ecd 	.word	0x08005ecd
 8005e28:	08005ecd 	.word	0x08005ecd
 8005e2c:	08005ecd 	.word	0x08005ecd
 8005e30:	08005ecd 	.word	0x08005ecd
 8005e34:	08005ecd 	.word	0x08005ecd
 8005e38:	08005ecd 	.word	0x08005ecd
 8005e3c:	08005eb7 	.word	0x08005eb7
 8005e40:	08005ecd 	.word	0x08005ecd
 8005e44:	08005ecd 	.word	0x08005ecd
 8005e48:	08005ecd 	.word	0x08005ecd
 8005e4c:	08005ecd 	.word	0x08005ecd
 8005e50:	08005ecd 	.word	0x08005ecd
 8005e54:	08005ecd 	.word	0x08005ecd
 8005e58:	08005ecd 	.word	0x08005ecd
 8005e5c:	08005ed5 	.word	0x08005ed5
 8005e60:	08005ecd 	.word	0x08005ecd
 8005e64:	08005ecd 	.word	0x08005ecd
 8005e68:	08005ecd 	.word	0x08005ecd
 8005e6c:	08005ecd 	.word	0x08005ecd
 8005e70:	08005ecd 	.word	0x08005ecd
 8005e74:	08005ecd 	.word	0x08005ecd
 8005e78:	08005ecd 	.word	0x08005ecd
 8005e7c:	08005ed5 	.word	0x08005ed5
 8005e80:	08005ecd 	.word	0x08005ecd
 8005e84:	08005ecd 	.word	0x08005ecd
 8005e88:	08005ecd 	.word	0x08005ecd
 8005e8c:	08005ecd 	.word	0x08005ecd
 8005e90:	08005ecd 	.word	0x08005ecd
 8005e94:	08005ecd 	.word	0x08005ecd
 8005e98:	08005ecd 	.word	0x08005ecd
 8005e9c:	08005ed5 	.word	0x08005ed5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f001 fe95 	bl	8007bd8 <RCCEx_PLL2_Config>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005eb4:	e00f      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eba:	3328      	adds	r3, #40	@ 0x28
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f001 ff3c 	bl	8007d3c <RCCEx_PLL3_Config>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005eca:	e004      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ed2:	e000      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005ed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10a      	bne.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ede:	4bbf      	ldr	r3, [pc, #764]	@ (80061dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005eec:	4abb      	ldr	r2, [pc, #748]	@ (80061dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005eee:	430b      	orrs	r3, r1
 8005ef0:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ef2:	e003      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ef8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f04:	f002 0302 	and.w	r3, r2, #2
 8005f08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005f12:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005f16:	460b      	mov	r3, r1
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	d041      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f22:	2b05      	cmp	r3, #5
 8005f24:	d824      	bhi.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005f26:	a201      	add	r2, pc, #4	@ (adr r2, 8005f2c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2c:	08005f79 	.word	0x08005f79
 8005f30:	08005f45 	.word	0x08005f45
 8005f34:	08005f5b 	.word	0x08005f5b
 8005f38:	08005f79 	.word	0x08005f79
 8005f3c:	08005f79 	.word	0x08005f79
 8005f40:	08005f79 	.word	0x08005f79
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f48:	3308      	adds	r3, #8
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f001 fe43 	bl	8007bd8 <RCCEx_PLL2_Config>
 8005f52:	4603      	mov	r3, r0
 8005f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f58:	e00f      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f5e:	3328      	adds	r3, #40	@ 0x28
 8005f60:	2101      	movs	r1, #1
 8005f62:	4618      	mov	r0, r3
 8005f64:	f001 feea 	bl	8007d3c <RCCEx_PLL3_Config>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f6e:	e004      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f76:	e000      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10a      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f82:	4b96      	ldr	r3, [pc, #600]	@ (80061dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f86:	f023 0107 	bic.w	r1, r3, #7
 8005f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f90:	4a92      	ldr	r2, [pc, #584]	@ (80061dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f92:	430b      	orrs	r3, r1
 8005f94:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f96:	e003      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	f002 0304 	and.w	r3, r2, #4
 8005fac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fb6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	d044      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fc8:	2b05      	cmp	r3, #5
 8005fca:	d825      	bhi.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd2:	bf00      	nop
 8005fd4:	08006021 	.word	0x08006021
 8005fd8:	08005fed 	.word	0x08005fed
 8005fdc:	08006003 	.word	0x08006003
 8005fe0:	08006021 	.word	0x08006021
 8005fe4:	08006021 	.word	0x08006021
 8005fe8:	08006021 	.word	0x08006021
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff0:	3308      	adds	r3, #8
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f001 fdef 	bl	8007bd8 <RCCEx_PLL2_Config>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006000:	e00f      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006006:	3328      	adds	r3, #40	@ 0x28
 8006008:	2101      	movs	r1, #1
 800600a:	4618      	mov	r0, r3
 800600c:	f001 fe96 	bl	8007d3c <RCCEx_PLL3_Config>
 8006010:	4603      	mov	r3, r0
 8006012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006016:	e004      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800601e:	e000      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10b      	bne.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800602a:	4b6c      	ldr	r3, [pc, #432]	@ (80061dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800602c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800602e:	f023 0107 	bic.w	r1, r3, #7
 8006032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006036:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800603a:	4a68      	ldr	r2, [pc, #416]	@ (80061dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800603c:	430b      	orrs	r3, r1
 800603e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006040:	e003      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006046:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800604a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800604e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006052:	f002 0320 	and.w	r3, r2, #32
 8006056:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800605a:	2300      	movs	r3, #0
 800605c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006060:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006064:	460b      	mov	r3, r1
 8006066:	4313      	orrs	r3, r2
 8006068:	d055      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800606a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006072:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006076:	d033      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006078:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800607c:	d82c      	bhi.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800607e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006082:	d02f      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006088:	d826      	bhi.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800608a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800608e:	d02b      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006090:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006094:	d820      	bhi.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006096:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800609a:	d012      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800609c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060a0:	d81a      	bhi.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d022      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80060a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060aa:	d115      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b0:	3308      	adds	r3, #8
 80060b2:	2100      	movs	r1, #0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f001 fd8f 	bl	8007bd8 <RCCEx_PLL2_Config>
 80060ba:	4603      	mov	r3, r0
 80060bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060c0:	e015      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c6:	3328      	adds	r3, #40	@ 0x28
 80060c8:	2102      	movs	r1, #2
 80060ca:	4618      	mov	r0, r3
 80060cc:	f001 fe36 	bl	8007d3c <RCCEx_PLL3_Config>
 80060d0:	4603      	mov	r3, r0
 80060d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060d6:	e00a      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060de:	e006      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060e0:	bf00      	nop
 80060e2:	e004      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060e4:	bf00      	nop
 80060e6:	e002      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060e8:	bf00      	nop
 80060ea:	e000      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10b      	bne.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060f6:	4b39      	ldr	r3, [pc, #228]	@ (80061dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006106:	4a35      	ldr	r2, [pc, #212]	@ (80061dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006108:	430b      	orrs	r3, r1
 800610a:	6553      	str	r3, [r2, #84]	@ 0x54
 800610c:	e003      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006112:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006122:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006126:	2300      	movs	r3, #0
 8006128:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800612c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006130:	460b      	mov	r3, r1
 8006132:	4313      	orrs	r3, r2
 8006134:	d058      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800613e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006142:	d033      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006144:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006148:	d82c      	bhi.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800614a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800614e:	d02f      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006154:	d826      	bhi.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006156:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800615a:	d02b      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800615c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006160:	d820      	bhi.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006162:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006166:	d012      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800616c:	d81a      	bhi.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800616e:	2b00      	cmp	r3, #0
 8006170:	d022      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006176:	d115      	bne.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617c:	3308      	adds	r3, #8
 800617e:	2100      	movs	r1, #0
 8006180:	4618      	mov	r0, r3
 8006182:	f001 fd29 	bl	8007bd8 <RCCEx_PLL2_Config>
 8006186:	4603      	mov	r3, r0
 8006188:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800618c:	e015      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800618e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006192:	3328      	adds	r3, #40	@ 0x28
 8006194:	2102      	movs	r1, #2
 8006196:	4618      	mov	r0, r3
 8006198:	f001 fdd0 	bl	8007d3c <RCCEx_PLL3_Config>
 800619c:	4603      	mov	r3, r0
 800619e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80061a2:	e00a      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061aa:	e006      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061ac:	bf00      	nop
 80061ae:	e004      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061b0:	bf00      	nop
 80061b2:	e002      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061b4:	bf00      	nop
 80061b6:	e000      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10e      	bne.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061c2:	4b06      	ldr	r3, [pc, #24]	@ (80061dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061c6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80061ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061d2:	4a02      	ldr	r2, [pc, #8]	@ (80061dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061d4:	430b      	orrs	r3, r1
 80061d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80061d8:	e006      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80061da:	bf00      	nop
 80061dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80061e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80061f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061f8:	2300      	movs	r3, #0
 80061fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061fe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006202:	460b      	mov	r3, r1
 8006204:	4313      	orrs	r3, r2
 8006206:	d055      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800620c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006210:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006214:	d033      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006216:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800621a:	d82c      	bhi.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800621c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006220:	d02f      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006222:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006226:	d826      	bhi.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006228:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800622c:	d02b      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800622e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006232:	d820      	bhi.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006234:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006238:	d012      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800623a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800623e:	d81a      	bhi.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006240:	2b00      	cmp	r3, #0
 8006242:	d022      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006248:	d115      	bne.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800624a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800624e:	3308      	adds	r3, #8
 8006250:	2100      	movs	r1, #0
 8006252:	4618      	mov	r0, r3
 8006254:	f001 fcc0 	bl	8007bd8 <RCCEx_PLL2_Config>
 8006258:	4603      	mov	r3, r0
 800625a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800625e:	e015      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006264:	3328      	adds	r3, #40	@ 0x28
 8006266:	2102      	movs	r1, #2
 8006268:	4618      	mov	r0, r3
 800626a:	f001 fd67 	bl	8007d3c <RCCEx_PLL3_Config>
 800626e:	4603      	mov	r3, r0
 8006270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006274:	e00a      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800627c:	e006      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800627e:	bf00      	nop
 8006280:	e004      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006282:	bf00      	nop
 8006284:	e002      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006286:	bf00      	nop
 8006288:	e000      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800628a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800628c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10b      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006294:	4ba1      	ldr	r3, [pc, #644]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006298:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800629c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80062a4:	4a9d      	ldr	r2, [pc, #628]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062a6:	430b      	orrs	r3, r1
 80062a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80062aa:	e003      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80062b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	f002 0308 	and.w	r3, r2, #8
 80062c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062c4:	2300      	movs	r3, #0
 80062c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80062ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80062ce:	460b      	mov	r3, r1
 80062d0:	4313      	orrs	r3, r2
 80062d2:	d01e      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80062d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062e0:	d10c      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e6:	3328      	adds	r3, #40	@ 0x28
 80062e8:	2102      	movs	r1, #2
 80062ea:	4618      	mov	r0, r3
 80062ec:	f001 fd26 	bl	8007d3c <RCCEx_PLL3_Config>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d002      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80062fc:	4b87      	ldr	r3, [pc, #540]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006300:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006308:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800630c:	4a83      	ldr	r2, [pc, #524]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800630e:	430b      	orrs	r3, r1
 8006310:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631a:	f002 0310 	and.w	r3, r2, #16
 800631e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006322:	2300      	movs	r3, #0
 8006324:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006328:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800632c:	460b      	mov	r3, r1
 800632e:	4313      	orrs	r3, r2
 8006330:	d01e      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006336:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800633a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800633e:	d10c      	bne.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006344:	3328      	adds	r3, #40	@ 0x28
 8006346:	2102      	movs	r1, #2
 8006348:	4618      	mov	r0, r3
 800634a:	f001 fcf7 	bl	8007d3c <RCCEx_PLL3_Config>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800635a:	4b70      	ldr	r3, [pc, #448]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800635c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006366:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800636a:	4a6c      	ldr	r2, [pc, #432]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800636c:	430b      	orrs	r3, r1
 800636e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800637c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006380:	2300      	movs	r3, #0
 8006382:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006386:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800638a:	460b      	mov	r3, r1
 800638c:	4313      	orrs	r3, r2
 800638e:	d03e      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006394:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006398:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800639c:	d022      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800639e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063a2:	d81b      	bhi.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80063a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063ac:	d00b      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80063ae:	e015      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b4:	3308      	adds	r3, #8
 80063b6:	2100      	movs	r1, #0
 80063b8:	4618      	mov	r0, r3
 80063ba:	f001 fc0d 	bl	8007bd8 <RCCEx_PLL2_Config>
 80063be:	4603      	mov	r3, r0
 80063c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063c4:	e00f      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ca:	3328      	adds	r3, #40	@ 0x28
 80063cc:	2102      	movs	r1, #2
 80063ce:	4618      	mov	r0, r3
 80063d0:	f001 fcb4 	bl	8007d3c <RCCEx_PLL3_Config>
 80063d4:	4603      	mov	r3, r0
 80063d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063da:	e004      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063e2:	e000      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80063e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10b      	bne.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063ee:	4b4b      	ldr	r3, [pc, #300]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80063f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80063fe:	4a47      	ldr	r2, [pc, #284]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006400:	430b      	orrs	r3, r1
 8006402:	6593      	str	r3, [r2, #88]	@ 0x58
 8006404:	e003      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800640a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800640e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800641a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800641c:	2300      	movs	r3, #0
 800641e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006420:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006424:	460b      	mov	r3, r1
 8006426:	4313      	orrs	r3, r2
 8006428:	d03b      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800642a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006432:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006436:	d01f      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006438:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800643c:	d818      	bhi.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800643e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006442:	d003      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006444:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006448:	d007      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800644a:	e011      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800644c:	4b33      	ldr	r3, [pc, #204]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800644e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006450:	4a32      	ldr	r2, [pc, #200]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006456:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006458:	e00f      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800645a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645e:	3328      	adds	r3, #40	@ 0x28
 8006460:	2101      	movs	r1, #1
 8006462:	4618      	mov	r0, r3
 8006464:	f001 fc6a 	bl	8007d3c <RCCEx_PLL3_Config>
 8006468:	4603      	mov	r3, r0
 800646a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800646e:	e004      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006476:	e000      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800647a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10b      	bne.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006482:	4b26      	ldr	r3, [pc, #152]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006486:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800648a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006492:	4a22      	ldr	r2, [pc, #136]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006494:	430b      	orrs	r3, r1
 8006496:	6553      	str	r3, [r2, #84]	@ 0x54
 8006498:	e003      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800649a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800649e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80064a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064aa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80064ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80064b0:	2300      	movs	r3, #0
 80064b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80064b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80064b8:	460b      	mov	r3, r1
 80064ba:	4313      	orrs	r3, r2
 80064bc:	d034      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80064be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d003      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80064c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064cc:	d007      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80064ce:	e011      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064d0:	4b12      	ldr	r3, [pc, #72]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d4:	4a11      	ldr	r2, [pc, #68]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064dc:	e00e      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e2:	3308      	adds	r3, #8
 80064e4:	2102      	movs	r1, #2
 80064e6:	4618      	mov	r0, r3
 80064e8:	f001 fb76 	bl	8007bd8 <RCCEx_PLL2_Config>
 80064ec:	4603      	mov	r3, r0
 80064ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064f2:	e003      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10d      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006504:	4b05      	ldr	r3, [pc, #20]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006508:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800650c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006512:	4a02      	ldr	r2, [pc, #8]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006514:	430b      	orrs	r3, r1
 8006516:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006518:	e006      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800651a:	bf00      	nop
 800651c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006520:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006524:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006530:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006534:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006536:	2300      	movs	r3, #0
 8006538:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800653a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800653e:	460b      	mov	r3, r1
 8006540:	4313      	orrs	r3, r2
 8006542:	d00c      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006548:	3328      	adds	r3, #40	@ 0x28
 800654a:	2102      	movs	r1, #2
 800654c:	4618      	mov	r0, r3
 800654e:	f001 fbf5 	bl	8007d3c <RCCEx_PLL3_Config>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800655e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800656a:	663b      	str	r3, [r7, #96]	@ 0x60
 800656c:	2300      	movs	r3, #0
 800656e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006570:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006574:	460b      	mov	r3, r1
 8006576:	4313      	orrs	r3, r2
 8006578:	d038      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800657a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006582:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006586:	d018      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006588:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800658c:	d811      	bhi.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800658e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006592:	d014      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006598:	d80b      	bhi.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800659a:	2b00      	cmp	r3, #0
 800659c:	d011      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800659e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065a2:	d106      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a4:	4bc3      	ldr	r3, [pc, #780]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a8:	4ac2      	ldr	r2, [pc, #776]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80065b0:	e008      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065b8:	e004      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065ba:	bf00      	nop
 80065bc:	e002      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065be:	bf00      	nop
 80065c0:	e000      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10b      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065cc:	4bb9      	ldr	r3, [pc, #740]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065dc:	4ab5      	ldr	r2, [pc, #724]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065de:	430b      	orrs	r3, r1
 80065e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80065e2:	e003      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80065f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065fa:	2300      	movs	r3, #0
 80065fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006602:	460b      	mov	r3, r1
 8006604:	4313      	orrs	r3, r2
 8006606:	d009      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006608:	4baa      	ldr	r3, [pc, #680]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800660a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800660c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006616:	4aa7      	ldr	r2, [pc, #668]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006618:	430b      	orrs	r3, r1
 800661a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800661c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006624:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006628:	653b      	str	r3, [r7, #80]	@ 0x50
 800662a:	2300      	movs	r3, #0
 800662c:	657b      	str	r3, [r7, #84]	@ 0x54
 800662e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006632:	460b      	mov	r3, r1
 8006634:	4313      	orrs	r3, r2
 8006636:	d00a      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006638:	4b9e      	ldr	r3, [pc, #632]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006644:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006648:	4a9a      	ldr	r2, [pc, #616]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800664a:	430b      	orrs	r3, r1
 800664c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800664e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006656:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800665a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800665c:	2300      	movs	r3, #0
 800665e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006660:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006664:	460b      	mov	r3, r1
 8006666:	4313      	orrs	r3, r2
 8006668:	d009      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800666a:	4b92      	ldr	r3, [pc, #584]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800666c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800666e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006678:	4a8e      	ldr	r2, [pc, #568]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800667a:	430b      	orrs	r3, r1
 800667c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800667e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800668a:	643b      	str	r3, [r7, #64]	@ 0x40
 800668c:	2300      	movs	r3, #0
 800668e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006690:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006694:	460b      	mov	r3, r1
 8006696:	4313      	orrs	r3, r2
 8006698:	d00e      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800669a:	4b86      	ldr	r3, [pc, #536]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	4a85      	ldr	r2, [pc, #532]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066a0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066a4:	6113      	str	r3, [r2, #16]
 80066a6:	4b83      	ldr	r3, [pc, #524]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066a8:	6919      	ldr	r1, [r3, #16]
 80066aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80066b2:	4a80      	ldr	r2, [pc, #512]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066b4:	430b      	orrs	r3, r1
 80066b6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80066b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80066c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066c6:	2300      	movs	r3, #0
 80066c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066ca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80066ce:	460b      	mov	r3, r1
 80066d0:	4313      	orrs	r3, r2
 80066d2:	d009      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80066d4:	4b77      	ldr	r3, [pc, #476]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066d8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80066dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e2:	4a74      	ldr	r2, [pc, #464]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066e4:	430b      	orrs	r3, r1
 80066e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80066f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80066f6:	2300      	movs	r3, #0
 80066f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80066fe:	460b      	mov	r3, r1
 8006700:	4313      	orrs	r3, r2
 8006702:	d00a      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006704:	4b6b      	ldr	r3, [pc, #428]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006708:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800670c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006710:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006714:	4a67      	ldr	r2, [pc, #412]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006716:	430b      	orrs	r3, r1
 8006718:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800671a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	2100      	movs	r1, #0
 8006724:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800672c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006730:	460b      	mov	r3, r1
 8006732:	4313      	orrs	r3, r2
 8006734:	d011      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673a:	3308      	adds	r3, #8
 800673c:	2100      	movs	r1, #0
 800673e:	4618      	mov	r0, r3
 8006740:	f001 fa4a 	bl	8007bd8 <RCCEx_PLL2_Config>
 8006744:	4603      	mov	r3, r0
 8006746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800674a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006752:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006756:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800675a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006762:	2100      	movs	r1, #0
 8006764:	6239      	str	r1, [r7, #32]
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	627b      	str	r3, [r7, #36]	@ 0x24
 800676c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006770:	460b      	mov	r3, r1
 8006772:	4313      	orrs	r3, r2
 8006774:	d011      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677a:	3308      	adds	r3, #8
 800677c:	2101      	movs	r1, #1
 800677e:	4618      	mov	r0, r3
 8006780:	f001 fa2a 	bl	8007bd8 <RCCEx_PLL2_Config>
 8006784:	4603      	mov	r3, r0
 8006786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800678a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006792:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006796:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800679a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	2100      	movs	r1, #0
 80067a4:	61b9      	str	r1, [r7, #24]
 80067a6:	f003 0304 	and.w	r3, r3, #4
 80067aa:	61fb      	str	r3, [r7, #28]
 80067ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80067b0:	460b      	mov	r3, r1
 80067b2:	4313      	orrs	r3, r2
 80067b4:	d011      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ba:	3308      	adds	r3, #8
 80067bc:	2102      	movs	r1, #2
 80067be:	4618      	mov	r0, r3
 80067c0:	f001 fa0a 	bl	8007bd8 <RCCEx_PLL2_Config>
 80067c4:	4603      	mov	r3, r0
 80067c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80067ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80067da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e2:	2100      	movs	r1, #0
 80067e4:	6139      	str	r1, [r7, #16]
 80067e6:	f003 0308 	and.w	r3, r3, #8
 80067ea:	617b      	str	r3, [r7, #20]
 80067ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80067f0:	460b      	mov	r3, r1
 80067f2:	4313      	orrs	r3, r2
 80067f4:	d011      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fa:	3328      	adds	r3, #40	@ 0x28
 80067fc:	2100      	movs	r1, #0
 80067fe:	4618      	mov	r0, r3
 8006800:	f001 fa9c 	bl	8007d3c <RCCEx_PLL3_Config>
 8006804:	4603      	mov	r3, r0
 8006806:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800680a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006816:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800681a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006822:	2100      	movs	r1, #0
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	f003 0310 	and.w	r3, r3, #16
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006830:	460b      	mov	r3, r1
 8006832:	4313      	orrs	r3, r2
 8006834:	d011      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683a:	3328      	adds	r3, #40	@ 0x28
 800683c:	2101      	movs	r1, #1
 800683e:	4618      	mov	r0, r3
 8006840:	f001 fa7c 	bl	8007d3c <RCCEx_PLL3_Config>
 8006844:	4603      	mov	r3, r0
 8006846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800684a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006856:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800685a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006862:	2100      	movs	r1, #0
 8006864:	6039      	str	r1, [r7, #0]
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	607b      	str	r3, [r7, #4]
 800686c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006870:	460b      	mov	r3, r1
 8006872:	4313      	orrs	r3, r2
 8006874:	d011      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687a:	3328      	adds	r3, #40	@ 0x28
 800687c:	2102      	movs	r1, #2
 800687e:	4618      	mov	r0, r3
 8006880:	f001 fa5c 	bl	8007d3c <RCCEx_PLL3_Config>
 8006884:	4603      	mov	r3, r0
 8006886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800688a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006896:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800689a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	e000      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80068ae:	46bd      	mov	sp, r7
 80068b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068b4:	58024400 	.word	0x58024400

080068b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b090      	sub	sp, #64	@ 0x40
 80068bc:	af00      	add	r7, sp, #0
 80068be:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80068c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068c6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80068ca:	430b      	orrs	r3, r1
 80068cc:	f040 8094 	bne.w	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80068d0:	4b9e      	ldr	r3, [pc, #632]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068d4:	f003 0307 	and.w	r3, r3, #7
 80068d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80068da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068dc:	2b04      	cmp	r3, #4
 80068de:	f200 8087 	bhi.w	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80068e2:	a201      	add	r2, pc, #4	@ (adr r2, 80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80068e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e8:	080068fd 	.word	0x080068fd
 80068ec:	08006925 	.word	0x08006925
 80068f0:	0800694d 	.word	0x0800694d
 80068f4:	080069e9 	.word	0x080069e9
 80068f8:	08006975 	.word	0x08006975
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068fc:	4b93      	ldr	r3, [pc, #588]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006904:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006908:	d108      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800690a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800690e:	4618      	mov	r0, r3
 8006910:	f001 f810 	bl	8007934 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006918:	f000 bd45 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800691c:	2300      	movs	r3, #0
 800691e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006920:	f000 bd41 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006924:	4b89      	ldr	r3, [pc, #548]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800692c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006930:	d108      	bne.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006932:	f107 0318 	add.w	r3, r7, #24
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fd54 	bl	80073e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006940:	f000 bd31 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006944:	2300      	movs	r3, #0
 8006946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006948:	f000 bd2d 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800694c:	4b7f      	ldr	r3, [pc, #508]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006958:	d108      	bne.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800695a:	f107 030c 	add.w	r3, r7, #12
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fe94 	bl	800768c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006968:	f000 bd1d 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800696c:	2300      	movs	r3, #0
 800696e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006970:	f000 bd19 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006974:	4b75      	ldr	r3, [pc, #468]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006978:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800697c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800697e:	4b73      	ldr	r3, [pc, #460]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0304 	and.w	r3, r3, #4
 8006986:	2b04      	cmp	r3, #4
 8006988:	d10c      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800698a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800698c:	2b00      	cmp	r3, #0
 800698e:	d109      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006990:	4b6e      	ldr	r3, [pc, #440]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	08db      	lsrs	r3, r3, #3
 8006996:	f003 0303 	and.w	r3, r3, #3
 800699a:	4a6d      	ldr	r2, [pc, #436]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800699c:	fa22 f303 	lsr.w	r3, r2, r3
 80069a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069a2:	e01f      	b.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069a4:	4b69      	ldr	r3, [pc, #420]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069b0:	d106      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80069b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069b8:	d102      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069ba:	4b66      	ldr	r3, [pc, #408]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80069bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069be:	e011      	b.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069c0:	4b62      	ldr	r3, [pc, #392]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069cc:	d106      	bne.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80069ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069d4:	d102      	bne.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80069d6:	4b60      	ldr	r3, [pc, #384]	@ (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80069d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069da:	e003      	b.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80069dc:	2300      	movs	r3, #0
 80069de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80069e0:	f000 bce1 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069e4:	f000 bcdf 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80069e8:	4b5c      	ldr	r3, [pc, #368]	@ (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80069ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069ec:	f000 bcdb 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80069f0:	2300      	movs	r3, #0
 80069f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069f4:	f000 bcd7 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80069f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069fc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006a00:	430b      	orrs	r3, r1
 8006a02:	f040 80ad 	bne.w	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006a06:	4b51      	ldr	r3, [pc, #324]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a0a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006a0e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a16:	d056      	beq.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a1e:	f200 8090 	bhi.w	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a26:	f000 8088 	beq.w	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2c:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a2e:	f200 8088 	bhi.w	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a34:	2b80      	cmp	r3, #128	@ 0x80
 8006a36:	d032      	beq.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3a:	2b80      	cmp	r3, #128	@ 0x80
 8006a3c:	f200 8081 	bhi.w	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a48:	2b40      	cmp	r3, #64	@ 0x40
 8006a4a:	d014      	beq.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006a4c:	e079      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a5a:	d108      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 ff67 	bl	8007934 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a6a:	f000 bc9c 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a72:	f000 bc98 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a76:	4b35      	ldr	r3, [pc, #212]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a82:	d108      	bne.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a84:	f107 0318 	add.w	r3, r7, #24
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 fcab 	bl	80073e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a92:	f000 bc88 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a96:	2300      	movs	r3, #0
 8006a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a9a:	f000 bc84 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006aa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aaa:	d108      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aac:	f107 030c 	add.w	r3, r7, #12
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 fdeb 	bl	800768c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aba:	f000 bc74 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ac2:	f000 bc70 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ac6:	4b21      	ldr	r3, [pc, #132]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006ace:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0304 	and.w	r3, r3, #4
 8006ad8:	2b04      	cmp	r3, #4
 8006ada:	d10c      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d109      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	08db      	lsrs	r3, r3, #3
 8006ae8:	f003 0303 	and.w	r3, r3, #3
 8006aec:	4a18      	ldr	r2, [pc, #96]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006aee:	fa22 f303 	lsr.w	r3, r2, r3
 8006af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006af4:	e01f      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006af6:	4b15      	ldr	r3, [pc, #84]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b02:	d106      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b0a:	d102      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b0c:	4b11      	ldr	r3, [pc, #68]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b10:	e011      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b12:	4b0e      	ldr	r3, [pc, #56]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b1e:	d106      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b26:	d102      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b28:	4b0b      	ldr	r3, [pc, #44]	@ (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b2c:	e003      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006b32:	f000 bc38 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b36:	f000 bc36 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b3a:	4b08      	ldr	r3, [pc, #32]	@ (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b3e:	f000 bc32 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006b42:	2300      	movs	r3, #0
 8006b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b46:	f000 bc2e 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b4a:	bf00      	nop
 8006b4c:	58024400 	.word	0x58024400
 8006b50:	03d09000 	.word	0x03d09000
 8006b54:	003d0900 	.word	0x003d0900
 8006b58:	007a1200 	.word	0x007a1200
 8006b5c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b64:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	f040 809c 	bne.w	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006b6e:	4b9e      	ldr	r3, [pc, #632]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b72:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006b76:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b7e:	d054      	beq.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b86:	f200 808b 	bhi.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006b90:	f000 8083 	beq.w	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b96:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006b9a:	f200 8081 	bhi.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ba4:	d02f      	beq.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bac:	d878      	bhi.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d004      	beq.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bba:	d012      	beq.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006bbc:	e070      	b.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bbe:	4b8a      	ldr	r3, [pc, #552]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bca:	d107      	bne.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 feaf 	bl	8007934 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bda:	e3e4      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006be0:	e3e1      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006be2:	4b81      	ldr	r3, [pc, #516]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bee:	d107      	bne.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bf0:	f107 0318 	add.w	r3, r7, #24
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 fbf5 	bl	80073e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bfe:	e3d2      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c00:	2300      	movs	r3, #0
 8006c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c04:	e3cf      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c06:	4b78      	ldr	r3, [pc, #480]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c12:	d107      	bne.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c14:	f107 030c 	add.w	r3, r7, #12
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 fd37 	bl	800768c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c22:	e3c0      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c28:	e3bd      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c2a:	4b6f      	ldr	r3, [pc, #444]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c32:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c34:	4b6c      	ldr	r3, [pc, #432]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0304 	and.w	r3, r3, #4
 8006c3c:	2b04      	cmp	r3, #4
 8006c3e:	d10c      	bne.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d109      	bne.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c46:	4b68      	ldr	r3, [pc, #416]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	08db      	lsrs	r3, r3, #3
 8006c4c:	f003 0303 	and.w	r3, r3, #3
 8006c50:	4a66      	ldr	r2, [pc, #408]	@ (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006c52:	fa22 f303 	lsr.w	r3, r2, r3
 8006c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c58:	e01e      	b.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c5a:	4b63      	ldr	r3, [pc, #396]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c66:	d106      	bne.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c6e:	d102      	bne.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c70:	4b5f      	ldr	r3, [pc, #380]	@ (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c74:	e010      	b.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c76:	4b5c      	ldr	r3, [pc, #368]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c82:	d106      	bne.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c8a:	d102      	bne.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c8c:	4b59      	ldr	r3, [pc, #356]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c90:	e002      	b.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c92:	2300      	movs	r3, #0
 8006c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006c96:	e386      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c98:	e385      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c9a:	4b57      	ldr	r3, [pc, #348]	@ (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c9e:	e382      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ca4:	e37f      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006ca6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006caa:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006cae:	430b      	orrs	r3, r1
 8006cb0:	f040 80a7 	bne.w	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006cb4:	4b4c      	ldr	r3, [pc, #304]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cb8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006cbc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cc4:	d055      	beq.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ccc:	f200 8096 	bhi.w	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006cd6:	f000 8084 	beq.w	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cdc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ce0:	f200 808c 	bhi.w	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cea:	d030      	beq.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cf2:	f200 8083 	bhi.w	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d004      	beq.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d02:	d012      	beq.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006d04:	e07a      	b.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d06:	4b38      	ldr	r3, [pc, #224]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d12:	d107      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 fe0b 	bl	8007934 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d22:	e340      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d24:	2300      	movs	r3, #0
 8006d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d28:	e33d      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d36:	d107      	bne.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d38:	f107 0318 	add.w	r3, r7, #24
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 fb51 	bl	80073e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d46:	e32e      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d4c:	e32b      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d4e:	4b26      	ldr	r3, [pc, #152]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d5a:	d107      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d5c:	f107 030c 	add.w	r3, r7, #12
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 fc93 	bl	800768c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d6a:	e31c      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d70:	e319      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d72:	4b1d      	ldr	r3, [pc, #116]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006d7a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0304 	and.w	r3, r3, #4
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	d10c      	bne.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d109      	bne.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d8e:	4b16      	ldr	r3, [pc, #88]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	08db      	lsrs	r3, r3, #3
 8006d94:	f003 0303 	and.w	r3, r3, #3
 8006d98:	4a14      	ldr	r2, [pc, #80]	@ (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006da0:	e01e      	b.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006da2:	4b11      	ldr	r3, [pc, #68]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006daa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dae:	d106      	bne.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006db6:	d102      	bne.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006db8:	4b0d      	ldr	r3, [pc, #52]	@ (8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dbc:	e010      	b.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dca:	d106      	bne.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dd2:	d102      	bne.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006dd4:	4b07      	ldr	r3, [pc, #28]	@ (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dd8:	e002      	b.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006dde:	e2e2      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006de0:	e2e1      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006de2:	4b05      	ldr	r3, [pc, #20]	@ (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006de6:	e2de      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006de8:	58024400 	.word	0x58024400
 8006dec:	03d09000 	.word	0x03d09000
 8006df0:	003d0900 	.word	0x003d0900
 8006df4:	007a1200 	.word	0x007a1200
 8006df8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e00:	e2d1      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006e02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e06:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006e0a:	430b      	orrs	r3, r1
 8006e0c:	f040 809c 	bne.w	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006e10:	4b93      	ldr	r3, [pc, #588]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e14:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006e18:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e20:	d054      	beq.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e28:	f200 808b 	bhi.w	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e32:	f000 8083 	beq.w	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e3c:	f200 8081 	bhi.w	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e46:	d02f      	beq.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e4e:	d878      	bhi.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d004      	beq.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e5c:	d012      	beq.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006e5e:	e070      	b.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e60:	4b7f      	ldr	r3, [pc, #508]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e6c:	d107      	bne.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 fd5e 	bl	8007934 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e7c:	e293      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e82:	e290      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e84:	4b76      	ldr	r3, [pc, #472]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e90:	d107      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e92:	f107 0318 	add.w	r3, r7, #24
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 faa4 	bl	80073e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ea0:	e281      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ea6:	e27e      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ea8:	4b6d      	ldr	r3, [pc, #436]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006eb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006eb4:	d107      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eb6:	f107 030c 	add.w	r3, r7, #12
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 fbe6 	bl	800768c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ec4:	e26f      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eca:	e26c      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ecc:	4b64      	ldr	r3, [pc, #400]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ed0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006ed4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ed6:	4b62      	ldr	r3, [pc, #392]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0304 	and.w	r3, r3, #4
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d10c      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d109      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ee8:	4b5d      	ldr	r3, [pc, #372]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	08db      	lsrs	r3, r3, #3
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	4a5c      	ldr	r2, [pc, #368]	@ (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006efa:	e01e      	b.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006efc:	4b58      	ldr	r3, [pc, #352]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f08:	d106      	bne.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f10:	d102      	bne.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f12:	4b55      	ldr	r3, [pc, #340]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f16:	e010      	b.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f18:	4b51      	ldr	r3, [pc, #324]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f24:	d106      	bne.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f2c:	d102      	bne.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f2e:	4b4f      	ldr	r3, [pc, #316]	@ (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f32:	e002      	b.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f34:	2300      	movs	r3, #0
 8006f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006f38:	e235      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f3a:	e234      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f3c:	4b4c      	ldr	r3, [pc, #304]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f40:	e231      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f42:	2300      	movs	r3, #0
 8006f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f46:	e22e      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f4c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006f50:	430b      	orrs	r3, r1
 8006f52:	f040 808f 	bne.w	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006f56:	4b42      	ldr	r3, [pc, #264]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f5a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f62:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f66:	d06b      	beq.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f6e:	d874      	bhi.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f76:	d056      	beq.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f7e:	d86c      	bhi.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f86:	d03b      	beq.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f8e:	d864      	bhi.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f96:	d021      	beq.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f9e:	d85c      	bhi.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d004      	beq.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fac:	d004      	beq.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006fae:	e054      	b.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006fb0:	f7fe fa4c 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 8006fb4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006fb6:	e1f6      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fb8:	4b29      	ldr	r3, [pc, #164]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fc4:	d107      	bne.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fc6:	f107 0318 	add.w	r3, r7, #24
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 fa0a 	bl	80073e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fd4:	e1e7      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fda:	e1e4      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fdc:	4b20      	ldr	r3, [pc, #128]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fe8:	d107      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fea:	f107 030c 	add.w	r3, r7, #12
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 fb4c 	bl	800768c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ff8:	e1d5      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ffe:	e1d2      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007000:	4b17      	ldr	r3, [pc, #92]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0304 	and.w	r3, r3, #4
 8007008:	2b04      	cmp	r3, #4
 800700a:	d109      	bne.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800700c:	4b14      	ldr	r3, [pc, #80]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	08db      	lsrs	r3, r3, #3
 8007012:	f003 0303 	and.w	r3, r3, #3
 8007016:	4a13      	ldr	r2, [pc, #76]	@ (8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007018:	fa22 f303 	lsr.w	r3, r2, r3
 800701c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800701e:	e1c2      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007020:	2300      	movs	r3, #0
 8007022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007024:	e1bf      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007026:	4b0e      	ldr	r3, [pc, #56]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800702e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007032:	d102      	bne.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007034:	4b0c      	ldr	r3, [pc, #48]	@ (8007068 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007038:	e1b5      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800703a:	2300      	movs	r3, #0
 800703c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800703e:	e1b2      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007040:	4b07      	ldr	r3, [pc, #28]	@ (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007048:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800704c:	d102      	bne.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800704e:	4b07      	ldr	r3, [pc, #28]	@ (800706c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007052:	e1a8      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007054:	2300      	movs	r3, #0
 8007056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007058:	e1a5      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800705e:	e1a2      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007060:	58024400 	.word	0x58024400
 8007064:	03d09000 	.word	0x03d09000
 8007068:	003d0900 	.word	0x003d0900
 800706c:	007a1200 	.word	0x007a1200
 8007070:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007078:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800707c:	430b      	orrs	r3, r1
 800707e:	d173      	bne.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007080:	4b9c      	ldr	r3, [pc, #624]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007084:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007088:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800708a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007090:	d02f      	beq.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007094:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007098:	d863      	bhi.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800709a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709c:	2b00      	cmp	r3, #0
 800709e:	d004      	beq.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80070a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070a6:	d012      	beq.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80070a8:	e05b      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070aa:	4b92      	ldr	r3, [pc, #584]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070b6:	d107      	bne.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070b8:	f107 0318 	add.w	r3, r7, #24
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 f991 	bl	80073e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070c6:	e16e      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070c8:	2300      	movs	r3, #0
 80070ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070cc:	e16b      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070ce:	4b89      	ldr	r3, [pc, #548]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070da:	d107      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070dc:	f107 030c 	add.w	r3, r7, #12
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 fad3 	bl	800768c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ea:	e15c      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070f0:	e159      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070f2:	4b80      	ldr	r3, [pc, #512]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80070fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070fc:	4b7d      	ldr	r3, [pc, #500]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0304 	and.w	r3, r3, #4
 8007104:	2b04      	cmp	r3, #4
 8007106:	d10c      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800710a:	2b00      	cmp	r3, #0
 800710c:	d109      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800710e:	4b79      	ldr	r3, [pc, #484]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	08db      	lsrs	r3, r3, #3
 8007114:	f003 0303 	and.w	r3, r3, #3
 8007118:	4a77      	ldr	r2, [pc, #476]	@ (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800711a:	fa22 f303 	lsr.w	r3, r2, r3
 800711e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007120:	e01e      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007122:	4b74      	ldr	r3, [pc, #464]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800712a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800712e:	d106      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007132:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007136:	d102      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007138:	4b70      	ldr	r3, [pc, #448]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800713a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800713c:	e010      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800713e:	4b6d      	ldr	r3, [pc, #436]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007146:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800714a:	d106      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800714c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800714e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007152:	d102      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007154:	4b6a      	ldr	r3, [pc, #424]	@ (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007158:	e002      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800715a:	2300      	movs	r3, #0
 800715c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800715e:	e122      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007160:	e121      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007162:	2300      	movs	r3, #0
 8007164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007166:	e11e      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800716c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007170:	430b      	orrs	r3, r1
 8007172:	d133      	bne.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007174:	4b5f      	ldr	r3, [pc, #380]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800717c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800717e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007180:	2b00      	cmp	r3, #0
 8007182:	d004      	beq.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007186:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800718a:	d012      	beq.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800718c:	e023      	b.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800718e:	4b59      	ldr	r3, [pc, #356]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007196:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800719a:	d107      	bne.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800719c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 fbc7 	bl	8007934 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071aa:	e0fc      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071b0:	e0f9      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071b2:	4b50      	ldr	r3, [pc, #320]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071be:	d107      	bne.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071c0:	f107 0318 	add.w	r3, r7, #24
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 f90d 	bl	80073e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071ce:	e0ea      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071d4:	e0e7      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80071d6:	2300      	movs	r3, #0
 80071d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071da:	e0e4      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80071dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071e0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80071e4:	430b      	orrs	r3, r1
 80071e6:	f040 808d 	bne.w	8007304 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80071ea:	4b42      	ldr	r3, [pc, #264]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80071ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ee:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80071f2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80071f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80071fa:	d06b      	beq.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80071fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007202:	d874      	bhi.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800720a:	d056      	beq.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800720c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007212:	d86c      	bhi.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007216:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800721a:	d03b      	beq.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800721c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800721e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007222:	d864      	bhi.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007226:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800722a:	d021      	beq.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800722c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800722e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007232:	d85c      	bhi.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007236:	2b00      	cmp	r3, #0
 8007238:	d004      	beq.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800723a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800723c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007240:	d004      	beq.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007242:	e054      	b.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007244:	f000 f8b8 	bl	80073b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007248:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800724a:	e0ac      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800724c:	4b29      	ldr	r3, [pc, #164]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007254:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007258:	d107      	bne.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800725a:	f107 0318 	add.w	r3, r7, #24
 800725e:	4618      	mov	r0, r3
 8007260:	f000 f8c0 	bl	80073e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007268:	e09d      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800726e:	e09a      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007270:	4b20      	ldr	r3, [pc, #128]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007278:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800727c:	d107      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800727e:	f107 030c 	add.w	r3, r7, #12
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fa02 	bl	800768c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800728c:	e08b      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800728e:	2300      	movs	r3, #0
 8007290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007292:	e088      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007294:	4b17      	ldr	r3, [pc, #92]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0304 	and.w	r3, r3, #4
 800729c:	2b04      	cmp	r3, #4
 800729e:	d109      	bne.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072a0:	4b14      	ldr	r3, [pc, #80]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	08db      	lsrs	r3, r3, #3
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	4a13      	ldr	r2, [pc, #76]	@ (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80072ac:	fa22 f303 	lsr.w	r3, r2, r3
 80072b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072b2:	e078      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072b8:	e075      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80072ba:	4b0e      	ldr	r3, [pc, #56]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072c6:	d102      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80072c8:	4b0c      	ldr	r3, [pc, #48]	@ (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80072ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072cc:	e06b      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072ce:	2300      	movs	r3, #0
 80072d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072d2:	e068      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80072d4:	4b07      	ldr	r3, [pc, #28]	@ (80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072e0:	d102      	bne.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80072e2:	4b07      	ldr	r3, [pc, #28]	@ (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80072e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072e6:	e05e      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072e8:	2300      	movs	r3, #0
 80072ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072ec:	e05b      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80072ee:	2300      	movs	r3, #0
 80072f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072f2:	e058      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072f4:	58024400 	.word	0x58024400
 80072f8:	03d09000 	.word	0x03d09000
 80072fc:	003d0900 	.word	0x003d0900
 8007300:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007308:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800730c:	430b      	orrs	r3, r1
 800730e:	d148      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007310:	4b27      	ldr	r3, [pc, #156]	@ (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007314:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007318:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800731a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007320:	d02a      	beq.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007324:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007328:	d838      	bhi.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800732a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732c:	2b00      	cmp	r3, #0
 800732e:	d004      	beq.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007332:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007336:	d00d      	beq.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007338:	e030      	b.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800733a:	4b1d      	ldr	r3, [pc, #116]	@ (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007342:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007346:	d102      	bne.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007348:	4b1a      	ldr	r3, [pc, #104]	@ (80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800734a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800734c:	e02b      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800734e:	2300      	movs	r3, #0
 8007350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007352:	e028      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007354:	4b16      	ldr	r3, [pc, #88]	@ (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800735c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007360:	d107      	bne.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007362:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007366:	4618      	mov	r0, r3
 8007368:	f000 fae4 	bl	8007934 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800736c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007370:	e019      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007372:	2300      	movs	r3, #0
 8007374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007376:	e016      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007378:	4b0d      	ldr	r3, [pc, #52]	@ (80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007380:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007384:	d107      	bne.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007386:	f107 0318 	add.w	r3, r7, #24
 800738a:	4618      	mov	r0, r3
 800738c:	f000 f82a 	bl	80073e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007394:	e007      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007396:	2300      	movs	r3, #0
 8007398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800739a:	e004      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073a0:	e001      	b.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80073a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3740      	adds	r7, #64	@ 0x40
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	58024400 	.word	0x58024400
 80073b4:	007a1200 	.word	0x007a1200

080073b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80073bc:	f7fe f816 	bl	80053ec <HAL_RCC_GetHCLKFreq>
 80073c0:	4602      	mov	r2, r0
 80073c2:	4b06      	ldr	r3, [pc, #24]	@ (80073dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	091b      	lsrs	r3, r3, #4
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	4904      	ldr	r1, [pc, #16]	@ (80073e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80073ce:	5ccb      	ldrb	r3, [r1, r3]
 80073d0:	f003 031f 	and.w	r3, r3, #31
 80073d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80073d8:	4618      	mov	r0, r3
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	58024400 	.word	0x58024400
 80073e0:	080093e0 	.word	0x080093e0

080073e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b089      	sub	sp, #36	@ 0x24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073ec:	4ba1      	ldr	r3, [pc, #644]	@ (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f0:	f003 0303 	and.w	r3, r3, #3
 80073f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80073f6:	4b9f      	ldr	r3, [pc, #636]	@ (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073fa:	0b1b      	lsrs	r3, r3, #12
 80073fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007400:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007402:	4b9c      	ldr	r3, [pc, #624]	@ (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007406:	091b      	lsrs	r3, r3, #4
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800740e:	4b99      	ldr	r3, [pc, #612]	@ (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007412:	08db      	lsrs	r3, r3, #3
 8007414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	fb02 f303 	mul.w	r3, r2, r3
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007426:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8111 	beq.w	8007654 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	2b02      	cmp	r3, #2
 8007436:	f000 8083 	beq.w	8007540 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	2b02      	cmp	r3, #2
 800743e:	f200 80a1 	bhi.w	8007584 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d056      	beq.n	80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800744e:	e099      	b.n	8007584 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007450:	4b88      	ldr	r3, [pc, #544]	@ (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0320 	and.w	r3, r3, #32
 8007458:	2b00      	cmp	r3, #0
 800745a:	d02d      	beq.n	80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800745c:	4b85      	ldr	r3, [pc, #532]	@ (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	08db      	lsrs	r3, r3, #3
 8007462:	f003 0303 	and.w	r3, r3, #3
 8007466:	4a84      	ldr	r2, [pc, #528]	@ (8007678 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007468:	fa22 f303 	lsr.w	r3, r2, r3
 800746c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	ee07 3a90 	vmov	s15, r3
 8007474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007486:	4b7b      	ldr	r3, [pc, #492]	@ (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800748a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007496:	ed97 6a03 	vldr	s12, [r7, #12]
 800749a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800767c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800749e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80074b6:	e087      	b.n	80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80074c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ca:	4b6a      	ldr	r3, [pc, #424]	@ (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074da:	ed97 6a03 	vldr	s12, [r7, #12]
 80074de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800767c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074fa:	e065      	b.n	80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007506:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800750a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750e:	4b59      	ldr	r3, [pc, #356]	@ (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007522:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800767c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800753e:	e043      	b.n	80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007688 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800754e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007552:	4b48      	ldr	r3, [pc, #288]	@ (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007562:	ed97 6a03 	vldr	s12, [r7, #12]
 8007566:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800767c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800756a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007572:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007582:	e021      	b.n	80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007596:	4b37      	ldr	r3, [pc, #220]	@ (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800759a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800767c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80075c8:	4b2a      	ldr	r3, [pc, #168]	@ (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075cc:	0a5b      	lsrs	r3, r3, #9
 80075ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80075e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ee:	ee17 2a90 	vmov	r2, s15
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80075f6:	4b1f      	ldr	r3, [pc, #124]	@ (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fa:	0c1b      	lsrs	r3, r3, #16
 80075fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007600:	ee07 3a90 	vmov	s15, r3
 8007604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007608:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800760c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007610:	edd7 6a07 	vldr	s13, [r7, #28]
 8007614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800761c:	ee17 2a90 	vmov	r2, s15
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007624:	4b13      	ldr	r3, [pc, #76]	@ (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007628:	0e1b      	lsrs	r3, r3, #24
 800762a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007636:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800763a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800763e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800764a:	ee17 2a90 	vmov	r2, s15
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007652:	e008      	b.n	8007666 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	609a      	str	r2, [r3, #8]
}
 8007666:	bf00      	nop
 8007668:	3724      	adds	r7, #36	@ 0x24
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	58024400 	.word	0x58024400
 8007678:	03d09000 	.word	0x03d09000
 800767c:	46000000 	.word	0x46000000
 8007680:	4c742400 	.word	0x4c742400
 8007684:	4a742400 	.word	0x4a742400
 8007688:	4af42400 	.word	0x4af42400

0800768c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800768c:	b480      	push	{r7}
 800768e:	b089      	sub	sp, #36	@ 0x24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007694:	4ba1      	ldr	r3, [pc, #644]	@ (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007698:	f003 0303 	and.w	r3, r3, #3
 800769c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800769e:	4b9f      	ldr	r3, [pc, #636]	@ (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a2:	0d1b      	lsrs	r3, r3, #20
 80076a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80076aa:	4b9c      	ldr	r3, [pc, #624]	@ (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ae:	0a1b      	lsrs	r3, r3, #8
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80076b6:	4b99      	ldr	r3, [pc, #612]	@ (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ba:	08db      	lsrs	r3, r3, #3
 80076bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	fb02 f303 	mul.w	r3, r2, r3
 80076c6:	ee07 3a90 	vmov	s15, r3
 80076ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 8111 	beq.w	80078fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	f000 8083 	beq.w	80077e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	f200 80a1 	bhi.w	800782c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d003      	beq.n	80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d056      	beq.n	80077a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80076f6:	e099      	b.n	800782c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076f8:	4b88      	ldr	r3, [pc, #544]	@ (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0320 	and.w	r3, r3, #32
 8007700:	2b00      	cmp	r3, #0
 8007702:	d02d      	beq.n	8007760 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007704:	4b85      	ldr	r3, [pc, #532]	@ (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	08db      	lsrs	r3, r3, #3
 800770a:	f003 0303 	and.w	r3, r3, #3
 800770e:	4a84      	ldr	r2, [pc, #528]	@ (8007920 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007710:	fa22 f303 	lsr.w	r3, r2, r3
 8007714:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	ee07 3a90 	vmov	s15, r3
 800771c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	ee07 3a90 	vmov	s15, r3
 8007726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800772a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800772e:	4b7b      	ldr	r3, [pc, #492]	@ (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800773e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007742:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800774a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800774e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800775a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800775e:	e087      	b.n	8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	ee07 3a90 	vmov	s15, r3
 8007766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007928 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800776e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007772:	4b6a      	ldr	r3, [pc, #424]	@ (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007782:	ed97 6a03 	vldr	s12, [r7, #12]
 8007786:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800778a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800778e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800779a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800779e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077a2:	e065      	b.n	8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800792c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077b6:	4b59      	ldr	r3, [pc, #356]	@ (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077be:	ee07 3a90 	vmov	s15, r3
 80077c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077e6:	e043      	b.n	8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	ee07 3a90 	vmov	s15, r3
 80077ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007930 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80077f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077fa:	4b48      	ldr	r3, [pc, #288]	@ (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800780a:	ed97 6a03 	vldr	s12, [r7, #12]
 800780e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800781a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800781e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800782a:	e021      	b.n	8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007836:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800792c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800783a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800783e:	4b37      	ldr	r3, [pc, #220]	@ (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007846:	ee07 3a90 	vmov	s15, r3
 800784a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007852:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800785a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800785e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800786e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007870:	4b2a      	ldr	r3, [pc, #168]	@ (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007874:	0a5b      	lsrs	r3, r3, #9
 8007876:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800787a:	ee07 3a90 	vmov	s15, r3
 800787e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007882:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007886:	ee37 7a87 	vadd.f32	s14, s15, s14
 800788a:	edd7 6a07 	vldr	s13, [r7, #28]
 800788e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007896:	ee17 2a90 	vmov	r2, s15
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800789e:	4b1f      	ldr	r3, [pc, #124]	@ (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a2:	0c1b      	lsrs	r3, r3, #16
 80078a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078a8:	ee07 3a90 	vmov	s15, r3
 80078ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80078bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078c4:	ee17 2a90 	vmov	r2, s15
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80078cc:	4b13      	ldr	r3, [pc, #76]	@ (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d0:	0e1b      	lsrs	r3, r3, #24
 80078d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078d6:	ee07 3a90 	vmov	s15, r3
 80078da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80078ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078f2:	ee17 2a90 	vmov	r2, s15
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80078fa:	e008      	b.n	800790e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	609a      	str	r2, [r3, #8]
}
 800790e:	bf00      	nop
 8007910:	3724      	adds	r7, #36	@ 0x24
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	58024400 	.word	0x58024400
 8007920:	03d09000 	.word	0x03d09000
 8007924:	46000000 	.word	0x46000000
 8007928:	4c742400 	.word	0x4c742400
 800792c:	4a742400 	.word	0x4a742400
 8007930:	4af42400 	.word	0x4af42400

08007934 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007934:	b480      	push	{r7}
 8007936:	b089      	sub	sp, #36	@ 0x24
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800793c:	4ba0      	ldr	r3, [pc, #640]	@ (8007bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800793e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007940:	f003 0303 	and.w	r3, r3, #3
 8007944:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007946:	4b9e      	ldr	r3, [pc, #632]	@ (8007bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800794a:	091b      	lsrs	r3, r3, #4
 800794c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007950:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007952:	4b9b      	ldr	r3, [pc, #620]	@ (8007bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800795c:	4b98      	ldr	r3, [pc, #608]	@ (8007bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800795e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007960:	08db      	lsrs	r3, r3, #3
 8007962:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	fb02 f303 	mul.w	r3, r2, r3
 800796c:	ee07 3a90 	vmov	s15, r3
 8007970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007974:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 8111 	beq.w	8007ba2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	2b02      	cmp	r3, #2
 8007984:	f000 8083 	beq.w	8007a8e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	2b02      	cmp	r3, #2
 800798c:	f200 80a1 	bhi.w	8007ad2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d056      	beq.n	8007a4a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800799c:	e099      	b.n	8007ad2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800799e:	4b88      	ldr	r3, [pc, #544]	@ (8007bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 0320 	and.w	r3, r3, #32
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d02d      	beq.n	8007a06 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079aa:	4b85      	ldr	r3, [pc, #532]	@ (8007bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	08db      	lsrs	r3, r3, #3
 80079b0:	f003 0303 	and.w	r3, r3, #3
 80079b4:	4a83      	ldr	r2, [pc, #524]	@ (8007bc4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80079b6:	fa22 f303 	lsr.w	r3, r2, r3
 80079ba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	ee07 3a90 	vmov	s15, r3
 80079c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	ee07 3a90 	vmov	s15, r3
 80079cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079d4:	4b7a      	ldr	r3, [pc, #488]	@ (8007bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079dc:	ee07 3a90 	vmov	s15, r3
 80079e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80079e8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a00:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a04:	e087      	b.n	8007b16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	ee07 3a90 	vmov	s15, r3
 8007a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a10:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007bcc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a18:	4b69      	ldr	r3, [pc, #420]	@ (8007bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a20:	ee07 3a90 	vmov	s15, r3
 8007a24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a28:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a2c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a48:	e065      	b.n	8007b16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	ee07 3a90 	vmov	s15, r3
 8007a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a54:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007a58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a5c:	4b58      	ldr	r3, [pc, #352]	@ (8007bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a64:	ee07 3a90 	vmov	s15, r3
 8007a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a70:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a8c:	e043      	b.n	8007b16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	ee07 3a90 	vmov	s15, r3
 8007a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a98:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007a9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aa0:	4b47      	ldr	r3, [pc, #284]	@ (8007bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa8:	ee07 3a90 	vmov	s15, r3
 8007aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ab4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ab8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007abc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ac0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ac4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007acc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ad0:	e021      	b.n	8007b16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	ee07 3a90 	vmov	s15, r3
 8007ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007adc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007bcc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007ae0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ae4:	4b36      	ldr	r3, [pc, #216]	@ (8007bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aec:	ee07 3a90 	vmov	s15, r3
 8007af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007af4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007af8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007afc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b14:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007b16:	4b2a      	ldr	r3, [pc, #168]	@ (8007bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b1a:	0a5b      	lsrs	r3, r3, #9
 8007b1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b20:	ee07 3a90 	vmov	s15, r3
 8007b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b30:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b3c:	ee17 2a90 	vmov	r2, s15
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007b44:	4b1e      	ldr	r3, [pc, #120]	@ (8007bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b48:	0c1b      	lsrs	r3, r3, #16
 8007b4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b6a:	ee17 2a90 	vmov	r2, s15
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007b72:	4b13      	ldr	r3, [pc, #76]	@ (8007bc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b76:	0e1b      	lsrs	r3, r3, #24
 8007b78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b7c:	ee07 3a90 	vmov	s15, r3
 8007b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b98:	ee17 2a90 	vmov	r2, s15
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007ba0:	e008      	b.n	8007bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	609a      	str	r2, [r3, #8]
}
 8007bb4:	bf00      	nop
 8007bb6:	3724      	adds	r7, #36	@ 0x24
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	58024400 	.word	0x58024400
 8007bc4:	03d09000 	.word	0x03d09000
 8007bc8:	46000000 	.word	0x46000000
 8007bcc:	4c742400 	.word	0x4c742400
 8007bd0:	4a742400 	.word	0x4a742400
 8007bd4:	4af42400 	.word	0x4af42400

08007bd8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007be6:	4b53      	ldr	r3, [pc, #332]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bea:	f003 0303 	and.w	r3, r3, #3
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	d101      	bne.n	8007bf6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e099      	b.n	8007d2a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007bf6:	4b4f      	ldr	r3, [pc, #316]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a4e      	ldr	r2, [pc, #312]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007bfc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c02:	f7f9 fccf 	bl	80015a4 <HAL_GetTick>
 8007c06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c08:	e008      	b.n	8007c1c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c0a:	f7f9 fccb 	bl	80015a4 <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d901      	bls.n	8007c1c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e086      	b.n	8007d2a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c1c:	4b45      	ldr	r3, [pc, #276]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1f0      	bne.n	8007c0a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c28:	4b42      	ldr	r3, [pc, #264]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	031b      	lsls	r3, r3, #12
 8007c36:	493f      	ldr	r1, [pc, #252]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	3b01      	subs	r3, #1
 8007c42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	025b      	lsls	r3, r3, #9
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	431a      	orrs	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	3b01      	subs	r3, #1
 8007c58:	041b      	lsls	r3, r3, #16
 8007c5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c5e:	431a      	orrs	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	3b01      	subs	r3, #1
 8007c66:	061b      	lsls	r3, r3, #24
 8007c68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007c6c:	4931      	ldr	r1, [pc, #196]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007c72:	4b30      	ldr	r3, [pc, #192]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c76:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	492d      	ldr	r1, [pc, #180]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007c80:	4313      	orrs	r3, r2
 8007c82:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c84:	4b2b      	ldr	r3, [pc, #172]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	f023 0220 	bic.w	r2, r3, #32
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	4928      	ldr	r1, [pc, #160]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007c96:	4b27      	ldr	r3, [pc, #156]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c9a:	4a26      	ldr	r2, [pc, #152]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007c9c:	f023 0310 	bic.w	r3, r3, #16
 8007ca0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007ca2:	4b24      	ldr	r3, [pc, #144]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007ca4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ca6:	4b24      	ldr	r3, [pc, #144]	@ (8007d38 <RCCEx_PLL2_Config+0x160>)
 8007ca8:	4013      	ands	r3, r2
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	69d2      	ldr	r2, [r2, #28]
 8007cae:	00d2      	lsls	r2, r2, #3
 8007cb0:	4920      	ldr	r1, [pc, #128]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cba:	4a1e      	ldr	r2, [pc, #120]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007cbc:	f043 0310 	orr.w	r3, r3, #16
 8007cc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d106      	bne.n	8007cd6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ccc:	4a19      	ldr	r2, [pc, #100]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007cce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007cd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007cd4:	e00f      	b.n	8007cf6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d106      	bne.n	8007cea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007cdc:	4b15      	ldr	r3, [pc, #84]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce0:	4a14      	ldr	r2, [pc, #80]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007ce2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ce6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ce8:	e005      	b.n	8007cf6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007cea:	4b12      	ldr	r3, [pc, #72]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cee:	4a11      	ldr	r2, [pc, #68]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007cf0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007cf4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a0e      	ldr	r2, [pc, #56]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007cfc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d02:	f7f9 fc4f 	bl	80015a4 <HAL_GetTick>
 8007d06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d08:	e008      	b.n	8007d1c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d0a:	f7f9 fc4b 	bl	80015a4 <HAL_GetTick>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d901      	bls.n	8007d1c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e006      	b.n	8007d2a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d1c:	4b05      	ldr	r3, [pc, #20]	@ (8007d34 <RCCEx_PLL2_Config+0x15c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d0f0      	beq.n	8007d0a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	58024400 	.word	0x58024400
 8007d38:	ffff0007 	.word	0xffff0007

08007d3c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d4a:	4b53      	ldr	r3, [pc, #332]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d4e:	f003 0303 	and.w	r3, r3, #3
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d101      	bne.n	8007d5a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e099      	b.n	8007e8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d5a:	4b4f      	ldr	r3, [pc, #316]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a4e      	ldr	r2, [pc, #312]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007d60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d66:	f7f9 fc1d 	bl	80015a4 <HAL_GetTick>
 8007d6a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d6c:	e008      	b.n	8007d80 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d6e:	f7f9 fc19 	bl	80015a4 <HAL_GetTick>
 8007d72:	4602      	mov	r2, r0
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d901      	bls.n	8007d80 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e086      	b.n	8007e8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d80:	4b45      	ldr	r3, [pc, #276]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1f0      	bne.n	8007d6e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007d8c:	4b42      	ldr	r3, [pc, #264]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d90:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	051b      	lsls	r3, r3, #20
 8007d9a:	493f      	ldr	r1, [pc, #252]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	3b01      	subs	r3, #1
 8007da6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	3b01      	subs	r3, #1
 8007db0:	025b      	lsls	r3, r3, #9
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	431a      	orrs	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	041b      	lsls	r3, r3, #16
 8007dbe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	061b      	lsls	r3, r3, #24
 8007dcc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007dd0:	4931      	ldr	r1, [pc, #196]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007dd6:	4b30      	ldr	r3, [pc, #192]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dda:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	492d      	ldr	r1, [pc, #180]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007de8:	4b2b      	ldr	r3, [pc, #172]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	4928      	ldr	r1, [pc, #160]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007dfa:	4b27      	ldr	r3, [pc, #156]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfe:	4a26      	ldr	r2, [pc, #152]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007e00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e06:	4b24      	ldr	r3, [pc, #144]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007e08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e0a:	4b24      	ldr	r3, [pc, #144]	@ (8007e9c <RCCEx_PLL3_Config+0x160>)
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	69d2      	ldr	r2, [r2, #28]
 8007e12:	00d2      	lsls	r2, r2, #3
 8007e14:	4920      	ldr	r1, [pc, #128]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007e20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d106      	bne.n	8007e3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e30:	4a19      	ldr	r2, [pc, #100]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007e32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007e36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007e38:	e00f      	b.n	8007e5a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d106      	bne.n	8007e4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007e40:	4b15      	ldr	r3, [pc, #84]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e44:	4a14      	ldr	r2, [pc, #80]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007e46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007e4c:	e005      	b.n	8007e5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007e4e:	4b12      	ldr	r3, [pc, #72]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e52:	4a11      	ldr	r2, [pc, #68]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007e54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e66:	f7f9 fb9d 	bl	80015a4 <HAL_GetTick>
 8007e6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e6c:	e008      	b.n	8007e80 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e6e:	f7f9 fb99 	bl	80015a4 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d901      	bls.n	8007e80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e006      	b.n	8007e8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e80:	4b05      	ldr	r3, [pc, #20]	@ (8007e98 <RCCEx_PLL3_Config+0x15c>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d0f0      	beq.n	8007e6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	58024400 	.word	0x58024400
 8007e9c:	ffff0007 	.word	0xffff0007

08007ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e049      	b.n	8007f46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d106      	bne.n	8007ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7f9 f924 	bl	8001114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3304      	adds	r3, #4
 8007edc:	4619      	mov	r1, r3
 8007ede:	4610      	mov	r0, r2
 8007ee0:	f000 f836 	bl	8007f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a46      	ldr	r2, [pc, #280]	@ (800807c <TIM_Base_SetConfig+0x12c>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d013      	beq.n	8007f90 <TIM_Base_SetConfig+0x40>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f6e:	d00f      	beq.n	8007f90 <TIM_Base_SetConfig+0x40>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a43      	ldr	r2, [pc, #268]	@ (8008080 <TIM_Base_SetConfig+0x130>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d00b      	beq.n	8007f90 <TIM_Base_SetConfig+0x40>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a42      	ldr	r2, [pc, #264]	@ (8008084 <TIM_Base_SetConfig+0x134>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d007      	beq.n	8007f90 <TIM_Base_SetConfig+0x40>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a41      	ldr	r2, [pc, #260]	@ (8008088 <TIM_Base_SetConfig+0x138>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d003      	beq.n	8007f90 <TIM_Base_SetConfig+0x40>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a40      	ldr	r2, [pc, #256]	@ (800808c <TIM_Base_SetConfig+0x13c>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d108      	bne.n	8007fa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a35      	ldr	r2, [pc, #212]	@ (800807c <TIM_Base_SetConfig+0x12c>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d01f      	beq.n	8007fea <TIM_Base_SetConfig+0x9a>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fb0:	d01b      	beq.n	8007fea <TIM_Base_SetConfig+0x9a>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a32      	ldr	r2, [pc, #200]	@ (8008080 <TIM_Base_SetConfig+0x130>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d017      	beq.n	8007fea <TIM_Base_SetConfig+0x9a>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a31      	ldr	r2, [pc, #196]	@ (8008084 <TIM_Base_SetConfig+0x134>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d013      	beq.n	8007fea <TIM_Base_SetConfig+0x9a>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a30      	ldr	r2, [pc, #192]	@ (8008088 <TIM_Base_SetConfig+0x138>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d00f      	beq.n	8007fea <TIM_Base_SetConfig+0x9a>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a2f      	ldr	r2, [pc, #188]	@ (800808c <TIM_Base_SetConfig+0x13c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d00b      	beq.n	8007fea <TIM_Base_SetConfig+0x9a>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a2e      	ldr	r2, [pc, #184]	@ (8008090 <TIM_Base_SetConfig+0x140>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d007      	beq.n	8007fea <TIM_Base_SetConfig+0x9a>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a2d      	ldr	r2, [pc, #180]	@ (8008094 <TIM_Base_SetConfig+0x144>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d003      	beq.n	8007fea <TIM_Base_SetConfig+0x9a>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a2c      	ldr	r2, [pc, #176]	@ (8008098 <TIM_Base_SetConfig+0x148>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d108      	bne.n	8007ffc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	4313      	orrs	r3, r2
 8008008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a16      	ldr	r2, [pc, #88]	@ (800807c <TIM_Base_SetConfig+0x12c>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d00f      	beq.n	8008048 <TIM_Base_SetConfig+0xf8>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a18      	ldr	r2, [pc, #96]	@ (800808c <TIM_Base_SetConfig+0x13c>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d00b      	beq.n	8008048 <TIM_Base_SetConfig+0xf8>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a17      	ldr	r2, [pc, #92]	@ (8008090 <TIM_Base_SetConfig+0x140>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d007      	beq.n	8008048 <TIM_Base_SetConfig+0xf8>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a16      	ldr	r2, [pc, #88]	@ (8008094 <TIM_Base_SetConfig+0x144>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d003      	beq.n	8008048 <TIM_Base_SetConfig+0xf8>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a15      	ldr	r2, [pc, #84]	@ (8008098 <TIM_Base_SetConfig+0x148>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d103      	bne.n	8008050 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	691a      	ldr	r2, [r3, #16]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b01      	cmp	r3, #1
 8008060:	d105      	bne.n	800806e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	f023 0201 	bic.w	r2, r3, #1
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	611a      	str	r2, [r3, #16]
  }
}
 800806e:	bf00      	nop
 8008070:	3714      	adds	r7, #20
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	40010000 	.word	0x40010000
 8008080:	40000400 	.word	0x40000400
 8008084:	40000800 	.word	0x40000800
 8008088:	40000c00 	.word	0x40000c00
 800808c:	40010400 	.word	0x40010400
 8008090:	40014000 	.word	0x40014000
 8008094:	40014400 	.word	0x40014400
 8008098:	40014800 	.word	0x40014800

0800809c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d101      	bne.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080b0:	2302      	movs	r3, #2
 80080b2:	e06d      	b.n	8008190 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2202      	movs	r2, #2
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a30      	ldr	r2, [pc, #192]	@ (800819c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d004      	beq.n	80080e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a2f      	ldr	r2, [pc, #188]	@ (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d108      	bne.n	80080fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80080ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008100:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	4313      	orrs	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a20      	ldr	r2, [pc, #128]	@ (800819c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d022      	beq.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008126:	d01d      	beq.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a1d      	ldr	r2, [pc, #116]	@ (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d018      	beq.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a1c      	ldr	r2, [pc, #112]	@ (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d013      	beq.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a1a      	ldr	r2, [pc, #104]	@ (80081ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d00e      	beq.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a15      	ldr	r2, [pc, #84]	@ (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d009      	beq.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a16      	ldr	r2, [pc, #88]	@ (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d004      	beq.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a15      	ldr	r2, [pc, #84]	@ (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d10c      	bne.n	800817e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800816a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	4313      	orrs	r3, r2
 8008174:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	40010000 	.word	0x40010000
 80081a0:	40010400 	.word	0x40010400
 80081a4:	40000400 	.word	0x40000400
 80081a8:	40000800 	.word	0x40000800
 80081ac:	40000c00 	.word	0x40000c00
 80081b0:	40001800 	.word	0x40001800
 80081b4:	40014000 	.word	0x40014000

080081b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d101      	bne.n	80081ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e042      	b.n	8008250 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d106      	bne.n	80081e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7f8 ffbb 	bl	8001158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2224      	movs	r2, #36	@ 0x24
 80081e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f022 0201 	bic.w	r2, r2, #1
 80081f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d002      	beq.n	8008208 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fd90 	bl	8008d28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f825 	bl	8008258 <UART_SetConfig>
 800820e:	4603      	mov	r3, r0
 8008210:	2b01      	cmp	r3, #1
 8008212:	d101      	bne.n	8008218 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e01b      	b.n	8008250 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008226:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008236:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f042 0201 	orr.w	r2, r2, #1
 8008246:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fe0f 	bl	8008e6c <UART_CheckIdleState>
 800824e:	4603      	mov	r3, r0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800825c:	b092      	sub	sp, #72	@ 0x48
 800825e:	af00      	add	r7, sp, #0
 8008260:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	689a      	ldr	r2, [r3, #8]
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	431a      	orrs	r2, r3
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	431a      	orrs	r2, r3
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	4313      	orrs	r3, r2
 800827e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	4bbe      	ldr	r3, [pc, #760]	@ (8008580 <UART_SetConfig+0x328>)
 8008288:	4013      	ands	r3, r2
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	6812      	ldr	r2, [r2, #0]
 800828e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008290:	430b      	orrs	r3, r1
 8008292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	68da      	ldr	r2, [r3, #12]
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4ab3      	ldr	r2, [pc, #716]	@ (8008584 <UART_SetConfig+0x32c>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d004      	beq.n	80082c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	6a1b      	ldr	r3, [r3, #32]
 80082be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082c0:	4313      	orrs	r3, r2
 80082c2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689a      	ldr	r2, [r3, #8]
 80082ca:	4baf      	ldr	r3, [pc, #700]	@ (8008588 <UART_SetConfig+0x330>)
 80082cc:	4013      	ands	r3, r2
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	6812      	ldr	r2, [r2, #0]
 80082d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80082d4:	430b      	orrs	r3, r1
 80082d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082de:	f023 010f 	bic.w	r1, r3, #15
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	430a      	orrs	r2, r1
 80082ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4aa6      	ldr	r2, [pc, #664]	@ (800858c <UART_SetConfig+0x334>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d177      	bne.n	80083e8 <UART_SetConfig+0x190>
 80082f8:	4ba5      	ldr	r3, [pc, #660]	@ (8008590 <UART_SetConfig+0x338>)
 80082fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008300:	2b28      	cmp	r3, #40	@ 0x28
 8008302:	d86d      	bhi.n	80083e0 <UART_SetConfig+0x188>
 8008304:	a201      	add	r2, pc, #4	@ (adr r2, 800830c <UART_SetConfig+0xb4>)
 8008306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830a:	bf00      	nop
 800830c:	080083b1 	.word	0x080083b1
 8008310:	080083e1 	.word	0x080083e1
 8008314:	080083e1 	.word	0x080083e1
 8008318:	080083e1 	.word	0x080083e1
 800831c:	080083e1 	.word	0x080083e1
 8008320:	080083e1 	.word	0x080083e1
 8008324:	080083e1 	.word	0x080083e1
 8008328:	080083e1 	.word	0x080083e1
 800832c:	080083b9 	.word	0x080083b9
 8008330:	080083e1 	.word	0x080083e1
 8008334:	080083e1 	.word	0x080083e1
 8008338:	080083e1 	.word	0x080083e1
 800833c:	080083e1 	.word	0x080083e1
 8008340:	080083e1 	.word	0x080083e1
 8008344:	080083e1 	.word	0x080083e1
 8008348:	080083e1 	.word	0x080083e1
 800834c:	080083c1 	.word	0x080083c1
 8008350:	080083e1 	.word	0x080083e1
 8008354:	080083e1 	.word	0x080083e1
 8008358:	080083e1 	.word	0x080083e1
 800835c:	080083e1 	.word	0x080083e1
 8008360:	080083e1 	.word	0x080083e1
 8008364:	080083e1 	.word	0x080083e1
 8008368:	080083e1 	.word	0x080083e1
 800836c:	080083c9 	.word	0x080083c9
 8008370:	080083e1 	.word	0x080083e1
 8008374:	080083e1 	.word	0x080083e1
 8008378:	080083e1 	.word	0x080083e1
 800837c:	080083e1 	.word	0x080083e1
 8008380:	080083e1 	.word	0x080083e1
 8008384:	080083e1 	.word	0x080083e1
 8008388:	080083e1 	.word	0x080083e1
 800838c:	080083d1 	.word	0x080083d1
 8008390:	080083e1 	.word	0x080083e1
 8008394:	080083e1 	.word	0x080083e1
 8008398:	080083e1 	.word	0x080083e1
 800839c:	080083e1 	.word	0x080083e1
 80083a0:	080083e1 	.word	0x080083e1
 80083a4:	080083e1 	.word	0x080083e1
 80083a8:	080083e1 	.word	0x080083e1
 80083ac:	080083d9 	.word	0x080083d9
 80083b0:	2301      	movs	r3, #1
 80083b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083b6:	e222      	b.n	80087fe <UART_SetConfig+0x5a6>
 80083b8:	2304      	movs	r3, #4
 80083ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083be:	e21e      	b.n	80087fe <UART_SetConfig+0x5a6>
 80083c0:	2308      	movs	r3, #8
 80083c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083c6:	e21a      	b.n	80087fe <UART_SetConfig+0x5a6>
 80083c8:	2310      	movs	r3, #16
 80083ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ce:	e216      	b.n	80087fe <UART_SetConfig+0x5a6>
 80083d0:	2320      	movs	r3, #32
 80083d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083d6:	e212      	b.n	80087fe <UART_SetConfig+0x5a6>
 80083d8:	2340      	movs	r3, #64	@ 0x40
 80083da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083de:	e20e      	b.n	80087fe <UART_SetConfig+0x5a6>
 80083e0:	2380      	movs	r3, #128	@ 0x80
 80083e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083e6:	e20a      	b.n	80087fe <UART_SetConfig+0x5a6>
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a69      	ldr	r2, [pc, #420]	@ (8008594 <UART_SetConfig+0x33c>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d130      	bne.n	8008454 <UART_SetConfig+0x1fc>
 80083f2:	4b67      	ldr	r3, [pc, #412]	@ (8008590 <UART_SetConfig+0x338>)
 80083f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083f6:	f003 0307 	and.w	r3, r3, #7
 80083fa:	2b05      	cmp	r3, #5
 80083fc:	d826      	bhi.n	800844c <UART_SetConfig+0x1f4>
 80083fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008404 <UART_SetConfig+0x1ac>)
 8008400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008404:	0800841d 	.word	0x0800841d
 8008408:	08008425 	.word	0x08008425
 800840c:	0800842d 	.word	0x0800842d
 8008410:	08008435 	.word	0x08008435
 8008414:	0800843d 	.word	0x0800843d
 8008418:	08008445 	.word	0x08008445
 800841c:	2300      	movs	r3, #0
 800841e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008422:	e1ec      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008424:	2304      	movs	r3, #4
 8008426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800842a:	e1e8      	b.n	80087fe <UART_SetConfig+0x5a6>
 800842c:	2308      	movs	r3, #8
 800842e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008432:	e1e4      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008434:	2310      	movs	r3, #16
 8008436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800843a:	e1e0      	b.n	80087fe <UART_SetConfig+0x5a6>
 800843c:	2320      	movs	r3, #32
 800843e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008442:	e1dc      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008444:	2340      	movs	r3, #64	@ 0x40
 8008446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800844a:	e1d8      	b.n	80087fe <UART_SetConfig+0x5a6>
 800844c:	2380      	movs	r3, #128	@ 0x80
 800844e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008452:	e1d4      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a4f      	ldr	r2, [pc, #316]	@ (8008598 <UART_SetConfig+0x340>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d130      	bne.n	80084c0 <UART_SetConfig+0x268>
 800845e:	4b4c      	ldr	r3, [pc, #304]	@ (8008590 <UART_SetConfig+0x338>)
 8008460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008462:	f003 0307 	and.w	r3, r3, #7
 8008466:	2b05      	cmp	r3, #5
 8008468:	d826      	bhi.n	80084b8 <UART_SetConfig+0x260>
 800846a:	a201      	add	r2, pc, #4	@ (adr r2, 8008470 <UART_SetConfig+0x218>)
 800846c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008470:	08008489 	.word	0x08008489
 8008474:	08008491 	.word	0x08008491
 8008478:	08008499 	.word	0x08008499
 800847c:	080084a1 	.word	0x080084a1
 8008480:	080084a9 	.word	0x080084a9
 8008484:	080084b1 	.word	0x080084b1
 8008488:	2300      	movs	r3, #0
 800848a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800848e:	e1b6      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008490:	2304      	movs	r3, #4
 8008492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008496:	e1b2      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008498:	2308      	movs	r3, #8
 800849a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800849e:	e1ae      	b.n	80087fe <UART_SetConfig+0x5a6>
 80084a0:	2310      	movs	r3, #16
 80084a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084a6:	e1aa      	b.n	80087fe <UART_SetConfig+0x5a6>
 80084a8:	2320      	movs	r3, #32
 80084aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ae:	e1a6      	b.n	80087fe <UART_SetConfig+0x5a6>
 80084b0:	2340      	movs	r3, #64	@ 0x40
 80084b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084b6:	e1a2      	b.n	80087fe <UART_SetConfig+0x5a6>
 80084b8:	2380      	movs	r3, #128	@ 0x80
 80084ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084be:	e19e      	b.n	80087fe <UART_SetConfig+0x5a6>
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a35      	ldr	r2, [pc, #212]	@ (800859c <UART_SetConfig+0x344>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d130      	bne.n	800852c <UART_SetConfig+0x2d4>
 80084ca:	4b31      	ldr	r3, [pc, #196]	@ (8008590 <UART_SetConfig+0x338>)
 80084cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084ce:	f003 0307 	and.w	r3, r3, #7
 80084d2:	2b05      	cmp	r3, #5
 80084d4:	d826      	bhi.n	8008524 <UART_SetConfig+0x2cc>
 80084d6:	a201      	add	r2, pc, #4	@ (adr r2, 80084dc <UART_SetConfig+0x284>)
 80084d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084dc:	080084f5 	.word	0x080084f5
 80084e0:	080084fd 	.word	0x080084fd
 80084e4:	08008505 	.word	0x08008505
 80084e8:	0800850d 	.word	0x0800850d
 80084ec:	08008515 	.word	0x08008515
 80084f0:	0800851d 	.word	0x0800851d
 80084f4:	2300      	movs	r3, #0
 80084f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084fa:	e180      	b.n	80087fe <UART_SetConfig+0x5a6>
 80084fc:	2304      	movs	r3, #4
 80084fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008502:	e17c      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008504:	2308      	movs	r3, #8
 8008506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800850a:	e178      	b.n	80087fe <UART_SetConfig+0x5a6>
 800850c:	2310      	movs	r3, #16
 800850e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008512:	e174      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008514:	2320      	movs	r3, #32
 8008516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800851a:	e170      	b.n	80087fe <UART_SetConfig+0x5a6>
 800851c:	2340      	movs	r3, #64	@ 0x40
 800851e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008522:	e16c      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008524:	2380      	movs	r3, #128	@ 0x80
 8008526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800852a:	e168      	b.n	80087fe <UART_SetConfig+0x5a6>
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a1b      	ldr	r2, [pc, #108]	@ (80085a0 <UART_SetConfig+0x348>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d142      	bne.n	80085bc <UART_SetConfig+0x364>
 8008536:	4b16      	ldr	r3, [pc, #88]	@ (8008590 <UART_SetConfig+0x338>)
 8008538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800853a:	f003 0307 	and.w	r3, r3, #7
 800853e:	2b05      	cmp	r3, #5
 8008540:	d838      	bhi.n	80085b4 <UART_SetConfig+0x35c>
 8008542:	a201      	add	r2, pc, #4	@ (adr r2, 8008548 <UART_SetConfig+0x2f0>)
 8008544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008548:	08008561 	.word	0x08008561
 800854c:	08008569 	.word	0x08008569
 8008550:	08008571 	.word	0x08008571
 8008554:	08008579 	.word	0x08008579
 8008558:	080085a5 	.word	0x080085a5
 800855c:	080085ad 	.word	0x080085ad
 8008560:	2300      	movs	r3, #0
 8008562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008566:	e14a      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008568:	2304      	movs	r3, #4
 800856a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800856e:	e146      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008570:	2308      	movs	r3, #8
 8008572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008576:	e142      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008578:	2310      	movs	r3, #16
 800857a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800857e:	e13e      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008580:	cfff69f3 	.word	0xcfff69f3
 8008584:	58000c00 	.word	0x58000c00
 8008588:	11fff4ff 	.word	0x11fff4ff
 800858c:	40011000 	.word	0x40011000
 8008590:	58024400 	.word	0x58024400
 8008594:	40004400 	.word	0x40004400
 8008598:	40004800 	.word	0x40004800
 800859c:	40004c00 	.word	0x40004c00
 80085a0:	40005000 	.word	0x40005000
 80085a4:	2320      	movs	r3, #32
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085aa:	e128      	b.n	80087fe <UART_SetConfig+0x5a6>
 80085ac:	2340      	movs	r3, #64	@ 0x40
 80085ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b2:	e124      	b.n	80087fe <UART_SetConfig+0x5a6>
 80085b4:	2380      	movs	r3, #128	@ 0x80
 80085b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ba:	e120      	b.n	80087fe <UART_SetConfig+0x5a6>
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4acb      	ldr	r2, [pc, #812]	@ (80088f0 <UART_SetConfig+0x698>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d176      	bne.n	80086b4 <UART_SetConfig+0x45c>
 80085c6:	4bcb      	ldr	r3, [pc, #812]	@ (80088f4 <UART_SetConfig+0x69c>)
 80085c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80085ce:	2b28      	cmp	r3, #40	@ 0x28
 80085d0:	d86c      	bhi.n	80086ac <UART_SetConfig+0x454>
 80085d2:	a201      	add	r2, pc, #4	@ (adr r2, 80085d8 <UART_SetConfig+0x380>)
 80085d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d8:	0800867d 	.word	0x0800867d
 80085dc:	080086ad 	.word	0x080086ad
 80085e0:	080086ad 	.word	0x080086ad
 80085e4:	080086ad 	.word	0x080086ad
 80085e8:	080086ad 	.word	0x080086ad
 80085ec:	080086ad 	.word	0x080086ad
 80085f0:	080086ad 	.word	0x080086ad
 80085f4:	080086ad 	.word	0x080086ad
 80085f8:	08008685 	.word	0x08008685
 80085fc:	080086ad 	.word	0x080086ad
 8008600:	080086ad 	.word	0x080086ad
 8008604:	080086ad 	.word	0x080086ad
 8008608:	080086ad 	.word	0x080086ad
 800860c:	080086ad 	.word	0x080086ad
 8008610:	080086ad 	.word	0x080086ad
 8008614:	080086ad 	.word	0x080086ad
 8008618:	0800868d 	.word	0x0800868d
 800861c:	080086ad 	.word	0x080086ad
 8008620:	080086ad 	.word	0x080086ad
 8008624:	080086ad 	.word	0x080086ad
 8008628:	080086ad 	.word	0x080086ad
 800862c:	080086ad 	.word	0x080086ad
 8008630:	080086ad 	.word	0x080086ad
 8008634:	080086ad 	.word	0x080086ad
 8008638:	08008695 	.word	0x08008695
 800863c:	080086ad 	.word	0x080086ad
 8008640:	080086ad 	.word	0x080086ad
 8008644:	080086ad 	.word	0x080086ad
 8008648:	080086ad 	.word	0x080086ad
 800864c:	080086ad 	.word	0x080086ad
 8008650:	080086ad 	.word	0x080086ad
 8008654:	080086ad 	.word	0x080086ad
 8008658:	0800869d 	.word	0x0800869d
 800865c:	080086ad 	.word	0x080086ad
 8008660:	080086ad 	.word	0x080086ad
 8008664:	080086ad 	.word	0x080086ad
 8008668:	080086ad 	.word	0x080086ad
 800866c:	080086ad 	.word	0x080086ad
 8008670:	080086ad 	.word	0x080086ad
 8008674:	080086ad 	.word	0x080086ad
 8008678:	080086a5 	.word	0x080086a5
 800867c:	2301      	movs	r3, #1
 800867e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008682:	e0bc      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008684:	2304      	movs	r3, #4
 8008686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800868a:	e0b8      	b.n	80087fe <UART_SetConfig+0x5a6>
 800868c:	2308      	movs	r3, #8
 800868e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008692:	e0b4      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008694:	2310      	movs	r3, #16
 8008696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800869a:	e0b0      	b.n	80087fe <UART_SetConfig+0x5a6>
 800869c:	2320      	movs	r3, #32
 800869e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086a2:	e0ac      	b.n	80087fe <UART_SetConfig+0x5a6>
 80086a4:	2340      	movs	r3, #64	@ 0x40
 80086a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086aa:	e0a8      	b.n	80087fe <UART_SetConfig+0x5a6>
 80086ac:	2380      	movs	r3, #128	@ 0x80
 80086ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086b2:	e0a4      	b.n	80087fe <UART_SetConfig+0x5a6>
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a8f      	ldr	r2, [pc, #572]	@ (80088f8 <UART_SetConfig+0x6a0>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d130      	bne.n	8008720 <UART_SetConfig+0x4c8>
 80086be:	4b8d      	ldr	r3, [pc, #564]	@ (80088f4 <UART_SetConfig+0x69c>)
 80086c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086c2:	f003 0307 	and.w	r3, r3, #7
 80086c6:	2b05      	cmp	r3, #5
 80086c8:	d826      	bhi.n	8008718 <UART_SetConfig+0x4c0>
 80086ca:	a201      	add	r2, pc, #4	@ (adr r2, 80086d0 <UART_SetConfig+0x478>)
 80086cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d0:	080086e9 	.word	0x080086e9
 80086d4:	080086f1 	.word	0x080086f1
 80086d8:	080086f9 	.word	0x080086f9
 80086dc:	08008701 	.word	0x08008701
 80086e0:	08008709 	.word	0x08008709
 80086e4:	08008711 	.word	0x08008711
 80086e8:	2300      	movs	r3, #0
 80086ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ee:	e086      	b.n	80087fe <UART_SetConfig+0x5a6>
 80086f0:	2304      	movs	r3, #4
 80086f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086f6:	e082      	b.n	80087fe <UART_SetConfig+0x5a6>
 80086f8:	2308      	movs	r3, #8
 80086fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086fe:	e07e      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008700:	2310      	movs	r3, #16
 8008702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008706:	e07a      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008708:	2320      	movs	r3, #32
 800870a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800870e:	e076      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008710:	2340      	movs	r3, #64	@ 0x40
 8008712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008716:	e072      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008718:	2380      	movs	r3, #128	@ 0x80
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800871e:	e06e      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a75      	ldr	r2, [pc, #468]	@ (80088fc <UART_SetConfig+0x6a4>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d130      	bne.n	800878c <UART_SetConfig+0x534>
 800872a:	4b72      	ldr	r3, [pc, #456]	@ (80088f4 <UART_SetConfig+0x69c>)
 800872c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800872e:	f003 0307 	and.w	r3, r3, #7
 8008732:	2b05      	cmp	r3, #5
 8008734:	d826      	bhi.n	8008784 <UART_SetConfig+0x52c>
 8008736:	a201      	add	r2, pc, #4	@ (adr r2, 800873c <UART_SetConfig+0x4e4>)
 8008738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873c:	08008755 	.word	0x08008755
 8008740:	0800875d 	.word	0x0800875d
 8008744:	08008765 	.word	0x08008765
 8008748:	0800876d 	.word	0x0800876d
 800874c:	08008775 	.word	0x08008775
 8008750:	0800877d 	.word	0x0800877d
 8008754:	2300      	movs	r3, #0
 8008756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800875a:	e050      	b.n	80087fe <UART_SetConfig+0x5a6>
 800875c:	2304      	movs	r3, #4
 800875e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008762:	e04c      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008764:	2308      	movs	r3, #8
 8008766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800876a:	e048      	b.n	80087fe <UART_SetConfig+0x5a6>
 800876c:	2310      	movs	r3, #16
 800876e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008772:	e044      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008774:	2320      	movs	r3, #32
 8008776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800877a:	e040      	b.n	80087fe <UART_SetConfig+0x5a6>
 800877c:	2340      	movs	r3, #64	@ 0x40
 800877e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008782:	e03c      	b.n	80087fe <UART_SetConfig+0x5a6>
 8008784:	2380      	movs	r3, #128	@ 0x80
 8008786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800878a:	e038      	b.n	80087fe <UART_SetConfig+0x5a6>
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a5b      	ldr	r2, [pc, #364]	@ (8008900 <UART_SetConfig+0x6a8>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d130      	bne.n	80087f8 <UART_SetConfig+0x5a0>
 8008796:	4b57      	ldr	r3, [pc, #348]	@ (80088f4 <UART_SetConfig+0x69c>)
 8008798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800879a:	f003 0307 	and.w	r3, r3, #7
 800879e:	2b05      	cmp	r3, #5
 80087a0:	d826      	bhi.n	80087f0 <UART_SetConfig+0x598>
 80087a2:	a201      	add	r2, pc, #4	@ (adr r2, 80087a8 <UART_SetConfig+0x550>)
 80087a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a8:	080087c1 	.word	0x080087c1
 80087ac:	080087c9 	.word	0x080087c9
 80087b0:	080087d1 	.word	0x080087d1
 80087b4:	080087d9 	.word	0x080087d9
 80087b8:	080087e1 	.word	0x080087e1
 80087bc:	080087e9 	.word	0x080087e9
 80087c0:	2302      	movs	r3, #2
 80087c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087c6:	e01a      	b.n	80087fe <UART_SetConfig+0x5a6>
 80087c8:	2304      	movs	r3, #4
 80087ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ce:	e016      	b.n	80087fe <UART_SetConfig+0x5a6>
 80087d0:	2308      	movs	r3, #8
 80087d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087d6:	e012      	b.n	80087fe <UART_SetConfig+0x5a6>
 80087d8:	2310      	movs	r3, #16
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087de:	e00e      	b.n	80087fe <UART_SetConfig+0x5a6>
 80087e0:	2320      	movs	r3, #32
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087e6:	e00a      	b.n	80087fe <UART_SetConfig+0x5a6>
 80087e8:	2340      	movs	r3, #64	@ 0x40
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ee:	e006      	b.n	80087fe <UART_SetConfig+0x5a6>
 80087f0:	2380      	movs	r3, #128	@ 0x80
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087f6:	e002      	b.n	80087fe <UART_SetConfig+0x5a6>
 80087f8:	2380      	movs	r3, #128	@ 0x80
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a3f      	ldr	r2, [pc, #252]	@ (8008900 <UART_SetConfig+0x6a8>)
 8008804:	4293      	cmp	r3, r2
 8008806:	f040 80f8 	bne.w	80089fa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800880a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800880e:	2b20      	cmp	r3, #32
 8008810:	dc46      	bgt.n	80088a0 <UART_SetConfig+0x648>
 8008812:	2b02      	cmp	r3, #2
 8008814:	f2c0 8082 	blt.w	800891c <UART_SetConfig+0x6c4>
 8008818:	3b02      	subs	r3, #2
 800881a:	2b1e      	cmp	r3, #30
 800881c:	d87e      	bhi.n	800891c <UART_SetConfig+0x6c4>
 800881e:	a201      	add	r2, pc, #4	@ (adr r2, 8008824 <UART_SetConfig+0x5cc>)
 8008820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008824:	080088a7 	.word	0x080088a7
 8008828:	0800891d 	.word	0x0800891d
 800882c:	080088af 	.word	0x080088af
 8008830:	0800891d 	.word	0x0800891d
 8008834:	0800891d 	.word	0x0800891d
 8008838:	0800891d 	.word	0x0800891d
 800883c:	080088bf 	.word	0x080088bf
 8008840:	0800891d 	.word	0x0800891d
 8008844:	0800891d 	.word	0x0800891d
 8008848:	0800891d 	.word	0x0800891d
 800884c:	0800891d 	.word	0x0800891d
 8008850:	0800891d 	.word	0x0800891d
 8008854:	0800891d 	.word	0x0800891d
 8008858:	0800891d 	.word	0x0800891d
 800885c:	080088cf 	.word	0x080088cf
 8008860:	0800891d 	.word	0x0800891d
 8008864:	0800891d 	.word	0x0800891d
 8008868:	0800891d 	.word	0x0800891d
 800886c:	0800891d 	.word	0x0800891d
 8008870:	0800891d 	.word	0x0800891d
 8008874:	0800891d 	.word	0x0800891d
 8008878:	0800891d 	.word	0x0800891d
 800887c:	0800891d 	.word	0x0800891d
 8008880:	0800891d 	.word	0x0800891d
 8008884:	0800891d 	.word	0x0800891d
 8008888:	0800891d 	.word	0x0800891d
 800888c:	0800891d 	.word	0x0800891d
 8008890:	0800891d 	.word	0x0800891d
 8008894:	0800891d 	.word	0x0800891d
 8008898:	0800891d 	.word	0x0800891d
 800889c:	0800890f 	.word	0x0800890f
 80088a0:	2b40      	cmp	r3, #64	@ 0x40
 80088a2:	d037      	beq.n	8008914 <UART_SetConfig+0x6bc>
 80088a4:	e03a      	b.n	800891c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80088a6:	f7fe fd87 	bl	80073b8 <HAL_RCCEx_GetD3PCLK1Freq>
 80088aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80088ac:	e03c      	b.n	8008928 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe fd96 	bl	80073e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80088b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088bc:	e034      	b.n	8008928 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088be:	f107 0318 	add.w	r3, r7, #24
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fe fee2 	bl	800768c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088cc:	e02c      	b.n	8008928 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088ce:	4b09      	ldr	r3, [pc, #36]	@ (80088f4 <UART_SetConfig+0x69c>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d016      	beq.n	8008908 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088da:	4b06      	ldr	r3, [pc, #24]	@ (80088f4 <UART_SetConfig+0x69c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	08db      	lsrs	r3, r3, #3
 80088e0:	f003 0303 	and.w	r3, r3, #3
 80088e4:	4a07      	ldr	r2, [pc, #28]	@ (8008904 <UART_SetConfig+0x6ac>)
 80088e6:	fa22 f303 	lsr.w	r3, r2, r3
 80088ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088ec:	e01c      	b.n	8008928 <UART_SetConfig+0x6d0>
 80088ee:	bf00      	nop
 80088f0:	40011400 	.word	0x40011400
 80088f4:	58024400 	.word	0x58024400
 80088f8:	40007800 	.word	0x40007800
 80088fc:	40007c00 	.word	0x40007c00
 8008900:	58000c00 	.word	0x58000c00
 8008904:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008908:	4b9d      	ldr	r3, [pc, #628]	@ (8008b80 <UART_SetConfig+0x928>)
 800890a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800890c:	e00c      	b.n	8008928 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800890e:	4b9d      	ldr	r3, [pc, #628]	@ (8008b84 <UART_SetConfig+0x92c>)
 8008910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008912:	e009      	b.n	8008928 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008914:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800891a:	e005      	b.n	8008928 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800891c:	2300      	movs	r3, #0
 800891e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008926:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800892a:	2b00      	cmp	r3, #0
 800892c:	f000 81de 	beq.w	8008cec <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008934:	4a94      	ldr	r2, [pc, #592]	@ (8008b88 <UART_SetConfig+0x930>)
 8008936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800893a:	461a      	mov	r2, r3
 800893c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800893e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008942:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	685a      	ldr	r2, [r3, #4]
 8008948:	4613      	mov	r3, r2
 800894a:	005b      	lsls	r3, r3, #1
 800894c:	4413      	add	r3, r2
 800894e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008950:	429a      	cmp	r2, r3
 8008952:	d305      	bcc.n	8008960 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800895a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800895c:	429a      	cmp	r2, r3
 800895e:	d903      	bls.n	8008968 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008966:	e1c1      	b.n	8008cec <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800896a:	2200      	movs	r2, #0
 800896c:	60bb      	str	r3, [r7, #8]
 800896e:	60fa      	str	r2, [r7, #12]
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008974:	4a84      	ldr	r2, [pc, #528]	@ (8008b88 <UART_SetConfig+0x930>)
 8008976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800897a:	b29b      	uxth	r3, r3
 800897c:	2200      	movs	r2, #0
 800897e:	603b      	str	r3, [r7, #0]
 8008980:	607a      	str	r2, [r7, #4]
 8008982:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008986:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800898a:	f7f7 fca5 	bl	80002d8 <__aeabi_uldivmod>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	4610      	mov	r0, r2
 8008994:	4619      	mov	r1, r3
 8008996:	f04f 0200 	mov.w	r2, #0
 800899a:	f04f 0300 	mov.w	r3, #0
 800899e:	020b      	lsls	r3, r1, #8
 80089a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80089a4:	0202      	lsls	r2, r0, #8
 80089a6:	6979      	ldr	r1, [r7, #20]
 80089a8:	6849      	ldr	r1, [r1, #4]
 80089aa:	0849      	lsrs	r1, r1, #1
 80089ac:	2000      	movs	r0, #0
 80089ae:	460c      	mov	r4, r1
 80089b0:	4605      	mov	r5, r0
 80089b2:	eb12 0804 	adds.w	r8, r2, r4
 80089b6:	eb43 0905 	adc.w	r9, r3, r5
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	469a      	mov	sl, r3
 80089c2:	4693      	mov	fp, r2
 80089c4:	4652      	mov	r2, sl
 80089c6:	465b      	mov	r3, fp
 80089c8:	4640      	mov	r0, r8
 80089ca:	4649      	mov	r1, r9
 80089cc:	f7f7 fc84 	bl	80002d8 <__aeabi_uldivmod>
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	4613      	mov	r3, r2
 80089d6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089de:	d308      	bcc.n	80089f2 <UART_SetConfig+0x79a>
 80089e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089e6:	d204      	bcs.n	80089f2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089ee:	60da      	str	r2, [r3, #12]
 80089f0:	e17c      	b.n	8008cec <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80089f8:	e178      	b.n	8008cec <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	69db      	ldr	r3, [r3, #28]
 80089fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a02:	f040 80c5 	bne.w	8008b90 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008a06:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008a0a:	2b20      	cmp	r3, #32
 8008a0c:	dc48      	bgt.n	8008aa0 <UART_SetConfig+0x848>
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	db7b      	blt.n	8008b0a <UART_SetConfig+0x8b2>
 8008a12:	2b20      	cmp	r3, #32
 8008a14:	d879      	bhi.n	8008b0a <UART_SetConfig+0x8b2>
 8008a16:	a201      	add	r2, pc, #4	@ (adr r2, 8008a1c <UART_SetConfig+0x7c4>)
 8008a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1c:	08008aa7 	.word	0x08008aa7
 8008a20:	08008aaf 	.word	0x08008aaf
 8008a24:	08008b0b 	.word	0x08008b0b
 8008a28:	08008b0b 	.word	0x08008b0b
 8008a2c:	08008ab7 	.word	0x08008ab7
 8008a30:	08008b0b 	.word	0x08008b0b
 8008a34:	08008b0b 	.word	0x08008b0b
 8008a38:	08008b0b 	.word	0x08008b0b
 8008a3c:	08008ac7 	.word	0x08008ac7
 8008a40:	08008b0b 	.word	0x08008b0b
 8008a44:	08008b0b 	.word	0x08008b0b
 8008a48:	08008b0b 	.word	0x08008b0b
 8008a4c:	08008b0b 	.word	0x08008b0b
 8008a50:	08008b0b 	.word	0x08008b0b
 8008a54:	08008b0b 	.word	0x08008b0b
 8008a58:	08008b0b 	.word	0x08008b0b
 8008a5c:	08008ad7 	.word	0x08008ad7
 8008a60:	08008b0b 	.word	0x08008b0b
 8008a64:	08008b0b 	.word	0x08008b0b
 8008a68:	08008b0b 	.word	0x08008b0b
 8008a6c:	08008b0b 	.word	0x08008b0b
 8008a70:	08008b0b 	.word	0x08008b0b
 8008a74:	08008b0b 	.word	0x08008b0b
 8008a78:	08008b0b 	.word	0x08008b0b
 8008a7c:	08008b0b 	.word	0x08008b0b
 8008a80:	08008b0b 	.word	0x08008b0b
 8008a84:	08008b0b 	.word	0x08008b0b
 8008a88:	08008b0b 	.word	0x08008b0b
 8008a8c:	08008b0b 	.word	0x08008b0b
 8008a90:	08008b0b 	.word	0x08008b0b
 8008a94:	08008b0b 	.word	0x08008b0b
 8008a98:	08008b0b 	.word	0x08008b0b
 8008a9c:	08008afd 	.word	0x08008afd
 8008aa0:	2b40      	cmp	r3, #64	@ 0x40
 8008aa2:	d02e      	beq.n	8008b02 <UART_SetConfig+0x8aa>
 8008aa4:	e031      	b.n	8008b0a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008aa6:	f7fc fcd1 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 8008aaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008aac:	e033      	b.n	8008b16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008aae:	f7fc fce3 	bl	8005478 <HAL_RCC_GetPCLK2Freq>
 8008ab2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ab4:	e02f      	b.n	8008b16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ab6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fe fc92 	bl	80073e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ac4:	e027      	b.n	8008b16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ac6:	f107 0318 	add.w	r3, r7, #24
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fe fdde 	bl	800768c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ad4:	e01f      	b.n	8008b16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8008b8c <UART_SetConfig+0x934>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 0320 	and.w	r3, r3, #32
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d009      	beq.n	8008af6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8008b8c <UART_SetConfig+0x934>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	08db      	lsrs	r3, r3, #3
 8008ae8:	f003 0303 	and.w	r3, r3, #3
 8008aec:	4a24      	ldr	r2, [pc, #144]	@ (8008b80 <UART_SetConfig+0x928>)
 8008aee:	fa22 f303 	lsr.w	r3, r2, r3
 8008af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008af4:	e00f      	b.n	8008b16 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008af6:	4b22      	ldr	r3, [pc, #136]	@ (8008b80 <UART_SetConfig+0x928>)
 8008af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008afa:	e00c      	b.n	8008b16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008afc:	4b21      	ldr	r3, [pc, #132]	@ (8008b84 <UART_SetConfig+0x92c>)
 8008afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b00:	e009      	b.n	8008b16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b08:	e005      	b.n	8008b16 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008b14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 80e7 	beq.w	8008cec <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b22:	4a19      	ldr	r2, [pc, #100]	@ (8008b88 <UART_SetConfig+0x930>)
 8008b24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b30:	005a      	lsls	r2, r3, #1
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	085b      	lsrs	r3, r3, #1
 8008b38:	441a      	add	r2, r3
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b42:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b46:	2b0f      	cmp	r3, #15
 8008b48:	d916      	bls.n	8008b78 <UART_SetConfig+0x920>
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b50:	d212      	bcs.n	8008b78 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	f023 030f 	bic.w	r3, r3, #15
 8008b5a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5e:	085b      	lsrs	r3, r3, #1
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	f003 0307 	and.w	r3, r3, #7
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008b74:	60da      	str	r2, [r3, #12]
 8008b76:	e0b9      	b.n	8008cec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008b7e:	e0b5      	b.n	8008cec <UART_SetConfig+0xa94>
 8008b80:	03d09000 	.word	0x03d09000
 8008b84:	003d0900 	.word	0x003d0900
 8008b88:	080093f8 	.word	0x080093f8
 8008b8c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b90:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008b94:	2b20      	cmp	r3, #32
 8008b96:	dc49      	bgt.n	8008c2c <UART_SetConfig+0x9d4>
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	db7c      	blt.n	8008c96 <UART_SetConfig+0xa3e>
 8008b9c:	2b20      	cmp	r3, #32
 8008b9e:	d87a      	bhi.n	8008c96 <UART_SetConfig+0xa3e>
 8008ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba8 <UART_SetConfig+0x950>)
 8008ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba6:	bf00      	nop
 8008ba8:	08008c33 	.word	0x08008c33
 8008bac:	08008c3b 	.word	0x08008c3b
 8008bb0:	08008c97 	.word	0x08008c97
 8008bb4:	08008c97 	.word	0x08008c97
 8008bb8:	08008c43 	.word	0x08008c43
 8008bbc:	08008c97 	.word	0x08008c97
 8008bc0:	08008c97 	.word	0x08008c97
 8008bc4:	08008c97 	.word	0x08008c97
 8008bc8:	08008c53 	.word	0x08008c53
 8008bcc:	08008c97 	.word	0x08008c97
 8008bd0:	08008c97 	.word	0x08008c97
 8008bd4:	08008c97 	.word	0x08008c97
 8008bd8:	08008c97 	.word	0x08008c97
 8008bdc:	08008c97 	.word	0x08008c97
 8008be0:	08008c97 	.word	0x08008c97
 8008be4:	08008c97 	.word	0x08008c97
 8008be8:	08008c63 	.word	0x08008c63
 8008bec:	08008c97 	.word	0x08008c97
 8008bf0:	08008c97 	.word	0x08008c97
 8008bf4:	08008c97 	.word	0x08008c97
 8008bf8:	08008c97 	.word	0x08008c97
 8008bfc:	08008c97 	.word	0x08008c97
 8008c00:	08008c97 	.word	0x08008c97
 8008c04:	08008c97 	.word	0x08008c97
 8008c08:	08008c97 	.word	0x08008c97
 8008c0c:	08008c97 	.word	0x08008c97
 8008c10:	08008c97 	.word	0x08008c97
 8008c14:	08008c97 	.word	0x08008c97
 8008c18:	08008c97 	.word	0x08008c97
 8008c1c:	08008c97 	.word	0x08008c97
 8008c20:	08008c97 	.word	0x08008c97
 8008c24:	08008c97 	.word	0x08008c97
 8008c28:	08008c89 	.word	0x08008c89
 8008c2c:	2b40      	cmp	r3, #64	@ 0x40
 8008c2e:	d02e      	beq.n	8008c8e <UART_SetConfig+0xa36>
 8008c30:	e031      	b.n	8008c96 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c32:	f7fc fc0b 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 8008c36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c38:	e033      	b.n	8008ca2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c3a:	f7fc fc1d 	bl	8005478 <HAL_RCC_GetPCLK2Freq>
 8008c3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c40:	e02f      	b.n	8008ca2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fe fbcc 	bl	80073e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c50:	e027      	b.n	8008ca2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c52:	f107 0318 	add.w	r3, r7, #24
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fe fd18 	bl	800768c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c60:	e01f      	b.n	8008ca2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c62:	4b2d      	ldr	r3, [pc, #180]	@ (8008d18 <UART_SetConfig+0xac0>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 0320 	and.w	r3, r3, #32
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d009      	beq.n	8008c82 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8008d18 <UART_SetConfig+0xac0>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	08db      	lsrs	r3, r3, #3
 8008c74:	f003 0303 	and.w	r3, r3, #3
 8008c78:	4a28      	ldr	r2, [pc, #160]	@ (8008d1c <UART_SetConfig+0xac4>)
 8008c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c80:	e00f      	b.n	8008ca2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008c82:	4b26      	ldr	r3, [pc, #152]	@ (8008d1c <UART_SetConfig+0xac4>)
 8008c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c86:	e00c      	b.n	8008ca2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c88:	4b25      	ldr	r3, [pc, #148]	@ (8008d20 <UART_SetConfig+0xac8>)
 8008c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c8c:	e009      	b.n	8008ca2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c94:	e005      	b.n	8008ca2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008c96:	2300      	movs	r3, #0
 8008c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008ca0:	bf00      	nop
    }

    if (pclk != 0U)
 8008ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d021      	beq.n	8008cec <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cac:	4a1d      	ldr	r2, [pc, #116]	@ (8008d24 <UART_SetConfig+0xacc>)
 8008cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	085b      	lsrs	r3, r3, #1
 8008cc0:	441a      	add	r2, r3
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cce:	2b0f      	cmp	r3, #15
 8008cd0:	d909      	bls.n	8008ce6 <UART_SetConfig+0xa8e>
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cd8:	d205      	bcs.n	8008ce6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	60da      	str	r2, [r3, #12]
 8008ce4:	e002      	b.n	8008cec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2200      	movs	r2, #0
 8008d06:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008d08:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3748      	adds	r7, #72	@ 0x48
 8008d10:	46bd      	mov	sp, r7
 8008d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d16:	bf00      	nop
 8008d18:	58024400 	.word	0x58024400
 8008d1c:	03d09000 	.word	0x03d09000
 8008d20:	003d0900 	.word	0x003d0900
 8008d24:	080093f8 	.word	0x080093f8

08008d28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d34:	f003 0308 	and.w	r3, r3, #8
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00a      	beq.n	8008d52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	430a      	orrs	r2, r1
 8008d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00a      	beq.n	8008d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	430a      	orrs	r2, r1
 8008d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d78:	f003 0302 	and.w	r3, r3, #2
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00a      	beq.n	8008d96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	430a      	orrs	r2, r1
 8008d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d9a:	f003 0304 	and.w	r3, r3, #4
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00a      	beq.n	8008db8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	430a      	orrs	r2, r1
 8008db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dbc:	f003 0310 	and.w	r3, r3, #16
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00a      	beq.n	8008dda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	430a      	orrs	r2, r1
 8008dd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dde:	f003 0320 	and.w	r3, r3, #32
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00a      	beq.n	8008dfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d01a      	beq.n	8008e3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e26:	d10a      	bne.n	8008e3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00a      	beq.n	8008e60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	430a      	orrs	r2, r1
 8008e5e:	605a      	str	r2, [r3, #4]
  }
}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b098      	sub	sp, #96	@ 0x60
 8008e70:	af02      	add	r7, sp, #8
 8008e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e7c:	f7f8 fb92 	bl	80015a4 <HAL_GetTick>
 8008e80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 0308 	and.w	r3, r3, #8
 8008e8c:	2b08      	cmp	r3, #8
 8008e8e:	d12f      	bne.n	8008ef0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f88e 	bl	8008fc0 <UART_WaitOnFlagUntilTimeout>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d022      	beq.n	8008ef0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb2:	e853 3f00 	ldrex	r3, [r3]
 8008eb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ebe:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008eca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ecc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ece:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ed0:	e841 2300 	strex	r3, r2, [r1]
 8008ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1e6      	bne.n	8008eaa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2220      	movs	r2, #32
 8008ee0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e063      	b.n	8008fb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 0304 	and.w	r3, r3, #4
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	d149      	bne.n	8008f92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008efe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f02:	9300      	str	r3, [sp, #0]
 8008f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f06:	2200      	movs	r2, #0
 8008f08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f857 	bl	8008fc0 <UART_WaitOnFlagUntilTimeout>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d03c      	beq.n	8008f92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f20:	e853 3f00 	ldrex	r3, [r3]
 8008f24:	623b      	str	r3, [r7, #32]
   return(result);
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	461a      	mov	r2, r3
 8008f34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f36:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f3e:	e841 2300 	strex	r3, r2, [r1]
 8008f42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1e6      	bne.n	8008f18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	3308      	adds	r3, #8
 8008f50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	e853 3f00 	ldrex	r3, [r3]
 8008f58:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f023 0301 	bic.w	r3, r3, #1
 8008f60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	3308      	adds	r3, #8
 8008f68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f6a:	61fa      	str	r2, [r7, #28]
 8008f6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6e:	69b9      	ldr	r1, [r7, #24]
 8008f70:	69fa      	ldr	r2, [r7, #28]
 8008f72:	e841 2300 	strex	r3, r2, [r1]
 8008f76:	617b      	str	r3, [r7, #20]
   return(result);
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1e5      	bne.n	8008f4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2220      	movs	r2, #32
 8008f82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e012      	b.n	8008fb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2220      	movs	r2, #32
 8008f96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2220      	movs	r2, #32
 8008f9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3758      	adds	r7, #88	@ 0x58
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	603b      	str	r3, [r7, #0]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fd0:	e04f      	b.n	8009072 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd8:	d04b      	beq.n	8009072 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fda:	f7f8 fae3 	bl	80015a4 <HAL_GetTick>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	69ba      	ldr	r2, [r7, #24]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d302      	bcc.n	8008ff0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d101      	bne.n	8008ff4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e04e      	b.n	8009092 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 0304 	and.w	r3, r3, #4
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d037      	beq.n	8009072 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2b80      	cmp	r3, #128	@ 0x80
 8009006:	d034      	beq.n	8009072 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	2b40      	cmp	r3, #64	@ 0x40
 800900c:	d031      	beq.n	8009072 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	f003 0308 	and.w	r3, r3, #8
 8009018:	2b08      	cmp	r3, #8
 800901a:	d110      	bne.n	800903e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2208      	movs	r2, #8
 8009022:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f000 f839 	bl	800909c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2208      	movs	r2, #8
 800902e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	e029      	b.n	8009092 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009048:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800904c:	d111      	bne.n	8009072 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009056:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f000 f81f 	bl	800909c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2220      	movs	r2, #32
 8009062:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e00f      	b.n	8009092 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	69da      	ldr	r2, [r3, #28]
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	4013      	ands	r3, r2
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	429a      	cmp	r2, r3
 8009080:	bf0c      	ite	eq
 8009082:	2301      	moveq	r3, #1
 8009084:	2300      	movne	r3, #0
 8009086:	b2db      	uxtb	r3, r3
 8009088:	461a      	mov	r2, r3
 800908a:	79fb      	ldrb	r3, [r7, #7]
 800908c:	429a      	cmp	r2, r3
 800908e:	d0a0      	beq.n	8008fd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
	...

0800909c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800909c:	b480      	push	{r7}
 800909e:	b095      	sub	sp, #84	@ 0x54
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ac:	e853 3f00 	ldrex	r3, [r3]
 80090b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80090b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80090c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80090c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80090ca:	e841 2300 	strex	r3, r2, [r1]
 80090ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1e6      	bne.n	80090a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	3308      	adds	r3, #8
 80090dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090de:	6a3b      	ldr	r3, [r7, #32]
 80090e0:	e853 3f00 	ldrex	r3, [r3]
 80090e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80090e6:	69fa      	ldr	r2, [r7, #28]
 80090e8:	4b1e      	ldr	r3, [pc, #120]	@ (8009164 <UART_EndRxTransfer+0xc8>)
 80090ea:	4013      	ands	r3, r2
 80090ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3308      	adds	r3, #8
 80090f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090fe:	e841 2300 	strex	r3, r2, [r1]
 8009102:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1e5      	bne.n	80090d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800910e:	2b01      	cmp	r3, #1
 8009110:	d118      	bne.n	8009144 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	e853 3f00 	ldrex	r3, [r3]
 800911e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	f023 0310 	bic.w	r3, r3, #16
 8009126:	647b      	str	r3, [r7, #68]	@ 0x44
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	461a      	mov	r2, r3
 800912e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009130:	61bb      	str	r3, [r7, #24]
 8009132:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009134:	6979      	ldr	r1, [r7, #20]
 8009136:	69ba      	ldr	r2, [r7, #24]
 8009138:	e841 2300 	strex	r3, r2, [r1]
 800913c:	613b      	str	r3, [r7, #16]
   return(result);
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d1e6      	bne.n	8009112 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2220      	movs	r2, #32
 8009148:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009158:	bf00      	nop
 800915a:	3754      	adds	r7, #84	@ 0x54
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	effffffe 	.word	0xeffffffe

08009168 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009176:	2b01      	cmp	r3, #1
 8009178:	d101      	bne.n	800917e <HAL_UARTEx_DisableFifoMode+0x16>
 800917a:	2302      	movs	r3, #2
 800917c:	e027      	b.n	80091ce <HAL_UARTEx_DisableFifoMode+0x66>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2224      	movs	r2, #36	@ 0x24
 800918a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f022 0201 	bic.w	r2, r2, #1
 80091a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80091ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2220      	movs	r2, #32
 80091c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b084      	sub	sp, #16
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
 80091e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d101      	bne.n	80091f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80091ee:	2302      	movs	r3, #2
 80091f0:	e02d      	b.n	800924e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2224      	movs	r2, #36	@ 0x24
 80091fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f022 0201 	bic.w	r2, r2, #1
 8009218:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	430a      	orrs	r2, r1
 800922c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f850 	bl	80092d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2220      	movs	r2, #32
 8009240:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b084      	sub	sp, #16
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009266:	2b01      	cmp	r3, #1
 8009268:	d101      	bne.n	800926e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800926a:	2302      	movs	r3, #2
 800926c:	e02d      	b.n	80092ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2201      	movs	r2, #1
 8009272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2224      	movs	r2, #36	@ 0x24
 800927a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0201 	bic.w	r2, r2, #1
 8009294:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	430a      	orrs	r2, r1
 80092a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f812 	bl	80092d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2220      	movs	r2, #32
 80092bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
	...

080092d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d108      	bne.n	80092f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092f4:	e031      	b.n	800935a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092f6:	2310      	movs	r3, #16
 80092f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092fa:	2310      	movs	r3, #16
 80092fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	0e5b      	lsrs	r3, r3, #25
 8009306:	b2db      	uxtb	r3, r3
 8009308:	f003 0307 	and.w	r3, r3, #7
 800930c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	0f5b      	lsrs	r3, r3, #29
 8009316:	b2db      	uxtb	r3, r3
 8009318:	f003 0307 	and.w	r3, r3, #7
 800931c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800931e:	7bbb      	ldrb	r3, [r7, #14]
 8009320:	7b3a      	ldrb	r2, [r7, #12]
 8009322:	4911      	ldr	r1, [pc, #68]	@ (8009368 <UARTEx_SetNbDataToProcess+0x94>)
 8009324:	5c8a      	ldrb	r2, [r1, r2]
 8009326:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800932a:	7b3a      	ldrb	r2, [r7, #12]
 800932c:	490f      	ldr	r1, [pc, #60]	@ (800936c <UARTEx_SetNbDataToProcess+0x98>)
 800932e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009330:	fb93 f3f2 	sdiv	r3, r3, r2
 8009334:	b29a      	uxth	r2, r3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800933c:	7bfb      	ldrb	r3, [r7, #15]
 800933e:	7b7a      	ldrb	r2, [r7, #13]
 8009340:	4909      	ldr	r1, [pc, #36]	@ (8009368 <UARTEx_SetNbDataToProcess+0x94>)
 8009342:	5c8a      	ldrb	r2, [r1, r2]
 8009344:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009348:	7b7a      	ldrb	r2, [r7, #13]
 800934a:	4908      	ldr	r1, [pc, #32]	@ (800936c <UARTEx_SetNbDataToProcess+0x98>)
 800934c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800934e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009352:	b29a      	uxth	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800935a:	bf00      	nop
 800935c:	3714      	adds	r7, #20
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	08009410 	.word	0x08009410
 800936c:	08009418 	.word	0x08009418

08009370 <memset>:
 8009370:	4402      	add	r2, r0
 8009372:	4603      	mov	r3, r0
 8009374:	4293      	cmp	r3, r2
 8009376:	d100      	bne.n	800937a <memset+0xa>
 8009378:	4770      	bx	lr
 800937a:	f803 1b01 	strb.w	r1, [r3], #1
 800937e:	e7f9      	b.n	8009374 <memset+0x4>

08009380 <__libc_init_array>:
 8009380:	b570      	push	{r4, r5, r6, lr}
 8009382:	4d0d      	ldr	r5, [pc, #52]	@ (80093b8 <__libc_init_array+0x38>)
 8009384:	4c0d      	ldr	r4, [pc, #52]	@ (80093bc <__libc_init_array+0x3c>)
 8009386:	1b64      	subs	r4, r4, r5
 8009388:	10a4      	asrs	r4, r4, #2
 800938a:	2600      	movs	r6, #0
 800938c:	42a6      	cmp	r6, r4
 800938e:	d109      	bne.n	80093a4 <__libc_init_array+0x24>
 8009390:	4d0b      	ldr	r5, [pc, #44]	@ (80093c0 <__libc_init_array+0x40>)
 8009392:	4c0c      	ldr	r4, [pc, #48]	@ (80093c4 <__libc_init_array+0x44>)
 8009394:	f000 f818 	bl	80093c8 <_init>
 8009398:	1b64      	subs	r4, r4, r5
 800939a:	10a4      	asrs	r4, r4, #2
 800939c:	2600      	movs	r6, #0
 800939e:	42a6      	cmp	r6, r4
 80093a0:	d105      	bne.n	80093ae <__libc_init_array+0x2e>
 80093a2:	bd70      	pop	{r4, r5, r6, pc}
 80093a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093a8:	4798      	blx	r3
 80093aa:	3601      	adds	r6, #1
 80093ac:	e7ee      	b.n	800938c <__libc_init_array+0xc>
 80093ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80093b2:	4798      	blx	r3
 80093b4:	3601      	adds	r6, #1
 80093b6:	e7f2      	b.n	800939e <__libc_init_array+0x1e>
 80093b8:	08009428 	.word	0x08009428
 80093bc:	08009428 	.word	0x08009428
 80093c0:	08009428 	.word	0x08009428
 80093c4:	0800942c 	.word	0x0800942c

080093c8 <_init>:
 80093c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ca:	bf00      	nop
 80093cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ce:	bc08      	pop	{r3}
 80093d0:	469e      	mov	lr, r3
 80093d2:	4770      	bx	lr

080093d4 <_fini>:
 80093d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d6:	bf00      	nop
 80093d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093da:	bc08      	pop	{r3}
 80093dc:	469e      	mov	lr, r3
 80093de:	4770      	bx	lr
