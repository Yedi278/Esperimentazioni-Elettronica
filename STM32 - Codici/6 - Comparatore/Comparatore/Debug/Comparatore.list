
Comparatore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009904  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009b9c  08009b9c  0000ab9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009bdc  08009bdc  0000abdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009be4  08009be4  0000abe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009be8  08009be8  0000abe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08009bec  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002e8  24000010  08009bfc  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002f8  08009bfc  0000b2f8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a836  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ffe  00000000  00000000  00025874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014a0  00000000  00000000  00028878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000100c  00000000  00000000  00029d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a04a  00000000  00000000  0002ad24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d47a  00000000  00000000  00064d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017aab0  00000000  00000000  000821e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fcc98  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000057b8  00000000  00000000  001fccdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000093  00000000  00000000  00202494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009b84 	.word	0x08009b84

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08009b84 	.word	0x08009b84

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <ADC_custom_init>:
bool triggd = false;
bool pre_triggd = false;
uint16_t trig_indx = 0;


void ADC_custom_init(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

	ADC3->SQR1=0; // Resetto il registro per cancellare modifice dell'IDE
 80005cc:	4b33      	ldr	r3, [pc, #204]	@ (800069c <ADC_custom_init+0xd4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	631a      	str	r2, [r3, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_L_Pos);	// Indico quanti canali leggere (0 = 1 canale)
 80005d2:	4b32      	ldr	r3, [pc, #200]	@ (800069c <ADC_custom_init+0xd4>)
 80005d4:	4a31      	ldr	r2, [pc, #196]	@ (800069c <ADC_custom_init+0xd4>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->SQR1 |= (0 << ADC_SQR1_SQ1_Pos);	// Inidco i canali da accendere
 80005da:	4b30      	ldr	r3, [pc, #192]	@ (800069c <ADC_custom_init+0xd4>)
 80005dc:	4a2f      	ldr	r2, [pc, #188]	@ (800069c <ADC_custom_init+0xd4>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30

	ADC3->PCSEL |= ADC_PCSEL_PCSEL_0;		// Selezioni i canali da leggere
 80005e2:	4b2e      	ldr	r3, [pc, #184]	@ (800069c <ADC_custom_init+0xd4>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a2d      	ldr	r2, [pc, #180]	@ (800069c <ADC_custom_init+0xd4>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	61d3      	str	r3, [r2, #28]

	/* Fase di calibrazione */
	ADC3->CR &= ~ADC_CR_ADCALDIF;   // Imposto misura single read;
 80005ee:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <ADC_custom_init+0xd4>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	4a2a      	ldr	r2, [pc, #168]	@ (800069c <ADC_custom_init+0xd4>)
 80005f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80005f8:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCALLIN;	// Calibrazione Lineare con offset
 80005fa:	4b28      	ldr	r3, [pc, #160]	@ (800069c <ADC_custom_init+0xd4>)
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	4a27      	ldr	r2, [pc, #156]	@ (800069c <ADC_custom_init+0xd4>)
 8000600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000604:	6093      	str	r3, [r2, #8]
	ADC3->CR &= ~ADC_CR_ADEN;		// Occorre ADC spento
 8000606:	4b25      	ldr	r3, [pc, #148]	@ (800069c <ADC_custom_init+0xd4>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	4a24      	ldr	r2, [pc, #144]	@ (800069c <ADC_custom_init+0xd4>)
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	6093      	str	r3, [r2, #8]
	ADC3->CR |= ADC_CR_ADCAL;		// Inizio calibrazione
 8000612:	4b22      	ldr	r3, [pc, #136]	@ (800069c <ADC_custom_init+0xd4>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	4a21      	ldr	r2, [pc, #132]	@ (800069c <ADC_custom_init+0xd4>)
 8000618:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800061c:	6093      	str	r3, [r2, #8]

	while((ADC3->CR & ADC_CR_ADCAL) != 0){};
 800061e:	bf00      	nop
 8000620:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <ADC_custom_init+0xd4>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	2b00      	cmp	r3, #0
 8000626:	dbfb      	blt.n	8000620 <ADC_custom_init+0x58>
	/* Fine fase di calibrazione */

	/* Accensione ADC */
	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il bit prima del controllo
 8000628:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <ADC_custom_init+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1b      	ldr	r2, [pc, #108]	@ (800069c <ADC_custom_init+0xd4>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]
	ADC3->CR |= ADC_CR_ADEN;		// Abilito l'ADC
 8000634:	4b19      	ldr	r3, [pc, #100]	@ (800069c <ADC_custom_init+0xd4>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	4a18      	ldr	r2, [pc, #96]	@ (800069c <ADC_custom_init+0xd4>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6093      	str	r3, [r2, #8]

	while((ADC3->ISR & ADC_ISR_ADRDY) != 0){}	// Aspetto che il flag cambi
 8000640:	bf00      	nop
 8000642:	4b16      	ldr	r3, [pc, #88]	@ (800069c <ADC_custom_init+0xd4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f9      	bne.n	8000642 <ADC_custom_init+0x7a>

	ADC3->ISR |= ADC_ISR_ADRDY;		// Azzero il Ready bit
 800064e:	4b13      	ldr	r3, [pc, #76]	@ (800069c <ADC_custom_init+0xd4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a12      	ldr	r2, [pc, #72]	@ (800069c <ADC_custom_init+0xd4>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6013      	str	r3, [r2, #0]
	/* Fine istruzioni per l'accensione */

	/* Impostazioni TIMER per triggerare l'nizio della misura */
	TIM6->PSC = 12;	// 240/12 = 20Mhz
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <ADC_custom_init+0xd8>)
 800065c:	220c      	movs	r2, #12
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 12;	// 20Mhz / 10 = 2Mhz
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <ADC_custom_init+0xd8>)
 8000662:	220c      	movs	r2, #12
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->CNT = 0;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <ADC_custom_init+0xd8>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM6->DIER &= ~TIM_DIER_UIE;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <ADC_custom_init+0xd8>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	4a0b      	ldr	r2, [pc, #44]	@ (80006a0 <ADC_custom_init+0xd8>)
 8000672:	f023 0301 	bic.w	r3, r3, #1
 8000676:	60d3      	str	r3, [r2, #12]
	TIM6->CR1 &= ~TIM_CR1_CEN;
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <ADC_custom_init+0xd8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a08      	ldr	r2, [pc, #32]	@ (80006a0 <ADC_custom_init+0xd8>)
 800067e:	f023 0301 	bic.w	r3, r3, #1
 8000682:	6013      	str	r3, [r2, #0]
	/* Fine sett. TImer */

	ADC3->IER |= ADC_IER_EOCIE;		// Abilito l'interrupt di fine conversione
 8000684:	4b05      	ldr	r3, [pc, #20]	@ (800069c <ADC_custom_init+0xd4>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	4a04      	ldr	r2, [pc, #16]	@ (800069c <ADC_custom_init+0xd4>)
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	6053      	str	r3, [r2, #4]
//	ADC3->CR  |= ADC_CR_ADSTART;	// Inizio le misurazioni
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	58026000 	.word	0x58026000
 80006a0:	40001000 	.word	0x40001000

080006a4 <ADC_custom_interrupt>:

void ADC_custom_interrupt(){
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

	if(triggd && (DMA1_Stream0->NDTR == trig_indx)){
 80006a8:	4b30      	ldr	r3, [pc, #192]	@ (800076c <ADC_custom_interrupt+0xc8>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d018      	beq.n	80006e2 <ADC_custom_interrupt+0x3e>
 80006b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000770 <ADC_custom_interrupt+0xcc>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	4a2f      	ldr	r2, [pc, #188]	@ (8000774 <ADC_custom_interrupt+0xd0>)
 80006b6:	8812      	ldrh	r2, [r2, #0]
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d112      	bne.n	80006e2 <ADC_custom_interrupt+0x3e>

		TIM6->CR1 &= ~TIM_CR1_CEN;
 80006bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000778 <ADC_custom_interrupt+0xd4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a2d      	ldr	r2, [pc, #180]	@ (8000778 <ADC_custom_interrupt+0xd4>)
 80006c2:	f023 0301 	bic.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

		triggd = 0;
 80006c8:	4b28      	ldr	r3, [pc, #160]	@ (800076c <ADC_custom_interrupt+0xc8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
		pre_triggd = 0;
 80006ce:	4b2b      	ldr	r3, [pc, #172]	@ (800077c <ADC_custom_interrupt+0xd8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]

		USART3->CR3 |= USART_CR3_DMAT;
 80006d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000780 <ADC_custom_interrupt+0xdc>)
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	4a29      	ldr	r2, [pc, #164]	@ (8000780 <ADC_custom_interrupt+0xdc>)
 80006da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006de:	6093      	str	r3, [r2, #8]
		return;
 80006e0:	e040      	b.n	8000764 <ADC_custom_interrupt+0xc0>
	}

	else if(!triggd && !(COMP12->SR & COMP_SR_C2VAL) ){
 80006e2:	4b22      	ldr	r3, [pc, #136]	@ (800076c <ADC_custom_interrupt+0xc8>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	f083 0301 	eor.w	r3, r3, #1
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d009      	beq.n	8000704 <ADC_custom_interrupt+0x60>
 80006f0:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <ADC_custom_interrupt+0xe0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f003 0302 	and.w	r3, r3, #2
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d103      	bne.n	8000704 <ADC_custom_interrupt+0x60>
		pre_triggd = 1;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <ADC_custom_interrupt+0xd8>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
		return;
 8000702:	e02f      	b.n	8000764 <ADC_custom_interrupt+0xc0>
	}

	else if(pre_triggd && !triggd && (COMP12->SR & COMP_SR_C2VAL)){
 8000704:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <ADC_custom_interrupt+0xd8>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d025      	beq.n	8000758 <ADC_custom_interrupt+0xb4>
 800070c:	4b17      	ldr	r3, [pc, #92]	@ (800076c <ADC_custom_interrupt+0xc8>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f083 0301 	eor.w	r3, r3, #1
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d01e      	beq.n	8000758 <ADC_custom_interrupt+0xb4>
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <ADC_custom_interrupt+0xe0>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	2b00      	cmp	r3, #0
 8000724:	d018      	beq.n	8000758 <ADC_custom_interrupt+0xb4>
		triggd = 1;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <ADC_custom_interrupt+0xc8>)
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
		pre_triggd = 0;
 800072c:	4b13      	ldr	r3, [pc, #76]	@ (800077c <ADC_custom_interrupt+0xd8>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
//		trig_indx = DMA1_Stream0->NDTR;
		trig_indx = (DMA1_Stream0->NDTR + 10UL)%40UL + 1UL;	// conservo 100 dati prima del trigger
 8000732:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <ADC_custom_interrupt+0xcc>)
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	f103 010a 	add.w	r1, r3, #10
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <ADC_custom_interrupt+0xe4>)
 800073c:	fba3 2301 	umull	r2, r3, r3, r1
 8000740:	095a      	lsrs	r2, r3, #5
 8000742:	4613      	mov	r3, r2
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	1aca      	subs	r2, r1, r3
 800074c:	b293      	uxth	r3, r2
 800074e:	3301      	adds	r3, #1
 8000750:	b29a      	uxth	r2, r3
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <ADC_custom_interrupt+0xd0>)
 8000754:	801a      	strh	r2, [r3, #0]
		return;
 8000756:	e005      	b.n	8000764 <ADC_custom_interrupt+0xc0>
	}

	ADC3->ISR |= ADC_ISR_EOC;
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <ADC_custom_interrupt+0xe8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a0b      	ldr	r2, [pc, #44]	@ (800078c <ADC_custom_interrupt+0xe8>)
 800075e:	f043 0304 	orr.w	r3, r3, #4
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	2400002c 	.word	0x2400002c
 8000770:	40020010 	.word	0x40020010
 8000774:	2400002e 	.word	0x2400002e
 8000778:	40001000 	.word	0x40001000
 800077c:	2400002d 	.word	0x2400002d
 8000780:	40004800 	.word	0x40004800
 8000784:	58003800 	.word	0x58003800
 8000788:	cccccccd 	.word	0xcccccccd
 800078c:	58026000 	.word	0x58026000

08000790 <COMP_custom_init>:
 *      Author: yehan
 */

#include "Custom_COMP.h"

void COMP_custom_init(){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0

	DAC1->CR |= DAC_CR_EN1;			// attivo DAC
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <COMP_custom_init+0x38>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a0b      	ldr	r2, [pc, #44]	@ (80007c8 <COMP_custom_init+0x38>)
 800079a:	f043 0301 	orr.w	r3, r3, #1
 800079e:	6013      	str	r3, [r2, #0]

	DAC1->DHR12R1 = 100;			// imposto soglia del comparatore IN 12 BIT NON 16
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <COMP_custom_init+0x38>)
 80007a2:	2264      	movs	r2, #100	@ 0x64
 80007a4:	609a      	str	r2, [r3, #8]

	DAC1->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <COMP_custom_init+0x38>)
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	4a07      	ldr	r2, [pc, #28]	@ (80007c8 <COMP_custom_init+0x38>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6053      	str	r3, [r2, #4]

	COMP2->CFGR |= COMP_CFGRx_EN;	// attivo il comparatore
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <COMP_custom_init+0x3c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <COMP_custom_init+0x3c>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6013      	str	r3, [r2, #0]
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	40007400 	.word	0x40007400
 80007cc:	58003810 	.word	0x58003810

080007d0 <DMA_custom_init>:

#define DMA_DATA_BUFF_SIZE 40

uint16_t DMA_data_buffer[DMA_DATA_BUFF_SIZE];

void DMA_custom_init(){
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0

	DMA1_Stream0->M0AR = (uint32_t) (&DMA_data_buffer);	// inidico l'indirizzo dello storarge di dati
 80007d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000854 <DMA_custom_init+0x84>)
 80007d8:	4a1f      	ldr	r2, [pc, #124]	@ (8000858 <DMA_custom_init+0x88>)
 80007da:	60da      	str	r2, [r3, #12]
	DMA1_Stream1->M0AR = (uint32_t) (&DMA_data_buffer);
 80007dc:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <DMA_custom_init+0x8c>)
 80007de:	4a1e      	ldr	r2, [pc, #120]	@ (8000858 <DMA_custom_init+0x88>)
 80007e0:	60da      	str	r2, [r3, #12]

	DMA1_Stream0->PAR = (uint32_t) (&ADC3->DR);			// indico gli indirizzi per la trasmissione
 80007e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000854 <DMA_custom_init+0x84>)
 80007e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000860 <DMA_custom_init+0x90>)
 80007e6:	609a      	str	r2, [r3, #8]
	DMA1_Stream1->PAR = (uint32_t) (&USART3->TDR);
 80007e8:	4b1c      	ldr	r3, [pc, #112]	@ (800085c <DMA_custom_init+0x8c>)
 80007ea:	4a1e      	ldr	r2, [pc, #120]	@ (8000864 <DMA_custom_init+0x94>)
 80007ec:	609a      	str	r2, [r3, #8]

	uint32_t n_misure = DMA_DATA_BUFF_SIZE;
 80007ee:	2328      	movs	r3, #40	@ 0x28
 80007f0:	607b      	str	r3, [r7, #4]

	DMA1_Stream0->NDTR = n_misure;			// numero elementi da prendere da ADC3
 80007f2:	4a18      	ldr	r2, [pc, #96]	@ (8000854 <DMA_custom_init+0x84>)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6053      	str	r3, [r2, #4]
	DMA1_Stream1->NDTR = n_misure*2;			// numero elementi da mandare a USART3
 80007f8:	4a18      	ldr	r2, [pc, #96]	@ (800085c <DMA_custom_init+0x8c>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	6053      	str	r3, [r2, #4]

	DMA1_Stream0->CR &= ~DMA_SxCR_TCIE;		// disablilito interrupt di fine ricezione
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <DMA_custom_init+0x84>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a13      	ldr	r2, [pc, #76]	@ (8000854 <DMA_custom_init+0x84>)
 8000806:	f023 0310 	bic.w	r3, r3, #16
 800080a:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_TCIE;		// abilito interrupt di fine trasmissione
 800080c:	4b13      	ldr	r3, [pc, #76]	@ (800085c <DMA_custom_init+0x8c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a12      	ldr	r2, [pc, #72]	@ (800085c <DMA_custom_init+0x8c>)
 8000812:	f043 0310 	orr.w	r3, r3, #16
 8000816:	6013      	str	r3, [r2, #0]

	ADC3->CFGR |= (3 << ADC_CFGR_DMNGT_Pos);	// DMA in cont mode
 8000818:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <DMA_custom_init+0x98>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	4a12      	ldr	r2, [pc, #72]	@ (8000868 <DMA_custom_init+0x98>)
 800081e:	f043 0303 	orr.w	r3, r3, #3
 8000822:	60d3      	str	r3, [r2, #12]

	DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000824:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <DMA_custom_init+0x84>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a0a      	ldr	r2, [pc, #40]	@ (8000854 <DMA_custom_init+0x84>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 8000830:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <DMA_custom_init+0x8c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a09      	ldr	r2, [pc, #36]	@ (800085c <DMA_custom_init+0x8c>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	6013      	str	r3, [r2, #0]

	ADC3->CR  |= ADC_CR_ADSTART;
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <DMA_custom_init+0x98>)
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	4a09      	ldr	r2, [pc, #36]	@ (8000868 <DMA_custom_init+0x98>)
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	6093      	str	r3, [r2, #8]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	40020010 	.word	0x40020010
 8000858:	24000030 	.word	0x24000030
 800085c:	40020028 	.word	0x40020028
 8000860:	58026040 	.word	0x58026040
 8000864:	40004828 	.word	0x40004828
 8000868:	58026000 	.word	0x58026000

0800086c <DMA_custom_interrupt_tx>:


void DMA_custom_interrupt_tx(){
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

	USART3->CR3 &= ~USART_CR3_DMAT;			  // SPENGO trasmissione usart
 8000870:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <DMA_custom_interrupt_tx+0x80>)
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	4a1d      	ldr	r2, [pc, #116]	@ (80008ec <DMA_custom_interrupt_tx+0x80>)
 8000876:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800087a:	6093      	str	r3, [r2, #8]

	DMA1->LIFCR = 0xffffffff;	// azzero i flag di interrupt per evitare che ci entri mentre avviene l'interrupt
 800087c:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <DMA_custom_interrupt_tx+0x84>)
 800087e:	f04f 32ff 	mov.w	r2, #4294967295
 8000882:	609a      	str	r2, [r3, #8]
	DMA1->HIFCR = 0xffffffff;
 8000884:	4b1a      	ldr	r3, [pc, #104]	@ (80008f0 <DMA_custom_interrupt_tx+0x84>)
 8000886:	f04f 32ff 	mov.w	r2, #4294967295
 800088a:	60da      	str	r2, [r3, #12]

	DMA1_Stream0->CR |= DMA_SxCR_EN;
 800088c:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <DMA_custom_interrupt_tx+0x88>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a18      	ldr	r2, [pc, #96]	@ (80008f4 <DMA_custom_interrupt_tx+0x88>)
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	6013      	str	r3, [r2, #0]
	DMA1_Stream1->CR |= DMA_SxCR_EN;
 8000898:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <DMA_custom_interrupt_tx+0x8c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a16      	ldr	r2, [pc, #88]	@ (80008f8 <DMA_custom_interrupt_tx+0x8c>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	6013      	str	r3, [r2, #0]

	// invio come ultimo elemento l'indice di trigger
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 80008a4:	bf00      	nop
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <DMA_custom_interrupt_tx+0x80>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d0f9      	beq.n	80008a6 <DMA_custom_interrupt_tx+0x3a>
	USART3->TDR = (unsigned char)(trig_indx & 0xFF );
 80008b2:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <DMA_custom_interrupt_tx+0x90>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <DMA_custom_interrupt_tx+0x80>)
 80008ba:	629a      	str	r2, [r3, #40]	@ 0x28
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 80008bc:	bf00      	nop
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <DMA_custom_interrupt_tx+0x80>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d0f9      	beq.n	80008be <DMA_custom_interrupt_tx+0x52>
	USART3->TDR = *((unsigned char*)&trig_indx + 1);
 80008ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <DMA_custom_interrupt_tx+0x94>)
 80008cc:	781a      	ldrb	r2, [r3, #0]
 80008ce:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <DMA_custom_interrupt_tx+0x80>)
 80008d0:	629a      	str	r2, [r3, #40]	@ 0x28
	while(!(USART3->ISR & USART_ISR_TXE_TXFNF));
 80008d2:	bf00      	nop
 80008d4:	4b05      	ldr	r3, [pc, #20]	@ (80008ec <DMA_custom_interrupt_tx+0x80>)
 80008d6:	69db      	ldr	r3, [r3, #28]
 80008d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d0f9      	beq.n	80008d4 <DMA_custom_interrupt_tx+0x68>
}
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	40004800 	.word	0x40004800
 80008f0:	40020000 	.word	0x40020000
 80008f4:	40020010 	.word	0x40020010
 80008f8:	40020028 	.word	0x40020028
 80008fc:	2400002e 	.word	0x2400002e
 8000900:	2400002f 	.word	0x2400002f

08000904 <USART_custom_init>:
 *      Author: yehan
 */

#include "Custom_USART.h"

void USART_custom_init(){
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

	USART3->CR1 |= USART_CR1_TE;
 8000908:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <USART_custom_init+0x4c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a10      	ldr	r2, [pc, #64]	@ (8000950 <USART_custom_init+0x4c>)
 800090e:	f043 0308 	orr.w	r3, r3, #8
 8000912:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_RE;
 8000914:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <USART_custom_init+0x4c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0d      	ldr	r2, [pc, #52]	@ (8000950 <USART_custom_init+0x4c>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	6013      	str	r3, [r2, #0]

	USART3->CR1 &= ~USART_CR1_TXEIE;
 8000920:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <USART_custom_init+0x4c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <USART_custom_init+0x4c>)
 8000926:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800092a:	6013      	str	r3, [r2, #0]
	USART3->CR1 |= USART_CR1_RXNEIE;
 800092c:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <USART_custom_init+0x4c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a07      	ldr	r2, [pc, #28]	@ (8000950 <USART_custom_init+0x4c>)
 8000932:	f043 0320 	orr.w	r3, r3, #32
 8000936:	6013      	str	r3, [r2, #0]

	USART3->CR1 |= USART_CR1_UE;
 8000938:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <USART_custom_init+0x4c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a04      	ldr	r2, [pc, #16]	@ (8000950 <USART_custom_init+0x4c>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40004800 	.word	0x40004800

08000954 <USART_custom_interrupt>:

void USART_custom_interrupt(){
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0

	char data = USART3->RDR;
 800095a:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <USART_custom_interrupt+0x5c>)
 800095c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800095e:	71fb      	strb	r3, [r7, #7]

	if(data == '?'){
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	2b3f      	cmp	r3, #63	@ 0x3f
 8000964:	d10b      	bne.n	800097e <USART_custom_interrupt+0x2a>

		USART3->CR3 &= ~USART_CR3_DMAT;	// spengo l'usart
 8000966:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <USART_custom_interrupt+0x5c>)
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	4a11      	ldr	r2, [pc, #68]	@ (80009b0 <USART_custom_interrupt+0x5c>)
 800096c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000970:	6093      	str	r3, [r2, #8]
		TIM6->CR1 |= TIM_CR1_CEN;		// accendo l'adc
 8000972:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <USART_custom_interrupt+0x60>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a0f      	ldr	r2, [pc, #60]	@ (80009b4 <USART_custom_interrupt+0x60>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6013      	str	r3, [r2, #0]
	}

	USART3->ICR |= USART_ICR_ORECF;  //Cancella l'overrun. Capita quando si entra in debug
 800097e:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <USART_custom_interrupt+0x5c>)
 8000980:	6a1b      	ldr	r3, [r3, #32]
 8000982:	4a0b      	ldr	r2, [pc, #44]	@ (80009b0 <USART_custom_interrupt+0x5c>)
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF;   //Azzeramento flag interrupt trasmissione
 800098a:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <USART_custom_interrupt+0x5c>)
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	4a08      	ldr	r2, [pc, #32]	@ (80009b0 <USART_custom_interrupt+0x5c>)
 8000990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000994:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <USART_custom_interrupt+0x5c>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	4a05      	ldr	r2, [pc, #20]	@ (80009b0 <USART_custom_interrupt+0x5c>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6193      	str	r3, [r2, #24]
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40004800 	.word	0x40004800
 80009b4:	40001000 	.word	0x40001000

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009bc:	f000 fe70 	bl	80016a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c0:	f000 f818 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c4:	f000 fa40 	bl	8000e48 <MX_GPIO_Init>
  MX_DMA_Init();
 80009c8:	f000 fa16 	bl	8000df8 <MX_DMA_Init>
  MX_ADC3_Init();
 80009cc:	f000 f8c0 	bl	8000b50 <MX_ADC3_Init>
  MX_COMP2_Init();
 80009d0:	f000 f92e 	bl	8000c30 <MX_COMP2_Init>
  MX_DAC1_Init();
 80009d4:	f000 f95a 	bl	8000c8c <MX_DAC1_Init>
  MX_TIM6_Init();
 80009d8:	f000 f98a 	bl	8000cf0 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 80009dc:	f000 f9be 	bl	8000d5c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  COMP_custom_init();
 80009e0:	f7ff fed6 	bl	8000790 <COMP_custom_init>
  ADC_custom_init();
 80009e4:	f7ff fdf0 	bl	80005c8 <ADC_custom_init>
  USART_custom_init();
 80009e8:	f7ff ff8c 	bl	8000904 <USART_custom_init>
  DMA_custom_init();
 80009ec:	f7ff fef0 	bl	80007d0 <DMA_custom_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <main+0x38>

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b09e      	sub	sp, #120	@ 0x78
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009fe:	224c      	movs	r2, #76	@ 0x4c
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f009 f892 	bl	8009b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f009 f88b 	bl	8009b2c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a16:	2002      	movs	r0, #2
 8000a18:	f004 f902 	bl	8004c20 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	4b48      	ldr	r3, [pc, #288]	@ (8000b44 <SystemClock_Config+0x150>)
 8000a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a24:	4a47      	ldr	r2, [pc, #284]	@ (8000b44 <SystemClock_Config+0x150>)
 8000a26:	f023 0301 	bic.w	r3, r3, #1
 8000a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a2c:	4b45      	ldr	r3, [pc, #276]	@ (8000b44 <SystemClock_Config+0x150>)
 8000a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	4b44      	ldr	r3, [pc, #272]	@ (8000b48 <SystemClock_Config+0x154>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a43      	ldr	r2, [pc, #268]	@ (8000b48 <SystemClock_Config+0x154>)
 8000a3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b41      	ldr	r3, [pc, #260]	@ (8000b48 <SystemClock_Config+0x154>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a4e:	bf00      	nop
 8000a50:	4b3d      	ldr	r3, [pc, #244]	@ (8000b48 <SystemClock_Config+0x154>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a5c:	d1f8      	bne.n	8000a50 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b4c <SystemClock_Config+0x158>)
 8000a60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a64:	4a39      	ldr	r2, [pc, #228]	@ (8000b4c <SystemClock_Config+0x158>)
 8000a66:	f043 0302 	orr.w	r3, r3, #2
 8000a6a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a6e:	4b37      	ldr	r3, [pc, #220]	@ (8000b4c <SystemClock_Config+0x158>)
 8000a70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a74:	f003 0302 	and.w	r3, r3, #2
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	4b31      	ldr	r3, [pc, #196]	@ (8000b48 <SystemClock_Config+0x154>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a30      	ldr	r2, [pc, #192]	@ (8000b48 <SystemClock_Config+0x154>)
 8000a86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a8a:	6193      	str	r3, [r2, #24]
 8000a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b48 <SystemClock_Config+0x154>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4b2b      	ldr	r3, [pc, #172]	@ (8000b44 <SystemClock_Config+0x150>)
 8000a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a9a:	4a2a      	ldr	r2, [pc, #168]	@ (8000b44 <SystemClock_Config+0x150>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000aa2:	4b28      	ldr	r3, [pc, #160]	@ (8000b44 <SystemClock_Config+0x150>)
 8000aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aae:	bf00      	nop
 8000ab0:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <SystemClock_Config+0x154>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ab8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000abc:	d1f8      	bne.n	8000ab0 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ac2:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000acc:	2302      	movs	r3, #2
 8000ace:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000ad4:	2378      	movs	r3, #120	@ 0x78
 8000ad6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000adc:	2304      	movs	r3, #4
 8000ade:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ae4:	230c      	movs	r3, #12
 8000ae6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000af4:	4618      	mov	r0, r3
 8000af6:	f004 f8cd 	bl	8004c94 <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000b00:	f000 fad2 	bl	80010a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	233f      	movs	r3, #63	@ 0x3f
 8000b06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b10:	2308      	movs	r3, #8
 8000b12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b14:	2340      	movs	r3, #64	@ 0x40
 8000b16:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b18:	2340      	movs	r3, #64	@ 0x40
 8000b1a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b22:	2340      	movs	r3, #64	@ 0x40
 8000b24:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f004 fd0b 	bl	8005548 <HAL_RCC_ClockConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000b38:	f000 fab6 	bl	80010a8 <Error_Handler>
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3778      	adds	r7, #120	@ 0x78
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	58000400 	.word	0x58000400
 8000b48:	58024800 	.word	0x58024800
 8000b4c:	58024400 	.word	0x58024400

08000b50 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
 8000b64:	615a      	str	r2, [r3, #20]
 8000b66:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b68:	4b2f      	ldr	r3, [pc, #188]	@ (8000c28 <MX_ADC3_Init+0xd8>)
 8000b6a:	4a30      	ldr	r2, [pc, #192]	@ (8000c2c <MX_ADC3_Init+0xdc>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c28 <MX_ADC3_Init+0xd8>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b74:	4b2c      	ldr	r3, [pc, #176]	@ (8000c28 <MX_ADC3_Init+0xd8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c28 <MX_ADC3_Init+0xd8>)
 8000b7c:	2204      	movs	r2, #4
 8000b7e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b80:	4b29      	ldr	r3, [pc, #164]	@ (8000c28 <MX_ADC3_Init+0xd8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b86:	4b28      	ldr	r3, [pc, #160]	@ (8000c28 <MX_ADC3_Init+0xd8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000b8c:	4b26      	ldr	r3, [pc, #152]	@ (8000c28 <MX_ADC3_Init+0xd8>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b92:	4b25      	ldr	r3, [pc, #148]	@ (8000c28 <MX_ADC3_Init+0xd8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000b98:	4b23      	ldr	r3, [pc, #140]	@ (8000c28 <MX_ADC3_Init+0xd8>)
 8000b9a:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000b9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ba0:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <MX_ADC3_Init+0xd8>)
 8000ba2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ba6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <MX_ADC3_Init+0xd8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bae:	4b1e      	ldr	r3, [pc, #120]	@ (8000c28 <MX_ADC3_Init+0xd8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <MX_ADC3_Init+0xd8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000bba:	4b1b      	ldr	r3, [pc, #108]	@ (8000c28 <MX_ADC3_Init+0xd8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <MX_ADC3_Init+0xd8>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bc8:	4817      	ldr	r0, [pc, #92]	@ (8000c28 <MX_ADC3_Init+0xd8>)
 8000bca:	f000 fff5 	bl	8001bb8 <HAL_ADC_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000bd4:	f000 fa68 	bl	80010a8 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000bd8:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <MX_ADC3_Init+0xd8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bde:	4812      	ldr	r0, [pc, #72]	@ (8000c28 <MX_ADC3_Init+0xd8>)
 8000be0:	f000 ffea 	bl	8001bb8 <HAL_ADC_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000bea:	f000 fa5d 	bl	80010a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bf2:	2306      	movs	r3, #6
 8000bf4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bfa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000bfe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c00:	2304      	movs	r3, #4
 8000c02:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <MX_ADC3_Init+0xd8>)
 8000c12:	f001 f973 	bl	8001efc <HAL_ADC_ConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000c1c:	f000 fa44 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	24000080 	.word	0x24000080
 8000c2c:	58026000 	.word	0x58026000

08000c30 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000c34:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <MX_COMP2_Init+0x54>)
 8000c36:	4a14      	ldr	r2, [pc, #80]	@ (8000c88 <MX_COMP2_Init+0x58>)
 8000c38:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 8000c3a:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <MX_COMP2_Init+0x54>)
 8000c3c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c40:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8000c42:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <MX_COMP2_Init+0x54>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000c48:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <MX_COMP2_Init+0x54>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_MEDIUM;
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c84 <MX_COMP2_Init+0x54>)
 8000c50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c54:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <MX_COMP2_Init+0x54>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <MX_COMP2_Init+0x54>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <MX_COMP2_Init+0x54>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <MX_COMP2_Init+0x54>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <MX_COMP2_Init+0x54>)
 8000c70:	f001 fdac 	bl	80027cc <HAL_COMP_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_COMP2_Init+0x4e>
  {
    Error_Handler();
 8000c7a:	f000 fa15 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2400015c 	.word	0x2400015c
 8000c88:	58003810 	.word	0x58003810

08000c8c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	@ 0x28
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2224      	movs	r2, #36	@ 0x24
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f008 ff47 	bl	8009b2c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <MX_DAC1_Init+0x5c>)
 8000ca0:	4a12      	ldr	r2, [pc, #72]	@ (8000cec <MX_DAC1_Init+0x60>)
 8000ca2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ca4:	4810      	ldr	r0, [pc, #64]	@ (8000ce8 <MX_DAC1_Init+0x5c>)
 8000ca6:	f001 ffca 	bl	8002c3e <HAL_DAC_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000cb0:	f000 f9fa 	bl	80010a8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4806      	ldr	r0, [pc, #24]	@ (8000ce8 <MX_DAC1_Init+0x5c>)
 8000cd0:	f001 ffd8 	bl	8002c84 <HAL_DAC_ConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000cda:	f000 f9e5 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	@ 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	24000188 	.word	0x24000188
 8000cec:	40007400 	.word	0x40007400

08000cf0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d00:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <MX_TIM6_Init+0x64>)
 8000d02:	4a15      	ldr	r2, [pc, #84]	@ (8000d58 <MX_TIM6_Init+0x68>)
 8000d04:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000d06:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <MX_TIM6_Init+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <MX_TIM6_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000d12:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <MX_TIM6_Init+0x64>)
 8000d14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d18:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <MX_TIM6_Init+0x64>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d20:	480c      	ldr	r0, [pc, #48]	@ (8000d54 <MX_TIM6_Init+0x64>)
 8000d22:	f007 fc9b 	bl	800865c <HAL_TIM_Base_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d2c:	f000 f9bc 	bl	80010a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d30:	2320      	movs	r3, #32
 8000d32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <MX_TIM6_Init+0x64>)
 8000d3e:	f007 fd8b 	bl	8008858 <HAL_TIMEx_MasterConfigSynchronization>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d48:	f000 f9ae 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	2400019c 	.word	0x2400019c
 8000d58:	40001000 	.word	0x40001000

08000d5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d60:	4b22      	ldr	r3, [pc, #136]	@ (8000dec <MX_USART3_UART_Init+0x90>)
 8000d62:	4a23      	ldr	r2, [pc, #140]	@ (8000df0 <MX_USART3_UART_Init+0x94>)
 8000d64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8000d66:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <MX_USART3_UART_Init+0x90>)
 8000d68:	4a22      	ldr	r2, [pc, #136]	@ (8000df4 <MX_USART3_UART_Init+0x98>)
 8000d6a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <MX_USART3_UART_Init+0x90>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d72:	4b1e      	ldr	r3, [pc, #120]	@ (8000dec <MX_USART3_UART_Init+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d78:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <MX_USART3_UART_Init+0x90>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dec <MX_USART3_UART_Init+0x90>)
 8000d80:	220c      	movs	r2, #12
 8000d82:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d84:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <MX_USART3_UART_Init+0x90>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8a:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <MX_USART3_UART_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d90:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <MX_USART3_UART_Init+0x90>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d96:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <MX_USART3_UART_Init+0x90>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d9c:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <MX_USART3_UART_Init+0x90>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000da2:	4812      	ldr	r0, [pc, #72]	@ (8000dec <MX_USART3_UART_Init+0x90>)
 8000da4:	f007 fde6 	bl	8008974 <HAL_UART_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000dae:	f000 f97b 	bl	80010a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db2:	2100      	movs	r1, #0
 8000db4:	480d      	ldr	r0, [pc, #52]	@ (8000dec <MX_USART3_UART_Init+0x90>)
 8000db6:	f008 fdee 	bl	8009996 <HAL_UARTEx_SetTxFifoThreshold>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000dc0:	f000 f972 	bl	80010a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4809      	ldr	r0, [pc, #36]	@ (8000dec <MX_USART3_UART_Init+0x90>)
 8000dc8:	f008 fe23 	bl	8009a12 <HAL_UARTEx_SetRxFifoThreshold>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000dd2:	f000 f969 	bl	80010a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	@ (8000dec <MX_USART3_UART_Init+0x90>)
 8000dd8:	f008 fda4 	bl	8009924 <HAL_UARTEx_DisableFifoMode>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000de2:	f000 f961 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	240001e8 	.word	0x240001e8
 8000df0:	40004800 	.word	0x40004800
 8000df4:	000f4240 	.word	0x000f4240

08000df8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dfe:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <MX_DMA_Init+0x4c>)
 8000e00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e04:	4a0f      	ldr	r2, [pc, #60]	@ (8000e44 <MX_DMA_Init+0x4c>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <MX_DMA_Init+0x4c>)
 8000e10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2100      	movs	r1, #0
 8000e20:	200b      	movs	r0, #11
 8000e22:	f001 fed8 	bl	8002bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e26:	200b      	movs	r0, #11
 8000e28:	f001 feef 	bl	8002c0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	200c      	movs	r0, #12
 8000e32:	f001 fed0 	bl	8002bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e36:	200c      	movs	r0, #12
 8000e38:	f001 fee7 	bl	8002c0a <HAL_NVIC_EnableIRQ>

}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	58024400 	.word	0x58024400

08000e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08c      	sub	sp, #48	@ 0x30
 8000e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5e:	4b8b      	ldr	r3, [pc, #556]	@ (800108c <MX_GPIO_Init+0x244>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e64:	4a89      	ldr	r2, [pc, #548]	@ (800108c <MX_GPIO_Init+0x244>)
 8000e66:	f043 0304 	orr.w	r3, r3, #4
 8000e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e6e:	4b87      	ldr	r3, [pc, #540]	@ (800108c <MX_GPIO_Init+0x244>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7c:	4b83      	ldr	r3, [pc, #524]	@ (800108c <MX_GPIO_Init+0x244>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e82:	4a82      	ldr	r2, [pc, #520]	@ (800108c <MX_GPIO_Init+0x244>)
 8000e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e8c:	4b7f      	ldr	r3, [pc, #508]	@ (800108c <MX_GPIO_Init+0x244>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b7c      	ldr	r3, [pc, #496]	@ (800108c <MX_GPIO_Init+0x244>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea0:	4a7a      	ldr	r2, [pc, #488]	@ (800108c <MX_GPIO_Init+0x244>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eaa:	4b78      	ldr	r3, [pc, #480]	@ (800108c <MX_GPIO_Init+0x244>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb8:	4b74      	ldr	r3, [pc, #464]	@ (800108c <MX_GPIO_Init+0x244>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebe:	4a73      	ldr	r2, [pc, #460]	@ (800108c <MX_GPIO_Init+0x244>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec8:	4b70      	ldr	r3, [pc, #448]	@ (800108c <MX_GPIO_Init+0x244>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed6:	4b6d      	ldr	r3, [pc, #436]	@ (800108c <MX_GPIO_Init+0x244>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000edc:	4a6b      	ldr	r2, [pc, #428]	@ (800108c <MX_GPIO_Init+0x244>)
 8000ede:	f043 0310 	orr.w	r3, r3, #16
 8000ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee6:	4b69      	ldr	r3, [pc, #420]	@ (800108c <MX_GPIO_Init+0x244>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eec:	f003 0310 	and.w	r3, r3, #16
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef4:	4b65      	ldr	r3, [pc, #404]	@ (800108c <MX_GPIO_Init+0x244>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efa:	4a64      	ldr	r2, [pc, #400]	@ (800108c <MX_GPIO_Init+0x244>)
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f04:	4b61      	ldr	r3, [pc, #388]	@ (800108c <MX_GPIO_Init+0x244>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0a:	f003 0308 	and.w	r3, r3, #8
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f12:	4b5e      	ldr	r3, [pc, #376]	@ (800108c <MX_GPIO_Init+0x244>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f18:	4a5c      	ldr	r2, [pc, #368]	@ (800108c <MX_GPIO_Init+0x244>)
 8000f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f22:	4b5a      	ldr	r3, [pc, #360]	@ (800108c <MX_GPIO_Init+0x244>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000f36:	4856      	ldr	r0, [pc, #344]	@ (8001090 <MX_GPIO_Init+0x248>)
 8000f38:	f003 fe58 	bl	8004bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f42:	4854      	ldr	r0, [pc, #336]	@ (8001094 <MX_GPIO_Init+0x24c>)
 8000f44:	f003 fe52 	bl	8004bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	4852      	ldr	r0, [pc, #328]	@ (8001098 <MX_GPIO_Init+0x250>)
 8000f4e:	f003 fe4d 	bl	8004bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	484d      	ldr	r0, [pc, #308]	@ (800109c <MX_GPIO_Init+0x254>)
 8000f68:	f003 fc90 	bl	800488c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f6c:	2332      	movs	r3, #50	@ 0x32
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f7c:	230b      	movs	r3, #11
 8000f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	4845      	ldr	r0, [pc, #276]	@ (800109c <MX_GPIO_Init+0x254>)
 8000f88:	f003 fc80 	bl	800488c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f8c:	2386      	movs	r3, #134	@ 0x86
 8000f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f9c:	230b      	movs	r3, #11
 8000f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	483e      	ldr	r0, [pc, #248]	@ (80010a0 <MX_GPIO_Init+0x258>)
 8000fa8:	f003 fc70 	bl	800488c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000fac:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4832      	ldr	r0, [pc, #200]	@ (8001090 <MX_GPIO_Init+0x248>)
 8000fc6:	f003 fc61 	bl	800488c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fdc:	230b      	movs	r3, #11
 8000fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	482a      	ldr	r0, [pc, #168]	@ (8001090 <MX_GPIO_Init+0x248>)
 8000fe8:	f003 fc50 	bl	800488c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000fec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4823      	ldr	r0, [pc, #140]	@ (8001094 <MX_GPIO_Init+0x24c>)
 8001006:	f003 fc41 	bl	800488c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800100a:	2380      	movs	r3, #128	@ 0x80
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800100e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	4821      	ldr	r0, [pc, #132]	@ (80010a4 <MX_GPIO_Init+0x25c>)
 8001020:	f003 fc34 	bl	800488c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001024:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001036:	230a      	movs	r3, #10
 8001038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	4817      	ldr	r0, [pc, #92]	@ (80010a0 <MX_GPIO_Init+0x258>)
 8001042:	f003 fc23 	bl	800488c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001046:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800104a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001058:	230b      	movs	r3, #11
 800105a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4619      	mov	r1, r3
 8001062:	4810      	ldr	r0, [pc, #64]	@ (80010a4 <MX_GPIO_Init+0x25c>)
 8001064:	f003 fc12 	bl	800488c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001068:	2302      	movs	r3, #2
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	@ (8001098 <MX_GPIO_Init+0x250>)
 8001080:	f003 fc04 	bl	800488c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001084:	bf00      	nop
 8001086:	3730      	adds	r7, #48	@ 0x30
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	58024400 	.word	0x58024400
 8001090:	58020400 	.word	0x58020400
 8001094:	58020c00 	.word	0x58020c00
 8001098:	58021000 	.word	0x58021000
 800109c:	58020800 	.word	0x58020800
 80010a0:	58020000 	.word	0x58020000
 80010a4:	58021800 	.word	0x58021800

080010a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ac:	b672      	cpsid	i
}
 80010ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <Error_Handler+0x8>

080010b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <HAL_MspInit+0x5c>)
 80010bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010c0:	4a13      	ldr	r2, [pc, #76]	@ (8001110 <HAL_MspInit+0x5c>)
 80010c2:	f043 0302 	orr.w	r3, r3, #2
 80010c6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <HAL_MspInit+0x5c>)
 80010cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80010d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <HAL_MspInit+0x5c>)
 80010da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010de:	4a0c      	ldr	r2, [pc, #48]	@ (8001110 <HAL_MspInit+0x5c>)
 80010e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010e4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010e8:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <HAL_MspInit+0x5c>)
 80010ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 fb70 	bl	80017dc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80010fc:	f000 fb96 	bl	800182c <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001100:	2000      	movs	r0, #0
 8001102:	f000 fb7f 	bl	8001804 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	58024400 	.word	0x58024400

08001114 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b0b4      	sub	sp, #208	@ 0xd0
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	22c0      	movs	r2, #192	@ 0xc0
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f008 fd01 	bl	8009b2c <memset>
  if(hadc->Instance==ADC3)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a43      	ldr	r2, [pc, #268]	@ (800123c <HAL_ADC_MspInit+0x128>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d17e      	bne.n	8001232 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001134:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001138:	f04f 0300 	mov.w	r3, #0
 800113c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001140:	2302      	movs	r3, #2
 8001142:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 50;
 8001144:	2332      	movs	r3, #50	@ 0x32
 8001146:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001148:	2302      	movs	r3, #2
 800114a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800114c:	2302      	movs	r3, #2
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001150:	2302      	movs	r3, #2
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001158:	2300      	movs	r3, #0
 800115a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	4618      	mov	r0, r3
 800116c:	f004 fd78 	bl	8005c60 <HAL_RCCEx_PeriphCLKConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8001176:	f7ff ff97 	bl	80010a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800117a:	4b31      	ldr	r3, [pc, #196]	@ (8001240 <HAL_ADC_MspInit+0x12c>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001180:	4a2f      	ldr	r2, [pc, #188]	@ (8001240 <HAL_ADC_MspInit+0x12c>)
 8001182:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001186:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800118a:	4b2d      	ldr	r3, [pc, #180]	@ (8001240 <HAL_ADC_MspInit+0x12c>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001190:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001198:	4b29      	ldr	r3, [pc, #164]	@ (8001240 <HAL_ADC_MspInit+0x12c>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119e:	4a28      	ldr	r2, [pc, #160]	@ (8001240 <HAL_ADC_MspInit+0x12c>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a8:	4b25      	ldr	r3, [pc, #148]	@ (8001240 <HAL_ADC_MspInit+0x12c>)
 80011aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80011b6:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80011ba:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80011be:	f000 fb59 	bl	8001874 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 80011c2:	4b20      	ldr	r3, [pc, #128]	@ (8001244 <HAL_ADC_MspInit+0x130>)
 80011c4:	4a20      	ldr	r2, [pc, #128]	@ (8001248 <HAL_ADC_MspInit+0x134>)
 80011c6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80011c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <HAL_ADC_MspInit+0x130>)
 80011ca:	2273      	movs	r2, #115	@ 0x73
 80011cc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <HAL_ADC_MspInit+0x130>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <HAL_ADC_MspInit+0x130>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <HAL_ADC_MspInit+0x130>)
 80011dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011e0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011e2:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <HAL_ADC_MspInit+0x130>)
 80011e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011e8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011ea:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <HAL_ADC_MspInit+0x130>)
 80011ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011f0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80011f2:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <HAL_ADC_MspInit+0x130>)
 80011f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011f8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80011fa:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <HAL_ADC_MspInit+0x130>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001200:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <HAL_ADC_MspInit+0x130>)
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001206:	480f      	ldr	r0, [pc, #60]	@ (8001244 <HAL_ADC_MspInit+0x130>)
 8001208:	f001 fe7e 	bl	8002f08 <HAL_DMA_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001212:	f7ff ff49 	bl	80010a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <HAL_ADC_MspInit+0x130>)
 800121a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800121c:	4a09      	ldr	r2, [pc, #36]	@ (8001244 <HAL_ADC_MspInit+0x130>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	207f      	movs	r0, #127	@ 0x7f
 8001228:	f001 fcd5 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800122c:	207f      	movs	r0, #127	@ 0x7f
 800122e:	f001 fcec 	bl	8002c0a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8001232:	bf00      	nop
 8001234:	37d0      	adds	r7, #208	@ 0xd0
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	58026000 	.word	0x58026000
 8001240:	58024400 	.word	0x58024400
 8001244:	240000e4 	.word	0x240000e4
 8001248:	40020010 	.word	0x40020010

0800124c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	@ 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a18      	ldr	r2, [pc, #96]	@ (80012cc <HAL_COMP_MspInit+0x80>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d12a      	bne.n	80012c4 <HAL_COMP_MspInit+0x78>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 800126e:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <HAL_COMP_MspInit+0x84>)
 8001270:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001274:	4a16      	ldr	r2, [pc, #88]	@ (80012d0 <HAL_COMP_MspInit+0x84>)
 8001276:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800127a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800127e:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <HAL_COMP_MspInit+0x84>)
 8001280:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800128c:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <HAL_COMP_MspInit+0x84>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001292:	4a0f      	ldr	r2, [pc, #60]	@ (80012d0 <HAL_COMP_MspInit+0x84>)
 8001294:	f043 0310 	orr.w	r3, r3, #16
 8001298:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <HAL_COMP_MspInit+0x84>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a2:	f003 0310 	and.w	r3, r3, #16
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b0:	2303      	movs	r3, #3
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <HAL_COMP_MspInit+0x88>)
 80012c0:	f003 fae4 	bl	800488c <HAL_GPIO_Init>

  /* USER CODE END COMP2_MspInit 1 */

  }

}
 80012c4:	bf00      	nop
 80012c6:	3728      	adds	r7, #40	@ 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	58003810 	.word	0x58003810
 80012d0:	58024400 	.word	0x58024400
 80012d4:	58021000 	.word	0x58021000

080012d8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001314 <HAL_DAC_MspInit+0x3c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d10e      	bne.n	8001308 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80012ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <HAL_DAC_MspInit+0x40>)
 80012ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012f0:	4a09      	ldr	r2, [pc, #36]	@ (8001318 <HAL_DAC_MspInit+0x40>)
 80012f2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80012f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012fa:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <HAL_DAC_MspInit+0x40>)
 80012fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001300:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40007400 	.word	0x40007400
 8001318:	58024400 	.word	0x58024400

0800131c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0b      	ldr	r2, [pc, #44]	@ (8001358 <HAL_TIM_Base_MspInit+0x3c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d10e      	bne.n	800134c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800132e:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <HAL_TIM_Base_MspInit+0x40>)
 8001330:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001334:	4a09      	ldr	r2, [pc, #36]	@ (800135c <HAL_TIM_Base_MspInit+0x40>)
 8001336:	f043 0310 	orr.w	r3, r3, #16
 800133a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800133e:	4b07      	ldr	r3, [pc, #28]	@ (800135c <HAL_TIM_Base_MspInit+0x40>)
 8001340:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001344:	f003 0310 	and.w	r3, r3, #16
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	40001000 	.word	0x40001000
 800135c:	58024400 	.word	0x58024400

08001360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b0ba      	sub	sp, #232	@ 0xe8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	22c0      	movs	r2, #192	@ 0xc0
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f008 fbd3 	bl	8009b2c <memset>
  if(huart->Instance==USART3)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a41      	ldr	r2, [pc, #260]	@ (8001490 <HAL_UART_MspInit+0x130>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d17b      	bne.n	8001488 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001390:	f04f 0202 	mov.w	r2, #2
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a2:	f107 0310 	add.w	r3, r7, #16
 80013a6:	4618      	mov	r0, r3
 80013a8:	f004 fc5a 	bl	8005c60 <HAL_RCCEx_PeriphCLKConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013b2:	f7ff fe79 	bl	80010a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013b6:	4b37      	ldr	r3, [pc, #220]	@ (8001494 <HAL_UART_MspInit+0x134>)
 80013b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013bc:	4a35      	ldr	r2, [pc, #212]	@ (8001494 <HAL_UART_MspInit+0x134>)
 80013be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013c6:	4b33      	ldr	r3, [pc, #204]	@ (8001494 <HAL_UART_MspInit+0x134>)
 80013c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001494 <HAL_UART_MspInit+0x134>)
 80013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013da:	4a2e      	ldr	r2, [pc, #184]	@ (8001494 <HAL_UART_MspInit+0x134>)
 80013dc:	f043 0308 	orr.w	r3, r3, #8
 80013e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001494 <HAL_UART_MspInit+0x134>)
 80013e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800140c:	2307      	movs	r3, #7
 800140e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001412:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001416:	4619      	mov	r1, r3
 8001418:	481f      	ldr	r0, [pc, #124]	@ (8001498 <HAL_UART_MspInit+0x138>)
 800141a:	f003 fa37 	bl	800488c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800141e:	4b1f      	ldr	r3, [pc, #124]	@ (800149c <HAL_UART_MspInit+0x13c>)
 8001420:	4a1f      	ldr	r2, [pc, #124]	@ (80014a0 <HAL_UART_MspInit+0x140>)
 8001422:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001424:	4b1d      	ldr	r3, [pc, #116]	@ (800149c <HAL_UART_MspInit+0x13c>)
 8001426:	222e      	movs	r2, #46	@ 0x2e
 8001428:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800142a:	4b1c      	ldr	r3, [pc, #112]	@ (800149c <HAL_UART_MspInit+0x13c>)
 800142c:	2240      	movs	r2, #64	@ 0x40
 800142e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001430:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <HAL_UART_MspInit+0x13c>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001436:	4b19      	ldr	r3, [pc, #100]	@ (800149c <HAL_UART_MspInit+0x13c>)
 8001438:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800143c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800143e:	4b17      	ldr	r3, [pc, #92]	@ (800149c <HAL_UART_MspInit+0x13c>)
 8001440:	2200      	movs	r2, #0
 8001442:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001444:	4b15      	ldr	r3, [pc, #84]	@ (800149c <HAL_UART_MspInit+0x13c>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800144a:	4b14      	ldr	r3, [pc, #80]	@ (800149c <HAL_UART_MspInit+0x13c>)
 800144c:	2200      	movs	r2, #0
 800144e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <HAL_UART_MspInit+0x13c>)
 8001452:	2200      	movs	r2, #0
 8001454:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001456:	4b11      	ldr	r3, [pc, #68]	@ (800149c <HAL_UART_MspInit+0x13c>)
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800145c:	480f      	ldr	r0, [pc, #60]	@ (800149c <HAL_UART_MspInit+0x13c>)
 800145e:	f001 fd53 	bl	8002f08 <HAL_DMA_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001468:	f7ff fe1e 	bl	80010a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a0b      	ldr	r2, [pc, #44]	@ (800149c <HAL_UART_MspInit+0x13c>)
 8001470:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001472:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <HAL_UART_MspInit+0x13c>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	2027      	movs	r0, #39	@ 0x27
 800147e:	f001 fbaa 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001482:	2027      	movs	r0, #39	@ 0x27
 8001484:	f001 fbc1 	bl	8002c0a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001488:	bf00      	nop
 800148a:	37e8      	adds	r7, #232	@ 0xe8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40004800 	.word	0x40004800
 8001494:	58024400 	.word	0x58024400
 8001498:	58020c00 	.word	0x58020c00
 800149c:	2400027c 	.word	0x2400027c
 80014a0:	40020028 	.word	0x40020028

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <NMI_Handler+0x4>

080014ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <MemManage_Handler+0x4>

080014bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <UsageFault_Handler+0x4>

080014cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fa:	f000 f943 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */


  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001508:	4802      	ldr	r0, [pc, #8]	@ (8001514 <DMA1_Stream0_IRQHandler+0x10>)
 800150a:	f002 f859 	bl	80035c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	240000e4 	.word	0x240000e4

08001518 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
	DMA_custom_interrupt_tx();
 800151c:	f7ff f9a6 	bl	800086c <DMA_custom_interrupt_tx>
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
	}
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	USART_custom_interrupt();
 8001528:	f7ff fa14 	bl	8000954 <USART_custom_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */
	ADC_custom_interrupt();
 8001534:	f7ff f8b6 	bl	80006a4 <ADC_custom_interrupt>
  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
  /* USER CODE BEGIN ADC3_IRQn 1 */
	}
  /* USER CODE END ADC3_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}

0800153c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001540:	4b37      	ldr	r3, [pc, #220]	@ (8001620 <SystemInit+0xe4>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001546:	4a36      	ldr	r2, [pc, #216]	@ (8001620 <SystemInit+0xe4>)
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800154c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001550:	4b34      	ldr	r3, [pc, #208]	@ (8001624 <SystemInit+0xe8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	2b06      	cmp	r3, #6
 800155a:	d807      	bhi.n	800156c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800155c:	4b31      	ldr	r3, [pc, #196]	@ (8001624 <SystemInit+0xe8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 030f 	bic.w	r3, r3, #15
 8001564:	4a2f      	ldr	r2, [pc, #188]	@ (8001624 <SystemInit+0xe8>)
 8001566:	f043 0307 	orr.w	r3, r3, #7
 800156a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800156c:	4b2e      	ldr	r3, [pc, #184]	@ (8001628 <SystemInit+0xec>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a2d      	ldr	r2, [pc, #180]	@ (8001628 <SystemInit+0xec>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001578:	4b2b      	ldr	r3, [pc, #172]	@ (8001628 <SystemInit+0xec>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800157e:	4b2a      	ldr	r3, [pc, #168]	@ (8001628 <SystemInit+0xec>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4929      	ldr	r1, [pc, #164]	@ (8001628 <SystemInit+0xec>)
 8001584:	4b29      	ldr	r3, [pc, #164]	@ (800162c <SystemInit+0xf0>)
 8001586:	4013      	ands	r3, r2
 8001588:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800158a:	4b26      	ldr	r3, [pc, #152]	@ (8001624 <SystemInit+0xe8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d007      	beq.n	80015a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001596:	4b23      	ldr	r3, [pc, #140]	@ (8001624 <SystemInit+0xe8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 030f 	bic.w	r3, r3, #15
 800159e:	4a21      	ldr	r2, [pc, #132]	@ (8001624 <SystemInit+0xe8>)
 80015a0:	f043 0307 	orr.w	r3, r3, #7
 80015a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015a6:	4b20      	ldr	r3, [pc, #128]	@ (8001628 <SystemInit+0xec>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001628 <SystemInit+0xec>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001628 <SystemInit+0xec>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <SystemInit+0xec>)
 80015ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001630 <SystemInit+0xf4>)
 80015bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015be:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <SystemInit+0xec>)
 80015c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001634 <SystemInit+0xf8>)
 80015c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015c4:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <SystemInit+0xec>)
 80015c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001638 <SystemInit+0xfc>)
 80015c8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015ca:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <SystemInit+0xec>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015d0:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <SystemInit+0xec>)
 80015d2:	4a19      	ldr	r2, [pc, #100]	@ (8001638 <SystemInit+0xfc>)
 80015d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015d6:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <SystemInit+0xec>)
 80015d8:	2200      	movs	r2, #0
 80015da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <SystemInit+0xec>)
 80015de:	4a16      	ldr	r2, [pc, #88]	@ (8001638 <SystemInit+0xfc>)
 80015e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <SystemInit+0xec>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <SystemInit+0xec>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001628 <SystemInit+0xec>)
 80015ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <SystemInit+0xec>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015fa:	4b10      	ldr	r3, [pc, #64]	@ (800163c <SystemInit+0x100>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <SystemInit+0x104>)
 8001600:	4013      	ands	r3, r2
 8001602:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001606:	d202      	bcs.n	800160e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001608:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <SystemInit+0x108>)
 800160a:	2201      	movs	r2, #1
 800160c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800160e:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <SystemInit+0x10c>)
 8001610:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001614:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00
 8001624:	52002000 	.word	0x52002000
 8001628:	58024400 	.word	0x58024400
 800162c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001630:	02020200 	.word	0x02020200
 8001634:	01ff0000 	.word	0x01ff0000
 8001638:	01010280 	.word	0x01010280
 800163c:	5c001000 	.word	0x5c001000
 8001640:	ffff0000 	.word	0xffff0000
 8001644:	51008108 	.word	0x51008108
 8001648:	52004000 	.word	0x52004000

0800164c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800164c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001684 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001650:	f7ff ff74 	bl	800153c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001654:	480c      	ldr	r0, [pc, #48]	@ (8001688 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001656:	490d      	ldr	r1, [pc, #52]	@ (800168c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001658:	4a0d      	ldr	r2, [pc, #52]	@ (8001690 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166a:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800166c:	4c0a      	ldr	r4, [pc, #40]	@ (8001698 <LoopFillZerobss+0x22>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167a:	f008 fa5f 	bl	8009b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167e:	f7ff f99b 	bl	80009b8 <main>
  bx  lr
 8001682:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001684:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001688:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800168c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001690:	08009bec 	.word	0x08009bec
  ldr r2, =_sbss
 8001694:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001698:	240002f8 	.word	0x240002f8

0800169c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC_IRQHandler>
	...

080016a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a6:	2003      	movs	r0, #3
 80016a8:	f001 fa8a 	bl	8002bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016ac:	f004 f902 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
 80016b0:	4602      	mov	r2, r0
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <HAL_Init+0x68>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	0a1b      	lsrs	r3, r3, #8
 80016b8:	f003 030f 	and.w	r3, r3, #15
 80016bc:	4913      	ldr	r1, [pc, #76]	@ (800170c <HAL_Init+0x6c>)
 80016be:	5ccb      	ldrb	r3, [r1, r3]
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	fa22 f303 	lsr.w	r3, r2, r3
 80016c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <HAL_Init+0x68>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	4a0e      	ldr	r2, [pc, #56]	@ (800170c <HAL_Init+0x6c>)
 80016d4:	5cd3      	ldrb	r3, [r2, r3]
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
 80016e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001710 <HAL_Init+0x70>)
 80016e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001714 <HAL_Init+0x74>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ea:	2000      	movs	r0, #0
 80016ec:	f000 f814 	bl	8001718 <HAL_InitTick>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e002      	b.n	8001700 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016fa:	f7ff fcdb 	bl	80010b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	58024400 	.word	0x58024400
 800170c:	08009b9c 	.word	0x08009b9c
 8001710:	24000004 	.word	0x24000004
 8001714:	24000000 	.word	0x24000000

08001718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001720:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <HAL_InitTick+0x60>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e021      	b.n	8001770 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800172c:	4b13      	ldr	r3, [pc, #76]	@ (800177c <HAL_InitTick+0x64>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <HAL_InitTick+0x60>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800173a:	fbb3 f3f1 	udiv	r3, r3, r1
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f001 fa6f 	bl	8002c26 <HAL_SYSTICK_Config>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00e      	b.n	8001770 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d80a      	bhi.n	800176e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f001 fa39 	bl	8002bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001764:	4a06      	ldr	r2, [pc, #24]	@ (8001780 <HAL_InitTick+0x68>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	2400000c 	.word	0x2400000c
 800177c:	24000000 	.word	0x24000000
 8001780:	24000008 	.word	0x24000008

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	2400000c 	.word	0x2400000c
 80017a8:	240002f4 	.word	0x240002f4

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	@ (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	240002f4 	.word	0x240002f4

080017c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017c8:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <HAL_GetREVID+0x14>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0c1b      	lsrs	r3, r3, #16
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	5c001000 	.word	0x5c001000

080017dc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80017e4:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80017ec:	4904      	ldr	r1, [pc, #16]	@ (8001800 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	58003c00 	.word	0x58003c00

08001804 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 0202 	bic.w	r2, r3, #2
 8001814:	4904      	ldr	r1, [pc, #16]	@ (8001828 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4313      	orrs	r3, r2
 800181a:	600b      	str	r3, [r1, #0]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	58003c00 	.word	0x58003c00

0800182c <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001832:	4b0f      	ldr	r3, [pc, #60]	@ (8001870 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a0e      	ldr	r2, [pc, #56]	@ (8001870 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800183e:	f7ff ffb5 	bl	80017ac <HAL_GetTick>
 8001842:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001844:	e008      	b.n	8001858 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001846:	f7ff ffb1 	bl	80017ac <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b0a      	cmp	r3, #10
 8001852:	d901      	bls.n	8001858 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e006      	b.n	8001866 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001858:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	58003c00 	.word	0x58003c00

08001874 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800187e:	4b07      	ldr	r3, [pc, #28]	@ (800189c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	43db      	mvns	r3, r3
 8001886:	401a      	ands	r2, r3
 8001888:	4904      	ldr	r1, [pc, #16]	@ (800189c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	58000400 	.word	0x58000400

080018a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	609a      	str	r2, [r3, #8]
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	609a      	str	r2, [r3, #8]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	3360      	adds	r3, #96	@ 0x60
 800191a:	461a      	mov	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	430b      	orrs	r3, r1
 8001936:	431a      	orrs	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800193c:	bf00      	nop
 800193e:	371c      	adds	r7, #28
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f003 031f 	and.w	r3, r3, #31
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	431a      	orrs	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	611a      	str	r2, [r3, #16]
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800197a:	b480      	push	{r7}
 800197c:	b087      	sub	sp, #28
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3360      	adds	r3, #96	@ 0x60
 800198a:	461a      	mov	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	431a      	orrs	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	601a      	str	r2, [r3, #0]
  }
}
 80019a4:	bf00      	nop
 80019a6:	371c      	adds	r7, #28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3330      	adds	r3, #48	@ 0x30
 80019c0:	461a      	mov	r2, r3
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	4413      	add	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	211f      	movs	r1, #31
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	401a      	ands	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	0e9b      	lsrs	r3, r3, #26
 80019e8:	f003 011f 	and.w	r1, r3, #31
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	431a      	orrs	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019fc:	bf00      	nop
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	3314      	adds	r3, #20
 8001a18:	461a      	mov	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	0e5b      	lsrs	r3, r3, #25
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	4413      	add	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	0d1b      	lsrs	r3, r3, #20
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	2107      	movs	r1, #7
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	0d1b      	lsrs	r3, r3, #20
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a52:	bf00      	nop
 8001a54:	371c      	adds	r7, #28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f003 0318 	and.w	r3, r3, #24
 8001a82:	4908      	ldr	r1, [pc, #32]	@ (8001aa4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a84:	40d9      	lsrs	r1, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	400b      	ands	r3, r1
 8001a8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	000fffff 	.word	0x000fffff

08001aa8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	4b04      	ldr	r3, [pc, #16]	@ (8001ac8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6093      	str	r3, [r2, #8]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	5fffffc0 	.word	0x5fffffc0

08001acc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001adc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ae0:	d101      	bne.n	8001ae6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <LL_ADC_EnableInternalRegulator+0x24>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	6fffffc0 	.word	0x6fffffc0

08001b1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b30:	d101      	bne.n	8001b36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <LL_ADC_IsEnabled+0x18>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <LL_ADC_IsEnabled+0x1a>
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d101      	bne.n	8001b82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d101      	bne.n	8001ba8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b089      	sub	sp, #36	@ 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e18f      	b.n	8001ef2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d109      	bne.n	8001bf4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff fa97 	bl	8001114 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff67 	bl	8001acc <LL_ADC_IsDeepPowerDownEnabled>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d004      	beq.n	8001c0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff4d 	bl	8001aa8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff82 	bl	8001b1c <LL_ADC_IsInternalRegulatorEnabled>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d114      	bne.n	8001c48 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff66 	bl	8001af4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c28:	4b87      	ldr	r3, [pc, #540]	@ (8001e48 <HAL_ADC_Init+0x290>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	099b      	lsrs	r3, r3, #6
 8001c2e:	4a87      	ldr	r2, [pc, #540]	@ (8001e4c <HAL_ADC_Init+0x294>)
 8001c30:	fba2 2303 	umull	r2, r3, r2, r3
 8001c34:	099b      	lsrs	r3, r3, #6
 8001c36:	3301      	adds	r3, #1
 8001c38:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c3a:	e002      	b.n	8001c42 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f9      	bne.n	8001c3c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff65 	bl	8001b1c <LL_ADC_IsInternalRegulatorEnabled>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10d      	bne.n	8001c74 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c5c:	f043 0210 	orr.w	r2, r3, #16
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c68:	f043 0201 	orr.w	r2, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff76 	bl	8001b6a <LL_ADC_REG_IsConversionOngoing>
 8001c7e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f040 8129 	bne.w	8001ee0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f040 8125 	bne.w	8001ee0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c9a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c9e:	f043 0202 	orr.w	r2, r3, #2
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff4a 	bl	8001b44 <LL_ADC_IsEnabled>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d136      	bne.n	8001d24 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a65      	ldr	r2, [pc, #404]	@ (8001e50 <HAL_ADC_Init+0x298>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d004      	beq.n	8001cca <HAL_ADC_Init+0x112>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a63      	ldr	r2, [pc, #396]	@ (8001e54 <HAL_ADC_Init+0x29c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d10e      	bne.n	8001ce8 <HAL_ADC_Init+0x130>
 8001cca:	4861      	ldr	r0, [pc, #388]	@ (8001e50 <HAL_ADC_Init+0x298>)
 8001ccc:	f7ff ff3a 	bl	8001b44 <LL_ADC_IsEnabled>
 8001cd0:	4604      	mov	r4, r0
 8001cd2:	4860      	ldr	r0, [pc, #384]	@ (8001e54 <HAL_ADC_Init+0x29c>)
 8001cd4:	f7ff ff36 	bl	8001b44 <LL_ADC_IsEnabled>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	4323      	orrs	r3, r4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bf0c      	ite	eq
 8001ce0:	2301      	moveq	r3, #1
 8001ce2:	2300      	movne	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	e008      	b.n	8001cfa <HAL_ADC_Init+0x142>
 8001ce8:	485b      	ldr	r0, [pc, #364]	@ (8001e58 <HAL_ADC_Init+0x2a0>)
 8001cea:	f7ff ff2b 	bl	8001b44 <LL_ADC_IsEnabled>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	bf0c      	ite	eq
 8001cf4:	2301      	moveq	r3, #1
 8001cf6:	2300      	movne	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d012      	beq.n	8001d24 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a53      	ldr	r2, [pc, #332]	@ (8001e50 <HAL_ADC_Init+0x298>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d004      	beq.n	8001d12 <HAL_ADC_Init+0x15a>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a51      	ldr	r2, [pc, #324]	@ (8001e54 <HAL_ADC_Init+0x29c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_Init+0x15e>
 8001d12:	4a52      	ldr	r2, [pc, #328]	@ (8001e5c <HAL_ADC_Init+0x2a4>)
 8001d14:	e000      	b.n	8001d18 <HAL_ADC_Init+0x160>
 8001d16:	4a52      	ldr	r2, [pc, #328]	@ (8001e60 <HAL_ADC_Init+0x2a8>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4610      	mov	r0, r2
 8001d20:	f7ff fdbe 	bl	80018a0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001d24:	f7ff fd4e 	bl	80017c4 <HAL_GetREVID>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d914      	bls.n	8001d5c <HAL_ADC_Init+0x1a4>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b10      	cmp	r3, #16
 8001d38:	d110      	bne.n	8001d5c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	7d5b      	ldrb	r3, [r3, #21]
 8001d3e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d44:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d4a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7f1b      	ldrb	r3, [r3, #28]
 8001d50:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d52:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d54:	f043 030c 	orr.w	r3, r3, #12
 8001d58:	61bb      	str	r3, [r7, #24]
 8001d5a:	e00d      	b.n	8001d78 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	7d5b      	ldrb	r3, [r3, #21]
 8001d60:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d66:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d6c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	7f1b      	ldrb	r3, [r3, #28]
 8001d72:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	7f1b      	ldrb	r3, [r3, #28]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d106      	bne.n	8001d8e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	045b      	lsls	r3, r3, #17
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d009      	beq.n	8001daa <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e64 <HAL_ADC_Init+0x2ac>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	69b9      	ldr	r1, [r7, #24]
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fed1 	bl	8001b6a <LL_ADC_REG_IsConversionOngoing>
 8001dc8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fede 	bl	8001b90 <LL_ADC_INJ_IsConversionOngoing>
 8001dd4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d15f      	bne.n	8001e9c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d15c      	bne.n	8001e9c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	7d1b      	ldrb	r3, [r3, #20]
 8001de6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <HAL_ADC_Init+0x2b0>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	69b9      	ldr	r1, [r7, #24]
 8001e00:	430b      	orrs	r3, r1
 8001e02:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d130      	bne.n	8001e70 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e12:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	4b14      	ldr	r3, [pc, #80]	@ (8001e6c <HAL_ADC_Init+0x2b4>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e22:	3a01      	subs	r2, #1
 8001e24:	0411      	lsls	r1, r2, #16
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e2a:	4311      	orrs	r1, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e30:	4311      	orrs	r1, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e36:	430a      	orrs	r2, r1
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	611a      	str	r2, [r3, #16]
 8001e44:	e01c      	b.n	8001e80 <HAL_ADC_Init+0x2c8>
 8001e46:	bf00      	nop
 8001e48:	24000000 	.word	0x24000000
 8001e4c:	053e2d63 	.word	0x053e2d63
 8001e50:	40022000 	.word	0x40022000
 8001e54:	40022100 	.word	0x40022100
 8001e58:	58026000 	.word	0x58026000
 8001e5c:	40022300 	.word	0x40022300
 8001e60:	58026300 	.word	0x58026300
 8001e64:	fff0c003 	.word	0xfff0c003
 8001e68:	ffffbffc 	.word	0xffffbffc
 8001e6c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0201 	bic.w	r2, r2, #1
 8001e7e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fb8c 	bl	80025b4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d10c      	bne.n	8001ebe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	f023 010f 	bic.w	r1, r3, #15
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	1e5a      	subs	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ebc:	e007      	b.n	8001ece <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 020f 	bic.w	r2, r2, #15
 8001ecc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed2:	f023 0303 	bic.w	r3, r3, #3
 8001ed6:	f043 0201 	orr.w	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ede:	e007      	b.n	8001ef0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee4:	f043 0210 	orr.w	r2, r3, #16
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ef0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3724      	adds	r7, #36	@ 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd90      	pop	{r4, r7, pc}
 8001efa:	bf00      	nop

08001efc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b0a1      	sub	sp, #132	@ 0x84
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	4a65      	ldr	r2, [pc, #404]	@ (80020ac <HAL_ADC_ConfigChannel+0x1b0>)
 8001f16:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x2a>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e32e      	b.n	8002584 <HAL_ADC_ConfigChannel+0x688>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fe19 	bl	8001b6a <LL_ADC_REG_IsConversionOngoing>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f040 8313 	bne.w	8002566 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	db2c      	blt.n	8001fa2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d108      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x6a>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0e9b      	lsrs	r3, r3, #26
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	2201      	movs	r2, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	e016      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x98>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f76:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001f7e:	2320      	movs	r3, #32
 8001f80:	e003      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001f82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f84:	fab3 f383 	clz	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	2201      	movs	r2, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	69d1      	ldr	r1, [r2, #28]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	430b      	orrs	r3, r1
 8001fa0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6859      	ldr	r1, [r3, #4]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f7ff fcfe 	bl	80019b0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fdd6 	bl	8001b6a <LL_ADC_REG_IsConversionOngoing>
 8001fbe:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fde3 	bl	8001b90 <LL_ADC_INJ_IsConversionOngoing>
 8001fca:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f040 80b8 	bne.w	8002144 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 80b4 	bne.w	8002144 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	6819      	ldr	r1, [r3, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f7ff fd0d 	bl	8001a08 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fee:	4b30      	ldr	r3, [pc, #192]	@ (80020b0 <HAL_ADC_ConfigChannel+0x1b4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001ff6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ffa:	d10b      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x118>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	e01d      	b.n	8002050 <HAL_ADC_ConfigChannel+0x154>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10b      	bne.n	800203a <HAL_ADC_ConfigChannel+0x13e>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	e00a      	b.n	8002050 <HAL_ADC_ConfigChannel+0x154>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	695a      	ldr	r2, [r3, #20]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	2b04      	cmp	r3, #4
 8002058:	d02c      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	6919      	ldr	r1, [r3, #16]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002068:	f7ff fc4e 	bl	8001908 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	6919      	ldr	r1, [r3, #16]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	7e5b      	ldrb	r3, [r3, #25]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d102      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x186>
 800207c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002080:	e000      	b.n	8002084 <HAL_ADC_ConfigChannel+0x188>
 8002082:	2300      	movs	r3, #0
 8002084:	461a      	mov	r2, r3
 8002086:	f7ff fc78 	bl	800197a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	6919      	ldr	r1, [r3, #16]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	7e1b      	ldrb	r3, [r3, #24]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d102      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x1a4>
 800209a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800209e:	e000      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x1a6>
 80020a0:	2300      	movs	r3, #0
 80020a2:	461a      	mov	r2, r3
 80020a4:	f7ff fc50 	bl	8001948 <LL_ADC_SetDataRightShift>
 80020a8:	e04c      	b.n	8002144 <HAL_ADC_ConfigChannel+0x248>
 80020aa:	bf00      	nop
 80020ac:	47ff0000 	.word	0x47ff0000
 80020b0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	069b      	lsls	r3, r3, #26
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d107      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020d6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	069b      	lsls	r3, r3, #26
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d107      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020fa:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002102:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	069b      	lsls	r3, r3, #26
 800210c:	429a      	cmp	r2, r3
 800210e:	d107      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800211e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002126:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	069b      	lsls	r3, r3, #26
 8002130:	429a      	cmp	r2, r3
 8002132:	d107      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002142:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fcfb 	bl	8001b44 <LL_ADC_IsEnabled>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	f040 8211 	bne.w	8002578 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	6819      	ldr	r1, [r3, #0]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	461a      	mov	r2, r3
 8002164:	f7ff fc7c 	bl	8001a60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4aa1      	ldr	r2, [pc, #644]	@ (80023f4 <HAL_ADC_ConfigChannel+0x4f8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	f040 812e 	bne.w	80023d0 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10b      	bne.n	800219c <HAL_ADC_ConfigChannel+0x2a0>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	0e9b      	lsrs	r3, r3, #26
 800218a:	3301      	adds	r3, #1
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	2b09      	cmp	r3, #9
 8002192:	bf94      	ite	ls
 8002194:	2301      	movls	r3, #1
 8002196:	2300      	movhi	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	e019      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x2d4>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80021aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80021ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80021b4:	2320      	movs	r3, #32
 80021b6:	e003      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80021b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	3301      	adds	r3, #1
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	2b09      	cmp	r3, #9
 80021c8:	bf94      	ite	ls
 80021ca:	2301      	movls	r3, #1
 80021cc:	2300      	movhi	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d079      	beq.n	80022c8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d107      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x2f4>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	0e9b      	lsrs	r3, r3, #26
 80021e6:	3301      	adds	r3, #1
 80021e8:	069b      	lsls	r3, r3, #26
 80021ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021ee:	e015      	b.n	800221c <HAL_ADC_ConfigChannel+0x320>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80021fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002200:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002202:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002208:	2320      	movs	r3, #32
 800220a:	e003      	b.n	8002214 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800220c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	3301      	adds	r3, #1
 8002216:	069b      	lsls	r3, r3, #26
 8002218:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002224:	2b00      	cmp	r3, #0
 8002226:	d109      	bne.n	800223c <HAL_ADC_ConfigChannel+0x340>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0e9b      	lsrs	r3, r3, #26
 800222e:	3301      	adds	r3, #1
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	2101      	movs	r1, #1
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	e017      	b.n	800226c <HAL_ADC_ConfigChannel+0x370>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800224a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800224c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800224e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002254:	2320      	movs	r3, #32
 8002256:	e003      	b.n	8002260 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	3301      	adds	r3, #1
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	ea42 0103 	orr.w	r1, r2, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x396>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	0e9b      	lsrs	r3, r3, #26
 8002282:	3301      	adds	r3, #1
 8002284:	f003 021f 	and.w	r2, r3, #31
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	051b      	lsls	r3, r3, #20
 8002290:	e018      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x3c8>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80022a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80022a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80022aa:	2320      	movs	r3, #32
 80022ac:	e003      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80022ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b0:	fab3 f383 	clz	r3, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	3301      	adds	r3, #1
 80022b8:	f003 021f 	and.w	r2, r3, #31
 80022bc:	4613      	mov	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4413      	add	r3, r2
 80022c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022c4:	430b      	orrs	r3, r1
 80022c6:	e07e      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d107      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x3e8>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	0e9b      	lsrs	r3, r3, #26
 80022da:	3301      	adds	r3, #1
 80022dc:	069b      	lsls	r3, r3, #26
 80022de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022e2:	e015      	b.n	8002310 <HAL_ADC_ConfigChannel+0x414>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80022f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80022fc:	2320      	movs	r3, #32
 80022fe:	e003      	b.n	8002308 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	3301      	adds	r3, #1
 800230a:	069b      	lsls	r3, r3, #26
 800230c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002318:	2b00      	cmp	r3, #0
 800231a:	d109      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x434>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0e9b      	lsrs	r3, r3, #26
 8002322:	3301      	adds	r3, #1
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	2101      	movs	r1, #1
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	e017      	b.n	8002360 <HAL_ADC_ConfigChannel+0x464>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	61bb      	str	r3, [r7, #24]
  return result;
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002348:	2320      	movs	r3, #32
 800234a:	e003      	b.n	8002354 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	3301      	adds	r3, #1
 8002356:	f003 031f 	and.w	r3, r3, #31
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	ea42 0103 	orr.w	r1, r2, r3
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10d      	bne.n	800238c <HAL_ADC_ConfigChannel+0x490>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0e9b      	lsrs	r3, r3, #26
 8002376:	3301      	adds	r3, #1
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	3b1e      	subs	r3, #30
 8002384:	051b      	lsls	r3, r3, #20
 8002386:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800238a:	e01b      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x4c8>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	60fb      	str	r3, [r7, #12]
  return result;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80023a4:	2320      	movs	r3, #32
 80023a6:	e003      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	3301      	adds	r3, #1
 80023b2:	f003 021f 	and.w	r2, r3, #31
 80023b6:	4613      	mov	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4413      	add	r3, r2
 80023bc:	3b1e      	subs	r3, #30
 80023be:	051b      	lsls	r3, r3, #20
 80023c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c4:	430b      	orrs	r3, r1
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	6892      	ldr	r2, [r2, #8]
 80023ca:	4619      	mov	r1, r3
 80023cc:	f7ff fb1c 	bl	8001a08 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f280 80cf 	bge.w	8002578 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a06      	ldr	r2, [pc, #24]	@ (80023f8 <HAL_ADC_ConfigChannel+0x4fc>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d004      	beq.n	80023ee <HAL_ADC_ConfigChannel+0x4f2>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <HAL_ADC_ConfigChannel+0x500>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d10a      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x508>
 80023ee:	4b04      	ldr	r3, [pc, #16]	@ (8002400 <HAL_ADC_ConfigChannel+0x504>)
 80023f0:	e009      	b.n	8002406 <HAL_ADC_ConfigChannel+0x50a>
 80023f2:	bf00      	nop
 80023f4:	47ff0000 	.word	0x47ff0000
 80023f8:	40022000 	.word	0x40022000
 80023fc:	40022100 	.word	0x40022100
 8002400:	40022300 	.word	0x40022300
 8002404:	4b61      	ldr	r3, [pc, #388]	@ (800258c <HAL_ADC_ConfigChannel+0x690>)
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fa70 	bl	80018ec <LL_ADC_GetCommonPathInternalCh>
 800240c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a5f      	ldr	r2, [pc, #380]	@ (8002590 <HAL_ADC_ConfigChannel+0x694>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d004      	beq.n	8002422 <HAL_ADC_ConfigChannel+0x526>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a5d      	ldr	r2, [pc, #372]	@ (8002594 <HAL_ADC_ConfigChannel+0x698>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d10e      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x544>
 8002422:	485b      	ldr	r0, [pc, #364]	@ (8002590 <HAL_ADC_ConfigChannel+0x694>)
 8002424:	f7ff fb8e 	bl	8001b44 <LL_ADC_IsEnabled>
 8002428:	4604      	mov	r4, r0
 800242a:	485a      	ldr	r0, [pc, #360]	@ (8002594 <HAL_ADC_ConfigChannel+0x698>)
 800242c:	f7ff fb8a 	bl	8001b44 <LL_ADC_IsEnabled>
 8002430:	4603      	mov	r3, r0
 8002432:	4323      	orrs	r3, r4
 8002434:	2b00      	cmp	r3, #0
 8002436:	bf0c      	ite	eq
 8002438:	2301      	moveq	r3, #1
 800243a:	2300      	movne	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	e008      	b.n	8002452 <HAL_ADC_ConfigChannel+0x556>
 8002440:	4855      	ldr	r0, [pc, #340]	@ (8002598 <HAL_ADC_ConfigChannel+0x69c>)
 8002442:	f7ff fb7f 	bl	8001b44 <LL_ADC_IsEnabled>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d07d      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a50      	ldr	r2, [pc, #320]	@ (800259c <HAL_ADC_ConfigChannel+0x6a0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d130      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x5c6>
 8002460:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002462:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d12b      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a4a      	ldr	r2, [pc, #296]	@ (8002598 <HAL_ADC_ConfigChannel+0x69c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	f040 8081 	bne.w	8002578 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a45      	ldr	r2, [pc, #276]	@ (8002590 <HAL_ADC_ConfigChannel+0x694>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d004      	beq.n	800248a <HAL_ADC_ConfigChannel+0x58e>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a43      	ldr	r2, [pc, #268]	@ (8002594 <HAL_ADC_ConfigChannel+0x698>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d101      	bne.n	800248e <HAL_ADC_ConfigChannel+0x592>
 800248a:	4a45      	ldr	r2, [pc, #276]	@ (80025a0 <HAL_ADC_ConfigChannel+0x6a4>)
 800248c:	e000      	b.n	8002490 <HAL_ADC_ConfigChannel+0x594>
 800248e:	4a3f      	ldr	r2, [pc, #252]	@ (800258c <HAL_ADC_ConfigChannel+0x690>)
 8002490:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002492:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002496:	4619      	mov	r1, r3
 8002498:	4610      	mov	r0, r2
 800249a:	f7ff fa14 	bl	80018c6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800249e:	4b41      	ldr	r3, [pc, #260]	@ (80025a4 <HAL_ADC_ConfigChannel+0x6a8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	099b      	lsrs	r3, r3, #6
 80024a4:	4a40      	ldr	r2, [pc, #256]	@ (80025a8 <HAL_ADC_ConfigChannel+0x6ac>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	099b      	lsrs	r3, r3, #6
 80024ac:	3301      	adds	r3, #1
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024b2:	e002      	b.n	80024ba <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f9      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024c0:	e05a      	b.n	8002578 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a39      	ldr	r2, [pc, #228]	@ (80025ac <HAL_ADC_ConfigChannel+0x6b0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d11e      	bne.n	800250a <HAL_ADC_ConfigChannel+0x60e>
 80024cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d119      	bne.n	800250a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a2f      	ldr	r2, [pc, #188]	@ (8002598 <HAL_ADC_ConfigChannel+0x69c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d14b      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002590 <HAL_ADC_ConfigChannel+0x694>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d004      	beq.n	80024f4 <HAL_ADC_ConfigChannel+0x5f8>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a29      	ldr	r2, [pc, #164]	@ (8002594 <HAL_ADC_ConfigChannel+0x698>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x5fc>
 80024f4:	4a2a      	ldr	r2, [pc, #168]	@ (80025a0 <HAL_ADC_ConfigChannel+0x6a4>)
 80024f6:	e000      	b.n	80024fa <HAL_ADC_ConfigChannel+0x5fe>
 80024f8:	4a24      	ldr	r2, [pc, #144]	@ (800258c <HAL_ADC_ConfigChannel+0x690>)
 80024fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002500:	4619      	mov	r1, r3
 8002502:	4610      	mov	r0, r2
 8002504:	f7ff f9df 	bl	80018c6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002508:	e036      	b.n	8002578 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a28      	ldr	r2, [pc, #160]	@ (80025b0 <HAL_ADC_ConfigChannel+0x6b4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d131      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x67c>
 8002514:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d12c      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1d      	ldr	r2, [pc, #116]	@ (8002598 <HAL_ADC_ConfigChannel+0x69c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d127      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a18      	ldr	r2, [pc, #96]	@ (8002590 <HAL_ADC_ConfigChannel+0x694>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d004      	beq.n	800253c <HAL_ADC_ConfigChannel+0x640>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a17      	ldr	r2, [pc, #92]	@ (8002594 <HAL_ADC_ConfigChannel+0x698>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d101      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x644>
 800253c:	4a18      	ldr	r2, [pc, #96]	@ (80025a0 <HAL_ADC_ConfigChannel+0x6a4>)
 800253e:	e000      	b.n	8002542 <HAL_ADC_ConfigChannel+0x646>
 8002540:	4a12      	ldr	r2, [pc, #72]	@ (800258c <HAL_ADC_ConfigChannel+0x690>)
 8002542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002544:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002548:	4619      	mov	r1, r3
 800254a:	4610      	mov	r0, r2
 800254c:	f7ff f9bb 	bl	80018c6 <LL_ADC_SetCommonPathInternalCh>
 8002550:	e012      	b.n	8002578 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002556:	f043 0220 	orr.w	r2, r3, #32
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002564:	e008      	b.n	8002578 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256a:	f043 0220 	orr.w	r2, r3, #32
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002580:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002584:	4618      	mov	r0, r3
 8002586:	3784      	adds	r7, #132	@ 0x84
 8002588:	46bd      	mov	sp, r7
 800258a:	bd90      	pop	{r4, r7, pc}
 800258c:	58026300 	.word	0x58026300
 8002590:	40022000 	.word	0x40022000
 8002594:	40022100 	.word	0x40022100
 8002598:	58026000 	.word	0x58026000
 800259c:	cb840000 	.word	0xcb840000
 80025a0:	40022300 	.word	0x40022300
 80025a4:	24000000 	.word	0x24000000
 80025a8:	053e2d63 	.word	0x053e2d63
 80025ac:	c7520000 	.word	0xc7520000
 80025b0:	cfb80000 	.word	0xcfb80000

080025b4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a7a      	ldr	r2, [pc, #488]	@ (80027ac <ADC_ConfigureBoostMode+0x1f8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d004      	beq.n	80025d0 <ADC_ConfigureBoostMode+0x1c>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a79      	ldr	r2, [pc, #484]	@ (80027b0 <ADC_ConfigureBoostMode+0x1fc>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d109      	bne.n	80025e4 <ADC_ConfigureBoostMode+0x30>
 80025d0:	4b78      	ldr	r3, [pc, #480]	@ (80027b4 <ADC_ConfigureBoostMode+0x200>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	bf14      	ite	ne
 80025dc:	2301      	movne	r3, #1
 80025de:	2300      	moveq	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	e008      	b.n	80025f6 <ADC_ConfigureBoostMode+0x42>
 80025e4:	4b74      	ldr	r3, [pc, #464]	@ (80027b8 <ADC_ConfigureBoostMode+0x204>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bf14      	ite	ne
 80025f0:	2301      	movne	r3, #1
 80025f2:	2300      	moveq	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d01c      	beq.n	8002634 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80025fa:	f003 fad5 	bl	8005ba8 <HAL_RCC_GetHCLKFreq>
 80025fe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002608:	d010      	beq.n	800262c <ADC_ConfigureBoostMode+0x78>
 800260a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800260e:	d873      	bhi.n	80026f8 <ADC_ConfigureBoostMode+0x144>
 8002610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002614:	d002      	beq.n	800261c <ADC_ConfigureBoostMode+0x68>
 8002616:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800261a:	d16d      	bne.n	80026f8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	0c1b      	lsrs	r3, r3, #16
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	fbb2 f3f3 	udiv	r3, r2, r3
 8002628:	60fb      	str	r3, [r7, #12]
        break;
 800262a:	e068      	b.n	80026fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	089b      	lsrs	r3, r3, #2
 8002630:	60fb      	str	r3, [r7, #12]
        break;
 8002632:	e064      	b.n	80026fe <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002634:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002638:	f04f 0100 	mov.w	r1, #0
 800263c:	f004 fd1a 	bl	8007074 <HAL_RCCEx_GetPeriphCLKFreq>
 8002640:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800264a:	d051      	beq.n	80026f0 <ADC_ConfigureBoostMode+0x13c>
 800264c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002650:	d854      	bhi.n	80026fc <ADC_ConfigureBoostMode+0x148>
 8002652:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002656:	d047      	beq.n	80026e8 <ADC_ConfigureBoostMode+0x134>
 8002658:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800265c:	d84e      	bhi.n	80026fc <ADC_ConfigureBoostMode+0x148>
 800265e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002662:	d03d      	beq.n	80026e0 <ADC_ConfigureBoostMode+0x12c>
 8002664:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002668:	d848      	bhi.n	80026fc <ADC_ConfigureBoostMode+0x148>
 800266a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800266e:	d033      	beq.n	80026d8 <ADC_ConfigureBoostMode+0x124>
 8002670:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002674:	d842      	bhi.n	80026fc <ADC_ConfigureBoostMode+0x148>
 8002676:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800267a:	d029      	beq.n	80026d0 <ADC_ConfigureBoostMode+0x11c>
 800267c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002680:	d83c      	bhi.n	80026fc <ADC_ConfigureBoostMode+0x148>
 8002682:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002686:	d01a      	beq.n	80026be <ADC_ConfigureBoostMode+0x10a>
 8002688:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800268c:	d836      	bhi.n	80026fc <ADC_ConfigureBoostMode+0x148>
 800268e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002692:	d014      	beq.n	80026be <ADC_ConfigureBoostMode+0x10a>
 8002694:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002698:	d830      	bhi.n	80026fc <ADC_ConfigureBoostMode+0x148>
 800269a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800269e:	d00e      	beq.n	80026be <ADC_ConfigureBoostMode+0x10a>
 80026a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026a4:	d82a      	bhi.n	80026fc <ADC_ConfigureBoostMode+0x148>
 80026a6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80026aa:	d008      	beq.n	80026be <ADC_ConfigureBoostMode+0x10a>
 80026ac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80026b0:	d824      	bhi.n	80026fc <ADC_ConfigureBoostMode+0x148>
 80026b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80026b6:	d002      	beq.n	80026be <ADC_ConfigureBoostMode+0x10a>
 80026b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80026bc:	d11e      	bne.n	80026fc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	0c9b      	lsrs	r3, r3, #18
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026cc:	60fb      	str	r3, [r7, #12]
        break;
 80026ce:	e016      	b.n	80026fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	091b      	lsrs	r3, r3, #4
 80026d4:	60fb      	str	r3, [r7, #12]
        break;
 80026d6:	e012      	b.n	80026fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	60fb      	str	r3, [r7, #12]
        break;
 80026de:	e00e      	b.n	80026fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	099b      	lsrs	r3, r3, #6
 80026e4:	60fb      	str	r3, [r7, #12]
        break;
 80026e6:	e00a      	b.n	80026fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	09db      	lsrs	r3, r3, #7
 80026ec:	60fb      	str	r3, [r7, #12]
        break;
 80026ee:	e006      	b.n	80026fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	0a1b      	lsrs	r3, r3, #8
 80026f4:	60fb      	str	r3, [r7, #12]
        break;
 80026f6:	e002      	b.n	80026fe <ADC_ConfigureBoostMode+0x14a>
        break;
 80026f8:	bf00      	nop
 80026fa:	e000      	b.n	80026fe <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80026fc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80026fe:	f7ff f861 	bl	80017c4 <HAL_GetREVID>
 8002702:	4603      	mov	r3, r0
 8002704:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002708:	4293      	cmp	r3, r2
 800270a:	d815      	bhi.n	8002738 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4a2b      	ldr	r2, [pc, #172]	@ (80027bc <ADC_ConfigureBoostMode+0x208>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d908      	bls.n	8002726 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002722:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002724:	e03e      	b.n	80027a4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002734:	609a      	str	r2, [r3, #8]
}
 8002736:	e035      	b.n	80027a4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	085b      	lsrs	r3, r3, #1
 800273c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4a1f      	ldr	r2, [pc, #124]	@ (80027c0 <ADC_ConfigureBoostMode+0x20c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d808      	bhi.n	8002758 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002754:	609a      	str	r2, [r3, #8]
}
 8002756:	e025      	b.n	80027a4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4a1a      	ldr	r2, [pc, #104]	@ (80027c4 <ADC_ConfigureBoostMode+0x210>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d80a      	bhi.n	8002776 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002772:	609a      	str	r2, [r3, #8]
}
 8002774:	e016      	b.n	80027a4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4a13      	ldr	r2, [pc, #76]	@ (80027c8 <ADC_ConfigureBoostMode+0x214>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d80a      	bhi.n	8002794 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002790:	609a      	str	r2, [r3, #8]
}
 8002792:	e007      	b.n	80027a4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80027a2:	609a      	str	r2, [r3, #8]
}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40022000 	.word	0x40022000
 80027b0:	40022100 	.word	0x40022100
 80027b4:	40022300 	.word	0x40022300
 80027b8:	58026300 	.word	0x58026300
 80027bc:	01312d00 	.word	0x01312d00
 80027c0:	005f5e10 	.word	0x005f5e10
 80027c4:	00bebc20 	.word	0x00bebc20
 80027c8:	017d7840 	.word	0x017d7840

080027cc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	77fb      	strb	r3, [r7, #31]
 80027e6:	e10e      	b.n	8002a06 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80027f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027f6:	d102      	bne.n	80027fe <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	77fb      	strb	r3, [r7, #31]
 80027fc:	e103      	b.n	8002a06 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7fe fd17 	bl	800124c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8002832:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8002838:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 800283e:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8002844:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800284a:	4313      	orrs	r3, r2
 800284c:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b6e      	ldr	r3, [pc, #440]	@ (8002a10 <HAL_COMP_Init+0x244>)
 8002856:	4013      	ands	r3, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	6979      	ldr	r1, [r7, #20]
 800285e:	430b      	orrs	r3, r1
 8002860:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b10      	cmp	r3, #16
 8002868:	d108      	bne.n	800287c <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 0210 	orr.w	r2, r2, #16
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	e007      	b.n	800288c <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0210 	bic.w	r2, r2, #16
 800288a:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b00      	cmp	r3, #0
 8002898:	d016      	beq.n	80028c8 <HAL_COMP_Init+0xfc>
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d013      	beq.n	80028c8 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028a0:	4b5c      	ldr	r3, [pc, #368]	@ (8002a14 <HAL_COMP_Init+0x248>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	099b      	lsrs	r3, r3, #6
 80028a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002a18 <HAL_COMP_Init+0x24c>)
 80028a8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ac:	099b      	lsrs	r3, r3, #6
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 80028ba:	e002      	b.n	80028c2 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3b01      	subs	r3, #1
 80028c0:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f9      	bne.n	80028bc <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a53      	ldr	r2, [pc, #332]	@ (8002a1c <HAL_COMP_Init+0x250>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d102      	bne.n	80028d8 <HAL_COMP_Init+0x10c>
 80028d2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80028d6:	e001      	b.n	80028dc <HAL_COMP_Init+0x110>
 80028d8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80028dc:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d06d      	beq.n	80029c6 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 80028f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]
 8002906:	e008      	b.n	800291a <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8002908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	43db      	mvns	r3, r3
 8002912:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002916:	4013      	ands	r3, r2
 8002918:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d008      	beq.n	8002938 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8002926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	604b      	str	r3, [r1, #4]
 8002936:	e008      	b.n	800294a <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	43db      	mvns	r3, r3
 8002942:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002946:	4013      	ands	r3, r2
 8002948:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 800294a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8002960:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002964:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002968:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8002974:	e00a      	b.n	800298c <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8002976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	43db      	mvns	r3, r3
 8002982:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002986:	4013      	ands	r3, r2
 8002988:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00a      	beq.n	80029ae <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8002998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800299c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80029a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 80029ac:	e021      	b.n	80029f2 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 80029ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029be:	4013      	ands	r3, r2
 80029c0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 80029c4:	e015      	b.n	80029f2 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 80029c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029d6:	4013      	ands	r3, r2
 80029d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 80029dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029ec:	4013      	ands	r3, r2
 80029ee:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d103      	bne.n	8002a06 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 8002a06:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3720      	adds	r7, #32
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	f0e8cce1 	.word	0xf0e8cce1
 8002a14:	24000000 	.word	0x24000000
 8002a18:	053e2d63 	.word	0x053e2d63
 8002a1c:	5800380c 	.word	0x5800380c

08002a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a30:	4b0b      	ldr	r3, [pc, #44]	@ (8002a60 <__NVIC_SetPriorityGrouping+0x40>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a48:	4b06      	ldr	r3, [pc, #24]	@ (8002a64 <__NVIC_SetPriorityGrouping+0x44>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a4e:	4a04      	ldr	r2, [pc, #16]	@ (8002a60 <__NVIC_SetPriorityGrouping+0x40>)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	60d3      	str	r3, [r2, #12]
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000ed00 	.word	0xe000ed00
 8002a64:	05fa0000 	.word	0x05fa0000

08002a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a6c:	4b04      	ldr	r3, [pc, #16]	@ (8002a80 <__NVIC_GetPriorityGrouping+0x18>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	0a1b      	lsrs	r3, r3, #8
 8002a72:	f003 0307 	and.w	r3, r3, #7
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	db0b      	blt.n	8002aae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	f003 021f 	and.w	r2, r3, #31
 8002a9c:	4907      	ldr	r1, [pc, #28]	@ (8002abc <__NVIC_EnableIRQ+0x38>)
 8002a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	e000e100 	.word	0xe000e100

08002ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	6039      	str	r1, [r7, #0]
 8002aca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002acc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	db0a      	blt.n	8002aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	490c      	ldr	r1, [pc, #48]	@ (8002b0c <__NVIC_SetPriority+0x4c>)
 8002ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ade:	0112      	lsls	r2, r2, #4
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae8:	e00a      	b.n	8002b00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	4908      	ldr	r1, [pc, #32]	@ (8002b10 <__NVIC_SetPriority+0x50>)
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	3b04      	subs	r3, #4
 8002af8:	0112      	lsls	r2, r2, #4
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	440b      	add	r3, r1
 8002afe:	761a      	strb	r2, [r3, #24]
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000e100 	.word	0xe000e100
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	@ 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f1c3 0307 	rsb	r3, r3, #7
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	bf28      	it	cs
 8002b32:	2304      	movcs	r3, #4
 8002b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	2b06      	cmp	r3, #6
 8002b3c:	d902      	bls.n	8002b44 <NVIC_EncodePriority+0x30>
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3b03      	subs	r3, #3
 8002b42:	e000      	b.n	8002b46 <NVIC_EncodePriority+0x32>
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b48:	f04f 32ff 	mov.w	r2, #4294967295
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43da      	mvns	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	401a      	ands	r2, r3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	fa01 f303 	lsl.w	r3, r1, r3
 8002b66:	43d9      	mvns	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b6c:	4313      	orrs	r3, r2
         );
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3724      	adds	r7, #36	@ 0x24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b8c:	d301      	bcc.n	8002b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e00f      	b.n	8002bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b92:	4a0a      	ldr	r2, [pc, #40]	@ (8002bbc <SysTick_Config+0x40>)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b9a:	210f      	movs	r1, #15
 8002b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba0:	f7ff ff8e 	bl	8002ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba4:	4b05      	ldr	r3, [pc, #20]	@ (8002bbc <SysTick_Config+0x40>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002baa:	4b04      	ldr	r3, [pc, #16]	@ (8002bbc <SysTick_Config+0x40>)
 8002bac:	2207      	movs	r2, #7
 8002bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	e000e010 	.word	0xe000e010

08002bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff ff29 	bl	8002a20 <__NVIC_SetPriorityGrouping>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b086      	sub	sp, #24
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002be4:	f7ff ff40 	bl	8002a68 <__NVIC_GetPriorityGrouping>
 8002be8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	6978      	ldr	r0, [r7, #20]
 8002bf0:	f7ff ff90 	bl	8002b14 <NVIC_EncodePriority>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff5f 	bl	8002ac0 <__NVIC_SetPriority>
}
 8002c02:	bf00      	nop
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	4603      	mov	r3, r0
 8002c12:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff33 	bl	8002a84 <__NVIC_EnableIRQ>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff ffa4 	bl	8002b7c <SysTick_Config>
 8002c34:	4603      	mov	r3, r0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e014      	b.n	8002c7a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	791b      	ldrb	r3, [r3, #4]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d105      	bne.n	8002c66 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7fe fb39 	bl	80012d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	@ 0x28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <HAL_DAC_ConfigChannel+0x1e>
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e12a      	b.n	8002efc <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	795b      	ldrb	r3, [r3, #5]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_DAC_ConfigChannel+0x2e>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e124      	b.n	8002efc <HAL_DAC_ConfigChannel+0x278>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d17a      	bne.n	8002dbc <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002cc6:	f7fe fd71 	bl	80017ac <HAL_GetTick>
 8002cca:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d13d      	bne.n	8002d4e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002cd2:	e018      	b.n	8002d06 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002cd4:	f7fe fd6a 	bl	80017ac <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d911      	bls.n	8002d06 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ce8:	4b86      	ldr	r3, [pc, #536]	@ (8002f04 <HAL_DAC_ConfigChannel+0x280>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f043 0208 	orr.w	r2, r3, #8
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2203      	movs	r2, #3
 8002d00:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e0fa      	b.n	8002efc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d0c:	4b7d      	ldr	r3, [pc, #500]	@ (8002f04 <HAL_DAC_ConfigChannel+0x280>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1df      	bne.n	8002cd4 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	6992      	ldr	r2, [r2, #24]
 8002d1c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d1e:	e020      	b.n	8002d62 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d20:	f7fe fd44 	bl	80017ac <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d90f      	bls.n	8002d4e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	da0a      	bge.n	8002d4e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f043 0208 	orr.w	r2, r3, #8
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2203      	movs	r2, #3
 8002d48:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e0d6      	b.n	8002efc <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	dbe3      	blt.n	8002d20 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	6992      	ldr	r2, [r2, #24]
 8002d60:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	ea02 0103 	and.w	r1, r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	69da      	ldr	r2, [r3, #28]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	409a      	lsls	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f003 0310 	and.w	r3, r3, #16
 8002d9c:	21ff      	movs	r1, #255	@ 0xff
 8002d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	ea02 0103 	and.w	r1, r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	6a1a      	ldr	r2, [r3, #32]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	409a      	lsls	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d11d      	bne.n	8002e00 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dca:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	221f      	movs	r2, #31
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e06:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2207      	movs	r2, #7
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d102      	bne.n	8002e2a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e28:	e00f      	b.n	8002e4a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d102      	bne.n	8002e38 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002e32:	2301      	movs	r3, #1
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e36:	e008      	b.n	8002e4a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d102      	bne.n	8002e46 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002e40:	2301      	movs	r3, #1
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e44:	e001      	b.n	8002e4a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6819      	ldr	r1, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43da      	mvns	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	400a      	ands	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6819      	ldr	r1, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	22c0      	movs	r2, #192	@ 0xc0
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43da      	mvns	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	400a      	ands	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002ef8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3728      	adds	r7, #40	@ 0x28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20008000 	.word	0x20008000

08002f08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002f10:	f7fe fc4c 	bl	80017ac <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e316      	b.n	800354e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a66      	ldr	r2, [pc, #408]	@ (80030c0 <HAL_DMA_Init+0x1b8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d04a      	beq.n	8002fc0 <HAL_DMA_Init+0xb8>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a65      	ldr	r2, [pc, #404]	@ (80030c4 <HAL_DMA_Init+0x1bc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d045      	beq.n	8002fc0 <HAL_DMA_Init+0xb8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a63      	ldr	r2, [pc, #396]	@ (80030c8 <HAL_DMA_Init+0x1c0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d040      	beq.n	8002fc0 <HAL_DMA_Init+0xb8>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a62      	ldr	r2, [pc, #392]	@ (80030cc <HAL_DMA_Init+0x1c4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d03b      	beq.n	8002fc0 <HAL_DMA_Init+0xb8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a60      	ldr	r2, [pc, #384]	@ (80030d0 <HAL_DMA_Init+0x1c8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d036      	beq.n	8002fc0 <HAL_DMA_Init+0xb8>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a5f      	ldr	r2, [pc, #380]	@ (80030d4 <HAL_DMA_Init+0x1cc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d031      	beq.n	8002fc0 <HAL_DMA_Init+0xb8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a5d      	ldr	r2, [pc, #372]	@ (80030d8 <HAL_DMA_Init+0x1d0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d02c      	beq.n	8002fc0 <HAL_DMA_Init+0xb8>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a5c      	ldr	r2, [pc, #368]	@ (80030dc <HAL_DMA_Init+0x1d4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d027      	beq.n	8002fc0 <HAL_DMA_Init+0xb8>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a5a      	ldr	r2, [pc, #360]	@ (80030e0 <HAL_DMA_Init+0x1d8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d022      	beq.n	8002fc0 <HAL_DMA_Init+0xb8>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a59      	ldr	r2, [pc, #356]	@ (80030e4 <HAL_DMA_Init+0x1dc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d01d      	beq.n	8002fc0 <HAL_DMA_Init+0xb8>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a57      	ldr	r2, [pc, #348]	@ (80030e8 <HAL_DMA_Init+0x1e0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d018      	beq.n	8002fc0 <HAL_DMA_Init+0xb8>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a56      	ldr	r2, [pc, #344]	@ (80030ec <HAL_DMA_Init+0x1e4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d013      	beq.n	8002fc0 <HAL_DMA_Init+0xb8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a54      	ldr	r2, [pc, #336]	@ (80030f0 <HAL_DMA_Init+0x1e8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00e      	beq.n	8002fc0 <HAL_DMA_Init+0xb8>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a53      	ldr	r2, [pc, #332]	@ (80030f4 <HAL_DMA_Init+0x1ec>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d009      	beq.n	8002fc0 <HAL_DMA_Init+0xb8>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a51      	ldr	r2, [pc, #324]	@ (80030f8 <HAL_DMA_Init+0x1f0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d004      	beq.n	8002fc0 <HAL_DMA_Init+0xb8>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a50      	ldr	r2, [pc, #320]	@ (80030fc <HAL_DMA_Init+0x1f4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d101      	bne.n	8002fc4 <HAL_DMA_Init+0xbc>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <HAL_DMA_Init+0xbe>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 813b 	beq.w	8003242 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a37      	ldr	r2, [pc, #220]	@ (80030c0 <HAL_DMA_Init+0x1b8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d04a      	beq.n	800307c <HAL_DMA_Init+0x174>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a36      	ldr	r2, [pc, #216]	@ (80030c4 <HAL_DMA_Init+0x1bc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d045      	beq.n	800307c <HAL_DMA_Init+0x174>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a34      	ldr	r2, [pc, #208]	@ (80030c8 <HAL_DMA_Init+0x1c0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d040      	beq.n	800307c <HAL_DMA_Init+0x174>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a33      	ldr	r2, [pc, #204]	@ (80030cc <HAL_DMA_Init+0x1c4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d03b      	beq.n	800307c <HAL_DMA_Init+0x174>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a31      	ldr	r2, [pc, #196]	@ (80030d0 <HAL_DMA_Init+0x1c8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d036      	beq.n	800307c <HAL_DMA_Init+0x174>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a30      	ldr	r2, [pc, #192]	@ (80030d4 <HAL_DMA_Init+0x1cc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d031      	beq.n	800307c <HAL_DMA_Init+0x174>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a2e      	ldr	r2, [pc, #184]	@ (80030d8 <HAL_DMA_Init+0x1d0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d02c      	beq.n	800307c <HAL_DMA_Init+0x174>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a2d      	ldr	r2, [pc, #180]	@ (80030dc <HAL_DMA_Init+0x1d4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d027      	beq.n	800307c <HAL_DMA_Init+0x174>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a2b      	ldr	r2, [pc, #172]	@ (80030e0 <HAL_DMA_Init+0x1d8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d022      	beq.n	800307c <HAL_DMA_Init+0x174>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a2a      	ldr	r2, [pc, #168]	@ (80030e4 <HAL_DMA_Init+0x1dc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d01d      	beq.n	800307c <HAL_DMA_Init+0x174>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a28      	ldr	r2, [pc, #160]	@ (80030e8 <HAL_DMA_Init+0x1e0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d018      	beq.n	800307c <HAL_DMA_Init+0x174>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a27      	ldr	r2, [pc, #156]	@ (80030ec <HAL_DMA_Init+0x1e4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d013      	beq.n	800307c <HAL_DMA_Init+0x174>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a25      	ldr	r2, [pc, #148]	@ (80030f0 <HAL_DMA_Init+0x1e8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00e      	beq.n	800307c <HAL_DMA_Init+0x174>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a24      	ldr	r2, [pc, #144]	@ (80030f4 <HAL_DMA_Init+0x1ec>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d009      	beq.n	800307c <HAL_DMA_Init+0x174>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a22      	ldr	r2, [pc, #136]	@ (80030f8 <HAL_DMA_Init+0x1f0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d004      	beq.n	800307c <HAL_DMA_Init+0x174>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a21      	ldr	r2, [pc, #132]	@ (80030fc <HAL_DMA_Init+0x1f4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d108      	bne.n	800308e <HAL_DMA_Init+0x186>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0201 	bic.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	e007      	b.n	800309e <HAL_DMA_Init+0x196>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0201 	bic.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800309e:	e02f      	b.n	8003100 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030a0:	f7fe fb84 	bl	80017ac <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b05      	cmp	r3, #5
 80030ac:	d928      	bls.n	8003100 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2220      	movs	r2, #32
 80030b2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2203      	movs	r2, #3
 80030b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e246      	b.n	800354e <HAL_DMA_Init+0x646>
 80030c0:	40020010 	.word	0x40020010
 80030c4:	40020028 	.word	0x40020028
 80030c8:	40020040 	.word	0x40020040
 80030cc:	40020058 	.word	0x40020058
 80030d0:	40020070 	.word	0x40020070
 80030d4:	40020088 	.word	0x40020088
 80030d8:	400200a0 	.word	0x400200a0
 80030dc:	400200b8 	.word	0x400200b8
 80030e0:	40020410 	.word	0x40020410
 80030e4:	40020428 	.word	0x40020428
 80030e8:	40020440 	.word	0x40020440
 80030ec:	40020458 	.word	0x40020458
 80030f0:	40020470 	.word	0x40020470
 80030f4:	40020488 	.word	0x40020488
 80030f8:	400204a0 	.word	0x400204a0
 80030fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1c8      	bne.n	80030a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4b83      	ldr	r3, [pc, #524]	@ (8003328 <HAL_DMA_Init+0x420>)
 800311a:	4013      	ands	r3, r2
 800311c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003126:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003132:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800313e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003150:	2b04      	cmp	r3, #4
 8003152:	d107      	bne.n	8003164 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315c:	4313      	orrs	r3, r2
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003164:	4b71      	ldr	r3, [pc, #452]	@ (800332c <HAL_DMA_Init+0x424>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4b71      	ldr	r3, [pc, #452]	@ (8003330 <HAL_DMA_Init+0x428>)
 800316a:	4013      	ands	r3, r2
 800316c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003170:	d328      	bcc.n	80031c4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b28      	cmp	r3, #40	@ 0x28
 8003178:	d903      	bls.n	8003182 <HAL_DMA_Init+0x27a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003180:	d917      	bls.n	80031b2 <HAL_DMA_Init+0x2aa>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b3e      	cmp	r3, #62	@ 0x3e
 8003188:	d903      	bls.n	8003192 <HAL_DMA_Init+0x28a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b42      	cmp	r3, #66	@ 0x42
 8003190:	d90f      	bls.n	80031b2 <HAL_DMA_Init+0x2aa>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b46      	cmp	r3, #70	@ 0x46
 8003198:	d903      	bls.n	80031a2 <HAL_DMA_Init+0x29a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b48      	cmp	r3, #72	@ 0x48
 80031a0:	d907      	bls.n	80031b2 <HAL_DMA_Init+0x2aa>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b4e      	cmp	r3, #78	@ 0x4e
 80031a8:	d905      	bls.n	80031b6 <HAL_DMA_Init+0x2ae>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b52      	cmp	r3, #82	@ 0x52
 80031b0:	d801      	bhi.n	80031b6 <HAL_DMA_Init+0x2ae>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <HAL_DMA_Init+0x2b0>
 80031b6:	2300      	movs	r3, #0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031c2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f023 0307 	bic.w	r3, r3, #7
 80031da:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d117      	bne.n	800321e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00e      	beq.n	800321e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f001 f9b9 	bl	8004578 <DMA_CheckFifoParam>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2240      	movs	r2, #64	@ 0x40
 8003210:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e197      	b.n	800354e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f001 f8f4 	bl	8004414 <DMA_CalcBaseAndBitshift>
 800322c:	4603      	mov	r3, r0
 800322e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	223f      	movs	r2, #63	@ 0x3f
 800323a:	409a      	lsls	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	e0cd      	b.n	80033de <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a3b      	ldr	r2, [pc, #236]	@ (8003334 <HAL_DMA_Init+0x42c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d022      	beq.n	8003292 <HAL_DMA_Init+0x38a>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a39      	ldr	r2, [pc, #228]	@ (8003338 <HAL_DMA_Init+0x430>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d01d      	beq.n	8003292 <HAL_DMA_Init+0x38a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a38      	ldr	r2, [pc, #224]	@ (800333c <HAL_DMA_Init+0x434>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d018      	beq.n	8003292 <HAL_DMA_Init+0x38a>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a36      	ldr	r2, [pc, #216]	@ (8003340 <HAL_DMA_Init+0x438>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d013      	beq.n	8003292 <HAL_DMA_Init+0x38a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a35      	ldr	r2, [pc, #212]	@ (8003344 <HAL_DMA_Init+0x43c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00e      	beq.n	8003292 <HAL_DMA_Init+0x38a>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a33      	ldr	r2, [pc, #204]	@ (8003348 <HAL_DMA_Init+0x440>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d009      	beq.n	8003292 <HAL_DMA_Init+0x38a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a32      	ldr	r2, [pc, #200]	@ (800334c <HAL_DMA_Init+0x444>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d004      	beq.n	8003292 <HAL_DMA_Init+0x38a>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a30      	ldr	r2, [pc, #192]	@ (8003350 <HAL_DMA_Init+0x448>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d101      	bne.n	8003296 <HAL_DMA_Init+0x38e>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <HAL_DMA_Init+0x390>
 8003296:	2300      	movs	r3, #0
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 8097 	beq.w	80033cc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a24      	ldr	r2, [pc, #144]	@ (8003334 <HAL_DMA_Init+0x42c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d021      	beq.n	80032ec <HAL_DMA_Init+0x3e4>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a22      	ldr	r2, [pc, #136]	@ (8003338 <HAL_DMA_Init+0x430>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01c      	beq.n	80032ec <HAL_DMA_Init+0x3e4>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a21      	ldr	r2, [pc, #132]	@ (800333c <HAL_DMA_Init+0x434>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d017      	beq.n	80032ec <HAL_DMA_Init+0x3e4>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003340 <HAL_DMA_Init+0x438>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d012      	beq.n	80032ec <HAL_DMA_Init+0x3e4>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003344 <HAL_DMA_Init+0x43c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d00d      	beq.n	80032ec <HAL_DMA_Init+0x3e4>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003348 <HAL_DMA_Init+0x440>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d008      	beq.n	80032ec <HAL_DMA_Init+0x3e4>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a1b      	ldr	r2, [pc, #108]	@ (800334c <HAL_DMA_Init+0x444>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d003      	beq.n	80032ec <HAL_DMA_Init+0x3e4>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a19      	ldr	r2, [pc, #100]	@ (8003350 <HAL_DMA_Init+0x448>)
 80032ea:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4b13      	ldr	r3, [pc, #76]	@ (8003354 <HAL_DMA_Init+0x44c>)
 8003308:	4013      	ands	r3, r2
 800330a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b40      	cmp	r3, #64	@ 0x40
 8003312:	d021      	beq.n	8003358 <HAL_DMA_Init+0x450>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b80      	cmp	r3, #128	@ 0x80
 800331a:	d102      	bne.n	8003322 <HAL_DMA_Init+0x41a>
 800331c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003320:	e01b      	b.n	800335a <HAL_DMA_Init+0x452>
 8003322:	2300      	movs	r3, #0
 8003324:	e019      	b.n	800335a <HAL_DMA_Init+0x452>
 8003326:	bf00      	nop
 8003328:	fe10803f 	.word	0xfe10803f
 800332c:	5c001000 	.word	0x5c001000
 8003330:	ffff0000 	.word	0xffff0000
 8003334:	58025408 	.word	0x58025408
 8003338:	5802541c 	.word	0x5802541c
 800333c:	58025430 	.word	0x58025430
 8003340:	58025444 	.word	0x58025444
 8003344:	58025458 	.word	0x58025458
 8003348:	5802546c 	.word	0x5802546c
 800334c:	58025480 	.word	0x58025480
 8003350:	58025494 	.word	0x58025494
 8003354:	fffe000f 	.word	0xfffe000f
 8003358:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68d2      	ldr	r2, [r2, #12]
 800335e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003360:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003368:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003370:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003378:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003380:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003388:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	4b6e      	ldr	r3, [pc, #440]	@ (8003558 <HAL_DMA_Init+0x650>)
 80033a0:	4413      	add	r3, r2
 80033a2:	4a6e      	ldr	r2, [pc, #440]	@ (800355c <HAL_DMA_Init+0x654>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	009a      	lsls	r2, r3, #2
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f001 f82f 	bl	8004414 <DMA_CalcBaseAndBitshift>
 80033b6:	4603      	mov	r3, r0
 80033b8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	2201      	movs	r2, #1
 80033c4:	409a      	lsls	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	e008      	b.n	80033de <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2240      	movs	r2, #64	@ 0x40
 80033d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2203      	movs	r2, #3
 80033d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0b7      	b.n	800354e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a5f      	ldr	r2, [pc, #380]	@ (8003560 <HAL_DMA_Init+0x658>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d072      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a5d      	ldr	r2, [pc, #372]	@ (8003564 <HAL_DMA_Init+0x65c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d06d      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a5c      	ldr	r2, [pc, #368]	@ (8003568 <HAL_DMA_Init+0x660>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d068      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a5a      	ldr	r2, [pc, #360]	@ (800356c <HAL_DMA_Init+0x664>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d063      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a59      	ldr	r2, [pc, #356]	@ (8003570 <HAL_DMA_Init+0x668>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d05e      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a57      	ldr	r2, [pc, #348]	@ (8003574 <HAL_DMA_Init+0x66c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d059      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a56      	ldr	r2, [pc, #344]	@ (8003578 <HAL_DMA_Init+0x670>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d054      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a54      	ldr	r2, [pc, #336]	@ (800357c <HAL_DMA_Init+0x674>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d04f      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a53      	ldr	r2, [pc, #332]	@ (8003580 <HAL_DMA_Init+0x678>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d04a      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a51      	ldr	r2, [pc, #324]	@ (8003584 <HAL_DMA_Init+0x67c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d045      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a50      	ldr	r2, [pc, #320]	@ (8003588 <HAL_DMA_Init+0x680>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d040      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a4e      	ldr	r2, [pc, #312]	@ (800358c <HAL_DMA_Init+0x684>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d03b      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a4d      	ldr	r2, [pc, #308]	@ (8003590 <HAL_DMA_Init+0x688>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d036      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a4b      	ldr	r2, [pc, #300]	@ (8003594 <HAL_DMA_Init+0x68c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d031      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a4a      	ldr	r2, [pc, #296]	@ (8003598 <HAL_DMA_Init+0x690>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d02c      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a48      	ldr	r2, [pc, #288]	@ (800359c <HAL_DMA_Init+0x694>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d027      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a47      	ldr	r2, [pc, #284]	@ (80035a0 <HAL_DMA_Init+0x698>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d022      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a45      	ldr	r2, [pc, #276]	@ (80035a4 <HAL_DMA_Init+0x69c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d01d      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a44      	ldr	r2, [pc, #272]	@ (80035a8 <HAL_DMA_Init+0x6a0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d018      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a42      	ldr	r2, [pc, #264]	@ (80035ac <HAL_DMA_Init+0x6a4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d013      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a41      	ldr	r2, [pc, #260]	@ (80035b0 <HAL_DMA_Init+0x6a8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d00e      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a3f      	ldr	r2, [pc, #252]	@ (80035b4 <HAL_DMA_Init+0x6ac>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d009      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a3e      	ldr	r2, [pc, #248]	@ (80035b8 <HAL_DMA_Init+0x6b0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d004      	beq.n	80034ce <HAL_DMA_Init+0x5c6>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a3c      	ldr	r2, [pc, #240]	@ (80035bc <HAL_DMA_Init+0x6b4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d101      	bne.n	80034d2 <HAL_DMA_Init+0x5ca>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_DMA_Init+0x5cc>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d032      	beq.n	800353e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f001 f8c9 	bl	8004670 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b80      	cmp	r3, #128	@ 0x80
 80034e4:	d102      	bne.n	80034ec <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003500:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d010      	beq.n	800352c <HAL_DMA_Init+0x624>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b08      	cmp	r3, #8
 8003510:	d80c      	bhi.n	800352c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f001 f946 	bl	80047a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	e008      	b.n	800353e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	a7fdabf8 	.word	0xa7fdabf8
 800355c:	cccccccd 	.word	0xcccccccd
 8003560:	40020010 	.word	0x40020010
 8003564:	40020028 	.word	0x40020028
 8003568:	40020040 	.word	0x40020040
 800356c:	40020058 	.word	0x40020058
 8003570:	40020070 	.word	0x40020070
 8003574:	40020088 	.word	0x40020088
 8003578:	400200a0 	.word	0x400200a0
 800357c:	400200b8 	.word	0x400200b8
 8003580:	40020410 	.word	0x40020410
 8003584:	40020428 	.word	0x40020428
 8003588:	40020440 	.word	0x40020440
 800358c:	40020458 	.word	0x40020458
 8003590:	40020470 	.word	0x40020470
 8003594:	40020488 	.word	0x40020488
 8003598:	400204a0 	.word	0x400204a0
 800359c:	400204b8 	.word	0x400204b8
 80035a0:	58025408 	.word	0x58025408
 80035a4:	5802541c 	.word	0x5802541c
 80035a8:	58025430 	.word	0x58025430
 80035ac:	58025444 	.word	0x58025444
 80035b0:	58025458 	.word	0x58025458
 80035b4:	5802546c 	.word	0x5802546c
 80035b8:	58025480 	.word	0x58025480
 80035bc:	58025494 	.word	0x58025494

080035c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	@ 0x28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035cc:	4b67      	ldr	r3, [pc, #412]	@ (800376c <HAL_DMA_IRQHandler+0x1ac>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a67      	ldr	r2, [pc, #412]	@ (8003770 <HAL_DMA_IRQHandler+0x1b0>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	0a9b      	lsrs	r3, r3, #10
 80035d8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035de:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a5f      	ldr	r2, [pc, #380]	@ (8003774 <HAL_DMA_IRQHandler+0x1b4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d04a      	beq.n	8003692 <HAL_DMA_IRQHandler+0xd2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a5d      	ldr	r2, [pc, #372]	@ (8003778 <HAL_DMA_IRQHandler+0x1b8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d045      	beq.n	8003692 <HAL_DMA_IRQHandler+0xd2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a5c      	ldr	r2, [pc, #368]	@ (800377c <HAL_DMA_IRQHandler+0x1bc>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d040      	beq.n	8003692 <HAL_DMA_IRQHandler+0xd2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a5a      	ldr	r2, [pc, #360]	@ (8003780 <HAL_DMA_IRQHandler+0x1c0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d03b      	beq.n	8003692 <HAL_DMA_IRQHandler+0xd2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a59      	ldr	r2, [pc, #356]	@ (8003784 <HAL_DMA_IRQHandler+0x1c4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d036      	beq.n	8003692 <HAL_DMA_IRQHandler+0xd2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a57      	ldr	r2, [pc, #348]	@ (8003788 <HAL_DMA_IRQHandler+0x1c8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d031      	beq.n	8003692 <HAL_DMA_IRQHandler+0xd2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a56      	ldr	r2, [pc, #344]	@ (800378c <HAL_DMA_IRQHandler+0x1cc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d02c      	beq.n	8003692 <HAL_DMA_IRQHandler+0xd2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a54      	ldr	r2, [pc, #336]	@ (8003790 <HAL_DMA_IRQHandler+0x1d0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d027      	beq.n	8003692 <HAL_DMA_IRQHandler+0xd2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a53      	ldr	r2, [pc, #332]	@ (8003794 <HAL_DMA_IRQHandler+0x1d4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d022      	beq.n	8003692 <HAL_DMA_IRQHandler+0xd2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a51      	ldr	r2, [pc, #324]	@ (8003798 <HAL_DMA_IRQHandler+0x1d8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d01d      	beq.n	8003692 <HAL_DMA_IRQHandler+0xd2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a50      	ldr	r2, [pc, #320]	@ (800379c <HAL_DMA_IRQHandler+0x1dc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d018      	beq.n	8003692 <HAL_DMA_IRQHandler+0xd2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a4e      	ldr	r2, [pc, #312]	@ (80037a0 <HAL_DMA_IRQHandler+0x1e0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d013      	beq.n	8003692 <HAL_DMA_IRQHandler+0xd2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a4d      	ldr	r2, [pc, #308]	@ (80037a4 <HAL_DMA_IRQHandler+0x1e4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00e      	beq.n	8003692 <HAL_DMA_IRQHandler+0xd2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a4b      	ldr	r2, [pc, #300]	@ (80037a8 <HAL_DMA_IRQHandler+0x1e8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d009      	beq.n	8003692 <HAL_DMA_IRQHandler+0xd2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a4a      	ldr	r2, [pc, #296]	@ (80037ac <HAL_DMA_IRQHandler+0x1ec>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d004      	beq.n	8003692 <HAL_DMA_IRQHandler+0xd2>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a48      	ldr	r2, [pc, #288]	@ (80037b0 <HAL_DMA_IRQHandler+0x1f0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d101      	bne.n	8003696 <HAL_DMA_IRQHandler+0xd6>
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <HAL_DMA_IRQHandler+0xd8>
 8003696:	2300      	movs	r3, #0
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 842b 	beq.w	8003ef4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	2208      	movs	r2, #8
 80036a8:	409a      	lsls	r2, r3
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 80a2 	beq.w	80037f8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a2e      	ldr	r2, [pc, #184]	@ (8003774 <HAL_DMA_IRQHandler+0x1b4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d04a      	beq.n	8003754 <HAL_DMA_IRQHandler+0x194>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a2d      	ldr	r2, [pc, #180]	@ (8003778 <HAL_DMA_IRQHandler+0x1b8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d045      	beq.n	8003754 <HAL_DMA_IRQHandler+0x194>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a2b      	ldr	r2, [pc, #172]	@ (800377c <HAL_DMA_IRQHandler+0x1bc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d040      	beq.n	8003754 <HAL_DMA_IRQHandler+0x194>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003780 <HAL_DMA_IRQHandler+0x1c0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d03b      	beq.n	8003754 <HAL_DMA_IRQHandler+0x194>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a28      	ldr	r2, [pc, #160]	@ (8003784 <HAL_DMA_IRQHandler+0x1c4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d036      	beq.n	8003754 <HAL_DMA_IRQHandler+0x194>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a27      	ldr	r2, [pc, #156]	@ (8003788 <HAL_DMA_IRQHandler+0x1c8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d031      	beq.n	8003754 <HAL_DMA_IRQHandler+0x194>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a25      	ldr	r2, [pc, #148]	@ (800378c <HAL_DMA_IRQHandler+0x1cc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d02c      	beq.n	8003754 <HAL_DMA_IRQHandler+0x194>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a24      	ldr	r2, [pc, #144]	@ (8003790 <HAL_DMA_IRQHandler+0x1d0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d027      	beq.n	8003754 <HAL_DMA_IRQHandler+0x194>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a22      	ldr	r2, [pc, #136]	@ (8003794 <HAL_DMA_IRQHandler+0x1d4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d022      	beq.n	8003754 <HAL_DMA_IRQHandler+0x194>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a21      	ldr	r2, [pc, #132]	@ (8003798 <HAL_DMA_IRQHandler+0x1d8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d01d      	beq.n	8003754 <HAL_DMA_IRQHandler+0x194>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1f      	ldr	r2, [pc, #124]	@ (800379c <HAL_DMA_IRQHandler+0x1dc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d018      	beq.n	8003754 <HAL_DMA_IRQHandler+0x194>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1e      	ldr	r2, [pc, #120]	@ (80037a0 <HAL_DMA_IRQHandler+0x1e0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d013      	beq.n	8003754 <HAL_DMA_IRQHandler+0x194>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1c      	ldr	r2, [pc, #112]	@ (80037a4 <HAL_DMA_IRQHandler+0x1e4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00e      	beq.n	8003754 <HAL_DMA_IRQHandler+0x194>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a1b      	ldr	r2, [pc, #108]	@ (80037a8 <HAL_DMA_IRQHandler+0x1e8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d009      	beq.n	8003754 <HAL_DMA_IRQHandler+0x194>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a19      	ldr	r2, [pc, #100]	@ (80037ac <HAL_DMA_IRQHandler+0x1ec>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d004      	beq.n	8003754 <HAL_DMA_IRQHandler+0x194>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a18      	ldr	r2, [pc, #96]	@ (80037b0 <HAL_DMA_IRQHandler+0x1f0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d12f      	bne.n	80037b4 <HAL_DMA_IRQHandler+0x1f4>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	bf14      	ite	ne
 8003762:	2301      	movne	r3, #1
 8003764:	2300      	moveq	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	e02e      	b.n	80037c8 <HAL_DMA_IRQHandler+0x208>
 800376a:	bf00      	nop
 800376c:	24000000 	.word	0x24000000
 8003770:	1b4e81b5 	.word	0x1b4e81b5
 8003774:	40020010 	.word	0x40020010
 8003778:	40020028 	.word	0x40020028
 800377c:	40020040 	.word	0x40020040
 8003780:	40020058 	.word	0x40020058
 8003784:	40020070 	.word	0x40020070
 8003788:	40020088 	.word	0x40020088
 800378c:	400200a0 	.word	0x400200a0
 8003790:	400200b8 	.word	0x400200b8
 8003794:	40020410 	.word	0x40020410
 8003798:	40020428 	.word	0x40020428
 800379c:	40020440 	.word	0x40020440
 80037a0:	40020458 	.word	0x40020458
 80037a4:	40020470 	.word	0x40020470
 80037a8:	40020488 	.word	0x40020488
 80037ac:	400204a0 	.word	0x400204a0
 80037b0:	400204b8 	.word	0x400204b8
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	bf14      	ite	ne
 80037c2:	2301      	movne	r3, #1
 80037c4:	2300      	moveq	r3, #0
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d015      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0204 	bic.w	r2, r2, #4
 80037da:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	2208      	movs	r2, #8
 80037e6:	409a      	lsls	r2, r3
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f0:	f043 0201 	orr.w	r2, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	fa22 f303 	lsr.w	r3, r2, r3
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d06e      	beq.n	80038ec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a69      	ldr	r2, [pc, #420]	@ (80039b8 <HAL_DMA_IRQHandler+0x3f8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d04a      	beq.n	80038ae <HAL_DMA_IRQHandler+0x2ee>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a67      	ldr	r2, [pc, #412]	@ (80039bc <HAL_DMA_IRQHandler+0x3fc>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d045      	beq.n	80038ae <HAL_DMA_IRQHandler+0x2ee>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a66      	ldr	r2, [pc, #408]	@ (80039c0 <HAL_DMA_IRQHandler+0x400>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d040      	beq.n	80038ae <HAL_DMA_IRQHandler+0x2ee>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a64      	ldr	r2, [pc, #400]	@ (80039c4 <HAL_DMA_IRQHandler+0x404>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d03b      	beq.n	80038ae <HAL_DMA_IRQHandler+0x2ee>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a63      	ldr	r2, [pc, #396]	@ (80039c8 <HAL_DMA_IRQHandler+0x408>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d036      	beq.n	80038ae <HAL_DMA_IRQHandler+0x2ee>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a61      	ldr	r2, [pc, #388]	@ (80039cc <HAL_DMA_IRQHandler+0x40c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d031      	beq.n	80038ae <HAL_DMA_IRQHandler+0x2ee>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a60      	ldr	r2, [pc, #384]	@ (80039d0 <HAL_DMA_IRQHandler+0x410>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d02c      	beq.n	80038ae <HAL_DMA_IRQHandler+0x2ee>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a5e      	ldr	r2, [pc, #376]	@ (80039d4 <HAL_DMA_IRQHandler+0x414>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d027      	beq.n	80038ae <HAL_DMA_IRQHandler+0x2ee>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a5d      	ldr	r2, [pc, #372]	@ (80039d8 <HAL_DMA_IRQHandler+0x418>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d022      	beq.n	80038ae <HAL_DMA_IRQHandler+0x2ee>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a5b      	ldr	r2, [pc, #364]	@ (80039dc <HAL_DMA_IRQHandler+0x41c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d01d      	beq.n	80038ae <HAL_DMA_IRQHandler+0x2ee>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a5a      	ldr	r2, [pc, #360]	@ (80039e0 <HAL_DMA_IRQHandler+0x420>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d018      	beq.n	80038ae <HAL_DMA_IRQHandler+0x2ee>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a58      	ldr	r2, [pc, #352]	@ (80039e4 <HAL_DMA_IRQHandler+0x424>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d013      	beq.n	80038ae <HAL_DMA_IRQHandler+0x2ee>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a57      	ldr	r2, [pc, #348]	@ (80039e8 <HAL_DMA_IRQHandler+0x428>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00e      	beq.n	80038ae <HAL_DMA_IRQHandler+0x2ee>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a55      	ldr	r2, [pc, #340]	@ (80039ec <HAL_DMA_IRQHandler+0x42c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d009      	beq.n	80038ae <HAL_DMA_IRQHandler+0x2ee>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a54      	ldr	r2, [pc, #336]	@ (80039f0 <HAL_DMA_IRQHandler+0x430>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d004      	beq.n	80038ae <HAL_DMA_IRQHandler+0x2ee>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a52      	ldr	r2, [pc, #328]	@ (80039f4 <HAL_DMA_IRQHandler+0x434>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d10a      	bne.n	80038c4 <HAL_DMA_IRQHandler+0x304>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	bf14      	ite	ne
 80038bc:	2301      	movne	r3, #1
 80038be:	2300      	moveq	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	e003      	b.n	80038cc <HAL_DMA_IRQHandler+0x30c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2300      	movs	r3, #0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00d      	beq.n	80038ec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	2201      	movs	r2, #1
 80038da:	409a      	lsls	r2, r3
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e4:	f043 0202 	orr.w	r2, r3, #2
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f0:	f003 031f 	and.w	r3, r3, #31
 80038f4:	2204      	movs	r2, #4
 80038f6:	409a      	lsls	r2, r3
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 808f 	beq.w	8003a20 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a2c      	ldr	r2, [pc, #176]	@ (80039b8 <HAL_DMA_IRQHandler+0x3f8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d04a      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x3e2>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a2a      	ldr	r2, [pc, #168]	@ (80039bc <HAL_DMA_IRQHandler+0x3fc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d045      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x3e2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a29      	ldr	r2, [pc, #164]	@ (80039c0 <HAL_DMA_IRQHandler+0x400>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d040      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x3e2>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a27      	ldr	r2, [pc, #156]	@ (80039c4 <HAL_DMA_IRQHandler+0x404>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d03b      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x3e2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a26      	ldr	r2, [pc, #152]	@ (80039c8 <HAL_DMA_IRQHandler+0x408>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d036      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x3e2>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a24      	ldr	r2, [pc, #144]	@ (80039cc <HAL_DMA_IRQHandler+0x40c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d031      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x3e2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a23      	ldr	r2, [pc, #140]	@ (80039d0 <HAL_DMA_IRQHandler+0x410>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d02c      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x3e2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a21      	ldr	r2, [pc, #132]	@ (80039d4 <HAL_DMA_IRQHandler+0x414>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d027      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x3e2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a20      	ldr	r2, [pc, #128]	@ (80039d8 <HAL_DMA_IRQHandler+0x418>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d022      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x3e2>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a1e      	ldr	r2, [pc, #120]	@ (80039dc <HAL_DMA_IRQHandler+0x41c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d01d      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x3e2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a1d      	ldr	r2, [pc, #116]	@ (80039e0 <HAL_DMA_IRQHandler+0x420>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d018      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x3e2>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a1b      	ldr	r2, [pc, #108]	@ (80039e4 <HAL_DMA_IRQHandler+0x424>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d013      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x3e2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a1a      	ldr	r2, [pc, #104]	@ (80039e8 <HAL_DMA_IRQHandler+0x428>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d00e      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x3e2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a18      	ldr	r2, [pc, #96]	@ (80039ec <HAL_DMA_IRQHandler+0x42c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d009      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x3e2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a17      	ldr	r2, [pc, #92]	@ (80039f0 <HAL_DMA_IRQHandler+0x430>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d004      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x3e2>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a15      	ldr	r2, [pc, #84]	@ (80039f4 <HAL_DMA_IRQHandler+0x434>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d12a      	bne.n	80039f8 <HAL_DMA_IRQHandler+0x438>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bf14      	ite	ne
 80039b0:	2301      	movne	r3, #1
 80039b2:	2300      	moveq	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	e023      	b.n	8003a00 <HAL_DMA_IRQHandler+0x440>
 80039b8:	40020010 	.word	0x40020010
 80039bc:	40020028 	.word	0x40020028
 80039c0:	40020040 	.word	0x40020040
 80039c4:	40020058 	.word	0x40020058
 80039c8:	40020070 	.word	0x40020070
 80039cc:	40020088 	.word	0x40020088
 80039d0:	400200a0 	.word	0x400200a0
 80039d4:	400200b8 	.word	0x400200b8
 80039d8:	40020410 	.word	0x40020410
 80039dc:	40020428 	.word	0x40020428
 80039e0:	40020440 	.word	0x40020440
 80039e4:	40020458 	.word	0x40020458
 80039e8:	40020470 	.word	0x40020470
 80039ec:	40020488 	.word	0x40020488
 80039f0:	400204a0 	.word	0x400204a0
 80039f4:	400204b8 	.word	0x400204b8
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2300      	movs	r3, #0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00d      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a18:	f043 0204 	orr.w	r2, r3, #4
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	2210      	movs	r2, #16
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80a6 	beq.w	8003b82 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a85      	ldr	r2, [pc, #532]	@ (8003c50 <HAL_DMA_IRQHandler+0x690>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d04a      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x516>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a83      	ldr	r2, [pc, #524]	@ (8003c54 <HAL_DMA_IRQHandler+0x694>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d045      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x516>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a82      	ldr	r2, [pc, #520]	@ (8003c58 <HAL_DMA_IRQHandler+0x698>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d040      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x516>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a80      	ldr	r2, [pc, #512]	@ (8003c5c <HAL_DMA_IRQHandler+0x69c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d03b      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x516>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a7f      	ldr	r2, [pc, #508]	@ (8003c60 <HAL_DMA_IRQHandler+0x6a0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d036      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x516>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a7d      	ldr	r2, [pc, #500]	@ (8003c64 <HAL_DMA_IRQHandler+0x6a4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d031      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x516>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a7c      	ldr	r2, [pc, #496]	@ (8003c68 <HAL_DMA_IRQHandler+0x6a8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d02c      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x516>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a7a      	ldr	r2, [pc, #488]	@ (8003c6c <HAL_DMA_IRQHandler+0x6ac>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d027      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x516>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a79      	ldr	r2, [pc, #484]	@ (8003c70 <HAL_DMA_IRQHandler+0x6b0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d022      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x516>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a77      	ldr	r2, [pc, #476]	@ (8003c74 <HAL_DMA_IRQHandler+0x6b4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d01d      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x516>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a76      	ldr	r2, [pc, #472]	@ (8003c78 <HAL_DMA_IRQHandler+0x6b8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d018      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x516>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a74      	ldr	r2, [pc, #464]	@ (8003c7c <HAL_DMA_IRQHandler+0x6bc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d013      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x516>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a73      	ldr	r2, [pc, #460]	@ (8003c80 <HAL_DMA_IRQHandler+0x6c0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00e      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x516>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a71      	ldr	r2, [pc, #452]	@ (8003c84 <HAL_DMA_IRQHandler+0x6c4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d009      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x516>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a70      	ldr	r2, [pc, #448]	@ (8003c88 <HAL_DMA_IRQHandler+0x6c8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d004      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x516>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a6e      	ldr	r2, [pc, #440]	@ (8003c8c <HAL_DMA_IRQHandler+0x6cc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d10a      	bne.n	8003aec <HAL_DMA_IRQHandler+0x52c>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf14      	ite	ne
 8003ae4:	2301      	movne	r3, #1
 8003ae6:	2300      	moveq	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e009      	b.n	8003b00 <HAL_DMA_IRQHandler+0x540>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	bf14      	ite	ne
 8003afa:	2301      	movne	r3, #1
 8003afc:	2300      	moveq	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d03e      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	2210      	movs	r2, #16
 8003b0e:	409a      	lsls	r2, r3
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d018      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d108      	bne.n	8003b42 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d024      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	4798      	blx	r3
 8003b40:	e01f      	b.n	8003b82 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d01b      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	4798      	blx	r3
 8003b52:	e016      	b.n	8003b82 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d107      	bne.n	8003b72 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0208 	bic.w	r2, r2, #8
 8003b70:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b86:	f003 031f 	and.w	r3, r3, #31
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 8110 	beq.w	8003db8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a2c      	ldr	r2, [pc, #176]	@ (8003c50 <HAL_DMA_IRQHandler+0x690>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d04a      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x678>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8003c54 <HAL_DMA_IRQHandler+0x694>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d045      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x678>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a29      	ldr	r2, [pc, #164]	@ (8003c58 <HAL_DMA_IRQHandler+0x698>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d040      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x678>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a28      	ldr	r2, [pc, #160]	@ (8003c5c <HAL_DMA_IRQHandler+0x69c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d03b      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x678>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a26      	ldr	r2, [pc, #152]	@ (8003c60 <HAL_DMA_IRQHandler+0x6a0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d036      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x678>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a25      	ldr	r2, [pc, #148]	@ (8003c64 <HAL_DMA_IRQHandler+0x6a4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d031      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x678>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a23      	ldr	r2, [pc, #140]	@ (8003c68 <HAL_DMA_IRQHandler+0x6a8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d02c      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x678>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a22      	ldr	r2, [pc, #136]	@ (8003c6c <HAL_DMA_IRQHandler+0x6ac>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d027      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x678>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a20      	ldr	r2, [pc, #128]	@ (8003c70 <HAL_DMA_IRQHandler+0x6b0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d022      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x678>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8003c74 <HAL_DMA_IRQHandler+0x6b4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d01d      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x678>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a1d      	ldr	r2, [pc, #116]	@ (8003c78 <HAL_DMA_IRQHandler+0x6b8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d018      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x678>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003c7c <HAL_DMA_IRQHandler+0x6bc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d013      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x678>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1a      	ldr	r2, [pc, #104]	@ (8003c80 <HAL_DMA_IRQHandler+0x6c0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00e      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x678>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a19      	ldr	r2, [pc, #100]	@ (8003c84 <HAL_DMA_IRQHandler+0x6c4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d009      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x678>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a17      	ldr	r2, [pc, #92]	@ (8003c88 <HAL_DMA_IRQHandler+0x6c8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d004      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x678>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a16      	ldr	r2, [pc, #88]	@ (8003c8c <HAL_DMA_IRQHandler+0x6cc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d12b      	bne.n	8003c90 <HAL_DMA_IRQHandler+0x6d0>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0310 	and.w	r3, r3, #16
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	bf14      	ite	ne
 8003c46:	2301      	movne	r3, #1
 8003c48:	2300      	moveq	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	e02a      	b.n	8003ca4 <HAL_DMA_IRQHandler+0x6e4>
 8003c4e:	bf00      	nop
 8003c50:	40020010 	.word	0x40020010
 8003c54:	40020028 	.word	0x40020028
 8003c58:	40020040 	.word	0x40020040
 8003c5c:	40020058 	.word	0x40020058
 8003c60:	40020070 	.word	0x40020070
 8003c64:	40020088 	.word	0x40020088
 8003c68:	400200a0 	.word	0x400200a0
 8003c6c:	400200b8 	.word	0x400200b8
 8003c70:	40020410 	.word	0x40020410
 8003c74:	40020428 	.word	0x40020428
 8003c78:	40020440 	.word	0x40020440
 8003c7c:	40020458 	.word	0x40020458
 8003c80:	40020470 	.word	0x40020470
 8003c84:	40020488 	.word	0x40020488
 8003c88:	400204a0 	.word	0x400204a0
 8003c8c:	400204b8 	.word	0x400204b8
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bf14      	ite	ne
 8003c9e:	2301      	movne	r3, #1
 8003ca0:	2300      	moveq	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8087 	beq.w	8003db8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cae:	f003 031f 	and.w	r3, r3, #31
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	409a      	lsls	r2, r3
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d139      	bne.n	8003d3a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0216 	bic.w	r2, r2, #22
 8003cd4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695a      	ldr	r2, [r3, #20]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ce4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d103      	bne.n	8003cf6 <HAL_DMA_IRQHandler+0x736>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0208 	bic.w	r2, r2, #8
 8003d04:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	223f      	movs	r2, #63	@ 0x3f
 8003d10:	409a      	lsls	r2, r3
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 834a 	beq.w	80043c4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	4798      	blx	r3
          }
          return;
 8003d38:	e344      	b.n	80043c4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d018      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d108      	bne.n	8003d68 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d02c      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	4798      	blx	r3
 8003d66:	e027      	b.n	8003db8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d023      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	4798      	blx	r3
 8003d78:	e01e      	b.n	8003db8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10f      	bne.n	8003da8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0210 	bic.w	r2, r2, #16
 8003d96:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8306 	beq.w	80043ce <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 8088 	beq.w	8003ee0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a7a      	ldr	r2, [pc, #488]	@ (8003fc8 <HAL_DMA_IRQHandler+0xa08>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d04a      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x8b8>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a79      	ldr	r2, [pc, #484]	@ (8003fcc <HAL_DMA_IRQHandler+0xa0c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d045      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x8b8>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a77      	ldr	r2, [pc, #476]	@ (8003fd0 <HAL_DMA_IRQHandler+0xa10>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d040      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x8b8>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a76      	ldr	r2, [pc, #472]	@ (8003fd4 <HAL_DMA_IRQHandler+0xa14>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d03b      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x8b8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a74      	ldr	r2, [pc, #464]	@ (8003fd8 <HAL_DMA_IRQHandler+0xa18>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d036      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x8b8>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a73      	ldr	r2, [pc, #460]	@ (8003fdc <HAL_DMA_IRQHandler+0xa1c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d031      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x8b8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a71      	ldr	r2, [pc, #452]	@ (8003fe0 <HAL_DMA_IRQHandler+0xa20>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d02c      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x8b8>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a70      	ldr	r2, [pc, #448]	@ (8003fe4 <HAL_DMA_IRQHandler+0xa24>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d027      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x8b8>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a6e      	ldr	r2, [pc, #440]	@ (8003fe8 <HAL_DMA_IRQHandler+0xa28>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d022      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x8b8>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a6d      	ldr	r2, [pc, #436]	@ (8003fec <HAL_DMA_IRQHandler+0xa2c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d01d      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x8b8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a6b      	ldr	r2, [pc, #428]	@ (8003ff0 <HAL_DMA_IRQHandler+0xa30>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d018      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x8b8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a6a      	ldr	r2, [pc, #424]	@ (8003ff4 <HAL_DMA_IRQHandler+0xa34>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d013      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x8b8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a68      	ldr	r2, [pc, #416]	@ (8003ff8 <HAL_DMA_IRQHandler+0xa38>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00e      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x8b8>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a67      	ldr	r2, [pc, #412]	@ (8003ffc <HAL_DMA_IRQHandler+0xa3c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d009      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x8b8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a65      	ldr	r2, [pc, #404]	@ (8004000 <HAL_DMA_IRQHandler+0xa40>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d004      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x8b8>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a64      	ldr	r2, [pc, #400]	@ (8004004 <HAL_DMA_IRQHandler+0xa44>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d108      	bne.n	8003e8a <HAL_DMA_IRQHandler+0x8ca>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0201 	bic.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	e007      	b.n	8003e9a <HAL_DMA_IRQHandler+0x8da>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d307      	bcc.n	8003eb6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f2      	bne.n	8003e9a <HAL_DMA_IRQHandler+0x8da>
 8003eb4:	e000      	b.n	8003eb8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003eb6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d004      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2203      	movs	r2, #3
 8003eca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003ece:	e003      	b.n	8003ed8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8272 	beq.w	80043ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	4798      	blx	r3
 8003ef2:	e26c      	b.n	80043ce <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a43      	ldr	r2, [pc, #268]	@ (8004008 <HAL_DMA_IRQHandler+0xa48>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d022      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x984>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a42      	ldr	r2, [pc, #264]	@ (800400c <HAL_DMA_IRQHandler+0xa4c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d01d      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x984>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a40      	ldr	r2, [pc, #256]	@ (8004010 <HAL_DMA_IRQHandler+0xa50>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d018      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x984>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a3f      	ldr	r2, [pc, #252]	@ (8004014 <HAL_DMA_IRQHandler+0xa54>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x984>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a3d      	ldr	r2, [pc, #244]	@ (8004018 <HAL_DMA_IRQHandler+0xa58>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00e      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x984>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a3c      	ldr	r2, [pc, #240]	@ (800401c <HAL_DMA_IRQHandler+0xa5c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d009      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x984>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a3a      	ldr	r2, [pc, #232]	@ (8004020 <HAL_DMA_IRQHandler+0xa60>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d004      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x984>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a39      	ldr	r2, [pc, #228]	@ (8004024 <HAL_DMA_IRQHandler+0xa64>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d101      	bne.n	8003f48 <HAL_DMA_IRQHandler+0x988>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <HAL_DMA_IRQHandler+0x98a>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 823f 	beq.w	80043ce <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2204      	movs	r2, #4
 8003f62:	409a      	lsls	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 80cd 	beq.w	8004108 <HAL_DMA_IRQHandler+0xb48>
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80c7 	beq.w	8004108 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	2204      	movs	r2, #4
 8003f84:	409a      	lsls	r2, r3
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d049      	beq.n	8004028 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8210 	beq.w	80043c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fb0:	e20a      	b.n	80043c8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 8206 	beq.w	80043c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fc4:	e200      	b.n	80043c8 <HAL_DMA_IRQHandler+0xe08>
 8003fc6:	bf00      	nop
 8003fc8:	40020010 	.word	0x40020010
 8003fcc:	40020028 	.word	0x40020028
 8003fd0:	40020040 	.word	0x40020040
 8003fd4:	40020058 	.word	0x40020058
 8003fd8:	40020070 	.word	0x40020070
 8003fdc:	40020088 	.word	0x40020088
 8003fe0:	400200a0 	.word	0x400200a0
 8003fe4:	400200b8 	.word	0x400200b8
 8003fe8:	40020410 	.word	0x40020410
 8003fec:	40020428 	.word	0x40020428
 8003ff0:	40020440 	.word	0x40020440
 8003ff4:	40020458 	.word	0x40020458
 8003ff8:	40020470 	.word	0x40020470
 8003ffc:	40020488 	.word	0x40020488
 8004000:	400204a0 	.word	0x400204a0
 8004004:	400204b8 	.word	0x400204b8
 8004008:	58025408 	.word	0x58025408
 800400c:	5802541c 	.word	0x5802541c
 8004010:	58025430 	.word	0x58025430
 8004014:	58025444 	.word	0x58025444
 8004018:	58025458 	.word	0x58025458
 800401c:	5802546c 	.word	0x5802546c
 8004020:	58025480 	.word	0x58025480
 8004024:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d160      	bne.n	80040f4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a7f      	ldr	r2, [pc, #508]	@ (8004234 <HAL_DMA_IRQHandler+0xc74>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d04a      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xb12>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a7d      	ldr	r2, [pc, #500]	@ (8004238 <HAL_DMA_IRQHandler+0xc78>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d045      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xb12>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a7c      	ldr	r2, [pc, #496]	@ (800423c <HAL_DMA_IRQHandler+0xc7c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d040      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xb12>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a7a      	ldr	r2, [pc, #488]	@ (8004240 <HAL_DMA_IRQHandler+0xc80>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d03b      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xb12>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a79      	ldr	r2, [pc, #484]	@ (8004244 <HAL_DMA_IRQHandler+0xc84>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d036      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xb12>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a77      	ldr	r2, [pc, #476]	@ (8004248 <HAL_DMA_IRQHandler+0xc88>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d031      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xb12>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a76      	ldr	r2, [pc, #472]	@ (800424c <HAL_DMA_IRQHandler+0xc8c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d02c      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xb12>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a74      	ldr	r2, [pc, #464]	@ (8004250 <HAL_DMA_IRQHandler+0xc90>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d027      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xb12>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a73      	ldr	r2, [pc, #460]	@ (8004254 <HAL_DMA_IRQHandler+0xc94>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d022      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xb12>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a71      	ldr	r2, [pc, #452]	@ (8004258 <HAL_DMA_IRQHandler+0xc98>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d01d      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xb12>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a70      	ldr	r2, [pc, #448]	@ (800425c <HAL_DMA_IRQHandler+0xc9c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d018      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xb12>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a6e      	ldr	r2, [pc, #440]	@ (8004260 <HAL_DMA_IRQHandler+0xca0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d013      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xb12>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a6d      	ldr	r2, [pc, #436]	@ (8004264 <HAL_DMA_IRQHandler+0xca4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d00e      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xb12>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a6b      	ldr	r2, [pc, #428]	@ (8004268 <HAL_DMA_IRQHandler+0xca8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d009      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xb12>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a6a      	ldr	r2, [pc, #424]	@ (800426c <HAL_DMA_IRQHandler+0xcac>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d004      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xb12>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a68      	ldr	r2, [pc, #416]	@ (8004270 <HAL_DMA_IRQHandler+0xcb0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d108      	bne.n	80040e4 <HAL_DMA_IRQHandler+0xb24>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0208 	bic.w	r2, r2, #8
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	e007      	b.n	80040f4 <HAL_DMA_IRQHandler+0xb34>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0204 	bic.w	r2, r2, #4
 80040f2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 8165 	beq.w	80043c8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004106:	e15f      	b.n	80043c8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	2202      	movs	r2, #2
 8004112:	409a      	lsls	r2, r3
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	4013      	ands	r3, r2
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80c5 	beq.w	80042a8 <HAL_DMA_IRQHandler+0xce8>
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80bf 	beq.w	80042a8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	2202      	movs	r2, #2
 8004134:	409a      	lsls	r2, r3
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d018      	beq.n	8004176 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 813a 	beq.w	80043cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004160:	e134      	b.n	80043cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8130 	beq.w	80043cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004174:	e12a      	b.n	80043cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b00      	cmp	r3, #0
 800417e:	f040 8089 	bne.w	8004294 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a2b      	ldr	r2, [pc, #172]	@ (8004234 <HAL_DMA_IRQHandler+0xc74>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d04a      	beq.n	8004222 <HAL_DMA_IRQHandler+0xc62>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a29      	ldr	r2, [pc, #164]	@ (8004238 <HAL_DMA_IRQHandler+0xc78>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d045      	beq.n	8004222 <HAL_DMA_IRQHandler+0xc62>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a28      	ldr	r2, [pc, #160]	@ (800423c <HAL_DMA_IRQHandler+0xc7c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d040      	beq.n	8004222 <HAL_DMA_IRQHandler+0xc62>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a26      	ldr	r2, [pc, #152]	@ (8004240 <HAL_DMA_IRQHandler+0xc80>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d03b      	beq.n	8004222 <HAL_DMA_IRQHandler+0xc62>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a25      	ldr	r2, [pc, #148]	@ (8004244 <HAL_DMA_IRQHandler+0xc84>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d036      	beq.n	8004222 <HAL_DMA_IRQHandler+0xc62>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a23      	ldr	r2, [pc, #140]	@ (8004248 <HAL_DMA_IRQHandler+0xc88>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d031      	beq.n	8004222 <HAL_DMA_IRQHandler+0xc62>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a22      	ldr	r2, [pc, #136]	@ (800424c <HAL_DMA_IRQHandler+0xc8c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d02c      	beq.n	8004222 <HAL_DMA_IRQHandler+0xc62>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a20      	ldr	r2, [pc, #128]	@ (8004250 <HAL_DMA_IRQHandler+0xc90>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d027      	beq.n	8004222 <HAL_DMA_IRQHandler+0xc62>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004254 <HAL_DMA_IRQHandler+0xc94>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d022      	beq.n	8004222 <HAL_DMA_IRQHandler+0xc62>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004258 <HAL_DMA_IRQHandler+0xc98>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d01d      	beq.n	8004222 <HAL_DMA_IRQHandler+0xc62>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1c      	ldr	r2, [pc, #112]	@ (800425c <HAL_DMA_IRQHandler+0xc9c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d018      	beq.n	8004222 <HAL_DMA_IRQHandler+0xc62>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004260 <HAL_DMA_IRQHandler+0xca0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <HAL_DMA_IRQHandler+0xc62>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a19      	ldr	r2, [pc, #100]	@ (8004264 <HAL_DMA_IRQHandler+0xca4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00e      	beq.n	8004222 <HAL_DMA_IRQHandler+0xc62>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a17      	ldr	r2, [pc, #92]	@ (8004268 <HAL_DMA_IRQHandler+0xca8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d009      	beq.n	8004222 <HAL_DMA_IRQHandler+0xc62>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a16      	ldr	r2, [pc, #88]	@ (800426c <HAL_DMA_IRQHandler+0xcac>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d004      	beq.n	8004222 <HAL_DMA_IRQHandler+0xc62>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a14      	ldr	r2, [pc, #80]	@ (8004270 <HAL_DMA_IRQHandler+0xcb0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d128      	bne.n	8004274 <HAL_DMA_IRQHandler+0xcb4>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0214 	bic.w	r2, r2, #20
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	e027      	b.n	8004284 <HAL_DMA_IRQHandler+0xcc4>
 8004234:	40020010 	.word	0x40020010
 8004238:	40020028 	.word	0x40020028
 800423c:	40020040 	.word	0x40020040
 8004240:	40020058 	.word	0x40020058
 8004244:	40020070 	.word	0x40020070
 8004248:	40020088 	.word	0x40020088
 800424c:	400200a0 	.word	0x400200a0
 8004250:	400200b8 	.word	0x400200b8
 8004254:	40020410 	.word	0x40020410
 8004258:	40020428 	.word	0x40020428
 800425c:	40020440 	.word	0x40020440
 8004260:	40020458 	.word	0x40020458
 8004264:	40020470 	.word	0x40020470
 8004268:	40020488 	.word	0x40020488
 800426c:	400204a0 	.word	0x400204a0
 8004270:	400204b8 	.word	0x400204b8
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 020a 	bic.w	r2, r2, #10
 8004282:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8097 	beq.w	80043cc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042a6:	e091      	b.n	80043cc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ac:	f003 031f 	and.w	r3, r3, #31
 80042b0:	2208      	movs	r2, #8
 80042b2:	409a      	lsls	r2, r3
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 8088 	beq.w	80043ce <HAL_DMA_IRQHandler+0xe0e>
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 8082 	beq.w	80043ce <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a41      	ldr	r2, [pc, #260]	@ (80043d4 <HAL_DMA_IRQHandler+0xe14>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d04a      	beq.n	800436a <HAL_DMA_IRQHandler+0xdaa>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a3f      	ldr	r2, [pc, #252]	@ (80043d8 <HAL_DMA_IRQHandler+0xe18>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d045      	beq.n	800436a <HAL_DMA_IRQHandler+0xdaa>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a3e      	ldr	r2, [pc, #248]	@ (80043dc <HAL_DMA_IRQHandler+0xe1c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d040      	beq.n	800436a <HAL_DMA_IRQHandler+0xdaa>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a3c      	ldr	r2, [pc, #240]	@ (80043e0 <HAL_DMA_IRQHandler+0xe20>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d03b      	beq.n	800436a <HAL_DMA_IRQHandler+0xdaa>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a3b      	ldr	r2, [pc, #236]	@ (80043e4 <HAL_DMA_IRQHandler+0xe24>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d036      	beq.n	800436a <HAL_DMA_IRQHandler+0xdaa>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a39      	ldr	r2, [pc, #228]	@ (80043e8 <HAL_DMA_IRQHandler+0xe28>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d031      	beq.n	800436a <HAL_DMA_IRQHandler+0xdaa>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a38      	ldr	r2, [pc, #224]	@ (80043ec <HAL_DMA_IRQHandler+0xe2c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d02c      	beq.n	800436a <HAL_DMA_IRQHandler+0xdaa>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a36      	ldr	r2, [pc, #216]	@ (80043f0 <HAL_DMA_IRQHandler+0xe30>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d027      	beq.n	800436a <HAL_DMA_IRQHandler+0xdaa>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a35      	ldr	r2, [pc, #212]	@ (80043f4 <HAL_DMA_IRQHandler+0xe34>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d022      	beq.n	800436a <HAL_DMA_IRQHandler+0xdaa>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a33      	ldr	r2, [pc, #204]	@ (80043f8 <HAL_DMA_IRQHandler+0xe38>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d01d      	beq.n	800436a <HAL_DMA_IRQHandler+0xdaa>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a32      	ldr	r2, [pc, #200]	@ (80043fc <HAL_DMA_IRQHandler+0xe3c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d018      	beq.n	800436a <HAL_DMA_IRQHandler+0xdaa>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a30      	ldr	r2, [pc, #192]	@ (8004400 <HAL_DMA_IRQHandler+0xe40>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d013      	beq.n	800436a <HAL_DMA_IRQHandler+0xdaa>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a2f      	ldr	r2, [pc, #188]	@ (8004404 <HAL_DMA_IRQHandler+0xe44>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00e      	beq.n	800436a <HAL_DMA_IRQHandler+0xdaa>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a2d      	ldr	r2, [pc, #180]	@ (8004408 <HAL_DMA_IRQHandler+0xe48>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d009      	beq.n	800436a <HAL_DMA_IRQHandler+0xdaa>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a2c      	ldr	r2, [pc, #176]	@ (800440c <HAL_DMA_IRQHandler+0xe4c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d004      	beq.n	800436a <HAL_DMA_IRQHandler+0xdaa>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a2a      	ldr	r2, [pc, #168]	@ (8004410 <HAL_DMA_IRQHandler+0xe50>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d108      	bne.n	800437c <HAL_DMA_IRQHandler+0xdbc>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 021c 	bic.w	r2, r2, #28
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	e007      	b.n	800438c <HAL_DMA_IRQHandler+0xdcc>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 020e 	bic.w	r2, r2, #14
 800438a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004390:	f003 031f 	and.w	r3, r3, #31
 8004394:	2201      	movs	r2, #1
 8004396:	409a      	lsls	r2, r3
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d009      	beq.n	80043ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	4798      	blx	r3
 80043c2:	e004      	b.n	80043ce <HAL_DMA_IRQHandler+0xe0e>
          return;
 80043c4:	bf00      	nop
 80043c6:	e002      	b.n	80043ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043c8:	bf00      	nop
 80043ca:	e000      	b.n	80043ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043cc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80043ce:	3728      	adds	r7, #40	@ 0x28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40020010 	.word	0x40020010
 80043d8:	40020028 	.word	0x40020028
 80043dc:	40020040 	.word	0x40020040
 80043e0:	40020058 	.word	0x40020058
 80043e4:	40020070 	.word	0x40020070
 80043e8:	40020088 	.word	0x40020088
 80043ec:	400200a0 	.word	0x400200a0
 80043f0:	400200b8 	.word	0x400200b8
 80043f4:	40020410 	.word	0x40020410
 80043f8:	40020428 	.word	0x40020428
 80043fc:	40020440 	.word	0x40020440
 8004400:	40020458 	.word	0x40020458
 8004404:	40020470 	.word	0x40020470
 8004408:	40020488 	.word	0x40020488
 800440c:	400204a0 	.word	0x400204a0
 8004410:	400204b8 	.word	0x400204b8

08004414 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a42      	ldr	r2, [pc, #264]	@ (800452c <DMA_CalcBaseAndBitshift+0x118>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d04a      	beq.n	80044bc <DMA_CalcBaseAndBitshift+0xa8>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a41      	ldr	r2, [pc, #260]	@ (8004530 <DMA_CalcBaseAndBitshift+0x11c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d045      	beq.n	80044bc <DMA_CalcBaseAndBitshift+0xa8>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a3f      	ldr	r2, [pc, #252]	@ (8004534 <DMA_CalcBaseAndBitshift+0x120>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d040      	beq.n	80044bc <DMA_CalcBaseAndBitshift+0xa8>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a3e      	ldr	r2, [pc, #248]	@ (8004538 <DMA_CalcBaseAndBitshift+0x124>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d03b      	beq.n	80044bc <DMA_CalcBaseAndBitshift+0xa8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a3c      	ldr	r2, [pc, #240]	@ (800453c <DMA_CalcBaseAndBitshift+0x128>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d036      	beq.n	80044bc <DMA_CalcBaseAndBitshift+0xa8>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a3b      	ldr	r2, [pc, #236]	@ (8004540 <DMA_CalcBaseAndBitshift+0x12c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d031      	beq.n	80044bc <DMA_CalcBaseAndBitshift+0xa8>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a39      	ldr	r2, [pc, #228]	@ (8004544 <DMA_CalcBaseAndBitshift+0x130>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d02c      	beq.n	80044bc <DMA_CalcBaseAndBitshift+0xa8>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a38      	ldr	r2, [pc, #224]	@ (8004548 <DMA_CalcBaseAndBitshift+0x134>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d027      	beq.n	80044bc <DMA_CalcBaseAndBitshift+0xa8>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a36      	ldr	r2, [pc, #216]	@ (800454c <DMA_CalcBaseAndBitshift+0x138>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d022      	beq.n	80044bc <DMA_CalcBaseAndBitshift+0xa8>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a35      	ldr	r2, [pc, #212]	@ (8004550 <DMA_CalcBaseAndBitshift+0x13c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d01d      	beq.n	80044bc <DMA_CalcBaseAndBitshift+0xa8>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a33      	ldr	r2, [pc, #204]	@ (8004554 <DMA_CalcBaseAndBitshift+0x140>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d018      	beq.n	80044bc <DMA_CalcBaseAndBitshift+0xa8>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a32      	ldr	r2, [pc, #200]	@ (8004558 <DMA_CalcBaseAndBitshift+0x144>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d013      	beq.n	80044bc <DMA_CalcBaseAndBitshift+0xa8>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a30      	ldr	r2, [pc, #192]	@ (800455c <DMA_CalcBaseAndBitshift+0x148>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00e      	beq.n	80044bc <DMA_CalcBaseAndBitshift+0xa8>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a2f      	ldr	r2, [pc, #188]	@ (8004560 <DMA_CalcBaseAndBitshift+0x14c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d009      	beq.n	80044bc <DMA_CalcBaseAndBitshift+0xa8>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004564 <DMA_CalcBaseAndBitshift+0x150>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d004      	beq.n	80044bc <DMA_CalcBaseAndBitshift+0xa8>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004568 <DMA_CalcBaseAndBitshift+0x154>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d101      	bne.n	80044c0 <DMA_CalcBaseAndBitshift+0xac>
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <DMA_CalcBaseAndBitshift+0xae>
 80044c0:	2300      	movs	r3, #0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d024      	beq.n	8004510 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	3b10      	subs	r3, #16
 80044ce:	4a27      	ldr	r2, [pc, #156]	@ (800456c <DMA_CalcBaseAndBitshift+0x158>)
 80044d0:	fba2 2303 	umull	r2, r3, r2, r3
 80044d4:	091b      	lsrs	r3, r3, #4
 80044d6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	4a24      	ldr	r2, [pc, #144]	@ (8004570 <DMA_CalcBaseAndBitshift+0x15c>)
 80044e0:	5cd3      	ldrb	r3, [r2, r3]
 80044e2:	461a      	mov	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d908      	bls.n	8004500 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004574 <DMA_CalcBaseAndBitshift+0x160>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	1d1a      	adds	r2, r3, #4
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	659a      	str	r2, [r3, #88]	@ 0x58
 80044fe:	e00d      	b.n	800451c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	461a      	mov	r2, r3
 8004506:	4b1b      	ldr	r3, [pc, #108]	@ (8004574 <DMA_CalcBaseAndBitshift+0x160>)
 8004508:	4013      	ands	r3, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6593      	str	r3, [r2, #88]	@ 0x58
 800450e:	e005      	b.n	800451c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004520:	4618      	mov	r0, r3
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	40020010 	.word	0x40020010
 8004530:	40020028 	.word	0x40020028
 8004534:	40020040 	.word	0x40020040
 8004538:	40020058 	.word	0x40020058
 800453c:	40020070 	.word	0x40020070
 8004540:	40020088 	.word	0x40020088
 8004544:	400200a0 	.word	0x400200a0
 8004548:	400200b8 	.word	0x400200b8
 800454c:	40020410 	.word	0x40020410
 8004550:	40020428 	.word	0x40020428
 8004554:	40020440 	.word	0x40020440
 8004558:	40020458 	.word	0x40020458
 800455c:	40020470 	.word	0x40020470
 8004560:	40020488 	.word	0x40020488
 8004564:	400204a0 	.word	0x400204a0
 8004568:	400204b8 	.word	0x400204b8
 800456c:	aaaaaaab 	.word	0xaaaaaaab
 8004570:	08009bac 	.word	0x08009bac
 8004574:	fffffc00 	.word	0xfffffc00

08004578 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d120      	bne.n	80045ce <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004590:	2b03      	cmp	r3, #3
 8004592:	d858      	bhi.n	8004646 <DMA_CheckFifoParam+0xce>
 8004594:	a201      	add	r2, pc, #4	@ (adr r2, 800459c <DMA_CheckFifoParam+0x24>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045ad 	.word	0x080045ad
 80045a0:	080045bf 	.word	0x080045bf
 80045a4:	080045ad 	.word	0x080045ad
 80045a8:	08004647 	.word	0x08004647
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d048      	beq.n	800464a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045bc:	e045      	b.n	800464a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045c6:	d142      	bne.n	800464e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045cc:	e03f      	b.n	800464e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045d6:	d123      	bne.n	8004620 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d838      	bhi.n	8004652 <DMA_CheckFifoParam+0xda>
 80045e0:	a201      	add	r2, pc, #4	@ (adr r2, 80045e8 <DMA_CheckFifoParam+0x70>)
 80045e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e6:	bf00      	nop
 80045e8:	080045f9 	.word	0x080045f9
 80045ec:	080045ff 	.word	0x080045ff
 80045f0:	080045f9 	.word	0x080045f9
 80045f4:	08004611 	.word	0x08004611
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	73fb      	strb	r3, [r7, #15]
        break;
 80045fc:	e030      	b.n	8004660 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004602:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d025      	beq.n	8004656 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800460e:	e022      	b.n	8004656 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004614:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004618:	d11f      	bne.n	800465a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800461e:	e01c      	b.n	800465a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004624:	2b02      	cmp	r3, #2
 8004626:	d902      	bls.n	800462e <DMA_CheckFifoParam+0xb6>
 8004628:	2b03      	cmp	r3, #3
 800462a:	d003      	beq.n	8004634 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800462c:	e018      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	73fb      	strb	r3, [r7, #15]
        break;
 8004632:	e015      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004638:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00e      	beq.n	800465e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	73fb      	strb	r3, [r7, #15]
    break;
 8004644:	e00b      	b.n	800465e <DMA_CheckFifoParam+0xe6>
        break;
 8004646:	bf00      	nop
 8004648:	e00a      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
        break;
 800464a:	bf00      	nop
 800464c:	e008      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
        break;
 800464e:	bf00      	nop
 8004650:	e006      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
        break;
 8004652:	bf00      	nop
 8004654:	e004      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
        break;
 8004656:	bf00      	nop
 8004658:	e002      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
        break;
 800465a:	bf00      	nop
 800465c:	e000      	b.n	8004660 <DMA_CheckFifoParam+0xe8>
    break;
 800465e:	bf00      	nop
    }
  }

  return status;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop

08004670 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a38      	ldr	r2, [pc, #224]	@ (8004764 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d022      	beq.n	80046ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a36      	ldr	r2, [pc, #216]	@ (8004768 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01d      	beq.n	80046ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a35      	ldr	r2, [pc, #212]	@ (800476c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d018      	beq.n	80046ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a33      	ldr	r2, [pc, #204]	@ (8004770 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d013      	beq.n	80046ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a32      	ldr	r2, [pc, #200]	@ (8004774 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00e      	beq.n	80046ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a30      	ldr	r2, [pc, #192]	@ (8004778 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d009      	beq.n	80046ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a2f      	ldr	r2, [pc, #188]	@ (800477c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d004      	beq.n	80046ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004780 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d101      	bne.n	80046d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80046d2:	2300      	movs	r3, #0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01a      	beq.n	800470e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	3b08      	subs	r3, #8
 80046e0:	4a28      	ldr	r2, [pc, #160]	@ (8004784 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	091b      	lsrs	r3, r3, #4
 80046e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4b26      	ldr	r3, [pc, #152]	@ (8004788 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80046ee:	4413      	add	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	461a      	mov	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a24      	ldr	r2, [pc, #144]	@ (800478c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80046fc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f003 031f 	and.w	r3, r3, #31
 8004704:	2201      	movs	r2, #1
 8004706:	409a      	lsls	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800470c:	e024      	b.n	8004758 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	3b10      	subs	r3, #16
 8004716:	4a1e      	ldr	r2, [pc, #120]	@ (8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004718:	fba2 2303 	umull	r2, r3, r2, r3
 800471c:	091b      	lsrs	r3, r3, #4
 800471e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4a1c      	ldr	r2, [pc, #112]	@ (8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d806      	bhi.n	8004736 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4a1b      	ldr	r2, [pc, #108]	@ (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d902      	bls.n	8004736 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3308      	adds	r3, #8
 8004734:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4b18      	ldr	r3, [pc, #96]	@ (800479c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800473a:	4413      	add	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	461a      	mov	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a16      	ldr	r2, [pc, #88]	@ (80047a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004748:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f003 031f 	and.w	r3, r3, #31
 8004750:	2201      	movs	r2, #1
 8004752:	409a      	lsls	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004758:	bf00      	nop
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	58025408 	.word	0x58025408
 8004768:	5802541c 	.word	0x5802541c
 800476c:	58025430 	.word	0x58025430
 8004770:	58025444 	.word	0x58025444
 8004774:	58025458 	.word	0x58025458
 8004778:	5802546c 	.word	0x5802546c
 800477c:	58025480 	.word	0x58025480
 8004780:	58025494 	.word	0x58025494
 8004784:	cccccccd 	.word	0xcccccccd
 8004788:	16009600 	.word	0x16009600
 800478c:	58025880 	.word	0x58025880
 8004790:	aaaaaaab 	.word	0xaaaaaaab
 8004794:	400204b8 	.word	0x400204b8
 8004798:	4002040f 	.word	0x4002040f
 800479c:	10008200 	.word	0x10008200
 80047a0:	40020880 	.word	0x40020880

080047a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d04a      	beq.n	8004850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d847      	bhi.n	8004850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a25      	ldr	r2, [pc, #148]	@ (800485c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d022      	beq.n	8004810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a24      	ldr	r2, [pc, #144]	@ (8004860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d01d      	beq.n	8004810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a22      	ldr	r2, [pc, #136]	@ (8004864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d018      	beq.n	8004810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a21      	ldr	r2, [pc, #132]	@ (8004868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a1f      	ldr	r2, [pc, #124]	@ (800486c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d009      	beq.n	8004810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1c      	ldr	r2, [pc, #112]	@ (8004874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1b      	ldr	r2, [pc, #108]	@ (8004878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d101      	bne.n	8004814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004814:	2300      	movs	r3, #0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4b17      	ldr	r3, [pc, #92]	@ (800487c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800481e:	4413      	add	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	461a      	mov	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a15      	ldr	r2, [pc, #84]	@ (8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800482c:	671a      	str	r2, [r3, #112]	@ 0x70
 800482e:	e009      	b.n	8004844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4b14      	ldr	r3, [pc, #80]	@ (8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	461a      	mov	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a11      	ldr	r2, [pc, #68]	@ (8004888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004842:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3b01      	subs	r3, #1
 8004848:	2201      	movs	r2, #1
 800484a:	409a      	lsls	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004850:	bf00      	nop
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	58025408 	.word	0x58025408
 8004860:	5802541c 	.word	0x5802541c
 8004864:	58025430 	.word	0x58025430
 8004868:	58025444 	.word	0x58025444
 800486c:	58025458 	.word	0x58025458
 8004870:	5802546c 	.word	0x5802546c
 8004874:	58025480 	.word	0x58025480
 8004878:	58025494 	.word	0x58025494
 800487c:	1600963f 	.word	0x1600963f
 8004880:	58025940 	.word	0x58025940
 8004884:	1000823f 	.word	0x1000823f
 8004888:	40020940 	.word	0x40020940

0800488c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800488c:	b480      	push	{r7}
 800488e:	b089      	sub	sp, #36	@ 0x24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004896:	2300      	movs	r3, #0
 8004898:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800489a:	4b89      	ldr	r3, [pc, #548]	@ (8004ac0 <HAL_GPIO_Init+0x234>)
 800489c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800489e:	e194      	b.n	8004bca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	2101      	movs	r1, #1
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	fa01 f303 	lsl.w	r3, r1, r3
 80048ac:	4013      	ands	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 8186 	beq.w	8004bc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d005      	beq.n	80048d0 <HAL_GPIO_Init+0x44>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 0303 	and.w	r3, r3, #3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d130      	bne.n	8004932 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	2203      	movs	r2, #3
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	43db      	mvns	r3, r3
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	4013      	ands	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004906:	2201      	movs	r2, #1
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	43db      	mvns	r3, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4013      	ands	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	091b      	lsrs	r3, r3, #4
 800491c:	f003 0201 	and.w	r2, r3, #1
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	2b03      	cmp	r3, #3
 800493c:	d017      	beq.n	800496e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	2203      	movs	r2, #3
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	43db      	mvns	r3, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4013      	ands	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	4313      	orrs	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d123      	bne.n	80049c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	08da      	lsrs	r2, r3, #3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3208      	adds	r2, #8
 8004982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	220f      	movs	r2, #15
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	43db      	mvns	r3, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4013      	ands	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	691a      	ldr	r2, [r3, #16]
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	08da      	lsrs	r2, r3, #3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3208      	adds	r2, #8
 80049bc:	69b9      	ldr	r1, [r7, #24]
 80049be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	2203      	movs	r2, #3
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4013      	ands	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f003 0203 	and.w	r2, r3, #3
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 80e0 	beq.w	8004bc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a04:	4b2f      	ldr	r3, [pc, #188]	@ (8004ac4 <HAL_GPIO_Init+0x238>)
 8004a06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a0a:	4a2e      	ldr	r2, [pc, #184]	@ (8004ac4 <HAL_GPIO_Init+0x238>)
 8004a0c:	f043 0302 	orr.w	r3, r3, #2
 8004a10:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004a14:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac4 <HAL_GPIO_Init+0x238>)
 8004a16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a22:	4a29      	ldr	r2, [pc, #164]	@ (8004ac8 <HAL_GPIO_Init+0x23c>)
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	089b      	lsrs	r3, r3, #2
 8004a28:	3302      	adds	r3, #2
 8004a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	220f      	movs	r2, #15
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4013      	ands	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a20      	ldr	r2, [pc, #128]	@ (8004acc <HAL_GPIO_Init+0x240>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d052      	beq.n	8004af4 <HAL_GPIO_Init+0x268>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad0 <HAL_GPIO_Init+0x244>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d031      	beq.n	8004aba <HAL_GPIO_Init+0x22e>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a1e      	ldr	r2, [pc, #120]	@ (8004ad4 <HAL_GPIO_Init+0x248>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d02b      	beq.n	8004ab6 <HAL_GPIO_Init+0x22a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a1d      	ldr	r2, [pc, #116]	@ (8004ad8 <HAL_GPIO_Init+0x24c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d025      	beq.n	8004ab2 <HAL_GPIO_Init+0x226>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a1c      	ldr	r2, [pc, #112]	@ (8004adc <HAL_GPIO_Init+0x250>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d01f      	beq.n	8004aae <HAL_GPIO_Init+0x222>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae0 <HAL_GPIO_Init+0x254>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d019      	beq.n	8004aaa <HAL_GPIO_Init+0x21e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a1a      	ldr	r2, [pc, #104]	@ (8004ae4 <HAL_GPIO_Init+0x258>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d013      	beq.n	8004aa6 <HAL_GPIO_Init+0x21a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a19      	ldr	r2, [pc, #100]	@ (8004ae8 <HAL_GPIO_Init+0x25c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00d      	beq.n	8004aa2 <HAL_GPIO_Init+0x216>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a18      	ldr	r2, [pc, #96]	@ (8004aec <HAL_GPIO_Init+0x260>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d007      	beq.n	8004a9e <HAL_GPIO_Init+0x212>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a17      	ldr	r2, [pc, #92]	@ (8004af0 <HAL_GPIO_Init+0x264>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d101      	bne.n	8004a9a <HAL_GPIO_Init+0x20e>
 8004a96:	2309      	movs	r3, #9
 8004a98:	e02d      	b.n	8004af6 <HAL_GPIO_Init+0x26a>
 8004a9a:	230a      	movs	r3, #10
 8004a9c:	e02b      	b.n	8004af6 <HAL_GPIO_Init+0x26a>
 8004a9e:	2308      	movs	r3, #8
 8004aa0:	e029      	b.n	8004af6 <HAL_GPIO_Init+0x26a>
 8004aa2:	2307      	movs	r3, #7
 8004aa4:	e027      	b.n	8004af6 <HAL_GPIO_Init+0x26a>
 8004aa6:	2306      	movs	r3, #6
 8004aa8:	e025      	b.n	8004af6 <HAL_GPIO_Init+0x26a>
 8004aaa:	2305      	movs	r3, #5
 8004aac:	e023      	b.n	8004af6 <HAL_GPIO_Init+0x26a>
 8004aae:	2304      	movs	r3, #4
 8004ab0:	e021      	b.n	8004af6 <HAL_GPIO_Init+0x26a>
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e01f      	b.n	8004af6 <HAL_GPIO_Init+0x26a>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e01d      	b.n	8004af6 <HAL_GPIO_Init+0x26a>
 8004aba:	2301      	movs	r3, #1
 8004abc:	e01b      	b.n	8004af6 <HAL_GPIO_Init+0x26a>
 8004abe:	bf00      	nop
 8004ac0:	58000080 	.word	0x58000080
 8004ac4:	58024400 	.word	0x58024400
 8004ac8:	58000400 	.word	0x58000400
 8004acc:	58020000 	.word	0x58020000
 8004ad0:	58020400 	.word	0x58020400
 8004ad4:	58020800 	.word	0x58020800
 8004ad8:	58020c00 	.word	0x58020c00
 8004adc:	58021000 	.word	0x58021000
 8004ae0:	58021400 	.word	0x58021400
 8004ae4:	58021800 	.word	0x58021800
 8004ae8:	58021c00 	.word	0x58021c00
 8004aec:	58022000 	.word	0x58022000
 8004af0:	58022400 	.word	0x58022400
 8004af4:	2300      	movs	r3, #0
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	f002 0203 	and.w	r2, r2, #3
 8004afc:	0092      	lsls	r2, r2, #2
 8004afe:	4093      	lsls	r3, r2
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b06:	4938      	ldr	r1, [pc, #224]	@ (8004be8 <HAL_GPIO_Init+0x35c>)
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	089b      	lsrs	r3, r3, #2
 8004b0c:	3302      	adds	r3, #2
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4013      	ands	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	4013      	ands	r3, r2
 8004b52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f47f ae63 	bne.w	80048a0 <HAL_GPIO_Init+0x14>
  }
}
 8004bda:	bf00      	nop
 8004bdc:	bf00      	nop
 8004bde:	3724      	adds	r7, #36	@ 0x24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	58000400 	.word	0x58000400

08004bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	807b      	strh	r3, [r7, #2]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bfc:	787b      	ldrb	r3, [r7, #1]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c02:	887a      	ldrh	r2, [r7, #2]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004c08:	e003      	b.n	8004c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c0a:	887b      	ldrh	r3, [r7, #2]
 8004c0c:	041a      	lsls	r2, r3, #16
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	619a      	str	r2, [r3, #24]
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
	...

08004c20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004c28:	4b19      	ldr	r3, [pc, #100]	@ (8004c90 <HAL_PWREx_ConfigSupply+0x70>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d00a      	beq.n	8004c4a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c34:	4b16      	ldr	r3, [pc, #88]	@ (8004c90 <HAL_PWREx_ConfigSupply+0x70>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d001      	beq.n	8004c46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e01f      	b.n	8004c86 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	e01d      	b.n	8004c86 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c4a:	4b11      	ldr	r3, [pc, #68]	@ (8004c90 <HAL_PWREx_ConfigSupply+0x70>)
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f023 0207 	bic.w	r2, r3, #7
 8004c52:	490f      	ldr	r1, [pc, #60]	@ (8004c90 <HAL_PWREx_ConfigSupply+0x70>)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c5a:	f7fc fda7 	bl	80017ac <HAL_GetTick>
 8004c5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c60:	e009      	b.n	8004c76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c62:	f7fc fda3 	bl	80017ac <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c70:	d901      	bls.n	8004c76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e007      	b.n	8004c86 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c76:	4b06      	ldr	r3, [pc, #24]	@ (8004c90 <HAL_PWREx_ConfigSupply+0x70>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c82:	d1ee      	bne.n	8004c62 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	58024800 	.word	0x58024800

08004c94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08c      	sub	sp, #48	@ 0x30
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d102      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f000 bc48 	b.w	8005538 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8088 	beq.w	8004dc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb6:	4b99      	ldr	r3, [pc, #612]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cc0:	4b96      	ldr	r3, [pc, #600]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc8:	2b10      	cmp	r3, #16
 8004cca:	d007      	beq.n	8004cdc <HAL_RCC_OscConfig+0x48>
 8004ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cce:	2b18      	cmp	r3, #24
 8004cd0:	d111      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x62>
 8004cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d10c      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cdc:	4b8f      	ldr	r3, [pc, #572]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d06d      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x130>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d169      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f000 bc21 	b.w	8005538 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cfe:	d106      	bne.n	8004d0e <HAL_RCC_OscConfig+0x7a>
 8004d00:	4b86      	ldr	r3, [pc, #536]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a85      	ldr	r2, [pc, #532]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	e02e      	b.n	8004d6c <HAL_RCC_OscConfig+0xd8>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10c      	bne.n	8004d30 <HAL_RCC_OscConfig+0x9c>
 8004d16:	4b81      	ldr	r3, [pc, #516]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a80      	ldr	r2, [pc, #512]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	4b7e      	ldr	r3, [pc, #504]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a7d      	ldr	r2, [pc, #500]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	e01d      	b.n	8004d6c <HAL_RCC_OscConfig+0xd8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d38:	d10c      	bne.n	8004d54 <HAL_RCC_OscConfig+0xc0>
 8004d3a:	4b78      	ldr	r3, [pc, #480]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a77      	ldr	r2, [pc, #476]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	4b75      	ldr	r3, [pc, #468]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a74      	ldr	r2, [pc, #464]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	e00b      	b.n	8004d6c <HAL_RCC_OscConfig+0xd8>
 8004d54:	4b71      	ldr	r3, [pc, #452]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a70      	ldr	r2, [pc, #448]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	4b6e      	ldr	r3, [pc, #440]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a6d      	ldr	r2, [pc, #436]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d013      	beq.n	8004d9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fc fd1a 	bl	80017ac <HAL_GetTick>
 8004d78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d7c:	f7fc fd16 	bl	80017ac <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b64      	cmp	r3, #100	@ 0x64
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e3d4      	b.n	8005538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d8e:	4b63      	ldr	r3, [pc, #396]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0f0      	beq.n	8004d7c <HAL_RCC_OscConfig+0xe8>
 8004d9a:	e014      	b.n	8004dc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9c:	f7fc fd06 	bl	80017ac <HAL_GetTick>
 8004da0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da4:	f7fc fd02 	bl	80017ac <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b64      	cmp	r3, #100	@ 0x64
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e3c0      	b.n	8005538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004db6:	4b59      	ldr	r3, [pc, #356]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1f0      	bne.n	8004da4 <HAL_RCC_OscConfig+0x110>
 8004dc2:	e000      	b.n	8004dc6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 80ca 	beq.w	8004f68 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dd4:	4b51      	ldr	r3, [pc, #324]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ddc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004dde:	4b4f      	ldr	r3, [pc, #316]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <HAL_RCC_OscConfig+0x166>
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	2b18      	cmp	r3, #24
 8004dee:	d156      	bne.n	8004e9e <HAL_RCC_OscConfig+0x20a>
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d151      	bne.n	8004e9e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dfa:	4b48      	ldr	r3, [pc, #288]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <HAL_RCC_OscConfig+0x17e>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e392      	b.n	8005538 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e12:	4b42      	ldr	r3, [pc, #264]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f023 0219 	bic.w	r2, r3, #25
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	493f      	ldr	r1, [pc, #252]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e24:	f7fc fcc2 	bl	80017ac <HAL_GetTick>
 8004e28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e2c:	f7fc fcbe 	bl	80017ac <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e37c      	b.n	8005538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e3e:	4b37      	ldr	r3, [pc, #220]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e4a:	f7fc fcbb 	bl	80017c4 <HAL_GetREVID>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d817      	bhi.n	8004e88 <HAL_RCC_OscConfig+0x1f4>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	2b40      	cmp	r3, #64	@ 0x40
 8004e5e:	d108      	bne.n	8004e72 <HAL_RCC_OscConfig+0x1de>
 8004e60:	4b2e      	ldr	r3, [pc, #184]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004e68:	4a2c      	ldr	r2, [pc, #176]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e6e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e70:	e07a      	b.n	8004f68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e72:	4b2a      	ldr	r3, [pc, #168]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	031b      	lsls	r3, r3, #12
 8004e80:	4926      	ldr	r1, [pc, #152]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e86:	e06f      	b.n	8004f68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e88:	4b24      	ldr	r3, [pc, #144]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	061b      	lsls	r3, r3, #24
 8004e96:	4921      	ldr	r1, [pc, #132]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e9c:	e064      	b.n	8004f68 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d047      	beq.n	8004f36 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f023 0219 	bic.w	r2, r3, #25
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	491a      	ldr	r1, [pc, #104]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb8:	f7fc fc78 	bl	80017ac <HAL_GetTick>
 8004ebc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ec0:	f7fc fc74 	bl	80017ac <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e332      	b.n	8005538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ed2:	4b12      	ldr	r3, [pc, #72]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0f0      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ede:	f7fc fc71 	bl	80017c4 <HAL_GetREVID>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d819      	bhi.n	8004f20 <HAL_RCC_OscConfig+0x28c>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2b40      	cmp	r3, #64	@ 0x40
 8004ef2:	d108      	bne.n	8004f06 <HAL_RCC_OscConfig+0x272>
 8004ef4:	4b09      	ldr	r3, [pc, #36]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004efc:	4a07      	ldr	r2, [pc, #28]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f02:	6053      	str	r3, [r2, #4]
 8004f04:	e030      	b.n	8004f68 <HAL_RCC_OscConfig+0x2d4>
 8004f06:	4b05      	ldr	r3, [pc, #20]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	031b      	lsls	r3, r3, #12
 8004f14:	4901      	ldr	r1, [pc, #4]	@ (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	604b      	str	r3, [r1, #4]
 8004f1a:	e025      	b.n	8004f68 <HAL_RCC_OscConfig+0x2d4>
 8004f1c:	58024400 	.word	0x58024400
 8004f20:	4b9a      	ldr	r3, [pc, #616]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	061b      	lsls	r3, r3, #24
 8004f2e:	4997      	ldr	r1, [pc, #604]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	604b      	str	r3, [r1, #4]
 8004f34:	e018      	b.n	8004f68 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f36:	4b95      	ldr	r3, [pc, #596]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a94      	ldr	r2, [pc, #592]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004f3c:	f023 0301 	bic.w	r3, r3, #1
 8004f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f42:	f7fc fc33 	bl	80017ac <HAL_GetTick>
 8004f46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f48:	e008      	b.n	8004f5c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f4a:	f7fc fc2f 	bl	80017ac <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e2ed      	b.n	8005538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f5c:	4b8b      	ldr	r3, [pc, #556]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f0      	bne.n	8004f4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 80a9 	beq.w	80050c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f76:	4b85      	ldr	r3, [pc, #532]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f7e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f80:	4b82      	ldr	r3, [pc, #520]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f84:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d007      	beq.n	8004f9c <HAL_RCC_OscConfig+0x308>
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	2b18      	cmp	r3, #24
 8004f90:	d13a      	bne.n	8005008 <HAL_RCC_OscConfig+0x374>
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d135      	bne.n	8005008 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f9c:	4b7b      	ldr	r3, [pc, #492]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x320>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	2b80      	cmp	r3, #128	@ 0x80
 8004fae:	d001      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e2c1      	b.n	8005538 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fb4:	f7fc fc06 	bl	80017c4 <HAL_GetREVID>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d817      	bhi.n	8004ff2 <HAL_RCC_OscConfig+0x35e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d108      	bne.n	8004fdc <HAL_RCC_OscConfig+0x348>
 8004fca:	4b70      	ldr	r3, [pc, #448]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004fd2:	4a6e      	ldr	r2, [pc, #440]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004fd4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fd8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fda:	e075      	b.n	80050c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fdc:	4b6b      	ldr	r3, [pc, #428]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	069b      	lsls	r3, r3, #26
 8004fea:	4968      	ldr	r1, [pc, #416]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ff0:	e06a      	b.n	80050c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ff2:	4b66      	ldr	r3, [pc, #408]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	061b      	lsls	r3, r3, #24
 8005000:	4962      	ldr	r1, [pc, #392]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005002:	4313      	orrs	r3, r2
 8005004:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005006:	e05f      	b.n	80050c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d042      	beq.n	8005096 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005010:	4b5e      	ldr	r3, [pc, #376]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a5d      	ldr	r2, [pc, #372]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800501a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fc fbc6 	bl	80017ac <HAL_GetTick>
 8005020:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005024:	f7fc fbc2 	bl	80017ac <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e280      	b.n	8005538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005036:	4b55      	ldr	r3, [pc, #340]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0f0      	beq.n	8005024 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005042:	f7fc fbbf 	bl	80017c4 <HAL_GetREVID>
 8005046:	4603      	mov	r3, r0
 8005048:	f241 0203 	movw	r2, #4099	@ 0x1003
 800504c:	4293      	cmp	r3, r2
 800504e:	d817      	bhi.n	8005080 <HAL_RCC_OscConfig+0x3ec>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	2b20      	cmp	r3, #32
 8005056:	d108      	bne.n	800506a <HAL_RCC_OscConfig+0x3d6>
 8005058:	4b4c      	ldr	r3, [pc, #304]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005060:	4a4a      	ldr	r2, [pc, #296]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005062:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005066:	6053      	str	r3, [r2, #4]
 8005068:	e02e      	b.n	80050c8 <HAL_RCC_OscConfig+0x434>
 800506a:	4b48      	ldr	r3, [pc, #288]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	069b      	lsls	r3, r3, #26
 8005078:	4944      	ldr	r1, [pc, #272]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 800507a:	4313      	orrs	r3, r2
 800507c:	604b      	str	r3, [r1, #4]
 800507e:	e023      	b.n	80050c8 <HAL_RCC_OscConfig+0x434>
 8005080:	4b42      	ldr	r3, [pc, #264]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	061b      	lsls	r3, r3, #24
 800508e:	493f      	ldr	r1, [pc, #252]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005090:	4313      	orrs	r3, r2
 8005092:	60cb      	str	r3, [r1, #12]
 8005094:	e018      	b.n	80050c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005096:	4b3d      	ldr	r3, [pc, #244]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a3c      	ldr	r2, [pc, #240]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 800509c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a2:	f7fc fb83 	bl	80017ac <HAL_GetTick>
 80050a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80050aa:	f7fc fb7f 	bl	80017ac <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e23d      	b.n	8005538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050bc:	4b33      	ldr	r3, [pc, #204]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f0      	bne.n	80050aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0308 	and.w	r3, r3, #8
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d036      	beq.n	8005142 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d019      	beq.n	8005110 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050dc:	4b2b      	ldr	r3, [pc, #172]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 80050de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050e0:	4a2a      	ldr	r2, [pc, #168]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 80050e2:	f043 0301 	orr.w	r3, r3, #1
 80050e6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e8:	f7fc fb60 	bl	80017ac <HAL_GetTick>
 80050ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050f0:	f7fc fb5c 	bl	80017ac <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e21a      	b.n	8005538 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005102:	4b22      	ldr	r3, [pc, #136]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0f0      	beq.n	80050f0 <HAL_RCC_OscConfig+0x45c>
 800510e:	e018      	b.n	8005142 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005110:	4b1e      	ldr	r3, [pc, #120]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005112:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005114:	4a1d      	ldr	r2, [pc, #116]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005116:	f023 0301 	bic.w	r3, r3, #1
 800511a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511c:	f7fc fb46 	bl	80017ac <HAL_GetTick>
 8005120:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005124:	f7fc fb42 	bl	80017ac <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e200      	b.n	8005538 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005136:	4b15      	ldr	r3, [pc, #84]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f0      	bne.n	8005124 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0320 	and.w	r3, r3, #32
 800514a:	2b00      	cmp	r3, #0
 800514c:	d039      	beq.n	80051c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d01c      	beq.n	8005190 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005156:	4b0d      	ldr	r3, [pc, #52]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a0c      	ldr	r2, [pc, #48]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 800515c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005160:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005162:	f7fc fb23 	bl	80017ac <HAL_GetTick>
 8005166:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005168:	e008      	b.n	800517c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800516a:	f7fc fb1f 	bl	80017ac <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b02      	cmp	r3, #2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e1dd      	b.n	8005538 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800517c:	4b03      	ldr	r3, [pc, #12]	@ (800518c <HAL_RCC_OscConfig+0x4f8>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0f0      	beq.n	800516a <HAL_RCC_OscConfig+0x4d6>
 8005188:	e01b      	b.n	80051c2 <HAL_RCC_OscConfig+0x52e>
 800518a:	bf00      	nop
 800518c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005190:	4b9b      	ldr	r3, [pc, #620]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a9a      	ldr	r2, [pc, #616]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005196:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800519a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800519c:	f7fc fb06 	bl	80017ac <HAL_GetTick>
 80051a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051a4:	f7fc fb02 	bl	80017ac <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e1c0      	b.n	8005538 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051b6:	4b92      	ldr	r3, [pc, #584]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1f0      	bne.n	80051a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8081 	beq.w	80052d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051d0:	4b8c      	ldr	r3, [pc, #560]	@ (8005404 <HAL_RCC_OscConfig+0x770>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a8b      	ldr	r2, [pc, #556]	@ (8005404 <HAL_RCC_OscConfig+0x770>)
 80051d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051dc:	f7fc fae6 	bl	80017ac <HAL_GetTick>
 80051e0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e4:	f7fc fae2 	bl	80017ac <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b64      	cmp	r3, #100	@ 0x64
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e1a0      	b.n	8005538 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051f6:	4b83      	ldr	r3, [pc, #524]	@ (8005404 <HAL_RCC_OscConfig+0x770>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d106      	bne.n	8005218 <HAL_RCC_OscConfig+0x584>
 800520a:	4b7d      	ldr	r3, [pc, #500]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 800520c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800520e:	4a7c      	ldr	r2, [pc, #496]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005210:	f043 0301 	orr.w	r3, r3, #1
 8005214:	6713      	str	r3, [r2, #112]	@ 0x70
 8005216:	e02d      	b.n	8005274 <HAL_RCC_OscConfig+0x5e0>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10c      	bne.n	800523a <HAL_RCC_OscConfig+0x5a6>
 8005220:	4b77      	ldr	r3, [pc, #476]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005224:	4a76      	ldr	r2, [pc, #472]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005226:	f023 0301 	bic.w	r3, r3, #1
 800522a:	6713      	str	r3, [r2, #112]	@ 0x70
 800522c:	4b74      	ldr	r3, [pc, #464]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 800522e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005230:	4a73      	ldr	r2, [pc, #460]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005232:	f023 0304 	bic.w	r3, r3, #4
 8005236:	6713      	str	r3, [r2, #112]	@ 0x70
 8005238:	e01c      	b.n	8005274 <HAL_RCC_OscConfig+0x5e0>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2b05      	cmp	r3, #5
 8005240:	d10c      	bne.n	800525c <HAL_RCC_OscConfig+0x5c8>
 8005242:	4b6f      	ldr	r3, [pc, #444]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005246:	4a6e      	ldr	r2, [pc, #440]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005248:	f043 0304 	orr.w	r3, r3, #4
 800524c:	6713      	str	r3, [r2, #112]	@ 0x70
 800524e:	4b6c      	ldr	r3, [pc, #432]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005252:	4a6b      	ldr	r2, [pc, #428]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005254:	f043 0301 	orr.w	r3, r3, #1
 8005258:	6713      	str	r3, [r2, #112]	@ 0x70
 800525a:	e00b      	b.n	8005274 <HAL_RCC_OscConfig+0x5e0>
 800525c:	4b68      	ldr	r3, [pc, #416]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 800525e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005260:	4a67      	ldr	r2, [pc, #412]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005262:	f023 0301 	bic.w	r3, r3, #1
 8005266:	6713      	str	r3, [r2, #112]	@ 0x70
 8005268:	4b65      	ldr	r3, [pc, #404]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 800526a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800526c:	4a64      	ldr	r2, [pc, #400]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 800526e:	f023 0304 	bic.w	r3, r3, #4
 8005272:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d015      	beq.n	80052a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527c:	f7fc fa96 	bl	80017ac <HAL_GetTick>
 8005280:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005282:	e00a      	b.n	800529a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005284:	f7fc fa92 	bl	80017ac <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005292:	4293      	cmp	r3, r2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e14e      	b.n	8005538 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800529a:	4b59      	ldr	r3, [pc, #356]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 800529c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0ee      	beq.n	8005284 <HAL_RCC_OscConfig+0x5f0>
 80052a6:	e014      	b.n	80052d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a8:	f7fc fa80 	bl	80017ac <HAL_GetTick>
 80052ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052ae:	e00a      	b.n	80052c6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b0:	f7fc fa7c 	bl	80017ac <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052be:	4293      	cmp	r3, r2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e138      	b.n	8005538 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052c6:	4b4e      	ldr	r3, [pc, #312]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 80052c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1ee      	bne.n	80052b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 812d 	beq.w	8005536 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80052dc:	4b48      	ldr	r3, [pc, #288]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052e4:	2b18      	cmp	r3, #24
 80052e6:	f000 80bd 	beq.w	8005464 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	f040 809e 	bne.w	8005430 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f4:	4b42      	ldr	r3, [pc, #264]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a41      	ldr	r2, [pc, #260]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 80052fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005300:	f7fc fa54 	bl	80017ac <HAL_GetTick>
 8005304:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005308:	f7fc fa50 	bl	80017ac <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e10e      	b.n	8005538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800531a:	4b39      	ldr	r3, [pc, #228]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1f0      	bne.n	8005308 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005326:	4b36      	ldr	r3, [pc, #216]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005328:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800532a:	4b37      	ldr	r3, [pc, #220]	@ (8005408 <HAL_RCC_OscConfig+0x774>)
 800532c:	4013      	ands	r3, r2
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005336:	0112      	lsls	r2, r2, #4
 8005338:	430a      	orrs	r2, r1
 800533a:	4931      	ldr	r1, [pc, #196]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 800533c:	4313      	orrs	r3, r2
 800533e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005344:	3b01      	subs	r3, #1
 8005346:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800534e:	3b01      	subs	r3, #1
 8005350:	025b      	lsls	r3, r3, #9
 8005352:	b29b      	uxth	r3, r3
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535a:	3b01      	subs	r3, #1
 800535c:	041b      	lsls	r3, r3, #16
 800535e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005368:	3b01      	subs	r3, #1
 800536a:	061b      	lsls	r3, r3, #24
 800536c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005370:	4923      	ldr	r1, [pc, #140]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005372:	4313      	orrs	r3, r2
 8005374:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005376:	4b22      	ldr	r3, [pc, #136]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537a:	4a21      	ldr	r2, [pc, #132]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 800537c:	f023 0301 	bic.w	r3, r3, #1
 8005380:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005382:	4b1f      	ldr	r3, [pc, #124]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005386:	4b21      	ldr	r3, [pc, #132]	@ (800540c <HAL_RCC_OscConfig+0x778>)
 8005388:	4013      	ands	r3, r2
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800538e:	00d2      	lsls	r2, r2, #3
 8005390:	491b      	ldr	r1, [pc, #108]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005392:	4313      	orrs	r3, r2
 8005394:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005396:	4b1a      	ldr	r3, [pc, #104]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539a:	f023 020c 	bic.w	r2, r3, #12
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a2:	4917      	ldr	r1, [pc, #92]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80053a8:	4b15      	ldr	r3, [pc, #84]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ac:	f023 0202 	bic.w	r2, r3, #2
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b4:	4912      	ldr	r1, [pc, #72]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053ba:	4b11      	ldr	r3, [pc, #68]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053be:	4a10      	ldr	r2, [pc, #64]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ca:	4a0d      	ldr	r2, [pc, #52]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80053d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80053de:	4b08      	ldr	r3, [pc, #32]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e2:	4a07      	ldr	r2, [pc, #28]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053e4:	f043 0301 	orr.w	r3, r3, #1
 80053e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053ea:	4b05      	ldr	r3, [pc, #20]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a04      	ldr	r2, [pc, #16]	@ (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f6:	f7fc f9d9 	bl	80017ac <HAL_GetTick>
 80053fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053fc:	e011      	b.n	8005422 <HAL_RCC_OscConfig+0x78e>
 80053fe:	bf00      	nop
 8005400:	58024400 	.word	0x58024400
 8005404:	58024800 	.word	0x58024800
 8005408:	fffffc0c 	.word	0xfffffc0c
 800540c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005410:	f7fc f9cc 	bl	80017ac <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e08a      	b.n	8005538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005422:	4b47      	ldr	r3, [pc, #284]	@ (8005540 <HAL_RCC_OscConfig+0x8ac>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0f0      	beq.n	8005410 <HAL_RCC_OscConfig+0x77c>
 800542e:	e082      	b.n	8005536 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005430:	4b43      	ldr	r3, [pc, #268]	@ (8005540 <HAL_RCC_OscConfig+0x8ac>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a42      	ldr	r2, [pc, #264]	@ (8005540 <HAL_RCC_OscConfig+0x8ac>)
 8005436:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800543a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543c:	f7fc f9b6 	bl	80017ac <HAL_GetTick>
 8005440:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005444:	f7fc f9b2 	bl	80017ac <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e070      	b.n	8005538 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005456:	4b3a      	ldr	r3, [pc, #232]	@ (8005540 <HAL_RCC_OscConfig+0x8ac>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f0      	bne.n	8005444 <HAL_RCC_OscConfig+0x7b0>
 8005462:	e068      	b.n	8005536 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005464:	4b36      	ldr	r3, [pc, #216]	@ (8005540 <HAL_RCC_OscConfig+0x8ac>)
 8005466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005468:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800546a:	4b35      	ldr	r3, [pc, #212]	@ (8005540 <HAL_RCC_OscConfig+0x8ac>)
 800546c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800546e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005474:	2b01      	cmp	r3, #1
 8005476:	d031      	beq.n	80054dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f003 0203 	and.w	r2, r3, #3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005482:	429a      	cmp	r2, r3
 8005484:	d12a      	bne.n	80054dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005492:	429a      	cmp	r2, r3
 8005494:	d122      	bne.n	80054dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d11a      	bne.n	80054dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	0a5b      	lsrs	r3, r3, #9
 80054aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d111      	bne.n	80054dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	0c1b      	lsrs	r3, r3, #16
 80054bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d108      	bne.n	80054dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	0e1b      	lsrs	r3, r3, #24
 80054ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054d8:	429a      	cmp	r2, r3
 80054da:	d001      	beq.n	80054e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e02b      	b.n	8005538 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80054e0:	4b17      	ldr	r3, [pc, #92]	@ (8005540 <HAL_RCC_OscConfig+0x8ac>)
 80054e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054e4:	08db      	lsrs	r3, r3, #3
 80054e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d01f      	beq.n	8005536 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80054f6:	4b12      	ldr	r3, [pc, #72]	@ (8005540 <HAL_RCC_OscConfig+0x8ac>)
 80054f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fa:	4a11      	ldr	r2, [pc, #68]	@ (8005540 <HAL_RCC_OscConfig+0x8ac>)
 80054fc:	f023 0301 	bic.w	r3, r3, #1
 8005500:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005502:	f7fc f953 	bl	80017ac <HAL_GetTick>
 8005506:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005508:	bf00      	nop
 800550a:	f7fc f94f 	bl	80017ac <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005512:	4293      	cmp	r3, r2
 8005514:	d0f9      	beq.n	800550a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005516:	4b0a      	ldr	r3, [pc, #40]	@ (8005540 <HAL_RCC_OscConfig+0x8ac>)
 8005518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800551a:	4b0a      	ldr	r3, [pc, #40]	@ (8005544 <HAL_RCC_OscConfig+0x8b0>)
 800551c:	4013      	ands	r3, r2
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005522:	00d2      	lsls	r2, r2, #3
 8005524:	4906      	ldr	r1, [pc, #24]	@ (8005540 <HAL_RCC_OscConfig+0x8ac>)
 8005526:	4313      	orrs	r3, r2
 8005528:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800552a:	4b05      	ldr	r3, [pc, #20]	@ (8005540 <HAL_RCC_OscConfig+0x8ac>)
 800552c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552e:	4a04      	ldr	r2, [pc, #16]	@ (8005540 <HAL_RCC_OscConfig+0x8ac>)
 8005530:	f043 0301 	orr.w	r3, r3, #1
 8005534:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3730      	adds	r7, #48	@ 0x30
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	58024400 	.word	0x58024400
 8005544:	ffff0007 	.word	0xffff0007

08005548 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e19c      	b.n	8005896 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800555c:	4b8a      	ldr	r3, [pc, #552]	@ (8005788 <HAL_RCC_ClockConfig+0x240>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 030f 	and.w	r3, r3, #15
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	429a      	cmp	r2, r3
 8005568:	d910      	bls.n	800558c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800556a:	4b87      	ldr	r3, [pc, #540]	@ (8005788 <HAL_RCC_ClockConfig+0x240>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f023 020f 	bic.w	r2, r3, #15
 8005572:	4985      	ldr	r1, [pc, #532]	@ (8005788 <HAL_RCC_ClockConfig+0x240>)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	4313      	orrs	r3, r2
 8005578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800557a:	4b83      	ldr	r3, [pc, #524]	@ (8005788 <HAL_RCC_ClockConfig+0x240>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	429a      	cmp	r2, r3
 8005586:	d001      	beq.n	800558c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e184      	b.n	8005896 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d010      	beq.n	80055ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691a      	ldr	r2, [r3, #16]
 800559c:	4b7b      	ldr	r3, [pc, #492]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d908      	bls.n	80055ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055a8:	4b78      	ldr	r3, [pc, #480]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	4975      	ldr	r1, [pc, #468]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d010      	beq.n	80055e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695a      	ldr	r2, [r3, #20]
 80055ca:	4b70      	ldr	r3, [pc, #448]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d908      	bls.n	80055e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055d6:	4b6d      	ldr	r3, [pc, #436]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	496a      	ldr	r1, [pc, #424]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d010      	beq.n	8005616 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699a      	ldr	r2, [r3, #24]
 80055f8:	4b64      	ldr	r3, [pc, #400]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005600:	429a      	cmp	r2, r3
 8005602:	d908      	bls.n	8005616 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005604:	4b61      	ldr	r3, [pc, #388]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	495e      	ldr	r1, [pc, #376]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 8005612:	4313      	orrs	r3, r2
 8005614:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b00      	cmp	r3, #0
 8005620:	d010      	beq.n	8005644 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69da      	ldr	r2, [r3, #28]
 8005626:	4b59      	ldr	r3, [pc, #356]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800562e:	429a      	cmp	r2, r3
 8005630:	d908      	bls.n	8005644 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005632:	4b56      	ldr	r3, [pc, #344]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	4953      	ldr	r1, [pc, #332]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 8005640:	4313      	orrs	r3, r2
 8005642:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d010      	beq.n	8005672 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	4b4d      	ldr	r3, [pc, #308]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	429a      	cmp	r2, r3
 800565e:	d908      	bls.n	8005672 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005660:	4b4a      	ldr	r3, [pc, #296]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	f023 020f 	bic.w	r2, r3, #15
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	4947      	ldr	r1, [pc, #284]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 800566e:	4313      	orrs	r3, r2
 8005670:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d055      	beq.n	800572a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800567e:	4b43      	ldr	r3, [pc, #268]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	4940      	ldr	r1, [pc, #256]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 800568c:	4313      	orrs	r3, r2
 800568e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2b02      	cmp	r3, #2
 8005696:	d107      	bne.n	80056a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005698:	4b3c      	ldr	r3, [pc, #240]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d121      	bne.n	80056e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e0f6      	b.n	8005896 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d107      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056b0:	4b36      	ldr	r3, [pc, #216]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d115      	bne.n	80056e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e0ea      	b.n	8005896 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d107      	bne.n	80056d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056c8:	4b30      	ldr	r3, [pc, #192]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d109      	bne.n	80056e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e0de      	b.n	8005896 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056d8:	4b2c      	ldr	r3, [pc, #176]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0304 	and.w	r3, r3, #4
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0d6      	b.n	8005896 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056e8:	4b28      	ldr	r3, [pc, #160]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f023 0207 	bic.w	r2, r3, #7
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	4925      	ldr	r1, [pc, #148]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056fa:	f7fc f857 	bl	80017ac <HAL_GetTick>
 80056fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005700:	e00a      	b.n	8005718 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005702:	f7fc f853 	bl	80017ac <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005710:	4293      	cmp	r3, r2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e0be      	b.n	8005896 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005718:	4b1c      	ldr	r3, [pc, #112]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	429a      	cmp	r2, r3
 8005728:	d1eb      	bne.n	8005702 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d010      	beq.n	8005758 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	4b14      	ldr	r3, [pc, #80]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	429a      	cmp	r2, r3
 8005744:	d208      	bcs.n	8005758 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005746:	4b11      	ldr	r3, [pc, #68]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	f023 020f 	bic.w	r2, r3, #15
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	490e      	ldr	r1, [pc, #56]	@ (800578c <HAL_RCC_ClockConfig+0x244>)
 8005754:	4313      	orrs	r3, r2
 8005756:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005758:	4b0b      	ldr	r3, [pc, #44]	@ (8005788 <HAL_RCC_ClockConfig+0x240>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 030f 	and.w	r3, r3, #15
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d214      	bcs.n	8005790 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005766:	4b08      	ldr	r3, [pc, #32]	@ (8005788 <HAL_RCC_ClockConfig+0x240>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f023 020f 	bic.w	r2, r3, #15
 800576e:	4906      	ldr	r1, [pc, #24]	@ (8005788 <HAL_RCC_ClockConfig+0x240>)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	4313      	orrs	r3, r2
 8005774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005776:	4b04      	ldr	r3, [pc, #16]	@ (8005788 <HAL_RCC_ClockConfig+0x240>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d005      	beq.n	8005790 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e086      	b.n	8005896 <HAL_RCC_ClockConfig+0x34e>
 8005788:	52002000 	.word	0x52002000
 800578c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0304 	and.w	r3, r3, #4
 8005798:	2b00      	cmp	r3, #0
 800579a:	d010      	beq.n	80057be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691a      	ldr	r2, [r3, #16]
 80057a0:	4b3f      	ldr	r3, [pc, #252]	@ (80058a0 <HAL_RCC_ClockConfig+0x358>)
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d208      	bcs.n	80057be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057ac:	4b3c      	ldr	r3, [pc, #240]	@ (80058a0 <HAL_RCC_ClockConfig+0x358>)
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	4939      	ldr	r1, [pc, #228]	@ (80058a0 <HAL_RCC_ClockConfig+0x358>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d010      	beq.n	80057ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	695a      	ldr	r2, [r3, #20]
 80057ce:	4b34      	ldr	r3, [pc, #208]	@ (80058a0 <HAL_RCC_ClockConfig+0x358>)
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d208      	bcs.n	80057ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057da:	4b31      	ldr	r3, [pc, #196]	@ (80058a0 <HAL_RCC_ClockConfig+0x358>)
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	492e      	ldr	r1, [pc, #184]	@ (80058a0 <HAL_RCC_ClockConfig+0x358>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0310 	and.w	r3, r3, #16
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d010      	beq.n	800581a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699a      	ldr	r2, [r3, #24]
 80057fc:	4b28      	ldr	r3, [pc, #160]	@ (80058a0 <HAL_RCC_ClockConfig+0x358>)
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005804:	429a      	cmp	r2, r3
 8005806:	d208      	bcs.n	800581a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005808:	4b25      	ldr	r3, [pc, #148]	@ (80058a0 <HAL_RCC_ClockConfig+0x358>)
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	4922      	ldr	r1, [pc, #136]	@ (80058a0 <HAL_RCC_ClockConfig+0x358>)
 8005816:	4313      	orrs	r3, r2
 8005818:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0320 	and.w	r3, r3, #32
 8005822:	2b00      	cmp	r3, #0
 8005824:	d010      	beq.n	8005848 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69da      	ldr	r2, [r3, #28]
 800582a:	4b1d      	ldr	r3, [pc, #116]	@ (80058a0 <HAL_RCC_ClockConfig+0x358>)
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005832:	429a      	cmp	r2, r3
 8005834:	d208      	bcs.n	8005848 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005836:	4b1a      	ldr	r3, [pc, #104]	@ (80058a0 <HAL_RCC_ClockConfig+0x358>)
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	4917      	ldr	r1, [pc, #92]	@ (80058a0 <HAL_RCC_ClockConfig+0x358>)
 8005844:	4313      	orrs	r3, r2
 8005846:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005848:	f000 f834 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
 800584c:	4602      	mov	r2, r0
 800584e:	4b14      	ldr	r3, [pc, #80]	@ (80058a0 <HAL_RCC_ClockConfig+0x358>)
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	0a1b      	lsrs	r3, r3, #8
 8005854:	f003 030f 	and.w	r3, r3, #15
 8005858:	4912      	ldr	r1, [pc, #72]	@ (80058a4 <HAL_RCC_ClockConfig+0x35c>)
 800585a:	5ccb      	ldrb	r3, [r1, r3]
 800585c:	f003 031f 	and.w	r3, r3, #31
 8005860:	fa22 f303 	lsr.w	r3, r2, r3
 8005864:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005866:	4b0e      	ldr	r3, [pc, #56]	@ (80058a0 <HAL_RCC_ClockConfig+0x358>)
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	4a0d      	ldr	r2, [pc, #52]	@ (80058a4 <HAL_RCC_ClockConfig+0x35c>)
 8005870:	5cd3      	ldrb	r3, [r2, r3]
 8005872:	f003 031f 	and.w	r3, r3, #31
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	fa22 f303 	lsr.w	r3, r2, r3
 800587c:	4a0a      	ldr	r2, [pc, #40]	@ (80058a8 <HAL_RCC_ClockConfig+0x360>)
 800587e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005880:	4a0a      	ldr	r2, [pc, #40]	@ (80058ac <HAL_RCC_ClockConfig+0x364>)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005886:	4b0a      	ldr	r3, [pc, #40]	@ (80058b0 <HAL_RCC_ClockConfig+0x368>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f7fb ff44 	bl	8001718 <HAL_InitTick>
 8005890:	4603      	mov	r3, r0
 8005892:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005894:	7bfb      	ldrb	r3, [r7, #15]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	58024400 	.word	0x58024400
 80058a4:	08009b9c 	.word	0x08009b9c
 80058a8:	24000004 	.word	0x24000004
 80058ac:	24000000 	.word	0x24000000
 80058b0:	24000008 	.word	0x24000008

080058b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b089      	sub	sp, #36	@ 0x24
 80058b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058ba:	4bb3      	ldr	r3, [pc, #716]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058c2:	2b18      	cmp	r3, #24
 80058c4:	f200 8155 	bhi.w	8005b72 <HAL_RCC_GetSysClockFreq+0x2be>
 80058c8:	a201      	add	r2, pc, #4	@ (adr r2, 80058d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80058ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ce:	bf00      	nop
 80058d0:	08005935 	.word	0x08005935
 80058d4:	08005b73 	.word	0x08005b73
 80058d8:	08005b73 	.word	0x08005b73
 80058dc:	08005b73 	.word	0x08005b73
 80058e0:	08005b73 	.word	0x08005b73
 80058e4:	08005b73 	.word	0x08005b73
 80058e8:	08005b73 	.word	0x08005b73
 80058ec:	08005b73 	.word	0x08005b73
 80058f0:	0800595b 	.word	0x0800595b
 80058f4:	08005b73 	.word	0x08005b73
 80058f8:	08005b73 	.word	0x08005b73
 80058fc:	08005b73 	.word	0x08005b73
 8005900:	08005b73 	.word	0x08005b73
 8005904:	08005b73 	.word	0x08005b73
 8005908:	08005b73 	.word	0x08005b73
 800590c:	08005b73 	.word	0x08005b73
 8005910:	08005961 	.word	0x08005961
 8005914:	08005b73 	.word	0x08005b73
 8005918:	08005b73 	.word	0x08005b73
 800591c:	08005b73 	.word	0x08005b73
 8005920:	08005b73 	.word	0x08005b73
 8005924:	08005b73 	.word	0x08005b73
 8005928:	08005b73 	.word	0x08005b73
 800592c:	08005b73 	.word	0x08005b73
 8005930:	08005967 	.word	0x08005967
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005934:	4b94      	ldr	r3, [pc, #592]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0320 	and.w	r3, r3, #32
 800593c:	2b00      	cmp	r3, #0
 800593e:	d009      	beq.n	8005954 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005940:	4b91      	ldr	r3, [pc, #580]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	08db      	lsrs	r3, r3, #3
 8005946:	f003 0303 	and.w	r3, r3, #3
 800594a:	4a90      	ldr	r2, [pc, #576]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800594c:	fa22 f303 	lsr.w	r3, r2, r3
 8005950:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005952:	e111      	b.n	8005b78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005954:	4b8d      	ldr	r3, [pc, #564]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005956:	61bb      	str	r3, [r7, #24]
      break;
 8005958:	e10e      	b.n	8005b78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800595a:	4b8d      	ldr	r3, [pc, #564]	@ (8005b90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800595c:	61bb      	str	r3, [r7, #24]
      break;
 800595e:	e10b      	b.n	8005b78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005960:	4b8c      	ldr	r3, [pc, #560]	@ (8005b94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005962:	61bb      	str	r3, [r7, #24]
      break;
 8005964:	e108      	b.n	8005b78 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005966:	4b88      	ldr	r3, [pc, #544]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005970:	4b85      	ldr	r3, [pc, #532]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005974:	091b      	lsrs	r3, r3, #4
 8005976:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800597a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800597c:	4b82      	ldr	r3, [pc, #520]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800597e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005986:	4b80      	ldr	r3, [pc, #512]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800598a:	08db      	lsrs	r3, r3, #3
 800598c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	fb02 f303 	mul.w	r3, r2, r3
 8005996:	ee07 3a90 	vmov	s15, r3
 800599a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 80e1 	beq.w	8005b6c <HAL_RCC_GetSysClockFreq+0x2b8>
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	f000 8083 	beq.w	8005ab8 <HAL_RCC_GetSysClockFreq+0x204>
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	f200 80a1 	bhi.w	8005afc <HAL_RCC_GetSysClockFreq+0x248>
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_RCC_GetSysClockFreq+0x114>
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d056      	beq.n	8005a74 <HAL_RCC_GetSysClockFreq+0x1c0>
 80059c6:	e099      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059c8:	4b6f      	ldr	r3, [pc, #444]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0320 	and.w	r3, r3, #32
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d02d      	beq.n	8005a30 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059d4:	4b6c      	ldr	r3, [pc, #432]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	08db      	lsrs	r3, r3, #3
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	4a6b      	ldr	r2, [pc, #428]	@ (8005b8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
 80059e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	ee07 3a90 	vmov	s15, r3
 80059ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059fe:	4b62      	ldr	r3, [pc, #392]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a06:	ee07 3a90 	vmov	s15, r3
 8005a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a12:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005b98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005a2e:	e087      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	ee07 3a90 	vmov	s15, r3
 8005a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005b9c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a42:	4b51      	ldr	r3, [pc, #324]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a52:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a56:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005b98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a72:	e065      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	ee07 3a90 	vmov	s15, r3
 8005a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005ba0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a86:	4b40      	ldr	r3, [pc, #256]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a8e:	ee07 3a90 	vmov	s15, r3
 8005a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a9a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005b98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ab6:	e043      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005ba4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aca:	4b2f      	ldr	r3, [pc, #188]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ade:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005b98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005afa:	e021      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b06:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005ba0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b16:	ee07 3a90 	vmov	s15, r3
 8005b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b22:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005b98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b3e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005b40:	4b11      	ldr	r3, [pc, #68]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b44:	0a5b      	lsrs	r3, r3, #9
 8005b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	ee07 3a90 	vmov	s15, r3
 8005b54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b58:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b64:	ee17 3a90 	vmov	r3, s15
 8005b68:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005b6a:	e005      	b.n	8005b78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	61bb      	str	r3, [r7, #24]
      break;
 8005b70:	e002      	b.n	8005b78 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005b72:	4b07      	ldr	r3, [pc, #28]	@ (8005b90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b74:	61bb      	str	r3, [r7, #24]
      break;
 8005b76:	bf00      	nop
  }

  return sysclockfreq;
 8005b78:	69bb      	ldr	r3, [r7, #24]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3724      	adds	r7, #36	@ 0x24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	58024400 	.word	0x58024400
 8005b8c:	03d09000 	.word	0x03d09000
 8005b90:	003d0900 	.word	0x003d0900
 8005b94:	007a1200 	.word	0x007a1200
 8005b98:	46000000 	.word	0x46000000
 8005b9c:	4c742400 	.word	0x4c742400
 8005ba0:	4a742400 	.word	0x4a742400
 8005ba4:	4af42400 	.word	0x4af42400

08005ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005bae:	f7ff fe81 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	4b10      	ldr	r3, [pc, #64]	@ (8005bf8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	0a1b      	lsrs	r3, r3, #8
 8005bba:	f003 030f 	and.w	r3, r3, #15
 8005bbe:	490f      	ldr	r1, [pc, #60]	@ (8005bfc <HAL_RCC_GetHCLKFreq+0x54>)
 8005bc0:	5ccb      	ldrb	r3, [r1, r3]
 8005bc2:	f003 031f 	and.w	r3, r3, #31
 8005bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	f003 030f 	and.w	r3, r3, #15
 8005bd4:	4a09      	ldr	r2, [pc, #36]	@ (8005bfc <HAL_RCC_GetHCLKFreq+0x54>)
 8005bd6:	5cd3      	ldrb	r3, [r2, r3]
 8005bd8:	f003 031f 	and.w	r3, r3, #31
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	fa22 f303 	lsr.w	r3, r2, r3
 8005be2:	4a07      	ldr	r2, [pc, #28]	@ (8005c00 <HAL_RCC_GetHCLKFreq+0x58>)
 8005be4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005be6:	4a07      	ldr	r2, [pc, #28]	@ (8005c04 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005bec:	4b04      	ldr	r3, [pc, #16]	@ (8005c00 <HAL_RCC_GetHCLKFreq+0x58>)
 8005bee:	681b      	ldr	r3, [r3, #0]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	58024400 	.word	0x58024400
 8005bfc:	08009b9c 	.word	0x08009b9c
 8005c00:	24000004 	.word	0x24000004
 8005c04:	24000000 	.word	0x24000000

08005c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005c0c:	f7ff ffcc 	bl	8005ba8 <HAL_RCC_GetHCLKFreq>
 8005c10:	4602      	mov	r2, r0
 8005c12:	4b06      	ldr	r3, [pc, #24]	@ (8005c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	091b      	lsrs	r3, r3, #4
 8005c18:	f003 0307 	and.w	r3, r3, #7
 8005c1c:	4904      	ldr	r1, [pc, #16]	@ (8005c30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c1e:	5ccb      	ldrb	r3, [r1, r3]
 8005c20:	f003 031f 	and.w	r3, r3, #31
 8005c24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	58024400 	.word	0x58024400
 8005c30:	08009b9c 	.word	0x08009b9c

08005c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005c38:	f7ff ffb6 	bl	8005ba8 <HAL_RCC_GetHCLKFreq>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	4b06      	ldr	r3, [pc, #24]	@ (8005c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	0a1b      	lsrs	r3, r3, #8
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	4904      	ldr	r1, [pc, #16]	@ (8005c5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c4a:	5ccb      	ldrb	r3, [r1, r3]
 8005c4c:	f003 031f 	and.w	r3, r3, #31
 8005c50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	58024400 	.word	0x58024400
 8005c5c:	08009b9c 	.word	0x08009b9c

08005c60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c64:	b0ca      	sub	sp, #296	@ 0x128
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c72:	2300      	movs	r3, #0
 8005c74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c80:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005c84:	2500      	movs	r5, #0
 8005c86:	ea54 0305 	orrs.w	r3, r4, r5
 8005c8a:	d049      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c96:	d02f      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c9c:	d828      	bhi.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ca2:	d01a      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ca4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ca8:	d822      	bhi.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005cae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cb2:	d007      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005cb4:	e01c      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cb6:	4bb8      	ldr	r3, [pc, #736]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cba:	4ab7      	ldr	r2, [pc, #732]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cc2:	e01a      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc8:	3308      	adds	r3, #8
 8005cca:	2102      	movs	r1, #2
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f002 fb61 	bl	8008394 <RCCEx_PLL2_Config>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cd8:	e00f      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cde:	3328      	adds	r3, #40	@ 0x28
 8005ce0:	2102      	movs	r1, #2
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f002 fc08 	bl	80084f8 <RCCEx_PLL3_Config>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cee:	e004      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cf6:	e000      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10a      	bne.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005d02:	4ba5      	ldr	r3, [pc, #660]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d10:	4aa1      	ldr	r2, [pc, #644]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d12:	430b      	orrs	r3, r1
 8005d14:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d16:	e003      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d28:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005d2c:	f04f 0900 	mov.w	r9, #0
 8005d30:	ea58 0309 	orrs.w	r3, r8, r9
 8005d34:	d047      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d3c:	2b04      	cmp	r3, #4
 8005d3e:	d82a      	bhi.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005d40:	a201      	add	r2, pc, #4	@ (adr r2, 8005d48 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d46:	bf00      	nop
 8005d48:	08005d5d 	.word	0x08005d5d
 8005d4c:	08005d6b 	.word	0x08005d6b
 8005d50:	08005d81 	.word	0x08005d81
 8005d54:	08005d9f 	.word	0x08005d9f
 8005d58:	08005d9f 	.word	0x08005d9f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d5c:	4b8e      	ldr	r3, [pc, #568]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d60:	4a8d      	ldr	r2, [pc, #564]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d68:	e01a      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6e:	3308      	adds	r3, #8
 8005d70:	2100      	movs	r1, #0
 8005d72:	4618      	mov	r0, r3
 8005d74:	f002 fb0e 	bl	8008394 <RCCEx_PLL2_Config>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d7e:	e00f      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d84:	3328      	adds	r3, #40	@ 0x28
 8005d86:	2100      	movs	r1, #0
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f002 fbb5 	bl	80084f8 <RCCEx_PLL3_Config>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d94:	e004      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d9c:	e000      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10a      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005da8:	4b7b      	ldr	r3, [pc, #492]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dac:	f023 0107 	bic.w	r1, r3, #7
 8005db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db6:	4a78      	ldr	r2, [pc, #480]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005db8:	430b      	orrs	r3, r1
 8005dba:	6513      	str	r3, [r2, #80]	@ 0x50
 8005dbc:	e003      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005dd2:	f04f 0b00 	mov.w	fp, #0
 8005dd6:	ea5a 030b 	orrs.w	r3, sl, fp
 8005dda:	d04c      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005de6:	d030      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005de8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dec:	d829      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005dee:	2bc0      	cmp	r3, #192	@ 0xc0
 8005df0:	d02d      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005df2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005df4:	d825      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005df6:	2b80      	cmp	r3, #128	@ 0x80
 8005df8:	d018      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005dfa:	2b80      	cmp	r3, #128	@ 0x80
 8005dfc:	d821      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005e02:	2b40      	cmp	r3, #64	@ 0x40
 8005e04:	d007      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005e06:	e01c      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e08:	4b63      	ldr	r3, [pc, #396]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0c:	4a62      	ldr	r2, [pc, #392]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e14:	e01c      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1a:	3308      	adds	r3, #8
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f002 fab8 	bl	8008394 <RCCEx_PLL2_Config>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e2a:	e011      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e30:	3328      	adds	r3, #40	@ 0x28
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f002 fb5f 	bl	80084f8 <RCCEx_PLL3_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e40:	e006      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e48:	e002      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005e4a:	bf00      	nop
 8005e4c:	e000      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10a      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005e58:	4b4f      	ldr	r3, [pc, #316]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e5c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e66:	4a4c      	ldr	r2, [pc, #304]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e6c:	e003      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005e82:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005e86:	2300      	movs	r3, #0
 8005e88:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005e8c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005e90:	460b      	mov	r3, r1
 8005e92:	4313      	orrs	r3, r2
 8005e94:	d053      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ea2:	d035      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005ea4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ea8:	d82e      	bhi.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005eaa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005eae:	d031      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005eb0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005eb4:	d828      	bhi.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005eb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005eba:	d01a      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005ebc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ec0:	d822      	bhi.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005ec6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005eca:	d007      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005ecc:	e01c      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ece:	4b32      	ldr	r3, [pc, #200]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed2:	4a31      	ldr	r2, [pc, #196]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ed8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005eda:	e01c      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee0:	3308      	adds	r3, #8
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f002 fa55 	bl	8008394 <RCCEx_PLL2_Config>
 8005eea:	4603      	mov	r3, r0
 8005eec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005ef0:	e011      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef6:	3328      	adds	r3, #40	@ 0x28
 8005ef8:	2100      	movs	r1, #0
 8005efa:	4618      	mov	r0, r3
 8005efc:	f002 fafc 	bl	80084f8 <RCCEx_PLL3_Config>
 8005f00:	4603      	mov	r3, r0
 8005f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f06:	e006      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f0e:	e002      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005f10:	bf00      	nop
 8005f12:	e000      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10b      	bne.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f22:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f30:	430b      	orrs	r3, r1
 8005f32:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f34:	e003      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005f4a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005f54:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	d056      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f6a:	d038      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005f6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f70:	d831      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f76:	d034      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005f78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f7c:	d82b      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f82:	d01d      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005f84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f88:	d825      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d006      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005f8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f92:	d00a      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005f94:	e01f      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f96:	bf00      	nop
 8005f98:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f9c:	4ba2      	ldr	r3, [pc, #648]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa0:	4aa1      	ldr	r2, [pc, #644]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fa8:	e01c      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fae:	3308      	adds	r3, #8
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f002 f9ee 	bl	8008394 <RCCEx_PLL2_Config>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005fbe:	e011      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc4:	3328      	adds	r3, #40	@ 0x28
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f002 fa95 	bl	80084f8 <RCCEx_PLL3_Config>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fd4:	e006      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fdc:	e002      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005fde:	bf00      	nop
 8005fe0:	e000      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005fe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10b      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005fec:	4b8e      	ldr	r3, [pc, #568]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005ffc:	4a8a      	ldr	r2, [pc, #552]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ffe:	430b      	orrs	r3, r1
 8006000:	6593      	str	r3, [r2, #88]	@ 0x58
 8006002:	e003      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006008:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800600c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006014:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006018:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800601c:	2300      	movs	r3, #0
 800601e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006022:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006026:	460b      	mov	r3, r1
 8006028:	4313      	orrs	r3, r2
 800602a:	d03a      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800602c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006032:	2b30      	cmp	r3, #48	@ 0x30
 8006034:	d01f      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006036:	2b30      	cmp	r3, #48	@ 0x30
 8006038:	d819      	bhi.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800603a:	2b20      	cmp	r3, #32
 800603c:	d00c      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800603e:	2b20      	cmp	r3, #32
 8006040:	d815      	bhi.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d019      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006046:	2b10      	cmp	r3, #16
 8006048:	d111      	bne.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800604a:	4b77      	ldr	r3, [pc, #476]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800604c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800604e:	4a76      	ldr	r2, [pc, #472]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006050:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006054:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006056:	e011      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605c:	3308      	adds	r3, #8
 800605e:	2102      	movs	r1, #2
 8006060:	4618      	mov	r0, r3
 8006062:	f002 f997 	bl	8008394 <RCCEx_PLL2_Config>
 8006066:	4603      	mov	r3, r0
 8006068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800606c:	e006      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006074:	e002      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006076:	bf00      	nop
 8006078:	e000      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800607a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800607c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10a      	bne.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006084:	4b68      	ldr	r3, [pc, #416]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006088:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800608c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006092:	4a65      	ldr	r2, [pc, #404]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006094:	430b      	orrs	r3, r1
 8006096:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006098:	e003      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800609e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80060a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060aa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80060ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80060b2:	2300      	movs	r3, #0
 80060b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80060b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80060bc:	460b      	mov	r3, r1
 80060be:	4313      	orrs	r3, r2
 80060c0:	d051      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80060c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060cc:	d035      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80060ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060d2:	d82e      	bhi.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80060d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80060d8:	d031      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80060da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80060de:	d828      	bhi.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80060e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060e4:	d01a      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80060e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060ea:	d822      	bhi.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d003      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80060f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060f4:	d007      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80060f6:	e01c      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060f8:	4b4b      	ldr	r3, [pc, #300]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fc:	4a4a      	ldr	r2, [pc, #296]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006102:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006104:	e01c      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610a:	3308      	adds	r3, #8
 800610c:	2100      	movs	r1, #0
 800610e:	4618      	mov	r0, r3
 8006110:	f002 f940 	bl	8008394 <RCCEx_PLL2_Config>
 8006114:	4603      	mov	r3, r0
 8006116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800611a:	e011      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800611c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006120:	3328      	adds	r3, #40	@ 0x28
 8006122:	2100      	movs	r1, #0
 8006124:	4618      	mov	r0, r3
 8006126:	f002 f9e7 	bl	80084f8 <RCCEx_PLL3_Config>
 800612a:	4603      	mov	r3, r0
 800612c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006130:	e006      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006138:	e002      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800613a:	bf00      	nop
 800613c:	e000      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800613e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006140:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006148:	4b37      	ldr	r3, [pc, #220]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800614a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800614c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006156:	4a34      	ldr	r2, [pc, #208]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006158:	430b      	orrs	r3, r1
 800615a:	6513      	str	r3, [r2, #80]	@ 0x50
 800615c:	e003      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006162:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006172:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006176:	2300      	movs	r3, #0
 8006178:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800617c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006180:	460b      	mov	r3, r1
 8006182:	4313      	orrs	r3, r2
 8006184:	d056      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800618c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006190:	d033      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006192:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006196:	d82c      	bhi.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006198:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800619c:	d02f      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800619e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061a2:	d826      	bhi.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80061a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80061a8:	d02b      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80061aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80061ae:	d820      	bhi.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80061b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061b4:	d012      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80061b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061ba:	d81a      	bhi.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d022      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80061c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061c4:	d115      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ca:	3308      	adds	r3, #8
 80061cc:	2101      	movs	r1, #1
 80061ce:	4618      	mov	r0, r3
 80061d0:	f002 f8e0 	bl	8008394 <RCCEx_PLL2_Config>
 80061d4:	4603      	mov	r3, r0
 80061d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80061da:	e015      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e0:	3328      	adds	r3, #40	@ 0x28
 80061e2:	2101      	movs	r1, #1
 80061e4:	4618      	mov	r0, r3
 80061e6:	f002 f987 	bl	80084f8 <RCCEx_PLL3_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80061f0:	e00a      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061f8:	e006      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061fa:	bf00      	nop
 80061fc:	e004      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80061fe:	bf00      	nop
 8006200:	e002      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006202:	bf00      	nop
 8006204:	e000      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006206:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006208:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10d      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006210:	4b05      	ldr	r3, [pc, #20]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006214:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800621c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800621e:	4a02      	ldr	r2, [pc, #8]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006220:	430b      	orrs	r3, r1
 8006222:	6513      	str	r3, [r2, #80]	@ 0x50
 8006224:	e006      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006226:	bf00      	nop
 8006228:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006230:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006240:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006244:	2300      	movs	r3, #0
 8006246:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800624a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800624e:	460b      	mov	r3, r1
 8006250:	4313      	orrs	r3, r2
 8006252:	d055      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006258:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800625c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006260:	d033      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006262:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006266:	d82c      	bhi.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800626c:	d02f      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800626e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006272:	d826      	bhi.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006274:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006278:	d02b      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800627a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800627e:	d820      	bhi.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006280:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006284:	d012      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006286:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800628a:	d81a      	bhi.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800628c:	2b00      	cmp	r3, #0
 800628e:	d022      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006290:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006294:	d115      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629a:	3308      	adds	r3, #8
 800629c:	2101      	movs	r1, #1
 800629e:	4618      	mov	r0, r3
 80062a0:	f002 f878 	bl	8008394 <RCCEx_PLL2_Config>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80062aa:	e015      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b0:	3328      	adds	r3, #40	@ 0x28
 80062b2:	2101      	movs	r1, #1
 80062b4:	4618      	mov	r0, r3
 80062b6:	f002 f91f 	bl	80084f8 <RCCEx_PLL3_Config>
 80062ba:	4603      	mov	r3, r0
 80062bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80062c0:	e00a      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062c8:	e006      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80062ca:	bf00      	nop
 80062cc:	e004      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80062ce:	bf00      	nop
 80062d0:	e002      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80062d2:	bf00      	nop
 80062d4:	e000      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80062d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10b      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80062e0:	4ba3      	ldr	r3, [pc, #652]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80062e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062f0:	4a9f      	ldr	r2, [pc, #636]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062f2:	430b      	orrs	r3, r1
 80062f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80062f6:	e003      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006308:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800630c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006310:	2300      	movs	r3, #0
 8006312:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006316:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800631a:	460b      	mov	r3, r1
 800631c:	4313      	orrs	r3, r2
 800631e:	d037      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006326:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800632a:	d00e      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800632c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006330:	d816      	bhi.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006332:	2b00      	cmp	r3, #0
 8006334:	d018      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006336:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800633a:	d111      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800633c:	4b8c      	ldr	r3, [pc, #560]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800633e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006340:	4a8b      	ldr	r2, [pc, #556]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006346:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006348:	e00f      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800634a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634e:	3308      	adds	r3, #8
 8006350:	2101      	movs	r1, #1
 8006352:	4618      	mov	r0, r3
 8006354:	f002 f81e 	bl	8008394 <RCCEx_PLL2_Config>
 8006358:	4603      	mov	r3, r0
 800635a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800635e:	e004      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006366:	e000      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800636a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10a      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006372:	4b7f      	ldr	r3, [pc, #508]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006376:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800637a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006380:	4a7b      	ldr	r2, [pc, #492]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006382:	430b      	orrs	r3, r1
 8006384:	6513      	str	r3, [r2, #80]	@ 0x50
 8006386:	e003      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800638c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006398:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800639c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063a0:	2300      	movs	r3, #0
 80063a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80063a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4313      	orrs	r3, r2
 80063ae:	d039      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80063b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d81c      	bhi.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80063ba:	a201      	add	r2, pc, #4	@ (adr r2, 80063c0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80063bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c0:	080063fd 	.word	0x080063fd
 80063c4:	080063d1 	.word	0x080063d1
 80063c8:	080063df 	.word	0x080063df
 80063cc:	080063fd 	.word	0x080063fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063d0:	4b67      	ldr	r3, [pc, #412]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d4:	4a66      	ldr	r2, [pc, #408]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80063dc:	e00f      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e2:	3308      	adds	r3, #8
 80063e4:	2102      	movs	r1, #2
 80063e6:	4618      	mov	r0, r3
 80063e8:	f001 ffd4 	bl	8008394 <RCCEx_PLL2_Config>
 80063ec:	4603      	mov	r3, r0
 80063ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80063f2:	e004      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063fa:	e000      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80063fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10a      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006406:	4b5a      	ldr	r3, [pc, #360]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800640a:	f023 0103 	bic.w	r1, r3, #3
 800640e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006414:	4a56      	ldr	r2, [pc, #344]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006416:	430b      	orrs	r3, r1
 8006418:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800641a:	e003      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800641c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006420:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006430:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006434:	2300      	movs	r3, #0
 8006436:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800643a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800643e:	460b      	mov	r3, r1
 8006440:	4313      	orrs	r3, r2
 8006442:	f000 809f 	beq.w	8006584 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006446:	4b4b      	ldr	r3, [pc, #300]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a4a      	ldr	r2, [pc, #296]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800644c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006450:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006452:	f7fb f9ab 	bl	80017ac <HAL_GetTick>
 8006456:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800645a:	e00b      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800645c:	f7fb f9a6 	bl	80017ac <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b64      	cmp	r3, #100	@ 0x64
 800646a:	d903      	bls.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006472:	e005      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006474:	4b3f      	ldr	r3, [pc, #252]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800647c:	2b00      	cmp	r3, #0
 800647e:	d0ed      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006484:	2b00      	cmp	r3, #0
 8006486:	d179      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006488:	4b39      	ldr	r3, [pc, #228]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800648a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800648c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006490:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006494:	4053      	eors	r3, r2
 8006496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800649a:	2b00      	cmp	r3, #0
 800649c:	d015      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800649e:	4b34      	ldr	r3, [pc, #208]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064aa:	4b31      	ldr	r3, [pc, #196]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ae:	4a30      	ldr	r2, [pc, #192]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064b4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064b6:	4b2e      	ldr	r3, [pc, #184]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ba:	4a2d      	ldr	r2, [pc, #180]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064c0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80064c2:	4a2b      	ldr	r2, [pc, #172]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064c8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80064ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80064d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064d6:	d118      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d8:	f7fb f968 	bl	80017ac <HAL_GetTick>
 80064dc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064e0:	e00d      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064e2:	f7fb f963 	bl	80017ac <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80064ec:	1ad2      	subs	r2, r2, r3
 80064ee:	f241 3388 	movw	r3, #5000	@ 0x1388
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d903      	bls.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80064fc:	e005      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0eb      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800650a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800650e:	2b00      	cmp	r3, #0
 8006510:	d129      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006516:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800651a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800651e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006522:	d10e      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006524:	4b12      	ldr	r3, [pc, #72]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800652c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006530:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006534:	091a      	lsrs	r2, r3, #4
 8006536:	4b10      	ldr	r3, [pc, #64]	@ (8006578 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006538:	4013      	ands	r3, r2
 800653a:	4a0d      	ldr	r2, [pc, #52]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800653c:	430b      	orrs	r3, r1
 800653e:	6113      	str	r3, [r2, #16]
 8006540:	e005      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006542:	4b0b      	ldr	r3, [pc, #44]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	4a0a      	ldr	r2, [pc, #40]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006548:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800654c:	6113      	str	r3, [r2, #16]
 800654e:	4b08      	ldr	r3, [pc, #32]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006550:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006556:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800655a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800655e:	4a04      	ldr	r2, [pc, #16]	@ (8006570 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006560:	430b      	orrs	r3, r1
 8006562:	6713      	str	r3, [r2, #112]	@ 0x70
 8006564:	e00e      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800656a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800656e:	e009      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006570:	58024400 	.word	0x58024400
 8006574:	58024800 	.word	0x58024800
 8006578:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800657c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006580:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658c:	f002 0301 	and.w	r3, r2, #1
 8006590:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006594:	2300      	movs	r3, #0
 8006596:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800659a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800659e:	460b      	mov	r3, r1
 80065a0:	4313      	orrs	r3, r2
 80065a2:	f000 8089 	beq.w	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80065a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065ac:	2b28      	cmp	r3, #40	@ 0x28
 80065ae:	d86b      	bhi.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80065b0:	a201      	add	r2, pc, #4	@ (adr r2, 80065b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80065b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b6:	bf00      	nop
 80065b8:	08006691 	.word	0x08006691
 80065bc:	08006689 	.word	0x08006689
 80065c0:	08006689 	.word	0x08006689
 80065c4:	08006689 	.word	0x08006689
 80065c8:	08006689 	.word	0x08006689
 80065cc:	08006689 	.word	0x08006689
 80065d0:	08006689 	.word	0x08006689
 80065d4:	08006689 	.word	0x08006689
 80065d8:	0800665d 	.word	0x0800665d
 80065dc:	08006689 	.word	0x08006689
 80065e0:	08006689 	.word	0x08006689
 80065e4:	08006689 	.word	0x08006689
 80065e8:	08006689 	.word	0x08006689
 80065ec:	08006689 	.word	0x08006689
 80065f0:	08006689 	.word	0x08006689
 80065f4:	08006689 	.word	0x08006689
 80065f8:	08006673 	.word	0x08006673
 80065fc:	08006689 	.word	0x08006689
 8006600:	08006689 	.word	0x08006689
 8006604:	08006689 	.word	0x08006689
 8006608:	08006689 	.word	0x08006689
 800660c:	08006689 	.word	0x08006689
 8006610:	08006689 	.word	0x08006689
 8006614:	08006689 	.word	0x08006689
 8006618:	08006691 	.word	0x08006691
 800661c:	08006689 	.word	0x08006689
 8006620:	08006689 	.word	0x08006689
 8006624:	08006689 	.word	0x08006689
 8006628:	08006689 	.word	0x08006689
 800662c:	08006689 	.word	0x08006689
 8006630:	08006689 	.word	0x08006689
 8006634:	08006689 	.word	0x08006689
 8006638:	08006691 	.word	0x08006691
 800663c:	08006689 	.word	0x08006689
 8006640:	08006689 	.word	0x08006689
 8006644:	08006689 	.word	0x08006689
 8006648:	08006689 	.word	0x08006689
 800664c:	08006689 	.word	0x08006689
 8006650:	08006689 	.word	0x08006689
 8006654:	08006689 	.word	0x08006689
 8006658:	08006691 	.word	0x08006691
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800665c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006660:	3308      	adds	r3, #8
 8006662:	2101      	movs	r1, #1
 8006664:	4618      	mov	r0, r3
 8006666:	f001 fe95 	bl	8008394 <RCCEx_PLL2_Config>
 800666a:	4603      	mov	r3, r0
 800666c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006670:	e00f      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006676:	3328      	adds	r3, #40	@ 0x28
 8006678:	2101      	movs	r1, #1
 800667a:	4618      	mov	r0, r3
 800667c:	f001 ff3c 	bl	80084f8 <RCCEx_PLL3_Config>
 8006680:	4603      	mov	r3, r0
 8006682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006686:	e004      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800668e:	e000      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006690:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006692:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10a      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800669a:	4bbf      	ldr	r3, [pc, #764]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800669c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800669e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80066a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066a8:	4abb      	ldr	r2, [pc, #748]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066aa:	430b      	orrs	r3, r1
 80066ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80066ae:	e003      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80066b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	f002 0302 	and.w	r3, r2, #2
 80066c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066c8:	2300      	movs	r3, #0
 80066ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80066ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80066d2:	460b      	mov	r3, r1
 80066d4:	4313      	orrs	r3, r2
 80066d6:	d041      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80066d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066de:	2b05      	cmp	r3, #5
 80066e0:	d824      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80066e2:	a201      	add	r2, pc, #4	@ (adr r2, 80066e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80066e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e8:	08006735 	.word	0x08006735
 80066ec:	08006701 	.word	0x08006701
 80066f0:	08006717 	.word	0x08006717
 80066f4:	08006735 	.word	0x08006735
 80066f8:	08006735 	.word	0x08006735
 80066fc:	08006735 	.word	0x08006735
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006704:	3308      	adds	r3, #8
 8006706:	2101      	movs	r1, #1
 8006708:	4618      	mov	r0, r3
 800670a:	f001 fe43 	bl	8008394 <RCCEx_PLL2_Config>
 800670e:	4603      	mov	r3, r0
 8006710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006714:	e00f      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671a:	3328      	adds	r3, #40	@ 0x28
 800671c:	2101      	movs	r1, #1
 800671e:	4618      	mov	r0, r3
 8006720:	f001 feea 	bl	80084f8 <RCCEx_PLL3_Config>
 8006724:	4603      	mov	r3, r0
 8006726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800672a:	e004      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006732:	e000      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10a      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800673e:	4b96      	ldr	r3, [pc, #600]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006742:	f023 0107 	bic.w	r1, r3, #7
 8006746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800674c:	4a92      	ldr	r2, [pc, #584]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800674e:	430b      	orrs	r3, r1
 8006750:	6553      	str	r3, [r2, #84]	@ 0x54
 8006752:	e003      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006754:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006758:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800675c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006764:	f002 0304 	and.w	r3, r2, #4
 8006768:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800676c:	2300      	movs	r3, #0
 800676e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006772:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006776:	460b      	mov	r3, r1
 8006778:	4313      	orrs	r3, r2
 800677a:	d044      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800677c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006780:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006784:	2b05      	cmp	r3, #5
 8006786:	d825      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006788:	a201      	add	r2, pc, #4	@ (adr r2, 8006790 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800678a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678e:	bf00      	nop
 8006790:	080067dd 	.word	0x080067dd
 8006794:	080067a9 	.word	0x080067a9
 8006798:	080067bf 	.word	0x080067bf
 800679c:	080067dd 	.word	0x080067dd
 80067a0:	080067dd 	.word	0x080067dd
 80067a4:	080067dd 	.word	0x080067dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ac:	3308      	adds	r3, #8
 80067ae:	2101      	movs	r1, #1
 80067b0:	4618      	mov	r0, r3
 80067b2:	f001 fdef 	bl	8008394 <RCCEx_PLL2_Config>
 80067b6:	4603      	mov	r3, r0
 80067b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80067bc:	e00f      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c2:	3328      	adds	r3, #40	@ 0x28
 80067c4:	2101      	movs	r1, #1
 80067c6:	4618      	mov	r0, r3
 80067c8:	f001 fe96 	bl	80084f8 <RCCEx_PLL3_Config>
 80067cc:	4603      	mov	r3, r0
 80067ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80067d2:	e004      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067da:	e000      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80067dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10b      	bne.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067e6:	4b6c      	ldr	r3, [pc, #432]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ea:	f023 0107 	bic.w	r1, r3, #7
 80067ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067f6:	4a68      	ldr	r2, [pc, #416]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067f8:	430b      	orrs	r3, r1
 80067fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80067fc:	e003      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006802:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680e:	f002 0320 	and.w	r3, r2, #32
 8006812:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006816:	2300      	movs	r3, #0
 8006818:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800681c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006820:	460b      	mov	r3, r1
 8006822:	4313      	orrs	r3, r2
 8006824:	d055      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800682e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006832:	d033      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006834:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006838:	d82c      	bhi.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800683a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800683e:	d02f      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006844:	d826      	bhi.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006846:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800684a:	d02b      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800684c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006850:	d820      	bhi.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006852:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006856:	d012      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006858:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800685c:	d81a      	bhi.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800685e:	2b00      	cmp	r3, #0
 8006860:	d022      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006862:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006866:	d115      	bne.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686c:	3308      	adds	r3, #8
 800686e:	2100      	movs	r1, #0
 8006870:	4618      	mov	r0, r3
 8006872:	f001 fd8f 	bl	8008394 <RCCEx_PLL2_Config>
 8006876:	4603      	mov	r3, r0
 8006878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800687c:	e015      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800687e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006882:	3328      	adds	r3, #40	@ 0x28
 8006884:	2102      	movs	r1, #2
 8006886:	4618      	mov	r0, r3
 8006888:	f001 fe36 	bl	80084f8 <RCCEx_PLL3_Config>
 800688c:	4603      	mov	r3, r0
 800688e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006892:	e00a      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800689a:	e006      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800689c:	bf00      	nop
 800689e:	e004      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80068a0:	bf00      	nop
 80068a2:	e002      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80068a4:	bf00      	nop
 80068a6:	e000      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80068a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10b      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068b2:	4b39      	ldr	r3, [pc, #228]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80068ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068c2:	4a35      	ldr	r2, [pc, #212]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068c4:	430b      	orrs	r3, r1
 80068c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80068c8:	e003      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80068d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068da:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80068de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068e2:	2300      	movs	r3, #0
 80068e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80068e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80068ec:	460b      	mov	r3, r1
 80068ee:	4313      	orrs	r3, r2
 80068f0:	d058      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80068f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068fa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80068fe:	d033      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006900:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006904:	d82c      	bhi.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800690a:	d02f      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800690c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006910:	d826      	bhi.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006912:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006916:	d02b      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006918:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800691c:	d820      	bhi.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800691e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006922:	d012      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006928:	d81a      	bhi.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800692a:	2b00      	cmp	r3, #0
 800692c:	d022      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800692e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006932:	d115      	bne.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006938:	3308      	adds	r3, #8
 800693a:	2100      	movs	r1, #0
 800693c:	4618      	mov	r0, r3
 800693e:	f001 fd29 	bl	8008394 <RCCEx_PLL2_Config>
 8006942:	4603      	mov	r3, r0
 8006944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006948:	e015      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800694a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694e:	3328      	adds	r3, #40	@ 0x28
 8006950:	2102      	movs	r1, #2
 8006952:	4618      	mov	r0, r3
 8006954:	f001 fdd0 	bl	80084f8 <RCCEx_PLL3_Config>
 8006958:	4603      	mov	r3, r0
 800695a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800695e:	e00a      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006966:	e006      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006968:	bf00      	nop
 800696a:	e004      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800696c:	bf00      	nop
 800696e:	e002      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006970:	bf00      	nop
 8006972:	e000      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10e      	bne.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800697e:	4b06      	ldr	r3, [pc, #24]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006982:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800698e:	4a02      	ldr	r2, [pc, #8]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006990:	430b      	orrs	r3, r1
 8006992:	6593      	str	r3, [r2, #88]	@ 0x58
 8006994:	e006      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006996:	bf00      	nop
 8006998:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800699c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80069a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ac:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80069b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069b4:	2300      	movs	r3, #0
 80069b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80069ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80069be:	460b      	mov	r3, r1
 80069c0:	4313      	orrs	r3, r2
 80069c2:	d055      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80069c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069cc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80069d0:	d033      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80069d2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80069d6:	d82c      	bhi.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069dc:	d02f      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80069de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069e2:	d826      	bhi.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069e4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80069e8:	d02b      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80069ea:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80069ee:	d820      	bhi.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069f4:	d012      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80069f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069fa:	d81a      	bhi.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d022      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a04:	d115      	bne.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f001 fcc0 	bl	8008394 <RCCEx_PLL2_Config>
 8006a14:	4603      	mov	r3, r0
 8006a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a1a:	e015      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a20:	3328      	adds	r3, #40	@ 0x28
 8006a22:	2102      	movs	r1, #2
 8006a24:	4618      	mov	r0, r3
 8006a26:	f001 fd67 	bl	80084f8 <RCCEx_PLL3_Config>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a30:	e00a      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a38:	e006      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a3a:	bf00      	nop
 8006a3c:	e004      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a3e:	bf00      	nop
 8006a40:	e002      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a42:	bf00      	nop
 8006a44:	e000      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10b      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006a50:	4ba1      	ldr	r3, [pc, #644]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a54:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a60:	4a9d      	ldr	r2, [pc, #628]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a62:	430b      	orrs	r3, r1
 8006a64:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a66:	e003      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a78:	f002 0308 	and.w	r3, r2, #8
 8006a7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a80:	2300      	movs	r3, #0
 8006a82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a86:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	d01e      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a9c:	d10c      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa2:	3328      	adds	r3, #40	@ 0x28
 8006aa4:	2102      	movs	r1, #2
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 fd26 	bl	80084f8 <RCCEx_PLL3_Config>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006ab8:	4b87      	ldr	r3, [pc, #540]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006abc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ac8:	4a83      	ldr	r2, [pc, #524]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006aca:	430b      	orrs	r3, r1
 8006acc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad6:	f002 0310 	and.w	r3, r2, #16
 8006ada:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ade:	2300      	movs	r3, #0
 8006ae0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006ae4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4313      	orrs	r3, r2
 8006aec:	d01e      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006af6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006afa:	d10c      	bne.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b00:	3328      	adds	r3, #40	@ 0x28
 8006b02:	2102      	movs	r1, #2
 8006b04:	4618      	mov	r0, r3
 8006b06:	f001 fcf7 	bl	80084f8 <RCCEx_PLL3_Config>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b16:	4b70      	ldr	r3, [pc, #448]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b1a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b26:	4a6c      	ldr	r2, [pc, #432]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b28:	430b      	orrs	r3, r1
 8006b2a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006b38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b42:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006b46:	460b      	mov	r3, r1
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	d03e      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b58:	d022      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006b5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b5e:	d81b      	bhi.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b68:	d00b      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006b6a:	e015      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b70:	3308      	adds	r3, #8
 8006b72:	2100      	movs	r1, #0
 8006b74:	4618      	mov	r0, r3
 8006b76:	f001 fc0d 	bl	8008394 <RCCEx_PLL2_Config>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b80:	e00f      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b86:	3328      	adds	r3, #40	@ 0x28
 8006b88:	2102      	movs	r1, #2
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f001 fcb4 	bl	80084f8 <RCCEx_PLL3_Config>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b96:	e004      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b9e:	e000      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10b      	bne.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006baa:	4b4b      	ldr	r3, [pc, #300]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006bba:	4a47      	ldr	r2, [pc, #284]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bbc:	430b      	orrs	r3, r1
 8006bbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bc0:	e003      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006bd6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006bd8:	2300      	movs	r3, #0
 8006bda:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006bdc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006be0:	460b      	mov	r3, r1
 8006be2:	4313      	orrs	r3, r2
 8006be4:	d03b      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006bf2:	d01f      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006bf4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006bf8:	d818      	bhi.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006bfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bfe:	d003      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006c00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c04:	d007      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006c06:	e011      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c08:	4b33      	ldr	r3, [pc, #204]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c0c:	4a32      	ldr	r2, [pc, #200]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c14:	e00f      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c1a:	3328      	adds	r3, #40	@ 0x28
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f001 fc6a 	bl	80084f8 <RCCEx_PLL3_Config>
 8006c24:	4603      	mov	r3, r0
 8006c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c2a:	e004      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c32:	e000      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10b      	bne.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c3e:	4b26      	ldr	r3, [pc, #152]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c42:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c4e:	4a22      	ldr	r2, [pc, #136]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c50:	430b      	orrs	r3, r1
 8006c52:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c54:	e003      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006c6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006c70:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006c74:	460b      	mov	r3, r1
 8006c76:	4313      	orrs	r3, r2
 8006c78:	d034      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c88:	d007      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006c8a:	e011      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c8c:	4b12      	ldr	r3, [pc, #72]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c90:	4a11      	ldr	r2, [pc, #68]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c98:	e00e      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c9e:	3308      	adds	r3, #8
 8006ca0:	2102      	movs	r1, #2
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f001 fb76 	bl	8008394 <RCCEx_PLL2_Config>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006cae:	e003      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d10d      	bne.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006cc0:	4b05      	ldr	r3, [pc, #20]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cc4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cce:	4a02      	ldr	r2, [pc, #8]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cd0:	430b      	orrs	r3, r1
 8006cd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006cd4:	e006      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006cd6:	bf00      	nop
 8006cd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ce0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006cf0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006cf6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	d00c      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d04:	3328      	adds	r3, #40	@ 0x28
 8006d06:	2102      	movs	r1, #2
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f001 fbf5 	bl	80084f8 <RCCEx_PLL3_Config>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006d26:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d28:	2300      	movs	r3, #0
 8006d2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d2c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006d30:	460b      	mov	r3, r1
 8006d32:	4313      	orrs	r3, r2
 8006d34:	d038      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d42:	d018      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006d44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d48:	d811      	bhi.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006d4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d4e:	d014      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d54:	d80b      	bhi.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d011      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d5e:	d106      	bne.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d60:	4bc3      	ldr	r3, [pc, #780]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d64:	4ac2      	ldr	r2, [pc, #776]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006d6c:	e008      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d74:	e004      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d76:	bf00      	nop
 8006d78:	e002      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d7a:	bf00      	nop
 8006d7c:	e000      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006d7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10b      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d88:	4bb9      	ldr	r3, [pc, #740]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d8c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d98:	4ab5      	ldr	r2, [pc, #724]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d9a:	430b      	orrs	r3, r1
 8006d9c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d9e:	e003      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006da4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006db4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006db6:	2300      	movs	r3, #0
 8006db8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006dba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	d009      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006dc4:	4baa      	ldr	r3, [pc, #680]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dc8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dd2:	4aa7      	ldr	r2, [pc, #668]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dd4:	430b      	orrs	r3, r1
 8006dd6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006de4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006de6:	2300      	movs	r3, #0
 8006de8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006dea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006dee:	460b      	mov	r3, r1
 8006df0:	4313      	orrs	r3, r2
 8006df2:	d00a      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006df4:	4b9e      	ldr	r3, [pc, #632]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006e04:	4a9a      	ldr	r2, [pc, #616]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e06:	430b      	orrs	r3, r1
 8006e08:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e12:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006e16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e18:	2300      	movs	r3, #0
 8006e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e1c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006e20:	460b      	mov	r3, r1
 8006e22:	4313      	orrs	r3, r2
 8006e24:	d009      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e26:	4b92      	ldr	r3, [pc, #584]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e2a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e34:	4a8e      	ldr	r2, [pc, #568]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e36:	430b      	orrs	r3, r1
 8006e38:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006e46:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e48:	2300      	movs	r3, #0
 8006e4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e4c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006e50:	460b      	mov	r3, r1
 8006e52:	4313      	orrs	r3, r2
 8006e54:	d00e      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e56:	4b86      	ldr	r3, [pc, #536]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	4a85      	ldr	r2, [pc, #532]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e5c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e60:	6113      	str	r3, [r2, #16]
 8006e62:	4b83      	ldr	r3, [pc, #524]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e64:	6919      	ldr	r1, [r3, #16]
 8006e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006e6e:	4a80      	ldr	r2, [pc, #512]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e70:	430b      	orrs	r3, r1
 8006e72:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006e80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e82:	2300      	movs	r3, #0
 8006e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e86:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	d009      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006e90:	4b77      	ldr	r3, [pc, #476]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e94:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e9e:	4a74      	ldr	r2, [pc, #464]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ea0:	430b      	orrs	r3, r1
 8006ea2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eac:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006eb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eb6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	d00a      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ec0:	4b6b      	ldr	r3, [pc, #428]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ec4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ed0:	4a67      	ldr	r2, [pc, #412]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ed2:	430b      	orrs	r3, r1
 8006ed4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ede:	2100      	movs	r1, #0
 8006ee0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ee8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006eec:	460b      	mov	r3, r1
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	d011      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef6:	3308      	adds	r3, #8
 8006ef8:	2100      	movs	r1, #0
 8006efa:	4618      	mov	r0, r3
 8006efc:	f001 fa4a 	bl	8008394 <RCCEx_PLL2_Config>
 8006f00:	4603      	mov	r3, r0
 8006f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	2100      	movs	r1, #0
 8006f20:	6239      	str	r1, [r7, #32]
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f28:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	d011      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f36:	3308      	adds	r3, #8
 8006f38:	2101      	movs	r1, #1
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f001 fa2a 	bl	8008394 <RCCEx_PLL2_Config>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	2100      	movs	r1, #0
 8006f60:	61b9      	str	r1, [r7, #24]
 8006f62:	f003 0304 	and.w	r3, r3, #4
 8006f66:	61fb      	str	r3, [r7, #28]
 8006f68:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	d011      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f76:	3308      	adds	r3, #8
 8006f78:	2102      	movs	r1, #2
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f001 fa0a 	bl	8008394 <RCCEx_PLL2_Config>
 8006f80:	4603      	mov	r3, r0
 8006f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	6139      	str	r1, [r7, #16]
 8006fa2:	f003 0308 	and.w	r3, r3, #8
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006fac:	460b      	mov	r3, r1
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	d011      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb6:	3328      	adds	r3, #40	@ 0x28
 8006fb8:	2100      	movs	r1, #0
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f001 fa9c 	bl	80084f8 <RCCEx_PLL3_Config>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fde:	2100      	movs	r1, #0
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	f003 0310 	and.w	r3, r3, #16
 8006fe6:	60fb      	str	r3, [r7, #12]
 8006fe8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006fec:	460b      	mov	r3, r1
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	d011      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff6:	3328      	adds	r3, #40	@ 0x28
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f001 fa7c 	bl	80084f8 <RCCEx_PLL3_Config>
 8007000:	4603      	mov	r3, r0
 8007002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800700e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007012:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	2100      	movs	r1, #0
 8007020:	6039      	str	r1, [r7, #0]
 8007022:	f003 0320 	and.w	r3, r3, #32
 8007026:	607b      	str	r3, [r7, #4]
 8007028:	e9d7 1200 	ldrd	r1, r2, [r7]
 800702c:	460b      	mov	r3, r1
 800702e:	4313      	orrs	r3, r2
 8007030:	d011      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007036:	3328      	adds	r3, #40	@ 0x28
 8007038:	2102      	movs	r1, #2
 800703a:	4618      	mov	r0, r3
 800703c:	f001 fa5c 	bl	80084f8 <RCCEx_PLL3_Config>
 8007040:	4603      	mov	r3, r0
 8007042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800704e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007052:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007056:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	e000      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
}
 8007064:	4618      	mov	r0, r3
 8007066:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800706a:	46bd      	mov	sp, r7
 800706c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007070:	58024400 	.word	0x58024400

08007074 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b090      	sub	sp, #64	@ 0x40
 8007078:	af00      	add	r7, sp, #0
 800707a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800707e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007082:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007086:	430b      	orrs	r3, r1
 8007088:	f040 8094 	bne.w	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800708c:	4b9e      	ldr	r3, [pc, #632]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800708e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007090:	f003 0307 	and.w	r3, r3, #7
 8007094:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007098:	2b04      	cmp	r3, #4
 800709a:	f200 8087 	bhi.w	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800709e:	a201      	add	r2, pc, #4	@ (adr r2, 80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80070a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a4:	080070b9 	.word	0x080070b9
 80070a8:	080070e1 	.word	0x080070e1
 80070ac:	08007109 	.word	0x08007109
 80070b0:	080071a5 	.word	0x080071a5
 80070b4:	08007131 	.word	0x08007131
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070b8:	4b93      	ldr	r3, [pc, #588]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070c4:	d108      	bne.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070ca:	4618      	mov	r0, r3
 80070cc:	f001 f810 	bl	80080f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070d4:	f000 bd45 	b.w	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070d8:	2300      	movs	r3, #0
 80070da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070dc:	f000 bd41 	b.w	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070e0:	4b89      	ldr	r3, [pc, #548]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070ec:	d108      	bne.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070ee:	f107 0318 	add.w	r3, r7, #24
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 fd54 	bl	8007ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070fc:	f000 bd31 	b.w	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007100:	2300      	movs	r3, #0
 8007102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007104:	f000 bd2d 	b.w	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007108:	4b7f      	ldr	r3, [pc, #508]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007110:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007114:	d108      	bne.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007116:	f107 030c 	add.w	r3, r7, #12
 800711a:	4618      	mov	r0, r3
 800711c:	f000 fe94 	bl	8007e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007124:	f000 bd1d 	b.w	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007128:	2300      	movs	r3, #0
 800712a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800712c:	f000 bd19 	b.w	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007130:	4b75      	ldr	r3, [pc, #468]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007134:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007138:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800713a:	4b73      	ldr	r3, [pc, #460]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0304 	and.w	r3, r3, #4
 8007142:	2b04      	cmp	r3, #4
 8007144:	d10c      	bne.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007148:	2b00      	cmp	r3, #0
 800714a:	d109      	bne.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800714c:	4b6e      	ldr	r3, [pc, #440]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	08db      	lsrs	r3, r3, #3
 8007152:	f003 0303 	and.w	r3, r3, #3
 8007156:	4a6d      	ldr	r2, [pc, #436]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007158:	fa22 f303 	lsr.w	r3, r2, r3
 800715c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800715e:	e01f      	b.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007160:	4b69      	ldr	r3, [pc, #420]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007168:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800716c:	d106      	bne.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800716e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007170:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007174:	d102      	bne.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007176:	4b66      	ldr	r3, [pc, #408]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007178:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800717a:	e011      	b.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800717c:	4b62      	ldr	r3, [pc, #392]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007184:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007188:	d106      	bne.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800718a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800718c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007190:	d102      	bne.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007192:	4b60      	ldr	r3, [pc, #384]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007194:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007196:	e003      	b.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007198:	2300      	movs	r3, #0
 800719a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800719c:	f000 bce1 	b.w	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071a0:	f000 bcdf 	b.w	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80071a4:	4b5c      	ldr	r3, [pc, #368]	@ (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80071a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071a8:	f000 bcdb 	b.w	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071b0:	f000 bcd7 	b.w	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80071b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071b8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80071bc:	430b      	orrs	r3, r1
 80071be:	f040 80ad 	bne.w	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80071c2:	4b51      	ldr	r3, [pc, #324]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80071c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071c6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80071ca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80071cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071d2:	d056      	beq.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80071d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071da:	f200 8090 	bhi.w	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80071de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e0:	2bc0      	cmp	r3, #192	@ 0xc0
 80071e2:	f000 8088 	beq.w	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	2bc0      	cmp	r3, #192	@ 0xc0
 80071ea:	f200 8088 	bhi.w	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80071ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f0:	2b80      	cmp	r3, #128	@ 0x80
 80071f2:	d032      	beq.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f6:	2b80      	cmp	r3, #128	@ 0x80
 80071f8:	f200 8081 	bhi.w	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80071fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007204:	2b40      	cmp	r3, #64	@ 0x40
 8007206:	d014      	beq.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007208:	e079      	b.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800720a:	4b3f      	ldr	r3, [pc, #252]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007212:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007216:	d108      	bne.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007218:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800721c:	4618      	mov	r0, r3
 800721e:	f000 ff67 	bl	80080f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007226:	f000 bc9c 	b.w	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800722a:	2300      	movs	r3, #0
 800722c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800722e:	f000 bc98 	b.w	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007232:	4b35      	ldr	r3, [pc, #212]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800723a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800723e:	d108      	bne.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007240:	f107 0318 	add.w	r3, r7, #24
 8007244:	4618      	mov	r0, r3
 8007246:	f000 fcab 	bl	8007ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800724e:	f000 bc88 	b.w	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007252:	2300      	movs	r3, #0
 8007254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007256:	f000 bc84 	b.w	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800725a:	4b2b      	ldr	r3, [pc, #172]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007262:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007266:	d108      	bne.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007268:	f107 030c 	add.w	r3, r7, #12
 800726c:	4618      	mov	r0, r3
 800726e:	f000 fdeb 	bl	8007e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007276:	f000 bc74 	b.w	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800727a:	2300      	movs	r3, #0
 800727c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800727e:	f000 bc70 	b.w	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007282:	4b21      	ldr	r3, [pc, #132]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007286:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800728a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800728c:	4b1e      	ldr	r3, [pc, #120]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b04      	cmp	r3, #4
 8007296:	d10c      	bne.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800729a:	2b00      	cmp	r3, #0
 800729c:	d109      	bne.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800729e:	4b1a      	ldr	r3, [pc, #104]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	08db      	lsrs	r3, r3, #3
 80072a4:	f003 0303 	and.w	r3, r3, #3
 80072a8:	4a18      	ldr	r2, [pc, #96]	@ (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80072aa:	fa22 f303 	lsr.w	r3, r2, r3
 80072ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072b0:	e01f      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072b2:	4b15      	ldr	r3, [pc, #84]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072be:	d106      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80072c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072c6:	d102      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80072c8:	4b11      	ldr	r3, [pc, #68]	@ (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80072ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072cc:	e011      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072da:	d106      	bne.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80072dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072e2:	d102      	bne.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80072e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80072e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072e8:	e003      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80072ea:	2300      	movs	r3, #0
 80072ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80072ee:	f000 bc38 	b.w	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072f2:	f000 bc36 	b.w	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80072f6:	4b08      	ldr	r3, [pc, #32]	@ (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80072f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072fa:	f000 bc32 	b.w	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80072fe:	2300      	movs	r3, #0
 8007300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007302:	f000 bc2e 	b.w	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007306:	bf00      	nop
 8007308:	58024400 	.word	0x58024400
 800730c:	03d09000 	.word	0x03d09000
 8007310:	003d0900 	.word	0x003d0900
 8007314:	007a1200 	.word	0x007a1200
 8007318:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800731c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007320:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007324:	430b      	orrs	r3, r1
 8007326:	f040 809c 	bne.w	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800732a:	4b9e      	ldr	r3, [pc, #632]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800732c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800732e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007332:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007336:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800733a:	d054      	beq.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800733c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007342:	f200 808b 	bhi.w	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007348:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800734c:	f000 8083 	beq.w	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007352:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007356:	f200 8081 	bhi.w	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800735a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007360:	d02f      	beq.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007364:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007368:	d878      	bhi.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800736a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736c:	2b00      	cmp	r3, #0
 800736e:	d004      	beq.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007372:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007376:	d012      	beq.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007378:	e070      	b.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800737a:	4b8a      	ldr	r3, [pc, #552]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007382:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007386:	d107      	bne.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007388:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800738c:	4618      	mov	r0, r3
 800738e:	f000 feaf 	bl	80080f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007396:	e3e4      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007398:	2300      	movs	r3, #0
 800739a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800739c:	e3e1      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800739e:	4b81      	ldr	r3, [pc, #516]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073aa:	d107      	bne.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073ac:	f107 0318 	add.w	r3, r7, #24
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 fbf5 	bl	8007ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073ba:	e3d2      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073bc:	2300      	movs	r3, #0
 80073be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073c0:	e3cf      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073c2:	4b78      	ldr	r3, [pc, #480]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073ce:	d107      	bne.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073d0:	f107 030c 	add.w	r3, r7, #12
 80073d4:	4618      	mov	r0, r3
 80073d6:	f000 fd37 	bl	8007e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073de:	e3c0      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073e4:	e3bd      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073e6:	4b6f      	ldr	r3, [pc, #444]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80073ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073f0:	4b6c      	ldr	r3, [pc, #432]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	d10c      	bne.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80073fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d109      	bne.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007402:	4b68      	ldr	r3, [pc, #416]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	08db      	lsrs	r3, r3, #3
 8007408:	f003 0303 	and.w	r3, r3, #3
 800740c:	4a66      	ldr	r2, [pc, #408]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800740e:	fa22 f303 	lsr.w	r3, r2, r3
 8007412:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007414:	e01e      	b.n	8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007416:	4b63      	ldr	r3, [pc, #396]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800741e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007422:	d106      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800742a:	d102      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800742c:	4b5f      	ldr	r3, [pc, #380]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800742e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007430:	e010      	b.n	8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007432:	4b5c      	ldr	r3, [pc, #368]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800743a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800743e:	d106      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007442:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007446:	d102      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007448:	4b59      	ldr	r3, [pc, #356]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800744a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800744c:	e002      	b.n	8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007452:	e386      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007454:	e385      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007456:	4b57      	ldr	r3, [pc, #348]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800745a:	e382      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800745c:	2300      	movs	r3, #0
 800745e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007460:	e37f      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007462:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007466:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800746a:	430b      	orrs	r3, r1
 800746c:	f040 80a7 	bne.w	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007470:	4b4c      	ldr	r3, [pc, #304]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007474:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007478:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800747a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007480:	d055      	beq.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007484:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007488:	f200 8096 	bhi.w	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800748c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007492:	f000 8084 	beq.w	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007498:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800749c:	f200 808c 	bhi.w	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80074a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074a6:	d030      	beq.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80074a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074ae:	f200 8083 	bhi.w	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80074b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d004      	beq.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80074b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074be:	d012      	beq.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80074c0:	e07a      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80074c2:	4b38      	ldr	r3, [pc, #224]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074ce:	d107      	bne.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 fe0b 	bl	80080f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074de:	e340      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074e0:	2300      	movs	r3, #0
 80074e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074e4:	e33d      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074e6:	4b2f      	ldr	r3, [pc, #188]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074f2:	d107      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074f4:	f107 0318 	add.w	r3, r7, #24
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 fb51 	bl	8007ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007502:	e32e      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007504:	2300      	movs	r3, #0
 8007506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007508:	e32b      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800750a:	4b26      	ldr	r3, [pc, #152]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007512:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007516:	d107      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007518:	f107 030c 	add.w	r3, r7, #12
 800751c:	4618      	mov	r0, r3
 800751e:	f000 fc93 	bl	8007e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007526:	e31c      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007528:	2300      	movs	r3, #0
 800752a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800752c:	e319      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800752e:	4b1d      	ldr	r3, [pc, #116]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007532:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007536:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007538:	4b1a      	ldr	r3, [pc, #104]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b04      	cmp	r3, #4
 8007542:	d10c      	bne.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007546:	2b00      	cmp	r3, #0
 8007548:	d109      	bne.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800754a:	4b16      	ldr	r3, [pc, #88]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	08db      	lsrs	r3, r3, #3
 8007550:	f003 0303 	and.w	r3, r3, #3
 8007554:	4a14      	ldr	r2, [pc, #80]	@ (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007556:	fa22 f303 	lsr.w	r3, r2, r3
 800755a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800755c:	e01e      	b.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800755e:	4b11      	ldr	r3, [pc, #68]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800756a:	d106      	bne.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800756c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800756e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007572:	d102      	bne.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007574:	4b0d      	ldr	r3, [pc, #52]	@ (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007578:	e010      	b.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800757a:	4b0a      	ldr	r3, [pc, #40]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007582:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007586:	d106      	bne.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800758a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800758e:	d102      	bne.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007590:	4b07      	ldr	r3, [pc, #28]	@ (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007594:	e002      	b.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007596:	2300      	movs	r3, #0
 8007598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800759a:	e2e2      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800759c:	e2e1      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800759e:	4b05      	ldr	r3, [pc, #20]	@ (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80075a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075a2:	e2de      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80075a4:	58024400 	.word	0x58024400
 80075a8:	03d09000 	.word	0x03d09000
 80075ac:	003d0900 	.word	0x003d0900
 80075b0:	007a1200 	.word	0x007a1200
 80075b4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075bc:	e2d1      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80075be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80075c6:	430b      	orrs	r3, r1
 80075c8:	f040 809c 	bne.w	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80075cc:	4b93      	ldr	r3, [pc, #588]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075d0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80075d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80075d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075dc:	d054      	beq.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80075de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075e4:	f200 808b 	bhi.w	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80075e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075ee:	f000 8083 	beq.w	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80075f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075f8:	f200 8081 	bhi.w	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80075fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007602:	d02f      	beq.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007606:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800760a:	d878      	bhi.n	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800760c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760e:	2b00      	cmp	r3, #0
 8007610:	d004      	beq.n	800761c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007614:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007618:	d012      	beq.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800761a:	e070      	b.n	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800761c:	4b7f      	ldr	r3, [pc, #508]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007624:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007628:	d107      	bne.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800762a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800762e:	4618      	mov	r0, r3
 8007630:	f000 fd5e 	bl	80080f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007638:	e293      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800763a:	2300      	movs	r3, #0
 800763c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800763e:	e290      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007640:	4b76      	ldr	r3, [pc, #472]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007648:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800764c:	d107      	bne.n	800765e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800764e:	f107 0318 	add.w	r3, r7, #24
 8007652:	4618      	mov	r0, r3
 8007654:	f000 faa4 	bl	8007ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800765c:	e281      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800765e:	2300      	movs	r3, #0
 8007660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007662:	e27e      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007664:	4b6d      	ldr	r3, [pc, #436]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800766c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007670:	d107      	bne.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007672:	f107 030c 	add.w	r3, r7, #12
 8007676:	4618      	mov	r0, r3
 8007678:	f000 fbe6 	bl	8007e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007680:	e26f      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007682:	2300      	movs	r3, #0
 8007684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007686:	e26c      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007688:	4b64      	ldr	r3, [pc, #400]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800768a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800768c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007690:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007692:	4b62      	ldr	r3, [pc, #392]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0304 	and.w	r3, r3, #4
 800769a:	2b04      	cmp	r3, #4
 800769c:	d10c      	bne.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800769e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d109      	bne.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076a4:	4b5d      	ldr	r3, [pc, #372]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	08db      	lsrs	r3, r3, #3
 80076aa:	f003 0303 	and.w	r3, r3, #3
 80076ae:	4a5c      	ldr	r2, [pc, #368]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80076b0:	fa22 f303 	lsr.w	r3, r2, r3
 80076b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076b6:	e01e      	b.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076b8:	4b58      	ldr	r3, [pc, #352]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076c4:	d106      	bne.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80076c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076cc:	d102      	bne.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80076ce:	4b55      	ldr	r3, [pc, #340]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80076d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076d2:	e010      	b.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076d4:	4b51      	ldr	r3, [pc, #324]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076e0:	d106      	bne.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80076e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076e8:	d102      	bne.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80076ea:	4b4f      	ldr	r3, [pc, #316]	@ (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80076ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076ee:	e002      	b.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80076f0:	2300      	movs	r3, #0
 80076f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80076f4:	e235      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80076f6:	e234      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80076f8:	4b4c      	ldr	r3, [pc, #304]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80076fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076fc:	e231      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007702:	e22e      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007708:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800770c:	430b      	orrs	r3, r1
 800770e:	f040 808f 	bne.w	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007712:	4b42      	ldr	r3, [pc, #264]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007716:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800771a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800771c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007722:	d06b      	beq.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007726:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800772a:	d874      	bhi.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800772c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007732:	d056      	beq.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007736:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800773a:	d86c      	bhi.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800773c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007742:	d03b      	beq.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007746:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800774a:	d864      	bhi.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800774c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007752:	d021      	beq.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007756:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800775a:	d85c      	bhi.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800775c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775e:	2b00      	cmp	r3, #0
 8007760:	d004      	beq.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007768:	d004      	beq.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800776a:	e054      	b.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800776c:	f7fe fa4c 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 8007770:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007772:	e1f6      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007774:	4b29      	ldr	r3, [pc, #164]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800777c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007780:	d107      	bne.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007782:	f107 0318 	add.w	r3, r7, #24
 8007786:	4618      	mov	r0, r3
 8007788:	f000 fa0a 	bl	8007ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007790:	e1e7      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007792:	2300      	movs	r3, #0
 8007794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007796:	e1e4      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007798:	4b20      	ldr	r3, [pc, #128]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077a4:	d107      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077a6:	f107 030c 	add.w	r3, r7, #12
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 fb4c 	bl	8007e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077b4:	e1d5      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077ba:	e1d2      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077bc:	4b17      	ldr	r3, [pc, #92]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b04      	cmp	r3, #4
 80077c6:	d109      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077c8:	4b14      	ldr	r3, [pc, #80]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	08db      	lsrs	r3, r3, #3
 80077ce:	f003 0303 	and.w	r3, r3, #3
 80077d2:	4a13      	ldr	r2, [pc, #76]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80077d4:	fa22 f303 	lsr.w	r3, r2, r3
 80077d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077da:	e1c2      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077dc:	2300      	movs	r3, #0
 80077de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077e0:	e1bf      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80077e2:	4b0e      	ldr	r3, [pc, #56]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ee:	d102      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80077f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80077f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077f4:	e1b5      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077f6:	2300      	movs	r3, #0
 80077f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077fa:	e1b2      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80077fc:	4b07      	ldr	r3, [pc, #28]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007804:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007808:	d102      	bne.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800780a:	4b07      	ldr	r3, [pc, #28]	@ (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800780c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800780e:	e1a8      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007810:	2300      	movs	r3, #0
 8007812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007814:	e1a5      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007816:	2300      	movs	r3, #0
 8007818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800781a:	e1a2      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800781c:	58024400 	.word	0x58024400
 8007820:	03d09000 	.word	0x03d09000
 8007824:	003d0900 	.word	0x003d0900
 8007828:	007a1200 	.word	0x007a1200
 800782c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007834:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007838:	430b      	orrs	r3, r1
 800783a:	d173      	bne.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800783c:	4b9c      	ldr	r3, [pc, #624]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800783e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007840:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007844:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007848:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800784c:	d02f      	beq.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800784e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007850:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007854:	d863      	bhi.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007858:	2b00      	cmp	r3, #0
 800785a:	d004      	beq.n	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800785c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007862:	d012      	beq.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007864:	e05b      	b.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007866:	4b92      	ldr	r3, [pc, #584]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800786e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007872:	d107      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007874:	f107 0318 	add.w	r3, r7, #24
 8007878:	4618      	mov	r0, r3
 800787a:	f000 f991 	bl	8007ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007882:	e16e      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007884:	2300      	movs	r3, #0
 8007886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007888:	e16b      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800788a:	4b89      	ldr	r3, [pc, #548]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007896:	d107      	bne.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007898:	f107 030c 	add.w	r3, r7, #12
 800789c:	4618      	mov	r0, r3
 800789e:	f000 fad3 	bl	8007e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078a6:	e15c      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078a8:	2300      	movs	r3, #0
 80078aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078ac:	e159      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078ae:	4b80      	ldr	r3, [pc, #512]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078b6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078b8:	4b7d      	ldr	r3, [pc, #500]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b04      	cmp	r3, #4
 80078c2:	d10c      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80078c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d109      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078ca:	4b79      	ldr	r3, [pc, #484]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	08db      	lsrs	r3, r3, #3
 80078d0:	f003 0303 	and.w	r3, r3, #3
 80078d4:	4a77      	ldr	r2, [pc, #476]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80078d6:	fa22 f303 	lsr.w	r3, r2, r3
 80078da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078dc:	e01e      	b.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078de:	4b74      	ldr	r3, [pc, #464]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078ea:	d106      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80078ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078f2:	d102      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078f4:	4b70      	ldr	r3, [pc, #448]	@ (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80078f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078f8:	e010      	b.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078fa:	4b6d      	ldr	r3, [pc, #436]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007902:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007906:	d106      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800790a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800790e:	d102      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007910:	4b6a      	ldr	r3, [pc, #424]	@ (8007abc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007914:	e002      	b.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007916:	2300      	movs	r3, #0
 8007918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800791a:	e122      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800791c:	e121      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007922:	e11e      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007928:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800792c:	430b      	orrs	r3, r1
 800792e:	d133      	bne.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007930:	4b5f      	ldr	r3, [pc, #380]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007934:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007938:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800793a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793c:	2b00      	cmp	r3, #0
 800793e:	d004      	beq.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007942:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007946:	d012      	beq.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007948:	e023      	b.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800794a:	4b59      	ldr	r3, [pc, #356]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007952:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007956:	d107      	bne.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007958:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800795c:	4618      	mov	r0, r3
 800795e:	f000 fbc7 	bl	80080f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007966:	e0fc      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007968:	2300      	movs	r3, #0
 800796a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800796c:	e0f9      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800796e:	4b50      	ldr	r3, [pc, #320]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007976:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800797a:	d107      	bne.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800797c:	f107 0318 	add.w	r3, r7, #24
 8007980:	4618      	mov	r0, r3
 8007982:	f000 f90d 	bl	8007ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800798a:	e0ea      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800798c:	2300      	movs	r3, #0
 800798e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007990:	e0e7      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007992:	2300      	movs	r3, #0
 8007994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007996:	e0e4      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800799c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80079a0:	430b      	orrs	r3, r1
 80079a2:	f040 808d 	bne.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80079a6:	4b42      	ldr	r3, [pc, #264]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80079a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079aa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80079ae:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80079b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079b6:	d06b      	beq.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80079b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079be:	d874      	bhi.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80079c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079c6:	d056      	beq.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80079c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ce:	d86c      	bhi.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80079d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079d6:	d03b      	beq.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80079d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079de:	d864      	bhi.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80079e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079e6:	d021      	beq.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80079e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079ee:	d85c      	bhi.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80079f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d004      	beq.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80079f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079fc:	d004      	beq.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80079fe:	e054      	b.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007a00:	f000 f8b8 	bl	8007b74 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a04:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a06:	e0ac      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a08:	4b29      	ldr	r3, [pc, #164]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a14:	d107      	bne.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a16:	f107 0318 	add.w	r3, r7, #24
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 f8c0 	bl	8007ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a24:	e09d      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a26:	2300      	movs	r3, #0
 8007a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a2a:	e09a      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a2c:	4b20      	ldr	r3, [pc, #128]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a38:	d107      	bne.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a3a:	f107 030c 	add.w	r3, r7, #12
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 fa02 	bl	8007e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a48:	e08b      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a4e:	e088      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a50:	4b17      	ldr	r3, [pc, #92]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0304 	and.w	r3, r3, #4
 8007a58:	2b04      	cmp	r3, #4
 8007a5a:	d109      	bne.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a5c:	4b14      	ldr	r3, [pc, #80]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	08db      	lsrs	r3, r3, #3
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	4a13      	ldr	r2, [pc, #76]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007a68:	fa22 f303 	lsr.w	r3, r2, r3
 8007a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a6e:	e078      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a70:	2300      	movs	r3, #0
 8007a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a74:	e075      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007a76:	4b0e      	ldr	r3, [pc, #56]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a82:	d102      	bne.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007a84:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a88:	e06b      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a8e:	e068      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007a90:	4b07      	ldr	r3, [pc, #28]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a9c:	d102      	bne.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007a9e:	4b07      	ldr	r3, [pc, #28]	@ (8007abc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007aa2:	e05e      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aa8:	e05b      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aae:	e058      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ab0:	58024400 	.word	0x58024400
 8007ab4:	03d09000 	.word	0x03d09000
 8007ab8:	003d0900 	.word	0x003d0900
 8007abc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ac4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	d148      	bne.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007acc:	4b27      	ldr	r3, [pc, #156]	@ (8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ad0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ad4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007adc:	d02a      	beq.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ae4:	d838      	bhi.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d004      	beq.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007af2:	d00d      	beq.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007af4:	e030      	b.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007af6:	4b1d      	ldr	r3, [pc, #116]	@ (8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007afe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b02:	d102      	bne.n	8007b0a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007b04:	4b1a      	ldr	r3, [pc, #104]	@ (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b08:	e02b      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b0e:	e028      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b10:	4b16      	ldr	r3, [pc, #88]	@ (8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b1c:	d107      	bne.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 fae4 	bl	80080f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b2c:	e019      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b32:	e016      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b34:	4b0d      	ldr	r3, [pc, #52]	@ (8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b40:	d107      	bne.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b42:	f107 0318 	add.w	r3, r7, #24
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 f82a 	bl	8007ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b50:	e007      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b52:	2300      	movs	r3, #0
 8007b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b56:	e004      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b5c:	e001      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3740      	adds	r7, #64	@ 0x40
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	58024400 	.word	0x58024400
 8007b70:	007a1200 	.word	0x007a1200

08007b74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007b78:	f7fe f816 	bl	8005ba8 <HAL_RCC_GetHCLKFreq>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	4b06      	ldr	r3, [pc, #24]	@ (8007b98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	091b      	lsrs	r3, r3, #4
 8007b84:	f003 0307 	and.w	r3, r3, #7
 8007b88:	4904      	ldr	r1, [pc, #16]	@ (8007b9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007b8a:	5ccb      	ldrb	r3, [r1, r3]
 8007b8c:	f003 031f 	and.w	r3, r3, #31
 8007b90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	58024400 	.word	0x58024400
 8007b9c:	08009b9c 	.word	0x08009b9c

08007ba0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b089      	sub	sp, #36	@ 0x24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ba8:	4ba1      	ldr	r3, [pc, #644]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bac:	f003 0303 	and.w	r3, r3, #3
 8007bb0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007bb2:	4b9f      	ldr	r3, [pc, #636]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb6:	0b1b      	lsrs	r3, r3, #12
 8007bb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bbc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007bbe:	4b9c      	ldr	r3, [pc, #624]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc2:	091b      	lsrs	r3, r3, #4
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007bca:	4b99      	ldr	r3, [pc, #612]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bce:	08db      	lsrs	r3, r3, #3
 8007bd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	fb02 f303 	mul.w	r3, r2, r3
 8007bda:	ee07 3a90 	vmov	s15, r3
 8007bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f000 8111 	beq.w	8007e10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	f000 8083 	beq.w	8007cfc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	f200 80a1 	bhi.w	8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d056      	beq.n	8007cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007c0a:	e099      	b.n	8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c0c:	4b88      	ldr	r3, [pc, #544]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0320 	and.w	r3, r3, #32
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d02d      	beq.n	8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c18:	4b85      	ldr	r3, [pc, #532]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	08db      	lsrs	r3, r3, #3
 8007c1e:	f003 0303 	and.w	r3, r3, #3
 8007c22:	4a84      	ldr	r2, [pc, #528]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007c24:	fa22 f303 	lsr.w	r3, r2, r3
 8007c28:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	ee07 3a90 	vmov	s15, r3
 8007c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	ee07 3a90 	vmov	s15, r3
 8007c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c42:	4b7b      	ldr	r3, [pc, #492]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c4a:	ee07 3a90 	vmov	s15, r3
 8007c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c56:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c72:	e087      	b.n	8007d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	ee07 3a90 	vmov	s15, r3
 8007c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007e3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c86:	4b6a      	ldr	r3, [pc, #424]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c8e:	ee07 3a90 	vmov	s15, r3
 8007c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c9a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cb6:	e065      	b.n	8007d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	ee07 3a90 	vmov	s15, r3
 8007cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cc2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cca:	4b59      	ldr	r3, [pc, #356]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cd2:	ee07 3a90 	vmov	s15, r3
 8007cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cde:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cfa:	e043      	b.n	8007d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	ee07 3a90 	vmov	s15, r3
 8007d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d06:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d0e:	4b48      	ldr	r3, [pc, #288]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d16:	ee07 3a90 	vmov	s15, r3
 8007d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d22:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d3e:	e021      	b.n	8007d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	ee07 3a90 	vmov	s15, r3
 8007d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d4a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d52:	4b37      	ldr	r3, [pc, #220]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d5a:	ee07 3a90 	vmov	s15, r3
 8007d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d66:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007d84:	4b2a      	ldr	r3, [pc, #168]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d88:	0a5b      	lsrs	r3, r3, #9
 8007d8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007daa:	ee17 2a90 	vmov	r2, s15
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007db2:	4b1f      	ldr	r3, [pc, #124]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db6:	0c1b      	lsrs	r3, r3, #16
 8007db8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dbc:	ee07 3a90 	vmov	s15, r3
 8007dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dd8:	ee17 2a90 	vmov	r2, s15
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007de0:	4b13      	ldr	r3, [pc, #76]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de4:	0e1b      	lsrs	r3, r3, #24
 8007de6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dea:	ee07 3a90 	vmov	s15, r3
 8007dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007df6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e06:	ee17 2a90 	vmov	r2, s15
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007e0e:	e008      	b.n	8007e22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	609a      	str	r2, [r3, #8]
}
 8007e22:	bf00      	nop
 8007e24:	3724      	adds	r7, #36	@ 0x24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	58024400 	.word	0x58024400
 8007e34:	03d09000 	.word	0x03d09000
 8007e38:	46000000 	.word	0x46000000
 8007e3c:	4c742400 	.word	0x4c742400
 8007e40:	4a742400 	.word	0x4a742400
 8007e44:	4af42400 	.word	0x4af42400

08007e48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b089      	sub	sp, #36	@ 0x24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e50:	4ba1      	ldr	r3, [pc, #644]	@ (80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e54:	f003 0303 	and.w	r3, r3, #3
 8007e58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007e5a:	4b9f      	ldr	r3, [pc, #636]	@ (80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e5e:	0d1b      	lsrs	r3, r3, #20
 8007e60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007e66:	4b9c      	ldr	r3, [pc, #624]	@ (80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6a:	0a1b      	lsrs	r3, r3, #8
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007e72:	4b99      	ldr	r3, [pc, #612]	@ (80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e76:	08db      	lsrs	r3, r3, #3
 8007e78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	fb02 f303 	mul.w	r3, r2, r3
 8007e82:	ee07 3a90 	vmov	s15, r3
 8007e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 8111 	beq.w	80080b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	f000 8083 	beq.w	8007fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	f200 80a1 	bhi.w	8007fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d003      	beq.n	8007eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d056      	beq.n	8007f60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007eb2:	e099      	b.n	8007fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eb4:	4b88      	ldr	r3, [pc, #544]	@ (80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0320 	and.w	r3, r3, #32
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d02d      	beq.n	8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ec0:	4b85      	ldr	r3, [pc, #532]	@ (80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	08db      	lsrs	r3, r3, #3
 8007ec6:	f003 0303 	and.w	r3, r3, #3
 8007eca:	4a84      	ldr	r2, [pc, #528]	@ (80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	ee07 3a90 	vmov	s15, r3
 8007ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	ee07 3a90 	vmov	s15, r3
 8007ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eea:	4b7b      	ldr	r3, [pc, #492]	@ (80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef2:	ee07 3a90 	vmov	s15, r3
 8007ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007efe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f1a:	e087      	b.n	800802c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	ee07 3a90 	vmov	s15, r3
 8007f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f26:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80080e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f2e:	4b6a      	ldr	r3, [pc, #424]	@ (80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f36:	ee07 3a90 	vmov	s15, r3
 8007f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f42:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f5e:	e065      	b.n	800802c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	ee07 3a90 	vmov	s15, r3
 8007f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80080e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f72:	4b59      	ldr	r3, [pc, #356]	@ (80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f7a:	ee07 3a90 	vmov	s15, r3
 8007f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f86:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fa2:	e043      	b.n	800802c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	ee07 3a90 	vmov	s15, r3
 8007faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80080ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fb6:	4b48      	ldr	r3, [pc, #288]	@ (80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fbe:	ee07 3a90 	vmov	s15, r3
 8007fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fe6:	e021      	b.n	800802c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	ee07 3a90 	vmov	s15, r3
 8007fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80080e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ffa:	4b37      	ldr	r3, [pc, #220]	@ (80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008002:	ee07 3a90 	vmov	s15, r3
 8008006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800800a:	ed97 6a03 	vldr	s12, [r7, #12]
 800800e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80080e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800801a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800801e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008026:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800802a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800802c:	4b2a      	ldr	r3, [pc, #168]	@ (80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800802e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008030:	0a5b      	lsrs	r3, r3, #9
 8008032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008036:	ee07 3a90 	vmov	s15, r3
 800803a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800803e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008042:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008046:	edd7 6a07 	vldr	s13, [r7, #28]
 800804a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800804e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008052:	ee17 2a90 	vmov	r2, s15
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800805a:	4b1f      	ldr	r3, [pc, #124]	@ (80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800805c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800805e:	0c1b      	lsrs	r3, r3, #16
 8008060:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008064:	ee07 3a90 	vmov	s15, r3
 8008068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800806c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008070:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008074:	edd7 6a07 	vldr	s13, [r7, #28]
 8008078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800807c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008080:	ee17 2a90 	vmov	r2, s15
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008088:	4b13      	ldr	r3, [pc, #76]	@ (80080d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800808a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800808c:	0e1b      	lsrs	r3, r3, #24
 800808e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008092:	ee07 3a90 	vmov	s15, r3
 8008096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800809a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800809e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80080a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080ae:	ee17 2a90 	vmov	r2, s15
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80080b6:	e008      	b.n	80080ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	609a      	str	r2, [r3, #8]
}
 80080ca:	bf00      	nop
 80080cc:	3724      	adds	r7, #36	@ 0x24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	58024400 	.word	0x58024400
 80080dc:	03d09000 	.word	0x03d09000
 80080e0:	46000000 	.word	0x46000000
 80080e4:	4c742400 	.word	0x4c742400
 80080e8:	4a742400 	.word	0x4a742400
 80080ec:	4af42400 	.word	0x4af42400

080080f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b089      	sub	sp, #36	@ 0x24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080f8:	4ba0      	ldr	r3, [pc, #640]	@ (800837c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080fc:	f003 0303 	and.w	r3, r3, #3
 8008100:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008102:	4b9e      	ldr	r3, [pc, #632]	@ (800837c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008106:	091b      	lsrs	r3, r3, #4
 8008108:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800810c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800810e:	4b9b      	ldr	r3, [pc, #620]	@ (800837c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008118:	4b98      	ldr	r3, [pc, #608]	@ (800837c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800811a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800811c:	08db      	lsrs	r3, r3, #3
 800811e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	fb02 f303 	mul.w	r3, r2, r3
 8008128:	ee07 3a90 	vmov	s15, r3
 800812c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008130:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	2b00      	cmp	r3, #0
 8008138:	f000 8111 	beq.w	800835e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	2b02      	cmp	r3, #2
 8008140:	f000 8083 	beq.w	800824a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	2b02      	cmp	r3, #2
 8008148:	f200 80a1 	bhi.w	800828e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d056      	beq.n	8008206 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008158:	e099      	b.n	800828e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800815a:	4b88      	ldr	r3, [pc, #544]	@ (800837c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0320 	and.w	r3, r3, #32
 8008162:	2b00      	cmp	r3, #0
 8008164:	d02d      	beq.n	80081c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008166:	4b85      	ldr	r3, [pc, #532]	@ (800837c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	08db      	lsrs	r3, r3, #3
 800816c:	f003 0303 	and.w	r3, r3, #3
 8008170:	4a83      	ldr	r2, [pc, #524]	@ (8008380 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008172:	fa22 f303 	lsr.w	r3, r2, r3
 8008176:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	ee07 3a90 	vmov	s15, r3
 800817e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	ee07 3a90 	vmov	s15, r3
 8008188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800818c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008190:	4b7a      	ldr	r3, [pc, #488]	@ (800837c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008198:	ee07 3a90 	vmov	s15, r3
 800819c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80081a4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80081a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081bc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80081c0:	e087      	b.n	80082d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	ee07 3a90 	vmov	s15, r3
 80081c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081cc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008388 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80081d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081d4:	4b69      	ldr	r3, [pc, #420]	@ (800837c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081dc:	ee07 3a90 	vmov	s15, r3
 80081e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80081e8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80081ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008200:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008204:	e065      	b.n	80082d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	ee07 3a90 	vmov	s15, r3
 800820c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008210:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800838c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008218:	4b58      	ldr	r3, [pc, #352]	@ (800837c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800821a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800821c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008220:	ee07 3a90 	vmov	s15, r3
 8008224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008228:	ed97 6a03 	vldr	s12, [r7, #12]
 800822c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008230:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008238:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800823c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008244:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008248:	e043      	b.n	80082d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	ee07 3a90 	vmov	s15, r3
 8008250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008254:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008390 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800825c:	4b47      	ldr	r3, [pc, #284]	@ (800837c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800825e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008264:	ee07 3a90 	vmov	s15, r3
 8008268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800826c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008270:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008274:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008278:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800827c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008288:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800828c:	e021      	b.n	80082d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	ee07 3a90 	vmov	s15, r3
 8008294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008298:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008388 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800829c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082a0:	4b36      	ldr	r3, [pc, #216]	@ (800837c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082a8:	ee07 3a90 	vmov	s15, r3
 80082ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80082b4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80082b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80082d2:	4b2a      	ldr	r3, [pc, #168]	@ (800837c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d6:	0a5b      	lsrs	r3, r3, #9
 80082d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082dc:	ee07 3a90 	vmov	s15, r3
 80082e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80082f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082f8:	ee17 2a90 	vmov	r2, s15
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008300:	4b1e      	ldr	r3, [pc, #120]	@ (800837c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008304:	0c1b      	lsrs	r3, r3, #16
 8008306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800830a:	ee07 3a90 	vmov	s15, r3
 800830e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008312:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008316:	ee37 7a87 	vadd.f32	s14, s15, s14
 800831a:	edd7 6a07 	vldr	s13, [r7, #28]
 800831e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008326:	ee17 2a90 	vmov	r2, s15
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800832e:	4b13      	ldr	r3, [pc, #76]	@ (800837c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008332:	0e1b      	lsrs	r3, r3, #24
 8008334:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008338:	ee07 3a90 	vmov	s15, r3
 800833c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008340:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008344:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008348:	edd7 6a07 	vldr	s13, [r7, #28]
 800834c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008354:	ee17 2a90 	vmov	r2, s15
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800835c:	e008      	b.n	8008370 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	609a      	str	r2, [r3, #8]
}
 8008370:	bf00      	nop
 8008372:	3724      	adds	r7, #36	@ 0x24
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	58024400 	.word	0x58024400
 8008380:	03d09000 	.word	0x03d09000
 8008384:	46000000 	.word	0x46000000
 8008388:	4c742400 	.word	0x4c742400
 800838c:	4a742400 	.word	0x4a742400
 8008390:	4af42400 	.word	0x4af42400

08008394 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80083a2:	4b53      	ldr	r3, [pc, #332]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 80083a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a6:	f003 0303 	and.w	r3, r3, #3
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	d101      	bne.n	80083b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e099      	b.n	80084e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80083b2:	4b4f      	ldr	r3, [pc, #316]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a4e      	ldr	r2, [pc, #312]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 80083b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80083bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083be:	f7f9 f9f5 	bl	80017ac <HAL_GetTick>
 80083c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80083c4:	e008      	b.n	80083d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80083c6:	f7f9 f9f1 	bl	80017ac <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d901      	bls.n	80083d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e086      	b.n	80084e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80083d8:	4b45      	ldr	r3, [pc, #276]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1f0      	bne.n	80083c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80083e4:	4b42      	ldr	r3, [pc, #264]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 80083e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	031b      	lsls	r3, r3, #12
 80083f2:	493f      	ldr	r1, [pc, #252]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 80083f4:	4313      	orrs	r3, r2
 80083f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	3b01      	subs	r3, #1
 80083fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	3b01      	subs	r3, #1
 8008408:	025b      	lsls	r3, r3, #9
 800840a:	b29b      	uxth	r3, r3
 800840c:	431a      	orrs	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	3b01      	subs	r3, #1
 8008414:	041b      	lsls	r3, r3, #16
 8008416:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800841a:	431a      	orrs	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	3b01      	subs	r3, #1
 8008422:	061b      	lsls	r3, r3, #24
 8008424:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008428:	4931      	ldr	r1, [pc, #196]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 800842a:	4313      	orrs	r3, r2
 800842c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800842e:	4b30      	ldr	r3, [pc, #192]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 8008430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008432:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	492d      	ldr	r1, [pc, #180]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 800843c:	4313      	orrs	r3, r2
 800843e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008440:	4b2b      	ldr	r3, [pc, #172]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 8008442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008444:	f023 0220 	bic.w	r2, r3, #32
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	4928      	ldr	r1, [pc, #160]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 800844e:	4313      	orrs	r3, r2
 8008450:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008452:	4b27      	ldr	r3, [pc, #156]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 8008454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008456:	4a26      	ldr	r2, [pc, #152]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 8008458:	f023 0310 	bic.w	r3, r3, #16
 800845c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800845e:	4b24      	ldr	r3, [pc, #144]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 8008460:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008462:	4b24      	ldr	r3, [pc, #144]	@ (80084f4 <RCCEx_PLL2_Config+0x160>)
 8008464:	4013      	ands	r3, r2
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	69d2      	ldr	r2, [r2, #28]
 800846a:	00d2      	lsls	r2, r2, #3
 800846c:	4920      	ldr	r1, [pc, #128]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 800846e:	4313      	orrs	r3, r2
 8008470:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008472:	4b1f      	ldr	r3, [pc, #124]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 8008474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008476:	4a1e      	ldr	r2, [pc, #120]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 8008478:	f043 0310 	orr.w	r3, r3, #16
 800847c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d106      	bne.n	8008492 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008484:	4b1a      	ldr	r3, [pc, #104]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 8008486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008488:	4a19      	ldr	r2, [pc, #100]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 800848a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800848e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008490:	e00f      	b.n	80084b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d106      	bne.n	80084a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008498:	4b15      	ldr	r3, [pc, #84]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 800849a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800849c:	4a14      	ldr	r2, [pc, #80]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 800849e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80084a4:	e005      	b.n	80084b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80084a6:	4b12      	ldr	r3, [pc, #72]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 80084a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084aa:	4a11      	ldr	r2, [pc, #68]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 80084ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80084b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80084b2:	4b0f      	ldr	r3, [pc, #60]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a0e      	ldr	r2, [pc, #56]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 80084b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80084bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084be:	f7f9 f975 	bl	80017ac <HAL_GetTick>
 80084c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80084c4:	e008      	b.n	80084d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80084c6:	f7f9 f971 	bl	80017ac <HAL_GetTick>
 80084ca:	4602      	mov	r2, r0
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	1ad3      	subs	r3, r2, r3
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d901      	bls.n	80084d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80084d4:	2303      	movs	r3, #3
 80084d6:	e006      	b.n	80084e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80084d8:	4b05      	ldr	r3, [pc, #20]	@ (80084f0 <RCCEx_PLL2_Config+0x15c>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d0f0      	beq.n	80084c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	58024400 	.word	0x58024400
 80084f4:	ffff0007 	.word	0xffff0007

080084f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008506:	4b53      	ldr	r3, [pc, #332]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 8008508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800850a:	f003 0303 	and.w	r3, r3, #3
 800850e:	2b03      	cmp	r3, #3
 8008510:	d101      	bne.n	8008516 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e099      	b.n	800864a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008516:	4b4f      	ldr	r3, [pc, #316]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a4e      	ldr	r2, [pc, #312]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 800851c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008522:	f7f9 f943 	bl	80017ac <HAL_GetTick>
 8008526:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008528:	e008      	b.n	800853c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800852a:	f7f9 f93f 	bl	80017ac <HAL_GetTick>
 800852e:	4602      	mov	r2, r0
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	2b02      	cmp	r3, #2
 8008536:	d901      	bls.n	800853c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	e086      	b.n	800864a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800853c:	4b45      	ldr	r3, [pc, #276]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1f0      	bne.n	800852a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008548:	4b42      	ldr	r3, [pc, #264]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 800854a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800854c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	051b      	lsls	r3, r3, #20
 8008556:	493f      	ldr	r1, [pc, #252]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 8008558:	4313      	orrs	r3, r2
 800855a:	628b      	str	r3, [r1, #40]	@ 0x28
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	3b01      	subs	r3, #1
 8008562:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	3b01      	subs	r3, #1
 800856c:	025b      	lsls	r3, r3, #9
 800856e:	b29b      	uxth	r3, r3
 8008570:	431a      	orrs	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	3b01      	subs	r3, #1
 8008578:	041b      	lsls	r3, r3, #16
 800857a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800857e:	431a      	orrs	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	3b01      	subs	r3, #1
 8008586:	061b      	lsls	r3, r3, #24
 8008588:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800858c:	4931      	ldr	r1, [pc, #196]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 800858e:	4313      	orrs	r3, r2
 8008590:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008592:	4b30      	ldr	r3, [pc, #192]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 8008594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008596:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	492d      	ldr	r1, [pc, #180]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80085a4:	4b2b      	ldr	r3, [pc, #172]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 80085a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	4928      	ldr	r1, [pc, #160]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80085b6:	4b27      	ldr	r3, [pc, #156]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 80085b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ba:	4a26      	ldr	r2, [pc, #152]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 80085bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80085c2:	4b24      	ldr	r3, [pc, #144]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 80085c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085c6:	4b24      	ldr	r3, [pc, #144]	@ (8008658 <RCCEx_PLL3_Config+0x160>)
 80085c8:	4013      	ands	r3, r2
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	69d2      	ldr	r2, [r2, #28]
 80085ce:	00d2      	lsls	r2, r2, #3
 80085d0:	4920      	ldr	r1, [pc, #128]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 80085d2:	4313      	orrs	r3, r2
 80085d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80085d6:	4b1f      	ldr	r3, [pc, #124]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 80085d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085da:	4a1e      	ldr	r2, [pc, #120]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 80085dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d106      	bne.n	80085f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80085e8:	4b1a      	ldr	r3, [pc, #104]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 80085ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ec:	4a19      	ldr	r2, [pc, #100]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 80085ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80085f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80085f4:	e00f      	b.n	8008616 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d106      	bne.n	800860a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80085fc:	4b15      	ldr	r3, [pc, #84]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 80085fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008600:	4a14      	ldr	r2, [pc, #80]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 8008602:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008606:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008608:	e005      	b.n	8008616 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800860a:	4b12      	ldr	r3, [pc, #72]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 800860c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860e:	4a11      	ldr	r2, [pc, #68]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 8008610:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008614:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008616:	4b0f      	ldr	r3, [pc, #60]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a0e      	ldr	r2, [pc, #56]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 800861c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008622:	f7f9 f8c3 	bl	80017ac <HAL_GetTick>
 8008626:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008628:	e008      	b.n	800863c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800862a:	f7f9 f8bf 	bl	80017ac <HAL_GetTick>
 800862e:	4602      	mov	r2, r0
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	2b02      	cmp	r3, #2
 8008636:	d901      	bls.n	800863c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e006      	b.n	800864a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800863c:	4b05      	ldr	r3, [pc, #20]	@ (8008654 <RCCEx_PLL3_Config+0x15c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d0f0      	beq.n	800862a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008648:	7bfb      	ldrb	r3, [r7, #15]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	58024400 	.word	0x58024400
 8008658:	ffff0007 	.word	0xffff0007

0800865c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e049      	b.n	8008702 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d106      	bne.n	8008688 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7f8 fe4a 	bl	800131c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2202      	movs	r2, #2
 800868c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	3304      	adds	r3, #4
 8008698:	4619      	mov	r1, r3
 800869a:	4610      	mov	r0, r2
 800869c:	f000 f836 	bl	800870c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
	...

0800870c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a46      	ldr	r2, [pc, #280]	@ (8008838 <TIM_Base_SetConfig+0x12c>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d013      	beq.n	800874c <TIM_Base_SetConfig+0x40>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800872a:	d00f      	beq.n	800874c <TIM_Base_SetConfig+0x40>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a43      	ldr	r2, [pc, #268]	@ (800883c <TIM_Base_SetConfig+0x130>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d00b      	beq.n	800874c <TIM_Base_SetConfig+0x40>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a42      	ldr	r2, [pc, #264]	@ (8008840 <TIM_Base_SetConfig+0x134>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d007      	beq.n	800874c <TIM_Base_SetConfig+0x40>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a41      	ldr	r2, [pc, #260]	@ (8008844 <TIM_Base_SetConfig+0x138>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d003      	beq.n	800874c <TIM_Base_SetConfig+0x40>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a40      	ldr	r2, [pc, #256]	@ (8008848 <TIM_Base_SetConfig+0x13c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d108      	bne.n	800875e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	4313      	orrs	r3, r2
 800875c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a35      	ldr	r2, [pc, #212]	@ (8008838 <TIM_Base_SetConfig+0x12c>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d01f      	beq.n	80087a6 <TIM_Base_SetConfig+0x9a>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800876c:	d01b      	beq.n	80087a6 <TIM_Base_SetConfig+0x9a>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a32      	ldr	r2, [pc, #200]	@ (800883c <TIM_Base_SetConfig+0x130>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d017      	beq.n	80087a6 <TIM_Base_SetConfig+0x9a>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a31      	ldr	r2, [pc, #196]	@ (8008840 <TIM_Base_SetConfig+0x134>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d013      	beq.n	80087a6 <TIM_Base_SetConfig+0x9a>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a30      	ldr	r2, [pc, #192]	@ (8008844 <TIM_Base_SetConfig+0x138>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d00f      	beq.n	80087a6 <TIM_Base_SetConfig+0x9a>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a2f      	ldr	r2, [pc, #188]	@ (8008848 <TIM_Base_SetConfig+0x13c>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d00b      	beq.n	80087a6 <TIM_Base_SetConfig+0x9a>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a2e      	ldr	r2, [pc, #184]	@ (800884c <TIM_Base_SetConfig+0x140>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d007      	beq.n	80087a6 <TIM_Base_SetConfig+0x9a>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a2d      	ldr	r2, [pc, #180]	@ (8008850 <TIM_Base_SetConfig+0x144>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d003      	beq.n	80087a6 <TIM_Base_SetConfig+0x9a>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a2c      	ldr	r2, [pc, #176]	@ (8008854 <TIM_Base_SetConfig+0x148>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d108      	bne.n	80087b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	689a      	ldr	r2, [r3, #8]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a16      	ldr	r2, [pc, #88]	@ (8008838 <TIM_Base_SetConfig+0x12c>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d00f      	beq.n	8008804 <TIM_Base_SetConfig+0xf8>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a18      	ldr	r2, [pc, #96]	@ (8008848 <TIM_Base_SetConfig+0x13c>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d00b      	beq.n	8008804 <TIM_Base_SetConfig+0xf8>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a17      	ldr	r2, [pc, #92]	@ (800884c <TIM_Base_SetConfig+0x140>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d007      	beq.n	8008804 <TIM_Base_SetConfig+0xf8>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a16      	ldr	r2, [pc, #88]	@ (8008850 <TIM_Base_SetConfig+0x144>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d003      	beq.n	8008804 <TIM_Base_SetConfig+0xf8>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a15      	ldr	r2, [pc, #84]	@ (8008854 <TIM_Base_SetConfig+0x148>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d103      	bne.n	800880c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	691a      	ldr	r2, [r3, #16]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	2b01      	cmp	r3, #1
 800881c:	d105      	bne.n	800882a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	f023 0201 	bic.w	r2, r3, #1
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	611a      	str	r2, [r3, #16]
  }
}
 800882a:	bf00      	nop
 800882c:	3714      	adds	r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	40010000 	.word	0x40010000
 800883c:	40000400 	.word	0x40000400
 8008840:	40000800 	.word	0x40000800
 8008844:	40000c00 	.word	0x40000c00
 8008848:	40010400 	.word	0x40010400
 800884c:	40014000 	.word	0x40014000
 8008850:	40014400 	.word	0x40014400
 8008854:	40014800 	.word	0x40014800

08008858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008868:	2b01      	cmp	r3, #1
 800886a:	d101      	bne.n	8008870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800886c:	2302      	movs	r3, #2
 800886e:	e06d      	b.n	800894c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2202      	movs	r2, #2
 800887c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a30      	ldr	r2, [pc, #192]	@ (8008958 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d004      	beq.n	80088a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a2f      	ldr	r2, [pc, #188]	@ (800895c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d108      	bne.n	80088b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80088aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a20      	ldr	r2, [pc, #128]	@ (8008958 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d022      	beq.n	8008920 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088e2:	d01d      	beq.n	8008920 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008960 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d018      	beq.n	8008920 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a1c      	ldr	r2, [pc, #112]	@ (8008964 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d013      	beq.n	8008920 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a1a      	ldr	r2, [pc, #104]	@ (8008968 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d00e      	beq.n	8008920 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a15      	ldr	r2, [pc, #84]	@ (800895c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d009      	beq.n	8008920 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a16      	ldr	r2, [pc, #88]	@ (800896c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d004      	beq.n	8008920 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a15      	ldr	r2, [pc, #84]	@ (8008970 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d10c      	bne.n	800893a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008926:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	4313      	orrs	r3, r2
 8008930:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	40010000 	.word	0x40010000
 800895c:	40010400 	.word	0x40010400
 8008960:	40000400 	.word	0x40000400
 8008964:	40000800 	.word	0x40000800
 8008968:	40000c00 	.word	0x40000c00
 800896c:	40001800 	.word	0x40001800
 8008970:	40014000 	.word	0x40014000

08008974 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d101      	bne.n	8008986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e042      	b.n	8008a0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800898c:	2b00      	cmp	r3, #0
 800898e:	d106      	bne.n	800899e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f7f8 fce1 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2224      	movs	r2, #36	@ 0x24
 80089a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f022 0201 	bic.w	r2, r2, #1
 80089b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d002      	beq.n	80089c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fd90 	bl	80094e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f825 	bl	8008a14 <UART_SetConfig>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d101      	bne.n	80089d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	e01b      	b.n	8008a0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	685a      	ldr	r2, [r3, #4]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	689a      	ldr	r2, [r3, #8]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f042 0201 	orr.w	r2, r2, #1
 8008a02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fe0f 	bl	8009628 <UART_CheckIdleState>
 8008a0a:	4603      	mov	r3, r0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a18:	b092      	sub	sp, #72	@ 0x48
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	689a      	ldr	r2, [r3, #8]
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	695b      	ldr	r3, [r3, #20]
 8008a32:	431a      	orrs	r2, r3
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	69db      	ldr	r3, [r3, #28]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	4bbe      	ldr	r3, [pc, #760]	@ (8008d3c <UART_SetConfig+0x328>)
 8008a44:	4013      	ands	r3, r2
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	6812      	ldr	r2, [r2, #0]
 8008a4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a4c:	430b      	orrs	r3, r1
 8008a4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	68da      	ldr	r2, [r3, #12]
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	430a      	orrs	r2, r1
 8008a64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4ab3      	ldr	r2, [pc, #716]	@ (8008d40 <UART_SetConfig+0x32c>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d004      	beq.n	8008a80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689a      	ldr	r2, [r3, #8]
 8008a86:	4baf      	ldr	r3, [pc, #700]	@ (8008d44 <UART_SetConfig+0x330>)
 8008a88:	4013      	ands	r3, r2
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	6812      	ldr	r2, [r2, #0]
 8008a8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a90:	430b      	orrs	r3, r1
 8008a92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9a:	f023 010f 	bic.w	r1, r3, #15
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4aa6      	ldr	r2, [pc, #664]	@ (8008d48 <UART_SetConfig+0x334>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d177      	bne.n	8008ba4 <UART_SetConfig+0x190>
 8008ab4:	4ba5      	ldr	r3, [pc, #660]	@ (8008d4c <UART_SetConfig+0x338>)
 8008ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ab8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008abc:	2b28      	cmp	r3, #40	@ 0x28
 8008abe:	d86d      	bhi.n	8008b9c <UART_SetConfig+0x188>
 8008ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ac8 <UART_SetConfig+0xb4>)
 8008ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac6:	bf00      	nop
 8008ac8:	08008b6d 	.word	0x08008b6d
 8008acc:	08008b9d 	.word	0x08008b9d
 8008ad0:	08008b9d 	.word	0x08008b9d
 8008ad4:	08008b9d 	.word	0x08008b9d
 8008ad8:	08008b9d 	.word	0x08008b9d
 8008adc:	08008b9d 	.word	0x08008b9d
 8008ae0:	08008b9d 	.word	0x08008b9d
 8008ae4:	08008b9d 	.word	0x08008b9d
 8008ae8:	08008b75 	.word	0x08008b75
 8008aec:	08008b9d 	.word	0x08008b9d
 8008af0:	08008b9d 	.word	0x08008b9d
 8008af4:	08008b9d 	.word	0x08008b9d
 8008af8:	08008b9d 	.word	0x08008b9d
 8008afc:	08008b9d 	.word	0x08008b9d
 8008b00:	08008b9d 	.word	0x08008b9d
 8008b04:	08008b9d 	.word	0x08008b9d
 8008b08:	08008b7d 	.word	0x08008b7d
 8008b0c:	08008b9d 	.word	0x08008b9d
 8008b10:	08008b9d 	.word	0x08008b9d
 8008b14:	08008b9d 	.word	0x08008b9d
 8008b18:	08008b9d 	.word	0x08008b9d
 8008b1c:	08008b9d 	.word	0x08008b9d
 8008b20:	08008b9d 	.word	0x08008b9d
 8008b24:	08008b9d 	.word	0x08008b9d
 8008b28:	08008b85 	.word	0x08008b85
 8008b2c:	08008b9d 	.word	0x08008b9d
 8008b30:	08008b9d 	.word	0x08008b9d
 8008b34:	08008b9d 	.word	0x08008b9d
 8008b38:	08008b9d 	.word	0x08008b9d
 8008b3c:	08008b9d 	.word	0x08008b9d
 8008b40:	08008b9d 	.word	0x08008b9d
 8008b44:	08008b9d 	.word	0x08008b9d
 8008b48:	08008b8d 	.word	0x08008b8d
 8008b4c:	08008b9d 	.word	0x08008b9d
 8008b50:	08008b9d 	.word	0x08008b9d
 8008b54:	08008b9d 	.word	0x08008b9d
 8008b58:	08008b9d 	.word	0x08008b9d
 8008b5c:	08008b9d 	.word	0x08008b9d
 8008b60:	08008b9d 	.word	0x08008b9d
 8008b64:	08008b9d 	.word	0x08008b9d
 8008b68:	08008b95 	.word	0x08008b95
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b72:	e222      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008b74:	2304      	movs	r3, #4
 8008b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b7a:	e21e      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008b7c:	2308      	movs	r3, #8
 8008b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b82:	e21a      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008b84:	2310      	movs	r3, #16
 8008b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b8a:	e216      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008b8c:	2320      	movs	r3, #32
 8008b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b92:	e212      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008b94:	2340      	movs	r3, #64	@ 0x40
 8008b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b9a:	e20e      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008b9c:	2380      	movs	r3, #128	@ 0x80
 8008b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ba2:	e20a      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a69      	ldr	r2, [pc, #420]	@ (8008d50 <UART_SetConfig+0x33c>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d130      	bne.n	8008c10 <UART_SetConfig+0x1fc>
 8008bae:	4b67      	ldr	r3, [pc, #412]	@ (8008d4c <UART_SetConfig+0x338>)
 8008bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bb2:	f003 0307 	and.w	r3, r3, #7
 8008bb6:	2b05      	cmp	r3, #5
 8008bb8:	d826      	bhi.n	8008c08 <UART_SetConfig+0x1f4>
 8008bba:	a201      	add	r2, pc, #4	@ (adr r2, 8008bc0 <UART_SetConfig+0x1ac>)
 8008bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc0:	08008bd9 	.word	0x08008bd9
 8008bc4:	08008be1 	.word	0x08008be1
 8008bc8:	08008be9 	.word	0x08008be9
 8008bcc:	08008bf1 	.word	0x08008bf1
 8008bd0:	08008bf9 	.word	0x08008bf9
 8008bd4:	08008c01 	.word	0x08008c01
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bde:	e1ec      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008be0:	2304      	movs	r3, #4
 8008be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008be6:	e1e8      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008be8:	2308      	movs	r3, #8
 8008bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bee:	e1e4      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008bf0:	2310      	movs	r3, #16
 8008bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bf6:	e1e0      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008bf8:	2320      	movs	r3, #32
 8008bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bfe:	e1dc      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008c00:	2340      	movs	r3, #64	@ 0x40
 8008c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c06:	e1d8      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008c08:	2380      	movs	r3, #128	@ 0x80
 8008c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c0e:	e1d4      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a4f      	ldr	r2, [pc, #316]	@ (8008d54 <UART_SetConfig+0x340>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d130      	bne.n	8008c7c <UART_SetConfig+0x268>
 8008c1a:	4b4c      	ldr	r3, [pc, #304]	@ (8008d4c <UART_SetConfig+0x338>)
 8008c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	2b05      	cmp	r3, #5
 8008c24:	d826      	bhi.n	8008c74 <UART_SetConfig+0x260>
 8008c26:	a201      	add	r2, pc, #4	@ (adr r2, 8008c2c <UART_SetConfig+0x218>)
 8008c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2c:	08008c45 	.word	0x08008c45
 8008c30:	08008c4d 	.word	0x08008c4d
 8008c34:	08008c55 	.word	0x08008c55
 8008c38:	08008c5d 	.word	0x08008c5d
 8008c3c:	08008c65 	.word	0x08008c65
 8008c40:	08008c6d 	.word	0x08008c6d
 8008c44:	2300      	movs	r3, #0
 8008c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4a:	e1b6      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008c4c:	2304      	movs	r3, #4
 8008c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c52:	e1b2      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008c54:	2308      	movs	r3, #8
 8008c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5a:	e1ae      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008c5c:	2310      	movs	r3, #16
 8008c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c62:	e1aa      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008c64:	2320      	movs	r3, #32
 8008c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6a:	e1a6      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008c6c:	2340      	movs	r3, #64	@ 0x40
 8008c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c72:	e1a2      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008c74:	2380      	movs	r3, #128	@ 0x80
 8008c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7a:	e19e      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a35      	ldr	r2, [pc, #212]	@ (8008d58 <UART_SetConfig+0x344>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d130      	bne.n	8008ce8 <UART_SetConfig+0x2d4>
 8008c86:	4b31      	ldr	r3, [pc, #196]	@ (8008d4c <UART_SetConfig+0x338>)
 8008c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c8a:	f003 0307 	and.w	r3, r3, #7
 8008c8e:	2b05      	cmp	r3, #5
 8008c90:	d826      	bhi.n	8008ce0 <UART_SetConfig+0x2cc>
 8008c92:	a201      	add	r2, pc, #4	@ (adr r2, 8008c98 <UART_SetConfig+0x284>)
 8008c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c98:	08008cb1 	.word	0x08008cb1
 8008c9c:	08008cb9 	.word	0x08008cb9
 8008ca0:	08008cc1 	.word	0x08008cc1
 8008ca4:	08008cc9 	.word	0x08008cc9
 8008ca8:	08008cd1 	.word	0x08008cd1
 8008cac:	08008cd9 	.word	0x08008cd9
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb6:	e180      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008cb8:	2304      	movs	r3, #4
 8008cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cbe:	e17c      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008cc0:	2308      	movs	r3, #8
 8008cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc6:	e178      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008cc8:	2310      	movs	r3, #16
 8008cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cce:	e174      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008cd0:	2320      	movs	r3, #32
 8008cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd6:	e170      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008cd8:	2340      	movs	r3, #64	@ 0x40
 8008cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cde:	e16c      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008ce0:	2380      	movs	r3, #128	@ 0x80
 8008ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce6:	e168      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a1b      	ldr	r2, [pc, #108]	@ (8008d5c <UART_SetConfig+0x348>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d142      	bne.n	8008d78 <UART_SetConfig+0x364>
 8008cf2:	4b16      	ldr	r3, [pc, #88]	@ (8008d4c <UART_SetConfig+0x338>)
 8008cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cf6:	f003 0307 	and.w	r3, r3, #7
 8008cfa:	2b05      	cmp	r3, #5
 8008cfc:	d838      	bhi.n	8008d70 <UART_SetConfig+0x35c>
 8008cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8008d04 <UART_SetConfig+0x2f0>)
 8008d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d04:	08008d1d 	.word	0x08008d1d
 8008d08:	08008d25 	.word	0x08008d25
 8008d0c:	08008d2d 	.word	0x08008d2d
 8008d10:	08008d35 	.word	0x08008d35
 8008d14:	08008d61 	.word	0x08008d61
 8008d18:	08008d69 	.word	0x08008d69
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d22:	e14a      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008d24:	2304      	movs	r3, #4
 8008d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d2a:	e146      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008d2c:	2308      	movs	r3, #8
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d32:	e142      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008d34:	2310      	movs	r3, #16
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3a:	e13e      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008d3c:	cfff69f3 	.word	0xcfff69f3
 8008d40:	58000c00 	.word	0x58000c00
 8008d44:	11fff4ff 	.word	0x11fff4ff
 8008d48:	40011000 	.word	0x40011000
 8008d4c:	58024400 	.word	0x58024400
 8008d50:	40004400 	.word	0x40004400
 8008d54:	40004800 	.word	0x40004800
 8008d58:	40004c00 	.word	0x40004c00
 8008d5c:	40005000 	.word	0x40005000
 8008d60:	2320      	movs	r3, #32
 8008d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d66:	e128      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008d68:	2340      	movs	r3, #64	@ 0x40
 8008d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d6e:	e124      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008d70:	2380      	movs	r3, #128	@ 0x80
 8008d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d76:	e120      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4acb      	ldr	r2, [pc, #812]	@ (80090ac <UART_SetConfig+0x698>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d176      	bne.n	8008e70 <UART_SetConfig+0x45c>
 8008d82:	4bcb      	ldr	r3, [pc, #812]	@ (80090b0 <UART_SetConfig+0x69c>)
 8008d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d8a:	2b28      	cmp	r3, #40	@ 0x28
 8008d8c:	d86c      	bhi.n	8008e68 <UART_SetConfig+0x454>
 8008d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d94 <UART_SetConfig+0x380>)
 8008d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d94:	08008e39 	.word	0x08008e39
 8008d98:	08008e69 	.word	0x08008e69
 8008d9c:	08008e69 	.word	0x08008e69
 8008da0:	08008e69 	.word	0x08008e69
 8008da4:	08008e69 	.word	0x08008e69
 8008da8:	08008e69 	.word	0x08008e69
 8008dac:	08008e69 	.word	0x08008e69
 8008db0:	08008e69 	.word	0x08008e69
 8008db4:	08008e41 	.word	0x08008e41
 8008db8:	08008e69 	.word	0x08008e69
 8008dbc:	08008e69 	.word	0x08008e69
 8008dc0:	08008e69 	.word	0x08008e69
 8008dc4:	08008e69 	.word	0x08008e69
 8008dc8:	08008e69 	.word	0x08008e69
 8008dcc:	08008e69 	.word	0x08008e69
 8008dd0:	08008e69 	.word	0x08008e69
 8008dd4:	08008e49 	.word	0x08008e49
 8008dd8:	08008e69 	.word	0x08008e69
 8008ddc:	08008e69 	.word	0x08008e69
 8008de0:	08008e69 	.word	0x08008e69
 8008de4:	08008e69 	.word	0x08008e69
 8008de8:	08008e69 	.word	0x08008e69
 8008dec:	08008e69 	.word	0x08008e69
 8008df0:	08008e69 	.word	0x08008e69
 8008df4:	08008e51 	.word	0x08008e51
 8008df8:	08008e69 	.word	0x08008e69
 8008dfc:	08008e69 	.word	0x08008e69
 8008e00:	08008e69 	.word	0x08008e69
 8008e04:	08008e69 	.word	0x08008e69
 8008e08:	08008e69 	.word	0x08008e69
 8008e0c:	08008e69 	.word	0x08008e69
 8008e10:	08008e69 	.word	0x08008e69
 8008e14:	08008e59 	.word	0x08008e59
 8008e18:	08008e69 	.word	0x08008e69
 8008e1c:	08008e69 	.word	0x08008e69
 8008e20:	08008e69 	.word	0x08008e69
 8008e24:	08008e69 	.word	0x08008e69
 8008e28:	08008e69 	.word	0x08008e69
 8008e2c:	08008e69 	.word	0x08008e69
 8008e30:	08008e69 	.word	0x08008e69
 8008e34:	08008e61 	.word	0x08008e61
 8008e38:	2301      	movs	r3, #1
 8008e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3e:	e0bc      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008e40:	2304      	movs	r3, #4
 8008e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e46:	e0b8      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008e48:	2308      	movs	r3, #8
 8008e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4e:	e0b4      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008e50:	2310      	movs	r3, #16
 8008e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e56:	e0b0      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008e58:	2320      	movs	r3, #32
 8008e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5e:	e0ac      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008e60:	2340      	movs	r3, #64	@ 0x40
 8008e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e66:	e0a8      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008e68:	2380      	movs	r3, #128	@ 0x80
 8008e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6e:	e0a4      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a8f      	ldr	r2, [pc, #572]	@ (80090b4 <UART_SetConfig+0x6a0>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d130      	bne.n	8008edc <UART_SetConfig+0x4c8>
 8008e7a:	4b8d      	ldr	r3, [pc, #564]	@ (80090b0 <UART_SetConfig+0x69c>)
 8008e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e7e:	f003 0307 	and.w	r3, r3, #7
 8008e82:	2b05      	cmp	r3, #5
 8008e84:	d826      	bhi.n	8008ed4 <UART_SetConfig+0x4c0>
 8008e86:	a201      	add	r2, pc, #4	@ (adr r2, 8008e8c <UART_SetConfig+0x478>)
 8008e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8c:	08008ea5 	.word	0x08008ea5
 8008e90:	08008ead 	.word	0x08008ead
 8008e94:	08008eb5 	.word	0x08008eb5
 8008e98:	08008ebd 	.word	0x08008ebd
 8008e9c:	08008ec5 	.word	0x08008ec5
 8008ea0:	08008ecd 	.word	0x08008ecd
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eaa:	e086      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008eac:	2304      	movs	r3, #4
 8008eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eb2:	e082      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008eb4:	2308      	movs	r3, #8
 8008eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eba:	e07e      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008ebc:	2310      	movs	r3, #16
 8008ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ec2:	e07a      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008ec4:	2320      	movs	r3, #32
 8008ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eca:	e076      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008ecc:	2340      	movs	r3, #64	@ 0x40
 8008ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ed2:	e072      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008ed4:	2380      	movs	r3, #128	@ 0x80
 8008ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eda:	e06e      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a75      	ldr	r2, [pc, #468]	@ (80090b8 <UART_SetConfig+0x6a4>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d130      	bne.n	8008f48 <UART_SetConfig+0x534>
 8008ee6:	4b72      	ldr	r3, [pc, #456]	@ (80090b0 <UART_SetConfig+0x69c>)
 8008ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eea:	f003 0307 	and.w	r3, r3, #7
 8008eee:	2b05      	cmp	r3, #5
 8008ef0:	d826      	bhi.n	8008f40 <UART_SetConfig+0x52c>
 8008ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef8 <UART_SetConfig+0x4e4>)
 8008ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef8:	08008f11 	.word	0x08008f11
 8008efc:	08008f19 	.word	0x08008f19
 8008f00:	08008f21 	.word	0x08008f21
 8008f04:	08008f29 	.word	0x08008f29
 8008f08:	08008f31 	.word	0x08008f31
 8008f0c:	08008f39 	.word	0x08008f39
 8008f10:	2300      	movs	r3, #0
 8008f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f16:	e050      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f18:	2304      	movs	r3, #4
 8008f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1e:	e04c      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f20:	2308      	movs	r3, #8
 8008f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f26:	e048      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f28:	2310      	movs	r3, #16
 8008f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2e:	e044      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f30:	2320      	movs	r3, #32
 8008f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f36:	e040      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f38:	2340      	movs	r3, #64	@ 0x40
 8008f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f3e:	e03c      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f40:	2380      	movs	r3, #128	@ 0x80
 8008f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f46:	e038      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a5b      	ldr	r2, [pc, #364]	@ (80090bc <UART_SetConfig+0x6a8>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d130      	bne.n	8008fb4 <UART_SetConfig+0x5a0>
 8008f52:	4b57      	ldr	r3, [pc, #348]	@ (80090b0 <UART_SetConfig+0x69c>)
 8008f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f56:	f003 0307 	and.w	r3, r3, #7
 8008f5a:	2b05      	cmp	r3, #5
 8008f5c:	d826      	bhi.n	8008fac <UART_SetConfig+0x598>
 8008f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f64 <UART_SetConfig+0x550>)
 8008f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f64:	08008f7d 	.word	0x08008f7d
 8008f68:	08008f85 	.word	0x08008f85
 8008f6c:	08008f8d 	.word	0x08008f8d
 8008f70:	08008f95 	.word	0x08008f95
 8008f74:	08008f9d 	.word	0x08008f9d
 8008f78:	08008fa5 	.word	0x08008fa5
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f82:	e01a      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f84:	2304      	movs	r3, #4
 8008f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f8a:	e016      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f8c:	2308      	movs	r3, #8
 8008f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f92:	e012      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f94:	2310      	movs	r3, #16
 8008f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f9a:	e00e      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008f9c:	2320      	movs	r3, #32
 8008f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fa2:	e00a      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008fa4:	2340      	movs	r3, #64	@ 0x40
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008faa:	e006      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008fac:	2380      	movs	r3, #128	@ 0x80
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb2:	e002      	b.n	8008fba <UART_SetConfig+0x5a6>
 8008fb4:	2380      	movs	r3, #128	@ 0x80
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a3f      	ldr	r2, [pc, #252]	@ (80090bc <UART_SetConfig+0x6a8>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	f040 80f8 	bne.w	80091b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008fc6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008fca:	2b20      	cmp	r3, #32
 8008fcc:	dc46      	bgt.n	800905c <UART_SetConfig+0x648>
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	f2c0 8082 	blt.w	80090d8 <UART_SetConfig+0x6c4>
 8008fd4:	3b02      	subs	r3, #2
 8008fd6:	2b1e      	cmp	r3, #30
 8008fd8:	d87e      	bhi.n	80090d8 <UART_SetConfig+0x6c4>
 8008fda:	a201      	add	r2, pc, #4	@ (adr r2, 8008fe0 <UART_SetConfig+0x5cc>)
 8008fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe0:	08009063 	.word	0x08009063
 8008fe4:	080090d9 	.word	0x080090d9
 8008fe8:	0800906b 	.word	0x0800906b
 8008fec:	080090d9 	.word	0x080090d9
 8008ff0:	080090d9 	.word	0x080090d9
 8008ff4:	080090d9 	.word	0x080090d9
 8008ff8:	0800907b 	.word	0x0800907b
 8008ffc:	080090d9 	.word	0x080090d9
 8009000:	080090d9 	.word	0x080090d9
 8009004:	080090d9 	.word	0x080090d9
 8009008:	080090d9 	.word	0x080090d9
 800900c:	080090d9 	.word	0x080090d9
 8009010:	080090d9 	.word	0x080090d9
 8009014:	080090d9 	.word	0x080090d9
 8009018:	0800908b 	.word	0x0800908b
 800901c:	080090d9 	.word	0x080090d9
 8009020:	080090d9 	.word	0x080090d9
 8009024:	080090d9 	.word	0x080090d9
 8009028:	080090d9 	.word	0x080090d9
 800902c:	080090d9 	.word	0x080090d9
 8009030:	080090d9 	.word	0x080090d9
 8009034:	080090d9 	.word	0x080090d9
 8009038:	080090d9 	.word	0x080090d9
 800903c:	080090d9 	.word	0x080090d9
 8009040:	080090d9 	.word	0x080090d9
 8009044:	080090d9 	.word	0x080090d9
 8009048:	080090d9 	.word	0x080090d9
 800904c:	080090d9 	.word	0x080090d9
 8009050:	080090d9 	.word	0x080090d9
 8009054:	080090d9 	.word	0x080090d9
 8009058:	080090cb 	.word	0x080090cb
 800905c:	2b40      	cmp	r3, #64	@ 0x40
 800905e:	d037      	beq.n	80090d0 <UART_SetConfig+0x6bc>
 8009060:	e03a      	b.n	80090d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009062:	f7fe fd87 	bl	8007b74 <HAL_RCCEx_GetD3PCLK1Freq>
 8009066:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009068:	e03c      	b.n	80090e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800906a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800906e:	4618      	mov	r0, r3
 8009070:	f7fe fd96 	bl	8007ba0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009078:	e034      	b.n	80090e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800907a:	f107 0318 	add.w	r3, r7, #24
 800907e:	4618      	mov	r0, r3
 8009080:	f7fe fee2 	bl	8007e48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009088:	e02c      	b.n	80090e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800908a:	4b09      	ldr	r3, [pc, #36]	@ (80090b0 <UART_SetConfig+0x69c>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 0320 	and.w	r3, r3, #32
 8009092:	2b00      	cmp	r3, #0
 8009094:	d016      	beq.n	80090c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009096:	4b06      	ldr	r3, [pc, #24]	@ (80090b0 <UART_SetConfig+0x69c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	08db      	lsrs	r3, r3, #3
 800909c:	f003 0303 	and.w	r3, r3, #3
 80090a0:	4a07      	ldr	r2, [pc, #28]	@ (80090c0 <UART_SetConfig+0x6ac>)
 80090a2:	fa22 f303 	lsr.w	r3, r2, r3
 80090a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090a8:	e01c      	b.n	80090e4 <UART_SetConfig+0x6d0>
 80090aa:	bf00      	nop
 80090ac:	40011400 	.word	0x40011400
 80090b0:	58024400 	.word	0x58024400
 80090b4:	40007800 	.word	0x40007800
 80090b8:	40007c00 	.word	0x40007c00
 80090bc:	58000c00 	.word	0x58000c00
 80090c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80090c4:	4b9d      	ldr	r3, [pc, #628]	@ (800933c <UART_SetConfig+0x928>)
 80090c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090c8:	e00c      	b.n	80090e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80090ca:	4b9d      	ldr	r3, [pc, #628]	@ (8009340 <UART_SetConfig+0x92c>)
 80090cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090ce:	e009      	b.n	80090e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090d6:	e005      	b.n	80090e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80090d8:	2300      	movs	r3, #0
 80090da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80090e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80090e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f000 81de 	beq.w	80094a8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f0:	4a94      	ldr	r2, [pc, #592]	@ (8009344 <UART_SetConfig+0x930>)
 80090f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090f6:	461a      	mov	r2, r3
 80090f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80090fe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	685a      	ldr	r2, [r3, #4]
 8009104:	4613      	mov	r3, r2
 8009106:	005b      	lsls	r3, r3, #1
 8009108:	4413      	add	r3, r2
 800910a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800910c:	429a      	cmp	r2, r3
 800910e:	d305      	bcc.n	800911c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009118:	429a      	cmp	r2, r3
 800911a:	d903      	bls.n	8009124 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009122:	e1c1      	b.n	80094a8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009126:	2200      	movs	r2, #0
 8009128:	60bb      	str	r3, [r7, #8]
 800912a:	60fa      	str	r2, [r7, #12]
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009130:	4a84      	ldr	r2, [pc, #528]	@ (8009344 <UART_SetConfig+0x930>)
 8009132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009136:	b29b      	uxth	r3, r3
 8009138:	2200      	movs	r2, #0
 800913a:	603b      	str	r3, [r7, #0]
 800913c:	607a      	str	r2, [r7, #4]
 800913e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009142:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009146:	f7f7 f8c7 	bl	80002d8 <__aeabi_uldivmod>
 800914a:	4602      	mov	r2, r0
 800914c:	460b      	mov	r3, r1
 800914e:	4610      	mov	r0, r2
 8009150:	4619      	mov	r1, r3
 8009152:	f04f 0200 	mov.w	r2, #0
 8009156:	f04f 0300 	mov.w	r3, #0
 800915a:	020b      	lsls	r3, r1, #8
 800915c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009160:	0202      	lsls	r2, r0, #8
 8009162:	6979      	ldr	r1, [r7, #20]
 8009164:	6849      	ldr	r1, [r1, #4]
 8009166:	0849      	lsrs	r1, r1, #1
 8009168:	2000      	movs	r0, #0
 800916a:	460c      	mov	r4, r1
 800916c:	4605      	mov	r5, r0
 800916e:	eb12 0804 	adds.w	r8, r2, r4
 8009172:	eb43 0905 	adc.w	r9, r3, r5
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	469a      	mov	sl, r3
 800917e:	4693      	mov	fp, r2
 8009180:	4652      	mov	r2, sl
 8009182:	465b      	mov	r3, fp
 8009184:	4640      	mov	r0, r8
 8009186:	4649      	mov	r1, r9
 8009188:	f7f7 f8a6 	bl	80002d8 <__aeabi_uldivmod>
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	4613      	mov	r3, r2
 8009192:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009196:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800919a:	d308      	bcc.n	80091ae <UART_SetConfig+0x79a>
 800919c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091a2:	d204      	bcs.n	80091ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091aa:	60da      	str	r2, [r3, #12]
 80091ac:	e17c      	b.n	80094a8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80091b4:	e178      	b.n	80094a8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	69db      	ldr	r3, [r3, #28]
 80091ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091be:	f040 80c5 	bne.w	800934c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80091c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80091c6:	2b20      	cmp	r3, #32
 80091c8:	dc48      	bgt.n	800925c <UART_SetConfig+0x848>
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	db7b      	blt.n	80092c6 <UART_SetConfig+0x8b2>
 80091ce:	2b20      	cmp	r3, #32
 80091d0:	d879      	bhi.n	80092c6 <UART_SetConfig+0x8b2>
 80091d2:	a201      	add	r2, pc, #4	@ (adr r2, 80091d8 <UART_SetConfig+0x7c4>)
 80091d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d8:	08009263 	.word	0x08009263
 80091dc:	0800926b 	.word	0x0800926b
 80091e0:	080092c7 	.word	0x080092c7
 80091e4:	080092c7 	.word	0x080092c7
 80091e8:	08009273 	.word	0x08009273
 80091ec:	080092c7 	.word	0x080092c7
 80091f0:	080092c7 	.word	0x080092c7
 80091f4:	080092c7 	.word	0x080092c7
 80091f8:	08009283 	.word	0x08009283
 80091fc:	080092c7 	.word	0x080092c7
 8009200:	080092c7 	.word	0x080092c7
 8009204:	080092c7 	.word	0x080092c7
 8009208:	080092c7 	.word	0x080092c7
 800920c:	080092c7 	.word	0x080092c7
 8009210:	080092c7 	.word	0x080092c7
 8009214:	080092c7 	.word	0x080092c7
 8009218:	08009293 	.word	0x08009293
 800921c:	080092c7 	.word	0x080092c7
 8009220:	080092c7 	.word	0x080092c7
 8009224:	080092c7 	.word	0x080092c7
 8009228:	080092c7 	.word	0x080092c7
 800922c:	080092c7 	.word	0x080092c7
 8009230:	080092c7 	.word	0x080092c7
 8009234:	080092c7 	.word	0x080092c7
 8009238:	080092c7 	.word	0x080092c7
 800923c:	080092c7 	.word	0x080092c7
 8009240:	080092c7 	.word	0x080092c7
 8009244:	080092c7 	.word	0x080092c7
 8009248:	080092c7 	.word	0x080092c7
 800924c:	080092c7 	.word	0x080092c7
 8009250:	080092c7 	.word	0x080092c7
 8009254:	080092c7 	.word	0x080092c7
 8009258:	080092b9 	.word	0x080092b9
 800925c:	2b40      	cmp	r3, #64	@ 0x40
 800925e:	d02e      	beq.n	80092be <UART_SetConfig+0x8aa>
 8009260:	e031      	b.n	80092c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009262:	f7fc fcd1 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 8009266:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009268:	e033      	b.n	80092d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800926a:	f7fc fce3 	bl	8005c34 <HAL_RCC_GetPCLK2Freq>
 800926e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009270:	e02f      	b.n	80092d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009276:	4618      	mov	r0, r3
 8009278:	f7fe fc92 	bl	8007ba0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800927c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800927e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009280:	e027      	b.n	80092d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009282:	f107 0318 	add.w	r3, r7, #24
 8009286:	4618      	mov	r0, r3
 8009288:	f7fe fdde 	bl	8007e48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009290:	e01f      	b.n	80092d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009292:	4b2d      	ldr	r3, [pc, #180]	@ (8009348 <UART_SetConfig+0x934>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 0320 	and.w	r3, r3, #32
 800929a:	2b00      	cmp	r3, #0
 800929c:	d009      	beq.n	80092b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800929e:	4b2a      	ldr	r3, [pc, #168]	@ (8009348 <UART_SetConfig+0x934>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	08db      	lsrs	r3, r3, #3
 80092a4:	f003 0303 	and.w	r3, r3, #3
 80092a8:	4a24      	ldr	r2, [pc, #144]	@ (800933c <UART_SetConfig+0x928>)
 80092aa:	fa22 f303 	lsr.w	r3, r2, r3
 80092ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092b0:	e00f      	b.n	80092d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80092b2:	4b22      	ldr	r3, [pc, #136]	@ (800933c <UART_SetConfig+0x928>)
 80092b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092b6:	e00c      	b.n	80092d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092b8:	4b21      	ldr	r3, [pc, #132]	@ (8009340 <UART_SetConfig+0x92c>)
 80092ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092bc:	e009      	b.n	80092d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092c4:	e005      	b.n	80092d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80092c6:	2300      	movs	r3, #0
 80092c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80092d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f000 80e7 	beq.w	80094a8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092de:	4a19      	ldr	r2, [pc, #100]	@ (8009344 <UART_SetConfig+0x930>)
 80092e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092e4:	461a      	mov	r2, r3
 80092e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80092ec:	005a      	lsls	r2, r3, #1
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	085b      	lsrs	r3, r3, #1
 80092f4:	441a      	add	r2, r3
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80092fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009302:	2b0f      	cmp	r3, #15
 8009304:	d916      	bls.n	8009334 <UART_SetConfig+0x920>
 8009306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800930c:	d212      	bcs.n	8009334 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800930e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009310:	b29b      	uxth	r3, r3
 8009312:	f023 030f 	bic.w	r3, r3, #15
 8009316:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931a:	085b      	lsrs	r3, r3, #1
 800931c:	b29b      	uxth	r3, r3
 800931e:	f003 0307 	and.w	r3, r3, #7
 8009322:	b29a      	uxth	r2, r3
 8009324:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009326:	4313      	orrs	r3, r2
 8009328:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009330:	60da      	str	r2, [r3, #12]
 8009332:	e0b9      	b.n	80094a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800933a:	e0b5      	b.n	80094a8 <UART_SetConfig+0xa94>
 800933c:	03d09000 	.word	0x03d09000
 8009340:	003d0900 	.word	0x003d0900
 8009344:	08009bb4 	.word	0x08009bb4
 8009348:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800934c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009350:	2b20      	cmp	r3, #32
 8009352:	dc49      	bgt.n	80093e8 <UART_SetConfig+0x9d4>
 8009354:	2b00      	cmp	r3, #0
 8009356:	db7c      	blt.n	8009452 <UART_SetConfig+0xa3e>
 8009358:	2b20      	cmp	r3, #32
 800935a:	d87a      	bhi.n	8009452 <UART_SetConfig+0xa3e>
 800935c:	a201      	add	r2, pc, #4	@ (adr r2, 8009364 <UART_SetConfig+0x950>)
 800935e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009362:	bf00      	nop
 8009364:	080093ef 	.word	0x080093ef
 8009368:	080093f7 	.word	0x080093f7
 800936c:	08009453 	.word	0x08009453
 8009370:	08009453 	.word	0x08009453
 8009374:	080093ff 	.word	0x080093ff
 8009378:	08009453 	.word	0x08009453
 800937c:	08009453 	.word	0x08009453
 8009380:	08009453 	.word	0x08009453
 8009384:	0800940f 	.word	0x0800940f
 8009388:	08009453 	.word	0x08009453
 800938c:	08009453 	.word	0x08009453
 8009390:	08009453 	.word	0x08009453
 8009394:	08009453 	.word	0x08009453
 8009398:	08009453 	.word	0x08009453
 800939c:	08009453 	.word	0x08009453
 80093a0:	08009453 	.word	0x08009453
 80093a4:	0800941f 	.word	0x0800941f
 80093a8:	08009453 	.word	0x08009453
 80093ac:	08009453 	.word	0x08009453
 80093b0:	08009453 	.word	0x08009453
 80093b4:	08009453 	.word	0x08009453
 80093b8:	08009453 	.word	0x08009453
 80093bc:	08009453 	.word	0x08009453
 80093c0:	08009453 	.word	0x08009453
 80093c4:	08009453 	.word	0x08009453
 80093c8:	08009453 	.word	0x08009453
 80093cc:	08009453 	.word	0x08009453
 80093d0:	08009453 	.word	0x08009453
 80093d4:	08009453 	.word	0x08009453
 80093d8:	08009453 	.word	0x08009453
 80093dc:	08009453 	.word	0x08009453
 80093e0:	08009453 	.word	0x08009453
 80093e4:	08009445 	.word	0x08009445
 80093e8:	2b40      	cmp	r3, #64	@ 0x40
 80093ea:	d02e      	beq.n	800944a <UART_SetConfig+0xa36>
 80093ec:	e031      	b.n	8009452 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093ee:	f7fc fc0b 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 80093f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093f4:	e033      	b.n	800945e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093f6:	f7fc fc1d 	bl	8005c34 <HAL_RCC_GetPCLK2Freq>
 80093fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093fc:	e02f      	b.n	800945e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009402:	4618      	mov	r0, r3
 8009404:	f7fe fbcc 	bl	8007ba0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800940a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800940c:	e027      	b.n	800945e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800940e:	f107 0318 	add.w	r3, r7, #24
 8009412:	4618      	mov	r0, r3
 8009414:	f7fe fd18 	bl	8007e48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800941c:	e01f      	b.n	800945e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800941e:	4b2d      	ldr	r3, [pc, #180]	@ (80094d4 <UART_SetConfig+0xac0>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 0320 	and.w	r3, r3, #32
 8009426:	2b00      	cmp	r3, #0
 8009428:	d009      	beq.n	800943e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800942a:	4b2a      	ldr	r3, [pc, #168]	@ (80094d4 <UART_SetConfig+0xac0>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	08db      	lsrs	r3, r3, #3
 8009430:	f003 0303 	and.w	r3, r3, #3
 8009434:	4a28      	ldr	r2, [pc, #160]	@ (80094d8 <UART_SetConfig+0xac4>)
 8009436:	fa22 f303 	lsr.w	r3, r2, r3
 800943a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800943c:	e00f      	b.n	800945e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800943e:	4b26      	ldr	r3, [pc, #152]	@ (80094d8 <UART_SetConfig+0xac4>)
 8009440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009442:	e00c      	b.n	800945e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009444:	4b25      	ldr	r3, [pc, #148]	@ (80094dc <UART_SetConfig+0xac8>)
 8009446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009448:	e009      	b.n	800945e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800944a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800944e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009450:	e005      	b.n	800945e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009452:	2300      	movs	r3, #0
 8009454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800945c:	bf00      	nop
    }

    if (pclk != 0U)
 800945e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009460:	2b00      	cmp	r3, #0
 8009462:	d021      	beq.n	80094a8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009468:	4a1d      	ldr	r2, [pc, #116]	@ (80094e0 <UART_SetConfig+0xacc>)
 800946a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800946e:	461a      	mov	r2, r3
 8009470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009472:	fbb3 f2f2 	udiv	r2, r3, r2
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	085b      	lsrs	r3, r3, #1
 800947c:	441a      	add	r2, r3
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	fbb2 f3f3 	udiv	r3, r2, r3
 8009486:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800948a:	2b0f      	cmp	r3, #15
 800948c:	d909      	bls.n	80094a2 <UART_SetConfig+0xa8e>
 800948e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009494:	d205      	bcs.n	80094a2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009498:	b29a      	uxth	r2, r3
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	60da      	str	r2, [r3, #12]
 80094a0:	e002      	b.n	80094a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	2200      	movs	r2, #0
 80094bc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	2200      	movs	r2, #0
 80094c2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80094c4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3748      	adds	r7, #72	@ 0x48
 80094cc:	46bd      	mov	sp, r7
 80094ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094d2:	bf00      	nop
 80094d4:	58024400 	.word	0x58024400
 80094d8:	03d09000 	.word	0x03d09000
 80094dc:	003d0900 	.word	0x003d0900
 80094e0:	08009bb4 	.word	0x08009bb4

080094e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f0:	f003 0308 	and.w	r3, r3, #8
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00a      	beq.n	800950e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	430a      	orrs	r2, r1
 800950c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00a      	beq.n	8009530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	430a      	orrs	r2, r1
 800952e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009534:	f003 0302 	and.w	r3, r3, #2
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00a      	beq.n	8009552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	430a      	orrs	r2, r1
 8009550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009556:	f003 0304 	and.w	r3, r3, #4
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00a      	beq.n	8009574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	430a      	orrs	r2, r1
 8009572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009578:	f003 0310 	and.w	r3, r3, #16
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00a      	beq.n	8009596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	430a      	orrs	r2, r1
 8009594:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800959a:	f003 0320 	and.w	r3, r3, #32
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00a      	beq.n	80095b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	430a      	orrs	r2, r1
 80095b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d01a      	beq.n	80095fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	430a      	orrs	r2, r1
 80095d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095e2:	d10a      	bne.n	80095fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	430a      	orrs	r2, r1
 80095f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00a      	beq.n	800961c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	430a      	orrs	r2, r1
 800961a:	605a      	str	r2, [r3, #4]
  }
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b098      	sub	sp, #96	@ 0x60
 800962c:	af02      	add	r7, sp, #8
 800962e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009638:	f7f8 f8b8 	bl	80017ac <HAL_GetTick>
 800963c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0308 	and.w	r3, r3, #8
 8009648:	2b08      	cmp	r3, #8
 800964a:	d12f      	bne.n	80096ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800964c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009654:	2200      	movs	r2, #0
 8009656:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f88e 	bl	800977c <UART_WaitOnFlagUntilTimeout>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d022      	beq.n	80096ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800966e:	e853 3f00 	ldrex	r3, [r3]
 8009672:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009676:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800967a:	653b      	str	r3, [r7, #80]	@ 0x50
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	461a      	mov	r2, r3
 8009682:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009684:	647b      	str	r3, [r7, #68]	@ 0x44
 8009686:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009688:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800968a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800968c:	e841 2300 	strex	r3, r2, [r1]
 8009690:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1e6      	bne.n	8009666 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2220      	movs	r2, #32
 800969c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096a8:	2303      	movs	r3, #3
 80096aa:	e063      	b.n	8009774 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 0304 	and.w	r3, r3, #4
 80096b6:	2b04      	cmp	r3, #4
 80096b8:	d149      	bne.n	800974e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80096be:	9300      	str	r3, [sp, #0]
 80096c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096c2:	2200      	movs	r2, #0
 80096c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 f857 	bl	800977c <UART_WaitOnFlagUntilTimeout>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d03c      	beq.n	800974e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096dc:	e853 3f00 	ldrex	r3, [r3]
 80096e0:	623b      	str	r3, [r7, #32]
   return(result);
 80096e2:	6a3b      	ldr	r3, [r7, #32]
 80096e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80096f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096fa:	e841 2300 	strex	r3, r2, [r1]
 80096fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1e6      	bne.n	80096d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3308      	adds	r3, #8
 800970c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	e853 3f00 	ldrex	r3, [r3]
 8009714:	60fb      	str	r3, [r7, #12]
   return(result);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f023 0301 	bic.w	r3, r3, #1
 800971c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	3308      	adds	r3, #8
 8009724:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009726:	61fa      	str	r2, [r7, #28]
 8009728:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972a:	69b9      	ldr	r1, [r7, #24]
 800972c:	69fa      	ldr	r2, [r7, #28]
 800972e:	e841 2300 	strex	r3, r2, [r1]
 8009732:	617b      	str	r3, [r7, #20]
   return(result);
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1e5      	bne.n	8009706 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2220      	movs	r2, #32
 800973e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800974a:	2303      	movs	r3, #3
 800974c:	e012      	b.n	8009774 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2220      	movs	r2, #32
 8009752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2220      	movs	r2, #32
 800975a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	3758      	adds	r7, #88	@ 0x58
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	603b      	str	r3, [r7, #0]
 8009788:	4613      	mov	r3, r2
 800978a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800978c:	e04f      	b.n	800982e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009794:	d04b      	beq.n	800982e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009796:	f7f8 f809 	bl	80017ac <HAL_GetTick>
 800979a:	4602      	mov	r2, r0
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	69ba      	ldr	r2, [r7, #24]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d302      	bcc.n	80097ac <UART_WaitOnFlagUntilTimeout+0x30>
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d101      	bne.n	80097b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80097ac:	2303      	movs	r3, #3
 80097ae:	e04e      	b.n	800984e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 0304 	and.w	r3, r3, #4
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d037      	beq.n	800982e <UART_WaitOnFlagUntilTimeout+0xb2>
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2b80      	cmp	r3, #128	@ 0x80
 80097c2:	d034      	beq.n	800982e <UART_WaitOnFlagUntilTimeout+0xb2>
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	2b40      	cmp	r3, #64	@ 0x40
 80097c8:	d031      	beq.n	800982e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	69db      	ldr	r3, [r3, #28]
 80097d0:	f003 0308 	and.w	r3, r3, #8
 80097d4:	2b08      	cmp	r3, #8
 80097d6:	d110      	bne.n	80097fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2208      	movs	r2, #8
 80097de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f000 f839 	bl	8009858 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2208      	movs	r2, #8
 80097ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e029      	b.n	800984e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	69db      	ldr	r3, [r3, #28]
 8009800:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009804:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009808:	d111      	bne.n	800982e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009812:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f000 f81f 	bl	8009858 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2220      	movs	r2, #32
 800981e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e00f      	b.n	800984e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	69da      	ldr	r2, [r3, #28]
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	4013      	ands	r3, r2
 8009838:	68ba      	ldr	r2, [r7, #8]
 800983a:	429a      	cmp	r2, r3
 800983c:	bf0c      	ite	eq
 800983e:	2301      	moveq	r3, #1
 8009840:	2300      	movne	r3, #0
 8009842:	b2db      	uxtb	r3, r3
 8009844:	461a      	mov	r2, r3
 8009846:	79fb      	ldrb	r3, [r7, #7]
 8009848:	429a      	cmp	r2, r3
 800984a:	d0a0      	beq.n	800978e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
	...

08009858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009858:	b480      	push	{r7}
 800985a:	b095      	sub	sp, #84	@ 0x54
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009868:	e853 3f00 	ldrex	r3, [r3]
 800986c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800986e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009870:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009874:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	461a      	mov	r2, r3
 800987c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800987e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009880:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009882:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009884:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009886:	e841 2300 	strex	r3, r2, [r1]
 800988a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800988c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1e6      	bne.n	8009860 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3308      	adds	r3, #8
 8009898:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989a:	6a3b      	ldr	r3, [r7, #32]
 800989c:	e853 3f00 	ldrex	r3, [r3]
 80098a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80098a2:	69fa      	ldr	r2, [r7, #28]
 80098a4:	4b1e      	ldr	r3, [pc, #120]	@ (8009920 <UART_EndRxTransfer+0xc8>)
 80098a6:	4013      	ands	r3, r2
 80098a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	3308      	adds	r3, #8
 80098b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80098b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098ba:	e841 2300 	strex	r3, r2, [r1]
 80098be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1e5      	bne.n	8009892 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d118      	bne.n	8009900 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	e853 3f00 	ldrex	r3, [r3]
 80098da:	60bb      	str	r3, [r7, #8]
   return(result);
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	f023 0310 	bic.w	r3, r3, #16
 80098e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	461a      	mov	r2, r3
 80098ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098ec:	61bb      	str	r3, [r7, #24]
 80098ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f0:	6979      	ldr	r1, [r7, #20]
 80098f2:	69ba      	ldr	r2, [r7, #24]
 80098f4:	e841 2300 	strex	r3, r2, [r1]
 80098f8:	613b      	str	r3, [r7, #16]
   return(result);
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1e6      	bne.n	80098ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2220      	movs	r2, #32
 8009904:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009914:	bf00      	nop
 8009916:	3754      	adds	r7, #84	@ 0x54
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr
 8009920:	effffffe 	.word	0xeffffffe

08009924 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009932:	2b01      	cmp	r3, #1
 8009934:	d101      	bne.n	800993a <HAL_UARTEx_DisableFifoMode+0x16>
 8009936:	2302      	movs	r3, #2
 8009938:	e027      	b.n	800998a <HAL_UARTEx_DisableFifoMode+0x66>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2201      	movs	r2, #1
 800993e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2224      	movs	r2, #36	@ 0x24
 8009946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f022 0201 	bic.w	r2, r2, #1
 8009960:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009968:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2220      	movs	r2, #32
 800997c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3714      	adds	r7, #20
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr

08009996 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b084      	sub	sp, #16
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d101      	bne.n	80099ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80099aa:	2302      	movs	r3, #2
 80099ac:	e02d      	b.n	8009a0a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2201      	movs	r2, #1
 80099b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2224      	movs	r2, #36	@ 0x24
 80099ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f022 0201 	bic.w	r2, r2, #1
 80099d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	430a      	orrs	r2, r1
 80099e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f850 	bl	8009a90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2220      	movs	r2, #32
 80099fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b084      	sub	sp, #16
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d101      	bne.n	8009a2a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a26:	2302      	movs	r3, #2
 8009a28:	e02d      	b.n	8009a86 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2224      	movs	r2, #36	@ 0x24
 8009a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f022 0201 	bic.w	r2, r2, #1
 8009a50:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	430a      	orrs	r2, r1
 8009a64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f812 	bl	8009a90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2220      	movs	r2, #32
 8009a78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
	...

08009a90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d108      	bne.n	8009ab2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ab0:	e031      	b.n	8009b16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ab2:	2310      	movs	r3, #16
 8009ab4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ab6:	2310      	movs	r3, #16
 8009ab8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	0e5b      	lsrs	r3, r3, #25
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	f003 0307 	and.w	r3, r3, #7
 8009ac8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	0f5b      	lsrs	r3, r3, #29
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	f003 0307 	and.w	r3, r3, #7
 8009ad8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ada:	7bbb      	ldrb	r3, [r7, #14]
 8009adc:	7b3a      	ldrb	r2, [r7, #12]
 8009ade:	4911      	ldr	r1, [pc, #68]	@ (8009b24 <UARTEx_SetNbDataToProcess+0x94>)
 8009ae0:	5c8a      	ldrb	r2, [r1, r2]
 8009ae2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009ae6:	7b3a      	ldrb	r2, [r7, #12]
 8009ae8:	490f      	ldr	r1, [pc, #60]	@ (8009b28 <UARTEx_SetNbDataToProcess+0x98>)
 8009aea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009aec:	fb93 f3f2 	sdiv	r3, r3, r2
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009af8:	7bfb      	ldrb	r3, [r7, #15]
 8009afa:	7b7a      	ldrb	r2, [r7, #13]
 8009afc:	4909      	ldr	r1, [pc, #36]	@ (8009b24 <UARTEx_SetNbDataToProcess+0x94>)
 8009afe:	5c8a      	ldrb	r2, [r1, r2]
 8009b00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b04:	7b7a      	ldrb	r2, [r7, #13]
 8009b06:	4908      	ldr	r1, [pc, #32]	@ (8009b28 <UARTEx_SetNbDataToProcess+0x98>)
 8009b08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009b16:	bf00      	nop
 8009b18:	3714      	adds	r7, #20
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	08009bcc 	.word	0x08009bcc
 8009b28:	08009bd4 	.word	0x08009bd4

08009b2c <memset>:
 8009b2c:	4402      	add	r2, r0
 8009b2e:	4603      	mov	r3, r0
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d100      	bne.n	8009b36 <memset+0xa>
 8009b34:	4770      	bx	lr
 8009b36:	f803 1b01 	strb.w	r1, [r3], #1
 8009b3a:	e7f9      	b.n	8009b30 <memset+0x4>

08009b3c <__libc_init_array>:
 8009b3c:	b570      	push	{r4, r5, r6, lr}
 8009b3e:	4d0d      	ldr	r5, [pc, #52]	@ (8009b74 <__libc_init_array+0x38>)
 8009b40:	4c0d      	ldr	r4, [pc, #52]	@ (8009b78 <__libc_init_array+0x3c>)
 8009b42:	1b64      	subs	r4, r4, r5
 8009b44:	10a4      	asrs	r4, r4, #2
 8009b46:	2600      	movs	r6, #0
 8009b48:	42a6      	cmp	r6, r4
 8009b4a:	d109      	bne.n	8009b60 <__libc_init_array+0x24>
 8009b4c:	4d0b      	ldr	r5, [pc, #44]	@ (8009b7c <__libc_init_array+0x40>)
 8009b4e:	4c0c      	ldr	r4, [pc, #48]	@ (8009b80 <__libc_init_array+0x44>)
 8009b50:	f000 f818 	bl	8009b84 <_init>
 8009b54:	1b64      	subs	r4, r4, r5
 8009b56:	10a4      	asrs	r4, r4, #2
 8009b58:	2600      	movs	r6, #0
 8009b5a:	42a6      	cmp	r6, r4
 8009b5c:	d105      	bne.n	8009b6a <__libc_init_array+0x2e>
 8009b5e:	bd70      	pop	{r4, r5, r6, pc}
 8009b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b64:	4798      	blx	r3
 8009b66:	3601      	adds	r6, #1
 8009b68:	e7ee      	b.n	8009b48 <__libc_init_array+0xc>
 8009b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b6e:	4798      	blx	r3
 8009b70:	3601      	adds	r6, #1
 8009b72:	e7f2      	b.n	8009b5a <__libc_init_array+0x1e>
 8009b74:	08009be4 	.word	0x08009be4
 8009b78:	08009be4 	.word	0x08009be4
 8009b7c:	08009be4 	.word	0x08009be4
 8009b80:	08009be8 	.word	0x08009be8

08009b84 <_init>:
 8009b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b86:	bf00      	nop
 8009b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b8a:	bc08      	pop	{r3}
 8009b8c:	469e      	mov	lr, r3
 8009b8e:	4770      	bx	lr

08009b90 <_fini>:
 8009b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b92:	bf00      	nop
 8009b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b96:	bc08      	pop	{r3}
 8009b98:	469e      	mov	lr, r3
 8009b9a:	4770      	bx	lr
