
Esponenziale_secondo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f18  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080061b0  080061b0  000071b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080061e8  080061e8  000071e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080061f0  080061f0  000071f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080061f4  080061f4  000071f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  080061f8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000eb8  24000064  0800625c  00008064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000f1c  0800625c  00008f1c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013be1  00000000  00000000  00008092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000279e  00000000  00000000  0001bc73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dd8  00000000  00000000  0001e418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a99  00000000  00000000  0001f1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036e90  00000000  00000000  0001fc89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013a7e  00000000  00000000  00056b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00158774  00000000  00000000  0006a597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c2d0b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003c88  00000000  00000000  001c2d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000094  00000000  00000000  001c69d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000064 	.word	0x24000064
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006198 	.word	0x08006198

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000068 	.word	0x24000068
 80002d4:	08006198 	.word	0x08006198

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <init_usart3>:

uint16_t data_buffer[1000];
unsigned char* data_buffer_8bit = (unsigned char*)data_buffer;
int data_index=0;

void init_usart3(){
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

    USART3->CR1 |= USART_CR1_TE;
 80005cc:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <init_usart3+0x4c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a10      	ldr	r2, [pc, #64]	@ (8000614 <init_usart3+0x4c>)
 80005d2:	f043 0308 	orr.w	r3, r3, #8
 80005d6:	6013      	str	r3, [r2, #0]
    USART3->CR1 |= USART_CR1_RE;
 80005d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <init_usart3+0x4c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000614 <init_usart3+0x4c>)
 80005de:	f043 0304 	orr.w	r3, r3, #4
 80005e2:	6013      	str	r3, [r2, #0]

    USART3->CR1 &= ~USART_CR1_TXEIE;
 80005e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <init_usart3+0x4c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000614 <init_usart3+0x4c>)
 80005ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80005ee:	6013      	str	r3, [r2, #0]
    USART3->CR1 |= USART_CR1_RXNEIE;
 80005f0:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <init_usart3+0x4c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a07      	ldr	r2, [pc, #28]	@ (8000614 <init_usart3+0x4c>)
 80005f6:	f043 0320 	orr.w	r3, r3, #32
 80005fa:	6013      	str	r3, [r2, #0]

    USART3->CR1 |= USART_CR1_UE;
 80005fc:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <init_usart3+0x4c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a04      	ldr	r2, [pc, #16]	@ (8000614 <init_usart3+0x4c>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6013      	str	r3, [r2, #0]
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40004800 	.word	0x40004800

08000618 <usart3_interrupt>:

void usart3_interrupt(){
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0

	if(USART3->ISR & USART_ISR_RXNE_RXFNE){
 800061e:	4b34      	ldr	r3, [pc, #208]	@ (80006f0 <usart3_interrupt+0xd8>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 0320 	and.w	r3, r3, #32
 8000626:	2b00      	cmp	r3, #0
 8000628:	d01d      	beq.n	8000666 <usart3_interrupt+0x4e>
		if(USART3->ISR & USART_ISR_TXE_TXFNF){
 800062a:	4b31      	ldr	r3, [pc, #196]	@ (80006f0 <usart3_interrupt+0xd8>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000632:	2b00      	cmp	r3, #0
 8000634:	d017      	beq.n	8000666 <usart3_interrupt+0x4e>

			char received_data = USART3->RDR;
 8000636:	4b2e      	ldr	r3, [pc, #184]	@ (80006f0 <usart3_interrupt+0xd8>)
 8000638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800063a:	71fb      	strb	r3, [r7, #7]

//			USART3->CR1 &= ~USART_CR1_TXEIE;

			if(received_data=='e'){
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b65      	cmp	r3, #101	@ 0x65
 8000640:	d111      	bne.n	8000666 <usart3_interrupt+0x4e>
                data_index=0;
 8000642:	4b2c      	ldr	r3, [pc, #176]	@ (80006f4 <usart3_interrupt+0xdc>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]

				// FUNC() GENERA VETTORE DI DATI SE NECESSARIO
                genera_vett_esp(data_buffer, (int)SIZE_OF_BUFF(data_buffer), 0, 0);
 8000648:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 80006e8 <usart3_interrupt+0xd0>
 800064c:	ed9f 0b26 	vldr	d0, [pc, #152]	@ 80006e8 <usart3_interrupt+0xd0>
 8000650:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000654:	4828      	ldr	r0, [pc, #160]	@ (80006f8 <usart3_interrupt+0xe0>)
 8000656:	f000 f86f 	bl	8000738 <genera_vett_esp>
                
                USART3->CR1 |= USART_CR1_TXEIE;
 800065a:	4b25      	ldr	r3, [pc, #148]	@ (80006f0 <usart3_interrupt+0xd8>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a24      	ldr	r2, [pc, #144]	@ (80006f0 <usart3_interrupt+0xd8>)
 8000660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000664:	6013      	str	r3, [r2, #0]
			}
		}
	}

	if((USART3->ISR & USART_ISR_TXE_TXFNF) && (USART3->CR1 & USART_CR1_TXEIE) && !(USART3->ISR & USART_ISR_RXNE_RXFNE)){
 8000666:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <usart3_interrupt+0xd8>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800066e:	2b00      	cmp	r3, #0
 8000670:	d024      	beq.n	80006bc <usart3_interrupt+0xa4>
 8000672:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <usart3_interrupt+0xd8>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800067a:	2b00      	cmp	r3, #0
 800067c:	d01e      	beq.n	80006bc <usart3_interrupt+0xa4>
 800067e:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <usart3_interrupt+0xd8>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	f003 0320 	and.w	r3, r3, #32
 8000686:	2b00      	cmp	r3, #0
 8000688:	d118      	bne.n	80006bc <usart3_interrupt+0xa4>

        if(data_index < 1000 * sizeof(data_buffer[0])){
 800068a:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <usart3_interrupt+0xdc>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000692:	d20d      	bcs.n	80006b0 <usart3_interrupt+0x98>

            USART3->TDR = data_buffer_8bit[data_index];
 8000694:	4b19      	ldr	r3, [pc, #100]	@ (80006fc <usart3_interrupt+0xe4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a16      	ldr	r2, [pc, #88]	@ (80006f4 <usart3_interrupt+0xdc>)
 800069a:	6812      	ldr	r2, [r2, #0]
 800069c:	4413      	add	r3, r2
 800069e:	781a      	ldrb	r2, [r3, #0]
 80006a0:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <usart3_interrupt+0xd8>)
 80006a2:	629a      	str	r2, [r3, #40]	@ 0x28
            ++data_index;
 80006a4:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <usart3_interrupt+0xdc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a12      	ldr	r2, [pc, #72]	@ (80006f4 <usart3_interrupt+0xdc>)
 80006ac:	6013      	str	r3, [r2, #0]
 80006ae:	e005      	b.n	80006bc <usart3_interrupt+0xa4>
        }else{
            USART3->CR1 &= ~USART_CR1_TXEIE_TXFNFIE;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <usart3_interrupt+0xd8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a0e      	ldr	r2, [pc, #56]	@ (80006f0 <usart3_interrupt+0xd8>)
 80006b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80006ba:	6013      	str	r3, [r2, #0]
        }
	}

	USART3->ICR |= USART_ICR_ORECF; //Cancella l'overrun. Capita quando si entra in debug
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <usart3_interrupt+0xd8>)
 80006be:	6a1b      	ldr	r3, [r3, #32]
 80006c0:	4a0b      	ldr	r2, [pc, #44]	@ (80006f0 <usart3_interrupt+0xd8>)
 80006c2:	f043 0308 	orr.w	r3, r3, #8
 80006c6:	6213      	str	r3, [r2, #32]
	USART3->ICR |= USART_ICR_TCCF;  //Azzeramento flag interrupt trasmissione
 80006c8:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <usart3_interrupt+0xd8>)
 80006ca:	6a1b      	ldr	r3, [r3, #32]
 80006cc:	4a08      	ldr	r2, [pc, #32]	@ (80006f0 <usart3_interrupt+0xd8>)
 80006ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006d2:	6213      	str	r3, [r2, #32]
	USART3->RQR |= USART_RQR_RXFRQ;  //Azzeramento flag interrupt ricezione
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <usart3_interrupt+0xd8>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a05      	ldr	r2, [pc, #20]	@ (80006f0 <usart3_interrupt+0xd8>)
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	6193      	str	r3, [r2, #24]
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
	...
 80006f0:	40004800 	.word	0x40004800
 80006f4:	24000850 	.word	0x24000850
 80006f8:	24000080 	.word	0x24000080
 80006fc:	24000000 	.word	0x24000000

08000700 <init_exp_buff>:
 *      Author: yehan
 */
#include "Esponenziale.h"


void init_exp_buff(uint16_t* buff, int length){
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
	for(int i=0; i<length; ++i)
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	e008      	b.n	8000722 <init_exp_buff+0x22>
		buff[i] = 0;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<length; ++i)
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	3301      	adds	r3, #1
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	429a      	cmp	r2, r3
 8000728:	dbf2      	blt.n	8000710 <init_exp_buff+0x10>
}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <genera_vett_esp>:

void genera_vett_esp(uint16_t* buff, int length, double tau1, double tau2){
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	@ 0x30
 800073c:	af00      	add	r7, sp, #0
 800073e:	6178      	str	r0, [r7, #20]
 8000740:	6139      	str	r1, [r7, #16]
 8000742:	ed87 0b02 	vstr	d0, [r7, #8]
 8000746:	ed87 1b00 	vstr	d1, [r7]

	init_exp_buff(buff,length);	// Vengono settate tutte le entreate a 0
 800074a:	6939      	ldr	r1, [r7, #16]
 800074c:	6978      	ldr	r0, [r7, #20]
 800074e:	f7ff ffd7 	bl	8000700 <init_exp_buff>

	// Allocazione di memoria per i due esponenziali
	uint16_t* buff_1 = (uint16_t*)malloc(sizeof(uint16_t)*length);
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	4618      	mov	r0, r3
 8000758:	f005 fbd2 	bl	8005f00 <malloc>
 800075c:	4603      	mov	r3, r0
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t* buff_2 = (uint16_t*)malloc(sizeof(uint16_t)*length);
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	4618      	mov	r0, r3
 8000766:	f005 fbcb 	bl	8005f00 <malloc>
 800076a:	4603      	mov	r3, r0
 800076c:	623b      	str	r3, [r7, #32]

	// Settaggio delle costanti di tempo caratteristico
	uint16_t const_1 = 957;
 800076e:	f240 33bd 	movw	r3, #957	@ 0x3bd
 8000772:	83fb      	strh	r3, [r7, #30]
	uint16_t const_2 = 926;
 8000774:	f240 339e 	movw	r3, #926	@ 0x39e
 8000778:	83bb      	strh	r3, [r7, #28]

	// Settaggio valori iniziali
	buff_1[0] = 25000;
 800077a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800077c:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8000780:	801a      	strh	r2, [r3, #0]
	buff_2[0] = 25000;
 8000782:	6a3b      	ldr	r3, [r7, #32]
 8000784:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8000788:	801a      	strh	r2, [r3, #0]

	for(int i=1; i<length; ++i){
 800078a:	2301      	movs	r3, #1
 800078c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800078e:	e028      	b.n	80007e2 <genera_vett_esp+0xaa>
		buff_1[i] = (buff_1[i-1] * const_1) >> 10;
 8000790:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000792:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8000796:	4413      	add	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800079c:	4413      	add	r3, r2
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	8bfb      	ldrh	r3, [r7, #30]
 80007a4:	fb02 f303 	mul.w	r3, r2, r3
 80007a8:	1299      	asrs	r1, r3, #10
 80007aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007b0:	4413      	add	r3, r2
 80007b2:	b28a      	uxth	r2, r1
 80007b4:	801a      	strh	r2, [r3, #0]
		buff_2[i] = (buff_2[i-1] * const_2) >> 10;
 80007b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007b8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80007bc:	4413      	add	r3, r2
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	6a3a      	ldr	r2, [r7, #32]
 80007c2:	4413      	add	r3, r2
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	461a      	mov	r2, r3
 80007c8:	8bbb      	ldrh	r3, [r7, #28]
 80007ca:	fb02 f303 	mul.w	r3, r2, r3
 80007ce:	1299      	asrs	r1, r3, #10
 80007d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	6a3a      	ldr	r2, [r7, #32]
 80007d6:	4413      	add	r3, r2
 80007d8:	b28a      	uxth	r2, r1
 80007da:	801a      	strh	r2, [r3, #0]
	for(int i=1; i<length; ++i){
 80007dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007de:	3301      	adds	r3, #1
 80007e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	dbd2      	blt.n	8000790 <genera_vett_esp+0x58>
	}

	for(int i=0; i<length; ++i)
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007ee:	e013      	b.n	8000818 <genera_vett_esp+0xe0>
		buff[i] = buff_1[i]-buff_2[i];
 80007f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007f6:	4413      	add	r3, r2
 80007f8:	8819      	ldrh	r1, [r3, #0]
 80007fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	6a3a      	ldr	r2, [r7, #32]
 8000800:	4413      	add	r3, r2
 8000802:	881a      	ldrh	r2, [r3, #0]
 8000804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	6978      	ldr	r0, [r7, #20]
 800080a:	4403      	add	r3, r0
 800080c:	1a8a      	subs	r2, r1, r2
 800080e:	b292      	uxth	r2, r2
 8000810:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<length; ++i)
 8000812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000814:	3301      	adds	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000818:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	429a      	cmp	r2, r3
 800081e:	dbe7      	blt.n	80007f0 <genera_vett_esp+0xb8>

	free(buff_1);
 8000820:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000822:	f005 fb75 	bl	8005f10 <free>
	free(buff_2);
 8000826:	6a38      	ldr	r0, [r7, #32]
 8000828:	f005 fb72 	bl	8005f10 <free>
}
 800082c:	bf00      	nop
 800082e:	3730      	adds	r7, #48	@ 0x30
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f000 fc56 	bl	80010e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f80a 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f000 f906 	bl	8000a50 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000844:	f000 f886 	bl	8000954 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000848:	f000 f8d0 	bl	80009ec <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  init_usart3();
 800084c:	f7ff febc 	bl	80005c8 <init_usart3>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <main+0x1c>

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b09c      	sub	sp, #112	@ 0x70
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085e:	224c      	movs	r2, #76	@ 0x4c
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f005 fc0a 	bl	800607c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2220      	movs	r2, #32
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f005 fc04 	bl	800607c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000874:	2002      	movs	r0, #2
 8000876:	f001 f903 	bl	8001a80 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b33      	ldr	r3, [pc, #204]	@ (800094c <SystemClock_Config+0xf8>)
 8000880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000882:	4a32      	ldr	r2, [pc, #200]	@ (800094c <SystemClock_Config+0xf8>)
 8000884:	f023 0301 	bic.w	r3, r3, #1
 8000888:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800088a:	4b30      	ldr	r3, [pc, #192]	@ (800094c <SystemClock_Config+0xf8>)
 800088c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	4b2e      	ldr	r3, [pc, #184]	@ (8000950 <SystemClock_Config+0xfc>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800089c:	4a2c      	ldr	r2, [pc, #176]	@ (8000950 <SystemClock_Config+0xfc>)
 800089e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000950 <SystemClock_Config+0xfc>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008b0:	bf00      	nop
 80008b2:	4b27      	ldr	r3, [pc, #156]	@ (8000950 <SystemClock_Config+0xfc>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008be:	d1f8      	bne.n	80008b2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008c0:	2303      	movs	r3, #3
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008c4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ce:	2340      	movs	r3, #64	@ 0x40
 80008d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d2:	2302      	movs	r3, #2
 80008d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d6:	2302      	movs	r3, #2
 80008d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008da:	2301      	movs	r3, #1
 80008dc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008de:	2318      	movs	r3, #24
 80008e0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e6:	2304      	movs	r3, #4
 80008e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008ee:	230c      	movs	r3, #12
 80008f0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 f908 	bl	8001b14 <HAL_RCC_OscConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800090a:	f000 f9c1 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090e:	233f      	movs	r3, #63	@ 0x3f
 8000910:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2101      	movs	r1, #1
 8000932:	4618      	mov	r0, r3
 8000934:	f001 fd48 	bl	80023c8 <HAL_RCC_ClockConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800093e:	f000 f9a7 	bl	8000c90 <Error_Handler>
  }
}
 8000942:	bf00      	nop
 8000944:	3770      	adds	r7, #112	@ 0x70
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	58000400 	.word	0x58000400
 8000950:	58024800 	.word	0x58024800

08000954 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000958:	4b22      	ldr	r3, [pc, #136]	@ (80009e4 <MX_USART3_UART_Init+0x90>)
 800095a:	4a23      	ldr	r2, [pc, #140]	@ (80009e8 <MX_USART3_UART_Init+0x94>)
 800095c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800095e:	4b21      	ldr	r3, [pc, #132]	@ (80009e4 <MX_USART3_UART_Init+0x90>)
 8000960:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000964:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b1f      	ldr	r3, [pc, #124]	@ (80009e4 <MX_USART3_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <MX_USART3_UART_Init+0x90>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000972:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <MX_USART3_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <MX_USART3_UART_Init+0x90>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <MX_USART3_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <MX_USART3_UART_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098a:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <MX_USART3_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000990:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <MX_USART3_UART_Init+0x90>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000996:	4b13      	ldr	r3, [pc, #76]	@ (80009e4 <MX_USART3_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800099c:	4811      	ldr	r0, [pc, #68]	@ (80009e4 <MX_USART3_UART_Init+0x90>)
 800099e:	f003 fecb 	bl	8004738 <HAL_UART_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009a8:	f000 f972 	bl	8000c90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ac:	2100      	movs	r1, #0
 80009ae:	480d      	ldr	r0, [pc, #52]	@ (80009e4 <MX_USART3_UART_Init+0x90>)
 80009b0:	f004 fed3 	bl	800575a <HAL_UARTEx_SetTxFifoThreshold>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009ba:	f000 f969 	bl	8000c90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009be:	2100      	movs	r1, #0
 80009c0:	4808      	ldr	r0, [pc, #32]	@ (80009e4 <MX_USART3_UART_Init+0x90>)
 80009c2:	f004 ff08 	bl	80057d6 <HAL_UARTEx_SetRxFifoThreshold>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009cc:	f000 f960 	bl	8000c90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009d0:	4804      	ldr	r0, [pc, #16]	@ (80009e4 <MX_USART3_UART_Init+0x90>)
 80009d2:	f004 fe89 	bl	80056e8 <HAL_UARTEx_DisableFifoMode>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009dc:	f000 f958 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	24000854 	.word	0x24000854
 80009e8:	40004800 	.word	0x40004800

080009ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009f0:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f2:	4a16      	ldr	r2, [pc, #88]	@ (8000a4c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80009f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80009f6:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f8:	2209      	movs	r2, #9
 80009fa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009fe:	2202      	movs	r2, #2
 8000a00:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a02:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a20:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a34:	f000 fef3 	bl	800181e <HAL_PCD_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a3e:	f000 f927 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	240008e8 	.word	0x240008e8
 8000a4c:	40080000 	.word	0x40080000

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08c      	sub	sp, #48	@ 0x30
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	4b83      	ldr	r3, [pc, #524]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6c:	4a81      	ldr	r2, [pc, #516]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000a6e:	f043 0304 	orr.w	r3, r3, #4
 8000a72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a76:	4b7f      	ldr	r3, [pc, #508]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	61bb      	str	r3, [r7, #24]
 8000a82:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a84:	4b7b      	ldr	r3, [pc, #492]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8a:	4a7a      	ldr	r2, [pc, #488]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a94:	4b77      	ldr	r3, [pc, #476]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b74      	ldr	r3, [pc, #464]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa8:	4a72      	ldr	r2, [pc, #456]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab2:	4b70      	ldr	r3, [pc, #448]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac0:	4b6c      	ldr	r3, [pc, #432]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac6:	4a6b      	ldr	r2, [pc, #428]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad0:	4b68      	ldr	r3, [pc, #416]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	4b65      	ldr	r3, [pc, #404]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae4:	4a63      	ldr	r2, [pc, #396]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000ae6:	f043 0308 	orr.w	r3, r3, #8
 8000aea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aee:	4b61      	ldr	r3, [pc, #388]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af4:	f003 0308 	and.w	r3, r3, #8
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000afc:	4b5d      	ldr	r3, [pc, #372]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b02:	4a5c      	ldr	r2, [pc, #368]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0c:	4b59      	ldr	r3, [pc, #356]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1a:	4b56      	ldr	r3, [pc, #344]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b20:	4a54      	ldr	r2, [pc, #336]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b2a:	4b52      	ldr	r3, [pc, #328]	@ (8000c74 <MX_GPIO_Init+0x224>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b30:	f003 0310 	and.w	r3, r3, #16
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b3e:	484e      	ldr	r0, [pc, #312]	@ (8000c78 <MX_GPIO_Init+0x228>)
 8000b40:	f000 fe54 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b4a:	484c      	ldr	r0, [pc, #304]	@ (8000c7c <MX_GPIO_Init+0x22c>)
 8000b4c:	f000 fe4e 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2102      	movs	r1, #2
 8000b54:	484a      	ldr	r0, [pc, #296]	@ (8000c80 <MX_GPIO_Init+0x230>)
 8000b56:	f000 fe49 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4845      	ldr	r0, [pc, #276]	@ (8000c84 <MX_GPIO_Init+0x234>)
 8000b70:	f000 fc8c 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b74:	2332      	movs	r3, #50	@ 0x32
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b84:	230b      	movs	r3, #11
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	483d      	ldr	r0, [pc, #244]	@ (8000c84 <MX_GPIO_Init+0x234>)
 8000b90:	f000 fc7c 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b94:	2386      	movs	r3, #134	@ 0x86
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba4:	230b      	movs	r3, #11
 8000ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	4836      	ldr	r0, [pc, #216]	@ (8000c88 <MX_GPIO_Init+0x238>)
 8000bb0:	f000 fc6c 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bb4:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	482a      	ldr	r0, [pc, #168]	@ (8000c78 <MX_GPIO_Init+0x228>)
 8000bce:	f000 fc5d 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be4:	230b      	movs	r3, #11
 8000be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4822      	ldr	r0, [pc, #136]	@ (8000c78 <MX_GPIO_Init+0x228>)
 8000bf0:	f000 fc4c 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000bf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	481b      	ldr	r0, [pc, #108]	@ (8000c7c <MX_GPIO_Init+0x22c>)
 8000c0e:	f000 fc3d 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c12:	2380      	movs	r3, #128	@ 0x80
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c16:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	4619      	mov	r1, r3
 8000c26:	4819      	ldr	r0, [pc, #100]	@ (8000c8c <MX_GPIO_Init+0x23c>)
 8000c28:	f000 fc30 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c2c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c3e:	230b      	movs	r3, #11
 8000c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4810      	ldr	r0, [pc, #64]	@ (8000c8c <MX_GPIO_Init+0x23c>)
 8000c4a:	f000 fc1f 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	4806      	ldr	r0, [pc, #24]	@ (8000c80 <MX_GPIO_Init+0x230>)
 8000c66:	f000 fc11 	bl	800148c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3730      	adds	r7, #48	@ 0x30
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	58024400 	.word	0x58024400
 8000c78:	58020400 	.word	0x58020400
 8000c7c:	58020c00 	.word	0x58020c00
 8000c80:	58021000 	.word	0x58021000
 8000c84:	58020800 	.word	0x58020800
 8000c88:	58020000 	.word	0x58020000
 8000c8c:	58021800 	.word	0x58021800

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <Error_Handler+0x8>

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <HAL_MspInit+0x30>)
 8000ca4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ca8:	4a08      	ldr	r2, [pc, #32]	@ (8000ccc <HAL_MspInit+0x30>)
 8000caa:	f043 0302 	orr.w	r3, r3, #2
 8000cae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <HAL_MspInit+0x30>)
 8000cb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	58024400 	.word	0x58024400

08000cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b0ba      	sub	sp, #232	@ 0xe8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	22c0      	movs	r2, #192	@ 0xc0
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f005 f9c3 	bl	800607c <memset>
  if(huart->Instance==USART3)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a2b      	ldr	r2, [pc, #172]	@ (8000da8 <HAL_UART_MspInit+0xd8>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d14e      	bne.n	8000d9e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d00:	f04f 0202 	mov.w	r2, #2
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d12:	f107 0310 	add.w	r3, r7, #16
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 fee2 	bl	8002ae0 <HAL_RCCEx_PeriphCLKConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d22:	f7ff ffb5 	bl	8000c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d26:	4b21      	ldr	r3, [pc, #132]	@ (8000dac <HAL_UART_MspInit+0xdc>)
 8000d28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d2c:	4a1f      	ldr	r2, [pc, #124]	@ (8000dac <HAL_UART_MspInit+0xdc>)
 8000d2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d36:	4b1d      	ldr	r3, [pc, #116]	@ (8000dac <HAL_UART_MspInit+0xdc>)
 8000d38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d44:	4b19      	ldr	r3, [pc, #100]	@ (8000dac <HAL_UART_MspInit+0xdc>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4a:	4a18      	ldr	r2, [pc, #96]	@ (8000dac <HAL_UART_MspInit+0xdc>)
 8000d4c:	f043 0308 	orr.w	r3, r3, #8
 8000d50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d54:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <HAL_UART_MspInit+0xdc>)
 8000d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d82:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d86:	4619      	mov	r1, r3
 8000d88:	4809      	ldr	r0, [pc, #36]	@ (8000db0 <HAL_UART_MspInit+0xe0>)
 8000d8a:	f000 fb7f 	bl	800148c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2100      	movs	r1, #0
 8000d92:	2027      	movs	r0, #39	@ 0x27
 8000d94:	f000 fb45 	bl	8001422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d98:	2027      	movs	r0, #39	@ 0x27
 8000d9a:	f000 fb5c 	bl	8001456 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000d9e:	bf00      	nop
 8000da0:	37e8      	adds	r7, #232	@ 0xe8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40004800 	.word	0x40004800
 8000dac:	58024400 	.word	0x58024400
 8000db0:	58020c00 	.word	0x58020c00

08000db4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b0ba      	sub	sp, #232	@ 0xe8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	22c0      	movs	r2, #192	@ 0xc0
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f005 f951 	bl	800607c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a30      	ldr	r2, [pc, #192]	@ (8000ea0 <HAL_PCD_MspInit+0xec>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d159      	bne.n	8000e98 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000de4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000df0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000df4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f001 fe6f 	bl	8002ae0 <HAL_RCCEx_PeriphCLKConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000e08:	f7ff ff42 	bl	8000c90 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e0c:	f000 fe72 	bl	8001af4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b24      	ldr	r3, [pc, #144]	@ (8000ea4 <HAL_PCD_MspInit+0xf0>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	4a23      	ldr	r2, [pc, #140]	@ (8000ea4 <HAL_PCD_MspInit+0xf0>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e20:	4b20      	ldr	r3, [pc, #128]	@ (8000ea4 <HAL_PCD_MspInit+0xf0>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e2e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000e32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e48:	230a      	movs	r3, #10
 8000e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e52:	4619      	mov	r1, r3
 8000e54:	4814      	ldr	r0, [pc, #80]	@ (8000ea8 <HAL_PCD_MspInit+0xf4>)
 8000e56:	f000 fb19 	bl	800148c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e72:	4619      	mov	r1, r3
 8000e74:	480c      	ldr	r0, [pc, #48]	@ (8000ea8 <HAL_PCD_MspInit+0xf4>)
 8000e76:	f000 fb09 	bl	800148c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_PCD_MspInit+0xf0>)
 8000e7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e80:	4a08      	ldr	r2, [pc, #32]	@ (8000ea4 <HAL_PCD_MspInit+0xf0>)
 8000e82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e86:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_PCD_MspInit+0xf0>)
 8000e8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000e98:	bf00      	nop
 8000e9a:	37e8      	adds	r7, #232	@ 0xe8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40080000 	.word	0x40080000
 8000ea4:	58024400 	.word	0x58024400
 8000ea8:	58020000 	.word	0x58020000

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f02:	f000 f963 	bl	80011cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	usart3_interrupt();
 8000f0e:	f7ff fb83 	bl	8000618 <usart3_interrupt>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f20:	4a14      	ldr	r2, [pc, #80]	@ (8000f74 <_sbrk+0x5c>)
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <_sbrk+0x60>)
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f2c:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <_sbrk+0x64>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <_sbrk+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d207      	bcs.n	8000f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f48:	f005 f8b0 	bl	80060ac <__errno>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	220c      	movs	r2, #12
 8000f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e009      	b.n	8000f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <_sbrk+0x64>)
 8000f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	24080000 	.word	0x24080000
 8000f78:	00000400 	.word	0x00000400
 8000f7c:	24000dcc 	.word	0x24000dcc
 8000f80:	24000f20 	.word	0x24000f20

08000f84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f88:	4b37      	ldr	r3, [pc, #220]	@ (8001068 <SystemInit+0xe4>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f8e:	4a36      	ldr	r2, [pc, #216]	@ (8001068 <SystemInit+0xe4>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f98:	4b34      	ldr	r3, [pc, #208]	@ (800106c <SystemInit+0xe8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 030f 	and.w	r3, r3, #15
 8000fa0:	2b06      	cmp	r3, #6
 8000fa2:	d807      	bhi.n	8000fb4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fa4:	4b31      	ldr	r3, [pc, #196]	@ (800106c <SystemInit+0xe8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f023 030f 	bic.w	r3, r3, #15
 8000fac:	4a2f      	ldr	r2, [pc, #188]	@ (800106c <SystemInit+0xe8>)
 8000fae:	f043 0307 	orr.w	r3, r3, #7
 8000fb2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fb4:	4b2e      	ldr	r3, [pc, #184]	@ (8001070 <SystemInit+0xec>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8001070 <SystemInit+0xec>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8001070 <SystemInit+0xec>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001070 <SystemInit+0xec>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	4929      	ldr	r1, [pc, #164]	@ (8001070 <SystemInit+0xec>)
 8000fcc:	4b29      	ldr	r3, [pc, #164]	@ (8001074 <SystemInit+0xf0>)
 8000fce:	4013      	ands	r3, r2
 8000fd0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fd2:	4b26      	ldr	r3, [pc, #152]	@ (800106c <SystemInit+0xe8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d007      	beq.n	8000fee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fde:	4b23      	ldr	r3, [pc, #140]	@ (800106c <SystemInit+0xe8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f023 030f 	bic.w	r3, r3, #15
 8000fe6:	4a21      	ldr	r2, [pc, #132]	@ (800106c <SystemInit+0xe8>)
 8000fe8:	f043 0307 	orr.w	r3, r3, #7
 8000fec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fee:	4b20      	ldr	r3, [pc, #128]	@ (8001070 <SystemInit+0xec>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8001070 <SystemInit+0xec>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8001070 <SystemInit+0xec>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001000:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <SystemInit+0xec>)
 8001002:	4a1d      	ldr	r2, [pc, #116]	@ (8001078 <SystemInit+0xf4>)
 8001004:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001006:	4b1a      	ldr	r3, [pc, #104]	@ (8001070 <SystemInit+0xec>)
 8001008:	4a1c      	ldr	r2, [pc, #112]	@ (800107c <SystemInit+0xf8>)
 800100a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800100c:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <SystemInit+0xec>)
 800100e:	4a1c      	ldr	r2, [pc, #112]	@ (8001080 <SystemInit+0xfc>)
 8001010:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001012:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <SystemInit+0xec>)
 8001014:	2200      	movs	r2, #0
 8001016:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001018:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <SystemInit+0xec>)
 800101a:	4a19      	ldr	r2, [pc, #100]	@ (8001080 <SystemInit+0xfc>)
 800101c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800101e:	4b14      	ldr	r3, [pc, #80]	@ (8001070 <SystemInit+0xec>)
 8001020:	2200      	movs	r2, #0
 8001022:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <SystemInit+0xec>)
 8001026:	4a16      	ldr	r2, [pc, #88]	@ (8001080 <SystemInit+0xfc>)
 8001028:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800102a:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <SystemInit+0xec>)
 800102c:	2200      	movs	r2, #0
 800102e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001030:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <SystemInit+0xec>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0e      	ldr	r2, [pc, #56]	@ (8001070 <SystemInit+0xec>)
 8001036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800103a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800103c:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <SystemInit+0xec>)
 800103e:	2200      	movs	r2, #0
 8001040:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001042:	4b10      	ldr	r3, [pc, #64]	@ (8001084 <SystemInit+0x100>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <SystemInit+0x104>)
 8001048:	4013      	ands	r3, r2
 800104a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800104e:	d202      	bcs.n	8001056 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001050:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <SystemInit+0x108>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001056:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <SystemInit+0x10c>)
 8001058:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800105c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00
 800106c:	52002000 	.word	0x52002000
 8001070:	58024400 	.word	0x58024400
 8001074:	eaf6ed7f 	.word	0xeaf6ed7f
 8001078:	02020200 	.word	0x02020200
 800107c:	01ff0000 	.word	0x01ff0000
 8001080:	01010280 	.word	0x01010280
 8001084:	5c001000 	.word	0x5c001000
 8001088:	ffff0000 	.word	0xffff0000
 800108c:	51008108 	.word	0x51008108
 8001090:	52004000 	.word	0x52004000

08001094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001094:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001098:	f7ff ff74 	bl	8000f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800109c:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800109e:	490d      	ldr	r1, [pc, #52]	@ (80010d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a0:	4a0d      	ldr	r2, [pc, #52]	@ (80010d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b4:	4c0a      	ldr	r4, [pc, #40]	@ (80010e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c2:	f004 fff9 	bl	80060b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c6:	f7ff fbb5 	bl	8000834 <main>
  bx  lr
 80010ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010cc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010d4:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80010d8:	080061f8 	.word	0x080061f8
  ldr r2, =_sbss
 80010dc:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 80010e0:	24000f1c 	.word	0x24000f1c

080010e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC3_IRQHandler>
	...

080010e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ee:	2003      	movs	r0, #3
 80010f0:	f000 f98c 	bl	800140c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010f4:	f001 fb1e 	bl	8002734 <HAL_RCC_GetSysClockFreq>
 80010f8:	4602      	mov	r2, r0
 80010fa:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <HAL_Init+0x68>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	0a1b      	lsrs	r3, r3, #8
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	4913      	ldr	r1, [pc, #76]	@ (8001154 <HAL_Init+0x6c>)
 8001106:	5ccb      	ldrb	r3, [r1, r3]
 8001108:	f003 031f 	and.w	r3, r3, #31
 800110c:	fa22 f303 	lsr.w	r3, r2, r3
 8001110:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001112:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <HAL_Init+0x68>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	4a0e      	ldr	r2, [pc, #56]	@ (8001154 <HAL_Init+0x6c>)
 800111c:	5cd3      	ldrb	r3, [r2, r3]
 800111e:	f003 031f 	and.w	r3, r3, #31
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	fa22 f303 	lsr.w	r3, r2, r3
 8001128:	4a0b      	ldr	r2, [pc, #44]	@ (8001158 <HAL_Init+0x70>)
 800112a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800112c:	4a0b      	ldr	r2, [pc, #44]	@ (800115c <HAL_Init+0x74>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f814 	bl	8001160 <HAL_InitTick>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e002      	b.n	8001148 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001142:	f7ff fdab 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	58024400 	.word	0x58024400
 8001154:	080061b0 	.word	0x080061b0
 8001158:	24000008 	.word	0x24000008
 800115c:	24000004 	.word	0x24000004

08001160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001168:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <HAL_InitTick+0x60>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e021      	b.n	80011b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <HAL_InitTick+0x64>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <HAL_InitTick+0x60>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4619      	mov	r1, r3
 800117e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001182:	fbb3 f3f1 	udiv	r3, r3, r1
 8001186:	fbb2 f3f3 	udiv	r3, r2, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f971 	bl	8001472 <HAL_SYSTICK_Config>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e00e      	b.n	80011b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d80a      	bhi.n	80011b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f000 f93b 	bl	8001422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ac:	4a06      	ldr	r2, [pc, #24]	@ (80011c8 <HAL_InitTick+0x68>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e000      	b.n	80011b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	24000010 	.word	0x24000010
 80011c4:	24000004 	.word	0x24000004
 80011c8:	2400000c 	.word	0x2400000c

080011cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <HAL_IncTick+0x20>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_IncTick+0x24>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	@ (80011f0 <HAL_IncTick+0x24>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	24000010 	.word	0x24000010
 80011f0:	24000dd0 	.word	0x24000dd0

080011f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b03      	ldr	r3, [pc, #12]	@ (8001208 <HAL_GetTick+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	24000dd0 	.word	0x24000dd0

0800120c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff ffee 	bl	80011f4 <HAL_GetTick>
 8001218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001224:	d005      	beq.n	8001232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001226:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <HAL_Delay+0x44>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001232:	bf00      	nop
 8001234:	f7ff ffde 	bl	80011f4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d8f7      	bhi.n	8001234 <HAL_Delay+0x28>
  {
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	24000010 	.word	0x24000010

08001254 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001258:	4b03      	ldr	r3, [pc, #12]	@ (8001268 <HAL_GetREVID+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	0c1b      	lsrs	r3, r3, #16
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	5c001000 	.word	0x5c001000

0800126c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800127c:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <__NVIC_SetPriorityGrouping+0x40>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001288:	4013      	ands	r3, r2
 800128a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	4313      	orrs	r3, r2
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	@ (80012ac <__NVIC_SetPriorityGrouping+0x40>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00
 80012b0:	05fa0000 	.word	0x05fa0000

080012b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b8:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <__NVIC_GetPriorityGrouping+0x18>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	f003 0307 	and.w	r3, r3, #7
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	db0b      	blt.n	80012fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	f003 021f 	and.w	r2, r3, #31
 80012e8:	4907      	ldr	r1, [pc, #28]	@ (8001308 <__NVIC_EnableIRQ+0x38>)
 80012ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ee:	095b      	lsrs	r3, r3, #5
 80012f0:	2001      	movs	r0, #1
 80012f2:	fa00 f202 	lsl.w	r2, r0, r2
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000e100 	.word	0xe000e100

0800130c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001318:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800131c:	2b00      	cmp	r3, #0
 800131e:	db0a      	blt.n	8001336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	490c      	ldr	r1, [pc, #48]	@ (8001358 <__NVIC_SetPriority+0x4c>)
 8001326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132a:	0112      	lsls	r2, r2, #4
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	440b      	add	r3, r1
 8001330:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001334:	e00a      	b.n	800134c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4908      	ldr	r1, [pc, #32]	@ (800135c <__NVIC_SetPriority+0x50>)
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	3b04      	subs	r3, #4
 8001344:	0112      	lsls	r2, r2, #4
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	440b      	add	r3, r1
 800134a:	761a      	strb	r2, [r3, #24]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000e100 	.word	0xe000e100
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001360:	b480      	push	{r7}
 8001362:	b089      	sub	sp, #36	@ 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f1c3 0307 	rsb	r3, r3, #7
 800137a:	2b04      	cmp	r3, #4
 800137c:	bf28      	it	cs
 800137e:	2304      	movcs	r3, #4
 8001380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3304      	adds	r3, #4
 8001386:	2b06      	cmp	r3, #6
 8001388:	d902      	bls.n	8001390 <NVIC_EncodePriority+0x30>
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3b03      	subs	r3, #3
 800138e:	e000      	b.n	8001392 <NVIC_EncodePriority+0x32>
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	f04f 32ff 	mov.w	r2, #4294967295
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43da      	mvns	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	401a      	ands	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	43d9      	mvns	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	4313      	orrs	r3, r2
         );
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3724      	adds	r7, #36	@ 0x24
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013d8:	d301      	bcc.n	80013de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013da:	2301      	movs	r3, #1
 80013dc:	e00f      	b.n	80013fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013de:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <SysTick_Config+0x40>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e6:	210f      	movs	r1, #15
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f7ff ff8e 	bl	800130c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f0:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <SysTick_Config+0x40>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <SysTick_Config+0x40>)
 80013f8:	2207      	movs	r2, #7
 80013fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	e000e010 	.word	0xe000e010

0800140c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff29 	bl	800126c <__NVIC_SetPriorityGrouping>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001430:	f7ff ff40 	bl	80012b4 <__NVIC_GetPriorityGrouping>
 8001434:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f7ff ff90 	bl	8001360 <NVIC_EncodePriority>
 8001440:	4602      	mov	r2, r0
 8001442:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff5f 	bl	800130c <__NVIC_SetPriority>
}
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001460:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff33 	bl	80012d0 <__NVIC_EnableIRQ>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ffa4 	bl	80013c8 <SysTick_Config>
 8001480:	4603      	mov	r3, r0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	@ 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800149a:	4b89      	ldr	r3, [pc, #548]	@ (80016c0 <HAL_GPIO_Init+0x234>)
 800149c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800149e:	e194      	b.n	80017ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	2101      	movs	r1, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 8186 	beq.w	80017c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d005      	beq.n	80014d0 <HAL_GPIO_Init+0x44>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d130      	bne.n	8001532 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001506:	2201      	movs	r2, #1
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	091b      	lsrs	r3, r3, #4
 800151c:	f003 0201 	and.w	r2, r3, #1
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b03      	cmp	r3, #3
 800153c:	d017      	beq.n	800156e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	2203      	movs	r2, #3
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d123      	bne.n	80015c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	08da      	lsrs	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3208      	adds	r2, #8
 8001582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	220f      	movs	r2, #15
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	691a      	ldr	r2, [r3, #16]
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	08da      	lsrs	r2, r3, #3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3208      	adds	r2, #8
 80015bc:	69b9      	ldr	r1, [r7, #24]
 80015be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	2203      	movs	r2, #3
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0203 	and.w	r2, r3, #3
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 80e0 	beq.w	80017c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001604:	4b2f      	ldr	r3, [pc, #188]	@ (80016c4 <HAL_GPIO_Init+0x238>)
 8001606:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800160a:	4a2e      	ldr	r2, [pc, #184]	@ (80016c4 <HAL_GPIO_Init+0x238>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001614:	4b2b      	ldr	r3, [pc, #172]	@ (80016c4 <HAL_GPIO_Init+0x238>)
 8001616:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001622:	4a29      	ldr	r2, [pc, #164]	@ (80016c8 <HAL_GPIO_Init+0x23c>)
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	089b      	lsrs	r3, r3, #2
 8001628:	3302      	adds	r3, #2
 800162a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	220f      	movs	r2, #15
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a20      	ldr	r2, [pc, #128]	@ (80016cc <HAL_GPIO_Init+0x240>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d052      	beq.n	80016f4 <HAL_GPIO_Init+0x268>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a1f      	ldr	r2, [pc, #124]	@ (80016d0 <HAL_GPIO_Init+0x244>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d031      	beq.n	80016ba <HAL_GPIO_Init+0x22e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a1e      	ldr	r2, [pc, #120]	@ (80016d4 <HAL_GPIO_Init+0x248>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d02b      	beq.n	80016b6 <HAL_GPIO_Init+0x22a>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a1d      	ldr	r2, [pc, #116]	@ (80016d8 <HAL_GPIO_Init+0x24c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d025      	beq.n	80016b2 <HAL_GPIO_Init+0x226>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a1c      	ldr	r2, [pc, #112]	@ (80016dc <HAL_GPIO_Init+0x250>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d01f      	beq.n	80016ae <HAL_GPIO_Init+0x222>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a1b      	ldr	r2, [pc, #108]	@ (80016e0 <HAL_GPIO_Init+0x254>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d019      	beq.n	80016aa <HAL_GPIO_Init+0x21e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a1a      	ldr	r2, [pc, #104]	@ (80016e4 <HAL_GPIO_Init+0x258>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d013      	beq.n	80016a6 <HAL_GPIO_Init+0x21a>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a19      	ldr	r2, [pc, #100]	@ (80016e8 <HAL_GPIO_Init+0x25c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d00d      	beq.n	80016a2 <HAL_GPIO_Init+0x216>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a18      	ldr	r2, [pc, #96]	@ (80016ec <HAL_GPIO_Init+0x260>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d007      	beq.n	800169e <HAL_GPIO_Init+0x212>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a17      	ldr	r2, [pc, #92]	@ (80016f0 <HAL_GPIO_Init+0x264>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d101      	bne.n	800169a <HAL_GPIO_Init+0x20e>
 8001696:	2309      	movs	r3, #9
 8001698:	e02d      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 800169a:	230a      	movs	r3, #10
 800169c:	e02b      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 800169e:	2308      	movs	r3, #8
 80016a0:	e029      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016a2:	2307      	movs	r3, #7
 80016a4:	e027      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016a6:	2306      	movs	r3, #6
 80016a8:	e025      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016aa:	2305      	movs	r3, #5
 80016ac:	e023      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016ae:	2304      	movs	r3, #4
 80016b0:	e021      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016b2:	2303      	movs	r3, #3
 80016b4:	e01f      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e01d      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e01b      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016be:	bf00      	nop
 80016c0:	58000080 	.word	0x58000080
 80016c4:	58024400 	.word	0x58024400
 80016c8:	58000400 	.word	0x58000400
 80016cc:	58020000 	.word	0x58020000
 80016d0:	58020400 	.word	0x58020400
 80016d4:	58020800 	.word	0x58020800
 80016d8:	58020c00 	.word	0x58020c00
 80016dc:	58021000 	.word	0x58021000
 80016e0:	58021400 	.word	0x58021400
 80016e4:	58021800 	.word	0x58021800
 80016e8:	58021c00 	.word	0x58021c00
 80016ec:	58022000 	.word	0x58022000
 80016f0:	58022400 	.word	0x58022400
 80016f4:	2300      	movs	r3, #0
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	f002 0203 	and.w	r2, r2, #3
 80016fc:	0092      	lsls	r2, r2, #2
 80016fe:	4093      	lsls	r3, r2
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001706:	4938      	ldr	r1, [pc, #224]	@ (80017e8 <HAL_GPIO_Init+0x35c>)
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3302      	adds	r3, #2
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001714:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800173a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001768:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	3301      	adds	r3, #1
 80017c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa22 f303 	lsr.w	r3, r2, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f47f ae63 	bne.w	80014a0 <HAL_GPIO_Init+0x14>
  }
}
 80017da:	bf00      	nop
 80017dc:	bf00      	nop
 80017de:	3724      	adds	r7, #36	@ 0x24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	58000400 	.word	0x58000400

080017ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
 80017f8:	4613      	mov	r3, r2
 80017fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017fc:	787b      	ldrb	r3, [r7, #1]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001802:	887a      	ldrh	r2, [r7, #2]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001808:	e003      	b.n	8001812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800180a:	887b      	ldrh	r3, [r7, #2]
 800180c:	041a      	lsls	r2, r3, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	619a      	str	r2, [r3, #24]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af02      	add	r7, sp, #8
 8001824:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0fe      	b.n	8001a2e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d106      	bne.n	800184a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff fab5 	bl	8000db4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2203      	movs	r2, #3
 800184e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f004 f8bc 	bl	80059d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	7c1a      	ldrb	r2, [r3, #16]
 8001864:	f88d 2000 	strb.w	r2, [sp]
 8001868:	3304      	adds	r3, #4
 800186a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800186c:	f004 f840 	bl	80058f0 <USB_CoreInit>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d005      	beq.n	8001882 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2202      	movs	r2, #2
 800187a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e0d5      	b.n	8001a2e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f004 f8b4 	bl	80059f6 <USB_SetCurrentMode>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2202      	movs	r2, #2
 8001898:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0c6      	b.n	8001a2e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a0:	2300      	movs	r3, #0
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	e04a      	b.n	800193c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4413      	add	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	3315      	adds	r3, #21
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4413      	add	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	3314      	adds	r3, #20
 80018ca:	7bfa      	ldrb	r2, [r7, #15]
 80018cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	b298      	uxth	r0, r3
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4413      	add	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	332e      	adds	r3, #46	@ 0x2e
 80018e2:	4602      	mov	r2, r0
 80018e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018e6:	7bfa      	ldrb	r2, [r7, #15]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4413      	add	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	3318      	adds	r3, #24
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4413      	add	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	331c      	adds	r3, #28
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	3320      	adds	r3, #32
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	3324      	adds	r3, #36	@ 0x24
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	3301      	adds	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	791b      	ldrb	r3, [r3, #4]
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	429a      	cmp	r2, r3
 8001944:	d3af      	bcc.n	80018a6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001946:	2300      	movs	r3, #0
 8001948:	73fb      	strb	r3, [r7, #15]
 800194a:	e044      	b.n	80019d6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800194c:	7bfa      	ldrb	r2, [r7, #15]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4413      	add	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4413      	add	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019ba:	7bfa      	ldrb	r2, [r7, #15]
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4413      	add	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	3301      	adds	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	791b      	ldrb	r3, [r3, #4]
 80019da:	7bfa      	ldrb	r2, [r7, #15]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d3b5      	bcc.n	800194c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7c1a      	ldrb	r2, [r3, #16]
 80019e8:	f88d 2000 	strb.w	r2, [sp]
 80019ec:	3304      	adds	r3, #4
 80019ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019f0:	f004 f84e 	bl	8005a90 <USB_DevInit>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2202      	movs	r2, #2
 80019fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e013      	b.n	8001a2e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7b1b      	ldrb	r3, [r3, #12]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d102      	bne.n	8001a22 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f80b 	bl	8001a38 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f004 fa09 	bl	8005e3e <USB_DevDisconnect>

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001a66:	4b05      	ldr	r3, [pc, #20]	@ (8001a7c <HAL_PCDEx_ActivateLPM+0x44>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	10000003 	.word	0x10000003

08001a80 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001a88:	4b19      	ldr	r3, [pc, #100]	@ (8001af0 <HAL_PWREx_ConfigSupply+0x70>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d00a      	beq.n	8001aaa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a94:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <HAL_PWREx_ConfigSupply+0x70>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d001      	beq.n	8001aa6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e01f      	b.n	8001ae6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e01d      	b.n	8001ae6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001aaa:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <HAL_PWREx_ConfigSupply+0x70>)
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f023 0207 	bic.w	r2, r3, #7
 8001ab2:	490f      	ldr	r1, [pc, #60]	@ (8001af0 <HAL_PWREx_ConfigSupply+0x70>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001aba:	f7ff fb9b 	bl	80011f4 <HAL_GetTick>
 8001abe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ac0:	e009      	b.n	8001ad6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ac2:	f7ff fb97 	bl	80011f4 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ad0:	d901      	bls.n	8001ad6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e007      	b.n	8001ae6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ad6:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <HAL_PWREx_ConfigSupply+0x70>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ade:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ae2:	d1ee      	bne.n	8001ac2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	58024800 	.word	0x58024800

08001af4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001af8:	4b05      	ldr	r3, [pc, #20]	@ (8001b10 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4a04      	ldr	r2, [pc, #16]	@ (8001b10 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001afe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b02:	60d3      	str	r3, [r2, #12]
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	58024800 	.word	0x58024800

08001b14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08c      	sub	sp, #48	@ 0x30
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d102      	bne.n	8001b28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	f000 bc48 	b.w	80023b8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 8088 	beq.w	8001c46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b36:	4b99      	ldr	r3, [pc, #612]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b40:	4b96      	ldr	r3, [pc, #600]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b44:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b48:	2b10      	cmp	r3, #16
 8001b4a:	d007      	beq.n	8001b5c <HAL_RCC_OscConfig+0x48>
 8001b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b4e:	2b18      	cmp	r3, #24
 8001b50:	d111      	bne.n	8001b76 <HAL_RCC_OscConfig+0x62>
 8001b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d10c      	bne.n	8001b76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5c:	4b8f      	ldr	r3, [pc, #572]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d06d      	beq.n	8001c44 <HAL_RCC_OscConfig+0x130>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d169      	bne.n	8001c44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f000 bc21 	b.w	80023b8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x7a>
 8001b80:	4b86      	ldr	r3, [pc, #536]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a85      	ldr	r2, [pc, #532]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	e02e      	b.n	8001bec <HAL_RCC_OscConfig+0xd8>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x9c>
 8001b96:	4b81      	ldr	r3, [pc, #516]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a80      	ldr	r2, [pc, #512]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001b9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	4b7e      	ldr	r3, [pc, #504]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a7d      	ldr	r2, [pc, #500]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001ba8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e01d      	b.n	8001bec <HAL_RCC_OscConfig+0xd8>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0xc0>
 8001bba:	4b78      	ldr	r3, [pc, #480]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a77      	ldr	r2, [pc, #476]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001bc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b75      	ldr	r3, [pc, #468]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a74      	ldr	r2, [pc, #464]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e00b      	b.n	8001bec <HAL_RCC_OscConfig+0xd8>
 8001bd4:	4b71      	ldr	r3, [pc, #452]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a70      	ldr	r2, [pc, #448]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b6e      	ldr	r3, [pc, #440]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a6d      	ldr	r2, [pc, #436]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001be6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d013      	beq.n	8001c1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fafe 	bl	80011f4 <HAL_GetTick>
 8001bf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff fafa 	bl	80011f4 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	@ 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e3d4      	b.n	80023b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c0e:	4b63      	ldr	r3, [pc, #396]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0xe8>
 8001c1a:	e014      	b.n	8001c46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7ff faea 	bl	80011f4 <HAL_GetTick>
 8001c20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7ff fae6 	bl	80011f4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	@ 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e3c0      	b.n	80023b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c36:	4b59      	ldr	r3, [pc, #356]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x110>
 8001c42:	e000      	b.n	8001c46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80ca 	beq.w	8001de8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c54:	4b51      	ldr	r3, [pc, #324]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c5c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c5e:	4b4f      	ldr	r3, [pc, #316]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c62:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d007      	beq.n	8001c7a <HAL_RCC_OscConfig+0x166>
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	2b18      	cmp	r3, #24
 8001c6e:	d156      	bne.n	8001d1e <HAL_RCC_OscConfig+0x20a>
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d151      	bne.n	8001d1e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c7a:	4b48      	ldr	r3, [pc, #288]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <HAL_RCC_OscConfig+0x17e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e392      	b.n	80023b8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c92:	4b42      	ldr	r3, [pc, #264]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 0219 	bic.w	r2, r3, #25
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	493f      	ldr	r1, [pc, #252]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff faa6 	bl	80011f4 <HAL_GetTick>
 8001ca8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cac:	f7ff faa2 	bl	80011f4 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e37c      	b.n	80023b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cbe:	4b37      	ldr	r3, [pc, #220]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cca:	f7ff fac3 	bl	8001254 <HAL_GetREVID>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d817      	bhi.n	8001d08 <HAL_RCC_OscConfig+0x1f4>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	2b40      	cmp	r3, #64	@ 0x40
 8001cde:	d108      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x1de>
 8001ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001ce8:	4a2c      	ldr	r2, [pc, #176]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cf0:	e07a      	b.n	8001de8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	031b      	lsls	r3, r3, #12
 8001d00:	4926      	ldr	r1, [pc, #152]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d06:	e06f      	b.n	8001de8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d08:	4b24      	ldr	r3, [pc, #144]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	061b      	lsls	r3, r3, #24
 8001d16:	4921      	ldr	r1, [pc, #132]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d1c:	e064      	b.n	8001de8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d047      	beq.n	8001db6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d26:	4b1d      	ldr	r3, [pc, #116]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0219 	bic.w	r2, r3, #25
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	491a      	ldr	r1, [pc, #104]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff fa5c 	bl	80011f4 <HAL_GetTick>
 8001d3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d40:	f7ff fa58 	bl	80011f4 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e332      	b.n	80023b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d52:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5e:	f7ff fa79 	bl	8001254 <HAL_GetREVID>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d819      	bhi.n	8001da0 <HAL_RCC_OscConfig+0x28c>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	2b40      	cmp	r3, #64	@ 0x40
 8001d72:	d108      	bne.n	8001d86 <HAL_RCC_OscConfig+0x272>
 8001d74:	4b09      	ldr	r3, [pc, #36]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d7c:	4a07      	ldr	r2, [pc, #28]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001d7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d82:	6053      	str	r3, [r2, #4]
 8001d84:	e030      	b.n	8001de8 <HAL_RCC_OscConfig+0x2d4>
 8001d86:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	031b      	lsls	r3, r3, #12
 8001d94:	4901      	ldr	r1, [pc, #4]	@ (8001d9c <HAL_RCC_OscConfig+0x288>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
 8001d9a:	e025      	b.n	8001de8 <HAL_RCC_OscConfig+0x2d4>
 8001d9c:	58024400 	.word	0x58024400
 8001da0:	4b9a      	ldr	r3, [pc, #616]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	061b      	lsls	r3, r3, #24
 8001dae:	4997      	ldr	r1, [pc, #604]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]
 8001db4:	e018      	b.n	8001de8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db6:	4b95      	ldr	r3, [pc, #596]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a94      	ldr	r2, [pc, #592]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001dbc:	f023 0301 	bic.w	r3, r3, #1
 8001dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc2:	f7ff fa17 	bl	80011f4 <HAL_GetTick>
 8001dc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dca:	f7ff fa13 	bl	80011f4 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e2ed      	b.n	80023b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ddc:	4b8b      	ldr	r3, [pc, #556]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f0      	bne.n	8001dca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80a9 	beq.w	8001f48 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df6:	4b85      	ldr	r3, [pc, #532]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dfe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e00:	4b82      	ldr	r3, [pc, #520]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e04:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d007      	beq.n	8001e1c <HAL_RCC_OscConfig+0x308>
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	2b18      	cmp	r3, #24
 8001e10:	d13a      	bne.n	8001e88 <HAL_RCC_OscConfig+0x374>
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d135      	bne.n	8001e88 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e1c:	4b7b      	ldr	r3, [pc, #492]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_OscConfig+0x320>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	2b80      	cmp	r3, #128	@ 0x80
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e2c1      	b.n	80023b8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e34:	f7ff fa0e 	bl	8001254 <HAL_GetREVID>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d817      	bhi.n	8001e72 <HAL_RCC_OscConfig+0x35e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	2b20      	cmp	r3, #32
 8001e48:	d108      	bne.n	8001e5c <HAL_RCC_OscConfig+0x348>
 8001e4a:	4b70      	ldr	r3, [pc, #448]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001e52:	4a6e      	ldr	r2, [pc, #440]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001e54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e58:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e5a:	e075      	b.n	8001f48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e5c:	4b6b      	ldr	r3, [pc, #428]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	069b      	lsls	r3, r3, #26
 8001e6a:	4968      	ldr	r1, [pc, #416]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e70:	e06a      	b.n	8001f48 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e72:	4b66      	ldr	r3, [pc, #408]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	061b      	lsls	r3, r3, #24
 8001e80:	4962      	ldr	r1, [pc, #392]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e86:	e05f      	b.n	8001f48 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d042      	beq.n	8001f16 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001e90:	4b5e      	ldr	r3, [pc, #376]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a5d      	ldr	r2, [pc, #372]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7ff f9aa 	bl	80011f4 <HAL_GetTick>
 8001ea0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ea4:	f7ff f9a6 	bl	80011f4 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e280      	b.n	80023b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001eb6:	4b55      	ldr	r3, [pc, #340]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ec2:	f7ff f9c7 	bl	8001254 <HAL_GetREVID>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d817      	bhi.n	8001f00 <HAL_RCC_OscConfig+0x3ec>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	d108      	bne.n	8001eea <HAL_RCC_OscConfig+0x3d6>
 8001ed8:	4b4c      	ldr	r3, [pc, #304]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ee0:	4a4a      	ldr	r2, [pc, #296]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001ee2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ee6:	6053      	str	r3, [r2, #4]
 8001ee8:	e02e      	b.n	8001f48 <HAL_RCC_OscConfig+0x434>
 8001eea:	4b48      	ldr	r3, [pc, #288]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	069b      	lsls	r3, r3, #26
 8001ef8:	4944      	ldr	r1, [pc, #272]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
 8001efe:	e023      	b.n	8001f48 <HAL_RCC_OscConfig+0x434>
 8001f00:	4b42      	ldr	r3, [pc, #264]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	061b      	lsls	r3, r3, #24
 8001f0e:	493f      	ldr	r1, [pc, #252]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60cb      	str	r3, [r1, #12]
 8001f14:	e018      	b.n	8001f48 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f16:	4b3d      	ldr	r3, [pc, #244]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a3c      	ldr	r2, [pc, #240]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001f1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7ff f967 	bl	80011f4 <HAL_GetTick>
 8001f26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f2a:	f7ff f963 	bl	80011f4 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e23d      	b.n	80023b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f3c:	4b33      	ldr	r3, [pc, #204]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d036      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d019      	beq.n	8001f90 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001f5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f60:	4a2a      	ldr	r2, [pc, #168]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f68:	f7ff f944 	bl	80011f4 <HAL_GetTick>
 8001f6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f70:	f7ff f940 	bl	80011f4 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e21a      	b.n	80023b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f82:	4b22      	ldr	r3, [pc, #136]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x45c>
 8001f8e:	e018      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f90:	4b1e      	ldr	r3, [pc, #120]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001f92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f94:	4a1d      	ldr	r2, [pc, #116]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001f96:	f023 0301 	bic.w	r3, r3, #1
 8001f9a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9c:	f7ff f92a 	bl	80011f4 <HAL_GetTick>
 8001fa0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa4:	f7ff f926 	bl	80011f4 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e200      	b.n	80023b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fb6:	4b15      	ldr	r3, [pc, #84]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0320 	and.w	r3, r3, #32
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d039      	beq.n	8002042 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d01c      	beq.n	8002010 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a0c      	ldr	r2, [pc, #48]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001fdc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fe0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001fe2:	f7ff f907 	bl	80011f4 <HAL_GetTick>
 8001fe6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fea:	f7ff f903 	bl	80011f4 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e1dd      	b.n	80023b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ffc:	4b03      	ldr	r3, [pc, #12]	@ (800200c <HAL_RCC_OscConfig+0x4f8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f0      	beq.n	8001fea <HAL_RCC_OscConfig+0x4d6>
 8002008:	e01b      	b.n	8002042 <HAL_RCC_OscConfig+0x52e>
 800200a:	bf00      	nop
 800200c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002010:	4b9b      	ldr	r3, [pc, #620]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a9a      	ldr	r2, [pc, #616]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 8002016:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800201a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800201c:	f7ff f8ea 	bl	80011f4 <HAL_GetTick>
 8002020:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002024:	f7ff f8e6 	bl	80011f4 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1c0      	b.n	80023b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002036:	4b92      	ldr	r3, [pc, #584]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8081 	beq.w	8002152 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002050:	4b8c      	ldr	r3, [pc, #560]	@ (8002284 <HAL_RCC_OscConfig+0x770>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a8b      	ldr	r2, [pc, #556]	@ (8002284 <HAL_RCC_OscConfig+0x770>)
 8002056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800205a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800205c:	f7ff f8ca 	bl	80011f4 <HAL_GetTick>
 8002060:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002064:	f7ff f8c6 	bl	80011f4 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	@ 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e1a0      	b.n	80023b8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002076:	4b83      	ldr	r3, [pc, #524]	@ (8002284 <HAL_RCC_OscConfig+0x770>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d106      	bne.n	8002098 <HAL_RCC_OscConfig+0x584>
 800208a:	4b7d      	ldr	r3, [pc, #500]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208e:	4a7c      	ldr	r2, [pc, #496]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6713      	str	r3, [r2, #112]	@ 0x70
 8002096:	e02d      	b.n	80020f4 <HAL_RCC_OscConfig+0x5e0>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10c      	bne.n	80020ba <HAL_RCC_OscConfig+0x5a6>
 80020a0:	4b77      	ldr	r3, [pc, #476]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a4:	4a76      	ldr	r2, [pc, #472]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 80020a6:	f023 0301 	bic.w	r3, r3, #1
 80020aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ac:	4b74      	ldr	r3, [pc, #464]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b0:	4a73      	ldr	r2, [pc, #460]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 80020b2:	f023 0304 	bic.w	r3, r3, #4
 80020b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b8:	e01c      	b.n	80020f4 <HAL_RCC_OscConfig+0x5e0>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b05      	cmp	r3, #5
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0x5c8>
 80020c2:	4b6f      	ldr	r3, [pc, #444]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 80020c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c6:	4a6e      	ldr	r2, [pc, #440]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ce:	4b6c      	ldr	r3, [pc, #432]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d2:	4a6b      	ldr	r2, [pc, #428]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020da:	e00b      	b.n	80020f4 <HAL_RCC_OscConfig+0x5e0>
 80020dc:	4b68      	ldr	r3, [pc, #416]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 80020de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e0:	4a67      	ldr	r2, [pc, #412]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 80020e2:	f023 0301 	bic.w	r3, r3, #1
 80020e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80020e8:	4b65      	ldr	r3, [pc, #404]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 80020ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ec:	4a64      	ldr	r2, [pc, #400]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 80020ee:	f023 0304 	bic.w	r3, r3, #4
 80020f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d015      	beq.n	8002128 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fc:	f7ff f87a 	bl	80011f4 <HAL_GetTick>
 8002100:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002102:	e00a      	b.n	800211a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002104:	f7ff f876 	bl	80011f4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e14e      	b.n	80023b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800211a:	4b59      	ldr	r3, [pc, #356]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0ee      	beq.n	8002104 <HAL_RCC_OscConfig+0x5f0>
 8002126:	e014      	b.n	8002152 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002128:	f7ff f864 	bl	80011f4 <HAL_GetTick>
 800212c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800212e:	e00a      	b.n	8002146 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002130:	f7ff f860 	bl	80011f4 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e138      	b.n	80023b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002146:	4b4e      	ldr	r3, [pc, #312]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1ee      	bne.n	8002130 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 812d 	beq.w	80023b6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800215c:	4b48      	ldr	r3, [pc, #288]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002164:	2b18      	cmp	r3, #24
 8002166:	f000 80bd 	beq.w	80022e4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216e:	2b02      	cmp	r3, #2
 8002170:	f040 809e 	bne.w	80022b0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002174:	4b42      	ldr	r3, [pc, #264]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a41      	ldr	r2, [pc, #260]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 800217a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800217e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7ff f838 	bl	80011f4 <HAL_GetTick>
 8002184:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002188:	f7ff f834 	bl	80011f4 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e10e      	b.n	80023b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800219a:	4b39      	ldr	r3, [pc, #228]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a6:	4b36      	ldr	r3, [pc, #216]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 80021a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021aa:	4b37      	ldr	r3, [pc, #220]	@ (8002288 <HAL_RCC_OscConfig+0x774>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021b6:	0112      	lsls	r2, r2, #4
 80021b8:	430a      	orrs	r2, r1
 80021ba:	4931      	ldr	r1, [pc, #196]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	628b      	str	r3, [r1, #40]	@ 0x28
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c4:	3b01      	subs	r3, #1
 80021c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ce:	3b01      	subs	r3, #1
 80021d0:	025b      	lsls	r3, r3, #9
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021da:	3b01      	subs	r3, #1
 80021dc:	041b      	lsls	r3, r3, #16
 80021de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e8:	3b01      	subs	r3, #1
 80021ea:	061b      	lsls	r3, r3, #24
 80021ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80021f0:	4923      	ldr	r1, [pc, #140]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80021f6:	4b22      	ldr	r3, [pc, #136]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 80021f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fa:	4a21      	ldr	r2, [pc, #132]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002202:	4b1f      	ldr	r3, [pc, #124]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 8002204:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002206:	4b21      	ldr	r3, [pc, #132]	@ (800228c <HAL_RCC_OscConfig+0x778>)
 8002208:	4013      	ands	r3, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800220e:	00d2      	lsls	r2, r2, #3
 8002210:	491b      	ldr	r1, [pc, #108]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 8002212:	4313      	orrs	r3, r2
 8002214:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002216:	4b1a      	ldr	r3, [pc, #104]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 8002218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221a:	f023 020c 	bic.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	4917      	ldr	r1, [pc, #92]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 8002224:	4313      	orrs	r3, r2
 8002226:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002228:	4b15      	ldr	r3, [pc, #84]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 800222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222c:	f023 0202 	bic.w	r2, r3, #2
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002234:	4912      	ldr	r1, [pc, #72]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 8002236:	4313      	orrs	r3, r2
 8002238:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800223a:	4b11      	ldr	r3, [pc, #68]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 800223c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223e:	4a10      	ldr	r2, [pc, #64]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 8002240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002244:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002246:	4b0e      	ldr	r3, [pc, #56]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 8002248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224a:	4a0d      	ldr	r2, [pc, #52]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 800224c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002250:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002252:	4b0b      	ldr	r3, [pc, #44]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 8002254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002256:	4a0a      	ldr	r2, [pc, #40]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 8002258:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800225c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800225e:	4b08      	ldr	r3, [pc, #32]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 8002260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002262:	4a07      	ldr	r2, [pc, #28]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800226a:	4b05      	ldr	r3, [pc, #20]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a04      	ldr	r2, [pc, #16]	@ (8002280 <HAL_RCC_OscConfig+0x76c>)
 8002270:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002276:	f7fe ffbd 	bl	80011f4 <HAL_GetTick>
 800227a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800227c:	e011      	b.n	80022a2 <HAL_RCC_OscConfig+0x78e>
 800227e:	bf00      	nop
 8002280:	58024400 	.word	0x58024400
 8002284:	58024800 	.word	0x58024800
 8002288:	fffffc0c 	.word	0xfffffc0c
 800228c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7fe ffb0 	bl	80011f4 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e08a      	b.n	80023b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022a2:	4b47      	ldr	r3, [pc, #284]	@ (80023c0 <HAL_RCC_OscConfig+0x8ac>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x77c>
 80022ae:	e082      	b.n	80023b6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b0:	4b43      	ldr	r3, [pc, #268]	@ (80023c0 <HAL_RCC_OscConfig+0x8ac>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a42      	ldr	r2, [pc, #264]	@ (80023c0 <HAL_RCC_OscConfig+0x8ac>)
 80022b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7fe ff9a 	bl	80011f4 <HAL_GetTick>
 80022c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe ff96 	bl	80011f4 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e070      	b.n	80023b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022d6:	4b3a      	ldr	r3, [pc, #232]	@ (80023c0 <HAL_RCC_OscConfig+0x8ac>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x7b0>
 80022e2:	e068      	b.n	80023b6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80022e4:	4b36      	ldr	r3, [pc, #216]	@ (80023c0 <HAL_RCC_OscConfig+0x8ac>)
 80022e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80022ea:	4b35      	ldr	r3, [pc, #212]	@ (80023c0 <HAL_RCC_OscConfig+0x8ac>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d031      	beq.n	800235c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f003 0203 	and.w	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d12a      	bne.n	800235c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d122      	bne.n	800235c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002320:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d11a      	bne.n	800235c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	0a5b      	lsrs	r3, r3, #9
 800232a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002332:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d111      	bne.n	800235c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	0c1b      	lsrs	r3, r3, #16
 800233c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002344:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d108      	bne.n	800235c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	0e1b      	lsrs	r3, r3, #24
 800234e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002356:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e02b      	b.n	80023b8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002360:	4b17      	ldr	r3, [pc, #92]	@ (80023c0 <HAL_RCC_OscConfig+0x8ac>)
 8002362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002364:	08db      	lsrs	r3, r3, #3
 8002366:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800236a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	429a      	cmp	r2, r3
 8002374:	d01f      	beq.n	80023b6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002376:	4b12      	ldr	r3, [pc, #72]	@ (80023c0 <HAL_RCC_OscConfig+0x8ac>)
 8002378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237a:	4a11      	ldr	r2, [pc, #68]	@ (80023c0 <HAL_RCC_OscConfig+0x8ac>)
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002382:	f7fe ff37 	bl	80011f4 <HAL_GetTick>
 8002386:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002388:	bf00      	nop
 800238a:	f7fe ff33 	bl	80011f4 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002392:	4293      	cmp	r3, r2
 8002394:	d0f9      	beq.n	800238a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002396:	4b0a      	ldr	r3, [pc, #40]	@ (80023c0 <HAL_RCC_OscConfig+0x8ac>)
 8002398:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800239a:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <HAL_RCC_OscConfig+0x8b0>)
 800239c:	4013      	ands	r3, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023a2:	00d2      	lsls	r2, r2, #3
 80023a4:	4906      	ldr	r1, [pc, #24]	@ (80023c0 <HAL_RCC_OscConfig+0x8ac>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80023aa:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <HAL_RCC_OscConfig+0x8ac>)
 80023ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ae:	4a04      	ldr	r2, [pc, #16]	@ (80023c0 <HAL_RCC_OscConfig+0x8ac>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3730      	adds	r7, #48	@ 0x30
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	58024400 	.word	0x58024400
 80023c4:	ffff0007 	.word	0xffff0007

080023c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e19c      	b.n	8002716 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023dc:	4b8a      	ldr	r3, [pc, #552]	@ (8002608 <HAL_RCC_ClockConfig+0x240>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d910      	bls.n	800240c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b87      	ldr	r3, [pc, #540]	@ (8002608 <HAL_RCC_ClockConfig+0x240>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 020f 	bic.w	r2, r3, #15
 80023f2:	4985      	ldr	r1, [pc, #532]	@ (8002608 <HAL_RCC_ClockConfig+0x240>)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fa:	4b83      	ldr	r3, [pc, #524]	@ (8002608 <HAL_RCC_ClockConfig+0x240>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e184      	b.n	8002716 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d010      	beq.n	800243a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	4b7b      	ldr	r3, [pc, #492]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002424:	429a      	cmp	r2, r3
 8002426:	d908      	bls.n	800243a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002428:	4b78      	ldr	r3, [pc, #480]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	4975      	ldr	r1, [pc, #468]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 8002436:	4313      	orrs	r3, r2
 8002438:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d010      	beq.n	8002468 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	4b70      	ldr	r3, [pc, #448]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002452:	429a      	cmp	r2, r3
 8002454:	d908      	bls.n	8002468 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002456:	4b6d      	ldr	r3, [pc, #436]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	496a      	ldr	r1, [pc, #424]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 8002464:	4313      	orrs	r3, r2
 8002466:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	2b00      	cmp	r3, #0
 8002472:	d010      	beq.n	8002496 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699a      	ldr	r2, [r3, #24]
 8002478:	4b64      	ldr	r3, [pc, #400]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002480:	429a      	cmp	r2, r3
 8002482:	d908      	bls.n	8002496 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002484:	4b61      	ldr	r3, [pc, #388]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	495e      	ldr	r1, [pc, #376]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 8002492:	4313      	orrs	r3, r2
 8002494:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0320 	and.w	r3, r3, #32
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d010      	beq.n	80024c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69da      	ldr	r2, [r3, #28]
 80024a6:	4b59      	ldr	r3, [pc, #356]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d908      	bls.n	80024c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80024b2:	4b56      	ldr	r3, [pc, #344]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	4953      	ldr	r1, [pc, #332]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d010      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	4b4d      	ldr	r3, [pc, #308]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	429a      	cmp	r2, r3
 80024de:	d908      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e0:	4b4a      	ldr	r3, [pc, #296]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	f023 020f 	bic.w	r2, r3, #15
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4947      	ldr	r1, [pc, #284]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d055      	beq.n	80025aa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80024fe:	4b43      	ldr	r3, [pc, #268]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	4940      	ldr	r1, [pc, #256]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 800250c:	4313      	orrs	r3, r2
 800250e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d107      	bne.n	8002528 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002518:	4b3c      	ldr	r3, [pc, #240]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d121      	bne.n	8002568 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0f6      	b.n	8002716 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d107      	bne.n	8002540 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002530:	4b36      	ldr	r3, [pc, #216]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d115      	bne.n	8002568 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0ea      	b.n	8002716 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d107      	bne.n	8002558 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002548:	4b30      	ldr	r3, [pc, #192]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d109      	bne.n	8002568 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0de      	b.n	8002716 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002558:	4b2c      	ldr	r3, [pc, #176]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0d6      	b.n	8002716 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002568:	4b28      	ldr	r3, [pc, #160]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	f023 0207 	bic.w	r2, r3, #7
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	4925      	ldr	r1, [pc, #148]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 8002576:	4313      	orrs	r3, r2
 8002578:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800257a:	f7fe fe3b 	bl	80011f4 <HAL_GetTick>
 800257e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002580:	e00a      	b.n	8002598 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002582:	f7fe fe37 	bl	80011f4 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e0be      	b.n	8002716 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002598:	4b1c      	ldr	r3, [pc, #112]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d1eb      	bne.n	8002582 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d010      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	4b14      	ldr	r3, [pc, #80]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d208      	bcs.n	80025d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c6:	4b11      	ldr	r3, [pc, #68]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f023 020f 	bic.w	r2, r3, #15
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	490e      	ldr	r1, [pc, #56]	@ (800260c <HAL_RCC_ClockConfig+0x244>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002608 <HAL_RCC_ClockConfig+0x240>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d214      	bcs.n	8002610 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b08      	ldr	r3, [pc, #32]	@ (8002608 <HAL_RCC_ClockConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 020f 	bic.w	r2, r3, #15
 80025ee:	4906      	ldr	r1, [pc, #24]	@ (8002608 <HAL_RCC_ClockConfig+0x240>)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	4b04      	ldr	r3, [pc, #16]	@ (8002608 <HAL_RCC_ClockConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d005      	beq.n	8002610 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e086      	b.n	8002716 <HAL_RCC_ClockConfig+0x34e>
 8002608:	52002000 	.word	0x52002000
 800260c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d010      	beq.n	800263e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	4b3f      	ldr	r3, [pc, #252]	@ (8002720 <HAL_RCC_ClockConfig+0x358>)
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002628:	429a      	cmp	r2, r3
 800262a:	d208      	bcs.n	800263e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800262c:	4b3c      	ldr	r3, [pc, #240]	@ (8002720 <HAL_RCC_ClockConfig+0x358>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	4939      	ldr	r1, [pc, #228]	@ (8002720 <HAL_RCC_ClockConfig+0x358>)
 800263a:	4313      	orrs	r3, r2
 800263c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d010      	beq.n	800266c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695a      	ldr	r2, [r3, #20]
 800264e:	4b34      	ldr	r3, [pc, #208]	@ (8002720 <HAL_RCC_ClockConfig+0x358>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002656:	429a      	cmp	r2, r3
 8002658:	d208      	bcs.n	800266c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800265a:	4b31      	ldr	r3, [pc, #196]	@ (8002720 <HAL_RCC_ClockConfig+0x358>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	492e      	ldr	r1, [pc, #184]	@ (8002720 <HAL_RCC_ClockConfig+0x358>)
 8002668:	4313      	orrs	r3, r2
 800266a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	2b00      	cmp	r3, #0
 8002676:	d010      	beq.n	800269a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699a      	ldr	r2, [r3, #24]
 800267c:	4b28      	ldr	r3, [pc, #160]	@ (8002720 <HAL_RCC_ClockConfig+0x358>)
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002684:	429a      	cmp	r2, r3
 8002686:	d208      	bcs.n	800269a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002688:	4b25      	ldr	r3, [pc, #148]	@ (8002720 <HAL_RCC_ClockConfig+0x358>)
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	4922      	ldr	r1, [pc, #136]	@ (8002720 <HAL_RCC_ClockConfig+0x358>)
 8002696:	4313      	orrs	r3, r2
 8002698:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d010      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69da      	ldr	r2, [r3, #28]
 80026aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002720 <HAL_RCC_ClockConfig+0x358>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d208      	bcs.n	80026c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80026b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002720 <HAL_RCC_ClockConfig+0x358>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	4917      	ldr	r1, [pc, #92]	@ (8002720 <HAL_RCC_ClockConfig+0x358>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026c8:	f000 f834 	bl	8002734 <HAL_RCC_GetSysClockFreq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4b14      	ldr	r3, [pc, #80]	@ (8002720 <HAL_RCC_ClockConfig+0x358>)
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	4912      	ldr	r1, [pc, #72]	@ (8002724 <HAL_RCC_ClockConfig+0x35c>)
 80026da:	5ccb      	ldrb	r3, [r1, r3]
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
 80026e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <HAL_RCC_ClockConfig+0x358>)
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002724 <HAL_RCC_ClockConfig+0x35c>)
 80026f0:	5cd3      	ldrb	r3, [r2, r3]
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
 80026fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002728 <HAL_RCC_ClockConfig+0x360>)
 80026fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002700:	4a0a      	ldr	r2, [pc, #40]	@ (800272c <HAL_RCC_ClockConfig+0x364>)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002706:	4b0a      	ldr	r3, [pc, #40]	@ (8002730 <HAL_RCC_ClockConfig+0x368>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe fd28 	bl	8001160 <HAL_InitTick>
 8002710:	4603      	mov	r3, r0
 8002712:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	58024400 	.word	0x58024400
 8002724:	080061b0 	.word	0x080061b0
 8002728:	24000008 	.word	0x24000008
 800272c:	24000004 	.word	0x24000004
 8002730:	2400000c 	.word	0x2400000c

08002734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	@ 0x24
 8002738:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800273a:	4bb3      	ldr	r3, [pc, #716]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002742:	2b18      	cmp	r3, #24
 8002744:	f200 8155 	bhi.w	80029f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002748:	a201      	add	r2, pc, #4	@ (adr r2, 8002750 <HAL_RCC_GetSysClockFreq+0x1c>)
 800274a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274e:	bf00      	nop
 8002750:	080027b5 	.word	0x080027b5
 8002754:	080029f3 	.word	0x080029f3
 8002758:	080029f3 	.word	0x080029f3
 800275c:	080029f3 	.word	0x080029f3
 8002760:	080029f3 	.word	0x080029f3
 8002764:	080029f3 	.word	0x080029f3
 8002768:	080029f3 	.word	0x080029f3
 800276c:	080029f3 	.word	0x080029f3
 8002770:	080027db 	.word	0x080027db
 8002774:	080029f3 	.word	0x080029f3
 8002778:	080029f3 	.word	0x080029f3
 800277c:	080029f3 	.word	0x080029f3
 8002780:	080029f3 	.word	0x080029f3
 8002784:	080029f3 	.word	0x080029f3
 8002788:	080029f3 	.word	0x080029f3
 800278c:	080029f3 	.word	0x080029f3
 8002790:	080027e1 	.word	0x080027e1
 8002794:	080029f3 	.word	0x080029f3
 8002798:	080029f3 	.word	0x080029f3
 800279c:	080029f3 	.word	0x080029f3
 80027a0:	080029f3 	.word	0x080029f3
 80027a4:	080029f3 	.word	0x080029f3
 80027a8:	080029f3 	.word	0x080029f3
 80027ac:	080029f3 	.word	0x080029f3
 80027b0:	080027e7 	.word	0x080027e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027b4:	4b94      	ldr	r3, [pc, #592]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d009      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027c0:	4b91      	ldr	r3, [pc, #580]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	08db      	lsrs	r3, r3, #3
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	4a90      	ldr	r2, [pc, #576]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
 80027d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80027d2:	e111      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80027d4:	4b8d      	ldr	r3, [pc, #564]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027d6:	61bb      	str	r3, [r7, #24]
      break;
 80027d8:	e10e      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80027da:	4b8d      	ldr	r3, [pc, #564]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80027dc:	61bb      	str	r3, [r7, #24]
      break;
 80027de:	e10b      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80027e0:	4b8c      	ldr	r3, [pc, #560]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80027e2:	61bb      	str	r3, [r7, #24]
      break;
 80027e4:	e108      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80027e6:	4b88      	ldr	r3, [pc, #544]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80027f0:	4b85      	ldr	r3, [pc, #532]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80027fc:	4b82      	ldr	r3, [pc, #520]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002806:	4b80      	ldr	r3, [pc, #512]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800280a:	08db      	lsrs	r3, r3, #3
 800280c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800281e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 80e1 	beq.w	80029ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2b02      	cmp	r3, #2
 800282e:	f000 8083 	beq.w	8002938 <HAL_RCC_GetSysClockFreq+0x204>
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b02      	cmp	r3, #2
 8002836:	f200 80a1 	bhi.w	800297c <HAL_RCC_GetSysClockFreq+0x248>
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x114>
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d056      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002846:	e099      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002848:	4b6f      	ldr	r3, [pc, #444]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b00      	cmp	r3, #0
 8002852:	d02d      	beq.n	80028b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002854:	4b6c      	ldr	r3, [pc, #432]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	08db      	lsrs	r3, r3, #3
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	4a6b      	ldr	r2, [pc, #428]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
 8002864:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	ee07 3a90 	vmov	s15, r3
 800286c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	ee07 3a90 	vmov	s15, r3
 8002876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800287a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800287e:	4b62      	ldr	r3, [pc, #392]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002886:	ee07 3a90 	vmov	s15, r3
 800288a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800288e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002892:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002a18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800289a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800289e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80028ae:	e087      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	ee07 3a90 	vmov	s15, r3
 80028b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002a1c <HAL_RCC_GetSysClockFreq+0x2e8>
 80028be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028c2:	4b51      	ldr	r3, [pc, #324]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ca:	ee07 3a90 	vmov	s15, r3
 80028ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80028d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002a18 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028f2:	e065      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	ee07 3a90 	vmov	s15, r3
 80028fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002a20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002906:	4b40      	ldr	r3, [pc, #256]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800290e:	ee07 3a90 	vmov	s15, r3
 8002912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002916:	ed97 6a02 	vldr	s12, [r7, #8]
 800291a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002a18 <HAL_RCC_GetSysClockFreq+0x2e4>
 800291e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002926:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800292a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800292e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002932:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002936:	e043      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	ee07 3a90 	vmov	s15, r3
 800293e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002942:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002a24 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800294a:	4b2f      	ldr	r3, [pc, #188]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002952:	ee07 3a90 	vmov	s15, r3
 8002956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800295a:	ed97 6a02 	vldr	s12, [r7, #8]
 800295e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002a18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800296a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800296e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002976:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800297a:	e021      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	ee07 3a90 	vmov	s15, r3
 8002982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002986:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002a20 <HAL_RCC_GetSysClockFreq+0x2ec>
 800298a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800298e:	4b1e      	ldr	r3, [pc, #120]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002996:	ee07 3a90 	vmov	s15, r3
 800299a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800299e:	ed97 6a02 	vldr	s12, [r7, #8]
 80029a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002a18 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80029c0:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c4:	0a5b      	lsrs	r3, r3, #9
 80029c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029ca:	3301      	adds	r3, #1
 80029cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	ee07 3a90 	vmov	s15, r3
 80029d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80029dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029e4:	ee17 3a90 	vmov	r3, s15
 80029e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80029ea:	e005      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]
      break;
 80029f0:	e002      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80029f2:	4b07      	ldr	r3, [pc, #28]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80029f4:	61bb      	str	r3, [r7, #24]
      break;
 80029f6:	bf00      	nop
  }

  return sysclockfreq;
 80029f8:	69bb      	ldr	r3, [r7, #24]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3724      	adds	r7, #36	@ 0x24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	58024400 	.word	0x58024400
 8002a0c:	03d09000 	.word	0x03d09000
 8002a10:	003d0900 	.word	0x003d0900
 8002a14:	007a1200 	.word	0x007a1200
 8002a18:	46000000 	.word	0x46000000
 8002a1c:	4c742400 	.word	0x4c742400
 8002a20:	4a742400 	.word	0x4a742400
 8002a24:	4af42400 	.word	0x4af42400

08002a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002a2e:	f7ff fe81 	bl	8002734 <HAL_RCC_GetSysClockFreq>
 8002a32:	4602      	mov	r2, r0
 8002a34:	4b10      	ldr	r3, [pc, #64]	@ (8002a78 <HAL_RCC_GetHCLKFreq+0x50>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	490f      	ldr	r1, [pc, #60]	@ (8002a7c <HAL_RCC_GetHCLKFreq+0x54>)
 8002a40:	5ccb      	ldrb	r3, [r1, r3]
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a78 <HAL_RCC_GetHCLKFreq+0x50>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	4a09      	ldr	r2, [pc, #36]	@ (8002a7c <HAL_RCC_GetHCLKFreq+0x54>)
 8002a56:	5cd3      	ldrb	r3, [r2, r3]
 8002a58:	f003 031f 	and.w	r3, r3, #31
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a62:	4a07      	ldr	r2, [pc, #28]	@ (8002a80 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a64:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a66:	4a07      	ldr	r2, [pc, #28]	@ (8002a84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002a6c:	4b04      	ldr	r3, [pc, #16]	@ (8002a80 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	58024400 	.word	0x58024400
 8002a7c:	080061b0 	.word	0x080061b0
 8002a80:	24000008 	.word	0x24000008
 8002a84:	24000004 	.word	0x24000004

08002a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002a8c:	f7ff ffcc 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	4904      	ldr	r1, [pc, #16]	@ (8002ab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a9e:	5ccb      	ldrb	r3, [r1, r3]
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	58024400 	.word	0x58024400
 8002ab0:	080061b0 	.word	0x080061b0

08002ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002ab8:	f7ff ffb6 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8002abc:	4602      	mov	r2, r0
 8002abe:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	4904      	ldr	r1, [pc, #16]	@ (8002adc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002aca:	5ccb      	ldrb	r3, [r1, r3]
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	58024400 	.word	0x58024400
 8002adc:	080061b0 	.word	0x080061b0

08002ae0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae4:	b0ca      	sub	sp, #296	@ 0x128
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002af2:	2300      	movs	r3, #0
 8002af4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b00:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002b04:	2500      	movs	r5, #0
 8002b06:	ea54 0305 	orrs.w	r3, r4, r5
 8002b0a:	d049      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b12:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b16:	d02f      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002b18:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b1c:	d828      	bhi.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b22:	d01a      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b28:	d822      	bhi.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b32:	d007      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b34:	e01c      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b36:	4bb8      	ldr	r3, [pc, #736]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3a:	4ab7      	ldr	r2, [pc, #732]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b42:	e01a      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b48:	3308      	adds	r3, #8
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f001 fc8f 	bl	8004470 <RCCEx_PLL2_Config>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b58:	e00f      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b5e:	3328      	adds	r3, #40	@ 0x28
 8002b60:	2102      	movs	r1, #2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f001 fd36 	bl	80045d4 <RCCEx_PLL3_Config>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b6e:	e004      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b76:	e000      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10a      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b82:	4ba5      	ldr	r3, [pc, #660]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b86:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b90:	4aa1      	ldr	r2, [pc, #644]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b92:	430b      	orrs	r3, r1
 8002b94:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b96:	e003      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002bac:	f04f 0900 	mov.w	r9, #0
 8002bb0:	ea58 0309 	orrs.w	r3, r8, r9
 8002bb4:	d047      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d82a      	bhi.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc6:	bf00      	nop
 8002bc8:	08002bdd 	.word	0x08002bdd
 8002bcc:	08002beb 	.word	0x08002beb
 8002bd0:	08002c01 	.word	0x08002c01
 8002bd4:	08002c1f 	.word	0x08002c1f
 8002bd8:	08002c1f 	.word	0x08002c1f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bdc:	4b8e      	ldr	r3, [pc, #568]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be0:	4a8d      	ldr	r2, [pc, #564]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002be2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002be6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002be8:	e01a      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bee:	3308      	adds	r3, #8
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f001 fc3c 	bl	8004470 <RCCEx_PLL2_Config>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bfe:	e00f      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c04:	3328      	adds	r3, #40	@ 0x28
 8002c06:	2100      	movs	r1, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f001 fce3 	bl	80045d4 <RCCEx_PLL3_Config>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c14:	e004      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c1c:	e000      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c28:	4b7b      	ldr	r3, [pc, #492]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c2c:	f023 0107 	bic.w	r1, r3, #7
 8002c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c36:	4a78      	ldr	r2, [pc, #480]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c3c:	e003      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002c52:	f04f 0b00 	mov.w	fp, #0
 8002c56:	ea5a 030b 	orrs.w	r3, sl, fp
 8002c5a:	d04c      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c66:	d030      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002c68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c6c:	d829      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c70:	d02d      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002c72:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c74:	d825      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c76:	2b80      	cmp	r3, #128	@ 0x80
 8002c78:	d018      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002c7a:	2b80      	cmp	r3, #128	@ 0x80
 8002c7c:	d821      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002c82:	2b40      	cmp	r3, #64	@ 0x40
 8002c84:	d007      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002c86:	e01c      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c88:	4b63      	ldr	r3, [pc, #396]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8c:	4a62      	ldr	r2, [pc, #392]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002c94:	e01c      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c9a:	3308      	adds	r3, #8
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f001 fbe6 	bl	8004470 <RCCEx_PLL2_Config>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002caa:	e011      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cb0:	3328      	adds	r3, #40	@ 0x28
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 fc8d 	bl	80045d4 <RCCEx_PLL3_Config>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002cc0:	e006      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cc8:	e002      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002cca:	bf00      	nop
 8002ccc:	e000      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10a      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002cd8:	4b4f      	ldr	r3, [pc, #316]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cdc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce6:	4a4c      	ldr	r2, [pc, #304]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cec:	e003      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002d02:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002d06:	2300      	movs	r3, #0
 8002d08:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002d0c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002d10:	460b      	mov	r3, r1
 8002d12:	4313      	orrs	r3, r2
 8002d14:	d053      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d22:	d035      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002d24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d28:	d82e      	bhi.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d2a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d2e:	d031      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002d30:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d34:	d828      	bhi.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d3a:	d01a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002d3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d40:	d822      	bhi.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002d46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d4a:	d007      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002d4c:	e01c      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d4e:	4b32      	ldr	r3, [pc, #200]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d52:	4a31      	ldr	r2, [pc, #196]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d5a:	e01c      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d60:	3308      	adds	r3, #8
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f001 fb83 	bl	8004470 <RCCEx_PLL2_Config>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d70:	e011      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d76:	3328      	adds	r3, #40	@ 0x28
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f001 fc2a 	bl	80045d4 <RCCEx_PLL3_Config>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d86:	e006      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d8e:	e002      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002d90:	bf00      	nop
 8002d92:	e000      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10b      	bne.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002daa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002dae:	4a1a      	ldr	r2, [pc, #104]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002db0:	430b      	orrs	r3, r1
 8002db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002db4:	e003      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002dca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002dd4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	d056      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002de2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002de6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002dea:	d038      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002dec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002df0:	d831      	bhi.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002df2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002df6:	d034      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002df8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002dfc:	d82b      	bhi.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002dfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e02:	d01d      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002e04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e08:	d825      	bhi.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002e0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e12:	d00a      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002e14:	e01f      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e16:	bf00      	nop
 8002e18:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e1c:	4ba2      	ldr	r3, [pc, #648]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e20:	4aa1      	ldr	r2, [pc, #644]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e28:	e01c      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e2e:	3308      	adds	r3, #8
 8002e30:	2100      	movs	r1, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f001 fb1c 	bl	8004470 <RCCEx_PLL2_Config>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e3e:	e011      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e44:	3328      	adds	r3, #40	@ 0x28
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f001 fbc3 	bl	80045d4 <RCCEx_PLL3_Config>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e54:	e006      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e5c:	e002      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002e5e:	bf00      	nop
 8002e60:	e000      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10b      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002e6c:	4b8e      	ldr	r3, [pc, #568]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e70:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002e7c:	4a8a      	ldr	r2, [pc, #552]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e82:	e003      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002e98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002ea2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	d03a      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb2:	2b30      	cmp	r3, #48	@ 0x30
 8002eb4:	d01f      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002eb6:	2b30      	cmp	r3, #48	@ 0x30
 8002eb8:	d819      	bhi.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	d00c      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	d815      	bhi.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d019      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002ec6:	2b10      	cmp	r3, #16
 8002ec8:	d111      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eca:	4b77      	ldr	r3, [pc, #476]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ece:	4a76      	ldr	r2, [pc, #472]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ed4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002ed6:	e011      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002edc:	3308      	adds	r3, #8
 8002ede:	2102      	movs	r1, #2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f001 fac5 	bl	8004470 <RCCEx_PLL2_Config>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002eec:	e006      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ef4:	e002      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002ef6:	bf00      	nop
 8002ef8:	e000      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002efa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002efc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f04:	4b68      	ldr	r3, [pc, #416]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f08:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f12:	4a65      	ldr	r2, [pc, #404]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f14:	430b      	orrs	r3, r1
 8002f16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f18:	e003      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002f2e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002f32:	2300      	movs	r3, #0
 8002f34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002f38:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	d051      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f4c:	d035      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002f4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f52:	d82e      	bhi.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f58:	d031      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002f5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f5e:	d828      	bhi.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f64:	d01a      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f6a:	d822      	bhi.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f74:	d007      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002f76:	e01c      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f78:	4b4b      	ldr	r3, [pc, #300]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7c:	4a4a      	ldr	r2, [pc, #296]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f84:	e01c      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f8a:	3308      	adds	r3, #8
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f001 fa6e 	bl	8004470 <RCCEx_PLL2_Config>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f9a:	e011      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa0:	3328      	adds	r3, #40	@ 0x28
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f001 fb15 	bl	80045d4 <RCCEx_PLL3_Config>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002fb0:	e006      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fb8:	e002      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002fba:	bf00      	nop
 8002fbc:	e000      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10a      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002fc8:	4b37      	ldr	r3, [pc, #220]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fcc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd6:	4a34      	ldr	r2, [pc, #208]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6513      	str	r3, [r2, #80]	@ 0x50
 8002fdc:	e003      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002ffc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003000:	460b      	mov	r3, r1
 8003002:	4313      	orrs	r3, r2
 8003004:	d056      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800300c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003010:	d033      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003012:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003016:	d82c      	bhi.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003018:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800301c:	d02f      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800301e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003022:	d826      	bhi.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003024:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003028:	d02b      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800302a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800302e:	d820      	bhi.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003030:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003034:	d012      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003036:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800303a:	d81a      	bhi.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d022      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003044:	d115      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800304a:	3308      	adds	r3, #8
 800304c:	2101      	movs	r1, #1
 800304e:	4618      	mov	r0, r3
 8003050:	f001 fa0e 	bl	8004470 <RCCEx_PLL2_Config>
 8003054:	4603      	mov	r3, r0
 8003056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800305a:	e015      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800305c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003060:	3328      	adds	r3, #40	@ 0x28
 8003062:	2101      	movs	r1, #1
 8003064:	4618      	mov	r0, r3
 8003066:	f001 fab5 	bl	80045d4 <RCCEx_PLL3_Config>
 800306a:	4603      	mov	r3, r0
 800306c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003070:	e00a      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003078:	e006      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800307a:	bf00      	nop
 800307c:	e004      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800307e:	bf00      	nop
 8003080:	e002      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003082:	bf00      	nop
 8003084:	e000      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10d      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003090:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003094:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800309c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800309e:	4a02      	ldr	r2, [pc, #8]	@ (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80030a4:	e006      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80030a6:	bf00      	nop
 80030a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80030b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80030c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030c4:	2300      	movs	r3, #0
 80030c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030ca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4313      	orrs	r3, r2
 80030d2:	d055      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80030d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80030dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030e0:	d033      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80030e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030e6:	d82c      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ec:	d02f      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80030ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030f2:	d826      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80030f8:	d02b      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80030fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80030fe:	d820      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003100:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003104:	d012      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003106:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800310a:	d81a      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800310c:	2b00      	cmp	r3, #0
 800310e:	d022      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003110:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003114:	d115      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800311a:	3308      	adds	r3, #8
 800311c:	2101      	movs	r1, #1
 800311e:	4618      	mov	r0, r3
 8003120:	f001 f9a6 	bl	8004470 <RCCEx_PLL2_Config>
 8003124:	4603      	mov	r3, r0
 8003126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800312a:	e015      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800312c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003130:	3328      	adds	r3, #40	@ 0x28
 8003132:	2101      	movs	r1, #1
 8003134:	4618      	mov	r0, r3
 8003136:	f001 fa4d 	bl	80045d4 <RCCEx_PLL3_Config>
 800313a:	4603      	mov	r3, r0
 800313c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003140:	e00a      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003148:	e006      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800314a:	bf00      	nop
 800314c:	e004      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800314e:	bf00      	nop
 8003150:	e002      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003152:	bf00      	nop
 8003154:	e000      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003156:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003158:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10b      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003160:	4ba3      	ldr	r3, [pc, #652]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003164:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800316c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003170:	4a9f      	ldr	r2, [pc, #636]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003172:	430b      	orrs	r3, r1
 8003174:	6593      	str	r3, [r2, #88]	@ 0x58
 8003176:	e003      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800317c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003188:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800318c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003190:	2300      	movs	r3, #0
 8003192:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003196:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800319a:	460b      	mov	r3, r1
 800319c:	4313      	orrs	r3, r2
 800319e:	d037      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80031a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031aa:	d00e      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80031ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031b0:	d816      	bhi.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d018      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80031b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031ba:	d111      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031bc:	4b8c      	ldr	r3, [pc, #560]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c0:	4a8b      	ldr	r2, [pc, #556]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031c8:	e00f      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ce:	3308      	adds	r3, #8
 80031d0:	2101      	movs	r1, #1
 80031d2:	4618      	mov	r0, r3
 80031d4:	f001 f94c 	bl	8004470 <RCCEx_PLL2_Config>
 80031d8:	4603      	mov	r3, r0
 80031da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031de:	e004      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031e6:	e000      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80031e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10a      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031f2:	4b7f      	ldr	r3, [pc, #508]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80031fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003200:	4a7b      	ldr	r2, [pc, #492]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003202:	430b      	orrs	r3, r1
 8003204:	6513      	str	r3, [r2, #80]	@ 0x50
 8003206:	e003      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003208:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800320c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003218:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800321c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003220:	2300      	movs	r3, #0
 8003222:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003226:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800322a:	460b      	mov	r3, r1
 800322c:	4313      	orrs	r3, r2
 800322e:	d039      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003236:	2b03      	cmp	r3, #3
 8003238:	d81c      	bhi.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800323a:	a201      	add	r2, pc, #4	@ (adr r2, 8003240 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800323c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003240:	0800327d 	.word	0x0800327d
 8003244:	08003251 	.word	0x08003251
 8003248:	0800325f 	.word	0x0800325f
 800324c:	0800327d 	.word	0x0800327d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003250:	4b67      	ldr	r3, [pc, #412]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003254:	4a66      	ldr	r2, [pc, #408]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800325a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800325c:	e00f      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800325e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003262:	3308      	adds	r3, #8
 8003264:	2102      	movs	r1, #2
 8003266:	4618      	mov	r0, r3
 8003268:	f001 f902 	bl	8004470 <RCCEx_PLL2_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003272:	e004      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800327a:	e000      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800327c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800327e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10a      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003286:	4b5a      	ldr	r3, [pc, #360]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800328a:	f023 0103 	bic.w	r1, r3, #3
 800328e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003294:	4a56      	ldr	r2, [pc, #344]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003296:	430b      	orrs	r3, r1
 8003298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800329a:	e003      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80032b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032b4:	2300      	movs	r3, #0
 80032b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80032be:	460b      	mov	r3, r1
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f000 809f 	beq.w	8003404 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032c6:	4b4b      	ldr	r3, [pc, #300]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a4a      	ldr	r2, [pc, #296]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032d2:	f7fd ff8f 	bl	80011f4 <HAL_GetTick>
 80032d6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032da:	e00b      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032dc:	f7fd ff8a 	bl	80011f4 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b64      	cmp	r3, #100	@ 0x64
 80032ea:	d903      	bls.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032f2:	e005      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032f4:	4b3f      	ldr	r3, [pc, #252]	@ (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ed      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003304:	2b00      	cmp	r3, #0
 8003306:	d179      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003308:	4b39      	ldr	r3, [pc, #228]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800330a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800330c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003310:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003314:	4053      	eors	r3, r2
 8003316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800331a:	2b00      	cmp	r3, #0
 800331c:	d015      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800331e:	4b34      	ldr	r3, [pc, #208]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003326:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800332a:	4b31      	ldr	r3, [pc, #196]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332e:	4a30      	ldr	r2, [pc, #192]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003334:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003336:	4b2e      	ldr	r3, [pc, #184]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333a:	4a2d      	ldr	r2, [pc, #180]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800333c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003340:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003342:	4a2b      	ldr	r2, [pc, #172]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003344:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003348:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800334a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003352:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003356:	d118      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fd ff4c 	bl	80011f4 <HAL_GetTick>
 800335c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003360:	e00d      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003362:	f7fd ff47 	bl	80011f4 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800336c:	1ad2      	subs	r2, r2, r3
 800336e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003372:	429a      	cmp	r2, r3
 8003374:	d903      	bls.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800337c:	e005      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800337e:	4b1c      	ldr	r3, [pc, #112]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0eb      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800338a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800338e:	2b00      	cmp	r3, #0
 8003390:	d129      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003396:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800339a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800339e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033a2:	d10e      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80033a4:	4b12      	ldr	r3, [pc, #72]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80033ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033b4:	091a      	lsrs	r2, r3, #4
 80033b6:	4b10      	ldr	r3, [pc, #64]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	4a0d      	ldr	r2, [pc, #52]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033bc:	430b      	orrs	r3, r1
 80033be:	6113      	str	r3, [r2, #16]
 80033c0:	e005      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80033c2:	4b0b      	ldr	r3, [pc, #44]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	4a0a      	ldr	r2, [pc, #40]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80033cc:	6113      	str	r3, [r2, #16]
 80033ce:	4b08      	ldr	r3, [pc, #32]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033d0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80033d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033de:	4a04      	ldr	r2, [pc, #16]	@ (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033e0:	430b      	orrs	r3, r1
 80033e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033e4:	e00e      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80033ee:	e009      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80033f0:	58024400 	.word	0x58024400
 80033f4:	58024800 	.word	0x58024800
 80033f8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003400:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340c:	f002 0301 	and.w	r3, r2, #1
 8003410:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003414:	2300      	movs	r3, #0
 8003416:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800341a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800341e:	460b      	mov	r3, r1
 8003420:	4313      	orrs	r3, r2
 8003422:	f000 8089 	beq.w	8003538 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800342a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800342c:	2b28      	cmp	r3, #40	@ 0x28
 800342e:	d86b      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003430:	a201      	add	r2, pc, #4	@ (adr r2, 8003438 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003436:	bf00      	nop
 8003438:	08003511 	.word	0x08003511
 800343c:	08003509 	.word	0x08003509
 8003440:	08003509 	.word	0x08003509
 8003444:	08003509 	.word	0x08003509
 8003448:	08003509 	.word	0x08003509
 800344c:	08003509 	.word	0x08003509
 8003450:	08003509 	.word	0x08003509
 8003454:	08003509 	.word	0x08003509
 8003458:	080034dd 	.word	0x080034dd
 800345c:	08003509 	.word	0x08003509
 8003460:	08003509 	.word	0x08003509
 8003464:	08003509 	.word	0x08003509
 8003468:	08003509 	.word	0x08003509
 800346c:	08003509 	.word	0x08003509
 8003470:	08003509 	.word	0x08003509
 8003474:	08003509 	.word	0x08003509
 8003478:	080034f3 	.word	0x080034f3
 800347c:	08003509 	.word	0x08003509
 8003480:	08003509 	.word	0x08003509
 8003484:	08003509 	.word	0x08003509
 8003488:	08003509 	.word	0x08003509
 800348c:	08003509 	.word	0x08003509
 8003490:	08003509 	.word	0x08003509
 8003494:	08003509 	.word	0x08003509
 8003498:	08003511 	.word	0x08003511
 800349c:	08003509 	.word	0x08003509
 80034a0:	08003509 	.word	0x08003509
 80034a4:	08003509 	.word	0x08003509
 80034a8:	08003509 	.word	0x08003509
 80034ac:	08003509 	.word	0x08003509
 80034b0:	08003509 	.word	0x08003509
 80034b4:	08003509 	.word	0x08003509
 80034b8:	08003511 	.word	0x08003511
 80034bc:	08003509 	.word	0x08003509
 80034c0:	08003509 	.word	0x08003509
 80034c4:	08003509 	.word	0x08003509
 80034c8:	08003509 	.word	0x08003509
 80034cc:	08003509 	.word	0x08003509
 80034d0:	08003509 	.word	0x08003509
 80034d4:	08003509 	.word	0x08003509
 80034d8:	08003511 	.word	0x08003511
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e0:	3308      	adds	r3, #8
 80034e2:	2101      	movs	r1, #1
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 ffc3 	bl	8004470 <RCCEx_PLL2_Config>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80034f0:	e00f      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f6:	3328      	adds	r3, #40	@ 0x28
 80034f8:	2101      	movs	r1, #1
 80034fa:	4618      	mov	r0, r3
 80034fc:	f001 f86a 	bl	80045d4 <RCCEx_PLL3_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003506:	e004      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800350e:	e000      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10a      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800351a:	4bbf      	ldr	r3, [pc, #764]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800351c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800351e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003526:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003528:	4abb      	ldr	r2, [pc, #748]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800352a:	430b      	orrs	r3, r1
 800352c:	6553      	str	r3, [r2, #84]	@ 0x54
 800352e:	e003      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003534:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f002 0302 	and.w	r3, r2, #2
 8003544:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003548:	2300      	movs	r3, #0
 800354a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800354e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003552:	460b      	mov	r3, r1
 8003554:	4313      	orrs	r3, r2
 8003556:	d041      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800355e:	2b05      	cmp	r3, #5
 8003560:	d824      	bhi.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003562:	a201      	add	r2, pc, #4	@ (adr r2, 8003568 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003568:	080035b5 	.word	0x080035b5
 800356c:	08003581 	.word	0x08003581
 8003570:	08003597 	.word	0x08003597
 8003574:	080035b5 	.word	0x080035b5
 8003578:	080035b5 	.word	0x080035b5
 800357c:	080035b5 	.word	0x080035b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003584:	3308      	adds	r3, #8
 8003586:	2101      	movs	r1, #1
 8003588:	4618      	mov	r0, r3
 800358a:	f000 ff71 	bl	8004470 <RCCEx_PLL2_Config>
 800358e:	4603      	mov	r3, r0
 8003590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003594:	e00f      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359a:	3328      	adds	r3, #40	@ 0x28
 800359c:	2101      	movs	r1, #1
 800359e:	4618      	mov	r0, r3
 80035a0:	f001 f818 	bl	80045d4 <RCCEx_PLL3_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80035aa:	e004      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035b2:	e000      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80035b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10a      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80035be:	4b96      	ldr	r3, [pc, #600]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c2:	f023 0107 	bic.w	r1, r3, #7
 80035c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035cc:	4a92      	ldr	r2, [pc, #584]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035ce:	430b      	orrs	r3, r1
 80035d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80035d2:	e003      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f002 0304 	and.w	r3, r2, #4
 80035e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035ec:	2300      	movs	r3, #0
 80035ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4313      	orrs	r3, r2
 80035fa:	d044      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80035fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003604:	2b05      	cmp	r3, #5
 8003606:	d825      	bhi.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003608:	a201      	add	r2, pc, #4	@ (adr r2, 8003610 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360e:	bf00      	nop
 8003610:	0800365d 	.word	0x0800365d
 8003614:	08003629 	.word	0x08003629
 8003618:	0800363f 	.word	0x0800363f
 800361c:	0800365d 	.word	0x0800365d
 8003620:	0800365d 	.word	0x0800365d
 8003624:	0800365d 	.word	0x0800365d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362c:	3308      	adds	r3, #8
 800362e:	2101      	movs	r1, #1
 8003630:	4618      	mov	r0, r3
 8003632:	f000 ff1d 	bl	8004470 <RCCEx_PLL2_Config>
 8003636:	4603      	mov	r3, r0
 8003638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800363c:	e00f      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800363e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003642:	3328      	adds	r3, #40	@ 0x28
 8003644:	2101      	movs	r1, #1
 8003646:	4618      	mov	r0, r3
 8003648:	f000 ffc4 	bl	80045d4 <RCCEx_PLL3_Config>
 800364c:	4603      	mov	r3, r0
 800364e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003652:	e004      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800365a:	e000      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800365c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800365e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10b      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003666:	4b6c      	ldr	r3, [pc, #432]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366a:	f023 0107 	bic.w	r1, r3, #7
 800366e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003676:	4a68      	ldr	r2, [pc, #416]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003678:	430b      	orrs	r3, r1
 800367a:	6593      	str	r3, [r2, #88]	@ 0x58
 800367c:	e003      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003682:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368e:	f002 0320 	and.w	r3, r2, #32
 8003692:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003696:	2300      	movs	r3, #0
 8003698:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800369c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80036a0:	460b      	mov	r3, r1
 80036a2:	4313      	orrs	r3, r2
 80036a4:	d055      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036b2:	d033      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80036b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036b8:	d82c      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036be:	d02f      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80036c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c4:	d826      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036ca:	d02b      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80036cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036d0:	d820      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036d6:	d012      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80036d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036dc:	d81a      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d022      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80036e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036e6:	d115      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ec:	3308      	adds	r3, #8
 80036ee:	2100      	movs	r1, #0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 febd 	bl	8004470 <RCCEx_PLL2_Config>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80036fc:	e015      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003702:	3328      	adds	r3, #40	@ 0x28
 8003704:	2102      	movs	r1, #2
 8003706:	4618      	mov	r0, r3
 8003708:	f000 ff64 	bl	80045d4 <RCCEx_PLL3_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003712:	e00a      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800371a:	e006      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800371c:	bf00      	nop
 800371e:	e004      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003720:	bf00      	nop
 8003722:	e002      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003724:	bf00      	nop
 8003726:	e000      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800372a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10b      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003732:	4b39      	ldr	r3, [pc, #228]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003736:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003742:	4a35      	ldr	r2, [pc, #212]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003744:	430b      	orrs	r3, r1
 8003746:	6553      	str	r3, [r2, #84]	@ 0x54
 8003748:	e003      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800374e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800375e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003762:	2300      	movs	r3, #0
 8003764:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003768:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800376c:	460b      	mov	r3, r1
 800376e:	4313      	orrs	r3, r2
 8003770:	d058      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003776:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800377a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800377e:	d033      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003780:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003784:	d82c      	bhi.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800378a:	d02f      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800378c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003790:	d826      	bhi.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003792:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003796:	d02b      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003798:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800379c:	d820      	bhi.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800379e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037a2:	d012      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80037a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037a8:	d81a      	bhi.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d022      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80037ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037b2:	d115      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b8:	3308      	adds	r3, #8
 80037ba:	2100      	movs	r1, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fe57 	bl	8004470 <RCCEx_PLL2_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037c8:	e015      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ce:	3328      	adds	r3, #40	@ 0x28
 80037d0:	2102      	movs	r1, #2
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fefe 	bl	80045d4 <RCCEx_PLL3_Config>
 80037d8:	4603      	mov	r3, r0
 80037da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037de:	e00a      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037e6:	e006      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037e8:	bf00      	nop
 80037ea:	e004      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037ec:	bf00      	nop
 80037ee:	e002      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037f0:	bf00      	nop
 80037f2:	e000      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10e      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037fe:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003802:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800380e:	4a02      	ldr	r2, [pc, #8]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003810:	430b      	orrs	r3, r1
 8003812:	6593      	str	r3, [r2, #88]	@ 0x58
 8003814:	e006      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003816:	bf00      	nop
 8003818:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003820:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003830:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003834:	2300      	movs	r3, #0
 8003836:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800383a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800383e:	460b      	mov	r3, r1
 8003840:	4313      	orrs	r3, r2
 8003842:	d055      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003848:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800384c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003850:	d033      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003852:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003856:	d82c      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800385c:	d02f      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800385e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003862:	d826      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003864:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003868:	d02b      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800386a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800386e:	d820      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003870:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003874:	d012      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003876:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800387a:	d81a      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800387c:	2b00      	cmp	r3, #0
 800387e:	d022      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003884:	d115      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388a:	3308      	adds	r3, #8
 800388c:	2100      	movs	r1, #0
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fdee 	bl	8004470 <RCCEx_PLL2_Config>
 8003894:	4603      	mov	r3, r0
 8003896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800389a:	e015      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800389c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a0:	3328      	adds	r3, #40	@ 0x28
 80038a2:	2102      	movs	r1, #2
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fe95 	bl	80045d4 <RCCEx_PLL3_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80038b0:	e00a      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038b8:	e006      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038ba:	bf00      	nop
 80038bc:	e004      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038be:	bf00      	nop
 80038c0:	e002      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10b      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80038d0:	4ba1      	ldr	r3, [pc, #644]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80038d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80038e0:	4a9d      	ldr	r2, [pc, #628]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038e2:	430b      	orrs	r3, r1
 80038e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80038e6:	e003      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	f002 0308 	and.w	r3, r2, #8
 80038fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003900:	2300      	movs	r3, #0
 8003902:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003906:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800390a:	460b      	mov	r3, r1
 800390c:	4313      	orrs	r3, r2
 800390e:	d01e      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800391c:	d10c      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800391e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003922:	3328      	adds	r3, #40	@ 0x28
 8003924:	2102      	movs	r1, #2
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fe54 	bl	80045d4 <RCCEx_PLL3_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003938:	4b87      	ldr	r3, [pc, #540]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800393a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003944:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003948:	4a83      	ldr	r2, [pc, #524]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800394a:	430b      	orrs	r3, r1
 800394c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	f002 0310 	and.w	r3, r2, #16
 800395a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800395e:	2300      	movs	r3, #0
 8003960:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003964:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003968:	460b      	mov	r3, r1
 800396a:	4313      	orrs	r3, r2
 800396c:	d01e      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800396e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003972:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800397a:	d10c      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800397c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003980:	3328      	adds	r3, #40	@ 0x28
 8003982:	2102      	movs	r1, #2
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fe25 	bl	80045d4 <RCCEx_PLL3_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003996:	4b70      	ldr	r3, [pc, #448]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800399e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039a6:	4a6c      	ldr	r2, [pc, #432]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80039b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039bc:	2300      	movs	r3, #0
 80039be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80039c6:	460b      	mov	r3, r1
 80039c8:	4313      	orrs	r3, r2
 80039ca:	d03e      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80039cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80039d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039d8:	d022      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80039da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039de:	d81b      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80039e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e8:	d00b      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80039ea:	e015      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f0:	3308      	adds	r3, #8
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fd3b 	bl	8004470 <RCCEx_PLL2_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a00:	e00f      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a06:	3328      	adds	r3, #40	@ 0x28
 8003a08:	2102      	movs	r1, #2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fde2 	bl	80045d4 <RCCEx_PLL3_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a16:	e004      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a1e:	e000      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10b      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a2a:	4b4b      	ldr	r3, [pc, #300]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a3a:	4a47      	ldr	r2, [pc, #284]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a40:	e003      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a52:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003a56:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a58:	2300      	movs	r3, #0
 8003a5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a5c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003a60:	460b      	mov	r3, r1
 8003a62:	4313      	orrs	r3, r2
 8003a64:	d03b      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a72:	d01f      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003a74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a78:	d818      	bhi.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003a7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a7e:	d003      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003a80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a84:	d007      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003a86:	e011      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a88:	4b33      	ldr	r3, [pc, #204]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8c:	4a32      	ldr	r2, [pc, #200]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003a94:	e00f      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9a:	3328      	adds	r3, #40	@ 0x28
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fd98 	bl	80045d4 <RCCEx_PLL3_Config>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003aaa:	e004      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ab2:	e000      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10b      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003abe:	4b26      	ldr	r3, [pc, #152]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ace:	4a22      	ldr	r2, [pc, #136]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ad4:	e003      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003aea:	673b      	str	r3, [r7, #112]	@ 0x70
 8003aec:	2300      	movs	r3, #0
 8003aee:	677b      	str	r3, [r7, #116]	@ 0x74
 8003af0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003af4:	460b      	mov	r3, r1
 8003af6:	4313      	orrs	r3, r2
 8003af8:	d034      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003b04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b08:	d007      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003b0a:	e011      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b0c:	4b12      	ldr	r3, [pc, #72]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b10:	4a11      	ldr	r2, [pc, #68]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b18:	e00e      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1e:	3308      	adds	r3, #8
 8003b20:	2102      	movs	r1, #2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fca4 	bl	8004470 <RCCEx_PLL2_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b2e:	e003      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10d      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003b40:	4b05      	ldr	r3, [pc, #20]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b44:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b4e:	4a02      	ldr	r2, [pc, #8]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b50:	430b      	orrs	r3, r1
 8003b52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b54:	e006      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003b56:	bf00      	nop
 8003b58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003b70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b72:	2300      	movs	r3, #0
 8003b74:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b76:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	d00c      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b84:	3328      	adds	r3, #40	@ 0x28
 8003b86:	2102      	movs	r1, #2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fd23 	bl	80045d4 <RCCEx_PLL3_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003ba6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ba8:	2300      	movs	r3, #0
 8003baa:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	d038      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bc2:	d018      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003bc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bc8:	d811      	bhi.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003bca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bce:	d014      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bd4:	d80b      	bhi.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d011      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bde:	d106      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be0:	4bc3      	ldr	r3, [pc, #780]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be4:	4ac2      	ldr	r2, [pc, #776]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003be6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003bec:	e008      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bf4:	e004      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003bf6:	bf00      	nop
 8003bf8:	e002      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003bfa:	bf00      	nop
 8003bfc:	e000      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003bfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10b      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c08:	4bb9      	ldr	r3, [pc, #740]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c0c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c18:	4ab5      	ldr	r2, [pc, #724]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c1e:	e003      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c30:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003c34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c36:	2300      	movs	r3, #0
 8003c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c3a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4313      	orrs	r3, r2
 8003c42:	d009      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c44:	4baa      	ldr	r3, [pc, #680]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c52:	4aa7      	ldr	r2, [pc, #668]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c54:	430b      	orrs	r3, r1
 8003c56:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003c64:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c66:	2300      	movs	r3, #0
 8003c68:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c6a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4313      	orrs	r3, r2
 8003c72:	d00a      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003c74:	4b9e      	ldr	r3, [pc, #632]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003c84:	4a9a      	ldr	r2, [pc, #616]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c86:	430b      	orrs	r3, r1
 8003c88:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003c96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c98:	2300      	movs	r3, #0
 8003c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c9c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	d009      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ca6:	4b92      	ldr	r3, [pc, #584]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003caa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cb4:	4a8e      	ldr	r2, [pc, #568]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003cc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cc8:	2300      	movs	r3, #0
 8003cca:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ccc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	d00e      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cd6:	4b86      	ldr	r3, [pc, #536]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	4a85      	ldr	r2, [pc, #532]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cdc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ce0:	6113      	str	r3, [r2, #16]
 8003ce2:	4b83      	ldr	r3, [pc, #524]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ce4:	6919      	ldr	r1, [r3, #16]
 8003ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003cee:	4a80      	ldr	r2, [pc, #512]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003d00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d02:	2300      	movs	r3, #0
 8003d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d06:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	d009      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003d10:	4b77      	ldr	r3, [pc, #476]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d14:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d1e:	4a74      	ldr	r2, [pc, #464]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d20:	430b      	orrs	r3, r1
 8003d22:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003d30:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d32:	2300      	movs	r3, #0
 8003d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d36:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	d00a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d40:	4b6b      	ldr	r3, [pc, #428]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d44:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d50:	4a67      	ldr	r2, [pc, #412]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d52:	430b      	orrs	r3, r1
 8003d54:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	2100      	movs	r1, #0
 8003d60:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d68:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	d011      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d76:	3308      	adds	r3, #8
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fb78 	bl	8004470 <RCCEx_PLL2_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	2100      	movs	r1, #0
 8003da0:	6239      	str	r1, [r7, #32]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003dac:	460b      	mov	r3, r1
 8003dae:	4313      	orrs	r3, r2
 8003db0:	d011      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db6:	3308      	adds	r3, #8
 8003db8:	2101      	movs	r1, #1
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fb58 	bl	8004470 <RCCEx_PLL2_Config>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dde:	2100      	movs	r1, #0
 8003de0:	61b9      	str	r1, [r7, #24]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	61fb      	str	r3, [r7, #28]
 8003de8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003dec:	460b      	mov	r3, r1
 8003dee:	4313      	orrs	r3, r2
 8003df0:	d011      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df6:	3308      	adds	r3, #8
 8003df8:	2102      	movs	r1, #2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fb38 	bl	8004470 <RCCEx_PLL2_Config>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1e:	2100      	movs	r1, #0
 8003e20:	6139      	str	r1, [r7, #16]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	d011      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e36:	3328      	adds	r3, #40	@ 0x28
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fbca 	bl	80045d4 <RCCEx_PLL3_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5e:	2100      	movs	r1, #0
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	d011      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e76:	3328      	adds	r3, #40	@ 0x28
 8003e78:	2101      	movs	r1, #1
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fbaa 	bl	80045d4 <RCCEx_PLL3_Config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	6039      	str	r1, [r7, #0]
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	607b      	str	r3, [r7, #4]
 8003ea8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003eac:	460b      	mov	r3, r1
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	d011      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb6:	3328      	adds	r3, #40	@ 0x28
 8003eb8:	2102      	movs	r1, #2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fb8a 	bl	80045d4 <RCCEx_PLL3_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003ed6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	e000      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003eea:	46bd      	mov	sp, r7
 8003eec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ef0:	58024400 	.word	0x58024400

08003ef4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003ef8:	f7fe fd96 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8003efc:	4602      	mov	r2, r0
 8003efe:	4b06      	ldr	r3, [pc, #24]	@ (8003f18 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	091b      	lsrs	r3, r3, #4
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	4904      	ldr	r1, [pc, #16]	@ (8003f1c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003f0a:	5ccb      	ldrb	r3, [r1, r3]
 8003f0c:	f003 031f 	and.w	r3, r3, #31
 8003f10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	58024400 	.word	0x58024400
 8003f1c:	080061b0 	.word	0x080061b0

08003f20 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b089      	sub	sp, #36	@ 0x24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f28:	4ba1      	ldr	r3, [pc, #644]	@ (80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003f32:	4b9f      	ldr	r3, [pc, #636]	@ (80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f36:	0b1b      	lsrs	r3, r3, #12
 8003f38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f3c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f3e:	4b9c      	ldr	r3, [pc, #624]	@ (80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f42:	091b      	lsrs	r3, r3, #4
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003f4a:	4b99      	ldr	r3, [pc, #612]	@ (80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4e:	08db      	lsrs	r3, r3, #3
 8003f50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	fb02 f303 	mul.w	r3, r2, r3
 8003f5a:	ee07 3a90 	vmov	s15, r3
 8003f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8111 	beq.w	8004190 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	f000 8083 	beq.w	800407c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	f200 80a1 	bhi.w	80040c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d056      	beq.n	8004038 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003f8a:	e099      	b.n	80040c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f8c:	4b88      	ldr	r3, [pc, #544]	@ (80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d02d      	beq.n	8003ff4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f98:	4b85      	ldr	r3, [pc, #532]	@ (80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	08db      	lsrs	r3, r3, #3
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	4a84      	ldr	r2, [pc, #528]	@ (80041b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	ee07 3a90 	vmov	s15, r3
 8003fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	ee07 3a90 	vmov	s15, r3
 8003fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fc2:	4b7b      	ldr	r3, [pc, #492]	@ (80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fca:	ee07 3a90 	vmov	s15, r3
 8003fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fd6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003ff2:	e087      	b.n	8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ffe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004006:	4b6a      	ldr	r3, [pc, #424]	@ (80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004016:	ed97 6a03 	vldr	s12, [r7, #12]
 800401a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800401e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800402a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800402e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004032:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004036:	e065      	b.n	8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	ee07 3a90 	vmov	s15, r3
 800403e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004042:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80041c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800404a:	4b59      	ldr	r3, [pc, #356]	@ (80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800404c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800404e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004052:	ee07 3a90 	vmov	s15, r3
 8004056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800405a:	ed97 6a03 	vldr	s12, [r7, #12]
 800405e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800406a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800406e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004076:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800407a:	e043      	b.n	8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004086:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80041c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800408a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800408e:	4b48      	ldr	r3, [pc, #288]	@ (80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004096:	ee07 3a90 	vmov	s15, r3
 800409a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800409e:	ed97 6a03 	vldr	s12, [r7, #12]
 80040a2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040be:	e021      	b.n	8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	ee07 3a90 	vmov	s15, r3
 80040c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80041c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80040ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040d2:	4b37      	ldr	r3, [pc, #220]	@ (80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040da:	ee07 3a90 	vmov	s15, r3
 80040de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040e6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004102:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004104:	4b2a      	ldr	r3, [pc, #168]	@ (80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004108:	0a5b      	lsrs	r3, r3, #9
 800410a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800410e:	ee07 3a90 	vmov	s15, r3
 8004112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004116:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800411a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800411e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800412a:	ee17 2a90 	vmov	r2, s15
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004132:	4b1f      	ldr	r3, [pc, #124]	@ (80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004136:	0c1b      	lsrs	r3, r3, #16
 8004138:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800413c:	ee07 3a90 	vmov	s15, r3
 8004140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004144:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004148:	ee37 7a87 	vadd.f32	s14, s15, s14
 800414c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004158:	ee17 2a90 	vmov	r2, s15
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004160:	4b13      	ldr	r3, [pc, #76]	@ (80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004164:	0e1b      	lsrs	r3, r3, #24
 8004166:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800416a:	ee07 3a90 	vmov	s15, r3
 800416e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004172:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004176:	ee37 7a87 	vadd.f32	s14, s15, s14
 800417a:	edd7 6a07 	vldr	s13, [r7, #28]
 800417e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004186:	ee17 2a90 	vmov	r2, s15
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800418e:	e008      	b.n	80041a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	609a      	str	r2, [r3, #8]
}
 80041a2:	bf00      	nop
 80041a4:	3724      	adds	r7, #36	@ 0x24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	58024400 	.word	0x58024400
 80041b4:	03d09000 	.word	0x03d09000
 80041b8:	46000000 	.word	0x46000000
 80041bc:	4c742400 	.word	0x4c742400
 80041c0:	4a742400 	.word	0x4a742400
 80041c4:	4af42400 	.word	0x4af42400

080041c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b089      	sub	sp, #36	@ 0x24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041d0:	4ba1      	ldr	r3, [pc, #644]	@ (8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80041da:	4b9f      	ldr	r3, [pc, #636]	@ (8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041de:	0d1b      	lsrs	r3, r3, #20
 80041e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80041e6:	4b9c      	ldr	r3, [pc, #624]	@ (8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ea:	0a1b      	lsrs	r3, r3, #8
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80041f2:	4b99      	ldr	r3, [pc, #612]	@ (8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f6:	08db      	lsrs	r3, r3, #3
 80041f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	fb02 f303 	mul.w	r3, r2, r3
 8004202:	ee07 3a90 	vmov	s15, r3
 8004206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8111 	beq.w	8004438 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	2b02      	cmp	r3, #2
 800421a:	f000 8083 	beq.w	8004324 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	2b02      	cmp	r3, #2
 8004222:	f200 80a1 	bhi.w	8004368 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d056      	beq.n	80042e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004232:	e099      	b.n	8004368 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004234:	4b88      	ldr	r3, [pc, #544]	@ (8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b00      	cmp	r3, #0
 800423e:	d02d      	beq.n	800429c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004240:	4b85      	ldr	r3, [pc, #532]	@ (8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	08db      	lsrs	r3, r3, #3
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	4a84      	ldr	r2, [pc, #528]	@ (800445c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800424c:	fa22 f303 	lsr.w	r3, r2, r3
 8004250:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	ee07 3a90 	vmov	s15, r3
 8004258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800426a:	4b7b      	ldr	r3, [pc, #492]	@ (8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004272:	ee07 3a90 	vmov	s15, r3
 8004276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800427a:	ed97 6a03 	vldr	s12, [r7, #12]
 800427e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800428a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800428e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004296:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800429a:	e087      	b.n	80043ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	ee07 3a90 	vmov	s15, r3
 80042a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80042aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042be:	ed97 6a03 	vldr	s12, [r7, #12]
 80042c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042de:	e065      	b.n	80043ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	ee07 3a90 	vmov	s15, r3
 80042e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004468 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80042ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042f2:	4b59      	ldr	r3, [pc, #356]	@ (8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042fa:	ee07 3a90 	vmov	s15, r3
 80042fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004302:	ed97 6a03 	vldr	s12, [r7, #12]
 8004306:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800430a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800430e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800431a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800431e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004322:	e043      	b.n	80043ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	ee07 3a90 	vmov	s15, r3
 800432a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800446c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004336:	4b48      	ldr	r3, [pc, #288]	@ (8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800433e:	ee07 3a90 	vmov	s15, r3
 8004342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004346:	ed97 6a03 	vldr	s12, [r7, #12]
 800434a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800434e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800435a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800435e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004366:	e021      	b.n	80043ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	ee07 3a90 	vmov	s15, r3
 800436e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004372:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004468 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800437a:	4b37      	ldr	r3, [pc, #220]	@ (8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800438a:	ed97 6a03 	vldr	s12, [r7, #12]
 800438e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004460 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800439a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800439e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80043ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b0:	0a5b      	lsrs	r3, r3, #9
 80043b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80043ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043d2:	ee17 2a90 	vmov	r2, s15
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80043da:	4b1f      	ldr	r3, [pc, #124]	@ (8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	0c1b      	lsrs	r3, r3, #16
 80043e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043e4:	ee07 3a90 	vmov	s15, r3
 80043e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80043f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004400:	ee17 2a90 	vmov	r2, s15
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004408:	4b13      	ldr	r3, [pc, #76]	@ (8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800440a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440c:	0e1b      	lsrs	r3, r3, #24
 800440e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800441e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004422:	edd7 6a07 	vldr	s13, [r7, #28]
 8004426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800442a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800442e:	ee17 2a90 	vmov	r2, s15
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004436:	e008      	b.n	800444a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	609a      	str	r2, [r3, #8]
}
 800444a:	bf00      	nop
 800444c:	3724      	adds	r7, #36	@ 0x24
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	58024400 	.word	0x58024400
 800445c:	03d09000 	.word	0x03d09000
 8004460:	46000000 	.word	0x46000000
 8004464:	4c742400 	.word	0x4c742400
 8004468:	4a742400 	.word	0x4a742400
 800446c:	4af42400 	.word	0x4af42400

08004470 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800447e:	4b53      	ldr	r3, [pc, #332]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 8004480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	2b03      	cmp	r3, #3
 8004488:	d101      	bne.n	800448e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e099      	b.n	80045c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800448e:	4b4f      	ldr	r3, [pc, #316]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a4e      	ldr	r2, [pc, #312]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 8004494:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800449a:	f7fc feab 	bl	80011f4 <HAL_GetTick>
 800449e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044a0:	e008      	b.n	80044b4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044a2:	f7fc fea7 	bl	80011f4 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e086      	b.n	80045c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044b4:	4b45      	ldr	r3, [pc, #276]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1f0      	bne.n	80044a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80044c0:	4b42      	ldr	r3, [pc, #264]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 80044c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	031b      	lsls	r3, r3, #12
 80044ce:	493f      	ldr	r1, [pc, #252]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	3b01      	subs	r3, #1
 80044da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	025b      	lsls	r3, r3, #9
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	041b      	lsls	r3, r3, #16
 80044f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	061b      	lsls	r3, r3, #24
 8004500:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004504:	4931      	ldr	r1, [pc, #196]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 8004506:	4313      	orrs	r3, r2
 8004508:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800450a:	4b30      	ldr	r3, [pc, #192]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 800450c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	492d      	ldr	r1, [pc, #180]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 8004518:	4313      	orrs	r3, r2
 800451a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800451c:	4b2b      	ldr	r3, [pc, #172]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 800451e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004520:	f023 0220 	bic.w	r2, r3, #32
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	4928      	ldr	r1, [pc, #160]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 800452a:	4313      	orrs	r3, r2
 800452c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800452e:	4b27      	ldr	r3, [pc, #156]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 8004530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004532:	4a26      	ldr	r2, [pc, #152]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 8004534:	f023 0310 	bic.w	r3, r3, #16
 8004538:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800453a:	4b24      	ldr	r3, [pc, #144]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 800453c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800453e:	4b24      	ldr	r3, [pc, #144]	@ (80045d0 <RCCEx_PLL2_Config+0x160>)
 8004540:	4013      	ands	r3, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	69d2      	ldr	r2, [r2, #28]
 8004546:	00d2      	lsls	r2, r2, #3
 8004548:	4920      	ldr	r1, [pc, #128]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 800454a:	4313      	orrs	r3, r2
 800454c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800454e:	4b1f      	ldr	r3, [pc, #124]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 8004550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004552:	4a1e      	ldr	r2, [pc, #120]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 8004554:	f043 0310 	orr.w	r3, r3, #16
 8004558:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d106      	bne.n	800456e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004560:	4b1a      	ldr	r3, [pc, #104]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 8004562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004564:	4a19      	ldr	r2, [pc, #100]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 8004566:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800456a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800456c:	e00f      	b.n	800458e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d106      	bne.n	8004582 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004574:	4b15      	ldr	r3, [pc, #84]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 8004576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004578:	4a14      	ldr	r2, [pc, #80]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 800457a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800457e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004580:	e005      	b.n	800458e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004582:	4b12      	ldr	r3, [pc, #72]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 8004584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004586:	4a11      	ldr	r2, [pc, #68]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 8004588:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800458c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800458e:	4b0f      	ldr	r3, [pc, #60]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a0e      	ldr	r2, [pc, #56]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 8004594:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004598:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800459a:	f7fc fe2b 	bl	80011f4 <HAL_GetTick>
 800459e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045a0:	e008      	b.n	80045b4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80045a2:	f7fc fe27 	bl	80011f4 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e006      	b.n	80045c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045b4:	4b05      	ldr	r3, [pc, #20]	@ (80045cc <RCCEx_PLL2_Config+0x15c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0f0      	beq.n	80045a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	58024400 	.word	0x58024400
 80045d0:	ffff0007 	.word	0xffff0007

080045d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045e2:	4b53      	ldr	r3, [pc, #332]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 80045e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d101      	bne.n	80045f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e099      	b.n	8004726 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80045f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a4e      	ldr	r2, [pc, #312]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 80045f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045fe:	f7fc fdf9 	bl	80011f4 <HAL_GetTick>
 8004602:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004604:	e008      	b.n	8004618 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004606:	f7fc fdf5 	bl	80011f4 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e086      	b.n	8004726 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004618:	4b45      	ldr	r3, [pc, #276]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1f0      	bne.n	8004606 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004624:	4b42      	ldr	r3, [pc, #264]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 8004626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004628:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	051b      	lsls	r3, r3, #20
 8004632:	493f      	ldr	r1, [pc, #252]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 8004634:	4313      	orrs	r3, r2
 8004636:	628b      	str	r3, [r1, #40]	@ 0x28
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	3b01      	subs	r3, #1
 800463e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	3b01      	subs	r3, #1
 8004648:	025b      	lsls	r3, r3, #9
 800464a:	b29b      	uxth	r3, r3
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	3b01      	subs	r3, #1
 8004654:	041b      	lsls	r3, r3, #16
 8004656:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	3b01      	subs	r3, #1
 8004662:	061b      	lsls	r3, r3, #24
 8004664:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004668:	4931      	ldr	r1, [pc, #196]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 800466a:	4313      	orrs	r3, r2
 800466c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800466e:	4b30      	ldr	r3, [pc, #192]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 8004670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004672:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	492d      	ldr	r1, [pc, #180]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 800467c:	4313      	orrs	r3, r2
 800467e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004680:	4b2b      	ldr	r3, [pc, #172]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 8004682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004684:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	4928      	ldr	r1, [pc, #160]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 800468e:	4313      	orrs	r3, r2
 8004690:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004692:	4b27      	ldr	r3, [pc, #156]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 8004694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004696:	4a26      	ldr	r2, [pc, #152]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 8004698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800469c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800469e:	4b24      	ldr	r3, [pc, #144]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 80046a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046a2:	4b24      	ldr	r3, [pc, #144]	@ (8004734 <RCCEx_PLL3_Config+0x160>)
 80046a4:	4013      	ands	r3, r2
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	69d2      	ldr	r2, [r2, #28]
 80046aa:	00d2      	lsls	r2, r2, #3
 80046ac:	4920      	ldr	r1, [pc, #128]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80046b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 80046b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 80046b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d106      	bne.n	80046d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80046c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 80046c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c8:	4a19      	ldr	r2, [pc, #100]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 80046ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80046ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80046d0:	e00f      	b.n	80046f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d106      	bne.n	80046e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80046d8:	4b15      	ldr	r3, [pc, #84]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 80046da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046dc:	4a14      	ldr	r2, [pc, #80]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 80046de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80046e4:	e005      	b.n	80046f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80046e6:	4b12      	ldr	r3, [pc, #72]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 80046e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ea:	4a11      	ldr	r2, [pc, #68]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 80046ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80046f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 80046f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fe:	f7fc fd79 	bl	80011f4 <HAL_GetTick>
 8004702:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004704:	e008      	b.n	8004718 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004706:	f7fc fd75 	bl	80011f4 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e006      	b.n	8004726 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004718:	4b05      	ldr	r3, [pc, #20]	@ (8004730 <RCCEx_PLL3_Config+0x15c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0f0      	beq.n	8004706 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004724:	7bfb      	ldrb	r3, [r7, #15]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	58024400 	.word	0x58024400
 8004734:	ffff0007 	.word	0xffff0007

08004738 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e042      	b.n	80047d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004750:	2b00      	cmp	r3, #0
 8004752:	d106      	bne.n	8004762 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7fc fab7 	bl	8000cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2224      	movs	r2, #36	@ 0x24
 8004766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0201 	bic.w	r2, r2, #1
 8004778:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fd90 	bl	80052a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f825 	bl	80047d8 <UART_SetConfig>
 800478e:	4603      	mov	r3, r0
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e01b      	b.n	80047d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0201 	orr.w	r2, r2, #1
 80047c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 fe0f 	bl	80053ec <UART_CheckIdleState>
 80047ce:	4603      	mov	r3, r0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047dc:	b092      	sub	sp, #72	@ 0x48
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	431a      	orrs	r2, r3
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	4bbe      	ldr	r3, [pc, #760]	@ (8004b00 <UART_SetConfig+0x328>)
 8004808:	4013      	ands	r3, r2
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	6812      	ldr	r2, [r2, #0]
 800480e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004810:	430b      	orrs	r3, r1
 8004812:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4ab3      	ldr	r2, [pc, #716]	@ (8004b04 <UART_SetConfig+0x32c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d004      	beq.n	8004844 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004840:	4313      	orrs	r3, r2
 8004842:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	4baf      	ldr	r3, [pc, #700]	@ (8004b08 <UART_SetConfig+0x330>)
 800484c:	4013      	ands	r3, r2
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	6812      	ldr	r2, [r2, #0]
 8004852:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004854:	430b      	orrs	r3, r1
 8004856:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485e:	f023 010f 	bic.w	r1, r3, #15
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4aa6      	ldr	r2, [pc, #664]	@ (8004b0c <UART_SetConfig+0x334>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d177      	bne.n	8004968 <UART_SetConfig+0x190>
 8004878:	4ba5      	ldr	r3, [pc, #660]	@ (8004b10 <UART_SetConfig+0x338>)
 800487a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800487c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004880:	2b28      	cmp	r3, #40	@ 0x28
 8004882:	d86d      	bhi.n	8004960 <UART_SetConfig+0x188>
 8004884:	a201      	add	r2, pc, #4	@ (adr r2, 800488c <UART_SetConfig+0xb4>)
 8004886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488a:	bf00      	nop
 800488c:	08004931 	.word	0x08004931
 8004890:	08004961 	.word	0x08004961
 8004894:	08004961 	.word	0x08004961
 8004898:	08004961 	.word	0x08004961
 800489c:	08004961 	.word	0x08004961
 80048a0:	08004961 	.word	0x08004961
 80048a4:	08004961 	.word	0x08004961
 80048a8:	08004961 	.word	0x08004961
 80048ac:	08004939 	.word	0x08004939
 80048b0:	08004961 	.word	0x08004961
 80048b4:	08004961 	.word	0x08004961
 80048b8:	08004961 	.word	0x08004961
 80048bc:	08004961 	.word	0x08004961
 80048c0:	08004961 	.word	0x08004961
 80048c4:	08004961 	.word	0x08004961
 80048c8:	08004961 	.word	0x08004961
 80048cc:	08004941 	.word	0x08004941
 80048d0:	08004961 	.word	0x08004961
 80048d4:	08004961 	.word	0x08004961
 80048d8:	08004961 	.word	0x08004961
 80048dc:	08004961 	.word	0x08004961
 80048e0:	08004961 	.word	0x08004961
 80048e4:	08004961 	.word	0x08004961
 80048e8:	08004961 	.word	0x08004961
 80048ec:	08004949 	.word	0x08004949
 80048f0:	08004961 	.word	0x08004961
 80048f4:	08004961 	.word	0x08004961
 80048f8:	08004961 	.word	0x08004961
 80048fc:	08004961 	.word	0x08004961
 8004900:	08004961 	.word	0x08004961
 8004904:	08004961 	.word	0x08004961
 8004908:	08004961 	.word	0x08004961
 800490c:	08004951 	.word	0x08004951
 8004910:	08004961 	.word	0x08004961
 8004914:	08004961 	.word	0x08004961
 8004918:	08004961 	.word	0x08004961
 800491c:	08004961 	.word	0x08004961
 8004920:	08004961 	.word	0x08004961
 8004924:	08004961 	.word	0x08004961
 8004928:	08004961 	.word	0x08004961
 800492c:	08004959 	.word	0x08004959
 8004930:	2301      	movs	r3, #1
 8004932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004936:	e222      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004938:	2304      	movs	r3, #4
 800493a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800493e:	e21e      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004940:	2308      	movs	r3, #8
 8004942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004946:	e21a      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004948:	2310      	movs	r3, #16
 800494a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800494e:	e216      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004950:	2320      	movs	r3, #32
 8004952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004956:	e212      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004958:	2340      	movs	r3, #64	@ 0x40
 800495a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800495e:	e20e      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004960:	2380      	movs	r3, #128	@ 0x80
 8004962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004966:	e20a      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a69      	ldr	r2, [pc, #420]	@ (8004b14 <UART_SetConfig+0x33c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d130      	bne.n	80049d4 <UART_SetConfig+0x1fc>
 8004972:	4b67      	ldr	r3, [pc, #412]	@ (8004b10 <UART_SetConfig+0x338>)
 8004974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	2b05      	cmp	r3, #5
 800497c:	d826      	bhi.n	80049cc <UART_SetConfig+0x1f4>
 800497e:	a201      	add	r2, pc, #4	@ (adr r2, 8004984 <UART_SetConfig+0x1ac>)
 8004980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004984:	0800499d 	.word	0x0800499d
 8004988:	080049a5 	.word	0x080049a5
 800498c:	080049ad 	.word	0x080049ad
 8004990:	080049b5 	.word	0x080049b5
 8004994:	080049bd 	.word	0x080049bd
 8004998:	080049c5 	.word	0x080049c5
 800499c:	2300      	movs	r3, #0
 800499e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049a2:	e1ec      	b.n	8004d7e <UART_SetConfig+0x5a6>
 80049a4:	2304      	movs	r3, #4
 80049a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049aa:	e1e8      	b.n	8004d7e <UART_SetConfig+0x5a6>
 80049ac:	2308      	movs	r3, #8
 80049ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049b2:	e1e4      	b.n	8004d7e <UART_SetConfig+0x5a6>
 80049b4:	2310      	movs	r3, #16
 80049b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ba:	e1e0      	b.n	8004d7e <UART_SetConfig+0x5a6>
 80049bc:	2320      	movs	r3, #32
 80049be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049c2:	e1dc      	b.n	8004d7e <UART_SetConfig+0x5a6>
 80049c4:	2340      	movs	r3, #64	@ 0x40
 80049c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ca:	e1d8      	b.n	8004d7e <UART_SetConfig+0x5a6>
 80049cc:	2380      	movs	r3, #128	@ 0x80
 80049ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049d2:	e1d4      	b.n	8004d7e <UART_SetConfig+0x5a6>
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a4f      	ldr	r2, [pc, #316]	@ (8004b18 <UART_SetConfig+0x340>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d130      	bne.n	8004a40 <UART_SetConfig+0x268>
 80049de:	4b4c      	ldr	r3, [pc, #304]	@ (8004b10 <UART_SetConfig+0x338>)
 80049e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	2b05      	cmp	r3, #5
 80049e8:	d826      	bhi.n	8004a38 <UART_SetConfig+0x260>
 80049ea:	a201      	add	r2, pc, #4	@ (adr r2, 80049f0 <UART_SetConfig+0x218>)
 80049ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f0:	08004a09 	.word	0x08004a09
 80049f4:	08004a11 	.word	0x08004a11
 80049f8:	08004a19 	.word	0x08004a19
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	08004a31 	.word	0x08004a31
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a0e:	e1b6      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004a10:	2304      	movs	r3, #4
 8004a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a16:	e1b2      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004a18:	2308      	movs	r3, #8
 8004a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a1e:	e1ae      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004a20:	2310      	movs	r3, #16
 8004a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a26:	e1aa      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004a28:	2320      	movs	r3, #32
 8004a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a2e:	e1a6      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004a30:	2340      	movs	r3, #64	@ 0x40
 8004a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a36:	e1a2      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004a38:	2380      	movs	r3, #128	@ 0x80
 8004a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a3e:	e19e      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a35      	ldr	r2, [pc, #212]	@ (8004b1c <UART_SetConfig+0x344>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d130      	bne.n	8004aac <UART_SetConfig+0x2d4>
 8004a4a:	4b31      	ldr	r3, [pc, #196]	@ (8004b10 <UART_SetConfig+0x338>)
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	2b05      	cmp	r3, #5
 8004a54:	d826      	bhi.n	8004aa4 <UART_SetConfig+0x2cc>
 8004a56:	a201      	add	r2, pc, #4	@ (adr r2, 8004a5c <UART_SetConfig+0x284>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004a75 	.word	0x08004a75
 8004a60:	08004a7d 	.word	0x08004a7d
 8004a64:	08004a85 	.word	0x08004a85
 8004a68:	08004a8d 	.word	0x08004a8d
 8004a6c:	08004a95 	.word	0x08004a95
 8004a70:	08004a9d 	.word	0x08004a9d
 8004a74:	2300      	movs	r3, #0
 8004a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a7a:	e180      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a82:	e17c      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004a84:	2308      	movs	r3, #8
 8004a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a8a:	e178      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a92:	e174      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004a94:	2320      	movs	r3, #32
 8004a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a9a:	e170      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004a9c:	2340      	movs	r3, #64	@ 0x40
 8004a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aa2:	e16c      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004aa4:	2380      	movs	r3, #128	@ 0x80
 8004aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aaa:	e168      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b20 <UART_SetConfig+0x348>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d142      	bne.n	8004b3c <UART_SetConfig+0x364>
 8004ab6:	4b16      	ldr	r3, [pc, #88]	@ (8004b10 <UART_SetConfig+0x338>)
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	2b05      	cmp	r3, #5
 8004ac0:	d838      	bhi.n	8004b34 <UART_SetConfig+0x35c>
 8004ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac8 <UART_SetConfig+0x2f0>)
 8004ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac8:	08004ae1 	.word	0x08004ae1
 8004acc:	08004ae9 	.word	0x08004ae9
 8004ad0:	08004af1 	.word	0x08004af1
 8004ad4:	08004af9 	.word	0x08004af9
 8004ad8:	08004b25 	.word	0x08004b25
 8004adc:	08004b2d 	.word	0x08004b2d
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ae6:	e14a      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aee:	e146      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004af0:	2308      	movs	r3, #8
 8004af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004af6:	e142      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004af8:	2310      	movs	r3, #16
 8004afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004afe:	e13e      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004b00:	cfff69f3 	.word	0xcfff69f3
 8004b04:	58000c00 	.word	0x58000c00
 8004b08:	11fff4ff 	.word	0x11fff4ff
 8004b0c:	40011000 	.word	0x40011000
 8004b10:	58024400 	.word	0x58024400
 8004b14:	40004400 	.word	0x40004400
 8004b18:	40004800 	.word	0x40004800
 8004b1c:	40004c00 	.word	0x40004c00
 8004b20:	40005000 	.word	0x40005000
 8004b24:	2320      	movs	r3, #32
 8004b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b2a:	e128      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004b2c:	2340      	movs	r3, #64	@ 0x40
 8004b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b32:	e124      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004b34:	2380      	movs	r3, #128	@ 0x80
 8004b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b3a:	e120      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4acb      	ldr	r2, [pc, #812]	@ (8004e70 <UART_SetConfig+0x698>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d176      	bne.n	8004c34 <UART_SetConfig+0x45c>
 8004b46:	4bcb      	ldr	r3, [pc, #812]	@ (8004e74 <UART_SetConfig+0x69c>)
 8004b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b4e:	2b28      	cmp	r3, #40	@ 0x28
 8004b50:	d86c      	bhi.n	8004c2c <UART_SetConfig+0x454>
 8004b52:	a201      	add	r2, pc, #4	@ (adr r2, 8004b58 <UART_SetConfig+0x380>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004bfd 	.word	0x08004bfd
 8004b5c:	08004c2d 	.word	0x08004c2d
 8004b60:	08004c2d 	.word	0x08004c2d
 8004b64:	08004c2d 	.word	0x08004c2d
 8004b68:	08004c2d 	.word	0x08004c2d
 8004b6c:	08004c2d 	.word	0x08004c2d
 8004b70:	08004c2d 	.word	0x08004c2d
 8004b74:	08004c2d 	.word	0x08004c2d
 8004b78:	08004c05 	.word	0x08004c05
 8004b7c:	08004c2d 	.word	0x08004c2d
 8004b80:	08004c2d 	.word	0x08004c2d
 8004b84:	08004c2d 	.word	0x08004c2d
 8004b88:	08004c2d 	.word	0x08004c2d
 8004b8c:	08004c2d 	.word	0x08004c2d
 8004b90:	08004c2d 	.word	0x08004c2d
 8004b94:	08004c2d 	.word	0x08004c2d
 8004b98:	08004c0d 	.word	0x08004c0d
 8004b9c:	08004c2d 	.word	0x08004c2d
 8004ba0:	08004c2d 	.word	0x08004c2d
 8004ba4:	08004c2d 	.word	0x08004c2d
 8004ba8:	08004c2d 	.word	0x08004c2d
 8004bac:	08004c2d 	.word	0x08004c2d
 8004bb0:	08004c2d 	.word	0x08004c2d
 8004bb4:	08004c2d 	.word	0x08004c2d
 8004bb8:	08004c15 	.word	0x08004c15
 8004bbc:	08004c2d 	.word	0x08004c2d
 8004bc0:	08004c2d 	.word	0x08004c2d
 8004bc4:	08004c2d 	.word	0x08004c2d
 8004bc8:	08004c2d 	.word	0x08004c2d
 8004bcc:	08004c2d 	.word	0x08004c2d
 8004bd0:	08004c2d 	.word	0x08004c2d
 8004bd4:	08004c2d 	.word	0x08004c2d
 8004bd8:	08004c1d 	.word	0x08004c1d
 8004bdc:	08004c2d 	.word	0x08004c2d
 8004be0:	08004c2d 	.word	0x08004c2d
 8004be4:	08004c2d 	.word	0x08004c2d
 8004be8:	08004c2d 	.word	0x08004c2d
 8004bec:	08004c2d 	.word	0x08004c2d
 8004bf0:	08004c2d 	.word	0x08004c2d
 8004bf4:	08004c2d 	.word	0x08004c2d
 8004bf8:	08004c25 	.word	0x08004c25
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c02:	e0bc      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004c04:	2304      	movs	r3, #4
 8004c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c0a:	e0b8      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004c0c:	2308      	movs	r3, #8
 8004c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c12:	e0b4      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004c14:	2310      	movs	r3, #16
 8004c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c1a:	e0b0      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004c1c:	2320      	movs	r3, #32
 8004c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c22:	e0ac      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004c24:	2340      	movs	r3, #64	@ 0x40
 8004c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c2a:	e0a8      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004c2c:	2380      	movs	r3, #128	@ 0x80
 8004c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c32:	e0a4      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a8f      	ldr	r2, [pc, #572]	@ (8004e78 <UART_SetConfig+0x6a0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d130      	bne.n	8004ca0 <UART_SetConfig+0x4c8>
 8004c3e:	4b8d      	ldr	r3, [pc, #564]	@ (8004e74 <UART_SetConfig+0x69c>)
 8004c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	2b05      	cmp	r3, #5
 8004c48:	d826      	bhi.n	8004c98 <UART_SetConfig+0x4c0>
 8004c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c50 <UART_SetConfig+0x478>)
 8004c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c50:	08004c69 	.word	0x08004c69
 8004c54:	08004c71 	.word	0x08004c71
 8004c58:	08004c79 	.word	0x08004c79
 8004c5c:	08004c81 	.word	0x08004c81
 8004c60:	08004c89 	.word	0x08004c89
 8004c64:	08004c91 	.word	0x08004c91
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c6e:	e086      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004c70:	2304      	movs	r3, #4
 8004c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c76:	e082      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004c78:	2308      	movs	r3, #8
 8004c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c7e:	e07e      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004c80:	2310      	movs	r3, #16
 8004c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c86:	e07a      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004c88:	2320      	movs	r3, #32
 8004c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c8e:	e076      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004c90:	2340      	movs	r3, #64	@ 0x40
 8004c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c96:	e072      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004c98:	2380      	movs	r3, #128	@ 0x80
 8004c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c9e:	e06e      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a75      	ldr	r2, [pc, #468]	@ (8004e7c <UART_SetConfig+0x6a4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d130      	bne.n	8004d0c <UART_SetConfig+0x534>
 8004caa:	4b72      	ldr	r3, [pc, #456]	@ (8004e74 <UART_SetConfig+0x69c>)
 8004cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	2b05      	cmp	r3, #5
 8004cb4:	d826      	bhi.n	8004d04 <UART_SetConfig+0x52c>
 8004cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cbc <UART_SetConfig+0x4e4>)
 8004cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbc:	08004cd5 	.word	0x08004cd5
 8004cc0:	08004cdd 	.word	0x08004cdd
 8004cc4:	08004ce5 	.word	0x08004ce5
 8004cc8:	08004ced 	.word	0x08004ced
 8004ccc:	08004cf5 	.word	0x08004cf5
 8004cd0:	08004cfd 	.word	0x08004cfd
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cda:	e050      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004cdc:	2304      	movs	r3, #4
 8004cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ce2:	e04c      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004ce4:	2308      	movs	r3, #8
 8004ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cea:	e048      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004cec:	2310      	movs	r3, #16
 8004cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cf2:	e044      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004cf4:	2320      	movs	r3, #32
 8004cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cfa:	e040      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004cfc:	2340      	movs	r3, #64	@ 0x40
 8004cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d02:	e03c      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004d04:	2380      	movs	r3, #128	@ 0x80
 8004d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d0a:	e038      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a5b      	ldr	r2, [pc, #364]	@ (8004e80 <UART_SetConfig+0x6a8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d130      	bne.n	8004d78 <UART_SetConfig+0x5a0>
 8004d16:	4b57      	ldr	r3, [pc, #348]	@ (8004e74 <UART_SetConfig+0x69c>)
 8004d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	2b05      	cmp	r3, #5
 8004d20:	d826      	bhi.n	8004d70 <UART_SetConfig+0x598>
 8004d22:	a201      	add	r2, pc, #4	@ (adr r2, 8004d28 <UART_SetConfig+0x550>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004d41 	.word	0x08004d41
 8004d2c:	08004d49 	.word	0x08004d49
 8004d30:	08004d51 	.word	0x08004d51
 8004d34:	08004d59 	.word	0x08004d59
 8004d38:	08004d61 	.word	0x08004d61
 8004d3c:	08004d69 	.word	0x08004d69
 8004d40:	2302      	movs	r3, #2
 8004d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d46:	e01a      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004d48:	2304      	movs	r3, #4
 8004d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d4e:	e016      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004d50:	2308      	movs	r3, #8
 8004d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d56:	e012      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004d58:	2310      	movs	r3, #16
 8004d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d5e:	e00e      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004d60:	2320      	movs	r3, #32
 8004d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d66:	e00a      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004d68:	2340      	movs	r3, #64	@ 0x40
 8004d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d6e:	e006      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004d70:	2380      	movs	r3, #128	@ 0x80
 8004d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d76:	e002      	b.n	8004d7e <UART_SetConfig+0x5a6>
 8004d78:	2380      	movs	r3, #128	@ 0x80
 8004d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a3f      	ldr	r2, [pc, #252]	@ (8004e80 <UART_SetConfig+0x6a8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	f040 80f8 	bne.w	8004f7a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d8a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	dc46      	bgt.n	8004e20 <UART_SetConfig+0x648>
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	f2c0 8082 	blt.w	8004e9c <UART_SetConfig+0x6c4>
 8004d98:	3b02      	subs	r3, #2
 8004d9a:	2b1e      	cmp	r3, #30
 8004d9c:	d87e      	bhi.n	8004e9c <UART_SetConfig+0x6c4>
 8004d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004da4 <UART_SetConfig+0x5cc>)
 8004da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da4:	08004e27 	.word	0x08004e27
 8004da8:	08004e9d 	.word	0x08004e9d
 8004dac:	08004e2f 	.word	0x08004e2f
 8004db0:	08004e9d 	.word	0x08004e9d
 8004db4:	08004e9d 	.word	0x08004e9d
 8004db8:	08004e9d 	.word	0x08004e9d
 8004dbc:	08004e3f 	.word	0x08004e3f
 8004dc0:	08004e9d 	.word	0x08004e9d
 8004dc4:	08004e9d 	.word	0x08004e9d
 8004dc8:	08004e9d 	.word	0x08004e9d
 8004dcc:	08004e9d 	.word	0x08004e9d
 8004dd0:	08004e9d 	.word	0x08004e9d
 8004dd4:	08004e9d 	.word	0x08004e9d
 8004dd8:	08004e9d 	.word	0x08004e9d
 8004ddc:	08004e4f 	.word	0x08004e4f
 8004de0:	08004e9d 	.word	0x08004e9d
 8004de4:	08004e9d 	.word	0x08004e9d
 8004de8:	08004e9d 	.word	0x08004e9d
 8004dec:	08004e9d 	.word	0x08004e9d
 8004df0:	08004e9d 	.word	0x08004e9d
 8004df4:	08004e9d 	.word	0x08004e9d
 8004df8:	08004e9d 	.word	0x08004e9d
 8004dfc:	08004e9d 	.word	0x08004e9d
 8004e00:	08004e9d 	.word	0x08004e9d
 8004e04:	08004e9d 	.word	0x08004e9d
 8004e08:	08004e9d 	.word	0x08004e9d
 8004e0c:	08004e9d 	.word	0x08004e9d
 8004e10:	08004e9d 	.word	0x08004e9d
 8004e14:	08004e9d 	.word	0x08004e9d
 8004e18:	08004e9d 	.word	0x08004e9d
 8004e1c:	08004e8f 	.word	0x08004e8f
 8004e20:	2b40      	cmp	r3, #64	@ 0x40
 8004e22:	d037      	beq.n	8004e94 <UART_SetConfig+0x6bc>
 8004e24:	e03a      	b.n	8004e9c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004e26:	f7ff f865 	bl	8003ef4 <HAL_RCCEx_GetD3PCLK1Freq>
 8004e2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004e2c:	e03c      	b.n	8004ea8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff f874 	bl	8003f20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e3c:	e034      	b.n	8004ea8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e3e:	f107 0318 	add.w	r3, r7, #24
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff f9c0 	bl	80041c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e4c:	e02c      	b.n	8004ea8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e4e:	4b09      	ldr	r3, [pc, #36]	@ (8004e74 <UART_SetConfig+0x69c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d016      	beq.n	8004e88 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e5a:	4b06      	ldr	r3, [pc, #24]	@ (8004e74 <UART_SetConfig+0x69c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	08db      	lsrs	r3, r3, #3
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	4a07      	ldr	r2, [pc, #28]	@ (8004e84 <UART_SetConfig+0x6ac>)
 8004e66:	fa22 f303 	lsr.w	r3, r2, r3
 8004e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e6c:	e01c      	b.n	8004ea8 <UART_SetConfig+0x6d0>
 8004e6e:	bf00      	nop
 8004e70:	40011400 	.word	0x40011400
 8004e74:	58024400 	.word	0x58024400
 8004e78:	40007800 	.word	0x40007800
 8004e7c:	40007c00 	.word	0x40007c00
 8004e80:	58000c00 	.word	0x58000c00
 8004e84:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004e88:	4b9d      	ldr	r3, [pc, #628]	@ (8005100 <UART_SetConfig+0x928>)
 8004e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e8c:	e00c      	b.n	8004ea8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e8e:	4b9d      	ldr	r3, [pc, #628]	@ (8005104 <UART_SetConfig+0x92c>)
 8004e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e92:	e009      	b.n	8004ea8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e9a:	e005      	b.n	8004ea8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004ea6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 81de 	beq.w	800526c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb4:	4a94      	ldr	r2, [pc, #592]	@ (8005108 <UART_SetConfig+0x930>)
 8004eb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ebe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ec2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	4413      	add	r3, r2
 8004ece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d305      	bcc.n	8004ee0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d903      	bls.n	8004ee8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004ee6:	e1c1      	b.n	800526c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eea:	2200      	movs	r2, #0
 8004eec:	60bb      	str	r3, [r7, #8]
 8004eee:	60fa      	str	r2, [r7, #12]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef4:	4a84      	ldr	r2, [pc, #528]	@ (8005108 <UART_SetConfig+0x930>)
 8004ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2200      	movs	r2, #0
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	607a      	str	r2, [r7, #4]
 8004f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f0a:	f7fb f9e5 	bl	80002d8 <__aeabi_uldivmod>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4610      	mov	r0, r2
 8004f14:	4619      	mov	r1, r3
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	020b      	lsls	r3, r1, #8
 8004f20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f24:	0202      	lsls	r2, r0, #8
 8004f26:	6979      	ldr	r1, [r7, #20]
 8004f28:	6849      	ldr	r1, [r1, #4]
 8004f2a:	0849      	lsrs	r1, r1, #1
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	4605      	mov	r5, r0
 8004f32:	eb12 0804 	adds.w	r8, r2, r4
 8004f36:	eb43 0905 	adc.w	r9, r3, r5
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	469a      	mov	sl, r3
 8004f42:	4693      	mov	fp, r2
 8004f44:	4652      	mov	r2, sl
 8004f46:	465b      	mov	r3, fp
 8004f48:	4640      	mov	r0, r8
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	f7fb f9c4 	bl	80002d8 <__aeabi_uldivmod>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4613      	mov	r3, r2
 8004f56:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f5e:	d308      	bcc.n	8004f72 <UART_SetConfig+0x79a>
 8004f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f66:	d204      	bcs.n	8004f72 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f6e:	60da      	str	r2, [r3, #12]
 8004f70:	e17c      	b.n	800526c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004f78:	e178      	b.n	800526c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f82:	f040 80c5 	bne.w	8005110 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004f86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	dc48      	bgt.n	8005020 <UART_SetConfig+0x848>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	db7b      	blt.n	800508a <UART_SetConfig+0x8b2>
 8004f92:	2b20      	cmp	r3, #32
 8004f94:	d879      	bhi.n	800508a <UART_SetConfig+0x8b2>
 8004f96:	a201      	add	r2, pc, #4	@ (adr r2, 8004f9c <UART_SetConfig+0x7c4>)
 8004f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9c:	08005027 	.word	0x08005027
 8004fa0:	0800502f 	.word	0x0800502f
 8004fa4:	0800508b 	.word	0x0800508b
 8004fa8:	0800508b 	.word	0x0800508b
 8004fac:	08005037 	.word	0x08005037
 8004fb0:	0800508b 	.word	0x0800508b
 8004fb4:	0800508b 	.word	0x0800508b
 8004fb8:	0800508b 	.word	0x0800508b
 8004fbc:	08005047 	.word	0x08005047
 8004fc0:	0800508b 	.word	0x0800508b
 8004fc4:	0800508b 	.word	0x0800508b
 8004fc8:	0800508b 	.word	0x0800508b
 8004fcc:	0800508b 	.word	0x0800508b
 8004fd0:	0800508b 	.word	0x0800508b
 8004fd4:	0800508b 	.word	0x0800508b
 8004fd8:	0800508b 	.word	0x0800508b
 8004fdc:	08005057 	.word	0x08005057
 8004fe0:	0800508b 	.word	0x0800508b
 8004fe4:	0800508b 	.word	0x0800508b
 8004fe8:	0800508b 	.word	0x0800508b
 8004fec:	0800508b 	.word	0x0800508b
 8004ff0:	0800508b 	.word	0x0800508b
 8004ff4:	0800508b 	.word	0x0800508b
 8004ff8:	0800508b 	.word	0x0800508b
 8004ffc:	0800508b 	.word	0x0800508b
 8005000:	0800508b 	.word	0x0800508b
 8005004:	0800508b 	.word	0x0800508b
 8005008:	0800508b 	.word	0x0800508b
 800500c:	0800508b 	.word	0x0800508b
 8005010:	0800508b 	.word	0x0800508b
 8005014:	0800508b 	.word	0x0800508b
 8005018:	0800508b 	.word	0x0800508b
 800501c:	0800507d 	.word	0x0800507d
 8005020:	2b40      	cmp	r3, #64	@ 0x40
 8005022:	d02e      	beq.n	8005082 <UART_SetConfig+0x8aa>
 8005024:	e031      	b.n	800508a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005026:	f7fd fd2f 	bl	8002a88 <HAL_RCC_GetPCLK1Freq>
 800502a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800502c:	e033      	b.n	8005096 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800502e:	f7fd fd41 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 8005032:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005034:	e02f      	b.n	8005096 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005036:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800503a:	4618      	mov	r0, r3
 800503c:	f7fe ff70 	bl	8003f20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005044:	e027      	b.n	8005096 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005046:	f107 0318 	add.w	r3, r7, #24
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff f8bc 	bl	80041c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005054:	e01f      	b.n	8005096 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005056:	4b2d      	ldr	r3, [pc, #180]	@ (800510c <UART_SetConfig+0x934>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b00      	cmp	r3, #0
 8005060:	d009      	beq.n	8005076 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005062:	4b2a      	ldr	r3, [pc, #168]	@ (800510c <UART_SetConfig+0x934>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	08db      	lsrs	r3, r3, #3
 8005068:	f003 0303 	and.w	r3, r3, #3
 800506c:	4a24      	ldr	r2, [pc, #144]	@ (8005100 <UART_SetConfig+0x928>)
 800506e:	fa22 f303 	lsr.w	r3, r2, r3
 8005072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005074:	e00f      	b.n	8005096 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005076:	4b22      	ldr	r3, [pc, #136]	@ (8005100 <UART_SetConfig+0x928>)
 8005078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800507a:	e00c      	b.n	8005096 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800507c:	4b21      	ldr	r3, [pc, #132]	@ (8005104 <UART_SetConfig+0x92c>)
 800507e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005080:	e009      	b.n	8005096 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005088:	e005      	b.n	8005096 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005094:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80e7 	beq.w	800526c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a2:	4a19      	ldr	r2, [pc, #100]	@ (8005108 <UART_SetConfig+0x930>)
 80050a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050a8:	461a      	mov	r2, r3
 80050aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80050b0:	005a      	lsls	r2, r3, #1
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	085b      	lsrs	r3, r3, #1
 80050b8:	441a      	add	r2, r3
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c6:	2b0f      	cmp	r3, #15
 80050c8:	d916      	bls.n	80050f8 <UART_SetConfig+0x920>
 80050ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050d0:	d212      	bcs.n	80050f8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	f023 030f 	bic.w	r3, r3, #15
 80050da:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050de:	085b      	lsrs	r3, r3, #1
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80050ea:	4313      	orrs	r3, r2
 80050ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80050f4:	60da      	str	r2, [r3, #12]
 80050f6:	e0b9      	b.n	800526c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80050fe:	e0b5      	b.n	800526c <UART_SetConfig+0xa94>
 8005100:	03d09000 	.word	0x03d09000
 8005104:	003d0900 	.word	0x003d0900
 8005108:	080061c0 	.word	0x080061c0
 800510c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005110:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005114:	2b20      	cmp	r3, #32
 8005116:	dc49      	bgt.n	80051ac <UART_SetConfig+0x9d4>
 8005118:	2b00      	cmp	r3, #0
 800511a:	db7c      	blt.n	8005216 <UART_SetConfig+0xa3e>
 800511c:	2b20      	cmp	r3, #32
 800511e:	d87a      	bhi.n	8005216 <UART_SetConfig+0xa3e>
 8005120:	a201      	add	r2, pc, #4	@ (adr r2, 8005128 <UART_SetConfig+0x950>)
 8005122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005126:	bf00      	nop
 8005128:	080051b3 	.word	0x080051b3
 800512c:	080051bb 	.word	0x080051bb
 8005130:	08005217 	.word	0x08005217
 8005134:	08005217 	.word	0x08005217
 8005138:	080051c3 	.word	0x080051c3
 800513c:	08005217 	.word	0x08005217
 8005140:	08005217 	.word	0x08005217
 8005144:	08005217 	.word	0x08005217
 8005148:	080051d3 	.word	0x080051d3
 800514c:	08005217 	.word	0x08005217
 8005150:	08005217 	.word	0x08005217
 8005154:	08005217 	.word	0x08005217
 8005158:	08005217 	.word	0x08005217
 800515c:	08005217 	.word	0x08005217
 8005160:	08005217 	.word	0x08005217
 8005164:	08005217 	.word	0x08005217
 8005168:	080051e3 	.word	0x080051e3
 800516c:	08005217 	.word	0x08005217
 8005170:	08005217 	.word	0x08005217
 8005174:	08005217 	.word	0x08005217
 8005178:	08005217 	.word	0x08005217
 800517c:	08005217 	.word	0x08005217
 8005180:	08005217 	.word	0x08005217
 8005184:	08005217 	.word	0x08005217
 8005188:	08005217 	.word	0x08005217
 800518c:	08005217 	.word	0x08005217
 8005190:	08005217 	.word	0x08005217
 8005194:	08005217 	.word	0x08005217
 8005198:	08005217 	.word	0x08005217
 800519c:	08005217 	.word	0x08005217
 80051a0:	08005217 	.word	0x08005217
 80051a4:	08005217 	.word	0x08005217
 80051a8:	08005209 	.word	0x08005209
 80051ac:	2b40      	cmp	r3, #64	@ 0x40
 80051ae:	d02e      	beq.n	800520e <UART_SetConfig+0xa36>
 80051b0:	e031      	b.n	8005216 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051b2:	f7fd fc69 	bl	8002a88 <HAL_RCC_GetPCLK1Freq>
 80051b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80051b8:	e033      	b.n	8005222 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051ba:	f7fd fc7b 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 80051be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80051c0:	e02f      	b.n	8005222 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fe feaa 	bl	8003f20 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80051cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051d0:	e027      	b.n	8005222 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051d2:	f107 0318 	add.w	r3, r7, #24
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fe fff6 	bl	80041c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051e0:	e01f      	b.n	8005222 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051e2:	4b2d      	ldr	r3, [pc, #180]	@ (8005298 <UART_SetConfig+0xac0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d009      	beq.n	8005202 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80051ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005298 <UART_SetConfig+0xac0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	08db      	lsrs	r3, r3, #3
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	4a28      	ldr	r2, [pc, #160]	@ (800529c <UART_SetConfig+0xac4>)
 80051fa:	fa22 f303 	lsr.w	r3, r2, r3
 80051fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005200:	e00f      	b.n	8005222 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005202:	4b26      	ldr	r3, [pc, #152]	@ (800529c <UART_SetConfig+0xac4>)
 8005204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005206:	e00c      	b.n	8005222 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005208:	4b25      	ldr	r3, [pc, #148]	@ (80052a0 <UART_SetConfig+0xac8>)
 800520a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800520c:	e009      	b.n	8005222 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800520e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005214:	e005      	b.n	8005222 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005220:	bf00      	nop
    }

    if (pclk != 0U)
 8005222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005224:	2b00      	cmp	r3, #0
 8005226:	d021      	beq.n	800526c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522c:	4a1d      	ldr	r2, [pc, #116]	@ (80052a4 <UART_SetConfig+0xacc>)
 800522e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005232:	461a      	mov	r2, r3
 8005234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005236:	fbb3 f2f2 	udiv	r2, r3, r2
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	085b      	lsrs	r3, r3, #1
 8005240:	441a      	add	r2, r3
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	fbb2 f3f3 	udiv	r3, r2, r3
 800524a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800524c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524e:	2b0f      	cmp	r3, #15
 8005250:	d909      	bls.n	8005266 <UART_SetConfig+0xa8e>
 8005252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005258:	d205      	bcs.n	8005266 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800525a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525c:	b29a      	uxth	r2, r3
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	60da      	str	r2, [r3, #12]
 8005264:	e002      	b.n	800526c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2201      	movs	r2, #1
 8005270:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2201      	movs	r2, #1
 8005278:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2200      	movs	r2, #0
 8005280:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2200      	movs	r2, #0
 8005286:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005288:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800528c:	4618      	mov	r0, r3
 800528e:	3748      	adds	r7, #72	@ 0x48
 8005290:	46bd      	mov	sp, r7
 8005292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005296:	bf00      	nop
 8005298:	58024400 	.word	0x58024400
 800529c:	03d09000 	.word	0x03d09000
 80052a0:	003d0900 	.word	0x003d0900
 80052a4:	080061c0 	.word	0x080061c0

080052a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b4:	f003 0308 	and.w	r3, r3, #8
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00a      	beq.n	80052d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01a      	beq.n	80053be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053a6:	d10a      	bne.n	80053be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	605a      	str	r2, [r3, #4]
  }
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b098      	sub	sp, #96	@ 0x60
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053fc:	f7fb fefa 	bl	80011f4 <HAL_GetTick>
 8005400:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b08      	cmp	r3, #8
 800540e:	d12f      	bne.n	8005470 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005410:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005418:	2200      	movs	r2, #0
 800541a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f88e 	bl	8005540 <UART_WaitOnFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d022      	beq.n	8005470 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800543a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800543e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005448:	647b      	str	r3, [r7, #68]	@ 0x44
 800544a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800544e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e6      	bne.n	800542a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2220      	movs	r2, #32
 8005460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e063      	b.n	8005538 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0304 	and.w	r3, r3, #4
 800547a:	2b04      	cmp	r3, #4
 800547c:	d149      	bne.n	8005512 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800547e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005486:	2200      	movs	r2, #0
 8005488:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f857 	bl	8005540 <UART_WaitOnFlagUntilTimeout>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d03c      	beq.n	8005512 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	623b      	str	r3, [r7, #32]
   return(result);
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80054b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e6      	bne.n	8005498 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3308      	adds	r3, #8
 80054d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f023 0301 	bic.w	r3, r3, #1
 80054e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3308      	adds	r3, #8
 80054e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054ea:	61fa      	str	r2, [r7, #28]
 80054ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	69b9      	ldr	r1, [r7, #24]
 80054f0:	69fa      	ldr	r2, [r7, #28]
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	617b      	str	r3, [r7, #20]
   return(result);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1e5      	bne.n	80054ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e012      	b.n	8005538 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2220      	movs	r2, #32
 8005516:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2220      	movs	r2, #32
 800551e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3758      	adds	r7, #88	@ 0x58
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	603b      	str	r3, [r7, #0]
 800554c:	4613      	mov	r3, r2
 800554e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005550:	e04f      	b.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005558:	d04b      	beq.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555a:	f7fb fe4b 	bl	80011f4 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	429a      	cmp	r2, r3
 8005568:	d302      	bcc.n	8005570 <UART_WaitOnFlagUntilTimeout+0x30>
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e04e      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b00      	cmp	r3, #0
 8005580:	d037      	beq.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2b80      	cmp	r3, #128	@ 0x80
 8005586:	d034      	beq.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b40      	cmp	r3, #64	@ 0x40
 800558c:	d031      	beq.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b08      	cmp	r3, #8
 800559a:	d110      	bne.n	80055be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2208      	movs	r2, #8
 80055a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f000 f839 	bl	800561c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2208      	movs	r2, #8
 80055ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e029      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055cc:	d111      	bne.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f81f 	bl	800561c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e00f      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4013      	ands	r3, r2
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	429a      	cmp	r2, r3
 8005600:	bf0c      	ite	eq
 8005602:	2301      	moveq	r3, #1
 8005604:	2300      	movne	r3, #0
 8005606:	b2db      	uxtb	r3, r3
 8005608:	461a      	mov	r2, r3
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	429a      	cmp	r2, r3
 800560e:	d0a0      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
	...

0800561c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800561c:	b480      	push	{r7}
 800561e:	b095      	sub	sp, #84	@ 0x54
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005634:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005638:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005642:	643b      	str	r3, [r7, #64]	@ 0x40
 8005644:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005648:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e6      	bne.n	8005624 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3308      	adds	r3, #8
 800565c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	61fb      	str	r3, [r7, #28]
   return(result);
 8005666:	69fa      	ldr	r2, [r7, #28]
 8005668:	4b1e      	ldr	r3, [pc, #120]	@ (80056e4 <UART_EndRxTransfer+0xc8>)
 800566a:	4013      	ands	r3, r2
 800566c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3308      	adds	r3, #8
 8005674:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005676:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005678:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800567c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e5      	bne.n	8005656 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800568e:	2b01      	cmp	r3, #1
 8005690:	d118      	bne.n	80056c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	60bb      	str	r3, [r7, #8]
   return(result);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f023 0310 	bic.w	r3, r3, #16
 80056a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056b0:	61bb      	str	r3, [r7, #24]
 80056b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6979      	ldr	r1, [r7, #20]
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	613b      	str	r3, [r7, #16]
   return(result);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e6      	bne.n	8005692 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80056d8:	bf00      	nop
 80056da:	3754      	adds	r7, #84	@ 0x54
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	effffffe 	.word	0xeffffffe

080056e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <HAL_UARTEx_DisableFifoMode+0x16>
 80056fa:	2302      	movs	r3, #2
 80056fc:	e027      	b.n	800574e <HAL_UARTEx_DisableFifoMode+0x66>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2224      	movs	r2, #36	@ 0x24
 800570a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0201 	bic.w	r2, r2, #1
 8005724:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800572c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2220      	movs	r2, #32
 8005740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800576e:	2302      	movs	r3, #2
 8005770:	e02d      	b.n	80057ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2224      	movs	r2, #36	@ 0x24
 800577e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0201 	bic.w	r2, r2, #1
 8005798:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f850 	bl	8005854 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b084      	sub	sp, #16
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d101      	bne.n	80057ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80057ea:	2302      	movs	r3, #2
 80057ec:	e02d      	b.n	800584a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2224      	movs	r2, #36	@ 0x24
 80057fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0201 	bic.w	r2, r2, #1
 8005814:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f812 	bl	8005854 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2220      	movs	r2, #32
 800583c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005860:	2b00      	cmp	r3, #0
 8005862:	d108      	bne.n	8005876 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005874:	e031      	b.n	80058da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005876:	2310      	movs	r3, #16
 8005878:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800587a:	2310      	movs	r3, #16
 800587c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	0e5b      	lsrs	r3, r3, #25
 8005886:	b2db      	uxtb	r3, r3
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	0f5b      	lsrs	r3, r3, #29
 8005896:	b2db      	uxtb	r3, r3
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800589e:	7bbb      	ldrb	r3, [r7, #14]
 80058a0:	7b3a      	ldrb	r2, [r7, #12]
 80058a2:	4911      	ldr	r1, [pc, #68]	@ (80058e8 <UARTEx_SetNbDataToProcess+0x94>)
 80058a4:	5c8a      	ldrb	r2, [r1, r2]
 80058a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80058aa:	7b3a      	ldrb	r2, [r7, #12]
 80058ac:	490f      	ldr	r1, [pc, #60]	@ (80058ec <UARTEx_SetNbDataToProcess+0x98>)
 80058ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	7b7a      	ldrb	r2, [r7, #13]
 80058c0:	4909      	ldr	r1, [pc, #36]	@ (80058e8 <UARTEx_SetNbDataToProcess+0x94>)
 80058c2:	5c8a      	ldrb	r2, [r1, r2]
 80058c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058c8:	7b7a      	ldrb	r2, [r7, #13]
 80058ca:	4908      	ldr	r1, [pc, #32]	@ (80058ec <UARTEx_SetNbDataToProcess+0x98>)
 80058cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80058da:	bf00      	nop
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	080061d8 	.word	0x080061d8
 80058ec:	080061e0 	.word	0x080061e0

080058f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058f0:	b084      	sub	sp, #16
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	f107 001c 	add.w	r0, r7, #28
 80058fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005902:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005906:	2b01      	cmp	r3, #1
 8005908:	d121      	bne.n	800594e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800590e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	4b2c      	ldr	r3, [pc, #176]	@ (80059cc <USB_CoreInit+0xdc>)
 800591c:	4013      	ands	r3, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800592e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005932:	2b01      	cmp	r3, #1
 8005934:	d105      	bne.n	8005942 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 faaa 	bl	8005e9c <USB_CoreReset>
 8005948:	4603      	mov	r3, r0
 800594a:	73fb      	strb	r3, [r7, #15]
 800594c:	e01b      	b.n	8005986 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fa9e 	bl	8005e9c <USB_CoreReset>
 8005960:	4603      	mov	r3, r0
 8005962:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005964:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005968:	2b00      	cmp	r3, #0
 800596a:	d106      	bne.n	800597a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005970:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	639a      	str	r2, [r3, #56]	@ 0x38
 8005978:	e005      	b.n	8005986 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005986:	7fbb      	ldrb	r3, [r7, #30]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d116      	bne.n	80059ba <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005990:	b29a      	uxth	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800599a:	4b0d      	ldr	r3, [pc, #52]	@ (80059d0 <USB_CoreInit+0xe0>)
 800599c:	4313      	orrs	r3, r2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f043 0206 	orr.w	r2, r3, #6
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f043 0220 	orr.w	r2, r3, #32
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059c6:	b004      	add	sp, #16
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	ffbdffbf 	.word	0xffbdffbf
 80059d0:	03ee0000 	.word	0x03ee0000

080059d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f023 0201 	bic.w	r2, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	460b      	mov	r3, r1
 8005a00:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a12:	78fb      	ldrb	r3, [r7, #3]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d115      	bne.n	8005a44 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a24:	200a      	movs	r0, #10
 8005a26:	f7fb fbf1 	bl	800120c <HAL_Delay>
      ms += 10U;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	330a      	adds	r3, #10
 8005a2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fa25 	bl	8005e80 <USB_GetMode>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d01e      	beq.n	8005a7a <USB_SetCurrentMode+0x84>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a40:	d9f0      	bls.n	8005a24 <USB_SetCurrentMode+0x2e>
 8005a42:	e01a      	b.n	8005a7a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d115      	bne.n	8005a76 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a56:	200a      	movs	r0, #10
 8005a58:	f7fb fbd8 	bl	800120c <HAL_Delay>
      ms += 10U;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	330a      	adds	r3, #10
 8005a60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fa0c 	bl	8005e80 <USB_GetMode>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <USB_SetCurrentMode+0x84>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a72:	d9f0      	bls.n	8005a56 <USB_SetCurrentMode+0x60>
 8005a74:	e001      	b.n	8005a7a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e005      	b.n	8005a86 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2bc8      	cmp	r3, #200	@ 0xc8
 8005a7e:	d101      	bne.n	8005a84 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e000      	b.n	8005a86 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a90:	b084      	sub	sp, #16
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b086      	sub	sp, #24
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005a9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005aaa:	2300      	movs	r3, #0
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	e009      	b.n	8005ac4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	3340      	adds	r3, #64	@ 0x40
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	2200      	movs	r2, #0
 8005abc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	613b      	str	r3, [r7, #16]
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	2b0e      	cmp	r3, #14
 8005ac8:	d9f2      	bls.n	8005ab0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005aca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d11c      	bne.n	8005b0c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ae0:	f043 0302 	orr.w	r3, r3, #2
 8005ae4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aea:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	e005      	b.n	8005b18 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b10:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b1e:	461a      	mov	r2, r3
 8005b20:	2300      	movs	r3, #0
 8005b22:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b24:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d10d      	bne.n	8005b48 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d104      	bne.n	8005b3e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b34:	2100      	movs	r1, #0
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f968 	bl	8005e0c <USB_SetDevSpeed>
 8005b3c:	e008      	b.n	8005b50 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b3e:	2101      	movs	r1, #1
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f963 	bl	8005e0c <USB_SetDevSpeed>
 8005b46:	e003      	b.n	8005b50 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b48:	2103      	movs	r1, #3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f95e 	bl	8005e0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b50:	2110      	movs	r1, #16
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f8fa 	bl	8005d4c <USB_FlushTxFifo>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f924 	bl	8005db0 <USB_FlushRxFifo>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b78:	461a      	mov	r2, r3
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b84:	461a      	mov	r2, r3
 8005b86:	2300      	movs	r3, #0
 8005b88:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b90:	461a      	mov	r2, r3
 8005b92:	2300      	movs	r3, #0
 8005b94:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b96:	2300      	movs	r3, #0
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	e043      	b.n	8005c24 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bb2:	d118      	bne.n	8005be6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10a      	bne.n	8005bd0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	e013      	b.n	8005bf8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bdc:	461a      	mov	r2, r3
 8005bde:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	e008      	b.n	8005bf8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c04:	461a      	mov	r2, r3
 8005c06:	2300      	movs	r3, #0
 8005c08:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c16:	461a      	mov	r2, r3
 8005c18:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	3301      	adds	r3, #1
 8005c22:	613b      	str	r3, [r7, #16]
 8005c24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c28:	461a      	mov	r2, r3
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d3b5      	bcc.n	8005b9c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c30:	2300      	movs	r3, #0
 8005c32:	613b      	str	r3, [r7, #16]
 8005c34:	e043      	b.n	8005cbe <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c4c:	d118      	bne.n	8005c80 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10a      	bne.n	8005c6a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c60:	461a      	mov	r2, r3
 8005c62:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	e013      	b.n	8005c92 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c76:	461a      	mov	r2, r3
 8005c78:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	e008      	b.n	8005c92 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	2300      	movs	r3, #0
 8005c90:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005cb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	613b      	str	r3, [r7, #16]
 8005cbe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d3b5      	bcc.n	8005c36 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cdc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005cea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d105      	bne.n	8005d00 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	f043 0210 	orr.w	r2, r3, #16
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699a      	ldr	r2, [r3, #24]
 8005d04:	4b0f      	ldr	r3, [pc, #60]	@ (8005d44 <USB_DevInit+0x2b4>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d0c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d005      	beq.n	8005d20 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	f043 0208 	orr.w	r2, r3, #8
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d20:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d105      	bne.n	8005d34 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	699a      	ldr	r2, [r3, #24]
 8005d2c:	4b06      	ldr	r3, [pc, #24]	@ (8005d48 <USB_DevInit+0x2b8>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d40:	b004      	add	sp, #16
 8005d42:	4770      	bx	lr
 8005d44:	803c3800 	.word	0x803c3800
 8005d48:	40000004 	.word	0x40000004

08005d4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d66:	d901      	bls.n	8005d6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e01b      	b.n	8005da4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	daf2      	bge.n	8005d5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	019b      	lsls	r3, r3, #6
 8005d7c:	f043 0220 	orr.w	r2, r3, #32
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3301      	adds	r3, #1
 8005d88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d90:	d901      	bls.n	8005d96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e006      	b.n	8005da4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b20      	cmp	r3, #32
 8005da0:	d0f0      	beq.n	8005d84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dc8:	d901      	bls.n	8005dce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e018      	b.n	8005e00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	daf2      	bge.n	8005dbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2210      	movs	r2, #16
 8005dde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	3301      	adds	r3, #1
 8005de4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dec:	d901      	bls.n	8005df2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e006      	b.n	8005e00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 0310 	and.w	r3, r3, #16
 8005dfa:	2b10      	cmp	r3, #16
 8005dfc:	d0f0      	beq.n	8005de0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	68f9      	ldr	r1, [r7, #12]
 8005e28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b085      	sub	sp, #20
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005e58:	f023 0303 	bic.w	r3, r3, #3
 8005e5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e6c:	f043 0302 	orr.w	r3, r3, #2
 8005e70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005eb4:	d901      	bls.n	8005eba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e01b      	b.n	8005ef2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	daf2      	bge.n	8005ea8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f043 0201 	orr.w	r2, r3, #1
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ede:	d901      	bls.n	8005ee4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e006      	b.n	8005ef2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d0f0      	beq.n	8005ed2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
	...

08005f00 <malloc>:
 8005f00:	4b02      	ldr	r3, [pc, #8]	@ (8005f0c <malloc+0xc>)
 8005f02:	4601      	mov	r1, r0
 8005f04:	6818      	ldr	r0, [r3, #0]
 8005f06:	f000 b82d 	b.w	8005f64 <_malloc_r>
 8005f0a:	bf00      	nop
 8005f0c:	24000014 	.word	0x24000014

08005f10 <free>:
 8005f10:	4b02      	ldr	r3, [pc, #8]	@ (8005f1c <free+0xc>)
 8005f12:	4601      	mov	r1, r0
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	f000 b8f5 	b.w	8006104 <_free_r>
 8005f1a:	bf00      	nop
 8005f1c:	24000014 	.word	0x24000014

08005f20 <sbrk_aligned>:
 8005f20:	b570      	push	{r4, r5, r6, lr}
 8005f22:	4e0f      	ldr	r6, [pc, #60]	@ (8005f60 <sbrk_aligned+0x40>)
 8005f24:	460c      	mov	r4, r1
 8005f26:	6831      	ldr	r1, [r6, #0]
 8005f28:	4605      	mov	r5, r0
 8005f2a:	b911      	cbnz	r1, 8005f32 <sbrk_aligned+0x12>
 8005f2c:	f000 f8ae 	bl	800608c <_sbrk_r>
 8005f30:	6030      	str	r0, [r6, #0]
 8005f32:	4621      	mov	r1, r4
 8005f34:	4628      	mov	r0, r5
 8005f36:	f000 f8a9 	bl	800608c <_sbrk_r>
 8005f3a:	1c43      	adds	r3, r0, #1
 8005f3c:	d103      	bne.n	8005f46 <sbrk_aligned+0x26>
 8005f3e:	f04f 34ff 	mov.w	r4, #4294967295
 8005f42:	4620      	mov	r0, r4
 8005f44:	bd70      	pop	{r4, r5, r6, pc}
 8005f46:	1cc4      	adds	r4, r0, #3
 8005f48:	f024 0403 	bic.w	r4, r4, #3
 8005f4c:	42a0      	cmp	r0, r4
 8005f4e:	d0f8      	beq.n	8005f42 <sbrk_aligned+0x22>
 8005f50:	1a21      	subs	r1, r4, r0
 8005f52:	4628      	mov	r0, r5
 8005f54:	f000 f89a 	bl	800608c <_sbrk_r>
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d1f2      	bne.n	8005f42 <sbrk_aligned+0x22>
 8005f5c:	e7ef      	b.n	8005f3e <sbrk_aligned+0x1e>
 8005f5e:	bf00      	nop
 8005f60:	24000dd4 	.word	0x24000dd4

08005f64 <_malloc_r>:
 8005f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f68:	1ccd      	adds	r5, r1, #3
 8005f6a:	f025 0503 	bic.w	r5, r5, #3
 8005f6e:	3508      	adds	r5, #8
 8005f70:	2d0c      	cmp	r5, #12
 8005f72:	bf38      	it	cc
 8005f74:	250c      	movcc	r5, #12
 8005f76:	2d00      	cmp	r5, #0
 8005f78:	4606      	mov	r6, r0
 8005f7a:	db01      	blt.n	8005f80 <_malloc_r+0x1c>
 8005f7c:	42a9      	cmp	r1, r5
 8005f7e:	d904      	bls.n	8005f8a <_malloc_r+0x26>
 8005f80:	230c      	movs	r3, #12
 8005f82:	6033      	str	r3, [r6, #0]
 8005f84:	2000      	movs	r0, #0
 8005f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006060 <_malloc_r+0xfc>
 8005f8e:	f000 f869 	bl	8006064 <__malloc_lock>
 8005f92:	f8d8 3000 	ldr.w	r3, [r8]
 8005f96:	461c      	mov	r4, r3
 8005f98:	bb44      	cbnz	r4, 8005fec <_malloc_r+0x88>
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f7ff ffbf 	bl	8005f20 <sbrk_aligned>
 8005fa2:	1c43      	adds	r3, r0, #1
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	d158      	bne.n	800605a <_malloc_r+0xf6>
 8005fa8:	f8d8 4000 	ldr.w	r4, [r8]
 8005fac:	4627      	mov	r7, r4
 8005fae:	2f00      	cmp	r7, #0
 8005fb0:	d143      	bne.n	800603a <_malloc_r+0xd6>
 8005fb2:	2c00      	cmp	r4, #0
 8005fb4:	d04b      	beq.n	800604e <_malloc_r+0xea>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	4639      	mov	r1, r7
 8005fba:	4630      	mov	r0, r6
 8005fbc:	eb04 0903 	add.w	r9, r4, r3
 8005fc0:	f000 f864 	bl	800608c <_sbrk_r>
 8005fc4:	4581      	cmp	r9, r0
 8005fc6:	d142      	bne.n	800604e <_malloc_r+0xea>
 8005fc8:	6821      	ldr	r1, [r4, #0]
 8005fca:	1a6d      	subs	r5, r5, r1
 8005fcc:	4629      	mov	r1, r5
 8005fce:	4630      	mov	r0, r6
 8005fd0:	f7ff ffa6 	bl	8005f20 <sbrk_aligned>
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	d03a      	beq.n	800604e <_malloc_r+0xea>
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	442b      	add	r3, r5
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	f8d8 3000 	ldr.w	r3, [r8]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	bb62      	cbnz	r2, 8006040 <_malloc_r+0xdc>
 8005fe6:	f8c8 7000 	str.w	r7, [r8]
 8005fea:	e00f      	b.n	800600c <_malloc_r+0xa8>
 8005fec:	6822      	ldr	r2, [r4, #0]
 8005fee:	1b52      	subs	r2, r2, r5
 8005ff0:	d420      	bmi.n	8006034 <_malloc_r+0xd0>
 8005ff2:	2a0b      	cmp	r2, #11
 8005ff4:	d917      	bls.n	8006026 <_malloc_r+0xc2>
 8005ff6:	1961      	adds	r1, r4, r5
 8005ff8:	42a3      	cmp	r3, r4
 8005ffa:	6025      	str	r5, [r4, #0]
 8005ffc:	bf18      	it	ne
 8005ffe:	6059      	strne	r1, [r3, #4]
 8006000:	6863      	ldr	r3, [r4, #4]
 8006002:	bf08      	it	eq
 8006004:	f8c8 1000 	streq.w	r1, [r8]
 8006008:	5162      	str	r2, [r4, r5]
 800600a:	604b      	str	r3, [r1, #4]
 800600c:	4630      	mov	r0, r6
 800600e:	f000 f82f 	bl	8006070 <__malloc_unlock>
 8006012:	f104 000b 	add.w	r0, r4, #11
 8006016:	1d23      	adds	r3, r4, #4
 8006018:	f020 0007 	bic.w	r0, r0, #7
 800601c:	1ac2      	subs	r2, r0, r3
 800601e:	bf1c      	itt	ne
 8006020:	1a1b      	subne	r3, r3, r0
 8006022:	50a3      	strne	r3, [r4, r2]
 8006024:	e7af      	b.n	8005f86 <_malloc_r+0x22>
 8006026:	6862      	ldr	r2, [r4, #4]
 8006028:	42a3      	cmp	r3, r4
 800602a:	bf0c      	ite	eq
 800602c:	f8c8 2000 	streq.w	r2, [r8]
 8006030:	605a      	strne	r2, [r3, #4]
 8006032:	e7eb      	b.n	800600c <_malloc_r+0xa8>
 8006034:	4623      	mov	r3, r4
 8006036:	6864      	ldr	r4, [r4, #4]
 8006038:	e7ae      	b.n	8005f98 <_malloc_r+0x34>
 800603a:	463c      	mov	r4, r7
 800603c:	687f      	ldr	r7, [r7, #4]
 800603e:	e7b6      	b.n	8005fae <_malloc_r+0x4a>
 8006040:	461a      	mov	r2, r3
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	42a3      	cmp	r3, r4
 8006046:	d1fb      	bne.n	8006040 <_malloc_r+0xdc>
 8006048:	2300      	movs	r3, #0
 800604a:	6053      	str	r3, [r2, #4]
 800604c:	e7de      	b.n	800600c <_malloc_r+0xa8>
 800604e:	230c      	movs	r3, #12
 8006050:	6033      	str	r3, [r6, #0]
 8006052:	4630      	mov	r0, r6
 8006054:	f000 f80c 	bl	8006070 <__malloc_unlock>
 8006058:	e794      	b.n	8005f84 <_malloc_r+0x20>
 800605a:	6005      	str	r5, [r0, #0]
 800605c:	e7d6      	b.n	800600c <_malloc_r+0xa8>
 800605e:	bf00      	nop
 8006060:	24000dd8 	.word	0x24000dd8

08006064 <__malloc_lock>:
 8006064:	4801      	ldr	r0, [pc, #4]	@ (800606c <__malloc_lock+0x8>)
 8006066:	f000 b84b 	b.w	8006100 <__retarget_lock_acquire_recursive>
 800606a:	bf00      	nop
 800606c:	24000f18 	.word	0x24000f18

08006070 <__malloc_unlock>:
 8006070:	4801      	ldr	r0, [pc, #4]	@ (8006078 <__malloc_unlock+0x8>)
 8006072:	f000 b846 	b.w	8006102 <__retarget_lock_release_recursive>
 8006076:	bf00      	nop
 8006078:	24000f18 	.word	0x24000f18

0800607c <memset>:
 800607c:	4402      	add	r2, r0
 800607e:	4603      	mov	r3, r0
 8006080:	4293      	cmp	r3, r2
 8006082:	d100      	bne.n	8006086 <memset+0xa>
 8006084:	4770      	bx	lr
 8006086:	f803 1b01 	strb.w	r1, [r3], #1
 800608a:	e7f9      	b.n	8006080 <memset+0x4>

0800608c <_sbrk_r>:
 800608c:	b538      	push	{r3, r4, r5, lr}
 800608e:	4d06      	ldr	r5, [pc, #24]	@ (80060a8 <_sbrk_r+0x1c>)
 8006090:	2300      	movs	r3, #0
 8006092:	4604      	mov	r4, r0
 8006094:	4608      	mov	r0, r1
 8006096:	602b      	str	r3, [r5, #0]
 8006098:	f7fa ff3e 	bl	8000f18 <_sbrk>
 800609c:	1c43      	adds	r3, r0, #1
 800609e:	d102      	bne.n	80060a6 <_sbrk_r+0x1a>
 80060a0:	682b      	ldr	r3, [r5, #0]
 80060a2:	b103      	cbz	r3, 80060a6 <_sbrk_r+0x1a>
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	bd38      	pop	{r3, r4, r5, pc}
 80060a8:	24000f14 	.word	0x24000f14

080060ac <__errno>:
 80060ac:	4b01      	ldr	r3, [pc, #4]	@ (80060b4 <__errno+0x8>)
 80060ae:	6818      	ldr	r0, [r3, #0]
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	24000014 	.word	0x24000014

080060b8 <__libc_init_array>:
 80060b8:	b570      	push	{r4, r5, r6, lr}
 80060ba:	4d0d      	ldr	r5, [pc, #52]	@ (80060f0 <__libc_init_array+0x38>)
 80060bc:	4c0d      	ldr	r4, [pc, #52]	@ (80060f4 <__libc_init_array+0x3c>)
 80060be:	1b64      	subs	r4, r4, r5
 80060c0:	10a4      	asrs	r4, r4, #2
 80060c2:	2600      	movs	r6, #0
 80060c4:	42a6      	cmp	r6, r4
 80060c6:	d109      	bne.n	80060dc <__libc_init_array+0x24>
 80060c8:	4d0b      	ldr	r5, [pc, #44]	@ (80060f8 <__libc_init_array+0x40>)
 80060ca:	4c0c      	ldr	r4, [pc, #48]	@ (80060fc <__libc_init_array+0x44>)
 80060cc:	f000 f864 	bl	8006198 <_init>
 80060d0:	1b64      	subs	r4, r4, r5
 80060d2:	10a4      	asrs	r4, r4, #2
 80060d4:	2600      	movs	r6, #0
 80060d6:	42a6      	cmp	r6, r4
 80060d8:	d105      	bne.n	80060e6 <__libc_init_array+0x2e>
 80060da:	bd70      	pop	{r4, r5, r6, pc}
 80060dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e0:	4798      	blx	r3
 80060e2:	3601      	adds	r6, #1
 80060e4:	e7ee      	b.n	80060c4 <__libc_init_array+0xc>
 80060e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ea:	4798      	blx	r3
 80060ec:	3601      	adds	r6, #1
 80060ee:	e7f2      	b.n	80060d6 <__libc_init_array+0x1e>
 80060f0:	080061f0 	.word	0x080061f0
 80060f4:	080061f0 	.word	0x080061f0
 80060f8:	080061f0 	.word	0x080061f0
 80060fc:	080061f4 	.word	0x080061f4

08006100 <__retarget_lock_acquire_recursive>:
 8006100:	4770      	bx	lr

08006102 <__retarget_lock_release_recursive>:
 8006102:	4770      	bx	lr

08006104 <_free_r>:
 8006104:	b538      	push	{r3, r4, r5, lr}
 8006106:	4605      	mov	r5, r0
 8006108:	2900      	cmp	r1, #0
 800610a:	d041      	beq.n	8006190 <_free_r+0x8c>
 800610c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006110:	1f0c      	subs	r4, r1, #4
 8006112:	2b00      	cmp	r3, #0
 8006114:	bfb8      	it	lt
 8006116:	18e4      	addlt	r4, r4, r3
 8006118:	f7ff ffa4 	bl	8006064 <__malloc_lock>
 800611c:	4a1d      	ldr	r2, [pc, #116]	@ (8006194 <_free_r+0x90>)
 800611e:	6813      	ldr	r3, [r2, #0]
 8006120:	b933      	cbnz	r3, 8006130 <_free_r+0x2c>
 8006122:	6063      	str	r3, [r4, #4]
 8006124:	6014      	str	r4, [r2, #0]
 8006126:	4628      	mov	r0, r5
 8006128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800612c:	f7ff bfa0 	b.w	8006070 <__malloc_unlock>
 8006130:	42a3      	cmp	r3, r4
 8006132:	d908      	bls.n	8006146 <_free_r+0x42>
 8006134:	6820      	ldr	r0, [r4, #0]
 8006136:	1821      	adds	r1, r4, r0
 8006138:	428b      	cmp	r3, r1
 800613a:	bf01      	itttt	eq
 800613c:	6819      	ldreq	r1, [r3, #0]
 800613e:	685b      	ldreq	r3, [r3, #4]
 8006140:	1809      	addeq	r1, r1, r0
 8006142:	6021      	streq	r1, [r4, #0]
 8006144:	e7ed      	b.n	8006122 <_free_r+0x1e>
 8006146:	461a      	mov	r2, r3
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	b10b      	cbz	r3, 8006150 <_free_r+0x4c>
 800614c:	42a3      	cmp	r3, r4
 800614e:	d9fa      	bls.n	8006146 <_free_r+0x42>
 8006150:	6811      	ldr	r1, [r2, #0]
 8006152:	1850      	adds	r0, r2, r1
 8006154:	42a0      	cmp	r0, r4
 8006156:	d10b      	bne.n	8006170 <_free_r+0x6c>
 8006158:	6820      	ldr	r0, [r4, #0]
 800615a:	4401      	add	r1, r0
 800615c:	1850      	adds	r0, r2, r1
 800615e:	4283      	cmp	r3, r0
 8006160:	6011      	str	r1, [r2, #0]
 8006162:	d1e0      	bne.n	8006126 <_free_r+0x22>
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	6053      	str	r3, [r2, #4]
 800616a:	4408      	add	r0, r1
 800616c:	6010      	str	r0, [r2, #0]
 800616e:	e7da      	b.n	8006126 <_free_r+0x22>
 8006170:	d902      	bls.n	8006178 <_free_r+0x74>
 8006172:	230c      	movs	r3, #12
 8006174:	602b      	str	r3, [r5, #0]
 8006176:	e7d6      	b.n	8006126 <_free_r+0x22>
 8006178:	6820      	ldr	r0, [r4, #0]
 800617a:	1821      	adds	r1, r4, r0
 800617c:	428b      	cmp	r3, r1
 800617e:	bf04      	itt	eq
 8006180:	6819      	ldreq	r1, [r3, #0]
 8006182:	685b      	ldreq	r3, [r3, #4]
 8006184:	6063      	str	r3, [r4, #4]
 8006186:	bf04      	itt	eq
 8006188:	1809      	addeq	r1, r1, r0
 800618a:	6021      	streq	r1, [r4, #0]
 800618c:	6054      	str	r4, [r2, #4]
 800618e:	e7ca      	b.n	8006126 <_free_r+0x22>
 8006190:	bd38      	pop	{r3, r4, r5, pc}
 8006192:	bf00      	nop
 8006194:	24000dd8 	.word	0x24000dd8

08006198 <_init>:
 8006198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619a:	bf00      	nop
 800619c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800619e:	bc08      	pop	{r3}
 80061a0:	469e      	mov	lr, r3
 80061a2:	4770      	bx	lr

080061a4 <_fini>:
 80061a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a6:	bf00      	nop
 80061a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061aa:	bc08      	pop	{r3}
 80061ac:	469e      	mov	lr, r3
 80061ae:	4770      	bx	lr
